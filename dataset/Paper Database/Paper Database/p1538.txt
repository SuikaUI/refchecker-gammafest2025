Tangent Convolutions for Dense Prediction in 3D
Maxim Tatarchenko∗
University of Freiburg
Jaesik Park∗
Intel Labs
Vladlen Koltun
Intel Labs
Qian-Yi Zhou
Intel Labs
We present an approach to semantic scene analysis using deep convolutional networks. Our approach is based on
tangent convolutions – a new construction for convolutional
networks on 3D data. In contrast to volumetric approaches,
our method operates directly on surface geometry. Crucially, the construction is applicable to unstructured point
clouds and other noisy real-world data. We show that tangent convolutions can be evaluated efﬁciently on large-scale
point clouds with millions of points. Using tangent convolutions, we design a deep fully-convolutional network for
semantic segmentation of 3D point clouds, and apply it to
challenging real-world datasets of indoor and outdoor 3D
environments. Experimental results show that the presented
approach outperforms other recent deep network constructions in detailed analysis of large 3D scenes.
1. Introduction
Methods that utilize convolutional networks on 2D images dominate modern computer vision. A key contributing
factor to their success is efﬁcient local processing based on
the convolution operation. 2D convolution is deﬁned on a
regular grid, a domain that supports extremely efﬁcient implementation. This in turn enables using powerful deep architectures for processing large datasets at high resolution.
When it comes to analysis of large-scale 3D scenes, a
straightforward extension of this idea is volumetric convolution on a voxel grid . However, voxel-based
methods have limitations, including a cubic growth rate
of memory consumption and computation time. For this
reason, voxel-based ConvNets operate on low-resolution
voxel grids that limit their prediction accuracy. The problem can be alleviated by octree-based techniques that de-
ﬁne a ConvNet on an octree and enable processing somewhat higher-resolution volumes (e.g., up to 2563 voxels) . Yet even this may be insufﬁcient
for detailed analysis of large-scale scenes.
On a deeper level, both efﬁcient and inefﬁcient voxelbased methods treat 3D data as volumetric by exploiting 3D
∗Equal contribution.
Figure 1. Convolutional networks based on tangent convolutions
can be applied to semantic analysis of large-scale scenes, such
as urban environments. Top: point cloud from the Semantic3D
Bottom: semantic segmentation produced by the presented approach.
convolutions that integrate over volumes. In reality, data
captured by 3D sensors such as RGB-D cameras and Li-
DAR typically represent surfaces: 2D structures embedded
in 3D space. (This is in contrast to truly volumetric 3D data,
as encountered for example in medical imaging.) Classic
features that are used for the analysis of such data are de-
ﬁned in terms that acknowledge the latent surface structure,
and do not treat the data as a volume .
The drawbacks of voxel-based methods are known in the
research community. A number of recent works argue that
volumetric data structures are not the natural substrate for
3D ConvNets, and propose alternative designs based on unordered point sets , graphs , and sphere-type surfaces . Unfortunately, these methods come with their
own drawbacks, such as limited sensitivity to local structure or restrictive topological assumptions.
We develop an alternative construction for convolutional
networks on surfaces, based on the notion of tangent conarXiv:1807.02443v1 [cs.CV] 6 Jul 2018
volution. This construction assumes that the data is sampled from locally Euclidean surfaces. The latent surfaces
need not be known, and the data can be in any form that
supports approximate normal vector estimation, including
point clouds, meshes, and even polygon soup. (The same
assumption concerning normal vector estimation is made by
both classic and contemporary geometric feature descriptors .) The tangent convolution is
based on projecting local surface geometry on a tangent
plane around every point. This yields a set of tangent images. Every tangent image is treated as a regular 2D grid
that supports planar convolution. The content of all tangent images can be precomputed from the surface geometry,
which enables efﬁcient implementation that scales to large
datasets, such as urban environments.
Using tangent convolution as the main building block,
we design a U-type network for dense semantic segmentation of point clouds. Our proposed architecture is general and can be applied to analysis of large-scale scenes.
We demonstrate its performance on three diverse real-world
datasets containing indoor and outdoor environments. A semantic segmentation produced by a tangent convolutional
network is shown in Figure 1.
2. Related Work
Dense prediction in 3D, including semantic point cloud
segmentation, has a long history in computer vision. Pioneering methods work on aerial LiDAR data and are
based on hand-crafted features with complex classiﬁers on
top .
Such approaches can also be combined
with high-level architectural rules . A popular line of
work exploits graphical models, including conditional random ﬁelds . Related formulations have also been proposed for interactive 3D segmentation .
More recently, the deep learning revolution in computer
vision has spread to consume 3D data analysis. A variety of
methods that tackle 3D data using deep learning techniques
have been proposed. They can be considered in terms of the
underlying data representation.
A common representation of 3D data for deep learning
is a voxel grid. Deep networks that operate on voxelized
data have been applied to shape classiﬁcation ,
semantic segmentation of indoor scenes , and biomedical recordings .
Due to the cubic complexity of
voxel grids, these methods can only operate at low resolution – typically not more than 643 – and have limited accuracy.
Attempting to overcome this limitation,
researchers have proposed representations based on hierarchical spatial data structures such as octrees and kdtrees , which are more memoryand computation-efﬁcient, and can therefore handle higher
resolutions.
An alternative way of increasing the accuracy of voxel-based techniques is to add differentiable postprocessing, modeled upon the dense CRF .
Other applications of deep networks consider RGB-D
images, which can be treated with fully-convolutional networks and graph neural networks . These
approaches support the use of powerful pretrained 2D networks, but are not generally applicable to unstructured point
clouds with unknown sensor poses. Attempting to address
this issue, Boulch et al. train a ConvNet on images rendered from point clouds using randomly placed virtual cameras. In a more controlled setting with ﬁxed camera poses,
multi-view methods are successfully used for shape segmentation , shape recognition , and shape synthesis . Our approach can be viewed as an
extreme multi-view approach in which a virtual camera is
associated with each point in the point cloud. A critical
problem that we address is the efﬁcient and scalable implementation of this approach, which enables its application to
dense point clouds of large-scale indoor and outdoor environments.
Qi et al. propose a network for analysing unordered
point sets, which is based on independent point processing combined with global context aggregation through maxpooling. Since the communication between the points is
quite weak, this approach experiences difﬁculties when applied to large-scale scenes with complex layouts.
There is a variety of more exotic deep learning formulations for 3D analysis that do not address large-scale semantic segmentation of whole scenes but provide interesting
ideas. Yi et al. consider shape segmentation in the spectral domain by synchronizing eigenvectors across models.
Masci et al. and Boscaini et al. design ConvNets
for Riemannian manifolds and use them to learn shape correspondences. Sinha et al. perform shape analysis on
geometry images. Simonovsky et al. extend the convolution operator from regular grids to arbitrary graphs and
use it to design shape classiﬁcation networks. Li et al. 
introduce Field Probing Neural Networks which respect the
underlying sparsity of 3D data and are used for efﬁcient feature extraction. Tulsiani et al. approximate 3D models
with volumetric primitives in an end-to-end differentiable
framework, and use this representation for solving several
tasks. Maron et al. design ConvNets on surfaces for
sphere-type shapes.
Overall, most existing 3D deep learning systems either
rely on representations that do not support general scene
analysis, or have poor scalability. As we will show, deep
networks based on tangent convolutions scale to millions of
points and are suitable for detailed analysis of large scenes.
3. Tangent Convolution
In this section we formally introduce tangent convolutions. All derivations are provided for point clouds, but they
Figure 2. Points q (blue) from the local neighborhood of a point p
(red) are projected onto the tangent image.
can easily be applied to any type of 3D data that supports
surface normal estimation, such as meshes.
Convolution with a continuous kernel. Let P = {p} be a
point cloud, and let F(p) be a discrete scalar function that
represents a signal deﬁned over P. F(p) can encode color,
geometry, or abstract features from intermediate network
layers. In order to convolve F, we need to extend it to a
continuous function. Conceptually, we introduce a virtual
orthogonal camera for p. It is conﬁgured to observe p along
the normal np. The image plane of this virtual camera is
the tangent plane πp of p. It parameterizes a virtual image
that can be represented as a continuous signal S(u), where
u ∈R2 is a point in πp. We call S a tangent image.
The tangent convolution at p is deﬁned as
c(u)S(u) du,
where c(u) is the convolution kernel. We now describe how
S is computed from F.
Tangent plane estimation. For each point p we estimate
the orientation of its camera image using local covariance
analysis. This is a standard procedure but we summarize it here for completeness. Consider a set of points q
from a spherical neighborhood of p, such that ∥p−q∥< R.
The orientation of the tangent plane is determined by the
eigenvectors of the covariance matrix C = P
q rr⊤, where
r = q −p. The eigenvector of the smallest eigenvalue de-
ﬁnes the estimated surface normal np, and the other two
eigenvectors i and j deﬁne the 2D image axes that parameterize the tangent image.
Signal interpolation. Now our goal is to estimate image
signals S(u) from point signals F(q). We begin by projecting the neighbors q of p onto the tangent image, which
yields a set of projected points v = (r⊤i, r⊤j). This is
illustrated in Figure 2. We deﬁne
S(v) = F(q).
As shown in Figure 2 and Figure 3(a), points v are scattered
Figure 3. Signals from projected points (a) can be interpolated using one of the following schemes: nearest neighbor (b), full Gaussian mixture (c), and Gaussian mixture with top-3 neighbors (d).
on the image plane. We thus need to interpolate their signals
in order to estimate the full function S(u) over the tangent
 w(u, v) · S(v)
where w(u, v) is a kernel weight that satisﬁes P
We consider two schemes for signal interpolation: nearest
neighbor and Gaussian kernel mixture. These schemes are
illustrated in Figure 3. In the nearest neighbor (NN) case,
if v is u’s NN,
otherwise.
In the Gaussian kernel mixture case,
w(u, v) = 1
where A normalizes the weights such that P
v w = 1. More
sophisticated signal interpolation schemes can be considered, but we have not observed a signiﬁcant effect of the
interpolation scheme on empirical performance and will
mostly use simple nearest-neighbor estimation.
Finally, if we rewrite Equation (1) using the deﬁnitions
from Equations (2) and (3), we get the formula for the tangent convolution:
 w(u, v) · F(q)
Note that the role of the tangent image is increasingly
implicit: it provides the domain for u and ﬁgures in the
evaluation of the weights w, but otherwise it need not be explicitly maintained. We will build on this observation in the
next section to show that tangent convolutions can be evaluated efﬁciently at scale, and can support the construction
of deep networks on point clouds with millions of points.
4. Efﬁciency
In this section we describe how the tangent convolution
deﬁned in Section 3 can be computed efﬁciently. In practice, the tangent image is treated as a discrete function on a
regular l×l grid. Elements u are pixels in this virtual image. The convolution kernel c is a discrete kernel applied
onto this image. Let us ﬁrst consider the nearest-neighbor
signal interpolation scheme introduced in Equation (4). We
can rewrite Equation (6) as
where g(u) is a selection function that returns a point which
projects to the nearest neighbor of u on the image plane.
Note that g only depends on the point cloud geometry and
does not depend on the signal F. This allows us to precompute g for all points.
From here on, we employ standard ConvNet terminology and proceed to show how to implement a convolutional
layer using tangent convolutions. Our goal is to convolve an
input feature map Fin of size N×Cin with a set of weights
W to produce an output feature map Fout of size N×Cout,
where N is the number of points in the point cloud, while
Cin and Cout denote the number of input and output channels respectively. For implementation, we unroll 2D tangent
images and convolutional ﬁlters of size l×l into 1D vectors
of size 1×L, where L = l2. From then on, we compute 1D
convolutions. Note that such representation of a 2D tangent
convolution as a 1D convolution is not an approximation:
the results of the two operations are identical.
We start by precomputing the function g, which is represented as an N×L index matrix I. Elements of I are indices
of the corresponding tangent-plane nearest-neighbors in the
point cloud. Using I, we gather input signals (features) into
an intermediate tensor M of size N ×L×Cin. This tensor
is convolved with a ﬂattened set of kernels W of size 1×L,
which yields the output feature map Fout. This process is
illustrated in Figure 4.
Consider now the case of signal interpolation using
Gaussian kernel mixtures. For efﬁciency, we only consider
the set of top-k neighbors for each point, denoted NNk. An
example image produced using the Gaussian kernel mixture
scheme with top-3 neighbors is shown in Figure 3(d). Equation (5) turns into
otherwise,
where A normalizes weights such that P
v w = 1. With
this approximation, each pixel u has at most k non-zero
weights, denoted by w1..k(u). Their corresponding selection functions are denoted by g1..k(u). Both the weights
and the selection functions are independent of the signal F,
Figure 4. Efﬁcient evaluation of a convolutional layer built on tangent convolutions.
and are thus precomputed. Equation (6) becomes
 wi(u) · F(gi(u))
wi(u) · c(u) · F(gi(u))
nearest-neighbor
interpolation
scheme, we represent the precomputed selection functions
gi as k index matrices Ii of size N ×L. These index matrices are used to assemble k intermediate signal tensors Mi
of size N ×L×Cin. Additionally, we collate the precomputed weights into k weight matrices Hi of size N×L. They
are used to compute the weighted sum M = P
which is ﬁnally convolved with the kernel W.
We implemented1 the presented construction in Tensor-
Flow . It consists entirely of differentiable atomic operations, thus backpropagation is done seamlessly using the
automatic differentiation functionality of the framework.
5. Additional Ingredients
In this section we introduce additional ingredients that
are required to construct a convolutional network for point
cloud analysis.
5.1. Multi-scale analysis
Pooling. Convolutional networks commonly use pooling
to aggregate signals over larger spatial regions. We implement pooling in our framework via hashing onto a regular
3D grid. Points that are hashed onto the same grid point
pool their signals. The spacing of the grid determines the
pooling resolution. Consider points P = {p} and corresponding signal values {F(p)}. Let g be a grid point and
let Vg be the set of points in P that hash to g. (The hash
function can be assumed to be simple quantization onto the
grid in each dimension.) Assume that Vg is not empty and
consider average pooling. All points in Vg and their signals
are pooled onto a single point:
F(p). (11)
1 
In a convolutional network based on tangent convolutions,
we pool using progressively coarser grids. Starting with
some initial grid resolution (5cm in each dimension, say),
each successive pooling layer increases the step of the grid
by a factor of two (to 10cm, then 20cm, etc.). Such hashing
also alleviates the problem of non-uniform point density.
As a result, we can select the neighborhood radius for the
convolution operation globally for the entire dataset.
After each pooling layer, the radius r that is used to estimate the tangent plane and the pixel size of the virtual tangent image are doubled accordingly. Thus the resolution of
all tangent images decreases in step with the resolution of
the point cloud. Note that the downsampled point clouds
produced by pooling layers are independent of the signals
deﬁned over them. The downsampled point clouds, the associated tangent planes, and the corresponding index and
weight functions can thus all be precomputed for all layers
in the convolutional network: they need only be computed
once per pooling layer.
The implementation of a pooling layer is similar in spirit
to that of a convolutional layer described in Section 4. Consider an input feature map Fin of size Nin×C. Using grid
hashing, we assemble an index matrix I of size Nout ×8,
which contains indices of points that hash to the same grid
point. Assuming that we decrease the grid resolution by
a factor of 2 in each dimension in each pooling layer, the
number of points that hash to the same grid point will be
at most 8 in general. (For initialization, we quantize the
points to some base resolution.) Using I, we assemble an
intermediate tensor of size Nout×8×C. We pool this tensor
along the second dimension according to the pooling operator (max, average, etc.), and thus obtain an output feature
map Fout of size Nout×C.
Note that all stages in this process have linear complexity
in the number of points. Although points are hashed onto
regular grids, the grids themselves are never constructed or
represented. Hashing is performed via modular arithmetic
on individual point coordinates, and all data structures have
linear complexity in the number of points, independent of
the extent of the point set or the resolution of the grid.
Unpooling. The unpooling operation has an opposite effect to pooling:
it distributes signals from points in a
low-resolution feature map Fin onto points in a higherresolution feature map Fout. Unpooling reuses the index
matrix from the corresponding pooling operation. We copy
features from a single point in a low-resolution point cloud
to multiple points from which the information was aggregated during pooling.
5.2. Local distance feature
So far, we have considered signals that could be expressed in terms of a scalar function F(q) with a welldeﬁned value for each point q. This holds for color, inm 32 32
Figure 5. We use a fully-convolutional U-shaped network with
skip connections. The network receives m-dimensional features
as input and produces prediction scores for n classes.
tensity, and abstract ConvNet features. There is, however,
a signal that cannot be expressed in such terms and needs
special treatment.
This signal is distance to the tangent
This local signal is calculated by taking the
distance from each neighbor q to the tangent plane of p:
d = (q −p)⊤np.
This signal is deﬁned in relation to the point p, therefore it cannot be directly plugged into the pipeline shown
in Figure 4. Instead, we precompute the distance images
for every point. Scattered signal interpolation is done in the
same way as for scalar signals (Equation (3)). After assembling the intermediate tensor M for the ﬁrst convolutional
layer, we simply concatenate these distance images as an
additional channel in M. The ﬁrst convolutional layer generates a set of abstract features Fout that can be treated as
scalar signals from here on.
precomputations
implemented
Open3D .
6. Architecture
Using the ingredients introduced in the previous sections, we design an encoder-decoder network inspired by
the U-net . The network architecture is illustrated in
Figure 5. It is a fully-convolutional network over a point
cloud, where the convolutions are tangent convolutions.
The encoder contains two pooling layers. The decoder contains two corresponding unpooling layers. Encoder features
are propagated to corresponding decoder blocks via skipconnections. All layers except the last one use 3 × 3 ﬁlters and are followed by Leaky ReLU with negative slope
0.2 . The last layer uses 1×1 convolutions to produce
ﬁnal class predictions. The network is trained by optimizing
the cross-entropy objective using the Adam optimizer with
initial learning rate 10−4 .
Receptive ﬁeld. The receptive ﬁeld size of one convolutional layer is determined by the pixel size r of the tangent
image and the radius R that is used to collect the neighbors
of each point p. We set R = 2r, therefore the receptive
ﬁeld size of one layer is R. After each pooling layer, r is
doubled. The receptive ﬁeld of an element in the network
can be calculated by tracing the receptive ﬁelds of preceding layers. With initial r = 5cm, the receptive ﬁeld size of
elements in the ﬁnal layer of the presented architecture is
4 · 10 + 4 · 20 + 2 · 40 = 200cm.
7. Experiments
We evaluate the performance of the presented approach
on the task of semantic 3D scene segmentation. Our approach is compared to recent deep networks for 3D data on
three different datasets.
7.1. Datasets and measures
We conduct experiments on three large-scale datasets
that contain real-world 3D scans of indoor and outdoor environments.
Semantic3D is a dataset of scanned outdoor scenes
with over 3 billion points. It contains 15 training and 15 test
scenes annotated with 8 class labels. Being unable to evaluate the baseline results on the ofﬁcial test server, we use our
own train/test split: Bildstein 1-3-5 are used for testing, the
rest for training.
Large-Scale
(S3DIS) contains 6 large-scale indoor areas from 3
different buildings, with 13 object classes. We use Area 5
for testing and the rest for training.
ScanNet is a dataset with more than 1,500 scans of
indoor scenes with 20 object classes collected using an
RGB-D capture system. We follow the standard train/test
split provided by the authors.
Measures. We report three measures: mean accuracy over
classes (mA), mean intersection over union (mIoU), and
overall accuracy (oA). We build a full confusion matrix
based on the entire test set, and derive the ﬁnal scores from
it. Measures are evaluated over the original point clouds.
For approaches that produce labels over downsampled or
voxelized representations, we map these predictions to the
original point clouds via nearest-neighbor assignment.
Although we report oA for completeness, it is not a good
measure for semantic segmentation. If there are dominant
classes in the data (e.g., walls, ﬂoor, and ceiling in indoor
scenes), making correct predictions for these but poor predictions over the other classes will yield misleadingly high
oA scores.
7.2. Baselines
We compare our approach to three recent deep learning methods that operate on different underlying representations. We have chosen reasonably general methods that
have the potential to be applied to general scene analysis and have open-source implementations. Our baselines
are PointNet , which operates on points, ScanNet ,
which operates on low-resolution voxel grids, and Oct-
Net , which operates on higher-resolution octrees. We
used the source code provided by the authors. Due to the design of these methods, the data preparation routines and the
input signals are different for each dataset, and sometimes
deviate from the guidelines provided in the papers.
PointNet. For indoor datasets, we used the data sampling
strategy suggested in the original paper with global xyz, locally normalized xyz, and RGB as inputs. For Semantic3D,
we observed global xyz to be harmful, thus we only use local xyz and color. Training data is generated by randomly
sampling (3m)3 cubes from the training scenes. Evaluation
is performed by applying a sliding window over the entire
ScanNet. The original network used 2 input channels: occupancy and a visibility mask computed using known camera trajectories. Since scenes in general are not accompanied by known camera trajectories, we only use occupancy
in the input signal. Following the original setup, we use
1.5×1.5×3m volumes voxelized into 31×31×62 grids and
augmented by 8 rotations. Each such cube yields a prediction for one 1×1×62 column. (I.e., the ScanNet network
outputs a prediction for the central column only.) We use
random sampling for training, and exhaustive sliding window for testing.
OctNet. We use an architecture that operates on 2563 octrees. Inputs to the network are color, occupancy, and a
height-based feature that assigns each point to the top or
bottom part of the scan. Based on correspondence with the
authors regarding the best way to set up OctNet on different datasets, we used (45m)3 volumes for Semantic3D and
(11m)3 volumes for the indoor datasets.
7.3. Setup of the presented approach
The architecture described in Section 6 is used in all experiments. We evaluate four variants that use different input signals: distance from tangent plane (D), height above
ground (H), normals (N), and color (RGB). All input signals
are normalized between 0 and 1. The initial resolution r of
the tangent image is 5cm for the indoor datasets and 10cm
for Semantic3D. It is doubled after each pooling layer. In
addition to providing the distance from tangent plane as input to the ﬁrst convolutional layer, we concatenate the local
distance features from all scales of the point cloud to the
feature maps of the corresponding resolution produced by
pooling layers.
For ScanNet and S3DIS, we used whole rooms as individual training batches. For Semantic3D, each batch was
a random sphere with a radius of 6m. For indoor scans,
we augment each scan by 8 rotations around the vertical
axis. To correct for imbalance between different classes,
we weigh the loss with the negative log of the training data
histogram.
7.4. Signal interpolation
We begin by comparing the effectiveness of two different
signal interpolation schemes: nearest neighbor and Gaussian mixture. Both networks were trained on S3DIS with
D and H as the input signals. The resulting segmentation
scores are provided in the supplement. The two networks
produce similar results. We conclude that the nearest neighbor signal estimation scheme is sufﬁcient, and use it in all
other experiments.
7.5. Main results
Quantitative results for all methods are summarized in
Table 2. Overall, our method produces high scores on all
datasets and consistently outperforms the baselines. Qualitative comparisons are shown in Figure 6.
Comparing the conﬁgurations of our networks that use
different input signals, we can see that geometry is much
more important than color on the indoor datasets. Adding
RGB information only slightly improves the scores on
S3DIS and is actually harmful for mean and overall accuracy on the ScanNet dataset. The situation is different for
the Semantic3D dataset: the network trained with color signiﬁcantly outperforms all other conﬁgurations. Due to the
fact that H is normalized between 0 and 1 for every scan
separately, this information turns out to be harmful when
the global height of different scans is signiﬁcantly different.
Therefore, the network trained only with the distance signal
performs better than the other two geometric conﬁgurations.
In setting up and operating the baseline methods, we
found that all of them are quite hard to apply across datasets:
some non-trivial decisions had to be made for each new
dataset during the data preparation stage. None of the baselines showed consistent performance across the different
types of scenes.
PointNet reaches high oA scores on both indoor datasets.
However, the oA measure is strongly dominated by large
classes such as walls, ﬂoor, and ceiling. S3DIS has a fairly
regular layout because of the global room alignment procedure, which is very beneﬁcial for PointNet and allows it
to reach reasonable mA and mIoU scores on this dataset.
However, PointNet performs poorly on the ScanNet dataset,
which has more classes and noisy data. All but the most
prominent classes (i.e., walls and ﬂoor) are misclassiﬁed.
PointNet completely fails to produce meaningful predictions on the even more challenging Semantic3D dataset.
Our conﬁguration of the ScanNet method produces reasonable oA scores on both indoor datasets, but does much
worse in the other two measures.
For reference, on the
ScanNet dataset we additionally report the number from the
original paper where a binary visibility-from-camera mask
was used as an additional input channel. This number is
much higher than our occupancy-only results, which do not
assume a known camera trajectory. Due to the fact that the
network only outputs predictions for the central column of
the voxel grid, evaluation is extremely time-consuming for
the large scenes in the Semantic3D dataset. Because of this
scalability issue, we did not succeed in evaluating ScanNet
on this dataset.
OctNet reaches good performance on the Semantic3D
dataset. However, the same network conﬁguration yields
bad results when applied to the indoor datasets. A possible explanation for this may be poor generalization due to
overﬁtting to the structure of training octrees.
7.6. Efﬁciency
We compared the efﬁciency of different methods on a
scan from S3DIS containing 125K points after grid hashing. The results are reported in Table 1. Since ScanNet
and PointNet require multiple iterations for labeling a single
scan, we report both the time of a single forward pass and
the time for processing a full scan. OctNet and our method
process a full scan in one forward pass, which also explains their higher memory consumption compared to Scan-
Net and PointNet. ScanNet does not provide code for data
preprocessing, so we report the runtime of our Python implementation needed for generating 38K sliding windows
during inference. Our method exhibits the best runtime for
both precomputation and inference.
Table 1. Efﬁciency of different methods. We report preprocessing
time (Prep), time for a single forward pass (FP), time for processing a full scan (Full), and memory consumption (Mem).
8. Conclusion
We have presented tangent convolutions – a new construction for convolutional networks on 3D data. The key
idea is to evaluate convolutions on virtual tangent planes at
every point. Crucially, tangent planes can be precomputed
and deep convolutional networks based on tangent convolutions can be evaluated efﬁciently on large point clouds.
We have applied tangent convolutions to semantic segmentation of large indoor and outdoor scenes. The presented
ideas may also be applicable to other problems in analysis,
processing, and synthesis of 3D data.
Semantic3D 
ScanNet 
PointNet 
OctNet 
ScanNet 
19.2 (50.8)
69.4 (73.0)
Ours (DHN)
Ours (DHNRGB)
Table 2. Semantic segmentation accuracy for all methods across the three datasets. We report mean intersection over union (mIoU), mean
class accuracy (mA), and overall accuracy (oA). Note that oA is a bad measure and we recommend against using it in the future. We tested
different conﬁgurations of our method by combining four types of input signals: depth (D), height (H), normals (N), and color (RGB).
PointNet 
ScanNet 
OctNet 
Ours (DHNRGB)
Ground truth
G Ceiling G Floor G Walls G Column G Door G Table G Chair G Sofa G Bookcase G Board G Clutter
OctNet 
Ours (DHNRGB)
Ground truth
G Man made terrain G Natural terrain G High vegetation G Low vegetation G Building G Hardscape G Scanning artifacts G Cars
Figure 6. Qualitative comparisons on S3DIS (top) and Semantic3D (bottom). Labels are coded by color.