December 1980
DISTRIBUTED DYNAMIC PROGRAMMING*
Dimitri P. Bertsekas**
We consider distributed algorithms for solving dynamic programming
problems whereby several processors participate simultaneously in the
computation while maintaining coordination by information exchange via
communication links. A model of asynchronous distributed computation
is developed which requires very weak assumptions on the ordering of
computations, the timing of information exchange, the amount of local
information needed at each computation node, and the initial conditions
for the algorithm. The class of problems considered is very broad and
includes shortest path problems, and finite and infinite horizon stochastic
optimal control problems. When specialized to a shortest path problem
the algorithm reduces to the algorithm originally implemented for routing
of messages in the ARPANET.
*This research was conducted at the M.I.T. Laboratory for Information
and Decision Systems with partial support provided by the National Science
Foundation Grant No. NSF/ECS 79-19880.
**Room No. 35-210, Laboratory for Information and Decision Systems,
Massachusetts Institute of Technology, Cambridge, Mass. 02139.
LIDS-P-1060
Introduction
Recent advances in microcomputer technology have intensified interest
in distributed computation schemes.
Aside from modular expandability, other
potentf'a--d-atages o-f such schemes are a reduction in computation time
solving a given problem due to parallelism of computation, and elimination
of the need to communicate problem data available at geographically dispersed data collection points to a computation center.
The first advantage
is of crucial importance in real time applications where problem solution
time can be an implementation bottleneck.
The second advantage manifests
itself for example in applications involving communication networks
where there is a natural decentralization of problem data acquisition.
The structure of dynamic programming naturally lends itself well to
distributed computation since it involves calculations that to a great
extent can be carried out in parallel.
In fact it
is trivial to devise
simple schemes taking advantage of this structure whereby the calculation,
involved in each iteration of the standard form of the algorithm is simply
shared by several processors.
Such schemes require a certain degree of
synchronization in that all processors must complete their assigned
portion of the computation before a new iteration can begin. As a result
complex protocols for algorithm initiation and processor synchronization may
be necessary, and the speed of computation is limited to that of the slowe'st
processor.
These drawbacks motivate distributed algorithms whereby computation is performed asynchronously at various nodes and independently
of the progress in other nodes.
Their potential advantages are simpler
implementation, faster convergence to a solution and, possibly, a reduction in information exchange between computation nodes.
_____·····ll.i··-·-----I--
-·--_
This paper considers an asynchronous distributed algorithm.
Lfor a broad class of dynamic programming problems. This class is described
in Section 2. The distributed computation model is described in Section 3.
It is shown in Section 4 that the algorithm converges to the correct
solution under very weak assumptions. For some classes of problems convergence in finite time is demonstrated.
These include-shortest .--path problems for which the distributed algorithm of this paper turns
out to be essentially the same as the routing algorithm originally
implemented in the ARPANET in 1969 .
To our knowledge there is no
published proof of convergence of this algorithm.
2. Problem Formulation
We use an abstract framework of dynamic programming, first introduced
in , which includes as special cases a number of specific problems
of practical interest.
Let S and C be two sets referred to as the state space and the
control space respectively. Elements of S and C are referred to as
states and controls and are denoted by x and u respectively.
x6S we are given a subset U(x) C C referred to as the control constraint
set at x. Let F be the set of all extended real valued functions
J: S-+[-,o] on S. For any two functions J1, J2 CF we use the notation
Jl(x) < J2(x),
Jl(X) = J2(x),
S x C x F + [-]
be a mapping which is monotone in the sense
that for all x£S and uU(x) we have
H(x,u,J 1)
< H(x,u,J2),
V J1' J2eF, with J1 <
Given a subset F c F the problem is to find a function J*sF such that
H(x,u,J*),
By considering the mapping T;
F -+ F defined by
the problem is alternately stated as one of finding a fixed point of T
within F, i.e., a function J*F such that
J* = T(J*).
We will assume throughout that T has a unique fixed point within F.
We provide some examples that illustrate the broad scope of the
problem formulation just given.
Example 1 (Shortest Path Problems):
Let (N,L) be a directed graph where
N = {1,2,...,n} denotes the set of nodes and L denotes the set of links.
Let N(i) denote the downstream neighbors of node i, i.e., the set of
nodes j for which (i,j) is a link.
Assume that each link (i,j) is
assigned a positive scalar a.. referred to as its length. Assume also
that there is a directed path to node 1 from every other node. Then it
is known ( , p. 67) that the shortest path distances d to node 1 from
all other nodes i solve uniquely the equations
{a.. + d},
If we make the identifications
we find that the abstract problem (3) reduces to the shortest path problem.
Example 2 (Infinite Horizon Stochastic Optimal Control problems):
be given by
E{g(x,u,w) +
J[f(x,u,w)]Jx.,u}
-6where the following are assumed:
The parameter w takes values in a countable set W with given
probability distribution p(dwlx,u) depending on x and u, and E-Ix,u
denotes expected value with respect to this distribution.
The functions g and f map S x C x W into [-o,oo] and S respectively.
The scalar
is positive.
Because the set W is assumed countable the expected value in (9)
is well defined for all JF in terms of infinite summation provided we
use the convention + -
= +oo (see , p.31).
is possible to consider a more general probabilistic structure for W (see ) 4t th,
expense of complicating the presentation but this does not seem
worthwhile in view of the computational purposes of the paper.
It is shown in that with this definition of H the abstract
problem (3) reduces under more specific assumptions to various types of
standard stochastic optimal control problems.
g is uniformly
bounded above and below by some scalars and 0 < a
1 the- problem is
equivalent to the standard infinite horizon discounted stochastic optimal
control problem with bounded cost per stage (see Sections 6.1-6.3).
Under these circumstances the mapping T of (4) has a unique fixed point
J* in the class of all bounded real valued functions on S and J* is the
optimal value function of the corresponding stochastic optimal control
If we assume that 0 < g(x,u,w) or g(x,u,w) < 0 for all (x,u,w)S x C x W
then we obtain stochastic optimal control problems of the type discussed
extensively, for example,
in , Sections 6.4-6.6, 7.1-7.4, and , Chapter 5.
__ _1_____1_111_____________ll
If J* is the optimal value function for such a problem then J* is
the unique fixed point of T over all functions JF such that 0 < J < J*
if 0 < g(x,u,w) for all (x,u,w), or J* < J < 0
if g(x,u,w) < 0 for
all (x,u,w) (see , p. 256).
Example'3 (Finite Horizon Stochastic Optimal Control Problems):
S,C,U(x), W, p(dwlx,u), g and f be as in Example 2 and consider the set
of equations
E g(xkukwk) + Jk+l[f(xkukwk)]lxkUk
UkZU (x k )
k = 0,1,...,N-l, XkES,
where N is a positive integer. These are the usual dynamic
programming equations associated with finite horizon stochastic optimal
control problems with zero terminal cost and stationary cost per stage
and system function. It is possible to write these equations in the
form (3) by defining a new state space consisting of an (N+l)-fold
Cartesian product of S with itself, writing J* = (JoJ1l...,JN), and
appropriately defining H on the basis of (10).
In fact this is a standard
procedure for converting a finite horizon problem to an infinite horizon
problem (see -
 , p. 325).
This reformulation can also be trivially
generalized to finite horizon problems involving a nonzero terminal cost
and a nonstationary system and cost per stage.
3. A Model for Distributed Dynamic Programming
Our algorithm can be described in terms of a collection of n computation centers referred to as nodes 'and denoted 1,2,...,n. The state
space S is partitioned into n disjoint sets denoted S...,S
node i is assigned the responsibility of computing the values of the
solution function J* at all'states x in the-correspopding set S.
j is said to be a neighbor of node i if j
i and there exist a state
x.iSi and two functions J1,J2EF such that
= J2 (x) ,
¢ T(J2)(xi).
The set of all neighbors of i is denoted N(i).
Intuitively j is not a
neighbor of i if, for every JF, the values of J on S do not influence
the values of T(J) on S.
As a result, for any JF, in order for node
i to be able to compute T(J) on S. it is only necessary to know the values
of J on the sets Sj, jN(i), and, possibly,-on the set-S..
At each time instant, node i can be in one of three possible states
compute, transmit, or idle.
In the compute state node i computes a new
estimate of the values of the solution function J* for all states xS..
In the transmit state node i communicates the estimate obtained from
the latest compute phase to one or more nodes m for which iN(m).
the idle state node i does nothing related to the solution of the problem.
Each node i also has one buffer per neighbor jN(i) denoted B.. where
it stores the latest transmission from j, as well as a buffer Bii where
it stores its own estimate of values of the solution function J* for
-9all states xS..
It is assumed that a node can receive a transmission
from neighbors simultaneously with computing or transmitting, but this
is not a real restriction since, if needed, a time period in a separate
receive state can be lumped into a time period in the idle state.
We assume that computation and transmission for each node takes
place in uninterupted time intervals [tl,t 2] with t1
< t2, but do not
exclude the possibility that a node may be simultaneously transmitting
to more than one nodes nor do we assume that the transmission invervals
to these nodes have the same origin and/or termination. We also make
no assumptions on the
length, timing and sequencing of computation and transmission invervals other than the following:
Assumption (A):
There exists a positive scalar P such that, for every
node i, every time interval of length P contains at least one computation
inverval for i and at least one transmission interval from i to each
node mwith iN(m).
The contents of each buffer B.. where j=i or jN(i) at time t are
denoted J .. Thus J
is, for every t, a function from S. into [-a,m]
and may be viewed as the estimate By node i of the restriction of the
solution function J* on S. available at time t. The rules according
to which the functions J.
are updated are as follows:
1) If [tl,t 2] is a transmission interval for node j to
node i with
isN(j) the contents J
of the buffer B.. at time t are transmitted
and entered in the buffer Bij at time t2, i.e.
2) If [tl,t 2] is a computation interval for node i the contents of
buffer B..ii at time t2 are replaced by the restriction of the function
T(Ji ) on S where,.for all t, J is defined by
if xS. and jsN(i)
In other words we have
H(x,u,J ),
3) The contents of a buffer Bii can change only at the end of a
computation interval for node i. The contents of a buffer Bij, jsN(i),
can change only at the end of a transmission interval from j to i.
Note that by
definition of the neighbor set N(i), the value
T(Jit) (x) for xS. does not depend on the values of J t at states xS
with mi, and mgN(i)7.
We have assigned arbitrarily the default
value zero to these states in (13).
Our objective is to show that
for all i = 1,...,n
lim J..(x) = J*(x),
i or jN(i).
It is clear that an assumption such as (A) is necessary in order for
such a result to hold. Since iteration (14) is of the dynamic programming type it is also clear that some restrictions must be placed on the
mapping H that guarantee convergence of the algorithm under the usual
circumstances where the algorithm is carried out in a centralized,
synchronous manner (i.e., when there is only one computation node).
following assumption places somewhat indirect restrictions on H but
simplifies the convergence analysis:
Assumption (B):
There exist two functions J and J in F such that the set
of all functions JF with J < J < J belongs to F and furthermore
lim Tk (J)(x)
= J*(x), lim Tk (J)(x)
where Tk denotes composition of the mapping T with itself k times.
Note that in view of the monotonicity of H [cf. (2)] and the fact
J* = T(J*);, Assumption (B) implies
Furthermore if JF satisfies J < J < J then lim T
k(J)(x) = J*(x) for all
Assumption (B) leaves open the question of how to find suitable
functions J and J. On the other hand for most problems of interest
the choices are clear.
In particular we have the following:
1) For shortest path problems (Example 1) it is straightforward to
-12verify that the choices
satisfy Assumption (B).
2) For finite horizon stochastic optimal control problems (Example 3)
for which the function g in (10) is uniformly bounded below it can be
easily verified that the functions J = (Jo
J = (Jo J .. ,JN) where for all k and x
satisfy Assumption (B).
3) For discounted infinite horizon stochastic optimal control problems
with bounded cost per stage (Example 2 with ac(0,1) and g uniformly
bounded above and below) it is easily shown that every pair of functions
J, J of the form
E{g(x,u,w)} <
E{g(x,uy*) I
satisfy Assumption (B).
4) For infinite horizon stochastic optimal control problems with nonpositive cost per stage (Example 2 with g < 0) it can be shown that
the functions J,
satisfy Assumption (B) ( , pp. 261, 298).
If the cost per stage is
nonnegative (Example 2 with g > 0) then, under a mild assumption (which
is satisfied in particular if U(x) is a finite set for each x), it can
be shown that the choices J,
satisfy Assumption (B) ( , pp. 263, 298).
The choice of J and J can
be further sharpened and simplified under more specific assumptions on
problem structure but we will not pursue this matter further.
Our convergence result will be shown under the assumption that the
contents JO.
of the buffers B. at the initia l time t -
The broad range of initial conditions allowed by (19)-eliminates ,the need to
reset the contents of the buffers in an environment where it is necessary to execute periodically the algorithm with slightly different
problem data as for example in routing algorithms for communication
networks. This is particularly true for cases 1)-3) above where condition (19) implies that the initial buffer contents can be essentially
arbitrary.
Convergence Analysis
Our main result is the following proposition.
Proposition 1:
Let Assumptions (A) and (B) hold and assume that for
all i = 1,...,n
j = i or jN(i).
Then for all i =
lim Jij(x)
j = i or jN(i).
Since the contents of a buffer can change only at the end of
a computation or transmission inverval at a node we can analyze convergence in terms of a discrete time process.
We focus attention at
the sequence of times {t k } with 0 < t < t 2
<... where each tk is the
end of a computation interval for one or more nodes.
Let us consider for all t > 0
where for each x ESj,
the value Jij (x) [J. (x)] represents the
contents of buffer Bi.. at time t if the algorithm were executed with
the same timing and order of computation and transmission intervals
but with initial condition J(x) [J(x)] instead of J (x) for each
-15buffer B.. and xS.. The monotonicity assumption (2) and the-definition
of the algorithm [cf.
(13), (14)] clearly imply that for all t
i = 1,...,n,
j=i or jsN(i).
It will thus suffice to show that
i=l,...,n,
VxsSj, i=l,...,n,
In view of the fact J > T(J) we have clearly
> Jjj. (X)
with potential strict inequality only for nodes j
1,...,n,jsN(i)
for which t was
end of a computation interval. For t [t1lt 2 ) the content of Bij is
Ieither J. or J.. so from (24) we must have
jEN(i), t[tl,t2 )
i=l,...,n, j6N(i), tt
The last relation can also be written as
In view of the monotonicity of H it follows from (26) and (14) that
with potential strict inequality only for nodes j for which t2 was the
end of a computation interval.
-TI*iF)ljsj-llI__
________._··._
j=l,...,n,
mN(j) , t[t
Combining (25) and (27) we obtain
VxSj, i = 1,...,n, jN(i)
with potential strict inequality only for nodes j for which either
tl or t2 was the end of a computation interval. The precedirg argument
can be repeated to show that for all k, i = 1,...,n, and jN(i) we have
V xeSj , te[tk'tk+l)
Let k be the first integer for which 2P <tkt
' is-as in
Assumption (A).
Then each node must have completed at least one
computation phase in the inverval [O,P] and at least one transmission
phase to all nodes in the inverval [P,2P].
It is easily seen that this
together with (28), the monotonicityof H, and the definition of the algorithm implies that for all t[tkl
T(J) (x) >
i = 1,...,n,
This argument can be repeated and shows that if m(k) is the largest
integer m such that 2mP < tk then for all t[tk,tk+l)
Tm (k)(J)()
i = l, ... n, jN(i).
Similarly we obtain for all t[tktk+l)
J(x) > Tm(k)(J) (),
-r -*- - -
-----------------^1.
------·---
·-----'---"---··"-sl*rr-----
By combining (21), (29), and (30) and using Assumption (B) we obtain
(22), (23) and the proof of the proposition is complete.
Note that (21), (29), and (30) provide useful estimates of rate
of convergence.
In fact by using these relations it is possible to
show that in some special cases convergence is attained in finite time.
Proposition 2:
In the cases of Examples 1 and 3 with the choices of
J, J given by (17) and (18) respectively and J
satisfying (20), there
exists a time t > 0 such that for all i = 1,...,n and t > t there holds
j = i or jN(i).
For Example 3 it is easily seen that there holds
T (J)(x) =
The proof follows from (21), (29) and (30)./ For Example 1 it is eb1ly seen
Vi = 2,...,n,
Also for each i, T k(J)(i) represents the length of a path starting
from i with k links, and each link has positive length. Therefore
there exists a k such that T (J)(i) represents length of a path from
i to node 1, for otherwise the paths corresponding to Tk(J)(i) would
.... ..---
-18cycle indefinitely without reaching node 1 and we would have Tk(J)(i)
Since Tk(J)(i) < J*(i) and J*(i) is the shortest distance from i to 1
Vi = 2,...,n,
The result again follows from (21), (29)and (30).
It is possible to construct examples showing that in the case of
the shortest path problem the number of iterations needed for finite
convergence of T
k(J) depends on the link lengths in a manner which
makes the overall algorithm nonpolynomial.
In many problems of interest the main objective of the algorithm
is to obtain a minimizing control law p*, i.e a function *: S + C
*(x)EU(x) for all xS such that
H[x,*(x) ,J*]
H(x,u,J*),
It is thus of interest to investigate the question of whether control
laws -pt: S
C satisfying
P (x)E U(x),
H[x,t (x),J] = min
H(x,u,J ),
i = l,...,n
where J is given for all t by (13), converge in some sense to a control
law p* satisfying (31).
The following proposition shows that convergence
is attained in finite time if the sets U(x) are finite and H haS
continuity property which is satisfied for most problems of practical interest.
A rilated onvergence result can be shown assuming the sets U(x) are compact
(c.f. , Prop. 5.11).
Proposition 3:
Let the assumptions of Proposition 1 hold. Assume also
that for every xS, uU(x) and sequence {Jk}CF for which
lim Jk (x) = J*(x) for all xS we have
lim H(x,u,J )
H(x,u,J*).
Then for each state xS for which U(x) is a finite set there exists
t > 0 such that for all t > t
t (x) satisfies (32), (33) then
H(x,u,J*).
Assume the contrary, i.e. that there exists a state xSi for
which U(x) is finite, and an increasing sequence {tk } with tk
H[x,i (x),J. ]
H(x,u,J. ),
Vk = 1,2,...
k = 1,2,...
Since U(x) is finite, there exists a uU(x) such that
(x) = u for
an infinite subset of indices K. From Proposition 1 we have that-J-~, converges pointwise to J* on the set S
S.. Using the definition
of the neighbor set N(i), (34) and (36), it follows that
lim H(x,u,J i
= H(x,u,J*)
On the other hand from (35) and Proposition 1 we have
lim H(x,u,J. )
which contradicts the previous relation.
5. Discussion and Conclusions
The analysis of this paper shows that natural distributed dynamic
programming schemes converge to the correct solution under very weak
assumptions on the problem structure, and the timing and ordering of
computation and internode communication. The restrictions on the
initial conditions are also very weak. This means that, for problems
that are being solved continuously in real time, it is not necessary
to reset the initial conditions and resynchronize the algorithm each
time the problem data changes.
As a result the potential for tracking
slow variations in optimal control laws is improved, and algorithmic
implementation is greatly simplified.
The crucial assumption in the analysis of this paper is the monotonicity property of the mapping H [cf. (2)].
Indeed this property is
largely responsible for most of the basic results in dynamic programming
(see ).
On the other hand the mapping H of many dynamic programming models
possesses a contraction property which is sufficient to guarantee the
validity of the distributed algorithm of this paper even in the absence
of the monotonicity assumption (2). To be more specific let F be the set
of all uniformly bounded real valued functions on S equipped with the supnorm
Assume that, in place of the monotonicity assumption (2), H has the following properties
I IT(J) - T(J')II
< PI IJ-J' II
where p is a scalar with 0< p<l.
Then T has a unique fixed point J* in
F and it is possible to show that the conclusion of Proposition 1 holds
provided Assumption (A) is in effect and the initial buffer contents Jo1j
are uniformly bounded functions on the corresponding sets S.
necessary to assume (B) for this result. The proof is very similar to
the one of Proposition 1 and utilizes the contraction assumption (39) to
show that the sequences sup
sup {J.(x)
-J*(|x)} decrease monotonically
to zero as t.
Note that sinceJthe value of H need not depend on u, this
result shows the validity of our algorithm applied to an arbitrary fixed
point problem of the form J = T(J) for which the mapping T = F + F satisfies
(38) and (39).
The use of the sup-norm (37) is essential for the validity of the
result described above. Indeed for the important class of Markovian
decision problems involving a finite state space and minimization of
average cost per stage (Howard ), a distributed asynchronous version
of the usual dynamic programming algorithm due to White (see ,
Section 8.2) may fail to converge to the correct solution. This is illustrated in the following example constructed by John Tsitsiklis.
this example the basic mapping H does not satisfy the monotonicity assumption (2), and the corresponding mapping T is not a contraction mapping
with respect to the sup-norm (37).
It is a contraction mapping with
respect to a different norm.
Example (J. Tsitsiklis):
Let the space space consist of two states
S = {0,1}, and the control space consist of a single control C = {0}.
Consider the Markov chain with state space S for which at each stage if
the state is 0 a cost g is incurred and a transition to state 1 occurs
with probability pos(0,1).
If the state is 1 a cost gl is incurred and
__aillll_______L_______
-22a transition to state 1 occurs with probability pl1 (0,1).
Consider the
mapping T: R + R defined by
= go + po[J(1)-J(O )]
T(J)(1) = gl + p 1[J(
Because there is only one control available at each stage the definition
of T does not involve a minimization as in (4).
It is clear however that
T arises from a mapping H of the form considered in this paper except
that this mapping does not satisfy the monotonicity condition (2).
Now by applying a well known result (e.g. , p. 345) we have that
T has a unique fixed point J* = (J*(0O),J*(1)), and J*(O) is the average
gain of the process.
Furthermore the standard dynamic programming algorithm which consists of the successive generation of T(J), T 2(J),...
starting from an arbitrary initial JR 2
converges to J*.
Indeed T is an
affine mapping involving the matrix
It can be easily seen that the eigenvalues of this matrix lie strictly
within the unit circle and as a result T is a contraction mapping with
respect to some norm on R .
However T is not a contraction mapping with
respect to the sup-norm.
Now consider the distributed algorithm of Section 3 with two computation nodes 0 and 1 corresponding to the two states.
Consider a
sequence of events whereby node 0 does many iterations before transmitting
at time t1 the final value J (0) to node 1, while in the meantime node
1 is idle.
Then node 1 does many iterations before transmitting at time
the final value J (1) while node 0 is idle, and the process is
If J (1) is the estimate of J*(l) available at nodes 0 and 1
at time 0, we have using (40) and (41)
By eliminating J
(0) in the relations above we obtain
Thus the estimate of J*(1) is updated approximately according to the
(l+po)( -p
and it follows that, if P1
is sufficiently close to unity, then J(1)
will oscillate between positive and negative numbers of increasingly large
magnitude. This shows that the natural distributed version of the dynamic
programming algorithm for average cost Markovian decision problems is not
guaranteed to converge to the correct solution when the sequencing of
computation and internode communication is arbitrary.