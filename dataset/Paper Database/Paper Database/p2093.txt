Describing Videos by Exploiting Temporal Structure
Universit´e de Montr´eal
 
Atousa Torabi
Universit´e de Montr´eal
 
Kyunghyun Cho
Universit´e de Montr´eal
 
Nicolas Ballas
Universit´e de Montr´eal
 
Christopher Pal
´Ecole Polytechnique de Montr´eal
 
Hugo Larochelle
Universit´e de Sherbrooke
 
Aaron Courville
Universit´e de Montr´eal
 
Recent progress in using recurrent neural networks
(RNNs) for image description has motivated the exploration
of their application for video description. However, while
images are static, working with videos requires modeling
their dynamic temporal structure and then properly integrating that information into a natural language description. In this context, we propose an approach that successfully takes into account both the local and global temporal
structure of videos to produce descriptions. First, our approach incorporates a spatial temporal 3-D convolutional
neural network (3-D CNN) representation of the short temporal dynamics. The 3-D CNN representation is trained on
video action recognition tasks, so as to produce a representation that is tuned to human motion and behavior. Second we propose a temporal attention mechanism that allows to go beyond local temporal modeling and learns to
automatically select the most relevant temporal segments
given the text-generating RNN. Our approach exceeds the
current state-of-art for both BLEU and METEOR metrics
on the Youtube2Text dataset. We also present results on a
new, larger and more challenging dataset of paired video
and natural language descriptions.
1. Introduction
The task of automatically describing videos containing
rich and open-domain activities poses an important challenges for computer vision and machine learning research.
It also has a variety of practical applications. For example,
A man is shooting a gun
Figure 1. High-level visualization of our approach to video description generation.
We incorporate models of both the local
temporal dynamic (i.e. within blocks of a few frames) of videos,
as well as their global temporal structure. The local structure is
modeled using the temporal feature maps of a 3-D CNN, while
a temporal attention mechanism is used to combine information
across the entire video. For each generated word, the model can
focus on different temporal regions in the video. For simplicity, we
highlight only the region having the maximum attention above.
every minute, 100 hours of video are uploaded to YouTube.1
However, if a video is poorly tagged, its utility is dramatically diminished . Automatic video description generation has the potential to help improve indexing and search
quality for online videos. In conjunction with speech synthesis technology, annotating video with natural language
descriptions also has the potential to beneﬁt the visually impaired.
While image description generation is already considered a very challenging task, the automatic generation of
video description carries additional difﬁculties.
dealing with the sheer quantity of information contained in
video data is one such challenge. Moreover, video description involves generating a sentence to characterize a video
1 
html accessed on 2015-02-06.
 
clip lasting typically 5 to 10 seconds, or 120 to 240 frames.
Often such clips contain complex interactions of actors and
objects that evolve over time. All together it amounts to
a vast quantity of information, and attempting to represent
this information using a single, temporally collapsed feature
representation is likely to be prone to clutter, with temporally distinct events and objects being potentially fused incoherently. It is therefore important that an automatic video
description generator exploit the temporal structure underlying video.
We argue that there are two categories of temporal structure present in video: (1) local structure and (2) global structure. Local temporal structure refers to the ﬁne-grained motion information that characterizes punctuated actions such
as “answering the telephone” or “standing up”.
such as these are relatively localized in time, evolving over
only a few consecutive frames. On the other hand, when we
refer to global temporal structure in video, we refer to the
sequence in which objects, actions, scenes and people, etc.
appear in a video. Video description may well be termed
video summarization, because we typically look for a single sentence to summarize what can be a rather elaborate
sequence of events. Just as good image descriptions often
focus on the more salient parts of the image for description,
we argue that good video description systems should selectively focus on the most salient features of a video sequence.
Venugopalan et al. 
encoder–decoder neural network framework to automatically generate the description of a video clip. They extracted appearance features from each frame of an input
video clip using a previously trained convolutional neural
network . The features from all the frames, or subsampled frames, were then collapsed via simple averaging to
result in a single vector representation of the entire video
clip. Due to this indiscriminate averaging of all the frames,
this approach risks ignoring much of the temporal structure
underlying the video clip. For instance, it is not possible
to tell the order of the appearances of two objects from the
collapsed features.
In this paper, we introduce a temporal attention mechanism to exploit global temporal structure. We also augment the appearance features with action features that encode local temporal structure. Our action features are derived from a spatio-temporal convolutional neural network
(3-D CNN) . The temporal attention mechanism
is based on a recently proposed soft-alignment method 
which was used successfully in the context of machine
translation. While generating a description, the temporal attention mechanism selectively focuses on a small subset of
frames, making it possible for the generator to describe only
the objects and/or activities in that subset (see Fig. 1 for the
graphical illustration). Our 3-D CNN, on the other hand,
starts from both temporally and spatially local motion descriptors of video and hierarchically extracts more abstract
action-related features. These features preserve and emphasize important local structure embedded in video for use by
the description generator.
We evaluate the effectiveness of the proposed mechanisms for exploiting temporal structure on the most widely
used open-domain video description dataset, called the
Youtube2Text dataset , which consists of 1,970 video
clips with multiple descriptions per video. We also test the
proposed approaches on a much larger, and more recently
proposed, dataset based on the descriptive video service
(DVS) tracks in DVD movies , which contains 49,000
video clips.
Our work makes the following contributions: 1) We propose the use of a novel 3-D CNN-RNN encoder-decoder
architecture which captures local spatio-temporal information. We ﬁnd that despite the promising results generated by
both prior work and our own here using static frame CNN-
RNN video description methods, our experiments suggest
that it is indeed important to exploit local temporal structure when generating a description of video. 2) We propose the use of an attention mechanism within a CNN-
RNN encoder-decoder framework for video description and
we demonstrate through our experiments that it allows features obtained through the global analysis of static frames
throughout the video to be used more effectively for video
description generation. Furthermore, 3) we observe that the
improvements brought by exploiting global and local temporal information are complimentary, with the best performance achieved when both the temporal attention mechanism and the 3-D CNN are used together.
2. Video Description Generation Using an
Encoder–Decoder Framework
In this section, we describe a general approach, based
purely on neural networks to generate video descriptions.
This approach is based on the encoder-decoder framework , which has been successfully used in machine
translation as well as image caption generation .
2.1. Encoder-Decoder Framework
The encoder-decoder framework consists of two neural networks; the encoder and the decoder. The encoder
network φ encodes the input x into a continuous-space
representation which may be a variable-sized set V
{v1, . . . , vn} of continuous vectors:
V = {v1, . . . , vn} = φ(x).
The architecture choice for the encoder φ depends on the
type of input. For example, in the case of machine translation, it is natural to use a recurrent neural network (RNN)
for the encoder, since the input is a variable-length sequence
of symbols . With an image as input, a convolutional
neural network (CNN) is another good alternative .
The decoder network generates the corresponding output y from the encoder representation V . As was the case
with the encoder, the decoder’s architecture must be chosen
according to the type of the output. When the output is a
natural language sentence, which is the case in automatic
video description, an RNN is a method of choice.
The decoder RNN ψ runs sequentially over the output
sequence. In brief, to generate an output y, at each step t
the RNN updates its internal state ht based on its previous
internal state ht−1 as well as the previous output yt−1 and
the encoder representation V , and then outputs a symbol yt:
= ψ(ht−1, yt−1, V )
where for now we simply note as ψ the function updating
the RNN’s internal state and computing its output.
RNN is run recursively until the end-of-sequence symbol
is generated, i.e., yt = ⟨eos⟩.
In the remaining of this section, we detail choices for the
encoder and decoder for a basic automatic video description
system, taken from and on which our work builds.
2.2. Encoder: Convolutional Neural Network
Deep convolutional neural networks (CNNs) have recently been successful at large-scale object recognition . Beyond the object recognition task itself, CNNs trained
for object recognition have been found to be useful in a variety of other computer vision tasks such as object localization and detection (see, e.g., ). This has opened a
door to a ﬂood of computer vision systems that exploit representations from upper or intermediate layers of a CNN as
generic high-level features for vision. For instance, the activation of the last fully-connected layer can be used as a
ﬁxed-size vector representation , or the feature map of
the last convolutional layer can be used as a set of spatial
feature vectors .
In the case where the input is a video clip, an imagetrained CNN can be used for each frame separately, resulting in a single vector representation vi of the i-th frame.
This is the approach proposed by , which used the convolutional neural network from .
In our work here,
we will also consider using the CNN from , which has
demonstrated higher performance for object recognition.
2.3. Decoder: Long Short-Term Memory Network
As discussed earlier, it is natural to use a recurrent neural network (RNN) as a decoder when the output is a natural
language sentence. This has been empirically conﬁrmed in
the contexts of machine translation , image caption generation and video description generation in
open and closed domains. Among these recently
successful applications of the RNN in natural language generation, it is noticeable that most of them ,
if not all, used long short-term memory (LSTM) units 
or their variant, gated recurrent units (GRU) . In this paper, we also use a variant of the LSTM units, introduced in
 , as the decoder.
The LSTM decoder maintains an internal memory state
ct in addition to the usual hidden state ht of an RNN (see
Eq. (1)). The hidden state ht is the memory state ct modulated by an output gate:
ht = ot ⊙ct,
where ⊙is an element-wise multiplication. The output gate
ot is computed by
ot = σ(WoE [yt−1] + Uoht−1 + Aoϕt(V ) + bo),
where σ is the element-wise logistic sigmoid function and
ϕt is a time-dependent transformation function on the encoder features. Wo, Uo, Ao and bo are, in order, the weight
matrices for the input, the previous hidden state, the context from the encoder and the bias. E is a word embedding
matrix, and we denote by E [yt−1] an embedding vector of
word yt−1.
The memory state ct is computed as a weighted sum between the previous memory state ct−1 and the new memory
content update ˜ct:
ct = ft ⊙ct−1 + it ⊙˜ct,
where the coefﬁcients – called forget and input gates respectively – are given by
ft = σ(WfE [yt−1] + Ufht−1 + Afϕt(V ) + bf),
it = σ(WiE [yt−1] + Uiht−1 + Aiϕt(V ) + bi).
The updated memory content ˜ct also depends on the current
input yt−1, previous hidden state ht−1 and the features from
the encoder representation ϕt(V ):
˜ct = tanh(WcE [yt−1] + Ucht−1 + Acϕt(V ) + bc).
Once the new hidden state ht is computed, a probability
distribution over the set of possible words is obtained using
a single hidden layer neural network
pt = softmax(Up tanh(Wp[ht, ϕt(V ), E [yt−1]] + bp) + d),
where Wp, Up, bp, d are the parameters of this network,
[. . . ] denotes vector concatenation. The softmax function
allows us to interpret pt as the probabilities of the distribution p(yt | y<t, V ) over words.
At a higher level, the LSTM decoder can be written down
p(yt | y<t, V )
= ψ(ht−1, ct−1, yt−1, V ).
It is then trivial to generate a sentence from the LSTM
decoder. For instance, one can recursively evaluate ψ and
sample from the returned p(yt | . . . ) until the sampled yt is
the end-of-sequence symbol. One can also approximately
ﬁnd the sentence with the highest probability by using a
simple beam search .
In , Venugopalan et al. used this type of LSTM decoder for automatic video description generation. However,
in their work the feature transformation function ϕt consisted in a simple averaging, i.e.,
ϕt(V ) = 1
where the vi’s are the elements of the set V returned by
the CNN encoder from Sec. 2.2. This averaging effectively
collapses all the frames, indiscriminate of their temporal relationships, leading to the loss of temporal structure underlying the input video.
3. Exploiting Temporal Structure in Video Description Generation
In this section, we delve into the main contributions of
this paper and propose an approach for exploiting both the
local and global temporal structure in automatic video description.
3.1. Exploiting Local Structure:
A Spatio-Temporal Convolutional Neural Net
We propose to model the local temporal structure
of videos at the level of the temporal features V
{v1, . . . , vn} that are extracted by the encoder. Speciﬁcally, we propose to use a spatio-temporal convolutional
neural network (3-D CNN) which has recently been demonstrated to capture well the temporal dynamics in video
clips .
We use a 3-D CNN to build the higher-level representations that preserve and summarize the local motion descriptors of short frame sequences. This is done by ﬁrst
dividing the input video clip into a 3-D spatio-temporal
grid of 16 × 12 × 2 (width × height × timesteps) cuboids.
Each cuboid is represented by concatenating the histograms
of oriented gradients, oriented ﬂow and motion boundary
(HoG, HoF, MbH) with 33 bins. This transformation is done in order to make sure that local temporal structure (motion features) are well extracted and to reduce the
computation of the subsequence 3-D CNN.
Soft-Attention
Features-Extraction
Generation
Figure 3. Illustration of the proposed temporal attention mechanism in the LSTM decoder
Our 3-D CNN architecture is composed of three 3-D
convolutional layer, each followed by rectiﬁed linear activations (ReLU) and local max-pooling. From the activation of
the last 3-D convolution+ReLU+pooling layer, which preserves the temporal arrangement of the input video and abstracts the local motion features, we can obtain a set of temporal feature vectors by max-pooling along the spatial dimensions (width and height) to get feature vectors that each
summarize the content over short frame sequences within
the video. Finally, these feature vectors are combined, by
concatenation, with the image features extracted from single frames taken at similar positions across the video. Fig. 5
illustrates the complete architecture of the described 3-D
CNN. Similarly to the object recognition trained CNN (see
Sec. 2.2), the 3-D CNN is pre-train on activity recognition
3.2. Exploiting Global Structure:
A Temporal Attention Mechanism
The 3-D CNN features of the previous section allows us
to better represent short-duration actions in a subset of consecutive frames. However, representing a complete video
by averaging these local temporal features as in Eq. 4 would
jeopardize the model’s ability to exploit the video’s global
temporal structure.
Our approach to exploiting such non-local temporal
structure is to let the decoder selectively focus on only a
small subset of frames at a time. By considering subsets of
frames in sequence, the model can exploit the temporal ordering of objects and actions across the entire video clip and
avoid conﬂating temporally disparate events. Our approach
also has the potential of allowing the model to focus on key
elements of the video that may have short duration. Methods that collapse the temporal structure risk overwhelming
these short duration elements.
Speciﬁcally, we propose to adapt the recently proposed soft attention mechanism from , which allows
the decoder to weight each temporal feature vector V =
{v1, . . . , vn}. This approach has been used successfully by
Xu et al. for exploiting spatial structure underlying an
Illustration
spatiotemporal convolutional neural network
(3-D CNN). This network is trained for
activity recognition. Then, only the convolutional layers are involved when generating video descriptions.
image. Here, we thus adapt it to exploit the temporal structure of video instead.
Instead of a simple averaging strategy (as shown in
Eq. (4)), we take the dynamic weighted sum of the temporal
feature vectors such that
= 1 and α(t)
i ’s are computed at each time
step t inside the LSTM decoder (see Sec. 2.3). We refer to
as the attention weights at time t.
The attention weight α(t)
reﬂects the relevance of the
i-th temporal feature in the input video given all the previously generated words, i.e., y1, . . . yt−1. Hence, we design
a function that takes as input the previous hidden state ht−1
of the LSTM decoder, which summarizes all the previously
generated words, and the feature vector of the i-th temporal
feature and returns the unnormalized relevance score e(t)
= w⊤tanh (Waht−1 + Uavi + ba) ,
where w, Wa, Ua and ba are the parameters that are estimated together with all the other parameters of the encoder
and decoder networks.
Once the relevance scores e(t)
for all the frames i =
1, . . . , n are computed, we normalize them to obtain the
We refer to the attention mechanism as this whole process
of computing the unnormalized relevance scores and normalizing them to obtain the attention weights.
The attention mechanism allows the decoder to selectively focus on only a subset of frames by increasing the
attention weights of the corresponding temporal feature.
However, we do not explicitly force this type of selective
attention to happen.
Rather, this inclusion of the attention mechanism enables the decoder to exploit the temporal
structure, if there is useful temporal structure in the data.
Later in Sec. 5, we empirically show that this is indeed the
case. See Fig. 3 for the graphical illustration of the temporal
attention mechanism.
4. Related Work
Video description generation has been investigated and
studied in other work, such as . Most of these
examples have, however, constrained the domain of videos
as well as the activities and objects embedded in the video
clips. Furthermore, they tend to rely on hand-crafted visual representations of the video, to which template-based
or shallow statistical machine translation approaches were
In contrast, the approach we take and propose
in this paper aims at open-domain video description generation with deep trainable models starting from low-level
video representations, including raw pixel intensities (see
Sec. 2.2) and local motion features (see Sec. 3.1).
In this sense, the approach we use here is more closely
related to the recently introduced static image caption generation approaches based mainly on neural networks . A neural approach to static image caption
generation has recently been applied to video description
generation by Venugopalan et al. . However, their direct adaptation of the underlying static image caption generation mechanism to the videos is limited by the fact that the
model tends to ignore the temporal structure of the underlying video. Such structure has demonstrated to be helpful
in the context of event and action classiﬁcation ,
and is explored in this paper. Other recent work has
explored the use of DVS annotated video for video description research and has underscored the observation that DVS
descriptions are typically much more relevant and accurate
descriptions of the visual content of a video compared to
movie scripts. They present results using both DVS and
script based annotations as well as cooking activities.
While other work has explored 3-D Deep Networks for
video our particular approach differs in a
number of ways from prior work in that it is based on CNNs
as opposed to other 3-D deep architectures and we focus on
pre-training the model on a number of widely used action
recognition datasets.
In contrast to other 3-D CNN formulations, the input to our 3-D CNN consists of features
derived from a number of state of the art image descriptors.
Our model is also fully 3-D in that we model entire volumes across a video clip. In this paper, we use a
state-of-the-art static convolutional neural network (CNN)
and a novel spatio-temporal 3-D CNN to model input video
clips. This way of modeling video using feedforward convolutional neural networks, has become increasingly popular recently . However, there has also been
a stream of research on using recurrent neural networks
(RNN) for modeling video clips.
For instance, in ,
Srivastava et al. propose to use long short-term memory
units to extract video features. Ranzato et al. in also
models a video clip with an RNN, however, after vectorquantizing image patches of the video clip. In contrast to
other approaches such as , which have explored CNN-
RNN coupled models for video description, here we use an
attention mechanism, use a 3-D CNN and focus on opendomain video description.
5. Experiments
We test the proposed approaches on two videodescription corpora: Youtube2Text and DVS . Implementations are available at 
yaoli/arctic-capgen-vid.
5.1. Datasets
Youtube2Text
The Youtube2Text video corpus is well
suited for training and evaluating an automatic video description generation model. The dataset has 1,970 video
clips with multiple natural language descriptions for each
video clip. In total, the dataset consists of approximately
80,000 video / description pairs, with the vocabulary of
approximately 16,000 unique words. The dataset is opendomain and covers a wide range of topics including sports,
animals and music. Following , we split the dataset into
a training set of 1,200 video clips, a validation set of 100
clips and a test set consisting of the remaining clips.
The DVS dataset was recently introduced in 
with a much larger number of video clips and accompanying descriptions than the existing video/description corpora such as Youtube2Text. It contains video clips extracted
from 92 DVD movies along with semi-automatically transcribed descriptive video service (DVS) narrations.
dataset consists of 49,000 video clips covering a wide variety of situations. We follow the standard split of the dataset
into a training set of 39,000 clips, a validation set of 5,000
clips and a test set of 5,000 clips, as suggested by .
Description Preprocessing
We preprocess the descriptions in both the Youtube2Text and DVS datasets with
wordpunct tokenizer from the NLTK toolbox.2. We
did not do any other preprocessing such as lowercasing and
rare word elimination. After preprocessing, the numbers of
unique words were 15,903 for Youtube2Text and 17,609 for
DVS Dataset.
Video Preprocessing
To reduce the computational and
memory requirement, we only consider the ﬁrst 240 frames
of each video
3 For appearance features, (trained) 2-
D GoogLeNet CNN is used to extract ﬁxed-length
representation (with the help of the popular implementation in Caffe ).
Features are extracted from the
pool5/7x7 s1 layer. We select 26 equally-spaced frames
out of the ﬁrst 240 from each video and feed them into the
CNN to obtain a 1024 dimensional frame-wise feature vector. We also apply the spatio-temporal 3-D CNN (trained
as described in Sec. 5.2) in order to extract local motion
information4. When using 3-D CNN without temporal attention, we simply use the 2500-dimensional activation of
the last fully-connection layer. When we combine the 3-D
CNN with the temporal attention mechanism, we leverage
the last convolutional layer representation leading to 26 feature vectors of size 352. Those vector are contatenated with
the 2D CNN features resulting in 26 feature vectors with
1376 elements.
5.2. Experimental Setup
We test four different model variations for video
description generation based on the underlying encoderdecoder framework, with results presented in Table 1. Enc-
Dec (Basic) denotes a baseline incorporating neither local
nor global temporal structure. Is it based on an encoder
using the 2-D GoogLeNet CNN as discussed in Section 2.2 and the LSTM-based decoder outlined in Section
2.3. Enc-Dec + Local incorporates local temporal structure via the integration of our proposed 3-D CNN features
(as outlined in Section 3.1) with the 2-D GoogLeNet CNN
features as described above. Enc-Dec + Global adds the
temporal attention mechanism of Section 3.2. Finally, Enc-
Dec + Local + Global incorporates both the 3-D CNN and
the temporal attention mechanism into the model. All models otherwise use the same number of temporal features
vi. These experiments will allow us to investigate whether
the contributions from the proposed approaches are complimentary and can be combined to further improve performance.
2 http:/s/www.nltk.org/index.html
3 When the video clip has less than 240 frames, we pad the video with
all-zero frames to make it into 240-frame long.
4 We perturb each video along three axes to form random crops by
taking multiple 15 × 15 × 120 cuboids out of the original 20 × 20 × 120
cuboids, and the ﬁnal representation is the average of the representations
from these perturbed video clips.
Table 1. Performance of different variants of the model on the Youtube2Text and DVS datasets.
Youtube2Text
Perplexity
Perplexity
Enc-Dec (Basic)
+ Local (3-D CNN)
+ Global (Temporal Attention)
+ Local + Global
Venugopalan et al. 
+ Extra Data (Flickr30k, COCO)
Thomason et al. 
For all video description generation models, we
estimated the parameters by maximizing the log-likelihood:
<i, xn, θ),
where there are N training video-description pairs (xn, yn),
and each description yn is tn words long.
We used Adadelta with the gradient computed by
the backpropagation algorithm. We optimized the hyperparameters (e.g. number of LSTM units and the word embedding dimensionality) using random search to maximize
the log-probability of the validation set. 5 Training continued until the validation log-probability stopped increasing
for 5,000 updates. As mentioned earlier in Sec. 3.1, the 3-
D CNN was trained on activity recognition datasets. Due
to space limitation, details regarding the training and evaluation of the 3-D CNN on activity recognition datasets are
provided in the Supplementary Material.
Evaluation
We report the performance of our proposed
method using test set perplexity and three model-free automatic evaluation metrics.
These are BLEU , ME-
TEOR and CIDEr . We use the evaluation script
prepared and introduced in .
5.3. Quantitative Analysis
In the ﬁrst block of Table 1, we present the performance
of the four different variants of the model using all four metrics: BLEU, METEOR, CIDEr and perplexity. Subsequent
lines in the table give comparisons with prior work. The ﬁrst
three rows (Enc-Dec (Basic), +Local and +Global), show
that it is generally beneﬁcial to exploit some type of temporal structure underlying the video. Although this beneﬁt is
most evident with perplexity (especially with the temporal
attention mechanism exploiting global temporal structure),
we observe a similar trend with the other model-free metrics
and across both Youtube2Text and DVS datasets.
We observe, however, that the biggest gain can be
achieved by letting the model exploit both local and global
5 Refer to the Supplementary Material for the selected hyperparameters.
temporal structure (the fourth row in Table 1). We observed
this gain consistently across both datasets as well as using
all four automatic evaluation metrics.
5.4. Qualitative Analysis
Although the model-free evaluation metrics such as the
ones we used in this paper (BLEU, METEOR, CIDEr) were
designed to reﬂect the agreement level between reference
and generated descriptions, it is not intuitively clear how
well those numbers (see Table 1) reﬂect the quality of the
actual generated descriptions. Therefore, we present some
of the video clips and their corresponding descriptions, both
generated and reference, from the test set of each dataset.
Unless otherwise labeled, the visualizations in this section
are from the best model which exploits both global and local
temporal structure (the fourth row of Table 1).
In Fig. 4,
two video clips from the test set of
Youtube2Text are shown. We can clearly see that the generated descriptions correspond well with the video clips. In
Fig. 4, we show also two sample video clips from the DVS
dataset. Clearly, the model does not perform as well on the
DVS dataset as it did on Youtube2Text, which was already
evident from the quantitative analysis in Sec. 5.3. However,
we still observe that the model often focuses correctly on
a subset of frames according to the word to be generated.
For instance, in the left pane, when the model is about to
generate the second “SOMEONE”, it focuses mostly on the
ﬁrst frame. Also, on the right panel, the model correctly attends to the second frame when the word “types” is about to
be generated. As for the 3-D CNN local temporal features,
we see that they allowed to correctly identify the action as
“frying”, as opposed to simply “cooking”.
More samples of the video clips and the generated/reference descriptions can be found in the Supplementary Material, including visualizations from the global temporal attention model alone (see the third row in Table 1).
6. Conclusion
In this work, we address the challenging problem of producing natural language descriptions of videos. We identify and underscore the importance of capturing both lo-
+Local+Global: A man and a woman are talking on the road
Ref: A man and a woman ride a motorcycle
+Local+Global: the girl grins at him
Ref: SOMEONE and SOMEONE swap a look
+Local+Global: Someone is frying a fish in a pot
+Local: Someone is frying something
+Global: The person is cooking
Basic: A man cooking its kitchen
Ref: A woman is frying food
+Local+Global: as SOMEONE sits on the table,
SOMEONE shifts his gaze to SOMEONE
+Local: with a smile SOMEONE arrives
+Global: SOMEONE sits at a table
Basic: now, SOMEONE grins
Ref: SOMEONE gaze at SOMEONE
Figure 4. Four sample videos and their corresponding generated and ground-truth descriptions from Youtube2Text (Left Column) and
DVS (Right Column). The bar plot under each frame corresponds to the attention weight αt
i for the frame when the corresponding word
(color-coded) was generated. From the top left panel, we can see that when the word “road” is about to be generated, the model focuses
highly on the third frame where the road is clearly visible. Similarly, on the bottom left panel, we can see that the model attends to the
second frame when it was about to generate the word “Someone”. The bottom row includes alternate descriptions generated by the other
model variations.
cal and global temporal structure in addition to frame-wise
appearance information. To this end, we propose a novel
3-D convolutional neural network that is designed to capture local ﬁne-grained motion information from consecutive
frames. In order to capture global temporal structure, we
propose the use of a temporal attentional mechanism that
learns the ability to focus on subsets of frames. Finally,
the two proposed approaches ﬁt naturally together into an
encoder-decoder neural video caption generator.
We have empirically validated each approach on both
Youtube2Text and DVS datasets on four standard evaluation metrics. Experiments indicate that models using either approach improve over the baseline model. Furthermore, combining the two approaches gives the best performance. In fact, we achieved the state-of-the-art results on
Youtube2Text with the combination.
Given the challenging nature of the task, we hypothesize
that the performance on the DVS dataset could be signiﬁcantly improved by incoporating another recently proposed
dataset similar to the DVS data used here. In addition,
we have some preliminary experimental results that indicate
that further performance gains are possible by leveraging
image caption generation datasets such as MS COCO 
and Flickr . We intend to more fully explore this direction in future work.
Acknowledgments
The authors would like to thank the developers of
Theano . We acknowledge the support of the following organizations for research funding and computing support: NSERC, FQRNT, Samsung, Calcul Quebec, Compute
Canada, the Canada Research Chairs and CIFAR.