Incremental Local Evolutionary Outlier
Detection for Dynamic Social Networks
Tengfei Ji, Dongqing Yang, and Jun Gao
School of Electronics Engineering and Computer Science,
Peking University, Beijing, 100871 China
 
Abstract. Numerous applications in dynamic social networks, ranging from telecommunications to ﬁnancial transactions, create evolving
datasets. Detecting outliers in such dynamic networks is inherently challenging, because the arbitrary linkage structure with massive information
is changing over time. Little research has been done on detecting outliers for dynamic social networks, even then, they represent networks as
un-weighted graphs and identify outliers from a relatively global perspective. Thus, existing approaches fail to identify the objects with abnormal
evolutionary behavior only with respect to their local neighborhood. We
deﬁne such objects as local evolutionary outliers, LEOutliers. This paper
proposes a novel incremental algorithm IcLEOD to detect LEOutliers
in weighted graphs. By focusing only on the time-varying components
(e.g., node, edge and edge weight), IcLEOD algorithm is highly eﬃcient
in large and gradually evolving networks. Experimental results on both
real and synthetic datasets illustrate that our approach of ﬁnding local
evolutionary outliers can be practical.
Keywords: Outlier detection, Dynamic Social Networks, Weighted
evolving graphs, Local information.
Introduction
Outlier detection is a task to uncover and report observations which appear to
be inconsistent with the remainder of that set of data . Since outliers are
usually represented truly unexpected knowledge with underlying value, research
has been widely studied in this area, often applicable to static traditional strings
or attribute-value datasets .
Little work, however, has focused on outlier detection in dynamic graph-based
data. With the unprecedented development of social networks, various kinds of
records like credit, personnel, ﬁnancial, medical, etc. all exist in a graph form,
where vertices represent objects, edges represent relationships among objects and
edge weights represent link strength . Graph-based outlier detection problem
is specially challenging for three major reasons as follows:
Dynamic Changes: Vertices, the relationships among them as well as the weight
of the relationships are all continuously evolving. For example, users join friendship networks (e.g. Facebook), friendships are established, and communication
H. Blockeel et al. (Eds.): ECML PKDD 2013, Part II, LNAI 8189, pp. 1–15, 2013.
⃝Springer-Verlag Berlin Heidelberg 2013
T. Ji, D. Yang, and J. Gao
becomes increasingly frequent. To capture outliers in evolving networks, detecting approaches should obtain temporal information from a collection of snapshots
instead of a particular instant. For example, snapshots of the Facebook graph
should be taken periodically, forming a sequence of snapshot graphs .
Massive Information: Compared with average data sets, social networks are signiﬁcantly larger in size. The volume is even larger when the network is dynamic,
massive information involved in a series of snapshots with millions of nodes
and billions of edges . In this case, it is diﬃcult for algorithms to obtain full
knowledge of the entire networks.
Deeply Hidden Outliers: Recent studies suggest that social networks usually
exhibit hierarchical organization, in which vertices are divided into groups that
can be further subdivided into groups of groups, and so forth over multiple scales
 . Therefore, outliers are more diﬃcult to distinguish from normal ones if they
are hidden deeply among their neighbored but not globally.
However, outlier detection in social networks has not yet received as much attention as some other topics, e.g. community discovery . Only a few studies
have been conducted on graph-based outlier detection (e.g. , , , ). While
a more detailed discussion on these approaches will be provided in section 2, it
suﬃces to point out here that most of these approaches identify outliers in unweighted graphs from a more global perspective. For example, community-based
algorithms identify objects whose evolving trends are diﬀerent with that of
entire community. All such global outlier detection algorithms require the entire
structure of the graph be fully known, which is impractical when dealing with
large evolving networks. Furthermore, the local abnormality may be highly covered by global evolution trend. Thus, existing global methods fail to identify the
objects with abnormal evolutionary behavior only relative to their local neighborhood. We deﬁne such objects as local evolutionary outliers, LEOutliers. The
following example is adopted to illustrate directly the feature of LEOutliers.
Example: Who Should be Liable for Examination Leakage
Figure 1 shows a communication network with two communities, teacher community C1 and student community C2. Diﬀerent colors are used to distinguish
between members of two communities. Because of space constraints, links between nodes have been omitted. It is worthwhile to note that we use the overlapping area of two communities to denote the interactions between teachers
and students. The more they are connected, the larger the overlapping area
Figure 1(a) contains two snapshots at time T-1 and T and we suppose that the
Entrance Examination time is near at T. It is obvious that, from T-1 to T, the
evolution trend of entire teacher community is communicating more frequently
with student community, which is reasonable since more guidance is needed
before examination. According to the global-view algorithms, objects that follow
the entire community evolution trend are regarded as normal ones. Interestingly,
once local neighborhood is taken into account, as illustrated in Figure 1(b),
the black node v is an example of local evolutionary outlier. We suppose v
Incremental Local Evolutionary Outlier Detection
and its neighbors at time T-1 (blue triangles) are a special kind of teachers,
paper setters. The blue triangles avoid communicating with students as the
examination approaches for conﬁdential reasons. On the contrary, node v is
behaving abnormally as he frequently interacts with students at T, which is
a violation of principle. Therefore, although node v evolving consistently with
entire community, he is the most likely suspect in examination leakage.
Fig. 1. Example of LEOutlier
The above example shows that the global-view algorithm is adequate under
certain conditions, but not satisfactory for the case when evolutionary outliers
are hidden deeply among their neighborhood. In this paper, we propose a novel
method named IcLEOD to eﬀectively detect LEOutlier in weighted graphs from
a local perspective. The technical contributions of our work can be summarized
as follows:
– Besides descriptive concept, we put forward a novel measurable deﬁnition
of local evolutionary outlier. To the best of our knowledge, this is the ﬁrst
straightforward concept of a local evolutionary outlier which quantiﬁes how
outlying an object’s evolving behavior is from a local perspective.
– We propose an incremental local evolutionary outlier detection algorithm
(IcLEOD), which fully considers the varying temporal information and the
T. Ji, D. Yang, and J. Gao
complex topology structure of social networks. Our algorithm consists of two
stages: In stage I, a local substructure named Corenet(v) is constructed for
every object v according to structure information and edge weights; In stage
II, we detect local evolutionary outliers by carefully analyzing and comparing
the Corenet(v) at diﬀerent snapshots.
– Our algorithm greatly increases the eﬃciency by incrementally analyzing
the dynamic components (e.g., node, edge and edge weight) and the limited
number of nodes aﬀected by them. This technique is more favorable than
algorithms that require global knowledge of the entire network, especially in
the case that the snapshot graphs are gradually evolving.
– Finally, the extensive experiments on both real and synthetic datasets con-
ﬁrm the capability and the performance of our algorithm. We conclude that
ﬁnding local evolutionary outliers using IcLEOD is meaningful and practical.
The rest part of this work is organized as follows: Section 2 discusses the
recent related work; Section 3 proposes our incremental local evolutionary outlier
detection algorithm, IcLEOD; Section 4 gives experiments for our approach on
both real and synthetic data sets, and shows the achieved results. Section 5
makes a conclusion about the whole work.
Related Work
To focus on the theme, the traditional non-graph based outlier detection algorithms will no more be introduced in this paper (e.g., distance-based ,
distribution-based and density-based methods ). We are eager to discuss some state-of-the-art algorithms that conduct on graphs. Graph-based outlier detection has been studied from two major perspectives: global versus local.
We will introduce some typical methods in both categories respectively.
Graph-Based Global Outlier Detection Methods: Most recent work on
graph-based outlier detection has focused on unweigted graphs from a more
global perspective (i.e. entire graph, community). For example, a stream-based
outlier detection algorithm takes a global view of entire graph to identify
graph objects which contain unusual bridging edges. Community-based outlier
detection methods detect outliers within the context of communities such
that the identiﬁed outliers deviate signiﬁcantly from the rest of the community
members. Some methods capture the dynamic anomalous objects whose
evolution behaviors are quite diﬀerent from that of their respective communities.
All global outlier detection algorithms require that the entire graph should be
obtained, which may be impractical if networks are too large or too dynamic.
Graph-Based Local Outlier Detection Methods: Saligrama proposes
a statistical method based on local K-nearest neighbor distances to identify
anomalies localized to a small spatial region, which is used mainly to deal with
spatial data and cannot be easily generalized to non-spatial networks. OddBall
algorithm takes a egocentric view to search weighted graphs based upon a
Incremental Local Evolutionary Outlier Detection
set of power laws, and determines four types of anomalous subgraphs centered on
individual nodes: near-cliques, near-stars, heavy vicinities and dominant heavy
links. Los Alamos National Laboratory explores local areas and paths in the
network which are least likely to occur under normal conditions by combining
anomaly scores from edges in a neighborhood. Most methods in this category
utilize only single snapshot data to ﬁnd unexpected nodes/edges/sub-structures
and hence they cannot detect temporal changes.
In summary, most of existing methods represent social networks (static and
dynamic) as unweighted graphs, and ﬁnd outliers from a global point of view.
Thus the outliers detected by previous algorithms are not local evolutionary
outliers as proposed in this paper.
IcLEOD Algorithm
Consider a dynamic social network as a sequence of snapshots G1, G2, ...,GT ,
each snapshot is represented by weighted graphs G = (V, E), where V is the
set of objects (nodes) and E is the set of weighted edges. The weight of an edge
denotes the link strength (connecting times). In this paper, we focus on the
problem of detecting local evolutionary outliers from any of the two snapshots
Gi and Gj. Local evolutionary outliers across multiple snapshots can be obtained
by simple post-processing. More speciﬁcally, input for our problem thus consists
two snapshots of a weighted evolving network, and meaningful LEOutliers are
Our LEOD algorithm involves two major phases. In the ﬁrst phase, Corenet
for individual object is formed according to local topology structure and edge
weights information. In the second phase, local evolutionary outliers are identi-
ﬁed by comparing individual’s Corenets of diﬀerent snapshots. We will present
two phases in Subsection 3.1 and 3.2 respectively.
Phase I: Discovering Corenet for Individual Object
As noted above, the evolutionary behavior of a LEOutlier is extremely diﬀerent
from that of its “closest” neighbors. Thus, the primary goal in phase I is to
reasonably measure the closeness between objects, so as to determine which
nodes could be regarded as the closest ones. There are two basic concepts usually
used to group local nodes in un-weighted graph . We will brieﬂy introduce
them before providing the notion of Corenet.
Deﬁnition 1 (Egonet). Given a node(ego) vi ∈V, the egonet of vi is deﬁned
as egonet(vi)={vi} ∪{vj | vj ∈V, eij ∈E}
Where eij is the edge between vi and vj.
Deﬁnition 2 (Super-egonet). Given a node(ego) vi ∈V, the super-egonet of
vi is deﬁned as super-egonet(vi)={ego(vi)} ∪{ego(vj) | vj ∈V, eij ∈E}
Obviously, these two concepts are very simple in obtaining the local substructure: they just regard 1-hop neighbors(egonet) or neighbors within 2-hop(superegonet) as the ego’s closest neighbors. However, they will encounter problems
T. Ji, D. Yang, and J. Gao
when dealing with weighted graphs. As in the case of a friendship network with
edge-weights representing interactions between friends, one is likely to be closer
to his intimate friend’s intimate friend instead of his nodding acquaintances.
Consider the situation in Figure 2, where node X is the ego, Y1, Y2,Y3 are 1-hop
neighbors of X, Z1 is its 2-hop neighbor. By following the deﬁnition of egonet,
as Figure 2(b) shows, Y1, Y2 and Y3 are the 3-closest neighbors of X. The concept of egonet focuses only on structural connection but ignores the power of
closeness transmission. Therefore, it requires a forceful measurement considering
both connectivity and closeness.
First, we propose the following two notions to assess the closeness between
ego and its neighbors. We call the node of interest core to diﬀerentiate it from
Fig. 2. Comparison of Egonet and Corenet
Deﬁnition 3 (Closeness related to the core). Let node v0 be core, v0∈V.
For ∀vl ∈V , we assume that there are d paths connecting v0 and vl. The jth
path (l in length) passes through nodes {v0, v1, v2, ..., vl} in sequence, where
1 ⩽j ⩽d . Then the closeness between v0 and vl is deﬁned as:
Closeness(v0, vl) = max
Where wvivi+1 is the weight of the edge between vi and vi+1, and wvi is the
sum of the weights of the edges connected to node vi. Obviously, ∀vl ∈V ,
Closeness(v0, vl) ∈ . The higher the value, the more intimate the relation is. It is possible that a node directly connected with the core owns a
smaller closeness. For example, in Figure 2, Closeness(X, Y1) =
and Closeness(X, Z1) =
In the case that two (or more) identical values of closeness are obtained from
two (or more) diﬀerent paths, to avoid closeness drift, we prefer the path that
includes the edge directly connecting the core with maximum weight.
Incremental Local Evolutionary Outlier Detection
Deﬁnition 4 (k-closeness of the core). Let node v0 be core, v0∈V. For ∀
k>0, the k-closeness of the core, denoted as k-closeness(v0), is deﬁned as :
(i) For at least k nodes vp∈V\{v0}, it holds that Closeness(v0,vp)≥
k-closeness(v0), and
(ii) For at most k-1 nodes vp∈V\{v0}, it holds that Closeness(v0,vp)>
k-closeness(v0).
Diﬀerent with the concepts of Egonet and Super-egonet, the deﬁnition 4 considers the top-k ”closest” neighbors of the core only based on closeness transmission, instead of linking relationships. In this deﬁnition, the ”closest” neighbors
are those nodes with larger value of closeness, rather than directly connecting
with the core.
Deﬁnition 5 (k-closeness neighborhood of the core). Given the k-closeness
of core v0, the k-closeness neighborhood of v0 contains every node whose closeness
related to v0 is not smaller than the k-closeness(v0). Formally, Nk(v0)= {vp ∈
V\{v0} | Closeness(v0,vp) ≥k-closeness(v0)}.
As mentioned above, egonet concerns only the nodes directly connected with
the node of interest, while the closeness measurement (Def. 3-5) mainly consider
closeness transmission. The former completely ignores the edge-weight information, similarly, the latter ignores the risk that the reliability may reduce after
successive transmissions. Thus, for the purpose of discovering the local context
for the core, we propose a notion named Corenet that balances the topology
structure and the closeness transmission.
Deﬁnition 6 (Corenet). Given the k-closeness of core, k-closeness(v0), the
Corenet of v0 contains nodes that satisfy the conditions: (i) the closeness related
to v0 is not smaller than the k-closeness(v0), and (ii) they are in the super-egonet
of v0. Formally, vp∈super-egonet(v0)\{v0}, Corenet(v0) is deﬁned as:
Corenet(v0) =
super−egonet(v0),
vp Closeness(v0, vp) ≥k−closeness(v0)
So far, we have deﬁned corenet as the local context of the core, which fully
takes closeness transmission into account and avoids meaningless excessive transmissions by imposing a structural restriction. It is obvious that only the nodes
in super-egonet(v0) need to be calculated closeness related to the core and the
maximum size of corenet is the number of the core’s neighbors within 2-hop.
Phase II: Measuring Outlying Score
In this subsection, we will discuss how to detect LEOutliers by comparing
Corenets at diﬀerent snapshots. Since most real social networks are gradually
evolving, which means successive snapshots are likely similar to each other (sharing more than 99% of their edges ). We utilize this property to exploit redundancies among similar snapshots and focus only on the components changing
T. Ji, D. Yang, and J. Gao
over time. The time-varying components and their notations are listed in Table 1. The changes of these components will aﬀect their neighbors in a certain
range. For example, if Z1 is deleted from Figure 2(c), it will aﬀect the Corenet
of X. Thus, the Corenet of X need to be redetermined and X has to be examined for any anomalous evolving behavior. The following deﬁnition describes the
inﬂuence of the time-vary components.
Table 1. Time-varying Components and their Notations
Time-varying Component
Event at time t+1
insertion of a new object
deletion of an old object
generation of a new edge
e+ with endpoints ve+
deletion of an old edge
e−with endpoints ve−
Edge-weight
increase weight of an edge w+ with endpoints vw+
decrease weight of an edge w−with endpoints vw−
Deﬁnition 7 (Incremental nodes collection: IC). Given two snapshots
GT −1 and GT , the diﬀerences between them are time-vary components, as illustrated in Table 1. The range of nodes that could be aﬀected by time-varying
components is deﬁned as:
IC = superegonetT(v+) ∪superegonetT −1(v−)
∪egonetT(ve+) ∪egonetT −1(ve−)
∪egonetT (vw+) ∪egonetT −1(vw−)
Where superegonetT(v+) is the super-egonet of time-varying node v+ in graph
GT , and other ﬁve are similar.
From deﬁnition 7, the time-vary components inﬂuence only limited number of
their neighbors, namely nodes in IC. Thus our algorithm only need to examine
the nodes in IC instead of the total number of nodes in the social network.
Before we present the particular measuring function, we ﬁrst analyze the signs
that a node is evolving abnormally. Consider we have two snapshots GT −1 and
GT , and the node of interest is v, there are two major signs to show that v is
likely to be a LEOutlier:
(1) The members of Corenet(v) in GT −1 no longer belong to Corenet(v) or
their closeness related to v is getting weaker from GT −1 to GT ;
(2) The new members added to Corenet(v) at time T have clear distinction
with the former members, moreover, their closeness related to v can be unexpected high.
These two anomalous indication can be measured by Score 1 and Score 2
respectively, and the outlying score is the sum.
Incremental Local Evolutionary Outlier Detection
Score). Given two snapshots GT −1 and GT ,
CorenetT −1(v) and CorenetT (v) represent the Corenets of node v in GT −1 and
GT respectively. We denote the intersection of CorenetT −1(v) and CorenetT(v)
except v as Cold, which is the set of old neighbors of node v. The elements of
CorenetT −1(v)\Cold are the neighbors removed from Corenet(v) at time T, denoted as Cremoved. The elements of CorenetT(v)\Cold are new neighbors of v,
denoted as Cnew. The outlying score of node v is deﬁned as:
OutlyingScore(v) =
[closenessT −1(vi, v) −closenessT(vi, v)]
vr∈Cremoved
closenessT −1(vr, v)
[(1 −wvivj
) × closenessT(vj, v)]
Where wvivj is the weight of edge between vi and vj, wvj is the sum of the
weights of the edges connected to vj.
The sum of former summation terms is Score 1, which measures outlying
degree caused by situation (1). Similarly, the third summation term represents Score 2, which measures outlying degree caused by new neighbors in
situation (2).
Algorithm. IcLEOD Algorithm (High level deﬁnition)
Input: Snapshots GT −1 and GT , the number of closet neighbors related to the
core k, the number of LEOutliers n;
Output: n LEOutliers
Step 1: Identify the time-varying components by comparing GT −1 and GT ;
Step 2: Determine incremental nodes collection IC based on time-varying components;
Step 3: For each node v in IC, compute CorenetT −1(v) and CorenetT (v);
Step 4: Compute outlying score for each object according to Eq.2;
Step 5: Select and output the objects with the ﬁrst n-largest Outlying Score;
Experiments
In this section, we illustrate the general behavior of the proposed IcLEOD algorithm. Since there is no ground truth for outlier detection, we test the accuracy
of our approach on multiple synthetic datasets with injected outliers. We also
compare scalability performance of our approach with several baseline methods
on synthetic datasets, and we present some meaningful cases obtained by our
approach on real data set DBLP.
T. Ji, D. Yang, and J. Gao
We compare the proposed algorithm with the following three baseline methods:
– CEOD: This baseline is a community-based outlier detection method ,
which takes three necessary procedures to detect outliers evolving diﬀerently
with their communities, including community discovery, community matching and outlier detection.
– EGO: In this approach, we regard the nodes in egonet are the closest neighbors of ego (node of interest), and we detect outliers by comparing the
egonets at diﬀerent timestamps.
– SuperEGO: This method is similar to EGO except that it considers neighbors
within 2-hop as the ego’s closest neighbors.
Data Description and Evaluation Measure
Synthetic Data Sets: We generate a variety of synthetic datasets, each of which
consists of two snapshots.
First, we use the Butterﬂy generator in order to generate datasets with
normal nodes. The synthetic weighted graph follows WPL(weight power law)
and SPL(snapshot power law), i.e., W(t) = E(t)α and Wn ∝dβ
n. E(t), W(t) are
the number of edges and total weight of a graph respectively at time t, Wn is
the total weight of the edges attached to each node and dn is the degree of the
node. We set α and β to be 1.3 and 1.1 respectively.
Next, for each dataset, we inject outliers. We ﬁrst set the percentage of outliers
η, and inject |V|snapshot1×η outliers into datasets. |V|snapshot1 is the number of
vertices in Snapshot1. Then we choose a random couple of objects e.g. v1 and
v2, which exist in both Snapshot1 and Snapshot2. If v1 and v2 are far apart
with common acquaintances few enough, we swap v1 and v2 in Snapshot2. Thus,
we inject two outliers in the dataset. More detail information about synthetic
datasets is shown in Table 2. Change ratio is the percentage of time-varying
components.
Table 2. Summary of Synthetic Datesets
Dataset |V|snapshot1 |E|snapshot1 |V|snapshot2 |E|snapshot2 Change Ratio
DBLP: We adopt DBLP as the real dataset (dblp.uni-trier.de/), which contains computer science scientiﬁc publications. In our representation, we consider
a undirected co-authorship network. The weighted graph W is constructed by
extracting author-paper information: each author is denoted as a node in W;
journal and conference papers are represented as links that connect the authors
Incremental Local Evolutionary Outlier Detection
together; the edge weight is the number of joint publications by these two authors. We ﬁrst removed the nodes with too low degree, than we extracted two
co-authorship snapshots corresponding to the years 2001-2004 (13,511 authors)
and 2005-2008 (14,270 authors).
We measured the performance of diﬀerent algorithms using well-known metric
F1 measure, which is deﬁned as follows.
F1 = 2 × Recall × Precision
Recall + Precision
Where recall is ratio of the number of relevant records retrieved to the total
number of relevant records in the dataset; precision is ratio of the number of
relevant records retrieved to the total number of irrelevant and relevant records
retrieved.
The Accuracy of IcLEOD Algorithm
We evaluate the accuracy of the proposed algorithms on the simulated datasets.
The accuracy of the algorithms is measured by detecting the injected outliers as
that of the groundtruths. We set the number of closet neighbors k to 30, 15, 10 for
SYN1, SYN2 and SYN3, respectively. We vary the percentage of injected outliers
η as 1%, 2% and 5%. In fairness to all algorithms, we perform 50 experiments
for each parameter setting and report the average F1 of all algorithms. Table 3
illustrates the comparison results.
Table 3. The Accuracy Comparison on the Synthetic Datasets
As it can be observed from Table 3, the proposed algorithm (IcLEOD) outperforms the others in indicating outliers precisely for all the settings. It is clear
that CEOD and EGO fail to ﬁnd local evolutionary outliers. This is because
the former identiﬁes outliers form the view of entire community instead of the
T. Ji, D. Yang, and J. Gao
local neighborhood substructure, and the latter only consider the neighbors with
direct connectivity. The overall performance of SuperEGO is better than other
baselines, but it signiﬁcantly underperforms when the individual object’s edgeweight distribution is clearly not uniform, like SYN1. This is due to SuperEGO
ignores the edge-weight information. In contrast, the proposed algorithm detects outliers by considering both the local topology structure and the closeness
transmission.
Fig. 3. Sensitivity
Figure 3 shows the sensitivity of the IcLEOD algorithm on parameter k. Two
black lines represent the performance of baseline methods EGO and SuperEGO,
respectively. We vary k from 10 to 20 for IcLEOD algorithm, as illustrated using
the red line. The three algorithms are applied on the same data set, SYN2 and
5% outliers. Obviously, the proposed method is superior to two baseline methods,
in spite of some changes caused by parameter variation.
The Scalability of IcLEOD Algorithm
To evaluate the scalability of IcLEOD, we conduct experiments on generated
datasets as they vary the number of nodes. In Figure 4, the X-axis represents
the number of nodes, whereas the Y-axis illustrates the computation time. We
noticed that the processing time of the proposed approach is obviously lower
than CEOD method. This is because the proposed approach only needs to calculate Corenets for nodes in IC (Def. 7), whereas CEOD method has to discover
communities for entire network at each snapshot, even when there is no apparent change between two snapshots. Despite the EGO and SuperEGO approaches
need less computation time, they have no speciﬁc procedure to determine the
closeness neighborhood, which is likely to cause unfavorable results. The experiments demonstrate that there is a linear dependency of IcLEOD’s processing
Incremental Local Evolutionary Outlier Detection
Fig. 4. Scalability Test of algorithms
time on the number of time-varying components in networks. Moreover, we can
see that for the 104 network, the computation time is less than 20 seconds. This
property means that the algorithm is practical in real applications.
Case Studies for Real Data Set
We will discuss an interesting outlier discovered by our algorithm on DBLP
data set, which provides an intuitive perception about the eﬀectiveness of our
LEOutlier Case: [DBLP] Alexander Tuzhilin
We notice that Alexander Tuzhilin is a LEOutlier corresponding to DBLP 2001-
2004 and DBLP 2005-2008. In DBLP 2001-2004 he was interested in Association
Rules Analysis, and he shifted the focus of his research to Recommendation
System in DBLP 2005-2008. We further noticed that his coauthors and the
number of joint publications with these coauthors in two snapshots are very
diﬀerent. The principal members of his Corenets in two snapshots are listed as
– Snapshot DBLP 2001-2004, Corenet1(Alexander Tuzhilin): Tianyi Jiang,
Hong Zhang, Balaji Padmanabhan, Gediminas Adomavicius etc.
– Snapshot DBLP 2005-2008, Corenet2(Alexander Tuzhilin): Ada wai chee
Fu, Cosimo Palmisano, Michele Gorgoglione, David jensen, Tianyi Jiang,
Christos Faloutsos, Gueorgi Kossinets etc.
As the number of his publications increased, he established partnership with new
researchers in recommendation system domain in the years 2005-2008 instead
T. Ji, D. Yang, and J. Gao
of keeping or strengthening relationships with his coauthors in 2001-2004. The
research ﬁeld of most his former coauthors was still association rules analysis,
still others turned research direction to other domains except recommendation
Conclusions
Since dynamic social networking applications are becoming increasingly popular, it is very important to detect anomalies in the form of unusual evolutionary behaviors. In this paper, we focus on outlier detection in evolving weighted
graphs from a local perspective. We propose a novel outlier detection algorithm
IcLEOD, to identify objects with anomalous evolutionary behavior particularly
relative to their local neighborhoods. IcLEOD is an eﬀective two-stage algorithm.
In the ﬁrst phase, we carefully design the local neighborhood subgraph named
Corenet for individual object, which contains the node of interest and its closest neighbors in terms of associated structure and edge-weight information. To
quantify how outlying an object is, we put forward a measurement in the second
phase by analyzing and comparing the Corenets at diﬀerent snapshots. IcLEOD
algorithm is signiﬁcant eﬃcient for LEOutlier detection in gradually evolving
networks, because it could avoid repeated calculations by incrementally analyzing the dynamic components. The experimental results on both real datasets
and synthetic datasets clearly ascertain that the proposed algorithm is capable
of identifying local evolutionary outliers accurately and eﬀectively.
Future work could will concentrate on further reﬁnement of IcLEOD algorithm
for dealing with general evolving datasets with multiple snapshots eﬃciently.
Acknowledgment. This work was supported by the National High Technology Research and Development Program of China (Grant No. 2012AA011002),
National Science and Technology Major Program (Grant No. 2010ZX01042-
002-002-02, 2010ZX01042-001-003-05), National Science & Technology Pillar
Program (Grant No. 2009BA H44B03), Natural Science Foundation of China
61073018, the Cultivation Fund of the Key Scientiﬁc and Technical Innovation
Project, Ministry of Education of China (Grant No. 708001) and the Shenzhen-
Hong Kong Innovation Cooperation Project (No. JSE201007160004A). We
would like to thank anonymous reviewers for their helpful comments.