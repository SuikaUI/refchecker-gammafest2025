Fast Algorithms for Convolutional Neural Networks
Andrew Lavin
 
Scott Gray
Nervana Systems
 
Deep convolutional neural networks take GPU days of
compute time to train on large data sets. Pedestrian detection for self driving cars requires very low latency. Image recognition for mobile phones is constrained by limited
processing resources. The success of convolutional neural
networks in these situations is limited by how fast we can
compute them. Conventional FFT based convolution is fast
for large ﬁlters, but state of the art convolutional neural
networks use small, 3 × 3 ﬁlters. We introduce a new class
of fast algorithms for convolutional neural networks using
Winograd’s minimal ﬁltering algorithms. The algorithms
compute minimal complexity convolution over small tiles,
which makes them fast with small ﬁlters and small batch
We benchmark a GPU implementation of our algorithm with the VGG network and show state of the art
throughput at batch sizes from 1 to 64.
1. Introduction
Deep convolutional neural networks (convnets) achieve
state of the art results on image recognition problems . The networks take several days of GPU time
to train and require signiﬁcant compute resources during
classiﬁcation as well. Larger data sets and models lead to
better accuracy but also increase computation time. Therefore progress in deep neural networks is limited by how fast
the networks can be computed.
Likewise the application of convnets to low latency inference problems, such as pedestrian detection in self driving car video imagery, is limited by how fast a small set of
images, possibly a single image, can be classiﬁed.
Distributed training of convnets can be achieved by partitioning each batch of examples across the nodes of a cluster
and accumulating weight updates across the nodes. Large
batch sizes adversely affect convergence of the network, so
the minimum batch size that can be computed efﬁciently
places an upper limit on cluster size .
State of the art convnet architectures for image recognition use deep networks of 3 × 3 convolutional layers, because they achieve better accuracy with fewer weights than
shallow networks with larger ﬁlters .
Therefore there is a strong need for fast convnet algorithms for small batch sizes and small ﬁlters.
conventional convnet libraries require large batch sizes and
large ﬁlters for fast operation.
This paper introduces a new class of fast algorithms for
convolutional neural networks based on the minimal ﬁltering algorithms pioneered by Winograd . The algorithms
can reduce the arithmetic complexity of a convnet layer by
up to a factor of 4 compared to direct convolution. Almost
all of the arithmetic is performed by dense matrix multiplies of sufﬁcient dimensions to be computed efﬁciently,
even when the batch size is very small. The memory requirements are also light compared to the conventional FFT
convolution algorithm. These factors make practical implementations possible. Our implementation for NVIDIA
Maxwell GPUs achieves state of the art throughput for all
batch sizes measured, from 1 to 64, while using at most
16MB of workspace memory.
2. Related Work
The FFT and convolution theorem have been used to reduce the arithmetic complexity of convnet layers, ﬁrst by
Mathieu et al. , then reﬁned by Visalache et al. ,
and then implemented in the NVIDIA cuDNN library .
The Strassen algorithm for fast matrix multiplication was
used by Cong and Xiao to reduce the number of convolutions in a convnet layer, thereby reducing its total arithmetic complexity. The authors also suggested that more
techniques from arithmetic complexity theory might be applicable to convnets.
Various approaches have been attempted to reduce the
complexity of convnets by quantizing or otherwise approximating the convolutional layer.
We consider these approaches as orthogonal and complementary to those that exploit algebraic structure, and therefore declare them outside
the scope of this paper.
3. Convolutional Neural Networks
A convnet layer correlates a bank of K ﬁlters with C
channels and size R × S against a minibatch of N images
with C channels and size H ×W. We denote ﬁlter elements
as Gk,c,u,v and image elements as Di,c,x,y.
The computation of a single covnnet layer output Yi,k,x,y
is given by the formula:
Yi,k,x,y =
Di,c,x+u,y+vGk,c,u,v
and we can write the output of an entire image/ﬁlter pair as
Di,c ∗Gk,c
where ∗denotes 2D correlation.
4. Fast Algorithms
It has been known since at least 1980 that the minimal
ﬁltering algorithm for computing m outputs with an r-tap
FIR ﬁlter, which we call F(m, r), requires
µ(F(m, r)) = m + r −1
multiplications [13, p. 39]. Also, we can nest minimal 1D
algorithms F(m, r) and F(n, s) to form minimal 2D algorithms for computing m × n outputs with an r × s ﬁlter,
which we call F(m × n, r × s). These require
µ(F(m × n, r × s)) = µ(F(m, r))µ(F(n, s))
= (m + r −1)(n + s −1)
multiplications . We can continue to nest 1D algorithms
to form algorithms for multi-dimensional FIR ﬁlters.
It is interesting to note that in 1D, 2D, and multidimensions, the minimal algorithm requires a number of
multiplications equal to the number of inputs.
words, to compute F(m, r) we must access an interval of
m + r −1 data values, and to compute F(m × n, r × s)
we must access a tile of (m + r −1) × (n + s −1) data
values. Therefore the minimal ﬁltering algorithm requires
one multiplication per input.
4.1. F(2x2,3x3)
The standard algorithm for F(2, 3) uses 2×3 = 6 multiplications. Winograd [13, p. 43] documented the following
minimal algorithm:
m1 + m2 + m3
m2 −m3 −m4
m1 = (d0 −d2)g0
m4 = (d1 −d3)g2
m2 = (d1 + d2)g0 + g1 + g2
m3 = (d2 −d1)g0 −g1 + g2
This algorithm uses just 4 multiplications and is therefore minimal by the formula µ(F(2, 3)) = 2 + 3 −1 = 4.
It also uses 4 additions involving the data, 3 additions and
2 multiplications by a constant involving the ﬁlter (the sum
g0 + g2 can be computed just once), and 4 additions to reduce the products to the ﬁnal result.
Fast ﬁltering algorithms can be written in matrix form
(Gg) ⊙(BT d)
where ⊙indicates element-wise multiplication.
F(2, 3), the matrices are:
A minimal 1D algorithm F(m, r) is nested with itself to
obtain a minimal 2D algorithm, F(m × m, r × r) like so:
[GgGT ] ⊙[BT dB]
where now g is an r × r ﬁlter and d is an (m + r −1) ×
(m+r−1) image tile. The nesting technique can be generalized for non-square ﬁlters and outputs, F(m × n, r × s),
by nesting an algorithm for F(m, r) with an algorithm for
F(2×2, 3×3) uses 4×4 = 16 multiplications, whereas
the standard algorithm uses 2 × 2 × 3 × 3 = 36. This
is an arithmetic complexity reduction of 36
16 = 2.25. The
data transform uses 32 additions, the ﬁlter transform uses
28 ﬂoating point instructions, and the inverse transform uses
24 additions.
Algorithms for F(m×m, r ×r) can be used to compute
convnet layers with r × r kernels. Each image channel is
divided into tiles of size (m+r−1)×(m+r−1), with r−
1 elements of overlap between neighboring tiles, yielding
P = ⌈H/m⌉⌈W/m⌉tiles per channel, C. F(m×m, r×r)
is then computed for each tile and ﬁlter combination in each
channel, and the results are summed over all channels.
Substituting U = GgGT and V = BT dB, we have:
Labeling tile coordinates as (ex, ey), we rewrite the convnet layer formula (2) for a single image i, ﬁlter k, and tile
coordinate (ex, ey) as:
Yi,k,ex,ey =
Di,c,ex,ey ∗Gk,c
Uk,c ⊙Vc,i,ex,ey
Uk,c ⊙Vc,i,ex,ey
Thus we can reduce over C channels in transform space,
and only then apply the inverse transform A to the sum.
This amortizes the cost of the inverse transform over the
number of channels.
We examine the sum
Mk,i,ex,ey =
Uk,c ⊙Vc,i,ex,ey
and simplify the notation by collapsing the image/tile coordinates (i, ex, ey) down to a single dimension, b. We also label each component of the element-wise multiplication separately, as (ξ, ν), yielding:
This equation is just a matrix multiplication, so we can
M (ξ,ν) = U (ξ,ν)V (ξ,ν)
Matrix multiply has efﬁcient implementations on CPU,
GPU, and FPGA platforms, owing to its high computational
intensity. Thus we have arrived at the practical implementation for the fast algorithm listed in Algorithm 1.
Winograd documented a technique for generating the
minimal ﬁltering algorithm F(m, r) for any choice of m
and r. The construction uses the Chinese remainder theorem to produce a minimal algorithm for linear convolution, which is equivalent to polynomial multiplication, then
transposes the linear convolution algorithm to yield a minimal ﬁltering algorithm. The reader is referred to Winograd’s seminal book , or Blahut’s book for a modern treatment of the subject. We provide derivations of the
speciﬁc algorithms used in this paper in the supplementary
Algorithm 1 Compute Convnet Layer with Winograd Minimal Filtering Algorithm F(m × m, r × r)
P = N⌈H/m⌉⌈W/m⌉is the number of image tiles.
α = m + r −1 is the input tile size.
Neighboring tiles overlap by r −1.
dc,b ∈Rα×α is input tile b in channel c.
gk,c ∈Rr×r is ﬁlter k in channel c.
G, BT , and AT are ﬁlter, data, and inverse transforms.
Yk,b ∈Rm×m is output tile b in ﬁlter k.
for k = 0 to K do
for c = 0 to C do
u = Ggk,cGT ∈Rα×α
Scatter u to matrices U: U (ξ,ν)
for b = 0 to P do
for c = 0 to C do
v = BT dc,bB ∈Rα×α
Scatter v to matrices V: V (ξ,ν)
for ξ = 0 to α do
for ν = 0 to α do
M (ξ,ν) = U (ξ,ν)V (ξ,ν)
for k = 0 to K do
for b = 0 to P do
Gather m from matrices M: mξ,ν = M (ξ,ν)
Yk,b = AT mA
4.2. F(3x3,2x2)
Training a network using stochastic gradient descent requires computation of the gradients with respect to the inputs and weights. For a convnet layer, the gradient with respect to the inputs is a convolution of the next layer’s backpropagated error, of dimension N × K × H × W, with a
ﬂipped version of the layer’s R × S ﬁlters. Therefore it
can be computed using the same algorithm that is used for
forward propagation.
The gradient with respect to the weights is a convolution
of the layer inputs with the backpropagated errors, producing R×S outputs per ﬁlter and channel. Therefore we need
to compute the convolution F(R×S, H ×W), which is impractical because H×W is much too large for our fast algorithms. Instead we decompose this convolution into a direct
sum of smaller convolutions, for example F(3 × 3, 2 × 2).
Here the algorithm’s 4 × 4 tiles are overlapped by 2 pixels
in each dimension, and the 3 × 3 outputs are summed over
all tiles to form F(3 × 3, H × W).
The transforms for F(3 × 3, 2 × 2) are given by:
With (3 + 2 −1)2 = 16 multiplies versus direct convolution’s 3 × 3 × 2 × 2 = 36 multiplies, it achieves the same
36/16 = 2.25 arithmetic complexity reduction as the corresponding forward propagation algorithm.
4.3. F(4x4,3x3)
A minimal algorithm for F(4, 3) has the form:
The data transform uses 13 ﬂoating point instructions,
the ﬁlter transform uses 8, and the inverse transform uses
Applying the nesting formula yields a minimal algorithm
for F(4 × 4, 3 × 3) that uses 6 × 6 = 36 multiplies, while
the standard algorithm uses 4 × 4 × 3 × 3 = 144. This is an
arithmetic complexity reduction of 4.
The 2D data transform uses 13(6 + 6) = 156 ﬂoating
point instructions, the ﬁlter transform uses 8(3 + 6) = 72,
and the inverse transform uses 10(6 + 4) = 100.
The number of additions and constant multiplications
required by the minimal Winograd transforms increases
quadratically with the tile size [9, p. 211]. Thus for large
tiles, the complexity of the transforms will overwhelm any
savings in the number of multiplications.
The magnitude of the transform matrix elements also increases with increasing tile size. This effectively reduces
the numeric accuracy of the computation, so that for large
tiles, the transforms cannot be computed accurately [13,
Convnets require surprisingly little numeric precision . This implies that we can sacriﬁce some numeric accuracy in the ﬁltering computation without affecting the
accuracy of the convnet.
We examine the possibility of
F(6 × 6, 3 × 3) in the supplementary material.
4.4. Fast Fourier Transform
The Fast Fourier Transform (FFT) can be used to produce a tiled convolution algorithm that has the same form
as Algorithm
The main difference is that the transform matrices are replaced with FFT and inverse FFT,
and point-wise multiplication of complex FFT components
yields cyclic convolution. Only m × n components of the
(m + r −1) × (n + s −1) cyclic convolution are valid, the
rest must be discarded, and the tiles must be overlapped by
r −1 and s−1 in order to recompute the discarded outputs.
This technique is referred to as overlap and save [2, p. 195].
The similarity of overlap and save to our approach makes
for an easy comparison. With FFT based convolution, the
multiply stage still uses 1 multiply per input, but now the
operands are complex numbers. Direct multiplication of
complex numbers requires 4 real multiplications. Thankfully, a couple of tricks reduce the complexity further.
The Fourier transform of a real signal has Hermitian
symmetry, which reduces the number of unique products in
each U ⊙V by almost half. FFT based convnet implementations have exploited this property . Speciﬁcally, the
discrete Fourier transform of a α × α array of real values
can be represented with an array of α × (⌊α
2 ⌋+ 1) complex
values. Furthermore U HV H = (UV )H, so the products
of the missing values can be reconstructed simply by taking
the complex conjugate of the computed values. Thus the
multiply stage of the FFT convnet algorithm with tile size
α = m + r −1 requires N⌈H
2 ⌋+ 1) complex multiplications, or (⌊α
2 ⌋+1)/α complex multiplies per
Using the standard algorithm for multiplying complex
numbers, this equals 4(⌊α
2 ⌋+ 1)/α > 2 real multiplies per
Another technique, which to our knowledge has not been
used in convnets, is to use a fast algorithm to multiply complex numbers with 3 real multiplications :
(x0 + ix1)(y0 + iy1) = [x0y0 −x1y1, i(x0y1 + x1y0)]
= [ucva + uavc, i(uavc −ubvb)]
ub = x0 + x1
uc = x1 −x0
vc = y0 + y1
β′, γ′, δ′
Table 1. Multiply (α′), data transform (β′), ﬁlter transform (γ′),
and inverse transform (δ′) normalized arithmetic complexity versus tile size, for both Winograd and FFT based convolution.
F(4x4,3x3) has tile size 6. Direct convolutions has tile size 3.
An FFT based convnet algorithm can incorporate this by
modifying the FFT transforms of the ﬁlter and data to output
the the real valued matrices (Ua, Ub, Uc) and (Va, Vb, Vc)
instead of the complex valued matrices U and V . This adds
2 ﬂoating point instructions per output to the ﬁlter transform, and 1 to the data transform. It also increases the memory footprint of each matrix by half.
Then we can calculate M = UV using 3 calls to a standard real matrix multiply function (e.g. SGEMM):
M1 = −UbVb + T,
M0 = UcVa + T
M = (M0, iM1)
The accumulation of temporary matrix T is performed
using regular SGEMM with β = 1 and C = T , at the cost
of adding 2 ﬂoating point instructions per output. We can
think of these instructions as adding to the inverse transform
cost. The temporary matrix T increases memory use by
half, so that the total workspace size is approximately twice
that of FFT based convolution with direct CGEMM.
Combining Hermitian symmetry with fast CGEMM
gives us a multiplication stage with 3(⌊α
2 ⌋+ 1)/α > 1.5
real multiplies per input. Recall that the multiply stage of
the Winograd algorithms is always 1 real multiply per input. Thus even with fast CGEMM, FFT base convolution
must use a signiﬁcantly larger tile size in order to rival the
arithmetic complexity of the Winograd algorithms.
For the FFT transform itself, we consider the split-radix
FFT algorithm, which is the minimal practical FFT algorithm when N is a power of 2 [9, p. 150]. We assume the
2D FFT transform is constructed using row-column composition, and borrow the complexity ﬁgures from the DSP
Handbook [9, pp. 173,175] for Table 1.
FFT with Fast CGEMM
Table 2. Normalized arithmetic complexity for FFT ﬁltering with
fast CGEMM. Fast CGEMM uses 3 multiplies per complex multiply instead of 4, but has slightly greater transform overhead and
uses more memory.
5. Arithmetic Complexity Analysis
In our model of fast convnets, the arithmetic complexity
of the multiplication stage is:
M = N⌈H/m⌉⌈W/n⌉CK(m + R −1)(n + S −1) (19)
When m = n = 1, the formula equals the arithmetic
complexity of direct convolution. Therefore direct convolution is the minimal algorithm for F(1 × 1, R × S)
Although our analysis employs minimal convolutions,
the convnet layer itself is still not minimal because it performs more convolutions than are strictly necessary. We
could reduce the number of convolutions by employing
Strassen recursions as in , but each recursion reduces
all 3 dimensions of our matrices by half while providing
7 reduction in arithmetic complexity. The matrix
multiplications cannot be computed efﬁciently if C or K
is too small.
Fast convolution alone provides a 2.25 or
larger arithmetic complexity reduction while shrinking only
the largest dimension of the matrix, P.
Still, for layers
with large C, K, and P, it may be worthwhile to perform
Strassen recursions in addition to fast convolution. We leave
this as an area for further research.
In order to simplify the equations, we will henceforth
assume that W/m and H/n have no remainders. We also
assume square ﬁlters and blocks, R = S and m = n.
The multiplication complexity can be rewritten as:
M = (m + R −1)2/m2NHWCK
where α = (m + R −1)2 and α′ = α/m2
The total arithmetic complexities of the data, ﬁlter, and
inverse transforms can be written as:
T (D) = β/m2NHWC
T (F) = γCK
T (I) = δ/m2NHWK
where β, γ, and δ are the number of ﬂoating point instructions used by the corresponding transforms for single tiles.
Dividing the complexity of each transform by M yields
its relative complexity:
T (D)/M = β/(Kα2) = β′/K
T (F)/M = γ/(NHWα2/m2)
= γ/(Pα2) = γ′/P
T (I)/M = δ/(Cα2) = δ′/C
We call β′, γ′, and δ′ the normalized arithmetic complexities of the data, ﬁlter, and inverse transforms, respectively.
P = NHW/m2 is the number of tiles per channel.
Adding the terms for each stage gives the total arithmetic
complexity of the convnet layer:
L = α′(1 + β′/K + γ′/P + δ′/C)NHWCK
In order to achieve a large speedup, the multiplication
complexity α′ must be as small as possible, and the transform complexities β′, γ′, and δ′ must each be small compared with K, P, and C, respectively.
For direct convolution, α′ = α2 = R2 and β′ = γ′ =
δ′ = 0. Therefore the maximum speedup of a fast algorithm
versus direct convolution is R2/α′.
We list the normalized transform complexity for different tile sizes and algorithms in Tables 1 and 2. Due to its
similarity to our approach, FFT based convolution complexity can also be measured with Equation 23.
FFT based convnet layers with direct CGEMM must use
tile size at least 64 × 64 to equal the multiplication stage
complexity of Winograd F(4 × 4, 3 × 3) and its 6 × 6 tile,
but then it incurs much greater transform overhead. Also
a 64 × 64 tile will waste computation on many unwanted
pixels for images with sizes that are not close to a multiple
of 62 × 62. Even for moderate size layers, a moderate to
large minibatch must be used, or there will be too few tiles
to compute the CGEMM efﬁciently. Finally, the memory
used by a single transformed ﬁlter channel is 64 × 64 =
4096 units, which is a large expansion of the 3 × 3 = 9 unit
ﬁlter. The 6x6 tile of F(4 × 4) expands the same ﬁlter to
6 × 6 = 36 units.
FFT based convnet layers with fast CGEMM can be
much more competitive with Winograd algorithms. They
have multiplication stage parity with tile size 16, and reasonable transform complexity. Also tile size 16 generates a
reasonably large number of tiles with large convnet layers
or moderate batch size.
Even with fast CGEMM, the larger tile size compared to
Winograd means FFT based convnet implementations must
have a large memory workspace to hold transformed data.
A decent amount of transformed data must be held in order
to amortize transform cost and to generate matrices with
large enough dimensions so that the multiply stage is efﬁcient. This is problematic for current GPUs, which have a
limited amount of on chip memory. CPUs have large caches
and might therefore compute FFT based convolution more
efﬁciently.
6. GPU Implementation
We implemented F(2 × 2, 3 × 3) for NVIDIA Maxwell
GPUs and tested on the NVIDIA Titan X model.
The small 4 × 4 tile size and light weight transforms of
F(2 × 2, 3 × 3) make possible a fused implementation of
the algorithm stages, where the the data and ﬁlter transform,
16 batched matrix multiplies (GEMMs), and inverse transform are all computed in the same block. Another resource
limit is the instruction cache, which can only ﬁt about 720
instructions. Our main loop is larger than this, but aligning
the start of the loop with the 128 byte instruction cache-line
boundary helps mitigate the cost of a cache miss.
The 16 batched GEMMs compute 32×32 outputs, which
enables us to ﬁt the workspace in the registers and shared
memory of a single block and still have 2 active blocks per
SM for latency hiding. Zero padding is implicit through use
of predicates. If the predicate deselects a global image load,
the zero value is loaded with a dual issued I2I instruction.
Image data is stored in CHWN order to facilitate contiguous and aligned memory loads, signiﬁcantly reducing
over-fetch. We employ a “super blocking” strategy to load
32 tiles of size 4×4 from a conﬁgurable number of images,
rows, and columns. For N >= 32, we load tiles from 32
separate images. For N < 32, we load a super block of
X × Y = 32/N tiles per image. This strategy facilitates
efﬁcient loads with small batch sizes, as the W × N dimensions of the input data are contiguous in memory. Furthermore, the 2 pixel overlap between adjacent tiles causes high
L1 cache hit rates when using several tiles in a super block.
We also employ L2 cache blocking to increase the re-use
of overlapping blocks. Since the number of image tiles is
typically much larger than the number of ﬁlters, our block
mapping iterates over a group of up to 128 ﬁlters in the inner
loop, and then iterates over all image tiles in the second
loop. All channels of the ﬁlter group ﬁt in L2 cache, so
each ﬁlter will only be loaded once from DDR memory, and
each image tile will be loaded ⌈K/128⌉times as we iterate
over the ﬁlter groups. This strategy reduces DDR memory
bandwidth by almost half.
We implemented a version of our kernel that loads fp16
data, which decreases global memory bandwidth. We also
implemented a variant that we call “FX” that runs a ﬁlter
transform kernel ﬁrst and stores the result in a workspace
The convolution kernel loads transformed ﬁlter
values from the workspace as needed.
The size of the
workspace is only 16KC units of memory, which equals
just 16MB when K = C = 512 and data is fp32.
3 × 224 × 224
64 × 224 × 224
64 × 112 × 112
128 × 112 × 112
128 × 56 × 56
256 × 56 × 56
256 × 28 × 28
512 × 28 × 28
512 × 14 × 14
Table 3. Convolution layers of VGG network E. All layers uses
3 × 3 ﬁlters. Depth indicates the number of times a given layer
shape occurs in the network. GFLOPs is weighted by depth and
assumes N=1.
7. Experiments
We ran accuracy and speed experiments with VGG Network E . This is a deep network that uses 3×3 ﬁlters exclusively in the convolution layers, which are summarized
in Table 3.
We tested the accuracy of our fast algorithms with both
single precision (fp32) and half precision (fp16) data and
ﬁlters. In all tests we used fp32 arithmetic instructions. We
used random data and ﬁlters from the uniform distribution
[−1, 1] and measured absolute element error. Ground truth
was computed by direct convolution using a double precision accumulator for reductions.
We measured the speed of our GPU implementation of
F(2 × 2, 3 × 3) and compared with cuDNN v3 on a superclocked NVIDIA Titan X GPU. We disabled boost clock
and observed a maximum clock rate of 1126MHz.
GPU has 3072 cores, yielding a device peak throughput of
2 × 3072 × 1126 = 6.96 TFLOPS.
Speed for a given layer was calculated by dividing the
number of GFLOPs of computation required by direct convolution, as tabulated in 3, by the run time in milliseconds to
yield Effective TFLOPS. The reduction of arithmetic complexity allows fast algorithms to have Effective TFLOPS
that can exceed device peak throughput.
Total GFLOPs and run time were calculated by weighting the GFLOPs and run time for each layer by its depth,
and total throughput was calculated as the ratio of the two.
8. Results
Table 4 shows the numeric accuracy of the different convolution layer algorithms tested with single precision (fp32)
and half precision (fp16) input data and ﬁlters.
F(2 × 2, 3 × 3) is actually slightly more accurate than
direct convolution. Its simple transforms do not lose much
precision, and its multiplication stage performs a reduction
over C channels, rather than the RSC ﬁlter elements reduced by direct convolution. F(4 × 4, 3 × 3) has a larger
error, but it is still more accurate than direct convolution
with fp16 data.
All tested algorithms are equally accurate with fp16 data.
Here accuracy is limited by the precision of the inputs. Because direct convolution is accurate enough for training and
inference with low precision data , we conclude that
F(4 × 4, 3 × 3) is too.
Table 5 and Table 6 show the total throughput for VGG
Network E layers for cuDNN and our F(2×2, 3×3) implementation for fp32 and fp16 data for different batch sizes.
For fp32 data, F(2 × 2, 3 × 3) is 1.48X at N = 64 and
2.26X as fast at N = 1. The throughput at N = 16 is 9.49
TFLOPS. For fp16 data, F(2×2, 3×3) extends its lead over
cuDNN, recording 10.28 TFLOPS throughput for N = 64.
N = 8 performance is still very good at 9.57 TFLOPS.
Figure 1 shows throughput by layer. Hatch marks indicate the layers where cuDNN used the FFT algorithm, otherwise direct convolution was used. For F(2 × 2, 3 × 3),
hatch marks indicate that the external ﬁlter transform (FX)
was used, otherwise the fused transform was faster.
cuDNN appears to erroneously select its FFT algorithm
for intermediate values of N despite the fact that it performs
very poorly, under 2 TFLOPS. While this is probably just a
bug, it is revealing. Low performance at moderate values of
N suggests that the FFT convolution implementation either
uses large tiles, or possibly just a single tile per image, as
in , which leads to inefﬁcient multiplication stages unless N is large. At large N, cuDNN FFT performs much
better, but stays well under 8 TFLOPS.
F(2×2, 3×3) performs better than cuDNN at every layer
and batch size, except layer conv1.1, which contributes less
than 0.5% of the total network computation.
In general, we found that the FX variant of our implementation performed best unless the number of ﬁlters and
channels was very large. Computing the ﬁlter transform is
heavily memory bound, therefore transforming a larger ﬁlter bank decreases computational efﬁciency.
The worst F(2 × 2, 3 × 3) performance occurs for the
14×14 layers when N = 1. In this case the 8×4 superblock
runs over the image boundary and computes unwanted pixels. Throughput on this layer conﬁguration is still over 5
TFLOPS, where cuDNN performance is just 1.6 TFLOPS.
cuDNN FFT uses a global memory workspace up to 2.6
GB in our experiments. By contrast, our fused F(2 × 2, 3 ×
3) implementation does not use any global workspace, and
the FX variant uses no more than 16 MB.
F(2 × 2, 3 × 3) performance shows new capabilities for
high throughput and small batch size with state of the art
convolutional neural networks. We expect performance to
increase again when F(4 × 4, 3 × 3) is implemented.
F(2x2,3x3)
F(4x4,3x3)
Table 4. Maximum element error on VGG network layers. With
fp32 data, F(2×2, 3×3) is more accurate than direct convolution.
With fp16 data, all algorithms are equally accurate.
F(2x2,3x3)
Table 5. cuDNN versus F(2 × 2, 3 × 3) performance on VGG
Network E with fp32 data. Throughput is measured in Effective
TFLOPS, the ratio of direct algorithm GFLOPs to run time.
F(2x2,3x3)
Table 6. cuDNN versus F(2 × 2, 3 × 3) performance on VGG
Network E with fp16 data.
vgg.conv1.1
vgg.conv1.2
vgg.conv2.1
vgg.conv2.2
Effective TFLOPS
vgg.conv3.1
vgg.conv3.2
vgg.conv4.1
vgg.conv4.2
Batch Size
cudNN fp16
cudNN FFT fp16
F(2x2,3x3)
F(2x2,3x3) FX
F(2x2,3x3) fp16
F(2x2,3x3) FX fp16
Figure 1. VGG net Effective TFLOPS vs. batch size for cuDNN
and F(2 × 2, 3 × 3) on a 6.96 TFLOPS NVIDIA Titan X GPU.