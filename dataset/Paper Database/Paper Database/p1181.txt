Proceedings of NAACL-HLT 2016, pages 1268–1278,
San Diego, California, June 12-17, 2016. c⃝2016 Association for Computational Linguistics
Convolutional Neural Networks vs. Convolution Kernels:
Feature Engineering for Answer Sentence Reranking
Kateryna Tymoshenko† and Daniele Bonadiman† and Alessandro Moschitti
†DISI, University of Trento, 38123 Povo (TN), Italy
Qatar Computing Research Institute, HBKU, 5825 Doha, Qatar
{kateryna.tymoshenko,d.bonadiman}@unitn.it
 
In this paper, we study, compare and combine
two state-of-the-art approaches to automatic
feature engineering: Convolution Tree Kernels (CTKs) and Convolutional Neural Networks (CNNs) for learning to rank answer
sentences in a Question Answering (QA) setting. When dealing with QA, the key aspect is
to encode relational information between the
constituents of question and answer in learning algorithms. For this purpose, we propose
novel CNNs using relational information and
combined them with relational CTKs.
results show that (i) both approaches achieve
the state of the art on a question answering
task, where CTKs produce higher accuracy
and (ii) combining such methods leads to unprecedented high results.
Introduction
The increasing use of machine learning for the design of NLP applications pushes for fast methods for
feature engineering. In contrast, the latter typically
requires considerable effort especially when dealing
with highly semantic tasks such as QA. For example,
for an effective design of automated QA systems,
the question text needs to be put in relation with the
text passages retrieved from a document collection
to enable an accurate extraction of the correct answers from passages. From a machine learning perspective, encoding the information above consists
in manually deﬁning expressive rules and features
based on syntactic and semantic patterns.
Therefore, methods for automatizing feature engineering are remarkably important also in the light
of fast prototyping of commercial applications. To
the best of our knowledge, two of the most effective methods for engineering features are: (i) kernel
methods, which naturally map feature vectors or directly objects in richer feature spaces; and more recently (ii) approaches based on deep learning, which
have been shown to be very effective.
Regarding the former, in ,
we ﬁrstly used CTKs in Support Vector Machines
(SVMs) to generate features from a question (Q) and
their candidate answer passages (AP). CTKs enable
SVMs to learn in the space of convolutional subtrees
of syntactic and semantic trees used for representing Q and AP. This automatically engineers syntactic/semantic features. One important characteristic
we added in is the
use of relational links between Q and AP, which basically merged the two syntactic trees in a relational
graph (containing relational features).
Although based on different principles, also
CNNs can generate powerful features, e.g., see
 .
can effectively capture the compositional process of
mapping the meaning of individual words in a sentence to a continuous representation of the sentence.
This way CNNs can efﬁciently learn to embed input
sentences into low-dimensional vector space, preserving important syntactic and semantic aspects of
the input sentence. However, engineering features
spanning two pieces of text such as in QA is a more
complex task than classifying single sentences. Indeed, only very recently, CNNs were proposed for
QA by Yu et al. . Although, such network
achieved high accuracy, its design is still not enough
to model relational features.
In this paper, we aim at comparing the ability of
CTKs and CNNs of generating features for QA. For
this purpose, we ﬁrst explore CTKs applied to shallow linguistic structures for automatically learning
classiﬁcation and ranking functions with SVMs.
At the same time, we assess a novel deep learning architecture for effectively modeling Q and AP
pairs generating relational features we initially modeled in .
The main building blocks of
our approach are two sentence models based on
CNNs. These work in parallel, mapping questions
and answer sentences to ﬁxed size vectors, which are
then used to learn the semantic similarity between
them. To compute question-answer similarity score
we adopt the approach used by Yu et al. .
Our main novelty is the way we model relational
information: we inject overlapping words directly
into the word embeddings as additional dimensions.
The augmented word representation is then passed
through the layers of the convolutional feature extractors, which encode the relatedness between Q
and AP pairs in a more structured manner. Moreover, the embedding dimensions encoding overlapping words are parameters of the network and are
tuned during training.
We experiment with two different QA benchmarks for sentence reranking TREC13 and WikiQA . We compare
CTKs and CNNs and then we also combine them.
For this purpose, we design a new kernel that sum
together CTKs and different embeddings extracted
from different CNN layers. Our CTK-based models achieve the state of the art on TREC 13, obtaining an MRR of 85.53 and an MAP of 75.18 largely
outperforming all the previous best results. On WikiQA, our CNNs perform almost on par with tree kernels, i.e., an MRR of 71.07 vs. 72.51 of CTK, which
again is the current state of the art on such data. The
combination between CTK and CNNs produces a
further boost, achieving an MRR of 75.52 and an
MAP of 73.99, conﬁrming that the research line of
combining these two interesting machine learning
methods is very promising.
Related Work
Relational learning from entire pieces of text concerns several natural language processing tasks, e.g.,
QA , Textual Entailment and Paraphrase Identiﬁcation
 . Regarding QA, a referring work
for our research is the IBM Watson system . This is an advanced QA pipeline
based on deep linguistic processing and semantic resources.
Wang et al. used quasi-synchronous grammar to model relations between a question and a candidate answer with syntactic transformations. applied Tree Edit Distance
(TED) for learning tree transformations in a Q/AP
pair. designed a probabilistic model to learn tree-edit operations on dependency parse trees. applied linear
chain CRFs with features derived from TED to automatically learn associations between questions and
candidate answers. Yih et al. applied enhanced lexical semantics to build a word-alignment
model, exploiting a number of large-scale external
semantic resources.
Although the above approaches are very valuable,
they required considerable effort to study, deﬁne and
implement features that could capture relational representations. In contrast, we are interested in techniques that try to automatize the feature engineering step. In this respect, our work is the ﬁrst using CTKs applied to syntactic
and semantic structural representations of the Q/AP
pairs in a learning to rank algorithm based on SVMs.
After this, we proposed several important improvement exploiting different type of relational links between Q and AP, i.e., . The main difference with our previous approaches is usage of better-preprocessing algorithms and new structural representations, which
highly outperform them.
Recently, deep learning approaches have been
successfully applied to various sentence classiﬁcation tasks, e.g., , and for automatically modeling text pairs,
e.g., . Additionally, a number of deep learning models have been
recently applied to question answering, e.g., Yih et
al. applied CNNs to open-domain QA; Bordes et al. propose a neural embedding model
Figure 1: Shallow chunk-based tree for the Q/AP pair in the running example.
combined with the knowledge base for open-domain
QA; Iyyer et al. applied recursive neural networks to factoid QA over paragraphs.
al., 2015) proposed a neural variational inference
model and a Long-short Term Memory network for
the same task.
Recently proposed a siamese convolutional network for matching sentences that employ an attentive average pooling mechanism, obtaining state-of-the-art results in
various tasks and datasets. The work closest to this
paper is and . The former presented a CNN architecture for answer sentence selection that uses a bigram
convolution and average pooling, whereas in the latter we used convolution with k-max pooling. However, these models only partially captures relational
information. In contrast, in this paper, we encode
relational information about words that are matched
betweem Q and AP.
Feature Engineering for QA with CTKs
Our approach to learning relations between two texts
is to ﬁrst convert them into a richer structural representation based on their syntactic and semantic
structures, and then apply CTKs. To make our approach more effective, we further enriched structures with relational semantics by linking the related
constituents with lexical and other semantic links.
Shallow Representation of Short Text Pairs
In our study, we employ a modiﬁed version of the
shallow structural representation of question and answer pairs, CH, described in .
We represent
a pair of short texts as two trees with lemmas at
leaf level and their part-of-speech (POS) tags at the
preterminal level. Preterminal POS-tags are grouped
into chunk nodes and the chunks are further grouped
into sentences. Figure 1 provides an example of this
structure.
We enrich the above representation with the information about question class and question focus. Questions are classiﬁed in terms of their expected answer type. employed
coarse-grained classes from ,
namely HUM (person), ENTY (an entity), DESC
(description), LOC (location), and NUM (number).
In this work, we split the NUM class into three subcategories, DATE, QUANTITY, CURRENCY and
train question classiﬁers as described in . Differently from before, we add the question class node as the rightmost child of the root
node both to the question and the answer structures.
We detect question focus using a focus classiﬁer,
FCLASS, trained as in . However, in our previous model, we classiﬁed all words
over the chunks in the question and picked the one
with the highest FCLASS prediction score as a focus even if it is negative. In this work, if FCLASS
assigns negative scores to all the question chunks,
we consider the ﬁrst question chunk, which is typically a question word, to be a focus. We mark the
focus chunk by prepending the REL-FOCUS tag to
its label.
In previous work, we have shown the importance
of encoding information about the relatedness between Q and AP into their structural representations.
Thus, we employ lexical and question class match,
described hereafter.
Lexical match. Lemmas that occur both in Q and
AP are marked by prepending the REL tag to the
labels of the corresponding preterminal nodes and
their parents.
Question class match. We detect named entities (NEs) in AP and mark the NEs of type compatible1 with the question class by prepending the
REL-FOCUS-QC label to the corresponding prepreterminals in the trees. The QC sufﬁx in the labels
1Compatibility
namely Person, Organization→HUM, ENTY; Misc→ENTY;
Location→LOC;
Number→DATE;
Number→CURRENCY; Percentage, Number→QUANTITY
is replaced by the question class in the given pair.
For example, in Figure 1, the Dumbledore lemma
occurs in both Q and AP, therefore the respective
POS and chunk nodes are marked with REL. The
named entities, Harris, Michael Gambon and Dumbledore have the type Person compatible with the
question class HUM, thus their respective chunk
nodes are marked as REL-FOCUS-HUM (overriding the previously inserted REL tag for the Dumbledore chunk).
Reranking with Tree Kernels
We aim at learning reranker that can decide which
Q/AP pair is more probably correct than others,
where correct Q/AP pairs are formed by an AP containing a correct answer to Q along with a supporting justiﬁcation. We adopt the following kernel for
reranking: PK(⟨o1, o2⟩, ⟨o′
2⟩) = K(o1, o′
2) −K(o1, o′
2) −K(o2, o′
1). In our case,
oi = ⟨Qi, APi⟩and o′
j⟩, where Q
and AP are the trees deﬁned in the previous section, K(oi, o′
j) = TK(Qi, Q′
j) + TK(APi, AP ′
and TK is a tree kernel function. Finally, we also
add (⃗V (o1)−⃗V (o2))·(⃗V (o′
2)) to PK, where
⃗V (oi) is a feature vector representing Q/AP pairs.
Feature Engineering for QA with CNNs
The architecture of our convolutional neural network for matching Q and AP pairs is presented in
Fig. 2. Its main components are: (i) sentence matrices si ∈Rd×|i| obtained by the concatenation of
the word vectors wj ∈Rd (with d being the size
of the embeddings) of the corresponding words wj
from the input sentences (Q and AP) si; (ii) a convolutional sentence model f : Rd×|i| →Rm that
maps the sentence matrix of an input sentence si to
a ﬁxed-size vector representations xsi of size m; (iii)
a layer for computing the similarity between the obtained intermediate vector representations of the input sentences, using a similarity matrix M ∈Rm×m
– an intermediate vector representation xs1 of a sentence s1 is projected to a ˜xs1 = xs1M, which is
then matched with xs2 , i.e.,
by computing a dot-product ˜xs1xs2, thus resulting
in a single similarity score xsim; (iv) a set of fullyconnected hidden layers that model the similarity
between sentences using their vector representations
produced by the sentence model (also integrating the
single similarity score from the previous layer); and
(v) a sigmoid layer that outputs probability scores
reﬂecting how well the Q-AP pairs match with each
The choice of the sentence model plays a crucial
role as the resulting intermediate representations of
the input sentences will affect the successive step of
computing their similarity. Recently, convolutional
sentence models, where f(s) is represented by a sequence of convolutional-pooling feature maps, have
shown state-of-the-art results on many NLP tasks,
e.g., . In this
paper, we opt for a convolutional operation followed
by a k-max pooling layer with k = 1 as proposed in
 .
Considering recent applications of deep learning
models to the problem of matching sentences, our
network is most similar to the models in applied for computing sentence similarity and
in (answer sentence selection in
QA) with the following difference. To compute the
similarity between the vector representation of the
input sentences, our network uses two methods: (i)
computing the similarity score obtained using a similarity matrix M ), and
(ii) directly modelling interactions between intermediate vector representations of the input sentences
via fully-connected hidden layers ). This approach, as proposed in , results in a signiﬁcant
improvement in the task of question answer selection over the two methods used separately. Differently from the above models we do not add additional features in the join layer.
Representation Layers
It should be noted that NNs non-linearly transform
the input at each layer. For instance, the output of
the convolutional and pooling operation f(si) is a
ﬁxed-size representation of the input sentence si. In
the reminder of the paper, we will refer to these vector representations for the question and the answer
passage as the question embedding (QE) and the answer embedding (AE), respectively. Similarly, the
output of the penultimate layer of the network (the
hidden layer whose output is fed to the ﬁnal classiﬁcation layer) is a compact representation of the
input Question and Answer pair, which we call Joint
Sentence Model
(CNN+Pooling)
Representation
Figure 2: CNN for computing the similarity between question and answer.
Embedding (JE).
Injecting Relational Information in CNNs
Sec. 3 has shown that establishing relational links
(REL nodes) between Q and A pairs is very important for solving the QA task. Yih et al. also
use latent word-alignment structure in their semantic similarity model to compute similarity between
question and answer sentences.
Yu et al. 
achieve large improvement by combining the output of their deep learning model with word count
features in a logistic regression model. Differently
from 
we do not add additional features such as the word
count in the join layer. We allow our convolutional
neural network to capture the connections between
related words in a pair and we feed it with an additional binary-like input about overlapping words
 .
In particular, in the input sentence, we associate
an additional word overlap indicator feature o ∈
{0, 1} with each word w, where 1 corresponds to
words that overlap in a given pair and 0 otherwise.
To decide if the words overlap, we perform string
matching. Basically this small feature vector plays
the role of REL tag added to the CTK structures.
Hence, we require an additional lookup table
layer for the word overlap features LTWo(·) with
parameters Wo ∈Rdo×2, where do ∈N is a hyperparameter of the model, which indicates the number of dimensions used for encoding the word overlap features. Thus, we augment word embeddings
with additional dimensions that encode the fact that
a given word in a pair is overlapping or semantically
similar and let the network learn its optimal representation. Given a word wi, its ﬁnal word embedding wi ∈Rd (where d = dw + do) is obtained by
concatenating the output of two lookup table operations LTW(wi) and LTWo(wi).
Experiments
In these experiments, we compare the impact in accuracy of two main methods for automatic feature
engineering, i.e., CTKs and CNNs, for relational
learning, using two different answer sentence selection datasets, WikiQA and TREC13. We propose
several strategies to combine CNNs with CTKs and
we show that the two approaches are complementary
as their joint use signiﬁcantly boosts both models.
Experimental Setup
We utilized two datasets for testing our models:
TREC13. This is the factoid open-domain TREC
QA corpus prepared by . The
training data was assembled from the 1,229 TREC8-
12 questions. The answers for the training questions
were automatically marked in sentences by applying regular expressions, therefore the dataset can be
noisy. The test data contains 68 questions, whose answers were manually annotated. We used 10 answer
passages for each question for training our classi-
ﬁers and all the answer passages available for each
question for testing.
WikiQA. TREC13 is a small dataset with an even
smaller test set, which makes the system evaluation
rather unstable, i.e., a small difference in parameters and models can produce very different results.
Moreover, as pointed by , it has
signiﬁcant lexical overlap between questions and
answer candidates, therefore simple lexical match
models may likely outperform more elaborate methods if trained and tested on it. WikiQA dataset is a larger dataset, created for open
domain QA, which overcomes these problems. Its
questions were sampled from the Bing query logs
and candidate answers were extracted from the summary paragraphs of the associated Wikipedia pages.
The train, test, and development sets contain 2,118,
633 and 296 questions, respectively.
There is no
correct answer sentence for 1,245 training, 170 development and 390 test questions.
Consistently
with , we remove the questions
without answers for our evaluations.
Preprocessing. We used the Illinois chunker , question class and focus classiﬁers trained as in and the Stanford CoreNLP toolkit for the needed preprocessing.
CTKs. We used SVM-light-TK2 to train our models. The toolkit enables the use of structural kernels
 in SVM-light .
We applied (i) the partial tree kernel (PTK) with its
default parameters to all our structures and (ii) the
polynomial kernel of degree 3 on all feature vectors
we generate.
Metaclassiﬁer.
We used the scikit3 logistic regression classiﬁer implementation to train the metaclassiﬁer on the outputs of CTKs and CNNs.
CNNs. We pre-initialize the word embeddings by
running the word2vec tool 
on the English Wikipedia dump and the jacana corpus as in . We opt for
a skipgram model with window size 5 and ﬁltering
2 
3 
State of the art
CNNc 
ABCNN 
LSTMa,c 
NASMc 
Our Individual Models
Our Model Combinations
∗CH+VAE+QE
Meta: CH, VJE, CNNR
Meta: CH, VJE
Meta: CH+VJE, CNNR
Table 1: Performance on the WikiQA dataset
words with frequency less than 5. The dimensionality of the embeddings is set to 50. The input sentences are mapped to ﬁxed-sized vectors by computing the average of their word embeddings. We use a
single non-linear hidden layer (with hyperbolic tangent activation, Tanh), whose size is equal to the size
of the previous layer. The network is trained using
SGD with shufﬂed mini-batches using the Adam update rule . The batch size is
set to 100 examples. The network is trained for a
ﬁxed number of epochs (i.e., 3) for all the experiments. We decided to avoid using early stopping, in
order to do not overﬁt the development set and have
a fair comparison with the CTKs models.
QA metrics. We used common QA metrics: Precision at rank 1 (P@1), i.e., the percentage of questions with a correct answer ranked at the ﬁrst position, the Mean Reciprocal Rank (MRR) and the
Mean Average Precision (MAP).
Experiments on WikiQA
State of the art.
Table 1 reports the results obtained on the WikiQA test set by state-of-the-art systems (lines 1-4) and our models, when removing the
questions with no correct answers (this to be aligned
with previous work). More in detail:
CNNc is the Convolutional Neural Network with
word count,
Model Combinations
Metaclassiﬁers:
CH, VJE, CNNR
CH+VJE, CNNR
Table 2: Performance on the WikiQA using the development set or half of the training set for training
∗CH+VAE+QE
Table 3: Performance on the WikiQA on the development set
ABCNN is the Attention-Based CNN,
LSTMa,c is the long short-term memory network
with attention and word count, and
NASMc is the neural answer selection model with
word count.
CNNR is the relational CNN described in Section 4.
CH4 is a tree kernel-based SVM reranker trained
on the shallow pos-chunk tree representations of
question and answer sentences (Sec. 3.1), where the
subscript coarse refers to the model with the coarsegrained question classes as in .
V is a polynomial SVM reranker, where the subscripts AE, QE, JE indicate the use of the answer,
question or joint embeddings (see Sec. 4.1) as the
feature vector of SVM and + means that two embeddings were concatenated into a single vector.
The results show that our CNNR model performs
comparably to ABCNN , which
is the most recent and accurate NN model and to
CHcoarse. The performance drops when the embeddings AE, QE and JE are used in a polynomial
4Models marked by ∗use an improved version of the preference ranking framework we described in Section 3.2. It is important to show such results as they provide a referring baseline
for future research in this ﬁeld.
SVM reranker. In contrast, CH (using our tree structure enriched with ﬁne-grained categories) outperforms all the models, showing the importance of
syntactic relational information for the answer sentence selection task.
Combining CNN with CTK on WikiQA
We experiment with two ways of combining CTK
with CNNR: (i) at the kernel level, i.e., summing
tree kernels with the polynomial kernel over different embeddings, i.e., CH+V, and (ii) using the predictions of SVM and CNNR models (computed on
the development set) as features to train logistic regression meta-classiﬁers (again only on the development set).
These are reported in the last three
lines of Table 1, where the name of the classiﬁers
participating with their outputs are illustrated as a
comma-separated list. The results are very interesting as all kinds of combinations largely outperform
the state of the art, e.g., by around 3 points in terms
of MRR, 2 points in terms of MAP and 5 points
in terms of P@1 with respect to the strongest standalone system, CH. Directly using the predictions of
the CNNR as features in the meta-classiﬁer does not
impact the overall performance. It should be noted
that the meta-classiﬁer could only be trained on the
development data to avoid predictions biased by the
training data.
Using less training data
Since we train the weights of CNNR on the training set of WikiQA, to obtain the embeddings minimizing the loss function, we risk to have overﬁtted,
i.e., “biased”, JE, AE and QE on the questions and
answers of the training set. Therefore, we conducted
another set of experiments to study this case. We
randomly split the training set into two equal subsets. We train CNNR on one of them and in the
other subset, (referred to as TRAIN50) we produce
the embeddings of questions and answers.
Table 2 reports the results on the WikiQA test
set which we obtained when training SVM on
TRAIN50 and on the development set, DEV. We
trained the meta-classiﬁer on the predictions of the
standalone models on DEV. Consistently with the
previous results, we obtain the best performance
combining the CNNR embeddings with CTK. Even
when we train on the 50% of the training data only,
we still outperform the state of the art, and our
best model CH+VJE performs only around 2 points
lower in terms of MRR, MAP and P@1 than when
training on the full training set.
Finally, Table 3 reports the performance of our
models when tested on the development set and
demonstrates that the improvement obtained when
combining CTK and CNNR embeddings also holds
on it. Note, that we did not use the development set
for any parameter tuning and we train all the models
with the default parameters.
Experiments on TREC13 dataset
TREC13 corpus has been used for evaluation in a
number of works starting from 2007. Table 4 reports
our as well as some state-of-the-art system results
on TREC13. It should be noted that, to be consistent with the previous work, we evaluated our models in the same setting as , i.e., we (i) remove the questions having
only correct or only incorrect answer sentence candidates and (ii) used the same evaluation script and
the gold judgment ﬁle as they used. As pointed out
by Footnote 7 in , the evaluation
script always considers 4 questions to be answered
incorrectly thus penalizing the overall system score.
We note that our models, i.e., CNNR, VJE,
State of the art
Wang et al. 
Heilman and Smith 
Wang and Manning 
Yao et al. 
Severyn and Moschitti 
Yih et al. 
Yu et al. 
Wang and Ittycheriah 
Tymoshenko and Moschitti 
Yang et al. 
Miao et al. 
Individual Models
Model Combinations
Meta: CH, VAE+QE, CNNR
Model Combinations using simpler CH
CHsmpl+VAE+QE
CHsmpl+VJE
Table 4: Results on the TREC13, answer selection task.
VAE+QE, again align with the state of the art. In
contrast, our CTK using CH largely outperforms all
previous work, e.g., 7.6 points more than CNNR
in terms of MRR. Considering that the evaluation
of CH with a script that does not penalize systems
would show real MRR and MAP of 90.56 and 80.08,
respectively, there is little room for improvement
with combinations. Indeed, the table shows no improvement of model combinations over CH.
Therefore, we trained a simpliﬁed version of CH,
CHsmpl, which employs shallow chunk-based representations without the question focus or question
class information, i.e., only using the basic relational information represented by the lexical match
REL tags. CHsmpl performs comparably to CNNR,
and the combination with embeddings produced by
CNNR, i.e., CHsmpl+VAE+QE, outperforms both
CHsmpl and CNNR.
Discussion
The main focus and novelty of this paper is comparing and combining CTKs and CNETs. We showed
that the features they generate are complementary
as their combination improve both models. For the
combinations, we used voting and our new method
of combining network layers embedded in a polynomial kernels added to tree kernels.
We would like to stress that to the best of our
knowledge we are the ﬁrst to merge CNNs and CTK
together. We showed that kernels based on different embedding layers learned with our CNNs, when
used in SVMs, deliver the same accuracy of CNNs.
This enables an effective combination between TK
and CNNs at kernel level. Indeed, we experimented
with different kernel combinations built on top of
different CNN layers, improving the state of the art,
largely outperforming all previous systems exactly
using the same testing conditions. These results are
important for developing future research as they provide indications on features/methods and referring
baselines to compare with.
Finally, we generated modiﬁed structures and
used better parsers outperforming our initial result
in by more than 10
An interesting question is the practical use of our
models, which require the discussion of their efﬁciency.
In this respect, our framework combines
CTKs and CNNs by generating a global kernel.
Thus, the time complexity during training is basically given by (i) training CNNs, (ii) extracting their
embeddings and (iii) use these embeddings during
the CTK training. The time for computing steps (i)
and (ii) is linear with respect to the number of examples as the architecture and the number of optimization steps are ﬁxed. In practice, the bottleneck
of training our CNN architecture is in the number of
Regarding Step (iii), since the embeddings just
feed a polynomial kernel, which is slightly more ef-
ﬁcient than CTKs, the overall complexity is dominated by the one of the CTK framework, i.e., O(n2).
In practice, this is rather efﬁcient, e.g., see the discussion in . The
testing complexity is reduced to the number of kernel operations between the support vectors and the
test examples (the worst case is O(n2)), which are
also parallelizable.
Conclusions
This paper compares two state-of-the-art feature engineering approaches, namely CTKs and CNNs, on
the very complex task of answer reranking in a QA
In order to have a meaningful comparison, we have set the best conﬁguration for CTK
by deﬁning and implementing innovative linguistic
structures enriched with semantic information from
statistical classiﬁers (i.e., question and focus classi-
ﬁers). At the same time, we have developed powerful CNNs, which can embed relational information
in their representations.
We tested our models for answer passage reranking in QA on two benchmarks, WikiQA and
TREC13. Thus, they are directly comparable with
many systems from previous work.
The results
show that our models outperform the state of the art
achieved by more complex networks.
In particular, CTKs outperform our CNNs but use
more information, e.g., on TREC 13, CTKs obtain
an MRR and MAP of 85.53 and 75.18 vs. 77.93
and 71.09 of CNNs. On WikiQA, CNNs combined
with tree kernels achieves an MRR of 75.88 and
an MAP of 74.17 largely outperforming the current
state of the art, i.e., MRR of 71.27 and MAP 69.14
of ABCNN by Yin et al. .
It should be noted that CTK models use syntactic parsing, two statistical classiﬁers for focus and
question classiﬁcation and a named entity recognizer whereas CNNs only use words and two additional unsupervised corpora.
In the future, we would like to embed CNN similarity in CTKs.
A straightforward methods for
achieving this is to use the Smoothed Partial Tree
Kernel by Croce et al. .
Our preliminary
experiments using word2vec were not successful.
However, CNNs may provide a more effective similarity. Finally, it would be also very interesting to
exploit structural kernels in the network layers.
Acknowledgements
This work has been partially supported by the EC
project CogNet, 671625 and by an IBM Faculty Award. Many thanks to the anonymous reviewers for their valuable suggestions.