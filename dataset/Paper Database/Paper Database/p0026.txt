HAL Id: hal-01864755
 
Submitted on 30 Aug 2018
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of scientific research documents, whether they are published or not.
The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.
Unsupervised Representation Learning by Predicting
Image Rotations
Spyros Gidaris, Praveer Singh, Nikos Komodakis
To cite this version:
Spyros Gidaris, Praveer Singh, Nikos Komodakis.
Unsupervised Representation Learning by Predicting Image Rotations. ICLR 2018, Apr 2018, Vancouver, Canada. ￿10.48550/arXiv.1803.07728￿.
￿hal-01864755￿
Published as a conference paper at ICLR 2018
UNSUPERVISED REPRESENTATION LEARNING BY PRE-
DICTING IMAGE ROTATIONS
Spyros Gidaris, Praveer Singh, Nikos Komodakis
University Paris-Est, LIGM
Ecole des Ponts ParisTech
{spyros.gidaris,praveer.singh,nikos.komodakis}@enpc.fr
Over the last years, deep convolutional neural networks (ConvNets) have transformed the ﬁeld of computer vision thanks to their unparalleled capacity to learn
high level semantic image features. However, in order to successfully learn those
features, they usually require massive amounts of manually labeled data, which
is both expensive and impractical to scale. Therefore, unsupervised semantic feature learning, i.e., learning without requiring manual annotation effort, is of crucial
importance in order to successfully harvest the vast amount of visual data that are
available today. In our work we propose to learn image features by training ConvNets to recognize the 2d rotation that is applied to the image that it gets as input.
We demonstrate both qualitatively and quantitatively that this apparently simple
task actually provides a very powerful supervisory signal for semantic feature
learning. We exhaustively evaluate our method in various unsupervised feature
learning benchmarks and we exhibit in all of them state-of-the-art performance.
Speciﬁcally, our results on those benchmarks demonstrate dramatic improvements
w.r.t. prior state-of-the-art approaches in unsupervised representation learning and
thus signiﬁcantly close the gap with supervised feature learning. For instance, in
PASCAL VOC 2007 detection task our unsupervised pre-trained AlexNet model
achieves the state-of-the-art (among unsupervised methods) mAP of 54.4% that is
only 2.4 points lower from the supervised case. We get similarly striking results
when we transfer our unsupervised learned features on various other tasks, such
as ImageNet classiﬁcation, PASCAL classiﬁcation, PASCAL segmentation, and
CIFAR-10 classiﬁcation. The code and models of our paper will be published on:
 
INTRODUCTION
In recent years, the widespread adoption of deep convolutional neural networks 
(ConvNets) in computer vision, has lead to a tremendous progress in the ﬁeld. Speciﬁcally, by training ConvNets on the object recognition or the scene classiﬁcation tasks with a massive amount of manually labeled data, they manage to learn powerful visual representations suitable for image understanding tasks. For instance, the image features
learned by ConvNets in this supervised manner have achieved excellent results when they are transferred to other vision tasks, such as object detection , semantic segmentation , or image captioning . However, supervised feature learning
has the main limitation of requiring intensive manual labeling effort, which is both expensive and
infeasible to scale on the vast amount of visual data that are available today.
Due to that, there is lately an increased interest to learn high level ConvNet based representations
in an unsupervised manner that avoids manual annotation of visual data. Among them, a prominent paradigm is the so-called self-supervised learning that deﬁnes an annotation free pretext task,
using only the visual information present on the images or videos, in order to provide a surrogate
supervision signal for feature learning. For example, in order to learn features, Zhang et al. 
and Larsson et al. train ConvNets to colorize gray scale images, Doersch et al. and
Noroozi & Favaro predict the relative position of image patches, and Agrawal et al. 
predict the egomotion (i.e., self-motion) of a moving vehicle between two consecutive frames. The
Published as a conference paper at ICLR 2018
rationale behind such self-supervised tasks is that solving them will force the ConvNet to learn semantic image features that can be useful for other vision tasks. In fact, image representations learned
with the above self-supervised tasks, although they have not managed to match the performance
of supervised-learned representations, they have proved to be good alternatives for transferring on
other vision tasks, such as object recognition, object detection, and semantic segmentation .
Other successful cases of unsupervised feature learning are clustering based methods , reconstruction based methods , and methods that involve learning generative probabilistic
models Goodfellow et al. ; Donahue et al. ; Radford et al. .
Our work follows the self-supervised paradigm and proposes to learn image representations by training ConvNets to recognize the geometric transformation that is applied to the image that it gets as
input. More speciﬁcally, we ﬁrst deﬁne a small set of discrete geometric transformations, then each
of those geometric transformations are applied to each image on the dataset and the produced transformed images are fed to the ConvNet model that is trained to recognize the transformation of each
image. In this formulation, it is the set of geometric transformations that actually deﬁnes the classiﬁcation pretext task that the ConvNet model has to learn. Therefore, in order to achieve unsupervised
semantic feature learning, it is of crucial importance to properly choose those geometric transformations (we further discuss this aspect of our methodology in section 2.2). What we propose is to
deﬁne the geometric transformations as the image rotations by 0, 90, 180, and 270 degrees. Thus,
the ConvNet model is trained on the 4-way image classiﬁcation task of recognizing one of the four
image rotations (see Figure 2). We argue that in order a ConvNet model to be able recognize the
rotation transformation that was applied to an image it will require to understand the concept of
the objects depicted in the image (see Figure 1), such as their location in the image, their type, and
their pose. Throughout the paper we support that argument both qualitatively and quantitatively.
Furthermore we demonstrate on the experimental section of the paper that despite the simplicity of
our self-supervised approach, the task of predicting rotation transformations provides a powerful
surrogate supervision signal for feature learning and leads to dramatic improvements on the relevant
benchmarks.
Note that our self-supervised task is different from the work of Dosovitskiy et al. and Agrawal
et al. that also involves geometric transformations. Dosovitskiy et al. train a ConvNet
model to yield representations that are discriminative between images and at the same time invariant
on geometric and chromatic transformations. In contrast, we train a ConvNet model to recognize the
geometric transformation applied to an image. It is also fundamentally different from the egomotion
method of Agrawal et al. , which employs a ConvNet model with siamese like architecture
that takes as input two consecutive video frames and is trained to predict (through regression) their
camera transformation. Instead, in our approach, the ConvNet takes as input a single image to
which we have applied a random geometric transformation (i.e., rotation) and is trained to recognize
(through classiﬁcation) this geometric transformation without having access to the initial image.
Our contributions are:
• We propose a new self-supervised task that is very simple and at the same time, as we
demonstrate throughout the paper, offers a powerful supervisory signal for semantic feature
• We exhaustively evaluate our self-supervised method under various settings (e.g. semisupervised or transfer learning settings) and in various vision tasks (i.e., CIFAR-10, ImageNet, Places, and PASCAL classiﬁcation, detection, or segmentation tasks).
• In all of them, our novel self-supervised formulation demonstrates state-of-the-art results
with dramatic improvements w.r.t. prior unsupervised approaches.
• As a consequence we show that for several important vision tasks, our self-supervised
learning approach signiﬁcantly narrows the gap between unsupervised and supervised feature learning.
In the following sections, we describe our self-supervised methodology in §2, we provide experimental results in §3, and ﬁnally we conclude in §4.
Published as a conference paper at ICLR 2018
90◦rotation
270◦rotation
180◦rotation
0◦rotation
270◦rotation
Figure 1: Images rotated by random multiples of 90 degrees (e.g., 0, 90, 180, or 270 degrees). The
core intuition of our self-supervised feature learning approach is that if someone is not aware of the
concepts of the objects depicted in the images, he cannot recognize the rotation that was applied to
METHODOLOGY
The goal of our work is to learn ConvNet based semantic features in an unsupervised manner. To
achieve that goal we propose to train a ConvNet model F(.) to estimate the geometric transformation
applied to an image that is given to it as input. Speciﬁcally, we deﬁne a set of K discrete geometric
transformations G = {g(.|y)}K
y=1, where g(.|y) is the operator that applies to image X the geometric
transformation with label y that yields the transformed image Xy = g(X|y). The ConvNet model
F(.) gets as input an image Xy∗(where the label y∗is unknown to model F(.)) and yields as output
a probability distribution over all possible geometric transformations:
F(Xy∗|θ) = {F y(Xy∗|θ)}K
where F y(Xy∗|θ) is the predicted probability for the geometric transformation with label y and θ
are the learnable parameters of model F(.).
Therefore, given a set of N training images D = {Xi}N
i=0, the self-supervised training objective
that the ConvNet model must learn to solve is:
loss(Xi, θ),
where the loss function loss(.) is deﬁned as:
loss(Xi, θ) = −1
log(F y(g(Xi|y)|θ)).
In the following subsection we describe the type of geometric transformations that we propose in
CHOOSING GEOMETRIC TRANSFORMATIONS: IMAGE ROTATIONS
In the above formulation, the geometric transformations G must deﬁne a classiﬁcation task that
should force the ConvNet model to learn semantic features useful for visual perception tasks (e.g.,
object detection or image classiﬁcation). In our work we propose to deﬁne the set of geometric
transformations G as all the image rotations by multiples of 90 degrees, i.e., 2d image rotations by
0, 90, 180, and 270 degrees (see Figure 2). More formally, if Rot(X, φ) is an operator that rotates
image X by φ degrees, then our set of geometric transformations consists of the K = 4 image
rotations G = {g(X|y)}4
y=1, where g(X|y) = Rot(X, (y −1)90).
Forcing the learning of semantic features: The core intuition behind using these image rotations
as the set of geometric transformations relates to the simple fact that it is essentially impossible for a
ConvNet model to effectively perform the above rotation recognition task unless it has ﬁrst learnt to
recognize and detect classes of objects as well as their semantic parts in images. More speciﬁcally,
Published as a conference paper at ICLR 2018
Rotated image: X
Rotated image: X
Rotated image: X
Rotated image: X
model F(.)
model F(.)
model F(.)
model F(.)
Predict 270 degrees rotation (y=3)
Rotate 270 degrees
g( X , y=3)
Rotate 180 degrees
g( X , y=2)
Rotate 90 degrees
g( X , y=1)
Rotate 0 degrees
g( X , y=0)
Maximize prob.
Predict 0 degrees rotation (y=0)
Maximize prob.
Maximize prob.
Maximize prob.
Predict 180 degrees rotation (y=2)
Predict 90 degrees rotation (y=1)
Objectives:
Figure 2: Illustration of the self-supervised task that we propose for semantic feature learning.
Given four possible geometric transformations, the 0, 90, 180, and 270 degrees rotations, we train
a ConvNet model F(.) to recognize the rotation that is applied to the image that it gets as input.
F y(Xy∗) is the probability of rotation transformation y predicted by model F(.) when it gets as
input an image that has been transformed by the rotation transformation y∗.
to successfully predict the rotation of an image the ConvNet model must necessarily learn to localize
salient objects in the image, recognize their orientation and object type, and then relate the object
orientation with the dominant orientation that each type of object tends to be depicted within the
available images. In Figure 3b we visualize some attention maps generated by a model trained
on the rotation recognition task. These attention maps are computed based on the magnitude of
activations at each spatial cell of a convolutional layer and essentially reﬂect where the network
puts most of its focus in order to classify an input image. We observe, indeed, that in order for the
model to accomplish the rotation prediction task it learns to focus on high level object parts in the
image, such as eyes, nose, tails, and heads. By comparing them with the attention maps generated
by a model trained on the object recognition task in a supervised way (see Figure 3a) we observe
that both models seem to focus on roughly the same image regions. Furthermore, in Figure 4 we
visualize the ﬁrst layer ﬁlters that were learnt by an AlexNet model trained on the proposed rotation
recognition task. As can be seen, they appear to have a big variety of edge ﬁlters on multiple
orientations and multiple frequencies. Remarkably, these ﬁlters seem to have a greater amount of
variety even than the ﬁlters learnt by the supervised object recognition task.
Absence of low-level visual artifacts: An additional important advantage of using image rotations
by multiples of 90 degrees over other geometric transformations, is that they can be implemented by
ﬂip and transpose operations (as we will see below) that do not leave any easily detectable low-level
visual artifacts that will lead the ConvNet to learn trivial features with no practical value for the
vision perception tasks. In contrast, had we decided to use as geometric transformations, e.g., scale
and aspect ratio image transformations, in order to implement them we would need to use image
resizing routines that leave easily detectable image artifacts.
Well-posedness: Furthermore, human captured images tend to depict objects in an “up-standing”
position, thus making the rotation recognition task well deﬁned, i.e., given an image rotated by 0,
90, 180, or 270 degrees, there is usually no ambiguity of what is the rotation transformation (with
the exception of images that only depict round objects). In contrast, that is not the case for the object
scale that varies signiﬁcantly on human captured images.
Implementing image rotations: In order to implement the image rotations by 90, 180, and 270
degrees (the 0 degrees case is the image itself), we use ﬂip and transpose operations. Speciﬁcally,
Published as a conference paper at ICLR 2018
Input images on the models
Conv1 27 × 27
Conv3 13 × 13
Conv5 6 × 6
(a) Attention maps of supervised model
Conv1 27 × 27
Conv3 13 × 13
Conv5 6 × 6
(b) Attention maps of our self-supervised model
Figure 3: Attention maps generated by an AlexNet model trained (a) to recognize objects (supervised), and (b) to recognize image rotations (self-supervised). In order to generate the attention map
of a conv. layer we ﬁrst compute the feature maps of this layer, then we raise each feature activation
on the power p, and ﬁnally we sum the activations at each location of the feature map. For the conv.
layers 1, 2, and 3 we used the powers p = 1, p = 2, and p = 4 respectively. For visualization of
our self-supervised model’s attention maps for all the rotated versions of the images see Figure 6 in
appendix A.
for 90 degrees rotation we ﬁrst transpose the image and then ﬂip it vertically (upside-down ﬂip),
for 180 degrees rotation we ﬂip the image ﬁrst vertically and then horizontally (left-right ﬂip), and
ﬁnally for 270 degrees rotation we ﬁrst ﬂip vertically the image and then we transpose it.
DISCUSSION
The simple formulation of our self-supervised task has several advantages. It has the same computational cost as supervised learning, similar training convergence speed (that is signiﬁcantly faster than
image reconstruction based approaches; our AlexNet model trains in around 2 days using a single
Titan X GPU), and can trivially adopt the efﬁcient parallelization schemes devised for supervised
learning , making it an ideal candidate for unsupervised learning on internetscale data (i.e., billions of images). Furthermore, our approach does not require any special image
pre-processing routine in order to avoid learning trivial features, as many other unsupervised or
self-supervised approaches do. Despite the simplicity of our self-supervised formulation, as we will
see in the experimental section of the paper, the features learned by our approach achieve dramatic
improvements on the unsupervised feature learning benchmarks.
EXPERIMENTAL RESULTS
In this section we conduct an extensive evaluation of our approach on the most commonly used image datasets, such as CIFAR-10 , ImageNet ,
Published as a conference paper at ICLR 2018
(a) Supervised
(b) Self-supervised to recognize rotations
Figure 4: First layer ﬁlters learned by a AlexNet model trained on (a) the supervised object recognition task and (b) the self-supervised task of recognizing rotated images. We observe that the ﬁlters
learned by the self-supervised task are mostly oriented edge ﬁlters on various frequencies and, remarkably, they seem to have more variety than those learned on the supervised task.
Table 1: Evaluation of the unsupervised learned features by measuring the classiﬁcation accuracy
that they achieve when we train a non-linear object classiﬁer on top of them. The reported results
are from CIFAR-10. The size of the ConvB1 feature maps is 96 × 16 × 16 and the size of the rest
feature maps is 192 × 8 × 8.
RotNet with 3 conv. blocks
RotNet with 4 conv. blocks
RotNet with 5 conv. blocks
PASCAL , and Places205 , as well as on various vision
tasks, such as object detection, object segmentation, and image classiﬁcation. We also consider several learning scenarios, including transfer learning and semi-supervised learning. In all cases, we
compare our approach with corresponding state-of-the-art methods.
CIFAR EXPERIMENTS
We start by evaluating on the object recognition task of CIFAR-10 the ConvNet based features
learned by the proposed self-supervised task of rotation recognition. We will here after call a ConvNet model that is trained on the self-supervised task of rotation recognition RotNet model.
Implementation details: In our CIFAR-10 experiments we implement the RotNet models with
Network-In-Network (NIN) architectures . In order to train them on the rotation
prediction task, we use SGD with batch size 128, momentum 0.9, weight decay 5e −4 and lr of
0.1. We drop the learning rates by a factor of 5 after epochs 30, 60, and 80. We train in total for 100
epochs. In our preliminary experiments we found that we get signiﬁcant improvement when during
training we train the network by feeding it all the four rotated copies of an image simultaneously
instead of each time randomly sampling a single rotation transformation. Therefore, at each training
batch the network sees 4 times more images than the batch size.
Evaluation of the learned feature hierarchies: First, we explore how the quality of the learned
features depends from their depth (i.e., the depth of the layer that they come from) as well as from the
total depth of the RotNet model. For that purpose, we ﬁrst train using the CIFAR-10 training images
three RotNet models which have 3, 4, and 5 convolutional blocks respectively on top of the feature maps generated by the 2nd conv. block of a RotNet model with 4
conv. blocks in total. The reported results are from CIFAR-10.
# Rotations
CIFAR-10 Classiﬁcation Accuracy
0◦, 90◦, 180◦, 270◦
0◦, 45◦, 90◦, 135◦, 180◦, 225◦, 270◦, 315◦
Table 3: Evaluation of unsupervised feature learning methods on CIFAR-10. The Supervised NIN
and the (Ours) RotNet + conv entries have exactly the same architecture but the ﬁrst was trained fully
supervised while on the second the ﬁrst 2 conv. blocks were trained unsupervised with our rotation
prediction task and the 3rd block only was trained in a supervised manner. In the Random Init. +
conv entry a conv. classiﬁer (similar to that of (Ours) RotNet + conv) is trained on top of two NIN
conv. blocks that are randomly initialized and stay frozen. Note that each of the prior approaches
has a different ConvNet architecture and thus the comparison with them is just indicative.
Supervised NIN
Random Init. + conv
(Ours) RotNet + non-linear
(Ours) RotNet + conv
(Ours) RotNet + non-linear (ﬁne-tuned)
(Ours) RotNet + conv (ﬁne-tuned)
Roto-Scat + SVM Oyallon & Mallat 
ExemplarCNN Dosovitskiy et al. 
DCGAN Radford et al. 
Scattering Oyallon et al. 
the total number of conv. layers of the examined RotNet models is 9, 12, and 15 for 3, 4, and 5
conv. blocks respectively). Afterwards, we learn classiﬁers on top of the feature maps generated
by each conv. block of each RotNet model. Those classiﬁers are trained in a supervised way on
the object recognition task of CIFAR-10. They consist of 3 fully connected layers; the 2 hidden
layers have 200 feature channels each and are followed by batch-norm and relu units. We report
the accuracy results of CIFAR-10 test set in Table 1. We observe that in all cases the feature maps
generated by the 2nd conv. block (that actually has depth 6 in terms of the total number of conv.
layer till that point) achieve the highest accuracy, i.e., between 88.26% and 89.06%. The features of
the conv. blocks that follow the 2nd one gradually degrade the object recognition accuracy, which
we assume is because they start becoming more and more speciﬁc on the self-supervised task of
rotation prediction. Also, we observe that increasing the total depth of the RotNet models leads to
increased object recognition performance by the feature maps generated by earlier layers (and after
the 1st conv. block). We assume that this is because increasing the depth of the model and thus
the complexity of its head (i.e., top ConvNet layers) allows the features of earlier layers to be less
speciﬁc to the rotation prediction task.
Exploring the quality of the learned features w.r.t. the number of recognized rotations: In Table 2 we explore how the quality of the self-supervised features depends on the number of discrete
rotations used in the rotation prediction task. For that purpose we deﬁned three extra rotation recognition tasks: (a) one with 8 rotations that includes all the multiples of 45 degrees, (b) one with only
the 0◦and 180◦rotations, and (c) one with only the 90◦and 270◦rotations. In order to implement
the rotation transformation of the 45◦, 135◦, 225◦, 270◦, and 315◦rotations (in the 8 discrete rotations case) we used an image wrapping routine and then we took care to crop only the central square
Published as a conference paper at ICLR 2018
Figure 5: (a) Plot with the rotation prediction accuracy and object recognition accuracy as a function
of the training epochs used for solving the rotation prediction task. The red curve is the object
recognition accuracy of a fully supervised model (a NIN model), which is independent from the
training epochs on the rotation prediction task. The yellow curve is the object recognition accuracy
of an object classiﬁer trained on top of feature maps learned by a RotNet model at different snapshots
of the training procedure. (b) Accuracy as a function of the number of training examples per category
in CIFAR-10. Ours semi-supervised is a NIN model that the ﬁrst 2 conv. blocks are RotNet model
that was trained in a self-supervised way on the entire training set of CIFAR-10 and the 3rd conv.
block along with a prediction linear layer that was trained with the object recognition task only on
the available set of labeled images.
image regions that do not include any of the empty image areas introduced by the rotation transformations (and which can easily indicate the image rotation). We observe that indeed for 4 discrete
rotations (as we proposed) we achieve better object recognition performance than the 8 or 2 cases.
We believe that this is because the 2 orientations case offers too few classes for recognition (i.e., less
supervisory information is provided) while in the 8 orientations case the geometric transformations
are not distinguishable enough and furthermore the 4 extra rotations introduced may lead to visual
artifacts on the rotated images. Moreover, we observe that among the RotNet models trained with
2 discrete rotations, the RotNet model trained with 90◦and 270◦rotations achieves worse object
recognition performance than the model trained with the 0◦and 180◦rotations, which is probably
due to the fact that the former model does not “see” during the unsupervised phase the 0◦rotation
that is typically used during the object recognition training phase.
Comparison against supervised and other unsupervised methods: In Table 3 we compare our
unsupervised learned features against other unsupervised (or hand-crafted) features on CIFAR-10.
For our entries we use the feature maps generated by the 2nd conv. block of a RotNet model with
4 conv. blocks in total. On top of those RotNet features we train 2 different classiﬁers: (a) a nonlinear classiﬁer with 3 fully connected layers as before (entry (Ours) RotNet + non-linear), and (b)
three conv. layers plus a linear prediction layer (entry (Ours) RotNet +conv.; note that this entry
is basically a 3 blocks NIN model with the ﬁrst 2 blocks coming from a RotNet model and the
3rd being randomly initialized and trained on the recognition task). We observe that we improve
over the prior unsupervised approaches and we achieve state-of-the-art results in CIFAR-10 (note
that each of the prior approaches has a different ConvNet architecture thus the comparison with
them is just indicative). More notably, the accuracy gap between the RotNet based model and
the fully supervised NIN model is very small, only 1.64 percentage points (92.80% vs 91.16%).
We provide per class breakdown of the classiﬁcation accuracy of our unsupervised model as well
as the supervised one in Table 9 (in appendix B). In Table 3 we also report the performance of the
RotNet features when, instead of being kept frozen, they are ﬁne-tuned during the object recognition
training phase. We observe that ﬁne-tuning the unsupervised learned features further improves the
classiﬁcation performance, thus reducing even more the gap with the supervised case.
Correlation between object classiﬁcation task and rotation prediction task: In Figure 5a, we
plot the object classiﬁcation accuracy as a function of the training epochs used for solving the selfsupervised task of recognizing rotations, which learns the features used by the object classiﬁer.
Published as a conference paper at ICLR 2018
Table 4: Task Generalization: ImageNet top-1 classiﬁcation with non-linear layers. We compare our unsupervised feature learning approach with other unsupervised approaches by training
non-linear classiﬁers on top of the feature maps of each layer to perform the 1000-way ImageNet
classiﬁcation task, as proposed by Noroozi & Favaro . For instance, for the conv5 feature
map we train the layers that follow the conv5 layer in the AlexNet architecture (i.e., fc6, fc7, and
fc8). Similarly for the conv4 feature maps. We implemented those non-linear classiﬁers with batch
normalization units after each linear layer (fully connected or convolutional) and without employing drop out units. All approaches use AlexNet variants and were pre-trained on ImageNet without
labels except the ImageNet labels and Random entries. During testing we use a single crop and do
not perform ﬂipping augmentation. We report top-1 classiﬁcation accuracy.
ImageNet labels from 
Random from 
Tracking Wang & Gupta 
Context 
Colorization 
Jigsaw Puzzles 
BIGAN 
NAT 
(Ours) RotNet
More speciﬁcally, in order to create the object recognition accuracy curve, in each training snapshot
of RotNet (i.e., every 20 epochs), we pause its training procedure and we train from scratch (until
convergence) a non-linear object classiﬁer on top of the so far learnt RotNet features. Therefore,
the object recognition accuracy curve depicts the accuracy of those non-linear object classiﬁers after
the end of their training while the rotation prediction accuracy curve depicts the accuracy of the
RotNet at those snapshots. We observe that, as the ability of the RotNet features for solving the
rotation prediction task improves (i.e., as the rotation prediction accuracy increases), their ability to
help solving the object recognition task improves as well (i.e., the object recognition accuracy also
increases). Furthermore, we observe that the object recognition accuracy converges fast w.r.t. the
number of training epochs used for solving the pretext task of rotation prediction.
Semi-supervised setting: Motivated by the very high performance of our unsupervised feature
learning method, we also evaluate it on a semi-supervised setting. More speciﬁcally, we ﬁrst train
a 4 block RotNet model on the rotation prediction task using the entire image dataset of CIFAR-10
and then we train on top of its feature maps object classiﬁers using only a subset of the available
images and their corresponding labels. As feature maps we use those generated by the 2nd conv.
block of the RotNet model. As a classiﬁer we use a set of convolutional layers that actually has
the same architecture as the 3rd conv. block of a NIN model plus a linear classiﬁer, all randomly
initialized. For training the object classiﬁer we use for each category 20, 100, 400, 1000, or 5000
image examples. Note that 5000 image examples is the extreme case of using the entire CIFAR-
10 training dataset. Also, we compare our method with a supervised model that is trained only
on the available examples each time. In Figure 5b we plot the accuracy of the examined models
as a function of the available training examples. We observe that our unsupervised trained model
exceeds in this semi-supervised setting the supervised model when the number of examples per
category drops below 1000. Furthermore, as the number of examples decreases, the performance
gap in favor of our method is increased. This empirical evidence demonstrates the usefulness of our
method on semi-supervised settings.
EVALUATION OF SELF-SUPERVISED FEATURES TRAINED IN IMAGENET
Here we evaluate the performance of our self-supervised ConvNet models on the ImageNet, Places,
and PASCAL VOC datasets. Speciﬁcally, we ﬁrst train a RotNet model on the training images of the
ImageNet dataset and then we evaluate the performance of the self-supervised features on the image
Published as a conference paper at ICLR 2018
Table 5: Task Generalization: ImageNet top-1 classiﬁcation with linear layers. We compare
our unsupervised feature learning approach with other unsupervised approaches by training logistic
regression classiﬁers on top of the feature maps of each layer to perform the 1000-way ImageNet
classiﬁcation task, as proposed by Zhang et al. . All weights are frozen and feature maps are
spatially resized (with adaptive max pooling) so as to have around 9000 elements. All approaches
use AlexNet variants and were pre-trained on ImageNet without labels except the ImageNet labels
and Random entries.
ImageNet labels
Random rescaled Kr¨ahenb¨uhl et al. 
Context 
Context Encoders 
Colorization 
Jigsaw Puzzles 
BIGAN 
Split-Brain 
Counting 
(Ours) RotNet
Table 6: Task & Dataset Generalization: Places top-1 classiﬁcation with linear layers. We
compare our unsupervised feature learning approach with other unsupervised approaches by training
logistic regression classiﬁers on top of the feature maps of each layer to perform the 205-way Places
classiﬁcation task . All unsupervised methods are pre-trained (in an unsupervised
way) on ImageNet. All weights are frozen and feature maps are spatially resized (with adaptive max
pooling) so as to have around 9000 elements. All approaches use AlexNet variants and were pretrained on ImageNet without labels except the Place labels, ImageNet labels, and Random entries.
Places labels Zhou et al. 
ImageNet labels
Random rescaled Kr¨ahenb¨uhl et al. 
Context 
Context Encoders 
Colorization 
Jigsaw Puzzles 
BIGAN 
Split-Brain 
Counting 
(Ours) RotNet
classiﬁcation tasks of ImageNet, Places, and PASCAL VOC datasets and on the object detection and
object segmentation tasks of PASCAL VOC.
Implementation details: For those experiments we implemented our RotNet model with an
AlexNet architecture. Our implementation of the AlexNet model does not have local response
normalization units, dropout units, or groups in the colvolutional layers while it includes batch
normalization units after each linear layer (either convolutional or fully connected). In order to train
the AlexNet based RotNet model, we use SGD with batch size 192, momentum 0.9, weight decay
5e −4 and lr of 0.01. We drop the learning rates by a factor of 10 after epochs 10, and 20 epochs.
We train in total for 30 epochs. As in the CIFAR experiments, during training we feed the RotNet
model all four rotated copies of an image simultaneously (in the same mini-batch).
Published as a conference paper at ICLR 2018
Table 7: Task & Dataset Generalization: PASCAL VOC 2007 classiﬁcation and detection results, and PASCAL VOC 2012 segmentation results. We used the publicly available testing
frameworks of Kr¨ahenb¨uhl et al. for classiﬁcation, of Girshick for detection, and
of Long et al. for segmentation. For classiﬁcation, we either ﬁx the features before conv5
(column fc6-8) or we ﬁne-tune the whole model (column all). For detection we use multi-scale
training and single scale testing. All approaches use AlexNet variants and were pre-trained on ImageNet without labels except the ImageNet labels and Random entries. After unsupervised training,
we absorb the batch normalization units on the linear layers and we use the weight rescaling technique proposed by Kr¨ahenb¨uhl et al. (which is common among the unsupervised methods).
As customary, we report the mean average precision (mAP) on the classiﬁcation and detection tasks,
and the mean intersection over union (mIoU) on the segmentation task.
Classiﬁcation
Segmentation
Trained layers
ImageNet labels
Random rescaled Kr¨ahenb¨uhl et al. 
Egomotion 
Context Encoders 
Tracking 
Context 
Colorization 
BIGAN 
Jigsaw Puzzles 
NAT 
Split-Brain 
ColorProxy 
Counting 
(Ours) RotNet
ImageNet classiﬁcation task: We evaluate the task generalization of our self-supervised learned
features by training on top of them non-linear object classiﬁers for the ImageNet classiﬁcation task
 ). In Table 4 we report the classiﬁcation performance of our self-supervised features and we compare it with the other unsupervised
approaches. We observe that our approach surpasses all the other methods by a signiﬁcant margin.
For the feature maps generated by the Conv4 layer, our improvement is more than 4 percentage
points and for the feature maps generated by the Conv5 layer, our improvement is even bigger,
around 8 percentage points. Furthermore, our approach signiﬁcantly narrows the performance gap
between unsupervised features and supervised features. In Table 5 we report similar results but
for linear (logistic regression) classiﬁers ).
Again, our unsupervised method demonstrates signiﬁcant improvements over prior unsupervised
Transfer learning evaluation on PASCAL VOC: In Table 7 we evaluate the task and dataset
generalization of our unsupervised learned features by ﬁne-tuning them on the PASCAL VOC classiﬁcation, detection, and segmentation tasks. As with the ImageNet classiﬁcation task, we outperform by signiﬁcant margin all the competing unsupervised methods in all tested tasks, signiﬁcantly
narrowing the gap with the supervised case. Notably, the PASCAL VOC 2007 object detection performance that our self-supervised model achieves is 54.4% mAP, which is only 2.4 points lower
than the supervised case. We provide the per class detection performance of our method in Table 8
(in appendix B).
Places classiﬁcation task: In Table 6 we evaluate the task and dataset generalization of our approach
by training linear (logistic regression) classiﬁers on top of the learned features in order to perform
the 205-way Places classiﬁcation task. Note that in this case the learnt features are evaluated w.r.t.
Published as a conference paper at ICLR 2018
their generalization on classes that were “unseen” during the unsupervised training phase. As can
be seen, even in this case our method manages to either surpass or achieve comparable results w.r.t.
prior state-of-the-art unsupervised learning approaches.
CONCLUSIONS
In our work we propose a novel formulation for self-supervised feature learning that trains a ConvNet model to be able to recognize the image rotation that has been applied to its input images.
Despite the simplicity of our self-supervised task, we demonstrate that it successfully forces the ConvNet model trained on it to learn semantic features that are useful for a variety of visual perception
tasks, such as object recognition, object detection, and object segmentation. We exhaustively evaluate our method in various unsupervised and semi-supervised benchmarks and we achieve in all of
them state-of-the-art performance. Speciﬁcally, our self-supervised approach manages to drastically
improve the state-of-the-art results on unsupervised feature learning for ImageNet classiﬁcation,
PASCAL classiﬁcation, PASCAL detection, PASCAL segmentation, and CIFAR-10 classiﬁcation,
surpassing prior approaches by a signiﬁcant margin and thus drastically reducing the gap between
unsupervised and supervised feature learning.
ACKNOWLEDGEMENTS
This work was supported by the ANR SEMAPOLIS project, an INTEL gift, and hardware donation
by NVIDIA.