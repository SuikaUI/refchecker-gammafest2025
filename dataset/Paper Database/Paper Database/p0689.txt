HAL Id: hal-00476064
 
Submitted on 23 Apr 2010
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of scientific research documents, whether they are published or not.
The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.
Wasserstein Barycenter and its Application to Texture
Rabin Julien, Gabriel Peyré, Julie Delon, Bernot Marc
To cite this version:
Rabin Julien, Gabriel Peyré, Julie Delon, Bernot Marc. Wasserstein Barycenter and its Application
to Texture Mixing. SSVM’11, 2011, Israel. pp.435-446. ￿hal-00476064￿
Wasserstein Barycenter
and its Application to Texture Mixing
Julien Rabin1⋆, Gabriel Peyr´e1, Julie Delon2, and Marc Bernot3
1 Ceremade, Univ. Paris-Dauphine
2 LTCI, Telecom ParisTech
3 Thales Alenia Space
{rabin,peyre}@ceremade.dauphine.fr
 
 
Abstract. This paper proposes a new deﬁnition of the averaging of discrete probability distributions as a barycenter over the Wasserstein space.
Replacing the Wasserstein original metric by a sliced approximation over
1D distributions allows us to use a fast stochastic gradient descent algorithm. This new notion of barycenter of probabilities is likely to ﬁnd
applications in computer vision where one wants to average features de-
ﬁned as distributions. We show an application to texture synthesis and
mixing, where a texture is characterized by the distribution of the response to a multiscale oriented ﬁlter bank. This leads to a simple way to
navigate over a convex domain of color textures.
Introduction
This paper considers the use of optimal transportation methods in image
synthesis. Optimal transportation has been extensively used as a distance to
compare histogram features, see for instance .
Another interesting aspect of transportation approaches is the transportation
mapping itself, which is investigated in this paper. Indeed, it allows various image
modiﬁcations, such as e.g. color transfer , texture mapping , or contrast
equalization of video (see for other applications).
Texture Synthesis
Texture synthesis is a popular problem in computer graphics, which consists in
synthesizing a new image f visually similar to a given exemplar f 0.
Texture synthesis by recopy. Synthesis with high ﬁdelity to the exemplar is performed by copying pixels with some coherence constraints on small patches . The quality of the synthesis is improved by copying patches or more general
sets of pixels .
⋆This work has been done with the support of the French “Agence Nationale de la
Recherche” (ANR), under grant NatImages (ANR-08-EMER-009), “Adaptivity for
natural images and texture representations”.
J. Rabin, G. Peyr´e, J. Delon and M. Bernot
Texture synthesis by statistical modeling. While copy-based methods probably
yield the best synthesis quality, they often copy large blocks from the original
input, and oﬀer little or indirect control about the synthesis process.
Procedural methods use parametric models of textures, for instance built on
top of a Gaussian noise . They are popular in image synthesis because of
there ease of use and low computational cost.
Texture modeling considers sets of statistical constraints learned from the
exemplar, and use the stationarity of the texture for the estimation. Popular
approaches use Markov random ﬁelds or Gibbs distributions built on top
of multiscale ﬁlters .
The wavelet decomposition is often use to build statistical models, with ﬁrst
order histograms or higher order constraints .
Texture mixing. The texture mixing problem consists in synthesizing a new
texture from a collection {f j}j∈J of exemplars. The mixing should integrate in
a meaningful way the colors and texture attributes of the exemplars.
Heeger and Bergen and Bar-Joseph et al. perform the mixing by
combining multiscale wavelet coeﬃcients. Averaging statistics of grouplet coef-
ﬁcients enables the mixing of geometrical turbulent textures .
Patch-based methods perform mixing using patches from the set of exemplars, which creates non-homogeneous textures, see for instance . These
methods tend to produces clusters of features and oﬀer little understanding
about the mixing process and how to control it.
Texture metamorphosis approaches perform the mixing by ﬁnding
correspondences between elementary features (or textons) between the textures,
and progressively morphing between the shapes of the features. These methods
are extended by Matusik et al. to perform convex combination of textures,
by warping patches and averaging 1D histograms.
Contributions
The main theoretical contributions of this work are the introduction of a novel
deﬁnition for the barycenter of statistical distributions, together with an approximate deﬁnition more amenable for numerical computations. We introduce
a stochastic gragient descent algorithm to compute the Wasserstein barycenter.
The same algorithm is also used to compute the projection of an arbitrary distribution on the centroid. The last contribution of the paper is a general framework
for the statistical synthesis of color textures, that encompasses several existing
texture models as particular cases. This general framework, together with the
Wasserstein barycenter computation, allows to perform color texture mixing.
Wasserstein Distance and its Approximation
This paper considers discrete density distributions in Rd that are represented as
point clouds X = {Xi}i∈I ⊂Rd. Since any permutation of X corresponds to the
Wasserstein Barycenter
same distribution, one considers metrics taking into account
(Xσ(j))N−1
j=0 \ σ ∈ΣN
where ΣN is the set of all permutations of N elements. The methods developed
in the paper can be extended to weighted point clouds and density deﬁned
continuously over Rd.
Wasserstein Distance
The quadratic Wasserstein distance W(X, Y ) between two point clouds of same
size |I| = N is deﬁned as
W(X, Y )2 = min
σ∈ΣN Wσ(X, Y )
Wσ(X, Y ) =
||Xi −Yσ(i)||2.
We note that the methods developed in this paper extend to arbitrary strictly
convex distances such as ||Xi −Yσ(i)||p for p > 1. One can prove that W deﬁnes
a metric on the set of discrete distributions [X].
Linear program formulation. Computing this distance requires to compute the
optimal assignment i 7→σ⋆(i) that minimizes Wσ(X, Y ) in (2). It is possible to
recast this problem as a linear programming one
W(X, Y )2 = min
Pi,j||Xi −Yj||2
where PN is the set of bistochastic matrices, i.e. nonnegative matrices which
rows and columns sum to 1. The problem (3) can be solved with standard linear programming algorithms and more dedicated methods in O(N 2.5 log(N))
operations (see ).
1D case. The case d = 1 has some special structure that allows for a much faster
solution. Indeed, if one denotes by σX and σY the permutations that order the
∀0 ⩽i < N −1,
XσX(i) ⩽XσX(i+1)
YσY (i) ⩽YσY (i+1)
the optimal permutation σ⋆that minimizes (2) is
σ⋆= σY ◦σ−1
so that point XσX(i) is assigned to the point YσY (i). The Wasserstein distance
together with the optimal assignment can thus be computed in O(N log(N))
operations using a fast sorting algorithm.
J. Rabin, G. Peyr´e, J. Delon and M. Bernot
Sliced Wasserstein Distance
The computation of the Wasserstein distance W is however computationally too
demanding for the application to image processing we have in mind, where N can
be quite large. Moreover, W is too diﬃcult to handle in problems requiring the
optimization of point clouds with functional involving the Wasserstein distance.
For these reasons, we now consider an alternative metric between distributions denoted ˜W, that is obtained by computing 1D Wasserstein distances of
projected point clouds
˜W(X, Y )2 =
W(Xθ, Yθ)2dθ
Xθ = {⟨Xi, θ⟩}i∈I ⊂R
θ ∈Rd \ ||θ|| = 1
is the unit sphere. We will refer from now to this
metric as the Sliced Wasserstein Distance.
The sliced Wasserstein distance can be re-written using a series of 1D optimal
assignments
˜W(X, Y )2 =
|⟨Xi −Yσθ(i), θ⟩|2dθ,
This alternative metric ˜W allows to use the special case of the 1D assignment,
that can be solved in closed form easily using (5).
Barycenter in Wasserstein Space
Wasserstein Barycenter
Given a family {Y j}j∈J of point clouds, we are interested in computing a
weighted average point cloud X⋆, that is deﬁned, by analogy to the Euclidean
setting as the minimizer
Bar(ρj, Y j)j∈J ∈argmin
ρjW(X, Y j)2,
where ρj ⩾0, is a set of weights, that is constrained to satisfy P
Except in the special case of normal distributions , there is no known
closed form solution to the problem (7).
Independently to our work, Agueh and Carlier have performed a mathematical analysis of this problem . They show the existence of a solution and a
dual formulation for continuous distributions.
1D case. In the 1D case, the Wasserstein barycenter can be computed in O(N log(N))
operations using the permutations σY j that order the sets of values Y j ⊂R as
in (4). The barycenter then reads
∀0 ⩽i < N,
 Bar(ρj, Y j)j∈J
This barycenter was used for texture mixing applications in . This paper
generalizes this approach to point clouds in arbitrary dimensions.
Wasserstein Barycenter
Sliced Wasserstein barycenter. Observe that in a way similar to (3), the optimization of (7) can be re-casted as a linear program, but this time involving a
joint probability matrix of dimension |J|, see . Solving such a problem requires to manipulate arrays of size N |J|, and is therefore prohibitive even for
small size problems.
We thus propose to replace the original Wasserstein metric by its sliced approximation ˜W, and deﬁne a barycenter as a minimizer
Bar(ρj, Y j)j∈J = argmin
ρj ˜W(X, Y j)2
Stochastic Gradient Descent Algorithm
Finding the barycenter by minimizing (8) corresponds to the minimization of a
non-convex functional
It is possible to ﬁnd a stationary point of this functional with a gradient descent
algorithm.
Stochastic gradient descent. Since computing the descent direction with the
whole set of directions θ ∈Ωis too expensive, we use a stochastic descent
algorithm .
The algorithm starts from some initial point cloud X(0) ⊂Rd, that can be
for instance chosen to be any of the clouds Y j, and sets k = 0. It picks at each
iteration k a small set of random directions Ωk ⊂Ω. The size |Ωk| of this set is
ﬁxed and ﬁnite, and is a parameter of the algorithm.
The descent update reads
X(k+1) = X(k) −ηkH+
∇˜Eθ(X(k))
where ∇˜Eθ(X(k)) is the gradient of ˜Eθ at point X(k) and ηk > 0 the step size.
Here Hk ∈Rd×d is the Hessian matrix (or an approximation of it), and H+
the Moore-Penrose pseudo-inverse, which diﬀers from the inverse if |Ωk| < d,
since Hk is not invertible.
Gradient computation. For each θ ∈Ωk, computing the gradient ∇˜Eθ(X(k)) requires, for each j ∈J, to compute the optimal 1D assignment σj
θ that minimizes
This is computed as detailed in (5) by sorting the values X(k)
and Yθ, which
requires O(N log(N)) operations.
J. Rabin, G. Peyr´e, J. Delon and M. Bernot
Each element of the gradient is expressed as
∇˜Eθ(X(k))i = HkX(k)
where the Hessian matrix reads
Convergence of the algorithm. To ensure the convergence of the stochastic gradient descent to a local minimum X(∞) of ˜E(X)
Bar(ρj, Y j)j∈J.
one should use a decaying gradient step size ηk ∼1/kα for 1/2 < α ⩽1,
see . Note that this barycenter actually depends on the initialization X(0) of
the algorithm.
In practice, we do not ﬁnd it necessary to use a decaying ηk. We always
observe convergence to a local minimum with the ﬁxed step size ηk = 1.
We note that in the special case of a single distribution |J| = 1, and when
each Ωk is a random orthogonal basis (so that |Ωk| = d), our algorithm is
equivalent to the algorithm proposed in .
Numerical examples. Figures 1 and 2 show comparisons of Wasserstein barycenters and sliced approximations.
Fig. 1. Top row: sliced Wasserstein barycenters
Bar(ρ, Y 1, 1 −ρ, Y 2) for an increasing
value of ρ ∈ , for N = 600 points in R2. Bottom row: Wasserstein barycenters
Bar(ρ, Y 1, 1 −ρ, Y 2).
Computing the Projection on a Distribution
Projection on distribution constraints. In many applications, one is not only
interested in computing the Wasserstein distance W(X, Y ), but also in the optimal permutation σ⋆that minimizes Wσ(X, Y ) in (2). This optimal permutation
Wasserstein Barycenter
Fig. 2. Two examples (left and right panels) of barycenters
Bar(ρj, Y j)j=1,2,3. The
top, bottom left, and bottom right corners of each triangle display respectively the
distribution Y 1, Y 2, Y 3. The middle of each triangle edge display the barycenters for
(ρ1, ρ2, ρ3) equal to (1/2, 1/2, 0), (1/2, 0, 1/2) and (0, 1/2, 1/2). The center of each triangle displays the barycenter for (ρ1, ρ2, ρ3) = (1/3, 1/3, 1/3).
allows one to compute the orthogonal projection
Proj[Y ](X)i = Xσ⋆(i)
where the set [Y ] of all the point clouds that represent the same statistical
distribution as Y is deﬁned in (1).
This projector is at the heart of many statistical approaches for texture synthesis, that incorporate histogram constraints in there models, see for instance
 . These previous works consider only 1D histograms, so that the projection (11) is computed in O(N log(N)) operations using (5). The remaining
part of this section details how to perform approximate computations for higher
dimensional distributions.
Sliced projection. Computing σ⋆using linear programming (3) is computationally intractable in high dimensions. It is possible to compute an approximate
projection by using the stochastic gradient descent algorithm described in section § 3.2 using a single distribution {Y j}j∈J = {Y }.
In this setting, the algorithm minimizes ˜W(X(k), Y ), starting from X(0) = X.
A global minima X⋆of this energy ˜E deﬁned in (9) satisﬁes ˜W(X⋆, Y ) = 0 so
that X⋆∈[Y ]. The algorithm might however converge to a local minima X(∞)
with a non vanishing energy ˜E(X(∞)) > 0, although this is rarely the case in
We thus deﬁne the approximate projection of as the point clouds X(∞) where
X(k) is converging
Proj[Y ](X) = X(∞).
Note that the mapping
Proj[Y ] is not an orthogonal projection, although in
practice it is closed to the orthogonal projection Proj[Y ].
J. Rabin, G. Peyr´e, J. Delon and M. Bernot
Figure 3 shows on a 2D example that the sliced projection is in practice very
close to the orthogonal one Proj[Y ].
Fig. 3. Left: initial distribution X ⊂R2. Middle: sliced projection
Proj[Y ](X) = X(∞)
deﬁned in (12). Right: Wasserstein projection Proj[Y ](X) deﬁned in (11), computed by
linear programming.
Texture Synthesis
This section applies the sliced Wasserstein barycenter (8)and the sliced Wasserstein projection (12)to perform texture mixing.
Multiscale Oriented Decompositions
We consider color textures exemplars f j ∈RP ×3 of P pixels, where each pixel
value is a 3D vector f j(x) ∈R3. A general framework for texture modeling makes
use of the projection of the image on a set of atoms {ψℓ,n}ℓ∈L,n. All the atoms
ψℓ,n ∈RP for a given ℓ∈L typically share a common scale and orientation,
while n indexes a position.
Similarly to several previous works , we use a steerable wavelet tight
frame . In this case, the atoms ψℓ,n, where ℓ= (s, θ), are parametrized by a
dyadic scale 2s (that indicates the size of the atoms), an orientation θ ∈[0, π)
and a position 2sn ∈ 2.
For the numerical experiments, we considered 4 dyadic scales and 4 orientations, together with a coarse scale frame (low pass residual) and a high frequency frame (details). The total number of frames in our experiments is thus
|L| = 4 × 4 + 2 = 18.
First Order Statistical Mixing
First order texture model. Following the work of Heeger and Bergen , the
simplest texture model considers the ﬁrst order statistics of the projection on
the frames atoms. The model thus retains the distributions
∀ℓ∈L, ∀j ∈J,
Y ℓ,j = {⟨f j, ψℓ,n⟩}n.
Wasserstein Barycenter
All the models are computed in O(|J|P log(P)) operations with the fast steerable
pyramid transform . Note that each coeﬃcient ⟨f j, ψℓ,n⟩∈R3 is a 3D vector
obtained by projecting each channel of f j onto the atom ψℓ,n.
First order texture mixing. Given a set {ρj}j∈J of weights, the ﬁrst step of the
mixing algorithm computes the barycentric model from the exemplar distributions, for both all scale and orientation ℓ∈L and for the pixel values
Bar(ρj, Y ℓ,j)j∈J ⊂R3
Bar(ρj, f j)j∈J ⊂R3
using the stochastic gradient descent algorithm detailed in Section 3.2 for |J|
distributions in R3.
Following , the synthesis of the mixed texture is then obtained by iteratively enforcing the statistical distribution using projections. The algorithm
starts from a random white noise color image f (0) ∈RP ×3. At iteration k, the algorithm computes the set of coeﬃcients ⟨f (k), ψℓ,n⟩, and enforces the statistical
constraints using the sliced projections
Proj[Y ℓ]({⟨f (k), ψℓ,n⟩}n)
using the stochastic gradient descent for only one distribution in R3. Since the
steerable pyramid is a tight frame, an intermediate image is reconstructed in
O(P log(P)) operations as
The color pixel values distribution is then enforced as
{f (k+1)(x)}x =
Proj[Y ]({ ˜f (k)(x)}x)
using once again the gradient descent method for a single distribution in R3.
Figures 4 and 5 shows the mixing of two and three textures using this ﬁrst
order model. Observe that this ﬁrst order method generalizes the original method
of Heeger and Bergen by taking into account color distributions (whereas the
original framework considers only 1D distributions obtained by a PCA change
of color representation) and also by mixing several distributions.
Higher Order Statistical Mixing
Joint distribution model. The main limitation of the Heeger-Bergen method 
and our extension is that it does not take into account the spatial correlation between wavelet coeﬃcients. As a result, it yields poor synthesis results in the case
of structured textures (see e.g. the brickwall texture in Figures 6(a) and 6(b)).
Portilla and Simoncelli show in that imposing self- and cross-correlation
constraints between the scale and orientation of the steerable frames enables to
J. Rabin, G. Peyr´e, J. Delon and M. Bernot
Original f 1
Original f 2
Fig. 4. Texture Interpolation : Mixing of two textures using the ﬁrst order statistical
Wasserstein Barycenter
Fig. 5. Texture Interpolation of three textures using the ﬁrst order statistical model. The three original textures are given at the vertices of the triangle (top
Figure). Details of interpolations are given in the bottom.
J. Rabin, G. Peyr´e, J. Delon and M. Bernot
preserve higher order statistical features in the texture synthesis process. An example is shown in Figure 6(c). The main limitations of this approach are ﬁrstly
that the deﬁnition of the constraints are not fully generic, so that the projectors
have to be designed by hand; secondly, the authors showed that it yields poor
results for texture mixing.
This section extends the ﬁrst order model described in Section 4.2 to handle
higher order statistical features. Following the methodology introduced by Portilla and Simoncelli, we consider for each index ℓ– in addition to aforementioned
the 3D-distributions Y ℓ,j – the joint distributions of wavelet coeﬃcients located
in diﬀerent spatial positions, i.e.
∀ℓ∈L, ∀j ∈J,
N = {Y ℓ,j{m}, m ∈N(n)}n ⊂R3|N |.
where N(n) = n + N is a given neighborhood pattern around each n. The joint
distribution Cℓ,j
N thus has 3 × |N| dimensions. In the following experiments, N
is deﬁned as a square neighborhood of size 4×4, but more sophisticated pattern
could be implemented. Figure 6(d) shows that the use of such joint-distributions
allows to synthesize more complicated textures.
(a) Original
(b) H-B. 
(c) P-S. 
(d) Our method
Fig. 6. (a) Original texture. (b) Heeger-Bergen texture synthesis (100 iterations). (c)
Portilla-Simoncelli texture synthesis with color constraint (100 iterations, using
5×5 pixel correlation constraints.). (d) Our method, with joint-distributions matching
(100 iterations, using 4 × 4 blocks matching for each frame of the pyramid).
Higher order statistical texture mixing. The texture mixing framework introduced in section 4.2 is extended to take into account the joint distributions
N }j∈J. In a preliminary stage, the sliced Wasserstein barycenters Cℓ
Bar(ρj, Cℓ,j
N )j∈J ⊂R3|N | are computed using the stochastic gradient descent
algorithm. Then, during the iterated synthesis algorithm, for each ℓ∈L, the
coeﬃcients {c(k)
ℓ,n}n deﬁned in (13) are clustered into blocks and projected into
the statistical constraints
ℓ,m, m ∈N(n)}n)
The images f (k+1) are then reconstructed from these coeﬃcients {ˆc(k)
ℓ,n}n using
Wasserstein Barycenter
Three diﬀerent examples are proposed in Figure 7 to illustrate this high-order
texture mixing framework. It should be noticed that the authors of already
introduced a color model, but that was not published. However, our method is
the ﬁrst extension of such joint probability constraints to texture mixing.
Conclusion
This paper has tackled the problem of deﬁning average of histograms and distributions features. This shows that optimal distance metrics are useful beyond
pairwise comparison of distributions.
The second point made by this paper is that the optimal transport in itself
encompasses important information and enables to enforce complicated, high
dimensional, statistical features. This paper presented an illustrative example in
the ﬁeld of texture synthesis.
Some extensions of this work are foreseen. To begin with, we do not have
yet implemented cross block matching between diﬀerent frames of the pyramid
in our mixing algorithm as it is done in the original framework of Portilla and
Simoncelli , this should improve the synthesis results visually. Moreover, more
complex statistical information could be modeled using adaptive neighborhood
N, requiring a statistical learning step before the synthesis.