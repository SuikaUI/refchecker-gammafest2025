Proceedings of “Internation Conference on Computer Vision” (ICCV), Nice, France, November 2003
vol.I, p.26
Computing Geodesics and Minimal Surfaces via Graph Cuts
Yuri Boykov
Imaging & Visualization
Siemens Corp. Research
Princeton, NJ 08540
Vladimir Kolmogorov
Computer Science
Cornell University
Ithaca, NY 14853
Geodesic active contours and graph cuts are two standard image segmentation techniques. We introduce a new
segmentation method combining some of their beneﬁts. Our
main intuition is that any cut on a graph embedded in some
continuous space can be interpreted as a contour (in 2D)
or a surface (in 3D). We show how to build a grid graph
and set its edge weights so that the cost of cuts is arbitrarily close to the length (area) of the corresponding contours
(surfaces) for any anisotropic Riemannian metric.
There are two interesting consequences of this technical result. First, graph cut algorithms can be used to ﬁnd
globally minimum geodesic contours (minimal surfaces in
3D) under arbitrary Riemannian metric for a given set of
boundary conditions. Second, we show how to minimize
metrication artifacts in existing graph-cut based methods
in vision. Theoretically speaking, our work provides an interesting link between several branches of mathematics differential geometry, integral geometry, and combinatorial
optimization. The main technical problem is solved using
Cauchy-Crofton formula from integral geometry.
1. Introduction
Our work uniﬁes two standard image segmentation techniques: geodesic active contours and graph cuts.
of these approaches has its own beneﬁts and drawbacks.
Geodesic active contours are based on a continuous
formulation (computing geodesics in Riemannian spaces),
and produce minimal geometric artifacts. Standard variational techniques for computing geodesic contours (e.g.
the level set method) generate local minima of the energy
which may be sensitive to initialization. Highly desirable
anisotropic formulations tend to be slower due to increased
computational burden.
One attractive feature of the graph cut approach is that
it can ﬁnd a global minimum of the energy (e.g. ). On the other hand, discrete topology of graphs
may produce noticeable geometric artifacts known as metrication errors. For example, 2D grid graphs with a simple
4-neighborhood system impose “Manhattan distance” (L1)
metric on the underlying image space. This may create visual artifacts as L1 is not invariant to image rotations and
does not treat different directions in the image equally.
In this paper we introduce a notion of cut metric on
graphs. In fact, cut metrics are (informally speaking) “dual”
to well known path-based metrics on graphs. We study geometric properties of cut metrics in case of regular grids.
Using powerful Crofton-style formulas from integral geometry we solve the following open problem: how to construct
a graph where cut metric approximates any given Riemannian metric with arbitrary precision. Previously, it was not
even clear if such a construction was possible.
Our results allow to combine ideas from differential geometry and combinatorial optimization. In particular, we
propose a geocuts algorithm for image segmentation. Similar to the geodesic active contours technique, we formulate
the problem as ﬁnding geodesics (in 2D) or minimal surfaces (in 3D). Unlike the level-set method, we use graph
cuts to compute global geodesics for a given set of boundary
conditions. Potentially, this could reduce sensitivity to initialization. Anisotropic metrics present no additional computational cost for our algorithm. Similar to level-set methods, geocuts method is “topologically” free.
The structure of the paper is as follows. Related material
from differential geometry, integral geometry, and combinatorial optimization is reviewed in Section 2. The concept of
cut metrics is discussed in Section 2.4. In Sections 3 and 4
we show how to build graphs whose cut metric approximate
any given continuous Riemannian metric. Geocut algorithm
and experimental results are presented in Section 5.
2. Related work and background
2.1. Differential geometry and active contours
Active contours is an interesting application of Differential Geometry in computer vision. Since the intro-
Proceedings of “Internation Conference on Computer Vision” (ICCV), Nice, France, November 2003
vol.I, p.27
duction of ”snakes” , active contour models have been
widely used for image segmentation. Original snakes represented contour models as a parametric mapping C(v) =
(x(v), y(v)) for v ∈ . The energy of the model is
α|Cv(v)|2 + β|Cvv(v)|2 −|∇I(C(v))|dv
where Cv and Cvv are the ﬁrst and second derivatives of C
with respect to contour parameter v, and I : R2 →R+ is
a given image in which we want to detect the object boundaries. Such energies can be minimized via gradient descent
leading to a sequence of moving (“active”) contours. Details for parametric active contours can be found in .
A noticeable development was the introduction of an implicit representation for active contours as level-sets of an
auxiliary function . Unlike most of the snake based
methods, this allows topological changes of the curve.
Another important step was the ”geodesic active contour” model . The two terms in the energy corresponding to internal and external forces were combined into
a single term. Their curve evolution is a result of minimizing the functional
g(|∇I(C(s))|) ds
where parameter s is speciﬁcally chosen as the (Euclidean)
arc length on the contour, |C|E is the Euclidean length of
contour, and g is a strictly decreasing function converging
to zero at inﬁnity. It was shown that in many cases this
method behaves better than its ancestors.
The formulation of can be viewed as a problem of
ﬁnding local geodesics in a space with Riemannian metric
computed from the image. Note that the (non-Euclidean)
length of a contour in a given Riemannian space is
s · D(C(s)) · τs ds
where a positive deﬁnite matrix D(·) speciﬁes the local Riemannian metric at a given point/pixel in the image and τs is
a unit tangent vector to the contour. In fact, the contour energy E(C) above is equal to |C|R in case of an isotropic
Riemannian metric
D(·) = diag(g(|∇I(·)|)).
Like in most of the previous approaches, the algorithm
in searches for some local minimum which is close
to the initial guess. Numerical optimization is performed
via level-sets. The same approach can be used for 3D segmentation via minimal surfaces (see for details). Further generalizations of geodesic active contours and some
anisotropic metrics are discussed in . Regional properties of geodesic active contours are considered in .
Cohen et. al. developed an algorithm for computing
minimal geodesics, i.e. the global minimum of the same energy. Their approach is based on minimal paths and shares
some similarities with the Dijkstra shortest-path algorithm.
Connections between level-set methods and Dijkstra’s algorithm are well known (e.g. see ).
2.2. Integral geometry and Crofton formulas
The name of Integral Geometry was introduced by
Blaschke in . The basic ideas have their origin in the
theory of Geometric Probabilities. In fact, by using concepts of probability M. W. Crofton was the ﬁrst to obtain
some remarkable integral formulas of a purely geometrical
character. These formulas can be considered as one of the
starting points of Integral Geometry.
Below we review one classical Cauchy-Crofton formula
that is crucial for the theory of graph cut geometry developed in this paper. This formula relates a length of a curve
in R2 to a measure of a set of lines intersecting it. We will
introduce basic terminology and discuss some facts that are
important for the consequent development of the material in
this paper. More details about Crofton formula and Integral
Geometry in general can be found in .
Consider a straight line L(ρ, φ) in the plane R2 determined by its normal parameters ρ and φ as shown on Figure 1. First, we will describe a reasonable way of assigning
a measure to a given subset of straight lines. Consider a set
L = {(ρ, φ) : ρ ≥0, φ ∈[0, 2π]} describing all straight
lines L (see Figure 2) and Lebesgue measure on this set
deﬁned by its density dL ∝dρ · dφ. Lebesgue measure
of a subset of straight lines X ⊂L is given by the integral R
X dL. Note that any rigid motion M on the plane R2
transforms a subset of lines X into another subset X M. In
fact , Lebesgue measure is the only measure on L that
is invariant under rigid motions so that
The following Cauchy-Crofton formula establishes a
connection between Euclidean length |C|E of a curve C in
R2 and a measure of a set of lines intersecting it.
Function nc(L) speciﬁes a number of times any given line
L intersects C (see Figure 2). In fact, Cauchy-Crofton formula (1) holds for any rectiﬁable curve 1. If contour C
is convex then (1) reduces to
LC dL = |C|E where LC is
a subset of lines intersecting C. That is, length of a convex
contour equals Lebesgue measure of the set of lines intersecting it. This is one of the most simple and elegant examples of a Crofton-style formula in Integral Geometry.
1Moreover, (1) can be used to generalize the concept of length to a
continuum of points . It is important that the integral in (1) be in the
Lebesgue sense rather than in the Riemann sense.
Proceedings of “Internation Conference on Computer Vision” (ICCV), Nice, France, November 2003
vol.I, p.28
Figure 1. Normal parameters of a straight line
L in R2. The parameters ρ ≥0 and 0 ≤φ ≤2π
are the polar coordinates of the foot of the
perpendicular from the origin onto the line.
Points (x, y) on L satisfy x cos φ + y sin φ = ρ.
(a) Lines in R2.
                                                                                 
(b) Lines as points in L.
Figure 2. Any line L on R2 in (a) has a unique
pair of normal parameters (ρ, φ). That is, lines
L can be represented as points of the set
L = {(ρ, φ) : ρ ≥0, φ ∈[0, 2π]} shown in (b).
Note that any given contour C in (a) deﬁnes
a function nc on L that speciﬁes a number of
intersections with C. Different shades in (b)
represent subsets of lines L where nc(L) = 0,
nc(L) = 2, and nc(L) = 4.
(a) Image with seeds.
(d) Segmentation results.
(b) Graph.
Figure 3. A simple 2D segmentation example for a 3 × 3 image. Boundary conditions
are given by object seeds O = {v} and background seeds B = {p} provided by the user.
The cost of each edge is reﬂected by the
edge’s thickness.
Minimum cost cut is attracted to cheap edges.
2.3. Graph cut methods in vision
Graph cuts have been used for many early vision problems like stereo , segmentation ,
image restoration , texture synthesis , and many
others. Below we brieﬂy overview garph-based segmentation method in , which works as a foundation for our
geocuts technique in Section 5.1. Also, we introduce some
necessary terminology from combinatorial optimization.
An undirected graph G = ⟨V, E⟩is deﬁned as a set of
nodes (vertices V) and a set of undirected edges (E) that
connect these nodes. An example of a graph is shown in
Figure 3(b). Each edge e ∈E in the graph is assigned a
nonnegative weight (cost) we. There are also two special
nodes called terminals. A cut is a subset of edges C ⊂E
such that the terminals become separated on the induced
graph G(C) = ⟨V, E\C⟩. Each cut has a cost which is
deﬁned as the sum of the costs of the edges that it severs
A globally minimum cut on a graph with two terminals can
be computed efﬁciently in low-order polynomial time via
standard max-ﬂow or push-relable algorithms from combinatorial optimization (e.g. ).
Proceedings of “Internation Conference on Computer Vision” (ICCV), Nice, France, November 2003
vol.I, p.29
Graph cut formalism is well suited for segmentation
of images.
In fact, it is completely appropriate for Ndimensional volumes. The nodes of the graph can represent
pixels (or voxels) and the edges can represent any neighborhood relationship between the pixels. A cut partitions
the nodes in the graph. As illustrated in Figure 3 (c-d), this
partitioning corresponds to a segmentation of an underlying
image or volume. A minimum cost cut generates a segmentation that is optimal in terms of properties that are built into
the edge weights.
2.4. “Cut metrics” vs. “path metrics”
Below we introduce a new concept of a cut metric on
graphs. For better motivation, we will ﬁrst discuss a related
notion of a path metric which is more standard for graphs.
Consider a weighted graph G = ⟨V, E⟩. “Length” can
be naturally deﬁned for any path pAB ⊂E connecting two
nodes A, B ∈V as the sum of edge weights along the path
The distance, or the shortest path, between any two nodes
can be computed via Dijkstra algorithm (e.g. see ). Such
distances correspond to a path metric2 on the graph.
Path metrics are relevant in many computer vision applications (e.g. ) based on Dijkstra-style optimization.
A choice of the neighborhood system (graph topology) and
edge weights determine a graph’s path metric. This may
signiﬁcantly affect the quality of results. In fact, the size of
the neighborhood system is important. For example, consider path metric distance maps3 for simple 2D grid-graphs
with 4, 8, and 128 neighborhood systems in Figure 4. The
quality of segmentation results of Dijkstra based methods
can suffer from “blockiness” (like in Figures 8(b)(e)) in case
of “Manhattan” style metric in Figure 4(a). The path metrics in (b) and (c) are much closer to the Euclidean metric.
In general, the segmentation results will be smoother if Dijkstra based method use larger neighborhood system.
In this paper we introduce cut metrics on graphs which,
in some sense, are complimentary or “dual” to path metrics.
The major advantage of cut-based methods (see Section 2.3)
over Dijkstra based segmentation techniques is that they are
not limited to contours (1D paths) and can ﬁnd globally optimal (minimal) hyper-surfaces in N-D cases. This signiﬁcantly broadens the scope of useful applications.
The main intuition comes from an observation that a cut
on a grid-graph G = ⟨V, E⟩embedded in Rn can be seen
2Despite popularity of the Dijkstra algorithm in computer science, the
actual term “path metric” is not very common. However, it is used explicitly in the theory of Finite Metric Spaces that, in particular, studies
embeddability of graphs in normed spaces.
3Personal communications with Marie-Pierre Jolly.
(a) 4 n-system
(b) 8 n-system
(c) 128 n-system
Figure 4. Distance maps for path metrics on
grid-graphs with different size neighborhood
In each case, weights of edges
are equal to their Euclidean length.
contours represent nodes equidistant from a
given center.
as a closed contours (in R2) or as a closed surfaces (in Rn).
“Length”, or “area” in N-D, can be naturally deﬁned for any
cut C ⊂V as
which is simply the standard deﬁnition of cut cost from
combinatorial optimization. Due to geometric interpretation of |C|G as the “length” or “area” of the corresponding contour or surface C, we can talk about metric properties of cuts on graphs. We will use the term cut metric4 in
the context of geometric properties of graph cuts (as hypersurfaces) implied by the deﬁnition 2.
Similarly to path metric, all properties of cut metric on
a graph are determined by the graph’s neighborhood system and by edge weights. In fact, larger neighborhood systems allow both cut and path metrics to approximate continuous metrics. In the example of Figure 4 path metric
approximates continuous Euclidean distances when weights
of edges are equal to their Euclidean length. In fact, cut metric on a 2D grid-graph can obtain the same distance maps as
in Figure 4 but the corresponding edge weights are different. Equation (4) in Section 3 shows that weights of edges
should be inversely proportional to their Euclidean length.
3. Euclidean Cut Metric on 2D grids
In this section we show how to build a 2D grid graph
whose cut metric approximates Euclidean metric. In practice we are much more interested in approximating Riemannian metrics. In this section we use Euclidean metric as a
simple example to introduce all the key ideas. In Section 4
we generalize them to Riemannian case.
4There should be no confusion with a term cut semi-metric used in
 for a very speciﬁc inter-node distances assigned depending on one
speciﬁc ﬁxed cut. We use the word “cut” generically. Our cut metric on a
graph does not depend on one ﬁxed cut.
Proceedings of “Internation Conference on Computer Vision” (ICCV), Nice, France, November 2003
vol.I, p.30
(a) 4 n-system
(b) 8 n-system
(c) 16 n-system
Figure 5. Examples of neighborhoods in 2D.
(a) 8-neighborhood 2D grid
(b) One family of lines
Figure 6. A regular grid.
3.1. Regular 2D Grids
In this section we discuss the structure and basic terminology for 2D grid graphs. We assume that all nodes are
embedded in R2 in a regular grid-like fashion with cells of
size δ. We also assume that all nodes have topologically
identical neighborhood systems. Some examples of possible neighborhood systems are shown in Figure 5. The example in Figure 6 (a) shows a regular grid when all nodes
have identical 8-neighborhood systems as in Figure 5 (b).
Neighborhood systems of a regular grid G can be described by a set NG = {ek : 1 ≤k ≤nG} of distinct (undirected5) vectors. For example, grids with an 8
neighborhood system is described by a set of four vectors
NG = {e1, e2, e3, e4} shown in Figure 5 (b). We will assume that vectors ek are enumerated in the increasing order
of their angular orientation φk so that 0 = φ1 < φ2 <
... < φnG < π. For convenience, we assume that ek is
the shortest length vector connecting two grid nodes in the
given direction φk.
As shown in Figure 6 (b), each vector e ∈NG generates a family of edge-lines on the corresponding grid. It is
easy to check that the distance between the nearest lines in
a family generated by ek is
5We do not differentiate between e and −e
where δ is the cell-size of the grid and |ek| is the (Euclidean)
length of vector ek. Each family of edge lines is characterized by the inter-line distance ∆ρk and by its angular orientation φk. We will also use angular differences between
the nearest families of edge lines ∆φ1 = φ2 −φ1, ∆φ2 =
φ3 −φ2, . . . , ∆φnG = π −φnG−1.
So far we discussed only topological structure of the
Another important aspect of any graph are edge
weights. We will use the following notation. If we set equal
weights for all edges in the same family of lines, that is
for all edges with orientation φk, then we use wk to denote
these common weight. For example, this will be the case
when we want to approximate Euclidean or any other spatially homogeneousmetric D(·) = const. In a more general
case we will use wφ(p) for a weight of a (directed) edge that
originates at node p and has orientation φ.
EXAMPLE 1 As a simple illustration we would like to show
that cut metric on a regular 2D grid implicitly assigns certain “length” to curves. For simplicity, consider a segment
of a straight line a shown in Figure 6 (b). This segment can
be considered as a part of some cut that severs edges on the
grid. We can compute the cost of severed edges as follows.
For a kth family of edge lines on the grid we can easily
count the number of intersections with a as
|a|k = |a| · | sin ϕ|
= |a × ek|
Summing over all families of edge-lines we get from (2)
wk · |a × ek|
assuming constant edge weights wk within the same family.
This equation holds for a vector a with an arbitrary orientation. Thus, we can use (3) to visualize 2D distance maps.
In particular, this equation gives distance maps identical to
those in Figure 4 if edge weights wk are appropriately chosen to approximate Euclidean metric (see formula 4).
3.2. Graph cuts and Cauchy-Crofton formula
In this section we will use integral geometry to establish a necessary technical link between the concepts of (discrete) cut metric on a grid (in combinatorial optimization)
and (continuous) Euclidean metric on R2 (in differential geometry). Consider a contour C in the same 2D space where
grid graph G is embedded (as in Figure 6(a)). Contour C
gives a binary partitioning of graph modes and therefore
corresponds to a cut on G. Then we can consider the length
|C|G of the contour imposed by the graph’s cut metric (2).
Below we derive edge weights on G so that the cut based
length |C|G is close to the Euclidean length |C|E. We will
Proceedings of “Internation Conference on Computer Vision” (ICCV), Nice, France, November 2003
vol.I, p.31
also discuss our convergence result as the topology NG and
the grid size δ get ﬁner and ﬁner.
First, we will assume that graph’s topology NG is ﬁxed.
According to Cauchy-Crofton formula (1) we can represent
the Euclidean length of C as an integral over the set of all
straight lines L(ρ, φ) in L
nc(ρ, φ) dρ dφ
where radius ρ is allowed to be negative while angle φ is restricted to the interval [0, π]. Remember, function nc speci-
ﬁes how many times line L(ρ, φ) intersects contour C. By
choosing an appropriate partitioning of the set [0, π]×R we
can approximate the integral above by its partial sum
nc(i, k)∆ρk
nc(k) · δ2 · ∆φk
where index i enumerates lines in the kth family of edgelines, nc(i, k) counts intersections of line i in the kth family
with contour C, and nc(k) = P
i nc(i, k) is the total number of intersections of C with the kth family of edge-lines.
If we choose constant edge weights within each family
of edge lines as
wk = δ2 · ∆φk
then we have
nc(k) · wk
The approximation error on the left hand side is due to
the difference between an integral and its partial sum. As
we make partitioning ﬁner this error of approximation converges to zero. In our case partitioning size is determined
by the grid size δ and by supk |∆φk|.
The approximation on the right hand side is due to the
fact that the number of intersections between the contour
and an edge-line might be different from the actual number
of edges along this line that are severed by the cut corresponding to the contour. Examples of this phenomenon can
be found in Figure 6(a) in places where some contour wiggles are comparable with the size of edges |ek|. This source
of error converges to zero as |ek| gets smaller. We can prove
the following convergence theorem (the proof is omitted).
Theorem 1 (Pointwise Convergence) If C is a continuously
differentiable regular curve in R2 intersecting each straight
line a ﬁnite number of times then
|C|G →|C|E
as δ, supk |∆φk|, and supk |ek| get to zero.
4. Riemannian Metrics in 2D and in 3D
The results in the previous section generalize to non-
Euclidean metric spaces. In this section we show how to set
edge weights on a grid so that its cut metric approximates a
given continuous Riemannian metric. We follow the same
basic steps as in Section 3.2 for a simpler case of Euclidean
metric. Due to space limitations we skip the proofs.
First we consider a 2D Riemannian space with a constant
metric D(·) = const. We use the following Crofton-style
formula for Riemannian length |C|R of contour C
L · D · uL)3/2 nc dL
where uL is the unit vector in the direction of the line L.
This formula holds for any continuously differentiable regular curve C in R2 and can be derived as an exercise in
Integral Geometry .
Following the same approach as in the previous section,
we obtain an expression for edge weights for a 2D grid
wk = δ2 · |ek|2 · ∆φk · det D
k · D · ek)3/2
in case of a constant Riemannian metric D(·) = const.
Note that equation (5) reduces to (4) if we plug in the identity matrix D = I corresponding to Euclidean metric.
Now we consider a more general 2D Riemannian space
where metric (tensor) D(p) continuously varies over points
p in space. In this case we need to construct a directed
graph. The expression for weights is very similar to (5)
wk(p) = δ2 · |ek|2 · ∆φk · det D(p)
k · D(p) · ek)3/2
The difference is that edge weights now depend not only on
edge’s orientation k but also on node/pixel p where this (directed) edge originates. Note also that two opposite edges
originating in the same node/pixel p and having orientations
φk and π + φk are assigned the same weight wk(p).
Finally, we state our results for a regular 3D grid graphs
embedded in a 3D Riemannian space with metric D(p).
Each edge angular orientation is now determined by spherical angles Φk = {ψk, ϕk}. Using Cauchy-Crofton formula
for the area of surfaces in 3D Riemannian spaces we obtain
the following edge weights:
wk(p) = δ3 · |ek|3 · ∆Φk · det D(p)
k · D(p) · ek)2
where ∆Φk = ∆ψk · ∆ϕk correspond to a given partitioning of the unit sphere among angular orientations
Φ1, Φ2, . . . , ΦnG of edges in the neighborhood system.
Proceedings of “Internation Conference on Computer Vision” (ICCV), Nice, France, November 2003
vol.I, p.32
(a) Liver, 144x170x170
(b) Lung, 253x165x205
image-based Riemannian metrics (geocuts).
5. Experimental Results
Cauchy-Crofton formulas from integral geometry were
the key instruments for obtaining our technical results in
Sections 3.2 and 4. These results establish an interesting
link between two branches of mathematics: combinatorial
optimization and differential geometry. In this section we
show that both disciplines can beneﬁt from this link. In fact,
graph cuts can be used in differential geometry as a numerical method to compute globally optimal minimal surfaces
in N-D Riemannian spaces for a given set of boundary conditions (Section 5.1). On the other hand, better approximation of continuous metrics can help many existing graph-cut
based techniques in vision to reduce their metrication artifacts (Section 5.2).
5.1. “Geocuts” algorithm
Geocuts algorithm is a combination of the theoretical results in Section 4 with the graph-cut segmentation method
in . Equation 7 tells how to set edge weights so that the
cost of graph cuts approximates Riemannian length/area of
the corresponding contours/surfaces. explains how to
impose hard constraints (boundary conditions) on a graph.
The globally optimal cut on the corresponding grid can be
computed in close to linear time via a number of basic s/t
graph cut methods from combinatorial optimization.
In Figure 7 we show a couple of examples of globally
optimal minimal surfaces that we obtained using geocuts.
In both cases we used the following boundary conditions.
The “background” seeds were automatically set at voxels
at the very border of the volume. The “object” seeds were
manually placed in a single slice in the center of the object of interest. Then we applied a “max-ﬂow” algorithm
from which (in one pass) ﬁnds a globally minimal surface (cut) among all surfaces that separate the “object” and
(a) Original data
(b) 4 n-system
(c) 8 n-system
image restoration experiments on 2D data
(d) Original data
(e) 6 n-system
(f) 26 n-system
object extraction experiments on 3D data
Figure 8. Reducing metrication artifacts.
“background” seeds. The running time for the examples in
Figure 7 varies from 10 to 60 seconds on a 1.4GHz Pentium
IV PC depending on the neighborhood size (up to 26).
In the experiments of Figure 7 we used an anisotropic
Riemannian metric (induced from image I)
g(|∇I|) · I + (1 −g(|∇I|)) · u · uT
|∇I| is a unit vector in the direction of image
gradient at point p and I is the identity matrix. We used
scalar function g(x) = exp(−x2
2σ2 ). Note that in the coordinate system aligned with image gradient (s.t. u = (1, 0, 0))
metric D(p) is represented by the diagonal matrix
D(p) = diag ( 1, g(|∇I|), g(|∇I|) )
It is known that anisotropic methods have advantages
over isotropic techniques.
At the same time, standard
anisotropic diffusion techniques are typically slower than
isotropic methods.
Note that geocuts algorithm deals
equally efﬁciently with isotropic or anisotropic metrics D.
5.2. Reducing metrication errors
Many standard graph-cut based methods (see Section 2.3) use energy functions that include a term penalizing
segmentation discontinuities. Our results allow such terms
to represent geometrically justiﬁed length/area of segments
boundaries. This could signiﬁcantly reduce metrication errors. Figure 8(b) shows such errors in the context of image
restoration via graph cut technique in (Potts model) using standard 4-neighborhood system. In (c) we show the
results of the same algorithm when Potts model interaction
Proceedings of “Internation Conference on Computer Vision” (ICCV), Nice, France, November 2003
vol.I, p.33
penalties were set from Euclidean cut metric weights in (4)
using 8-neighborhoods. Similarly, Figure 8(e) shows metrication artifacts generated by a graph-cut based object extraction method in . The results in (e) are for a simple
6-neighborhood system. The results in Figure 8(f) use 26neighborhoods with geometrically justiﬁes weights in (7).
In fact, the idea of using bigger neighborhoods is not
new in the context of Dijkstra based methods on graphs.
In the context of graph cuts, however, it was not clear how
to set weights for different types of edges. Our theoretical
results remove this problem. Formulas (4,7) explain how to
set edge weights to obtain desired geometric properties for
regular neighborhoods of any size and conﬁguration.
Acknowledgments
Christophe Chefdhotel, Nikos Paragios (Siemens Corp.
Research), and Silviu Minut (Michigan State) for sharing
their insights on geodesic active contour models and
level-set methods.
Gareth Funka-Lea (Siemens Corp.
Reaserch) and Ramin Zabih (Cornell) helped to ﬁnd better
ways to present our work. Olga Veksler (NEC Labs USA)
contributed image restoration results.