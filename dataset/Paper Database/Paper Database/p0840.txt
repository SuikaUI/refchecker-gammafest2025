MnasNet: Platform-Aware Neural Architecture Search for Mobile
Mingxing Tan1
Ruoming Pang1
Vijay Vasudevan1
Mark Sandler2
Andrew Howard2
Quoc V. Le1
1Google Brain, 2Google Inc.
{tanmingxing, bochen, rpang, vrv, sandler, howarda, qvl}@google.com
Designing convolutional neural networks (CNN) for
mobile devices is challenging because mobile models need
to be small and fast, yet still accurate. Although signiﬁcant
efforts have been dedicated to design and improve mobile
CNNs on all dimensions, it is very difﬁcult to manually
balance these trade-offs when there are so many architectural possibilities to consider. In this paper, we propose
an automated mobile neural architecture search (MNAS)
approach, which explicitly incorporate model latency into
the main objective so that the search can identify a model
that achieves a good trade-off between accuracy and
latency. Unlike previous work, where latency is considered
via another, often inaccurate proxy (e.g., FLOPS), our
approach directly measures real-world inference latency
by executing the model on mobile phones.
To further
strike the right balance between ﬂexibility and search
space size, we propose a novel factorized hierarchical
search space that encourages layer diversity throughout
the network. Experimental results show that our approach
consistently
outperforms
state-of-the-art
models across multiple vision tasks.
On the ImageNet
classiﬁcation task, our MnasNet achieves 75.2% top-1
accuracy with 78ms latency on a Pixel phone, which is
1.8× faster than MobileNetV2 with 0.5% higher
accuracy and 2.3× faster than NASNet with 1.2%
higher accuracy. Our MnasNet also achieves better mAP
quality than MobileNets for COCO object detection. Code
 
tree/master/models/official/mnasnet.
1. Introduction
Convolutional neural networks (CNN) have made significant progress in image classiﬁcation, object detection, and
many other applications. As modern CNN models become
increasingly deeper and larger , they also become slower, and require more computation. Such increases
in computational demands make it difﬁcult to deploy stateof-the-art CNN models on resource-constrained platforms
Sample models
from search space
Multi-objective
Controller
Figure 1: An Overview of Platform-Aware Neural Architecture Search for Mobile.
Inference Latency (ms)
Imagenet Top 1 Accuracy (%)
MobileNetV1
MobileNetV2
MobileNetV2(1.4)
AmoebaNet-A
Figure 2: Accuracy vs. Latency Comparison – Our Mnas-
Net models signiﬁcantly outperforms other mobile models
 on ImageNet. Details can be found in Table 1.
such as mobile or embedded devices.
Given restricted computational resources available on
mobile devices, much recent research has focused on designing and improving mobile CNN models by reducing
the depth of the network and utilizing less expensive operations, such as depthwise convolution and group convolution . However, designing a resource-constrained
mobile model is challenging: one has to carefully balance
accuracy and resource-efﬁciency, resulting in a signiﬁcantly
large design space.
 
In this paper, we propose an automated neural architecture search approach for designing mobile CNN models.
Figure 1 shows an overview of our approach, where the
main differences from previous approaches are the latency
aware multi-objective reward and the novel search space.
Our approach is based on two main ideas. First, we formulate the design problem as a multi-objective optimization
problem that considers both accuracy and inference latency
of CNN models. Unlike in previous work that
use FLOPS to approximate inference latency, we directly
measure the real-world latency by executing the model on
real mobile devices. Our idea is inspired by the observation that FLOPS is often an inaccurate proxy: for example, MobileNet and NASNet have similar FLOPS
(575M vs. 564M), but their latencies are signiﬁcantly different (113ms vs. 183ms, details in Table 1). Secondly, we
observe that previous automated approaches mainly search
for a few types of cells and then repeatedly stack the same
cells through the network. This simpliﬁes the search process, but also precludes layer diversity that is important for
computational efﬁciency. To address this issue, we propose
a novel factorized hierarchical search space, which allows
layers to be architecturally different yet still strikes the right
balance between ﬂexibility and search space size.
We apply our proposed approach to ImageNet classiﬁcation and COCO object detection . Figure 2 summarizes a comparison between our MnasNet models and
other state-of-the-art mobile models. Compared to the MobileNetV2 , our model improves the ImageNet accuracy
by 3.0% with similar latency on the Google Pixel phone.
On the other hand, if we constrain the target accuracy, then
our MnasNet models are 1.8× faster than MobileNetV2
and 2.3× faster thans NASNet with better accuracy.
Compared to the widely used ResNet-50 , our MnasNet
model achieves slightly higher (76.7%) accuracy with 4.8×
fewer parameters and 10× fewer multiply-add operations.
By plugging our model as a feature extractor into the SSD
object detection framework, our model improves both the
inference latency and the mAP quality on COCO dataset
over MobileNetsV1 and MobileNetV2, and achieves comparable mAP quality (23.0 vs 23.2) as SSD300 with
42× less multiply-add operations.
To summarize, our main contributions are as follows:
1. We introduce a multi-objective neural architecture
search approach that optimizes both accuracy and realworld latency on mobile devices.
2. We propose a novel factorized hierarchical search
space to enable layer diversity yet still strike the right
balance between ﬂexibility and search space size.
3. We demonstrate new state-of-the-art accuracy on both
ImageNet classiﬁcation and COCO object detection
under typical mobile latency constraints.
2. Related Work
Improving the resource efﬁciency of CNN models has
been an active research topic during the last several years.
Some commonly-used approaches include 1) quantizing the
weights and/or activations of a baseline CNN model into
lower-bit representations , or 2) pruning less important ﬁlters according to FLOPs , or to platform-aware
metrics such as latency introduced in . However, these
methods are tied to a baseline model and do not focus on
learning novel compositions of CNN operations.
Another common approach is to directly hand-craft more
efﬁcient mobile architectures: SqueezeNet reduces the
number of parameters and computation by using lowercost 1x1 convolutions and reducing ﬁlter sizes; MobileNet
 extensively employs depthwise separable convolution
to minimize computation density; ShufﬂeNets utilize low-cost group convolution and channel shufﬂe; Condensenet learns to connect group convolutions across
layers; Recently, MobileNetV2 achieved state-of-theart results among mobile-size models by using resourceefﬁcient inverted residuals and linear bottlenecks. Unfortunately, given the potentially huge design space, these handcrafted models usually take signiﬁcant human efforts.
Recently, there has been growing interest in automating
the model design process using neural architecture search.
These approaches are mainly based on reinforcement learning , evolutionary search , differentiable search , or other learning algorithms .
Although these methods can generate mobile-size models
by repeatedly stacking a few searched cells, they do not incorporate mobile platform constraints into the search process or search space. Closely related to our work is MONAS
 , DPP-Net , RNAS and Pareto-NASH which
attempt to optimize multiple objectives, such as model size
and accuracy, while searching for CNNs, but their search
process optimizes on small tasks like CIFAR. In contrast,
this paper targets real-world mobile latency constraints and
focuses on larger tasks like ImageNet classiﬁcation and
COCO object detection.
3. Problem Formulation
We formulate the design problem as a multi-objective
search, aiming at ﬁnding CNN models with both highaccuracy and low inference latency. Unlike previous architecture search approaches that often optimize for indirect metrics, such as FLOPS, we consider direct real-world
inference latency, by running CNN models on real mobile
devices, and then incorporating the real-world inference latency into our objective. Doing so directly measures what
is achievable in practice: our early experiments show it is
challenging to approximate real-world latency due to the
variety of mobile hardware/software idiosyncrasies.
Acc(m)=0.5, T=80
Model Latency (ms)
Acc(m)=0.5, T=80
Objective Function Deﬁned by Equation
2, assuming accuracy ACC(m)=0.5 and target latency
T=80ms: (top) show the object values with latency as a
hard constraint; (bottom) shows the objective values with
latency as a soft constraint.
Given a model m, let ACC(m) denote its accuracy on
the target task, LAT(m) denotes the inference latency on
the target mobile platform, and T is the target latency. A
common method is to treat T as a hard constraint and maximize accuracy under this constraint:
subject to
However, this approach only maximizes a single metric and
does not provide multiple Pareto optimal solutions. Informally, a model is called Pareto optimal if either it has
the highest accuracy without increasing latency or it has the
lowest latency without decreasing accuracy. Given the computational cost of performing architecture search, we are
more interested in ﬁnding multiple Pareto-optimal solutions
in a single architecture search.
While there are many methods in the literature , we
use a customized weighted product method1 to approximate
Pareto optimal solutions, with optimization goal deﬁned as:
where w is the weight factor deﬁned as:
if LAT(m) ≤T
1We pick the weighted product method because it is easy to customize,
but we expect methods like weighted sum should be also ﬁne.
where α and β are application-speciﬁc constants. An empirical rule for picking α and β is to ensure Pareto-optimal solutions have similar reward under different accuracy-latency
trade-offs. For instance, we empirically observed doubling
the latency usually brings about 5% relative accuracy gain.
Given two models: (1) M1 has latency l and accuracy a; (2)
M2 has latency 2l and 5% higher accuracy a · (1 + 5%),
they should have similar reward: Reward(M2) = a · (1 +
5%) · (2l/T)β ≈Reward(M1) = a · (l/T)β. Solving this
gives β ≈−0.07. Therefore, we use α = β = −0.07 in
our experiments unless explicitly stated.
Figure 3 shows the objective function with two typical
values of (α, β). In the top ﬁgure with (α = 0, β = −1),
we simply use accuracy as the objective value if measured
latency is less than the target latency T; otherwise, we
sharply penalize the objective value to discourage models from violating latency constraints. The bottom ﬁgure
(α = β = −0.07) treats the target latency T as a soft constraint, and smoothly adjusts the objective value based on
the measured latency.
4. Mobile Neural Architecture Search
In this section, we will ﬁrst discuss our proposed novel
factorized hierarchical search space, and then summarize
our reinforcement-learning based search algorithm.
4.1. Factorized Hierarchical Search Space
As shown in recent studies , a well-deﬁned
search space is extremely important for neural architecture
search. However, most previous approaches 
only search for a few complex cells and then repeatedly
stack the same cells. These approaches don’t permit layer
diversity, which we show is critical for achieving both high
accuracy and lower latency.
In contrast to previous approaches, we introduce a novel
factorized hierarchical search space that factorizes a CNN
model into unique blocks and then searches for the operations and connections per block separately, thus allowing
different layer architectures in different blocks. Our intuition is that we need to search for the best operations based
on the input and output shapes to obtain better accuratelatency trade-offs.
For example, earlier stages of CNNs
usually process larger amounts of data and thus have much
higher impact on inference latency than later stages. Formally, consider a widely-used depthwise separable convolution kernel denoted as the four-tuple (K, K, M, N)
that transforms an input of size (H, W, M)2 to an output of
size (H, W, N), where (H, W) is the input resolution and
M, N are the input/output ﬁlter sizes. The total number of
multiply-adds can be described as:
2We omit batch size dimension for simplicity.
Blocks are predefined Skeletons.
Search Space Per Block i:
ConvOp: dconv, conv, ...
KernelSize: 3x3, 5x5
SERatio: 0, 0.25, ...
SkipOp: identity, pool, ...
FilterSize: Fi
#Layers: Ni
Contents in blue are searched
Figure 4: Factorized Hierarchical Search Space. Network layers are grouped into a number of predeﬁned skeletons, called
blocks, based on their input resolutions and ﬁlter sizes. Each block contains a variable number of repeated identical layers
where only the ﬁrst layer has stride 2 if input/output resolutions are different but all other layers have stride 1. For each block,
we search for the operations and connections for a single layer and the number of layers N, then the same layer is repeated
N times (e.g., Layer 4-1 to 4-N4 are the same). Layers from different blocks (e.g., Layer 2-1 and 4-1) can be different.
H ∗W ∗M ∗(K ∗K + N)
Here we need to carefully balance the kernel size K and
ﬁlter size N if the total computation is constrained. For instance, increasing the receptive ﬁeld with larger kernel size
K of a layer must be balanced with reducing either the ﬁlter
size N at the same layer, or compute from other layers.
Figure 4 shows the baseline structure of our search space.
We partition a CNN model into a sequence of pre-deﬁned
blocks, gradually reducing input resolutions and increasing
ﬁlter sizes as is common in many CNN models. Each block
has a list of identical layers, whose operations and connections are determined by a per-block sub search space.
Speciﬁcally, a sub search space for a block i consists of the
following choices:
• Convolutional ops ConvOp: regular conv (conv), depthwise
conv (dconv), and mobile inverted bottleneck conv .
• Convolutional kernel size KernelSize: 3x3, 5x5.
• Squeeze-and-excitation ratio SERatio: 0, 0.25.
• Skip ops SkipOp: pooling, identity residual, or no skip.
• Output ﬁlter size Fi.
• Number of layers per block Ni.
ConvOp, KernelSize, SERatio, SkipOp, Fi determines
the architecture of a layer, while Ni determines how many
times the layer will be repeated for the block. For example, each layer of block 4 in Figure 4 has an inverted bottleneck 5x5 convolution and an identity residual skip path,
and the same layer is repeated N4 times. We discretize all
search options using MobileNetV2 as a reference: For #layers in each block, we search for {0, +1, -1} based on MobileNetV2; for ﬁlter size per layer, we search for its relative
size in {0.75, 1.0, 1.25} to MobileNetV2 .
Our factorized hierarchical search space has a distinct
advantage of balancing the diversity of layers and the size
of total search space. Suppose we partition the network into
B blocks, and each block has a sub search space of size S
with average N layers per block, then our total search space
size would be SB, versing the ﬂat per-layer search space
with size SB∗N. A typical case is S = 432, B = 5, N = 3,
where our search space size is about 1013, versing the perlayer approach with search space size 1039.
4.2. Search Algorithm
Inspired by recent work , we use a reinforcement learning approach to ﬁnd Pareto optimal solutions for our multi-objective search problem. We choose
reinforcement learning because it is convenient and the reward is easy to customize, but we expect other methods like
evolution should also work.
Concretely, we follow the same idea as and map
each CNN model in the search space to a list of tokens.
These tokens are determined by a sequence of actions a1:T
from the reinforcement learning agent based on its parameters θ. Our goal is to maximize the expected reward:
J = EP (a1:T ;θ)[R(m)]
where m is a sampled model determined by action a1:T , and
R(m) is the objective value deﬁned by equation 2.
As shown in Figure 1, the search framework consists of
three components: a recurrent neural network (RNN) based
controller, a trainer to obtain the model accuracy, and a
mobile phone based inference engine for measuring the latency. We follow the well known sample-eval-update loop
to train the controller. At each step, the controller ﬁrst samples a batch of models using its current parameters θ, by
#Mult-Adds
Top-1 Acc. (%)
Top-5 Acc. (%)
Inference Latency
MobileNetV1 
SqueezeNext 
ShufﬂeNet (1.5x) 
ShufﬂeNet (2x)
ShufﬂeNetV2 (1.5x) 
ShufﬂeNetV2 (2x)
CondenseNet (G=C=4) 
CondenseNet (G=C=8)
MobileNetV2 
MobileNetV2 (1.4x)
NASNet-A 
AmoebaNet-A 
PNASNet 
DARTS 
MnasNet-A1
MnasNet-A2
MnasNet-A3
Table 1: Performance Results on ImageNet Classiﬁcation . We compare our MnasNet models with both manuallydesigned mobile models and other automated approaches – MnasNet-A1 is our baseline model;MnasNet-A2 and MnasNet-A3
are two models (for comparison) with different latency from the same architecture search experiment; #Params: number of
trainable parameters; #Mult-Adds: number of multiply-add operations per image; Top-1/5 Acc.: the top-1 or top-5 accuracy
on ImageNet validation set; Inference Latency is measured on the big CPU core of a Pixel 1 Phone with batch size 1.
predicting a sequence of tokens based on the softmax logits
from its RNN. For each sampled model m, we train it on the
target task to get its accuracy ACC(m), and run it on real
phones to get its inference latency LAT(m). We then calculate the reward value R(m) using equation 2. At the end
of each step, the parameters θ of the controller are updated
by maximizing the expected reward deﬁned by equation 5
using Proximal Policy Optimization . The sample-evalupdate loop is repeated until it reaches the maximum number of steps or the parameters θ converge.
5. Experimental Setup
Directly searching for CNN models on large tasks like
ImageNet or COCO is expensive, as each model takes
days to converge. While previous approaches mainly perform architecture search on smaller tasks such as CIFAR-
10 , we ﬁnd those small proxy tasks don’t work
when model latency is taken into account, because one typically needs to scale up the model when applying to larger
problems. In this paper, we directly perform our architecture search on the ImageNet training set but with fewer
training steps (5 epochs). As a common practice, we reserve randomly selected 50K images from the training set
as the ﬁxed validation set. To ensure the accuracy improvements are from our search space, we use the same RNN
controller as NASNet even though it is not efﬁcient:
each architecture search takes 4.5 days on 64 TPUv2 devices. During training, we measure the real-world latency
of each sampled model by running it on the single-thread
big CPU core of Pixel 1 phones. In total, our controller
samples about 8K models during architecture search, but
only 15 top-performing models are transferred to the full
ImageNet and only 1 model is transferred to COCO.
For full ImageNet training, we use RMSProp optimizer
with decay 0.9 and momentum 0.9. Batch norm is added
after every convolution layer with momentum 0.99, and
weight decay is 1e-5. Dropout rate 0.2 is applied to the last
layer. Following , learning rate is increased from 0 to
0.256 in the ﬁrst 5 epochs, and then decayed by 0.97 every
2.4 epochs. We use batch size 4K and Inception preprocessing with image size 224×224. For COCO training, we plug
our learned model into SSD detector and use the same
settings as , including input size 320 × 320.
6. Results
In this section, we study the performance of our models
on ImageNet classiﬁcation and COCO object detection, and
compare them with other state-of-the-art mobile models.
6.1. ImageNet Classiﬁcation Performance
Table 1 shows the performance of our models on ImageNet . We set our target latency as T = 75ms, similar
Inference Latency (ms)
Imagenet Top 1 Accuracy (%)
MnasNet-A1
MobileNetV2
(a) Depth multiplier = 0.35, 0.5, 0.75, 1.0, 1.4, corresponding
to points from left to right.
Inference Latency (ms)
Imagenet Top 1 Accuracy (%)
MnasNet-A1
MobileNetV2
(b) Input size = 96, 128, 160, 192, 224, corresponding to points
from left to right.
Figure 5: Performance Comparison with Different Model Scaling Techniques. MnasNet is our baseline model shown in
Table 1. We scale it with the same depth multipliers and input sizes as MobileNetV2.
Inference Latency
Top-1 Acc.
MobileNetV2
MnasNet-B1
MnasNet-A1
MnasNet-A2
Table 2: Performance Study for Squeeze-and-Excitation
SE – MnasNet-A denote the default MnasNet with SE
in search space; MnasNet-B denote MnasNet with no SE in
search space.
to MobileNetV2 , and use Equation 2 with α=β=-0.07
as our reward function during architecture search. Afterwards, we pick three top-performing MnasNet models, with
different latency-accuracy trade-offs from the same search
experiment and compare them with existing mobile models.
As shown in the table, our MnasNet A1 model achieves
75.2% top-1 / 92.5% top-5 accuracy with 78ms latency and
3.9M parameters / 312M multiply-adds, achieving a new
state-of-the-art accuracy for this typical mobile latency constraint. In particular, MnasNet runs 1.8× faster than MobileNetV2 (1.4) on the same Pixel phone with 0.5%
higher accuracy.
Compared with automatically searched
CNN models, our MnasNet runs 2.3× faster than the
mobile-size NASNet-A with 1.2% higher top-1 accuracy.
Notably, our slightly larger MnasNet-A3 model
achieves better accuracy than ResNet-50 , but with 4.8×
fewer parameters and 10× fewer multiply-add cost.
Given that squeeze-and-excitation (SE ) is relatively
new and many existing mobile models don’t have this extra
optimization, we also show the search results without SE in
the search space in Table 2; our automated approach still
signiﬁcantly outperforms both MobileNetV2 and NASNet.
6.2. Model Scaling Performance
Given the myriad application requirements and device
heterogeneity present in the real world, developers often
scale a model up or down to trade accuracy for latency or
model size. One common scaling technique is to modify
the ﬁlter size using a depth multiplier . For example,
a depth multiplier of 0.5 halves the number of channels in
each layer, thus reducing the latency and model size. Another common scaling technique is to reduce the input image size without changing the network.
Figure 5 compares the model scaling performance of
MnasNet and MobileNetV2 by varying the depth multipliers and input image sizes. As we change the depth multiplier from 0.35 to 1.4, the inference latency also varies
from 20ms to 160ms. As shown in Figure 5a, our Mnas-
Net model consistently achieves better accuracy than MobileNetV2 for each depth multiplier. Similarly, our model
is also robust to input size changes and consistently outperforms MobileNetV2 (increaseing accuracy by up to 4.1%)
across all input image sizes from 96 to 224, as shown in
Figure 5b.
In addition to model scaling, our approach also allows
searching for a new architecture for any latency target. For
example, some video applications may require latency as
low as 25ms. We can either scale down a baseline model, or
search for new models speciﬁcally targeted to this latency
constraint. Table 4 compares these two approaches. For fair
comparison, we use the same 224x224 image sizes for all
#Mult-Adds
Inference Latency
YOLOv2 
SSD300 
SSD512 
MobileNetV1 + SSDLite 
MobileNetV2 + SSDLite 
MnasNet-A1 + SSDLite
Table 3: Performance Results on COCO Object Detection – #Params: number of trainable parameters; #Mult-Adds:
number of multiply-additions per image; mAP: standard mean average precision on test-dev2017; mAPS, mAPM, mAPL:
mean average precision on small, medium, large objects; Inference Latency: the inference latency on Pixel 1 Phone.
MobileNetV2 (0.35x)
MnasNet-A1 (0.35x)
MnasNet-search1
MnasNet-search2
Table 4: Model Scaling vs. Model Search – MobileNetV2
(0.35x) and MnasNet-A1 (0.35x) denote scaling the baseline models with depth multiplier 0.35; MnasNet-search1/2
denotes models from a new architecture search that targets
22ms latency constraint.
models. Although our MnasNet already outperforms MobileNetV2 with the same scaling parameters, we can further
improve the accuracy with a new architecture search targeting a 22ms latency constraint.
6.3. COCO Object Detection Performance
For COCO object detection , we pick the MnasNet
models in Table 2 and use them as the feature extractor for
SSDLite, a modiﬁed resource-efﬁcient version of SSD .
Similar to , we compare our models with other mobilesize SSD or YOLO models.
Table 3 shows the performance of our MnasNet models on COCO. Results for YOLO and SSD are from ,
while results for MobileNets are from . We train our
models on COCO trainval35k and evaluate them on testdev2017 by submitting the results to COCO server.
shown in the table, our approach signiﬁcantly improve the
accuracy over MobileNet V1 and V2. Compare to the standard SSD300 detector , our MnasNet model achieves
comparable mAP quality (23.0 vs 23.2) as SSD300 with
7.4× fewer parameters and 42× fewer multiply-adds.
7. Ablation Study and Discussion
In this section, we study the impact of latency constraint
and search space, and discuss MnasNet architecture details
and the importance of layer diversity.
Proxy Task Accuracy (%)
Inference Latency (ms)
Histogram Count
(a) α = 0, β = −1
Proxy Task Accuracy (%)
Inference Latency (ms)
Histogram Count
(b) α = β = −0.07
Figure 6: Multi-Objective Search Results based on equation 2 with (a) α=0, β=-1; and (b) α=β=−0.07. Target latency is T=75ms. Top ﬁgure shows the Pareto curve (blue
line) for the 3000 sampled models (green dots); bottom ﬁgure shows the histogram of model latency.
7.1. Soft vs. Hard Latency Constraint
Our multi-objective search method allows us to deal with
both hard and soft latency constraints by setting α and β to
different values in the reward equation 2. Figure 6 shows
the multi-objective search results for typical α and β. When
α = 0, β = −1, the latency is treated as a hard constraint,
so the controller tends to focus more on faster models to
avoid the latency penalty. On the other hand, by setting
α = β = −0.07, the controller treats the target latency as a
soft constraint and tries to search for models across a wider
latency range. It samples more models around the target
latency value at 75ms, but also explores models with latency
smaller than 40ms or greater than 110ms. This allows us
to pick multiple models from the Pareto curve in a single
architecture search as shown in Table 1.
7.2. Disentangling Search Space and Reward
To disentangle the impact of our two key contributions:
multi-objective reward and new search space, Figure 5 compares their performance. Starting from NASNet , we
ﬁrst employ the same cell-base search space and simply add the latency constraint using our proposed multipleobject reward.
Results show it generates a much faster
model by trading the accuracy to latency. Then, we apply both our multi-objective reward and our new factorized
search space, and achieve both higher accuracy and lower
latency, suggesting the effectiveness of our search space.
Search Space
Top-1 Acc.
Single-obj 
Cell-based 
Cell-based 
Table 5: Comparison of Decoupled Search Space and
Reward Design – Multi-obj denotes our multi-objective
reward; Single-obj denotes only optimizing accuracy.
7.3. MnasNet Architecture and Layer Diversity
Figure 7(a) illustrates our MnasNet-A1 model found by
our automated approach. As expected, it consists of a variety of layer architectures throughout the network. One interesting observation is that our MnasNet uses both 3x3 and
5x5 convolutions, which is different from previous mobile
models that all only use 3x3 convolutions.
In order to study the impact of layer diversity, Table
6 compares MnasNet with its variants that only repeat a
single type of layer (ﬁxed kernel size and expansion ratio). Our MnasNet model has much better accuracy-latency
trade-offs than those variants, highlighting the importance
of layer diversity in resource-constrained CNN models.
8. Conclusion
This paper presents an automated neural architecture
search approach for designing resource-efﬁcient mobile
CNN models using reinforcement learning. Our main ideas
are incorporating platform-aware real-world latency information into the search process and utilizing a novel factorized hierarchical search space to search for mobile models
with the best trade-offs between accuracy and latency. We
demonstrate that our approach can automatically ﬁnd signiﬁcantly better mobile models than existing approaches,
and achieve new state-of-the-art results on both ImageNet
classiﬁcation and COCO object detection under typical mobile inference latency constraints. The resulting MnasNet
architecture also provides interesting ﬁndings on the importance of layer diversity, which will guide us in designing
and improving future mobile CNN models.
SepConv (k3x3)
MBConv6 (k3x3)
MBConv3 (k5x5), SE
MBConv6 (k3x3)
MBConv6 (k3x3), SE
MBConv6 (k5x5), SE
MBConv6 (k3x3)
Pooling, FC
112x112x16
DWConv5x5, BN, Relu
Conv1x1, BN, Relu
Conv1x1, BN
DWConv3x3, BN, Relu
Conv1x1, BN
(a) MnasNet-A1
(b) MBConv3 (k5x5)
(d) SepConv (k3x3)
112x112x32
DWConv3x3, BN, Relu
Conv1x1, BN, Relu
Conv1x1, BN
(c) MBConv6 (k3x3)
SE (Pooling, FC, Relu,
FC, SIgmoid, MUL)
Figure 7: MnasNet-A1 Architecture – (a) is a representative model selected from Table 1; (b) - (d) are a few corresponding layer structures. MBConv denotes mobile inverted bottleneck conv, DWConv denotes depthwise conv,
k3x3/k5x5 denotes kernel size, BN is batch norm, HxWxF
denotes tensor shape (height, width, depth), and ×1/2/3/4
denotes the number of repeated layers within the block.
Top-1 Acc.
Inference Latency
MnasNet-A1
MBConv3 (k3x3) only
MBConv3 (k5x5) only
MBConv6 (k3x3) only
MBConv6 (k5x5) only
Table 6: Performance Comparison of MnasNet and Its
Variants – MnasNet-A1 denotes the model shown in Figure
7(a); others are variants that repeat a single type of layer
throughout the network. All models have the same number
of layers and same ﬁlter size at each layer.
9. Acknowledgments
We thank Barret Zoph, Dmitry Kalenichenko, Guiheng
Zhou, Hongkun Yu, Jeff Dean, Megan Kacholia, Menglong
Zhu, Nan Zhang, Shane Almeida, Sheng Li, Vishy Tirumalashetty, Wen Wang, Xiaoqiang Zheng, and the larger
device automation platform team, TensorFlow Lite, and
Google Brain team.