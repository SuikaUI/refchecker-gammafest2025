LINE: Large-scale Information Network Embedding
Jian Tang1, Meng Qu2∗, Mingzhe Wang2, Ming Zhang2, Jun Yan1, Qiaozhu Mei3
1Microsoft Research Asia, {jiatang, junyan}@microsoft.com
2School of EECS, Peking University, {mnqu, wangmingzhe, mzhang_cs}@pku.edu.cn
3School of Information, University of Michigan, 
This paper studies the problem of embedding very large
information networks into low-dimensional vector spaces,
which is useful in many tasks such as visualization, node
classiﬁcation, and link prediction. Most existing graph embedding methods do not scale for real world information
networks which usually contain millions of nodes. In this
paper, we propose a novel network embedding method called
the “LINE,” which is suitable for arbitrary types of information networks: undirected, directed, and/or weighted. The
method optimizes a carefully designed objective function
that preserves both the local and global network structures.
An edge-sampling algorithm is proposed that addresses the
limitation of the classical stochastic gradient descent and
improves both the eﬀectiveness and the eﬃciency of the inference.
Empirical experiments prove the eﬀectiveness of
the LINE on a variety of real-world information networks,
including language networks, social networks, and citation
networks. The algorithm is very eﬃcient, which is able to
learn the embedding of a network with millions of vertices
and billions of edges in a few hours on a typical single machine. The source code of the LINE is available online.1
Categories and Subject Descriptors
I.2.6 [Artiﬁcial Intelligence]: Learning
General Terms
Algorithms, Experimentation
information network embedding; scalability; feature learning; dimension reduction
∗This work was done when the second author was an intern
at Microsoft Research Asia.
1 
Copyright is held by the International World Wide Web Conference Committee (IW3C2). IW3C2 reserves the right to provide a hyperlink to the
author’s site if the Material is used in electronic media.
WWW 2015, May 18–22, 2015, Florence, Italy.
ACM 978-1-4503-3469-3/15/05.
 
INTRODUCTION
Information networks are ubiquitous in the real world with
examples such as airline networks, publication networks, social and communication networks, and the World Wide Web.
The size of these information networks ranges from hundreds
of nodes to millions and billions of nodes. Analyzing large
information networks has been attracting increasing attention in both academia and industry.
This paper studies
the problem of embedding information networks into lowdimensional spaces, in which every vertex is represented as
a low-dimensional vector. Such a low-dimensional embedding is very useful in a variety of applications such as visualization , node classiﬁcation , link prediction ,
and recommendation .
Various methods of graph embedding have been proposed
in the machine learning literature (e.g., ). They
generally perform well on smaller networks. The problem
becomes much more challenging when a real world information network is concerned, which typically contains millions
of nodes and billions of edges.
For example, the Twitter
followee-follower network contains 175 million active users
and around twenty billion edges in 2012 . Most existing graph embedding algorithms do not scale for networks
of this size. For example, the time complexity of classical
graph embedding algorithms such as MDS , IsoMap ,
Laplacian eigenmap are at least quadratic to the number
of vertices, which is too expensive for networks with millions of nodes. Although a few very recent studies approach
the embedding of large-scale networks, these methods either
use an indirect approach that is not designed for networks
(e.g., ) or lack a clear objective function tailored for network embedding (e.g., ). We anticipate that a new model
with a carefully designed objective function that preserves
properties of the graph and an eﬃcient optimization technique should eﬀectively ﬁnd the embedding of millions of
In this paper, we propose such a network embedding model
called the “LINE,” which is able to scale to very large, arbitrary types of networks: undirected, directed and/or weighted.
The model optimizes an objective which preserves both the
local and global network structures.
Naturally, the local
structures are represented by the observed links in the networks, which capture the ﬁrst-order proximity between the
vertices. Most existing graph embedding algorithms are designed to preserve this ﬁrst-order proximity, e.g., IsoMap 
and Laplacian eigenmap , even if they do not scale. We
observe that in a real-world network many (if not the majority of) legitimate links are actually not observed. In other
 
Figure 1: A toy example of information network. Edges can
be undirected, directed, and/or weighted. Vertex 6 and 7
should be placed closely in the low-dimensional space as they
are connected through a strong tie. Vertex 5 and 6 should
also be placed closely as they share similar neighbors.
words, the observed ﬁrst-order proximity in the real world
data is not suﬃcient for preserving the global network structures. As a complement, we explore the second-order proximity between the vertices, which is not determined through
the observed tie strength but through the shared neighborhood structures of the vertices. The general notion of the
second-order proximity can be interpreted as nodes with
shared neighbors being likely to be similar. Such an intuition can be found in the theories of sociology and linguistics.
For example, “the degree of overlap of two people’s friendship networks correlates with the strength of ties between
them,” in a social network ; and “You shall know a word
by the company it keeps” in text corpora . Indeed, people who share many common friends
are likely to share the same interest and become friends, and
words that are used together with many similar words are
likely to have similar meanings.
Fig. 1 presents an illustrative example. As the weight of
the edge between vertex 6 and 7 is large, i.e., 6 and 7 have a
high ﬁrst-order proximity, they should be represented closely
to each other in the embedded space. On the other hand,
though there is no link between vertex 5 and 6, they share
many common neighbors, i.e., they have a high second-order
proximity and therefore should also be represented closely to
each other. We expect that the consideration of the secondorder proximity eﬀectively complements the sparsity of the
ﬁrst-order proximity and better preserves the global structure of the network.
In this paper, we will present carefully designed objectives that preserve the ﬁrst-order and
the second-order proximities.
Even if a sound objective is found, optimizing it for a very
large network is challenging.
One approach that attracts
attention in recent years is using the stochastic gradient descent for the optimization. However, we show that directly
deploying the stochastic gradient descent is problematic for
real world information networks. This is because in many
networks, edges are weighted and the weights usually present
a high variance. Consider a word co-occurrence network, in
which the weights (co-occurrences) of word pairs may range
from one to hundreds of thousands. These weights of the
edges will be multiplied into the gradients, resulting in the
explosion of the gradients and thus compromise the performance. To address this, we propose a novel edge-sampling
method, which improves both the eﬀectiveness and eﬃciency
of the inference. We sample the edges with the probabilities
proportional to their weights, and then treat the sampled
edges as binary edges for model updating. With this sampling process, the objective function remains the same and
the weights of the edges no longer aﬀect the gradients.
The LINE is very general, which works well for directed
or undirected, weighted or unweighted graphs. We evaluate the performance of the LINE with various real-world
information networks, including language networks, social
networks, and citation networks.
The eﬀectiveness of the
learned embeddings is evaluated within multiple data mining tasks, including word analogy, text classiﬁcation, and
node classiﬁcation. The results suggest that the LINE model
outperforms other competitive baselines in terms of both effectiveness and eﬃciency. It is able to learn the embedding
of a network with millions of nodes and billions of edges in
a few hours on a single machine.
To summarize, we make the following contributions:
• We propose a novel network embedding model called
the “LINE,” which suits arbitrary types of information
networks and easily scales to millions of nodes. It has
a carefully designed objective function that preserves
both the ﬁrst-order and second-order proximities.
• We propose an edge-sampling algorithm for optimizing
the objective. The algorithm tackles the limitation of
the classical stochastic gradient decent and improves
the eﬀectiveness and eﬃciency of the inference.
• We conduct extensive experiments on real-world information networks. Experimental results prove the effectiveness and eﬃciency of the proposed LINE model.
Organization.
The rest of this paper is organized as
follows. Section 2 summarizes the related work. Section 3
formally deﬁnes the problem of large-scale information network embedding. Section 4 introduces the LINE model in
details. Section 5 presents the experimental results. Finally
we conclude in Section 6.
RELATED WORK
Our work is related to classical methods of graph embedding or dimension reduction in general, such as multidimensional scaling (MDS) , IsoMap , LLE and
Laplacian Eigenmap .
These approaches typically ﬁrst
construct the aﬃnity graph using the feature vectors of the
data points, e.g., the K-nearest neighbor graph of data, and
then embed the aﬃnity graph into a low dimensional
space. However, these algorithms usually rely on solving the
leading eigenvectors of the aﬃnity matrices, the complexity
of which is at least quadratic to the number of nodes, making
them ineﬃcient to handle large-scale networks.
Among the most recent literature is a technique called
graph factorization . It ﬁnds the low-dimensional embedding of a large graph through matrix factorization, which is
optimized using stochastic gradient descent. This is possible because a graph can be represented as an aﬃnity matrix. However, the objective of matrix factorization is not
designed for networks, therefore does not necessarily preserve the global network structure. Intuitively, graph factorization expects nodes with higher ﬁrst-order proximity
are represented closely. Instead, the LINE model uses an
objective that is particularly designed for networks, which
preserves both the ﬁrst-order and the second-order proximities.
Practically, the graph factorization method only
applies to undirected graphs while the proposed model is
applicable for both undirected and directed graphs.
The most recent work related with ours is DeepWalk ,
which deploys a truncated random walk for social network
embedding. Although empirically eﬀective, the DeepWalk
does not provide a clear objective that articulates what network properties are preserved.
Intuitively, DeepWalk expects nodes with higher second-order proximity yield similar
low-dimensional representations, while the LINE preserves
both ﬁrst-order and second-order proximities.
uses random walks to expand the neighborhood of a vertex,
which is analogical to a depth-ﬁrst search. We use a breadth-
ﬁrst search strategy, which is a more reasonable approach to
the second-order proximity. Practically, DeepWalk only applies to unweighted networks, while our model is applicable
for networks with both weighted and unweighted edges.
In Section 5, we empirically compare the proposed model
with these methods using various real world networks.
PROBLEM DEFINITION
We formally deﬁne the problem of large-scale information
network embedding using ﬁrst-order and second-order proximities. We ﬁrst deﬁne an information network as follows:
Definition 1. (Information Network) An information network is deﬁned as G = (V, E), where V is the set
of vertices, each representing a data object and E is the
set of edges between the vertices, each representing a relationship between two data objects. Each edge e ∈E is
an ordered pair e = (u, v) and is associated with a weight
wuv > 0, which indicates the strength of the relation. If G
is undirected, we have (u, v) ≡(v, u) and wuv ≡wvu; if G
is directed, we have (u, v) ̸≡(v, u) and wuv ̸≡wvu.
In practice, information networks can be either directed
(e.g., citation networks) or undirected (e.g., social network
of users in Facebook). The weights of the edges can be either
binary or take any real value. Note that while negative edge
weights are possible, in this study we only consider nonnegative weights.
For example, in citation networks and
social networks, wuv takes binary values; in co-occurrence
networks between diﬀerent objects, wuv can take any nonnegative value. The weights of the edges in some networks
may diverge as some objects co-occur many times while others may just co-occur a few times.
Embedding an information network into a low-dimensional
space is useful in a variety of applications. To conduct the
embedding, the network structures must be preserved. The
ﬁrst intuition is that the local network structure, i.e., the
local pairwise proximity between the vertices, must be preserved. We deﬁne the local network structures as the ﬁrstorder proximity between the vertices:
Definition 2. (First-order Proximity) The ﬁrst-order
proximity in a network is the local pairwise proximity between two vertices. For each pair of vertices linked by an
edge (u, v), the weight on that edge, wuv, indicates the ﬁrstorder proximity between u and v.
If no edge is observed
between u and v, their ﬁrst-order proximity is 0.
The ﬁrst-order proximity usually implies the similarity of
two nodes in a real-world network. For example, people who
are friends with each other in a social network tend to share
similar interests; pages linking to each other in World Wide
Web tend to talk about similar topics. Because of this importance, many existing graph embedding algorithms such
as IsoMap, LLE, Laplacian eigenmap, and graph factorization have the objective to preserve the ﬁrst-order proximity.
However, in a real world information network, the links
observed are only a small proportion, with many others
missing . A pair of nodes on a missing link has a zero
ﬁrst-order proximity, even though they are intrinsically very
similar to each other. Therefore, ﬁrst-order proximity alone
is not suﬃcient for preserving the network structures, and
it is important to seek an alternative notion of proximity
that addresses the problem of sparsity. A natural intuition
is that vertices that share similar neighbors tend to be similar to each other. For example, in social networks, people
who share similar friends tend to have similar interests and
thus become friends; in word co-occurrence networks, words
that always co-occur with the same set of words tend to
have similar meanings. We therefore deﬁne the second-order
proximity, which complements the ﬁrst-order proximity and
preserves the network structure.
Definition 3. (Second-order Proximity) The secondorder proximity between a pair of vertices (u, v) in a network is the similarity between their neighborhood network
structures. Mathematically, let pu = (wu,1, . . . , wu,|V |) denote the ﬁrst-order proximity of u with all the other vertices,
then the second-order proximity between u and v is determined by the similarity between pu and pv. If no vertex is
linked from/to both u and v, the second-order proximity
between u and v is 0.
We investigate both ﬁrst-order and second-order proximity for network embedding, which is deﬁned as follows.
Definition 4. (Large-scale Information Network Embedding)
Given a large network G = (V, E), the problem
of Large-scale Information Network Embedding aims
to represent each vertex v ∈V into a low-dimensional space
Rd, i.e., learning a function fG : V →Rd, where d ≪|V |.
In the space Rd, both the ﬁrst-order proximity and the
second-order proximity between the vertices are preserved.
Next, we introduce a large-scale network embedding model
that preserves both ﬁrst- and second-order proximities.
LINE: LARGE-SCALE INFORMATION
NETWORK EMBEDDING
A desirable embedding model for real world information
networks must satisfy several requirements: ﬁrst, it must
be able to preserve both the ﬁrst-order proximity and the
second-order proximity between the vertices; second, it must
scale for very large networks, say millions of vertices and billions of edges; third, it can deal with networks with arbitrary
types of edges: directed, undirected and/or weighted. In this
section, we present a novel network embedding model called
the “LINE,” which satisﬁes all the three requirements.
Model Description
We describe the LINE model to preserve the ﬁrst-order
proximity and second-order proximity separately, and then
introduce a simple way to combine the two proximity.
LINE with First-order Proximity
The ﬁrst-order proximity refers to the local pairwise proximity between the vertices in the network.
To model the
ﬁrst-order proximity, for each undirected edge (i, j), we de-
ﬁne the joint probability between vertex vi and vj as follows:
p1(vi, vj) =
1 + exp(−⃗uT
where ⃗ui ∈Rd is the low-dimensional vector representation
of vertex vi. Eqn. (1) deﬁnes a distribution p(·, ·) over the
space V × V , and its empirical probability can be deﬁned
as ˆp1(i, j) =
W , where W = P
(i,j)∈E wij. To preserve the
ﬁrst-order proximity, a straightforward way is to minimize
the following objective function:
O1 = d(ˆp1(·, ·), p1(·, ·)),
where d(·, ·) is the distance between two distributions. We
choose to minimize the KL-divergence of two probability distributions. Replacing d(·, ·) with KL-divergence and omitting some constants, we have:
wij log p1(vi, vj),
Note that the ﬁrst-order proximity is only applicable for
undirected graphs, not for directed graphs. By ﬁnding the
{⃗ui}i=1..|V | that minimize the objective in Eqn. (3), we can
represent every vertex in the d-dimensional space.
LINE with Second-order Proximity
The second-order proximity is applicable for both directed
and undirected graphs.
Given a network, without loss of
generality, we assume it is directed (an undirected edge can
be considered as two directed edges with opposite directions
and equal weights).
The second-order proximity assumes
that vertices sharing many connections to other vertices are
similar to each other. In this case, each vertex is also treated
as a speciﬁc “context” and vertices with similar distributions
over the “contexts” are assumed to be similar. Therefore,
each vertex plays two roles: the vertex itself and a speciﬁc
“context” of other vertices. We introduce two vectors ⃗ui and
i, where ⃗ui is the representation of vi when it is treated
as a vertex while ⃗u′
i is the representation of vi when it is
treated as a speciﬁc “context”. For each directed edge (i, j),
we ﬁrst deﬁne the probability of “context” vj generated by
vertex vi as:
p2(vj|vi) =
k=1 exp(⃗u′T
where |V | is the number of vertices or “contexts.” For each
vertex vi, Eqn. (4) actually deﬁnes a conditional distribution
p2(·|vi) over the contexts, i.e., the entire set of vertices in the
network. As mentioned above, the second-order proximity
assumes that vertices with similar distributions over the contexts are similar to each other. To preserve the second-order
proximity, we should make the conditional distribution of
the contexts p2(·|vi) speciﬁed by the low-dimensional representation be close to the empirical distribution ˆp2(·|vi).
Therefore, we minimize the following objective function:
λid(ˆp2(·|vi), p2(·|vi)),
where d(·, ·) is the distance between two distributions. As
the importance of the vertices in the network may be diﬀerent, we introduce λi in the objective function to represent
the prestige of vertex i in the network, which can be measured by the degree or estimated through algorithms such as
PageRank . The empirical distribution ˆp2(·|vi) is deﬁned
as ˆp2(vj|vi) =
di , where wij is the weight of the edge (i, j)
and di is the out-degree of vertex i, i.e. di = P
k∈N(i) wik,
where N(i) is the set of out-neighbors of vi. In this paper,
for simplicity we set λi as the degree of vertex i, i.e., λi = di,
and here we also adopt KL-divergence as the distance function. Replacing d(·, ·) with KL-divergence, setting λi = di
and omitting some constants, we have:
wij log p2(vj|vi).
By learning {⃗ui}i=1..|V | and {⃗u′
i}i=1..|V | that minimize
this objective, we are able to represent every vertex vi with
a d-dimensional vector ⃗ui.
Combining ﬁrst-order and second-order proximities
To embed the networks by preserving both the ﬁrst-order
and second-order proximity, a simple and eﬀective way we
ﬁnd in practice is to train the LINE model which preserves
the ﬁrst-order proximity and second-order proximity separately and then concatenate the embeddings trained by the
two methods for each vertex.
A more principled way to
combine the two proximity is to jointly train the objective
function (3) and (6), which we leave as future work.
Model Optimization
Optimizing objective (6) is computationally expensive,
which requires the summation over the entire set of vertices when calculating the conditional probability p2(·|vi).
To address this problem, we adopt the approach of negative
sampling proposed in , which samples multiple negative
edges according to some noisy distribution for each edge
(i, j). More speciﬁcally, it speciﬁes the following objective
function for each edge (i, j):
T · ⃗ui) +
Evn∼Pn(v)[log σ(−⃗u′
T · ⃗ui)],
where σ(x) = 1/(1 + exp(−x)) is the sigmoid function. The
ﬁrst term models the observed edges, the second term models the negative edges drawn from the noise distribution and
K is the number of negative edges. We set Pn(v) ∝dv
as proposed in , where dv is the out-degree of vertex v.
For the objective function (3), there exists a trivial solution: uik = ∞, for i=1, . . . , |V | and k = 1, . . . , d. To avoid
the trivial solution, we can still utilize the negative sampling
approach (7) by just changing ⃗u′T
We adopt the asynchronous stochastic gradient algorithm
(ASGD) for optimizing Eqn. (7).
In each step, the
ASGD algorithm samples a mini-batch of edges and then
updates the model parameters. If an edge (i, j) is sampled,
the gradient w.r.t. the embedding vector ⃗ui of vertex i will
be calculated as:
∂⃗ui = wij · ∂log p2(vj|vi)
Note that the gradient will be multiplied by the weight of
the edge. This will become problematic when the weights
of edges have a high variance. For example, in a word cooccurrence network, some words co-occur many times (e.g.,
tens of thousands) while some words co-occur only a few
times. In such networks, the scales of the gradients diverge
and it is very hard to ﬁnd a good learning rate. If we select a
large learning rate according to the edges with small weights,
the gradients on edges with large weights will explode while
the gradients will become too small if we select the learning
rate according to the edges with large weights.
Optimization via Edge Sampling
The intuition in solving the above problem is that if the
weights of all the edges are equal (e.g., network with binary
edges), then there will be no problem of choosing an appropriate learning rate. A simple treatment is thus to unfold
a weighted edge into multiple binary edges, e.g., an edge
with weight w is unfolded into w binary edges. This will
solve the problem but will signiﬁcantly increase the memory
requirement, especially when the weights of the edges are
very large. To resolve this, one can sample from the original edges and treat the sampled edges as binary edges, with
the sampling probabilities proportional to the original edge
weights. With this edge-sampling treatment, the overall objective function remains the same. The problem boils down
to how to sample the edges according to their weights.
Let W = (w1, w2, . . . , w|E|) denote the sequence of the
weights of the edges. One can simply calculate the sum of
the weights wsum = P|E|
i=1 wi ﬁrst, and then to sample a
random value within the range of [0, wsum] to see which interval [Pi−1
j=0 wj, Pi
j=0 wj) the random value falls into. This
approach takes O(|E|) time to draw a sample, which is costly
when the number of edges |E| is large. We use the alias table
method to draw a sample according to the weights of the
edges, which takes only O(1) time when repeatedly drawing
samples from the same discrete distribution.
Sampling an edge from the alias table takes constant time,
O(1), and optimization with negative sampling takes O(d(K+
1)) time, where K is the number of negative samples. Therefore, overall each step takes O(dK) time. In practice, we
ﬁnd that the number of steps used for optimization is usually proportional to the number of edges O(|E|). Therefore,
the overall time complexity of the LINE is O(dK|E|), which
is linear to the number of edges |E|, and does not depend
on the number of vertices |V |. The edge sampling treatment
improves the eﬀectiveness of the stochastic gradient descent
without compromising the eﬃciency.
Discussion
We discuss several practical issues of the LINE model.
Low degree vertices. One practical issue is how to accurately embed vertices with small degrees. As the number
of neighbors of such a node is very small, it is very hard
to accurately infer its representation, especially with the
second-order proximity based methods which heavily rely
on the number of “contexts.” An intuitive solution to this is
expanding the neighbors of those vertices by adding higher
order neighbors, such as neighbors of neighbors. In this paper, we only consider adding second-order neighbors, i.e.,
neighbors of neighbors, to each vertex. The weight between
vertex i and its second-order neighbor j is measured as
In practice, one can only add a subset of vertices {j} which
have the largest proximity wij with the low degree vertex i.
New vertices. Another practical issue is how to ﬁnd the
representation of newly arrived vertices. For a new vertex i,
if its connections to the existing vertices are known, we can
obtain the empirical distribution ˆp1(·, vi) and ˆp2(·|vi) over
existing vertices. To obtain the embedding of the new vertex, according to the objective function Eqn. (3) or Eqn. (6),
a straightforward way is to minimize either one of the following objective functions
wji log p1(vj, vi), or −
wji log p2(vj|vi), (10)
by updating the embedding of the new vertex and keeping
the embeddings of existing vertices. If no connections between the new vertex and existing vertices are observed, we
must resort to other information, such as the textual information of the vertices, and we leave it as our future work.
EXPERIMENTS
We empirically evaluated the eﬀectiveness and eﬃciency
of the LINE. We applied the method to several large-scale
real-world networks of diﬀerent types, including a language
network, two social networks, and two citation networks.
Experiment Setup
Data Sets.
(1) Language network.
We constructed a word cooccurrence network from the entire set of English Wikipedia
pages. Words within every 5-word sliding window are considered to be co-occurring with each other.
Words with
frequency smaller than 5 are ﬁltered out. (2) Social networks. We use two social networks: Flickr and Youtube2.
The Flickr network is denser than the Youtube network
(the same network as used in DeepWalk ). (3) Citation
Networks. Two types of citation networks are used: an author citation network and a paper citation network. We use
the DBLP data set 3 to construct the citation networks
between authors and between papers. The author citation
network records the number of papers written by one author
and cited by another author. The detailed statistics of these
networks are summarized into Table 1.
They represent a
variety of information networks: directed and undirected,
binary and weighted. Each network contains at least half a
million nodes and millions of edges, with the largest network
containing around two million nodes and a billion edges.
Compared Algorithms.
We compare the LINE model with several existing graph
embedding methods that are able to scale up to very large
We do not compare with some classical graph
embedding algorithms such as MDS, IsoMap, and Laplacian
eigenmap, as they cannot handle networks of this scale.
• Graph factorization (GF) . We compare with the
matrix factorization techniques for graph factorization.
An information network can be represented as an aﬃnity matrix, and is able to represent each vertex with a
2Available
 
data-imc2007.html
3Available at 
Table 1: Statistics of the real-world information networks.
Language Network
Social Network
Citation Network
DBLP(AuthorCitation)
DBLP(PaperCitation)
undirected,weighted
undirected,binary
undirected,binary
dircted,weighted
directed,binary
1,000,924,086
22,613,981
20,580,238
Avg. degree
low-dimensional vector through matrix factorization.
Graph factorization is optimized through stochastic
gradient descent and is able to handle large networks.
It only applies to undirected networks.
• DeepWalk .
DeepWalk is an approach recently
proposed for social network embedding, which is only
applicable for networks with binary edges. For each
vertex, truncated random walks starting from the vertex are used to obtain the contextual information, and
therefore only second-order proximity is utilized.
• LINE-SGD. This is the LINE model introduced in Section 4.1 that optimizes the objective Eqn. (3) or Eqn. (6)
directly with stochastic gradient descent.
approach, the weights of the edges are directly multiplied into the gradients when the edges are sampled
for model updating. There are two variants of this approach: LINE-SGD(1st) and LINE-SGD(2nd), which
use ﬁrst- and second-order proximity respectively.
• LINE. This is the LINE model optimized through the
edge-sampling treatment introduced in Section 4.2. In
each stochastic gradient step, an edge is sampled with
the probability proportional to its weight and then
treated as binary for model updating. There are also
two variants:
LINE(1st) and LINE(2nd).
graph factorization, both LINE(1st) and LINE-SGD(1st)
only apply to undirected graphs. LINE(2nd) and LINE-
SGD(2nd) apply to both undirected and directed graphs.
• LINE (1st+2nd): To utilize both ﬁrst-order and secondorder proximity, a simple and eﬀective way is to concatenate the vector representations learned by LINE(1st)
and LINE(2nd) into a longer vector. After concatenation, the dimensions should be re-weighted to balance the two representations. In a supervised learning
task, the weighting of dimensions can be automatically
found based on the training data. In an unsupervised
task, however, it is more diﬃcult to set the weights.
Therefore we only apply LINE (1st+2nd) to the scenario of supervised tasks.
Parameter Settings.
The mini-batch size of the stochastic gradient descent is
set as 1 for all the methods. Similar to , the learning rate
is set with the starting value ρ0 = 0.025 and ρt = ρ0(1−t/T),
where T is the total number of mini-batches or edge samples.
For fair comparisons, the dimensionality of the embeddings
of the language network is set to 200, as used in word embedding . For other networks, the dimension is set as
128 by default, as used in . Other default settings include: the number of negative samples K = 5 for LINE and
LINE-SGD; the total number of samples T = 10 billion for
LINE(1st) and LINE(2nd), T = 20 billion for GF; window
size win = 10, walk length t = 40, walks per vertex γ = 40
for DeepWalk. All the embedding vectors are ﬁnally normalized by setting ||⃗w||2 = 1.
Quantitative Results
Language Network
We start with the results on the language network, which
contains two million nodes and a billion edges. Two applications are used to evaluate the eﬀectiveness of the learned
embeddings: word analogy and document classiﬁcation.
Table 2: Results of word analogy on Wikipedia data.
Semantic (%)
Syntactic (%)
Overall (%)
Running time
LINE-SGD(1st)
LINE-SGD(2nd)
Word Analogy.
This task is introduced by Mikolov et
al. . Given a word pair (a, b) and a word c, the task aims
to ﬁnd a word d, such that the relation between c and d is
similar to the relation between a and b, or denoted as: a :
b →c :?. For instance, given a word pair (“China”,“Beijing”)
and a word “France,” the right answer should be “Paris”
because “Beijing” is the capital of “China” just as “Paris” is
the capital of “France.” Given the word embeddings, this
task is solved by ﬁnding the word d∗whose embedding is
closest to the vector ⃗ub−⃗ua+⃗uc in terms of cosine proximity,
i.e., d∗= argmaxd cos((⃗ub −⃗ua +⃗uc), ⃗ud). Two categories of
word analogy are used in this task: semantic and syntactic.
Table 2 reports the results of word analogy using the embeddings of words learned on the Wikipedia corpora (Skip-
Gram) or the Wikipedia word network (all other methods). For graph factorization, the weight between each pair
of words is deﬁned as the logarithm of the number of cooccurrences, which leads to better performance than the
original value of co-occurrences.
For DeepWalk, diﬀerent
cutoﬀthresholds are tried to convert the language network
into a binary network, and the best performance is achieved
when all the edges are kept in the network. We also compare with the state-of-the-art word embedding model Skip-
Gram , which learns the word embeddings directly from
the original Wikipedia pages and is also implicitly a matrix
factorization approach . The window size is set as 5, the
same as used for constructing the language network.
We can see that LINE(2nd) outperforms all other methods, including the graph embedding methods and the Skip-
Gram. This indicates that the second-order proximity bet-
Table 3: Results of Wikipedia page classiﬁcation on Wikipedia data set.
LINE-SGD(1st)
LINE-SGD(2nd)
LINE(1st+2nd)
LINE-SGD(1st)
LINE-SGD(2nd)
LINE(1st+2nd)
Signiﬁcantly outperforms GF at the: ** 0.01 and * 0.05 level, paired t-test.
ter captures the word semantics compared to the ﬁrst-order
proximity.
This is not surprising, as a high second-order
proximity implies that two words can be replaced in the
same context, which is a stronger indicator of similar semantics than ﬁrst-order co-occurrences. It is intriguing that
the LINE(2nd) outperforms the state-of-the-art word embedding model trained on the original corpus. The reason
may be that a language network better captures the global
structure of word co-occurrences than the original word sequences. Among other methods, both graph factorization
and LINE(1st) signiﬁcantly outperform DeepWalk even if
DeepWalk explores second-order proximity. This is because
DeepWalk has to ignore the weights (i.e., co-occurrences) of
the edges, which is very important in a language network.
The performance by the LINE models directly optimized
with SGD is much worse, because the weights of the edges
in the language network diverge, which range from a single
digit to tens of thousands, making the learning process suffer. The LINE optimized by the edge-sampling treatment
eﬀectively addresses this problem, and performs very well
using either ﬁrst-order or second-order proximity.
All the models are run on a single machine with 1T memory, 40 CPU cores at 2.0GHZ using 16 threads. Both the
LINE(1st) and LINE(2nd) are quite eﬃcient, which take
less than 3 hours to process such a network with 2 million
nodes and a billion edges. Both are at least 10% faster than
graph factorization, and much more eﬃcient than DeepWalk
(ﬁve times slower). The reason that LINE-SGDs are slightly
slower is that a threshold-cutting technique has to be applied
to prevent the gradients from exploding.
Document Classiﬁcation. Another way to evaluate the
quality of the word embeddings is to use the word vectors to
compute document representation, which can be evaluated
with document classiﬁcation tasks. To obtain document vectors, we choose a very simple approach, taking the average
of the word vector representations in that document. This is
because we aim to compare the word embeddings with diﬀerent approaches instead of ﬁnding the best method for document embeddings. The readers can ﬁnd advanced document
embedding approaches in . We download the abstracts
of Wikipedia pages from 
3.9/en/long_abstracts_en.nq.bz2 and the categories of
these pages from 
article_categories_en.nq.bz2. We choose 7 diverse categories for classiﬁcation including“Arts,”“History,”“Human,”
“Mathematics,” “Nature,” “Technology,” and “Sports.” For
each category, we randomly select 10,000 articles, and articles belonging to multiple categories are discarded.
randomly sample diﬀerent percentages of the labeled documents for training and use the rest for evaluation.
document vectors are used to train a one-vs-rest logistic regression classiﬁer using the LibLinear package4. We report
the classiﬁcation metrics Micro-F1 and Macro-F1 . The
results are averaged over 10 diﬀerent runs by sampling different training data.
Table 3 reports the results of Wikipedia page classiﬁcation. Similar conclusion can be made as in the word analogy task. The graph factorization outperforms DeepWalk
as DeepWalk ignores the weights of the edges. The LINE-
SGDs perform worse due to the divergence of the weights of
the edges. The LINE optimized by the edge-sampling treatment performs much better than directly deploying SGD.
The LINE(2nd) outperforms LINE(1st) and is slightly better than the graph factorization.
Note that with the supervised task, it is feasible to concatenate the embeddings
learned with LINE(1st) and LINE(2nd).
As a result, the
LINE(1st+2nd) method performs signiﬁcantly better than
all other methods. This indicates that the ﬁrst-order and
second-order proximities are complementary to each other.
To provide the readers more insight about the ﬁrst-order
and second-order proximities, Table 4 compares the most
similar words to a given word using ﬁrst-order and secondorder proximity. We can see that by using the contextual
proximity, the most similar words returned by the secondorder proximity are all semantically related words.
most similar words returned by the ﬁrst-order proximity are
a mixture of syntactically and semantically related words.
Table 4: Comparison of most similar words using 1st-order
and 2nd-order proximity.
Similarity
Top similar words
luck bad faith assume nice
decent bad excellent lousy reasonable
information
provide provides detailed facts veriﬁable
infomation informaiton informations nonspammy animecons
graphs algebraic ﬁnite symmetric topology
graphs subgraph matroid hypergraph undirected
teach learned inform educate how
learned teach relearn learnt understand
Social Network
Compared with the language networks, the social networks are much sparser, especially the Youtube network.
We evaluate the vertex embeddings through a multi-label
4 
Table 5: Results of multi-label classiﬁcation on the Flickr network.
DeepWalk(256dim)
LINE(1st+2nd)
DeepWalk(256dim)
LINE(1st+2nd)
Signiﬁcantly outperforms DeepWalk at the: ** 0.01 and * 0.05 level, paired t-test.
classiﬁcation task that assigns every node into one or more
communities. Diﬀerent percentages of the vertices are randomly sampled for training and the rest are used for evaluation. The results are averaged over 10 diﬀerent runs.
Flickr Network. Let us ﬁrst take a look at the results on
the Flickr network. We choose the most popular 5 communities as the categories of the vertices for multi-label classiﬁcation. Table 5 reports the results. Again, LINE(1st+2nd)
signiﬁcantly outperforms all other methods. LINE(1st) is
slightly better than LINE(2nd), which is opposite to the results on the language network. The reasons are two fold: (1)
ﬁrst-order proximity is still more important than secondorder proximity in social network, which indicates strong
ties; (2) when the network is too sparse and the average
number of neighbors of a node is too small, the second-order
proximity may become inaccurate. We will further investigate this issue in Section 5.4. LINE(1st) outperforms graph
factorization, indicating a better capability of modeling the
ﬁrst-order proximity.
LINE(2nd) outperforms DeepWalk,
indicating a better capability of modeling the second-order
proximity.
By concatenating the representations learned
by LINE(1st) and LINE(2nd), the performance further improves, conﬁrming that the two proximities are complementary to each other.
Youtube Network. Table 6 reports the results on Youtube
network, which is extremely sparse and the average degree
is as low as 5.
In most cases with diﬀerent percentages
of training data, LINE(1st) outperforms LINE(2nd), consistent with the results on the Flickr network. Due to the
extreme sparsity, the performance of LINE(2nd) is even inferior to DeepWalk. By combining the representations learned
by the LINE with both the ﬁrst- and second-order proximity, the performance of LINE outperforms DeepWalk with
either 128 or 256 dimension, showing that the two proximities are complementary to each other and able to address
the problem of network sparsity.
It is interesting to observe how DeepWalk tackles the network sparsity through truncated random walks, which enrich the neighbors or contexts of each vertex. The random
walk approach acts like a depth-ﬁrst search. Such an approach may quickly alleviate the sparsity of the neighborhood of nodes by bringing in indirect neighbors, but it may
also introduce nodes that are long range away. A more reasonable way is to expand the neighborhood of each vertex
using a breadth-ﬁrst search strategy, i.e., recursively adding
neighbors of neighbors. To verify this, we expand the neighborhood of the vertices whose degree are less than 1,000
by adding the neighbors of neighbors until the size of the
extended neighborhood reaches 1,000 nodes. We ﬁnd that
adding more than 1,000 vertices does not further increase
the performance.
The results in the brackets in Table 6 are obtained on this
reconstructed network. The performance of GF, LINE(1st)
and LINE(2nd) all improves, especially LINE(2nd). In the
reconstructed network, the LINE(2nd) outperforms Deep-
Walk in most cases. We can also see that the performance
of LINE(1st+2nd) on the reconstructed network does not
improve too much compared with those on the original network. This implies that the combination of ﬁrst-order and
second-order proximity on the original network has already
captured most information and LINE(1st+2nd) approach is
a quite eﬀective and eﬃcient way for network embedding,
suitable for both dense and sparse networks.
Citation Network
We present the results on two citation networks, both of
which are directed networks. Both the GF and LINE methods, which use ﬁrst-order proximity, are not applicable for
directed networks, and hence we only compare DeepWalk
and LINE(2nd). We also evaluate the vertex embeddings
through a multi-label classiﬁcation task. We choose 7 popular conferences including AAAI, CIKM, ICML, KDD, NIPS,
SIGIR, and WWW as the classiﬁcation categories. Authors
publishing in the conferences or papers published in the conferences are assumed to belong to the categories corresponding to the conferences.
DBLP(AuthorCitation) Network. Table 7 reports the
results on the DBLP(AuthorCitation) network. As this
network is also very sparse, DeepWalk outperforms LINE(2nd).
However, by reconstructing the network through recursively
adding neighbors of neighbors for vertices with small degrees
(smaller than 500), the performance of LINE(2nd) significantly increases and outperforms DeepWalk.
model directly optimized by stochastic gradient descent,
LINE(2nd), does not perform well as expected.
DBLP(PaperCitation) Network. Table 8 reports the results on the DBLP(PaperCitation) network. The LINE(2nd)
signiﬁcantly outperforms DeepWalk.
This is because the
random walk on the paper citation network can only reach
papers along the citing path (i.e., older papers) and cannot
reach other references. Instead, the LINE(2nd) represents
each paper with its references, which is obviously more reasonable. The performance of LINE(2nd) is further improved
when the network is reconstructed by enriching the neighbors of vertices with small degrees (smaller than 200).
Network Layouts
An important application of network embedding is to create meaningful visualizations that layout a network on a
Table 6: Results of multi-label classiﬁcation on the Youtube network. The results in the brackets are on the reconstructed
network, which adds second-order neighbors (i.e., neighbors of neighbors) as neighbors for vertices with a low degree.
DeepWalk(256dim)
LINE(1st+2nd)
DeepWalk (256dim)
LINE(1st+2nd)
Signiﬁcantly outperforms DeepWalk at the: ** 0.01 and * 0.05 level, paired t-test.
Table 7: Results of multi-label classiﬁcation on DBLP(AuthorCitation) network.
LINE-SGD(2nd)
LINE-SGD(2nd)
Signiﬁcantly outperforms DeepWalk at the: ** 0.01 and * 0.05 level, paired t-test.
Table 8: Results of multi-label classiﬁcation on DBLP(PaperCitation) network.
Signiﬁcantly outperforms DeepWalk at the: ** 0.01 and * 0.05 level, paired t-test.
(b) DeepWalk
(c) LINE(2nd)
Figure 2: Visualization of the co-author network. The authors are mapped to the 2-D space using the t-SNE package with
learned embeddings as input. Color of a node indicates the community of the author. Red: “data Mining,” blue: “machine
learning,” green: “computer vision.”
two dimensional space. We visualize a co-author network
extracted from the DBLP data. We select some conferences
from three diﬀerent research ﬁelds: WWW, KDD from“data
mining,” NIPS, ICML from “machine learning,” and CVPR,
ICCV from “computer vision.” The co-author network is
built from the papers published in these conferences. Authors with degree less than 3 are ﬁltered out, and ﬁnally the
network contains 18,561 authors and 207,074 edges. Laying
out this co-author network is very challenging as the three
research ﬁelds are very close to each other. We ﬁrst map the
co-author network into a low-dimensional space with diﬀerent embedding approaches and then further map the lowdimensional vectors of the vertices to a 2-D space with the
t-SNE package . Fig. 2 compares the visualization results
with diﬀerent embedding approaches. The visualization using graph factorization is not very meaningful, in which the
authors belonging to the same communities are not clustered
together. The result of DeepWalk is much better. However,
many authors belonging to diﬀerent communities are clustered tightly into the center area, most of which are high
degree vertices. This is because DeepWalk uses a random
walk based approach to enrich the neighbors of the vertices,
which brings in a lot of noise due to the randomness, especially for vertices with higher degrees.
The LINE(2nd)
performs quite well and generates meaningful layout of the
network (nodes with same colors are distributed closer).
Performance w.r.t. Network Sparsity
# percentage of links (%)
(a) Sparsity.
Degree group
LINE(Original+1st)
LINE(Dense+1st)
LINE(Original+2nd)
LINE(Dense+2nd)
LINE(Dense+1st+2nd)
(b) Degree of vertex.
Figure 3: Performance w.r.t. network sparsity.
In this subsection, we formally analyze the performance
of the above models w.r.t.
the sparsity of networks.
use the social networks as examples.
We ﬁrst investigate
how the sparsity of the networks aﬀects the LINE(1st) and
LINE(2nd). Fig. 3(a) shows the results w.r.t. the percentage
of links on the Flickr network. We choose Flickr network
as it is much denser than the Youtube network. We randomly select diﬀerent percentages of links from the original
network to construct networks with diﬀerent levels of sparsity. We can see that in the beginning, when the network is
very sparse, the LINE(1st) outperforms LINE(2nd). As we
gradually increase the percentage of links, the LINE(2nd)
begins to outperform the LINE(1st). This shows that the
second-order proximity suﬀers when the network is extremely
sparse, and it outperforms ﬁrst-order proximity when there
are suﬃcient nodes in the neighborhood of a node.
Fig. 3(b) shows the performance w.r.t. the degrees of the
vertices on both the original and reconstructed Youtube
networks. We categorize the vertices into diﬀerent groups
according to their degrees including (0, 1], , , ,
 , [31, +∞), and then evaluate the performance of vertices in diﬀerent groups. Overall, the performance of different models increases when the degrees of the vertices increase. In the original network, the LINE(2nd) outperforms
LINE(1st) except for the ﬁrst group, which conﬁrms that the
second-order proximity does not work well for nodes with a
low degree. In the reconstructed dense network, the performance of the LINE(1st) or LINE(2nd) improves, especially
the LINE(2nd) that preserves the second-order proximity.
We can also see that the LINE(2nd) model on the reconstructed network outperforms DeepWalk in all the groups.
Parameter Sensitivity
Next, we investigate the performance w.r.t. the parameter dimension d and the converging performance of diﬀerent
models w.r.t the number of samples on the reconstructed
Youtube network. Fig. 4(a) reports the performance of the
LINE model w.r.t. the dimension d. We can see that the
performance of the LINE(1st) or LINE(2nd) drops when the
dimension becomes too large. Fig. 4(b) shows the results
of the LINE and DeepWalk w.r.t. the number of samples
during the optimization. The LINE(2nd) consistently outperforms LINE(1st) and DeepWalk, and both the LINE(1st)
and LINE(2nd) converge much faster than DeepWalk.
(a) #Dimension.
#samples (*Million)
(b) #Samples.
Figure 4: Sensitivity w.r.t. dimension and samples.
Scalability
Speed up ratio
(a) Speed up v.s. #threads.
(b) Micro-F1 v.s. #threads.
Figure 5: Performance w.r.t. # threads.
Finally, we investigate the scalability of the LINE model
optimized by the edge-sampling treatment and asynchronous
stochastic gradient descent, which deploys multiple threads
for optimization. Fig. 5(a) shows the speed up w.r.t. the
number of threads on the Youtube data set. The speed up
is quite close to linear. Fig. 5(b) shows that the classiﬁcation
performance remains stable when using multiple threads for
model updating.
The two ﬁgures together show that the
inference algorithm of the LINE model is quite scalable.
CONCLUSION
This paper presented a novel network embedding model
called the“LINE,”which can easily scale up to networks with
millions of vertices and billions of edges. It has carefully designed objective functions that preserve both the ﬁrst-order
and second-order proximities, which are complementary to
each other. An eﬃcient and eﬀective edge-sampling method
is proposed for model inference, which solved the limitation
of stochastic gradient descent on weighted edges without
compromising the eﬃciency. Experimental results on various real-world networks prove the eﬃciency and eﬀectiveness
of LINE. In the future, we plan to investigate higher-order
proximity beyond the ﬁrst-order and second-order proximities in the network.
Besides, we also plan to investigate
the embedding of heterogeneous information networks, e.g.,
vertices with multiple types.
Acknowledgments
The authors thank the three anonymous reviewers for the
helpful comments. The co-author Ming Zhang is supported
by the National Natural Science Foundation of China (NSFC
Grant No. 61472006); Qiaozhu Mei is supported by the National Science Foundation under grant numbers IIS-1054199
and CCF-1048168.