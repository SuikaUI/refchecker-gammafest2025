Fast splitting based tag identification algorithm for anti-collision in UHF RFID
Su Jian, Zhengguo Sheng, Liangbo Xie, Gang Li, Alex X Liu
Publication date
09-06-2023
This work is made available under the Copyright not evaluated licence and should only be used in accordance
with that licence. For more information on the specific terms, consult the repository record for this item.
Document Version
Accepted version
Citation for this work (American Psychological Association 7th edition)
Jian, S., Sheng, Z., Xie, L., Li, G., & Liu, A. X. . Fast splitting based tag identification algorithm for anticollision in UHF RFID System (Version 1). University of Sussex.
 
 
IEEE Transactions on Communications
Link to external publisher version
 
Copyright and reuse:
This work was downloaded from Sussex Research Open (SRO). This document is made available in line with publisher policy
and may differ from the published version. Please cite the published version where possible. Copyright and all moral rights to the
version of the paper presented here belong to the individual author(s) and/or other copyright owners unless otherwise stated. For
more information on this work, SRO or to report an issue, you can contact the repository administrators at .
Discover more of the University’s research at 
IEEE TRANSACTIONS ON COMMUNICATIONS
Fast Splitting Based Tag Identiﬁcation Algorithm
For Anti-collision in UHF RFID System
Jian Su, Zhengguo Sheng, Liangbo Xie, and Gang Li
Abstract—Efﬁcient and effective objects identiﬁcation using
Radio Frequency Identiﬁcation (RFID) is always a challenge
in large scale industrial and commercial applications. Among
existing solutions, the tree based splitting scheme has attracted
increasing attention because of its high extendibility and feasibility. However, conventional tree splitting algorithms can only solve
tag collision with counter value equals to zero and usually result
in performance degradation when the number of tags is large.
To overcome such drawbacks, we propose a novel tree-based
method called Fast Splitting Algorithm based on Consecutive
Slot Status detection (FSA-CSS), which includes a fast splitting
(FS) mechanism and a shrink mechanism. Speciﬁcally, the FS
mechanism is used to reduce collisions by increasing commands
when the number of consecutive collision is above a threshold.
Whereas the shrink mechanism is used to reduce extra idle
slots introduced by FS. Simulation results supplemented by
prototyping tests show that the proposed FSA-CSS achieves a
system throughput of 0.41, outperforming the existing UHF RFID
solutions.
Index Terms—RFID, UHF, anti-collision, FS mechanism, system throughput, time efﬁciency.
I. INTRODUCTION
RFID technology has greatly revolutionized tag based applications in retail industry such as warehouse management and
inventory control . A typical RFID system is composed
of a reader and a large number of tags attached to tracked
objects. Each object can be identiﬁed based on query response
from the attached RFID tag. However, in large scale RFID
applications, simultaneous query responses from multiple tags
can cause signiﬁcant tag collisions. Since passive tags are
unable to perceive or identify such collisions, the development
of anti-collision algorithms is of great importance for fast tag
identiﬁcation especially in high-density ultra high frequency
(UHF) RFID environment.
Existing tag anti-collision algorithms can be categorized
into dynamic framed slotted Aloha (DFSA) , query tree
(QT) and binary splitting (BS) based algorithms.
Among them, QT and BS algorithms are operated by recursively dividing responding tags into smaller subsets until each
subset has at most one tag. The distinction between these two
approaches is that, in QT solutions, tags are separated by their
J. Su is with Nanjing University of Information Science and Technology,
Jiangsu 210044, China (e-mail: ).
Z. Sheng (corresponding author) is with the Department of Engineering and Design, University of Sussex, Brighton BN1 9RH, UK (e-mail:
 ).
L. Xie is with Chongqing University of Posts and Telecommunications,
Chongqing 400065, China (e-mail: ).
G. Li is with University of Electronic Science and Technology of China,
Chengdu 611731, China (e-mail: ).
Digital Object Identiﬁer xxxx
IDs. Whereas in BS approaches, tags are divided by binary
random numbers generated in the splitting process. Strictly
speaking, QT methods are derived from the bit tracking
technology which can detect the position of collided bit
by the reader. However, with an increasing number of tags, the
efﬁciency of such methods is deteriorated because of the wide
deviation of backscatter link frequency among tags .
As a contrary, DFSA and BS algorithms are more preferable
for UHF RFID systems. DFSA algorithms usually employ
a frame structure which contains a certain number of time
intervals (called time slots) per frame, and each tag responses
to the reader by randomly choosing a time slot using its
ID. During the identiﬁcation process, the size of frame is
dynamically updated according to the number of unread tags.
When the frame size is equal to the backlog (number of unread
tags), the maximum system throughput can be achieved.
Recent works in DFSA include improved linearized combinatorial model (ILCM) based anti-collision algorithm,
an efﬁcient anti-collision algorithm with early adjustment of
frame length (EAAEA) , and access probability adjustment
based ﬁne-grained Q-algorithm (APAFQ) , etc. However,
those algorithms have failed to prevent collisions completely,
because of the tag starvation problem in which a speciﬁc
tag may not be identiﬁed for a long time . Furthermore,
the performance of DFSA algorithms highly depends on the
initial frame size. When the number of tags is much larger
than the size of frame, most of DFSA solutions are unable to
adjust frame size properly in order to cope with backlog, thus
lead to performance degradation . That is to say, DFSA
solutions are cardinality sensitive and shows inconsistent performance with a wide range of backlog. As a contrary, BS
algorithms are insensitive to tag backlog particularly when the
number of tags is increased, the system throughput is almost
converged to a constant value. Although the BS approach can
tackle tag starvation, it has a relatively long identiﬁcation
latency due to the splitting process starting from a single
set with all tags. Specially, the system throughput of BS
algorithms is about 0.348 when the number of tags is
larger than 100. Most of recent anti-collision algorithms with
high performance are based on the integration of Aloha and
QT (or BS) algorithms . These methods usually need
to estimate cardinality of tag population. Many efforts have
also been made to improve estimation accuracy .
However, constant estimation of number of tages with high
accuracy requires high computation overhead and thus leads
to serious challenges in implementation .
In this paper, we focus on the UHF RFID anti-collision
algorithm and propose a fast splitting algorithm based on
IEEE TRANSACTIONS ON COMMUNICATIONS
consecutive slot status detection (FSA-CSS) to improve the
identiﬁcation and stability performance of BS algorithm. The
proposed solution is based on the pure BS algorithm which
is rarely investigated given concerns of marginal performance
improvement by the existing literature. Different to the existing
solutions in which the average performance is only investigated, i.e., incoming and outgoing tags are allowed to be
identiﬁed multiple times , we focus on a practice-driven
and challenging scenario in which a tag can only be identiﬁed
once and propose to improve individual performance for
identifying a batch of tags. It shows from the results that FSA-
CSS can still maintain high performance in large-scale RFID
systems without estimation of backlog. The contributions of
this paper can be summarized as follows.
1) We propose an enhanced anti-collision algorithm namely
FSA-CSS for passive UHF RFID systems. In order to accelerate the splitting process, the reader allows the tags with
counter value above zero to be split into subsets in advance.
Meanwhile, the reader can avoid over-splitting by using the
shrink mechanism to reduce the extra idle slots.
2) We provide the theoretical analysis and carry out simulations to evaluate the performance of FSA-CSS with a massive
number of tags. The results have been compared with various
legacy anti-collision algorithms. The optimal parameters and
performance boundaries have been derived.
3) We implement FSA-CSS in a practical UHF RFID
system, which includes a passive RFID reader and 20 tags.
The identiﬁcation time of the proposed FSA-CSS is reduced by
32.5% compared to the standard BS used in ISO/IEC 18000-
The rest of this paper is organized as follows. Section
II reviews and analyzes the mainstream tag identiﬁcation
strategies for UHF RFID systems. Section III discusses the
novel anti-collision algorithm FSA-CSS and analyzes its performance. Section IV illustrates the simulation results. The
experimental results are presented in Section V. Finally, the
paper is concluded in Section VI.
II. RELATED WORKS
A. Binary splitting (BS) algorithm
The principle of BS algorithm is to continuously divide
collided tags into smaller subsets by using random binary
numbers. Each tag has an integer counter Tc which is used
to record its position in the splitting process and a random
binary number generator TR. Different values of Tc lead tags
into different subsets. Only tags with Tc = 0 respond to
the reader immediately, while tags with Tc>0 should wait
in the pipeline. At the initial stage of identiﬁcation process,
all tags in reader’s vicinity should respond simultaneously
and thus are formed as one set. Depending on received
responses, the reader will send a feedback, e.g., ID-idle,
ID-collision or ID-success, to all tags for further
actions. When the feedback is ID-success or ID-idle,
all tags act Tc = Tc −1. The tags already identiﬁed by the
reader will be silent during the next identiﬁcation process. If
the feedback is ID-collision, the collided tags will be
divided into two subsets. Tags with Tc = 0 add TR to its Tc,
while tags with Tc>0 increase its Tc by 1.
The reader also uses a counter Rc to terminate the identi-
ﬁcation process. Rc denotes the number of unidentiﬁed tags
and its initial value is 0. When a collision occurs, the reader
performs Rc = Rc + 1, given the number of identiﬁable
tags is increased. Otherwise, Rc is decreased by 1. When
Rc < 0, the identiﬁcation process is ceased. Compared to
Aloha-based algorithms, the BS algorithm is insensitive to tag
cardinality particularly when the number of tags is increased.
The system throughput is almost converged to a constant value.
The work in reveals that the system throughput of BS can
be maintained at 0.348 when the number of tags is above 100.
However, the BS algorithm has a relatively long identiﬁcation
latency because the splitting process is started from a single
set with all tags. Moreover, it always use tag ID to perform
collision arbitration, hence there is signiﬁcant space to further
improve time efﬁciency.
B. DFSA protocol with backlog estimation
In DFSA protocols, time is divided into a series of discrete
intervals called time slots. Several time slots are packaged
into a frame . Each tag can randomly select a slot to
respond to the reader in each identiﬁcation round. At the end
of each frame, the reader counts the number of idle, success,
and collision slots. If collision slots exist, the reader will
estimate the number of unidentiﬁed tags and adjust the frame
length accordingly. The identiﬁcation process continues until
no collision occurs during a frame, i.e., all tags are successfully
identiﬁed.
It is noted that the reader needs to accurately estimate the
backlog to achieve the best performance. To improve estimation accuracy, most previous methods are implemented
with high complexity. However, typical RFID readers are
computation constrained due to the limited processing power
provided by single-chip microprocessor. As a result, estimation
methods with high computation overhead are characterized as
energy inefﬁcient. Recently, many state-of-the-art algorithms
 have been proposed to achieve energy efﬁciency.
However, the system throughput of these solutions is still
below 0.36. In addition, it is worth mentioning that most of
existing DFSA studies are simulation based , thus
the practical performance cannot be veriﬁed.
C. Hybrid protocol combining DFSA with BS
So far it has been shown that the BS performs better when
the number of tags is relatively small . This result has
inspired further studies to design hybrid anti-collision algorithms combining DFSA and BS. The authors in propose
an adaptive binary tree slotted Aloha (ABTSA) algorithm. In
ABTSA, tags are randomly assigned to slots in a frame. If
multiple tags are collided in a slot, collision will be solved
by the BS algorithm while other tags in the following slots
will be in waiting state. The beneﬁt of using ABTSA is
that the adjustment of frame size is simpliﬁed because the
reader has the knowledge of the status in every slot and
thus can obtain an appropriate frame size accordingly. Since
the ABTSA combines both DFSA and BS algorithms, it can
achieve an average system throughput of 0.40, which is higher
IEEE TRANSACTIONS ON COMMUNICATIONS
than that of DFSA or BS algorithm alone. However, it is
with a complex structure, hence much more difﬁcult to be
implemented.
In summary, aforementioned anti-collision algorithms do
provide solutions to solve the tag collision problem, however, with sacriﬁces in identiﬁcation efﬁciency, complexity
and stability, etc. The characteristics of existing anti-collision
algorithms are summarized in Tab. I. In the following, we will
introduce the proposed solution based on the BS algorithm
to improve the identiﬁcation efﬁciency of RFID system and
reduce the implementation cost.
(a) FS with M=2, N=2 (M=N)
(b) FS with M=2, N=3 (M<N)
(c) FS with M=3, N=2 (M>N)
Successful
Solved by the commands from the peer node
(It will not occupy a dedicated time slot during identification)
Depth is defined as the number of braches from that node to the root (top)
Fig. 1. The FS mechanism with different M and N
III. THE PROPOSED FSA-CSS ALGORITHM
A. Fast splitting mechanism
In the fast splitting (FS) mechanism, the counter value Tc
of all tags are initialized to zero. When a collision occurs, the
collided tags (i.e., tags with Tc = 0) perform Tc = Tc + TR,
while the tags with Tc>0 perform Tc = M · Tc + TR. That is,
 Tc + TR,
M · Tc + TR, if Tc > 0 .
where TR ∈{0, 1, · · ·, N −1} denotes a random binary
number generator at an arbitrary time, N determines the
maximum subsets needed. That is to say, the collided tags can
be potentially allocated into N subsets. Tc denotes the value
of counter at an arbitrary time. An integer M>0 is a splitting
coefﬁcient, which denotes the splitting level of collided tags.
The larger the M, the more available subset slots can be
provided during a single splitting process.
In order to illustrate the FS mechanism, we describe a
simple case with ﬁve tags using M = N = 2. Assume the
tags a, b, c, d, e collide in the slot 0, given Tc = 0 is for all
tags, the reader will randomly divide them into two subsets,
e.g., S1 = {a, d, e} with random number 0 and S2 = {b, c}
with random number 1. The FS mechanism will trigger the
reader to split S2 into {b} and {c} in slot 1. According to (1),
no collision will happen between b and c. Meanwhile, tags a,
d, and e will collide again in slot 1 and the FS will continue
to assist the splitting until all collisions are solved. It is noted
that we consider the case where a tag can be identiﬁed only
once, whereas tags are identiﬁed repeatedly can be referred to
 .
By generalizing cases with N>2, we can derive the following result for the splitting coefﬁcient M.
Result 1. The performance of FS mechanism depends on the
choice of M and leads to the following result.
M > N, yield extra idle slots
M = N, no extra idle and collision slots
M < N, yield extra collision slots
Proof: See the Appendix A.
According to the Result 1, M = N is the best choice for FS
mechanism. Examples of four tags using FS mechanism with
different M and N are illustrated in Fig. 1. The depth of a
node is deﬁned as the path length (number of solid branches)
from that node to the root (top) node. As can be seen in Fig.
1 (a), all tags collided in slot 0 are further divided into two
subsets, e.g., S1 = {a, c}, S2 = {b, d}. Since tags in S1 are
continually collided in slot 1, they act Tc = Tc + TR, while
the tags in S2 act Tc = 2 · Tc + TR. After reading in slot
1, all tags are divided into four subsets. Each subset contains
only one tag. In total, the FSA-CCS consumes six slots to
identify four tags by using FS mechanism with M = N = 2.
Fig. 1 (b) shows the example of M<N. In the depth 1, tag
a acts Tc = Tc + TR = 0 + 2 = 2, while tag d also acts
Tc = 2 · Tc + TR = 2 + 0 = 2. As a result, two tags from
different sets generate the same Tc, which results in an extra
collision slot. Similarly as can be observed in Fig. 1 (c), many
idle slots are introduced due to M>N. It thus indicates that
IEEE TRANSACTIONS ON COMMUNICATIONS
THE CHARACTERISTICS OF DIFFERENT ANTI-COLLISION ALGORITHMS
implementation
starvation
cardinality
throughput
identiﬁcation
complexity
MFML-DFSA 
FuzzyQ 
ds-DFSA 
ABTSA 
a large M may cause too many idle slots. In our proposed
algorithm, we deﬁne such a result with a large number of idle
slots as over-splitting.
B. The proposed FSA-CSS algorithm
According to the analysis above, the FS mechanism can
accelerate the splitting speed and reduce collision during the
identiﬁcation process. However, the question is how to apply
the FS mechanism and avoid over-splitting, given the number
of tags is unknown at the beginning? To tackle the oversplitting problem, we propose the fast splitting algorithm
with consecutive slot status detection (FSA-CSS). The main
idea is that the reader implements the FS mechanism only
when it detects a consecutive collision. The consecutive collision indicates a large number of tags coexist in the same
identiﬁcation process. In contrast, when the reader detects a
consecutive idle, it performs the shrink mechanism by sending
a Decrease command to decrease counter value of tags. The
shrink mechanism is deﬁned as follows.
Tc = trunk (Tc/2) .
where trunk() is a truncation function. The ﬂowchart of the
proposed FSA-CSS algorithm is illustrated in Fig. 2. Two
thresholds µ and σ are denoted as the upper tolerance limit
of the number of consecutive collision slots and idle slots,
respectively, and two counters TCCN and TCIN are used at
the reader to count the number of consecutive collision slots
and idle slots. If TCCN ≥µ, the reader should perform the
FS mechanism. If TCIN ≥σ, the reader should perform the
shrink mechanism due to the occurrence of over-splitting.
As can be observed in Fig. 2, the reader sends the corresponding feedback commands according to the slot type.
Similar to BS, the reader also has a counter Rc to terminate
the identiﬁcation process when Rc < 0. By receiving feedback
commands from the reader, each tag acts as follows.
• Splitting 0 command: Tags with Tc = 0 act Tc = TR,
while tags with Tc>0 act Tc = Tc +1. It is similar to the
ID-collision feedback of the BS algorithm. After
sending this command, the reader acts Rc=Rc+1.
• Splitting 1 command: Tags with Tc = 1 act Tc = TR.
Tags with Tc>0 will be split into two groups. The
potential advantage is to reduce the collisions.
• Increase command: All tags act Tc = 2·Tc+TR. Beside
the current collided tags, tags with Tc>0 will be divided
after receiving this command. This is essentially different
to the BS algorithm. After sending this command, the
reader acts Rc=2· Rc+1.
• Decrease command: All tags act Tc = trunk(Tc/2).
This command is allowed to alleviate the over-splitting.
After sending this command, the reader acts Rc
round(Rc/2).
• QueryRep command: All tags act Tc = Tc −1. This is
similar to the ID-idle and ID-success of the BS
algorithm. After sending this command, the reader acts
It is worth noting that the optimal M cannot be directly derived by the algorithm. In this paper, we choose an appropriate
value M by using experimental method. Intuitively, a larger M
can provide more splitting subsets and hence reduce collisions.
However, it also introduces idle slots. In our proposed solution,
we choose M = N = 2 to best achieve the simplicity and
balance between the performance and complexity of using
random number generator by each tag. Additional analysis
and discussion can be found from Section IV and Fig. 3
which compares the number of slots consumed by FSA-CSS
by adopting different M.
Fig. 4 illustrates an example of seven tags by implementing
the proposed FSA-CSS algorithm. Assume µ = 3 and σ = 3,
the reader performs the FS mechanism in the slot 3 due to
TCCN = 3. Then the reader performs the BS in each tag
subset. After the tag c is identiﬁed, three consecutive idle
slots occur, the reader performs the shrink mechanism in slot
11 to decrease the counter value of unidentiﬁed tags in order
to alleviate over-splitting. Thereafter, the tags g, e and f are
identiﬁed in slot 13, slot 15 and slot 16, respectively. The
detailed communication procedure is also illustrated in Tab.
II. In essence, compared to the conventional BS algorithm,
the proposed FSA-CSS algorithm can reduce collisions but
introduce extra idle slots. However, the FSA-CSS can use the
Increase command to alleviate the negative impact from the
idle slots.
C. Upper bound performance of FSA-CSS
In this section, we analyze the system throughput of FSA-
CSS. The system throughput Tsys is deﬁned as follows
where m is the number of tags waiting to be identiﬁed in the
reader vicinity, Nm is the required total slots to identify the
m tags. The system throughput is actually equivalent to the
IEEE TRANSACTIONS ON COMMUNICATIONS
Initialize
identification process
Tags with Tc=0
respond to the reader
Response status
The reader sends
Splitting 0 command
Tags with (Tc=0) do:
Tc=TR; Others do:
The tag is identified
All tags do:
Tags with Tc=0
respond to the reader
The reader sends
increase command
Rc=2·Rc+1;
All tags do:
Tc=2·Tc+TR
The reader sends
decrease command
Rc=round(Rc/2);
All tags do:
Tc=trunk (Tc/2)
The reader sends
QueryRep command
Last command
is splitting?
The reader sends
Splitting 1 command
Tags with (Tc=1) do:
Identification
process ends
Successful
Tag action
Fig. 2. The ﬂowchart of the proposed FSA-CSS
AN EXAMPLE OF IDENTIFICATION PROCESS USING FSA-CSS
Splitting 0
Splitting 0
B is identiﬁed
A is identiﬁed
D is identiﬁed
C is identiﬁed
G is identiﬁed
Splitting 0
E is identiﬁed
F is identiﬁed
End identiﬁcation
average number of identiﬁed tags per slot. In the FSA-CSS, the
reader splits the collided tags via the fast splitting mechanism
with M = N = 2. The identiﬁcation process can be viewed
as a binary tree. The depth of a node is the path length from
that node to the root (top) of the tree. Assuming the FSA-CSS
identiﬁes m tags using the maximum L-th depth of the binary
tree, the identiﬁcation process can be viewed as a 2L space to
accommodate the m units. If the generated random number of
all tags are uniformly distributed, the probability that r tags
involved in a node on the L-th depth of the tree is
P (r|m, L) = Cr
We then obtain the following expression for the probabilities
of idle, success, and collision results from an independent
probe at L-th depth of the tree.
P (0|m, L) =
P (1|m, L) = m
P (r > 1|m, L) = 1 −P (0|m, L) −P (1|m, L)
As can be observed from Fig. 4, the reader always performs
the BS to identify tags after the FS mechanism is ﬁnished. We
IEEE TRANSACTIONS ON COMMUNICATIONS
(a) Comparison of total slots
Number of Tags
Number of total slots
(b) Comparison of idle slots
Number of Tags
Number of idle slots
(c) Comparison of collision slots
Number of Tags
Number of collision slots
Fig. 3. Comparison of the number of slots under different M
assume that the reader does not perform the FS after the L-th
depth, which is a reasonable assumption since the tags will
be divided into 2L subsets at L-th depth of the tree and each
subset only contains a few tags, which reduces the chances of
consecutive collisions. Thus, the total slots to identify m tags
expended by FSA-CSS can be expressed as
N F SA−CSS
= L + 2L · [P (0|m, L) + P (1|m, L)]
r>1 2L · P (r|m, L) · N BS
where N BS
denotes the number of slots used for BS to
identify r tags. L represents the number of collided slots
and involves L −µ times FS operations. When the FS is
ﬁnished, the collided tags can be divided into 2L groups.
2L · P (0|m, L) and 2L · P (1|m, L) represent the number
of idle nodes and success nodes, respectively.
Result 2. The upper bound system throughput of FSA-CSS
can be approximated as following when the number of tags m
tends to inﬁnity
m→∞T F SA−CSS
Proof: See the Appendix B.
D. Discussion of µ and σ
It is noted that Result 2 reveals the upper performance
of FSA-CSS. However, the priori knowledge of number of
tags is usually unknown to the reader and the frame size
is typically not equal to the number of tags. In such cases,
the FS and shrink mechanisms are necessary for the FSA-
CSS to reduce collisions and avoid over-splitting during the
entire identiﬁcation process. Speciﬁcally, µ is the critical value
to enable the FS mechanism, σ is the key value to perform
the shrink mechanism. The system throughput depends on the
setting of these two parameters.
We use the numerical method to search the optimal combination of µ and σ. Experiments are performed under the
following cases: the number of tags are set as 200, 400, 600,
and 800, respectively. µ and σ vary from 1 to 10 in steps
of 1. As can be observed from Fig. 5, the optimal system
throughput relies on the combination of µ and σ. In Fig. 5
(a), the maximum system throughput of FSA-CSS is 0.4049
which can be obtained when µ = 4 and σ = 9. Similarly in
Fig. 5 (b), the system throughput of FSA-CSS peaks at 0.4128
when µ = 4 and σ = 9. Fig. 5 (c) shows that the pair of µ = 4
and σ = 7 can achieve the maximum system throughput of
0.4178. In Fig. 5(d), µ = 4 and σ = 7 can also achieve the
best performance at 0.4188 when n = 800. In general, no
constant parameter setting of µ and σ can maintain the best
performance as the number of tags varies in a large scale. The
optimal values of µ and σ rely on exhaustive search using
computer simulations.
The system throughput of FSA-CSS under speciﬁc pairs of
µ and σ when the number of tags varies from 100 to 1000 are
illustrated in Fig. 6. The average throughput of six curves from
highest to lowest are 0.4128, 0.4123, 0.4122, 0.4102, 0.4086,
and 0.4083, respectively. The corresponding pairs of µ and σ
are (4, 7), (4, 8), (4, 6), (4, 9), (3, 4), and (3, 5), respectively.
We can found that no constant parameter setting can always
maintain the best performance. When the number of tags
varies in a large-scale, the expectation of system throughput
of FSA-CSS is maximum at (µ = 4, σ = 7). In practical
implementation of fast RFID systems, it might be too costly
to search the optimal combination of these two parameters and
keep real-time updating by introducing extra overhead strategy.
Therefore, a default parameter setting is preferable during the
whole identiﬁcation process with recommendation of (µ = 4,
IEEE TRANSACTIONS ON COMMUNICATIONS
Shrink mechanism
(Tc=trunk(Tc/2))
FS mechanism
(Tc=2·Tc+TR)
Solved by the commands from the peer node
(It will not occupy a dedicated time slot during
identification)
(Start from slot3 to slot4)
(Start from slot11 to slot 12)
The probe order (slot index) is from top to bottom, if a
left node is visited, the FSA-CSS moves horizontally
Fig. 4. An identiﬁcation example by using FSA-CSS algorithm
IV. SIMULATION RESULTS
In this section, we compare FSA-CSS with the existing
state-of-the-art including ABS , APAFQ , ds-DFSA
 , EAAEA , ILCM , and ABTSA in terms
of system throughput and time efﬁciency. Simulations with
a reader and a various number of tags have been evaluated
using MATLAB, where the tags are uniformly distributed in
the reader vicinity in order to receive reader command directly.
The evaluations are mainly focused on the MAC layer, whereas
physical layer effects such as radio propagation effects are
not considered in the proposed model. The similar assumption
has been widely applied in the literatures . The
simulation results are average over 1000 iterations.
Fig. 7 illustrates the simulation results of system throughput
under different initial frame size. Since ABS and FSA-CSS
are not Aloha-based algorithms, their performances are not
affected by varying initial frame size. The FSA-CSS only
shows minor improvement when the number of tags is below
200. The reason is that the frequent use of FS mechanism
introduces too many idle slots when the size of tag is small,
and hence decreases the system throughput. As the number
of tags is increased, the FSA-CSS shows its advantage over
other algorithms. From Fig. 7, the FSA-CSS outperforms all
other algorithms and achieves an average system throughput
of 0.4128, where the average throughput of ABS, APAFQ,
ABTSA, ds-DFSA, EAAEA, and ILCM are 0.3448, 0.3573,
0.4083, 0.4079, 0.3361, and 0.3252, respectively. It is noted
that although ABTSA adopts a complex hybrid structure to
enhance its performance, our proposed FSA-CSS still outperforms ABTSA by 1.10%. Similarly, the FSA-CSS is superior
to the ds-DFSA and APAFQ with lower implementation cost.
In Fig. 8, we compare FSA-CSS (µ = 4, σ = 7) with
ABS in terms of total number of slots, collision slots and idle
slots. The number of unread tags is progressively increased
from 100 to 1000. Compared to ABS, FSA-CSS has fewer
collision slots but more idle slots. The simulation results
indicate that signiﬁcant collision slots are reduced by the FS
mechanism, and hence the total slots consumed by the FSA-
CSS. Although the shrink mechanism is expected to overcome
the over-splitting, the extra idle slots are unavoidable by the
FS mechanism. As a result, the practical performance of FSA-
CSS is slightly lower than its theoretical results.
Consider the disparity between slot durations such as the
duration of non-idle slot is always longer than that of idle slot
 , the system throughput metric is ineffective to evaluate
the performance of identiﬁcation in terms of identiﬁcation
time. Therefore, we use time efﬁciency in the simulations.
Assume the time durations of success, collision and idle slots
are denoted as Ts, Tc and Te, the time efﬁciency is deﬁned as
S · Ts + E · Te + C · Tc
where E, S, and C are the statistics of success, idle and
collision during the identiﬁcation process measured by the
IEEE TRANSACTIONS ON COMMUNICATIONS
System throughput
System throughput
System throughput
System throughput
(μ=4, σ=9)
(μ=4, σ=8)
(μ=4, σ=7)
(μ=4, σ=7)
Fig. 5. Comparison of system throughput under different number of tags
Number of tags
System throughput
CCN=4,CIN=6
CCN=4,CIN=7
CCN=4,CIN=8
CCN=4,CIN=9
CCN=3,CIN=4
CCN=3,CIN=5
Fig. 6. The system throughput of FSA-CSS under speciﬁc pairs of µ and σ
Fig. 9 shows the time efﬁciency of various methods under
different ratios between the duration of success, collision and
idle slots. As can be seen, all algorithms present ﬂuctuating
performances under different Ts : Tc : Te ratios. When Tc =
Te in Fig. 9 (a) and (b), all the algorithms present a similar
behavior, and the performance ranking from high to low is
FSA-CSS, ds-DFSA, ABTSA, APAFQ, ABS, EAAEA, and
ILCM. Fig. 9 (c) and (d) show differently with the ranking of
ABS dropping down to the last one and the ranking of APAFQ
moving up to the third when Ts : Tc : Te = 3 : 3 : 1. As the
ratio between Tc and Te is increased, ABS shows a signiﬁcant
performance degradation due to the large number of collision
slots. Compared to the reference methods, the proposed FSA-
CSS can always achieve the best time efﬁciency under various
ratios by reducing collision and idle slots.
V. EXPERIMENTAL RESULTS WITH A PRACTICAL RFID
LINK PARAMETERS USED FOR RF COMMUNICATIONS
922.875 MHz
Backscatter link frequency
Modulation
Channel width
Read-tag data coding
Tag-reader data coding
Reader-tag preamble
Tag-reader preamble
To further evaluate the performance of FSA-CSS algorithm
in a practical UHF RFID system, we conduct experiments
using a testbed in an indoor environment. Experiments include
an active RFID reader and 20 passive tags. The reader is
equipped with ARM Cortex A9 processor, which is a 32bit reduced instruction set (RISC) processor with a maximum
operating frequency of 1 GHz and an off-chip memory 512M
to ensure high speed and stable operation of programs. The
external interface of the reader includes UART, JTAG, ETH
and USB, which greatly facilitates the software and hardware
debugging. The UART interface is used for communication
between the host computer and the reader. The JTAG interface
facilitates the developer to debug the reader hardware. ETH
IEEE TRANSACTIONS ON COMMUNICATIONS
Number of Tags
System Throughput
Number of Tags
System Throughput
Number of Tags
System Throughput
Number of Tags
System Throughput
Fig. 7. System throughput comparisons of various algorithms under different initial frame size
Number of Tags
Number of slots
total slots (ABS)
idle slots (ABS)
collision slots (ABS)
total slots (FSA-CCS)
idle slots (FSA-CCS)
collision slots (FSA-CCS)
Fig. 8. Simulation results of the number of total slots, collision slots and idle
slots between FSA-CSS and ABS
and USB provide various ways to upload tag data by the
reader. Compared to the BS commercial tag, the custom tag
has added some control logic codes in its state machine, which
is used to support the reader commands of FSA-CSS.
Tab. III lists the link parameters conﬁgured for radio frequency communication between the reader and tags. In order
to comply with ISO/IEC 18000-6B, the carrier frequency is
set to 922.875MHz and Miller coding is used.
The experiments are carried out by placing 20 tags in
the antenna interrogation zone of RFID reader with a ﬁxed
transmitting power. We evaluate and compare the performance
of standard BS used in ISO/IEC 18000-6B and the proposed
FSA-CSS in total identiﬁcation time (deﬁned as the total time
required to identify all tags) and identiﬁcation rate (deﬁned
as the number of tags can be identiﬁed per second). The
experimental environment is captured in Fig. 10. We vary the
number of tags from 2 to 20 and repeat the experiment in 50
trials to get average performance. In parallel, we also perform
simulations using the same parameters.
Fig. 11 compares the experimental results of FSA-CSS with
that of ABS which is used in ISO/IEC 18000-6B. In the
experiments, the proposed FSA-CSS reduces the identiﬁcation
time by 32.5% and improves the average identiﬁcation rate by
50% compared with ABS. The simulation results are closed
to the experimental results. Both simulation and experiment
results indicate that the proposed FSA-CSS outperforms the
ABS constantly in the practical RFID system.
VI. CONCLUSIONS
We have proposed a novel design of BS-based anti-collision
algorithm namely FSA-CSS to improve the low identiﬁcation
efﬁciency of traditional BS-based algorithms. Unlike the existing methods, the FSA-CSS allows tags which are in the
waiting state to participate in the splitting process via fast
splitting mechanism, thus the number of collision slots can
be reduced. Meanwhile, the shrink mechanism has been introduced to avoid the over-splitting problem. The proposed FSA-
CSS has been shown to improve the identiﬁcation efﬁciency
without estimation of number of tags and extra hardware cost.
The simulation results have shown that FSA-CSS outperforms
ABS by 23.3% in system throughput. We have also prototyped
a RFID system and evaluated its performance in a real-world
RFID environment. The experimental results have been shown
that the proposed FSA-CSS can reduce the total identiﬁcation
time by 32.5% for identifying 20 tags. Both simulations and
IEEE TRANSACTIONS ON COMMUNICATIONS
Number of Tags
(a) Ts:Tc:Te=4:1:1
Time efficiency
Number of Tags
(b) Ts:Tc:Te=3:1:1
Time efficiency
Number of Tags
(c) Ts:Tc:Te=3:3:1
Time efficiency
Number of Tags
(d) Ts:Tc:Te=4:2:1
Time efficiency
Fig. 9. Simulation results of time efﬁciency for various algorithms under varying Ts : Tc : Te
Power Board
Baseband Board
custom tags (compatible
with ISO/IEC 18000-6B and
our proposed solution)
Fig. 10. The hardware setup used in the experiments
experiments have indicated that the proposed FSA-CSS is a
suitable candidate for the resource-constrained RFID systems.
APPENDIX A
PROOF OF RESULT 1
Assuming the i-th and j-th (i<j) subsets on the depth k
have counters T (i, k)
, T (j, k)
, respectively, we have
= T (i, k)
+ (j −i) ,
If the FS mechanism is performed when a collision occurs,
the two subsets extend into the depth (k+1), and the counters
can be expressed as
T (i, k+1)
= M · T (i, k)
+ T (i, k)
T (j, k+1)
= M · T (j, k)
+ T (j, k)
where T (i, k)
, T (j, k)
∈{0, 1, · · · , N −1}. According to
Eqs. (3)-(5), T (j, k+1)
can be rewritten as
T (j, k+1)
+ T (j, k)
Comparing between Eq. (13) and (15), we have
T (j, k+1)
−T (i, k+1)
= M · (j −i) +
IEEE TRANSACTIONS ON COMMUNICATIONS
(a) comparison of total identification time
Number of tags
Total identification time (ms)
FSA-CSS (simulation)
FSA-CSS (experiment)
ISO/IEC 18000-6B (simulation)
ISO/IEC 18000-6B (experiment)
(b) comparison of identification rate
Number of tags
Identification rate (tags/s)
FSA-CSS (simulation)
FSA-CSS (experiment)
ISO/IEC 18000-6B (simulation)
ISO/IEC 18000-6B (experiment)
Fig. 11. Comparison of the experimental results
Since T (i, k)
, T (j, k)
∈{0, 1, · · · , N −1}, we have
−(N −1) ≤T (j, k)
Without loss of generality, we assume 0<M<N, then we
0 < M · (j −i) < N(j −i) ,
Since j>i, (18) can be rewritten as
M < M · (j −i) < N(j −i) ,
According to (16), (17), and (19), we have
M −(N −1) ≤T (j, k+1)
−T (i, k+1)
≤N(j+1−i)−1 , (20)
Since i, j, M and N are natural number above 0, (20) can
be re-expressed as
0 ≤T (j, k+1)
−T (i, k+1)
≤N(j + 1 −i) −1 .
which indicates that the nodes in different subsets at the depth
k may be collided in the same subset at depth (k + 1).
Consequently, the extra collision slot is yielded. Suppose
M = N, we have
1 ≤T (j, k+1)
−T (i, k+1)
≤N(j + 1 −i) −1 .
which indicates that the nodes in two subsets at depth k
extending into depth (k + 1) will not be collided. Based on
the discussion above, we know that M = N = 2 can avoid
the extra collision slot.
On the other hand, if M>N, according to (20), we have
2 ≤T (j, k+1)
−T (i, k+1)
≤N(j + 1 −i) −1 .
which indicates that the minimum gap between counter value
in adjacent subsets is above 1. That means the extra idle slot
is generated when M>N compared to (22). Therefore, the
Result 1 can be yielded.
APPENDIX B
PROOF OF RESULT 2
As the prior knowledge of number of tags is known to the
reader, it is straightforward that the FS should be repeated
until all tags have been divided into m subsets and each subset
contains few tags in equal probability. Then the conventional
BS can be adopted to identify these tags in each subsets. The
maximum depth Lmax of the binary tree using FSA-CSS to
identify m tags can be derived as
Lmax = ⌊logm
where ⌊·⌋denotes the operation of round down to the nearest
integer. Substituting Eq. (24) into Eq. (9) leads to
N F SA−CSS
= Lmax + 2Lmax · (1 −
2Lmax )m−1
2Lmax · P (r|m, L) · N BS
max = m, FSA-CSS algorithm consumes the least
number of slots to identify m tags. When 2L
max = m and
m →∞, the Eq. (25) can be further expressed as
N F SA−CSS
2Lmax=m, m→∞
= Lmax + 2Lmax · (1 −
2Lmax )m + m · (1 −
2Lmax )m−1
m−r · N BS
≈Lmax + 2×2Lmax
2Lmax(e−1)
According to Eqs. (4) and (26), the Result 2 can be yielded.