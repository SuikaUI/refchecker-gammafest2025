c⃝2003 Association for Computational Linguistics
A Systematic Comparison of Various
Statistical Alignment Models
Franz Josef Och∗
Hermann Ney†
University of Southern California
RWTH Aachen
We present and compare various methods for computing word alignments using statistical or
heuristic models. We consider the ﬁve alignment models presented in Brown, Della Pietra, Della
Pietra, and Mercer , the hidden Markov alignment model, smoothing techniques, and
reﬁnements. These statistical models are compared with two heuristic models based on the Dice
coefﬁcient. We present different methods for combining word alignments to perform a symmetrization of directed statistical alignment models. As evaluation criterion, we use the quality of the
resulting Viterbi alignment compared to a manually produced reference alignment. We evaluate
the models on the German-English Verbmobil task and the French-English Hansards task. We
perform a detailed analysis of various design decisions of our statistical alignment system and
evaluate these on training corpora of various sizes. An important result is that reﬁned alignment models with a ﬁrst-order dependence and a fertility model yield signiﬁcantly better results
than simple heuristic models. In the Appendix, we present an efﬁcient training algorithm for the
alignment models presented.
1. Introduction
We address in this article the problem of ﬁnding the word alignment of a bilingual
sentence-aligned corpus by using language-independent statistical methods. There is
a vast literature on this topic, and many different systems have been suggested to
solve this problem. Our work follows and extends the methods introduced by Brown,
Della Pietra, Della Pietra, and Mercer by using reﬁned statistical models for
the translation process. The basic idea of this approach is to develop a model of the
translation process with the word alignment as a hidden variable of this process, to
apply statistical estimation theory to compute the “optimal” model parameters, and
to perform alignment search to compute the best word alignment.
So far, reﬁned statistical alignment models have in general been rarely used. One
reason for this is the high complexity of these models, which makes them difﬁcult
to understand, implement, and tune. Instead, heuristic models are usually used. In
heuristic models, the word alignments are computed by analyzing some association
score metric of a link between a source language word and a target language word.
These models are relatively easy to implement.
In this article, we focus on consistent statistical alignment models suggested in the
literature, but we also describe a heuristic association metric. By providing a detailed
description and a systematic evaluation of these alignment models, we give the reader
various criteria for deciding which model to use for a given task.
∗Information Science Institute (USC/ISI), 4029 Via Marina, Suite 1001, Marina del Rey, CA 90292.
† Lehrstuhl f¨ur Informatik VI, Computer Science Department, RWTH Aachen–University of Technology,
D-52056 Aachen, Germany.
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
Example of a word alignment (VERBMOBIL task).
We propose to measure the quality of an alignment model by comparing the quality of the most probable alignment, the Viterbi alignment, with a manually produced
reference alignment. This has the advantage of enabling an automatic evaluation to be
performed. In addition, we shall show that this quality measure is a precise and reliable evaluation criterion that is well suited to guide designing and training statistical
alignment models.
The software used to train the statistical alignment models described in this article
is publicly available .
1.1 Problem Deﬁnition
We follow Brown, Della Pietra, Della Pietra, and Mercer to deﬁne alignment
as an object for indicating the corresponding words in a parallel text. Figure 1 shows
an example. Very often, it is difﬁcult for a human to judge which words in a given
target string correspond to which words in its source string. Especially problematic
is the alignment of words within idiomatic expressions, free translations, and missing
function words. The problem is that the notion of “correspondence” between words
is subjective. It is important to keep this in mind in the evaluation of word alignment
quality. We shall deal with this problem in Section 5.
The alignment between two word strings can be quite complicated. Often, an
alignment includes effects such as reorderings, omissions, insertions, and word-tophrase alignments. Therefore, we need a very general representation of alignment.
Formally, we use the following deﬁnition for alignment in this article. We are given
a source (French) string f J
1 = f1, . . . , fj, . . . , fJ and a target language (English) string
1 = e1, . . . , ei, . . . , eI that have to be aligned. We deﬁne an alignment between the two
word strings as a subset of the Cartesian product of the word positions; that is, an
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
alignment A is deﬁned as
A ⊆{(j, i): j = 1, . . . , J; i = 1, . . . , I}
Modeling the alignment as an arbitrary relation between source and target language
positions is quite general. The development of alignment models that are able to deal
with this general representation, however, is hard. Typically, the alignment models presented in the literature impose additional constraints on the alignment representation.
Typically, the alignment representation is restricted in a way such that each source
word is assigned to exactly one target word. Alignment models restricted in this way
are similar to the concept of hidden Markov models (HMMs) in speech recognition.
The alignment mapping in such models consists of associations j →i = aj from source
position j to target position i = aj. The alignment aJ
1 = a1, . . . , aj, . . . , aJ may contain
alignments aj = 0 with the “empty” word e0 to account for source words that are
not aligned with any target word. Constructed in such a way, the alignment is not
a relation between source and target language positions, but only a mapping from
source to target language positions.
In Melamed , a further simpliﬁcation is performed that enforces a one-to-one
alignment for nonempty words. This means that the alignment mapping aJ
injective for all word positions aj > 0. Note that many translation phenomena cannot
be handled using restricted alignment representations such as this one. Especially,
methods such as Melamed’s are in principle not able to achieve a 100% recall. The
problem can be reduced through corpus preprocessing steps that perform grouping
and splitting of words.
Some papers report improvements in the alignment quality of statistical methods
when linguistic knowledge is used . In
these methods, the linguistic knowledge is used mainly to ﬁlter out incorrect alignments. In this work, we shall avoid making explicit assumptions concerning the language used. By avoiding these assumptions, we expect our approach to be applicable
to almost every language pair. The only assumptions we make are that the parallel
text is segmented into aligned sentences and that the sentences are segmented into
words. Obviously, there are additional implicit assumptions in the models that are
needed to obtain a good alignment quality. For example, in languages with a very
rich morphology, such as Finnish, a trivial segmentation produces a high number of
words that occur only once, and every learning method suffers from a signiﬁcant data
sparseness problem.
1.2 Applications
There are numerous applications for word alignments in natural language processing.
These applications crucially depend on the quality of the word alignment . An obvious application for word alignment methods is the automatic extraction of bilingual lexica and terminology from
corpora .
Statistical alignment models are often the basis of single-word-based statistical
machine translation systems . In addition, these models are the starting point for re-
ﬁned phrase-based statistical 
or example-based translation systems . In such systems, the quality of
the machine translation output directly depends on the quality of the initial word
alignment .
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
Another application of word alignments is in the ﬁeld of word sense disambiguation . In Yarowsky, Ngai, and Wicentowski , word alignment is used
to transfer text analysis tools such as morphologic analyzers or part-of-speech taggers
from a language, such as English, for which many tools already exist to languages for
which such resources are scarce.
1.3 Overview
In Section 2, we review various statistical alignment models and heuristic models.
We present a new statistical alignment model, a log-linear combination of the best
models of Vogel, Ney, and Tillmann and Brown, Della Pietra, Della Pietra, and
Mercer . In Section 3, we describe the training of the alignment models and
present a new training schedule that yields signiﬁcantly better results. In addition,
we describe how to deal with overﬁtting, deﬁcient models, and very small or very
large training corpora. In Section 4, we present some heuristic methods for improving
alignment quality by performing a symmetrization of word alignments. In Section 5,
we describe an evaluation methodology for word alignment methods dealing with
the ambiguities associated with the word alignment annotation based on generalized
precision and recall measures. In Section 6, we present a systematic comparison of the
various statistical alignment models with regard to alignment quality and translation
quality. We assess the effect of training corpora of various sizes and the use of a
conventional bilingual dictionary. In the literature, it is often claimed that the reﬁned
alignment models of Brown, Della Pietra, Della Pietra, and Mercer are not
suitable for small corpora because of data sparseness problems. We show that this is
not the case if these models are parametrized suitably. In the Appendix, we describe
some methods for efﬁcient training of fertility-based alignment models.
2. Review of Alignment Models
2.1 General Approaches
We distinguish between two general approaches to computing word alignments: statistical alignment models and heuristic models. In the following, we describe both
types of models and compare them from a theoretical viewpoint.
The notational convention we employ is as follows. We use the symbol Pr(·)
to denote general probability distributions with (almost) no speciﬁc assumptions. In
contrast, for model-based probability distributions, we use the generic symbol p(·).
2.1.1 Statistical Alignment Models. In statistical machine translation, we try to model
the translation probability Pr(f J
1), which describes the relationship between a
source language string f J
1 and a target language string eI
1. In (statistical) alignment
models Pr(f J
1), a “hidden” alignment aJ
1 is introduced that describes a mapping
from a source position j to a target position aj. The relationship between the translation
model and the alignment model is given by
The alignment aJ
1 may contain alignments aj = 0 with the empty word e0 to account
for source words that are not aligned with any target word.
In general, the statistical model depends on a set of unknown parameters θ that is
learned from training data. To express the dependence of the model on the parameter
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
set, we use the following notation:
1) = pθ(f J
The art of statistical modeling is to develop speciﬁc statistical models that capture
the relevant properties of the considered problem domain. In our case, the statistical
alignment model has to describe the relationship between a source language string
and a target language string adequately.
To train the unknown parameters θ, we are given a parallel training corpus consisting of S sentence pairs {(fs, es) : s = 1, . . . , S}. For each sentence pair (fs, es), the
alignment variable is denoted by a = aJ
1. The unknown parameters θ are determined
by maximizing the likelihood on the parallel training corpus:
ˆθ = argmax
pθ(fs, a | es)
Typically, for the kinds of models we describe here, the expectation maximization (EM)
algorithm or some approximate EM algorithm is
used to perform this maximization. To avoid a common misunderstanding, however,
note that the use of the EM algorithm is not essential for the statistical approach, but
only a useful tool for solving this parameter estimation problem.
Although for a given sentence pair there is a large number of alignments, we can
always ﬁnd a best alignment:
1 = argmax
The alignment ˆaJ
1 is also called the Viterbi alignment of the sentence pair (f J
the sake of simplicity, we shall drop the index θ if it is not explicitly needed.)
Later in the article, we evaluate the quality of this Viterbi alignment by comparing
it to a manually produced reference alignment. The parameters of the statistical alignment models are optimized with respect to a maximum-likelihood criterion, which
is not necessarily directly related to alignment quality. Such an approach, however,
requires training with manually deﬁned alignments, which is not done in the research
presented in this article. Experimental evidence shows (Section 6) that the statistical
alignment models using this parameter estimation technique do indeed obtain a good
alignment quality.
In this paper, we use Models 1 through 5 described in Brown, Della Pietra, Della
Pietra, and Mercer , the hidden Markov alignment model described in Vogel,
Ney, and Tillmann and Och and Ney , and a new alignment model, which
we call Model 6. All these models use a different decomposition of the probability
2.1.2 Heuristic Models. Considerably simpler methods for obtaining word alignments
use a function of the similarity between the types of the two languages . Frequently,
variations of the Dice coefﬁcient are used as this similarity function. For
each sentence pair, a matrix including the association scores between every word at
every position is then obtained:
dice(i, j) = 2 · C(ei, fj)
C(ei) · C(fj)
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
C(e, f) denotes the co-occurrence count of e and f in the parallel training corpus. C(e)
and C(f) denote the count of e in the target sentences and the count of f in the source
sentences, respectively. From this association score matrix, the word alignment is then
obtained by applying suitable heuristics. One method is to choose as alignment aj = i
for position j the word with the largest association score:
aj = argmax
{dice(i, j)}
A reﬁnement of this method is the competitive linking algorithm .
In a ﬁrst step, the highest-ranking word position (i, j) is aligned. Then, the corresponding row and column are removed from the association score matrix. This procedure is
iteratively repeated until every source or target language word is aligned. The advantage of this approach is that indirect associations (i.e., words that co-occur often but
are not translations of each other) occur less often. The resulting alignment contains
only one-to-one alignments and typically has a higher precision than the heuristic
model deﬁned in equation (7).
2.1.3 A Comparison of Statistical Models and Heuristic Models. The main advantage of the heuristic models is their simplicity. They are very easy to implement and
understand. Therefore, variants of the heuristic models described above are widely
used in the word alignment literature.
One problem with heuristic models is that the use of a speciﬁc similarity function
seems to be completely arbitrary. The literature contains a large variety of different
scoring functions, some including empirically adjusted parameters. As we show in
Section 6, the Dice coefﬁcient results in a worse alignment quality than the statistical
In our view, the approach of using statistical alignment models is more coherent.
The general principle for coming up with an association score between words results
from statistical estimation theory, and the parameters of the models are adjusted such
that the likelihood of the models on the training corpus is maximized.
2.2 Statistical Alignment Models
2.2.1 Hidden Markov Alignment Model. The alignment model Pr(f J
structured without loss of generality as follows:
Pr(fj, aj | f j−1
Pr(aj | f j−1
1) · Pr(fj | f j−1
Using this decomposition, we obtain three different probabilities: a length probability
1), an alignment probability Pr(aj | f j−1
1) and a lexicon probability
Pr(fj | f j−1
1). In the hidden Markov alignment model, we assume a ﬁrst-order
dependence for the alignments aj and that the lexicon probability depends only on the
word at position aj:
Pr(aj | f j−1
p(aj | aj−1, I)
Pr(fj | f j−1
p(fj | eaj)
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
Later in the article, we describe a reﬁnement with a dependence on eaj−1 in the
alignment model. Putting everything together and assuming a simple length model
1) = p(J | I), we obtain the following basic HMM-based decomposition of
1) = p(J | I) ·
[p(aj | aj−1, I) · p(fj | eaj)]
with the alignment probability p(i | i′, I) and the translation probability p(f | e).
To make the alignment parameters independent of absolute word positions, we
assume that the alignment probabilities p(i | i′, I) depend only on the jump width
(i −i′). Using a set of non-negative parameters {c(i −i′)}, we can write the alignment
probabilities in the form
p(i | i′, I) =
i′′=1 c(i′′ −i′)
This form ensures that the alignment probabilities satisfy the normalization constraint
for each conditioning word position i′, i′ = 1, . . . , I. This model is also referred to as a
homogeneous HMM . A similar idea was suggested
by Dagan, Church, and Gale .
In the original formulation of the hidden Markov alignment model, there is no
empty word that generates source words having no directly aligned target word. We
introduce the empty word by extending the HMM network by I empty words e2I
The target word ei has a corresponding empty word ei+I (i.e., the position of the empty
word encodes the previously visited target word). We enforce the following constraints
on the transitions in the HMM network (i ≤I, i′ ≤I) involving the empty word e0:1
p(i + I | i′, I)
p0 · δ(i, i′)
p(i + I | i′ + I, I)
p0 · δ(i, i′)
p(i | i′ + I, I)
p(i | i′, I)
The parameter p0 is the probability of a transition to the empty word, which has to be
optimized on held-out data. In our experiments, we set p0 = 0.2.
Whereas the HMM is based on ﬁrst-order dependencies p(i = aj | aj−1, I) for the
alignment distribution, Models 1 and 2 use zero-order dependencies p(i = aj | j, I, J):
Model 1 uses a uniform distribution p(i | j, I, J) = 1/(I + 1):
1) = p(J | I)
(I + 1)J ·
p(fj | eaj)
Hence, the word order does not affect the alignment probability.
In Model 2, we obtain
1) = p(J | I) ·
[p(aj | j, I, J) · p(fj | eaj)]
1 δ(i, i′) is the Kronecker function, which is one if i = i′ and zero otherwise.
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
To reduce the number of alignment parameters, we ignore the
dependence on J in the alignment model and use a distribution p(aj | j, I)
instead of p(aj | j, I, J).
2.3 Fertility-Based Alignment Models
In the following, we give a short description of the fertility-based alignment models
of Brown, Della Pietra, Della Pietra, and Mercer . A gentle introduction can be
found in Knight .
The fertility-based alignment models (Models 3, 4, and 5) have a signiﬁcantly more complicated structure than
the simple Models 1 and 2. The fertility φi of a word ei in position i is deﬁned as the
number of aligned source words:
The fertility-based alignment models contain a probability p(φ | e) that the target word
e is aligned to φ words. By including this probability, it is possible to explicitly describe
the fact that for instance the German word ¨ubermorgen produces four English words
(the day after tomorrow). In particular, the fertility φ = 0 is used for prepositions
or articles that have no direct counterpart in the other language.
To describe the fertility-based alignment models in more detail, we introduce,
as an alternative alignment representation, the inverted alignments, which deﬁne a
mapping from target to source positions rather than the other way around. We allow
several positions in the source language to be covered; that is, we consider alignments
B of the form
B: i →Bi ⊂{1, . . . , j, . . . , J}.
An important constraint for the inverted alignment is that all positions of the source
sentence must be covered exactly once; that is, the Bi have to form a partition of the
set {1, . . . , j, . . . , J}. The number of words φi = |Bi| is the fertility of the word ei. In the
following, Bik refers to the kth element of Bi in ascending order.
The inverted alignments BI
0 are a different way to represent normal alignments
1. The set B0 contains the positions of all source words that are aligned with the
empty word. Fertility-based alignment models use the following decomposition and
assumptions:2
Pr(B0 | BI
Pr(Bi | Bi−1
1) · Pr(f J
p(Bi | Bi−1, ei) ·
p(fj | ei)
As might be seen from this equation, we have tacitly assumed that the set B0 of words
aligned with the empty word is generated only after the nonempty positions have
2 The original description of the fertility-based alignment models in Brown, Della Pietra, Della Pietra,
and Mercer includes a more reﬁned derivation of the fertility-based alignment models.
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
been covered. The distribution p(Bi | Bi−1, ei) is different for Models 3, 4, and 5:
In Model 3, the dependence of Bi on its predecessor Bi−1 is ignored:
p(Bi | Bi−1, ei) = p(φi | ei) φi!
p(j | i, J)
We obtain an (inverted) zero-order alignment model p(j | i, J).
In Model 4, every word is dependent on the previous aligned word and
on the word classes of the surrounding words. First, we describe the
dependence of alignment positions. (The dependence on word classes is
for now ignored and will be introduced later.) We have two (inverted)
ﬁrst-order alignment models: p=1(∆j | · · ·) and p>1(∆j | · · ·). The
difference between this model and the ﬁrst-order alignment model in the
HMM lies in the fact that here we now have a dependence along the
j-axis instead of a dependence along the i-axis. The model p=1(∆j | · · ·) is
used to position the ﬁrst word of a set Bi, and the model p>1(∆j | · · ·) is
used to position the remaining words from left to right:
p(Bi | Bi−1, ei) = p(φi | ei)·p=1(Bi1 −Bρ(i) | · · ·)
p>1(Bik −Bi,k−1 | · · ·) (25)
The function i →i′ = ρ(i) gives the largest value i′ < i for which |Bi′| > 0.
The symbol Bρ(i) denotes the average of all elements in Bρ(i).
Both Model 3 and Model 4 ignore whether or not a source position has
been chosen. In addition, probability mass is reserved for source
positions outside the sentence boundaries. For both of these reasons, the
probabilities of all valid alignments do not sum to unity in these two
models. Such models are called deﬁcient . Model 5 is a reformulation of Model 4 with a
suitably reﬁned alignment model to avoid deﬁciency. (We omit the
speciﬁc formula. We note only that the number of alignment parameters
for Model 5 is signiﬁcantly larger than for Model 4.)
Models 3, 4, and 5 deﬁne the probability p(B0 | BI
1) as uniformly distributed for the
φ0! possibilities given the number of words aligned with the empty word φ0 = |B0|.
Assuming a binomial distribution for the number of words aligned with the empty
word, we obtain the following distribution for B0:
(1 −p1)J−2φ0pφ0
The free parameter p1 is associated with the number of words that are aligned with
the empty word. There are φ0! ways to order the φ0 words produced by the empty
word, and hence, the alignment model of the empty word is nondeﬁcient. As we will
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
see in Section 3.2, this creates problems for Models 3 and 4. Therefore, we modify
Models 3 and 4 slightly by replacing φ0! in equation (27) with Jφ0:
(1 −p1)J−2φ0pφ0
As a result of this modiﬁcation, the alignment models for both nonempty words and
the empty word are deﬁcient.
2.3.1 Model 6. As we shall see, the alignment models with a ﬁrst-order dependence
(HMM, Models 4 and 5) produce signiﬁcantly better results than the other alignment
models. The HMM predicts the distance between subsequent source language positions, whereas Model 4 predicts the distance between subsequent target language
positions. This implies that the HMM makes use of locality in the source language,
whereas Model 4 makes use of locality in the target language. We expect to achieve
better alignment quality by using a model that takes into account both types of dependencies. Therefore, we combine HMM and Model 4 in a log-linear way and call
the resulting model Model 6:
p6(f, a | e) =
p4(f, a | e)α · pHMM(f, a | e)
a′,f′ p4(f′, a′ | e)α · pHMM(f′, a′ | e)
Here, the interpolation parameter α is employed to weigh Model 4 relative to the
hidden Markov alignment model. In our experiments, we use Model 4 instead of
Model 5, as it is signiﬁcantly more efﬁcient in training and obtains better results.
In general, we can perform a log-linear combination of several models pk(f, a | e),
k = 1, . . . , K by
p6(f, a | e) =
k=1 pk(f, a | e)αk
k=1 pk(f′, a′ | e)αk
The interpolation parameters αk are determined in such a way that the alignment
quality on held-out data is optimized.
We use a log-linear combination instead of the simpler linear combination because the values of Pr(f, a | e) typically differ by orders of magnitude for HMM and
Model 4. In such a case, we expect the log-linear combination to be better than a linear
combination.
2.3.2 Alignment Models Depending on Word Classes. For HMM and Models 4 and
5, it is straightforward to extend the alignment parameters to include a dependence
on the word classes of the surrounding words . In the hidden
Markov alignment model, we allow for a dependence of the position aj on the class
of the preceding target word C(eaj−1): p(aj | aj−1, I, C(eaj−1)). Similarly, we can include
dependencies on source and target word classes in Models 4 and 5 . The categorization of the words into classes
(here: 50 classes) is performed automatically by using the statistical learning procedure
described in Kneser and Ney .
2.3.3 Overview of Models. The main differences among the statistical alignment models lie in the alignment model they employ (zero-order or ﬁrst-order), the fertility
model they employ, and the presence or absence of deﬁciency. In addition, the models
differ with regard to the efﬁciency of the E-step in the EM algorithm (Section 3.1).
Table 1 offers an overview of the properties of the various alignment models.
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
Overview of the alignment models.
Alignment model
Fertility model
zero-order
ﬁrst-order
zero-order
approximative
ﬁrst-order
approximative
ﬁrst-order
approximative
ﬁrst-order
approximative
2.4 Computation of the Viterbi Alignment
We now develop an algorithm to compute the Viterbi alignment for each alignment
model. Although there exist simple polynomial algorithms for the baseline Models 1
and 2, we are unaware of any efﬁcient algorithm for computing the Viterbi alignment
for the fertility-based alignment models.
For Model 2 (also for Model 1 as a special case), we obtain
p(J | I) ·
[p(aj | j, I) · p(fj | eaj)]
{p(aj | j, I) · p(fj | eaj)}
Hence, the maximization over the (I+1)J different alignments decomposes into J maximizations of (I + 1) lexicon probabilities. Similarly, the Viterbi alignment for Model 2
can be computed with a complexity of O(I · J).
Finding the optimal alignment for the HMM is more complicated than for Model 1
or Model 2. Using a dynamic programming approach, it is possible to obtain the Viterbi
alignment for the HMM with a complexity of O(I2 ·J) .
For the reﬁned alignment models, however, namely, Models 3, 4, 5, and 6, maximization over all alignments cannot be efﬁciently carried out. The corresponding
search problem is NP-complete . For short sentences, a possible solution could be an A* search algorithm . In the work
presented here, we use a more efﬁcient greedy search algorithm for the best alignment, as suggested in Brown, Della Pietra, Della Pietra, and Mercer . The basic
idea is to compute the Viterbi alignment of a simple model (such as Model 2 or HMM).
This alignment is then iteratively improved with respect to the alignment probability
of the reﬁned alignment model. (For further details on the greedy search algorithm,
see Brown, Della Pietra, Della Pietra, and Mercer .) In the Appendix, we present
methods for performing an efﬁcient computation of this pseudo-Viterbi alignment.
3. Training
3.1 EM Algorithm
In this section, we describe our approach to determining the model parameters θ.
Every model has a speciﬁc set of free parameters. For example, the parameters θ for
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
Model 4 consist of lexicon, alignment, and fertility parameters:
θ = {{p(f | e)}, {p=1(∆j | · · ·)}, {p>1(∆j | · · ·)}, {p(φ | e)}, p1}
To train the model parameters θ, we use a maximum-likelihood approach, as described
in equation (4), by applying the EM algorithm . The different models are
trained in succession on the same data; the ﬁnal parameter values of a simpler model
serve as the starting point for a more complex model.
In the E-step of Model 1, the lexicon parameter counts for one sentence pair (e, f)
are calculated:
c(f | e; e, f) =
Pr(a | e, f)
δ(f, fj)δ(e, eaj)
Here, N(e, f) is the training corpus count of the sentence pair (f, e). In the M-step, the
lexicon parameters are computed:
p(f | e) =
s c(f | e; fs, es)
s,f c(f | e; fs, es)
Similarly, the alignment and fertility probabilities can be estimated for all other alignment models . When bootstrapping
from a simpler model to a more complex model, the simpler model is used to weigh the
alignments, and the counts are accumulated for the parameters of the more complex
In principle, the sum over all (I +1)J alignments has to be calculated in the E-step.
Evaluating this sum by explicitly enumerating all alignments would be infeasible.
Fortunately, Models 1 and 2 and HMM have a particularly simple mathematical form
such that the EM algorithm can be implemented efﬁciently (i.e., in the E-step, it is
possible to efﬁciently evaluate all alignments). For the HMM, this is referred to as the
Baum-Welch algorithm .
Since we know of no efﬁcient way to avoid the explicit summation over all alignments in the EM algorithm in the fertility-based alignment models, the counts are
collected only over a subset of promising alignments. For Models 3 to 6, we perform
the count collection only over a small number of good alignments. To keep the training
fast, we consider only a small fraction of all alignments. We compare three different
methods for using subsets of varying sizes:
The simplest method is to perform Viterbi training using only the best
alignment found. As the Viterbi alignment computation itself is very
time consuming for Models 3 to 6, the Viterbi alignment is computed
only approximately, using the method described in Brown, Della Pietra,
Della Pietra, and Mercer .
Al-Onaizan et al. suggest using as well the neighboring
alignments of the best alignment found. (For an exact deﬁnition of the
neighborhood of an alignment, the reader is referred to the Appendix.)
Brown, Della Pietra, Della Pietra, and Mercer use an even larger
set of alignments, including also the pegged alignments, a large set of
alignments with a high probability Pr(f J
1). The method for
constructing these alignments guarantees that for each lexical relationship in every
sentence pair, at least one alignment is considered.
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
In Section 6, we show that by using the HMM instead of Model 2 in bootstrapping the fertility-based alignment models, the alignment quality can be signiﬁcantly
improved. In the Appendix, we present an efﬁcient training algorithm of the fertilitybased alignment models.
3.2 Is Deﬁciency a Problem?
When using the EM algorithm on the standard versions of Models 3 and 4, we observe
that during the EM iterations more and more words are aligned with the empty word.
This results in a poor alignment quality, because too many words are aligned to the
empty word. This progressive increase in the number of words aligned with the empty
word does not occur when the other alignment models are used. We believe that this
is due to the deﬁciency of Model 3 and Model 4.
The use of the EM algorithm guarantees that the likelihood increases for each
iteration. This holds for both deﬁcient and nondeﬁcient models. For deﬁcient models,
however, as the amount of deﬁciency in the model is reduced, the likelihood increases.
In Models 3 and 4 as deﬁned in Brown, Della Pietra, Della Pietra, and Mercer ,
the alignment model for nonempty words is deﬁcient, but the alignment model for
the empty word is nondeﬁcient. Hence, the EM algorithm can increase likelihood by
simply aligning more and more words with the empty word.3
Therefore, we modify Models 3 and 4 slightly, such that the empty word also has
a deﬁcient alignment model. The alignment probability is set to p(j | i, J) = 1/J for each
source word aligned with the empty word. Another remedy, adopted in Och and Ney
 , is to choose a value for the parameter p1 of the empty-word fertility and keep
3.3 Smoothing
To overcome the problem of overﬁtting on the training data and to enable the models
to cope better with rare words, we smooth the alignment and fertility probabilities. For
the alignment probabilities of the HMM (and similarly for Models 4 and 5), we perform
an interpolation with a uniform distribution p(i | j, I) = 1/I using an interpolation
parameter α:
p′(aj | aj−1, I) = (1 −α) · p(aj | aj−1, I) + α · 1
For the fertility probabilities, we assume that there is a dependence on the number
of letters g(e) of e and estimate a fertility distribution p(φ | g) using the EM algorithm.
Typically, longer words have a higher fertility. By making this assumption, the model
can learn that the longer words usually have a higher fertility than shorter words.
Using an interpolation parameter β, the fertility distribution is then computed as
p′(φ | e) =
· p(φ | e) +
β + n(e) · p(φ | g(e))
Here, n(e) denotes the frequency of e in the training corpus. This linear interpolation
ensures that for frequent words (i.e., n(e) ≫β), the speciﬁc distribution p(φ | e) dominates, and that for rare words (i.e., n(e) ≪β), the general distribution p(φ | g(e))
dominates.
The interpolation parameters α and β are determined in such a way that the
alignment quality on held-out data is optimized.
3 This effect did not occur in Brown, Della Pietra, Della Pietra, and Mercer , as Models 3 and 4
were not trained directly.
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
3.4 Bilingual Dictionary
A conventional bilingual dictionary can be considered an additional knowledge source
that can be used in training. We assume that the dictionary is a list of word strings
(e, f). The entries for each language can be a single word or an entire phrase.
To integrate a dictionary into the EM algorithm, we compare two different
Brown, Della Pietra, Della Pietra, Goldsmith, et al. developed a
multinomial model for the process of constructing a dictionary (by a
human lexicographer). By applying suitable simpliﬁcations, the method
boils down to adding every dictionary entry (e, f) to the training corpus
with an entry-speciﬁc count called effective multiplicity, expressed as
µ(e, f) = λ(e) · p(f | e)
1 −eλ(e)·p(f|e)
In this section, λ(e) is an additional parameter describing the size of the
sample that is used to estimate the model p(f | e). This count is then
used instead of N(e, f) in the EM algorithm as shown in equation (35).
Och and Ney suggest that the effective multiplicity of a dictionary
entry be set to a large value µ+ ≫1 if the lexicon entry actually occurs
in one of the sentence pairs of the bilingual corpus and to a low value
otherwise:
if e and f co-occur
As a result, only dictionary entries that indeed occur in the training
corpus have a large effect in training. The motivation behind this is to
avoid a deterioration of the alignment as a result of out-of-domain
dictionary entries. Every entry in the dictionary that does co-occur in the
training corpus can be assumed correct and should therefore obtain a
high count. We set µ−= 0.
4. Symmetrization
In this section, we describe various methods for performing a symmetrization of our
directed statistical alignment models by applying a heuristic postprocessing step that
combines the alignments in both translation directions (source to target, target to
The baseline alignment model does not allow a source word to be aligned with
more than one target word. Therefore, lexical correspondences like that of the German
compound word Zahnarzttermin with the English dentist’s appointment cause problems,
because a single source word must be mapped to two or more target words. Therefore,
the resulting Viterbi alignment of the standard alignment models has a systematic loss
in recall.
To solve this problem, we perform training in both translation directions (source to
target, target to source). As a result, we obtain two alignments aJ
1 for each pair
of sentences in the training corpus. Let A1 = {(aj, j) | aj > 0} and A2 = {(i, bi) | bi > 0}
denote the sets of alignments in the two Viterbi alignments. To increase the quality
of the alignments, we combine A1 and A2 into one alignment matrix A using the
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
following combination methods:
Intersection: A = A1 ∩A2.
Union: A = A1 ∪A2.
Reﬁned method: In a ﬁrst step, the intersection A = A1 ∩A2 is
determined. The elements of this intersection result from both Viterbi
alignments and are therefore very reliable. Then, we extend the
alignment A iteratively by adding alignments (i, j) occurring only in the
alignment A1 or in the alignment A2 if neither fj nor ei has an alignment
in A, or if both of the following conditions hold:
The alignment (i, j) has a horizontal neighbor (i −1, j), (i + 1, j)
or a vertical neighbor (i, j −1), (i, j + 1) that is already in A.
The set A ∪{(i, j)} does not contain alignments with both
horizontal and vertical neighbors.
Obviously, the intersection of the two alignments yields an alignment consisting of
only one-to-one alignments with a higher precision and a lower recall than either
one separately. The union of the two alignments yields a higher recall and a lower
precision of the combined alignment than either one separately. Whether a higher
precision or a higher recall is preferred depends on the ﬁnal application for which
the word alignment is intended. In applications such as statistical machine translation
 , a higher recall is more important ,
so an alignment union would probably be chosen. In lexicography applications, we
might be interested in alignments with a very high precision obtained by performing
an alignment intersection.
5. Evaluation Methodology
In the following, we present an annotation scheme for single-word-based alignments
and a corresponding evaluation criterion.
It is well known that manually performing a word alignment is a complicated
and ambiguous task . Therefore, in performing the alignments for
the research presented here, we use an annotation scheme that explicitly allows for
ambiguous alignments. The persons conducting the annotation are asked to specify
alignments of two different kinds: an S (sure) alignment, for alignments that are unambiguous, and a P (possible) alignment, for ambiguous alignments. The P label is
used especially to align words within idiomatic expressions and free translations and
missing function words (S ⊆P).
The reference alignment thus obtained may contain many-to-one and one-to-many
relationships. Figure 2 shows an example of a manually aligned sentence with S and
The quality of an alignment A = {(j, aj) | aj > 0} is then computed by appropriately
redeﬁned precision and recall measures:
recall = |A ∩S|
, precision = |A ∩P|
and the following alignment error rate (AER), which is derived from the well-known
F-measure:
AER(S, P; A) = 1 −|A ∩S| + |A ∩P|
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
A manual alignment with S (ﬁlled squares) and P (unﬁlled squares) connections.
These deﬁnitions of precision, recall and the AER are based on the assumption
that a recall error can occur only if an S alignment is not found and a precision error
can occur only if the found alignment is not even P.
The set of sentence pairs for which the manual alignment is produced is randomly
selected from the training corpus. It should be emphasized that all the training of the
models is performed in a completely unsupervised way (i.e., no manual alignments
are used). From this point of view, there is no need to have a test corpus separate from
the training corpus.
Typically, the annotation is performed by two human annotators, producing sets
S1, P1, S2, P2. To increase the quality of the resulting reference alignment, the annotators are presented with the mutual errors and asked to improve their alignments
where possible. (Mutual errors of the two annotators A and B are the errors in the
alignment of annotator A if we assume the alignment of annotator B as reference and
the errors in the alignment of annotator B if we assume the alignment of annotator A
as reference.) From these alignments, we ﬁnally generate a reference alignment that
contains only those S connections on which both annotators agree and all P connections from both annotators. This can be accomplished by forming the intersection of
the sure alignments (S = S1∩S2) and the union of the possible alignments (P = P1∪P2),
respectively. By generating the reference alignment in this way, we obtain an alignment
error rate of 0 percent when we compare the S alignments of every single annotator
with the combined reference alignment.
6. Experiments
We present in this section results of experiments involving the Verbmobil and Hansards
tasks. The Verbmobil task is a (German-English) speech translation task
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
Corpus characteristics of the Verbmobil task.
Training corpus
Vocabulary
Singletons
Bilingual dictionary
Test corpus
Corpus characteristics of the Hansards task.
Training corpus
Vocabulary
Singletons
Bilingual dictionary
Test corpus
in the domain of appointment scheduling, travel planning, and hotel reservation. The
bilingual sentences used in training are correct transcriptions of spoken dialogues.
However, they include spontaneous speech effects such as hesitations, false starts, and
ungrammatical phrases. The French-English Hansards task consists of the debates in
the Canadian parliament. This task has a very large vocabulary of about 100,000 French
words and 80,000 English words.4
Statistics for the two corpora are shown in Tables 2 and 3. The number of running
words and the vocabularies are based on full-form words and the punctuation marks.
We produced smaller training corpora by randomly choosing 500, 2,000 and 8,000
sentences from the Verbmobil task and 500, 8,000, and 128,000 sentences from the
Hansards task.
For both tasks, we manually aligned a randomly chosen subset of the training
corpus. From this subset of the corpus, the ﬁrst 100 sentences are used as the development corpus to optimize the model parameters that are not trained via the EM
4 We do not use the Blinker annotated corpus described in Melamed , since the domain is very
special (the Bible) and a different annotation methodology is used.
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
Comparison of alignment error rate percentages for various training schemes (Verbmobil task;
Dice+C: Dice coefﬁcient with competitive linking).
Size of training corpus
Training scheme
15H5334353
15H5334363
algorithm (e.g., the smoothing parameters). The remaining sentences are used as the
test corpus.
The sequence of models used and the number of training iterations used for each
model is referred to in the following as the training scheme. Our standard training scheme on Verbmobil is 15H5334363. This notation indicates that ﬁve iterations
of Model 1, ﬁve iterations of HMM, three iterations of Model 3, three iterations
of Model 4, and three iterations of Model 6 are performed. On Hansards, we use
15H10334363. This training scheme typically gives very good results and does not lead
to overﬁtting. We use the slightly modiﬁed versions of Model 3 and Model 4 described
in Section 3.2 and smooth the fertility and the alignment parameters. In the E-step of
the EM algorithm for the fertility-based alignment models, we use the Viterbi alignment and its neighborhood. Unless stated otherwise, no bilingual dictionary is used
in training.
6.1 Models and Training Schemes
Tables 4 and 5 compare the alignment quality achieved using various models and
training schemes. In general, we observe that the reﬁned models (Models 4, 5, and 6)
yield signiﬁcantly better results than the simple Model 1 or Dice coefﬁcient. Typically,
the best results are obtained with Model 6. This holds across a wide range of sizes
for the training corpus, from an extremely small training corpus of only 500 sentences
up to a training corpus of 1.5 million sentences. The improvement that results from
using a larger training corpus is more signiﬁcant, however, if more reﬁned models are
used. Interestingly, even on a tiny corpus of only 500 sentences, alignment error rates
under 30% are achieved for all models, and the best models have error rates somewhat
under 20%.
We observe that the alignment quality obtained with a speciﬁc model heavily
depends on the training scheme that is used to bootstrap the model.
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
Comparison of alignment error rate percentages for various training schemes (Hansards task;
Dice+C: Dice coefﬁcient with competitive linking).
Size of training corpus
Training scheme
15H5334353
15H5334363
Comparison of alignment error rate (in percent) for Model 1 and Dice coefﬁcient (left: 34K
Verbmobil task, right: 128K Hansards task).
6.2 Heuristic Models versus Model 1
We pointed out in Section 2 that from a theoretical viewpoint, the main advantage
of statistical alignment models in comparison to heuristic models is the well-founded
mathematical theory that underlies their parameter estimation. Tables 4 and 5 show
that the statistical alignment models signiﬁcantly outperform the heuristic Dice coef-
ﬁcient and the heuristic Dice coefﬁcient with competitive linking (Dice+C). Even the
simple Model 1 achieves better results than the two Dice coefﬁcient models.
It is instructive to analyze the alignment quality obtained in the EM training of
Model 1. Figure 3 shows the alignment quality over the iteration numbers of Model 1.
We see that the ﬁrst iteration of Model 1 achieves signiﬁcantly worse results than the
Dice coefﬁcient, but by only the second iteration, Model 1 gives better results than the
Dice coefﬁcient.
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
Effect of using more alignments in training fertility models on alignment error rate (Verbmobil
task). Body of table presents error rate percentages.
Size of training corpus
Training scheme
Alignment set
15H5334363
+neighbors
1525334353
+neighbors
Effect of using more alignments in training fertility models on alignment error rate (Hansards
task). Body of table presents error rate percentages.
Size of training corpus
Training scheme
Alignment set
15H10334363
+neighbors
1525334353
+neighbors
6.3 Model 2 versus HMM
An important result of these experiments is that the hidden Markov alignment model
achieves signiﬁcantly better results than Model 2. We attribute this to the fact that the
HMM is a homogeneous ﬁrst-order alignment model, and such models are able to
better represent the locality and monotonicity properties of natural languages. Both
models have the important property of allowing an efﬁcient implementation of the
EM algorithm (Section 3). On the largest Verbmobil task, the HMM achieves an improvement of 3.8% over Model 2. On the largest Hansards task, the improvement is
8.7%. Interestingly, this advantage continues to hold after bootstrapping more reﬁned
models. On Model 4, the improvement is 1.4% and 4.8%, respectively.
We conclude that it is important to bootstrap the reﬁned alignment models with
good initial parameters. Obviously, if we use Model 2 for bootstrapping, we eventually
obtain a poor local optimum.
6.4 The Number of Alignments in Training
In Tables 6 and 7, we compare the results obtained by using different numbers of
alignments in the training of the fertility-based alignment models. We compare the
three different approaches described in Section 3: using only the Viterbi alignment,
using in addition the neighborhood of the Viterbi alignment, and using the pegged
alignments. To reduce the training time, we restrict the number of pegged alignments
by using only those in which Pr(f, a | e) is not much smaller than the probability of the
Viterbi alignment. This reduces the training time drastically. For the large Hansards
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
Computing time on the 34K Verbmobil task (on 600 MHz Pentium III machine).
Seconds per iteration
Alignment set
+neighbors
Effect of smoothing on alignment error rate (Verbmobil task, Model 6). Body of table presents
error rate percentages.
Size of training corpus
Smoothing method
Alignment and fertility
corpus, however, there still is an unacceptably large training time. Therefore, we report
the results for only up to 128,000 training sentences.
The effect of pegging strongly depends on the quality of the starting point used
for training the fertility-based alignment models. If we use Model 2 as the starting
point, we observe a signiﬁcant improvement when we use the neighborhood alignments and the pegged alignments. If we use only the Viterbi alignment, the results are
signiﬁcantly worse than using additionally the neighborhood of the Viterbi alignment.
If we use HMM as the starting point, we observe a much smaller effect. We conclude
that using more alignments in training is a way to avoid a poor local optimum.
Table 8 shows the computing time for performing one iteration of the EM algorithm. Using a larger set of alignments increases the training time for Model 4 and
Model 5 signiﬁcantly. Since using the pegging alignments yields only a moderate
improvement in performance, all following results are obtained by using the neighborhood of the Viterbi alignment without pegging.
6.5 Effect of Smoothing
Tables 9 and 10 show the effect on the alignment error rate of smoothing the alignment
and fertility probabilities.
We observe a signiﬁcant improvement when we smooth
the alignment probabilities and a minor improvement when we smooth the fertility
probabilities. An analysis of the alignments shows that smoothing the fertility probabilities signiﬁcantly reduces the frequently occurring problem of rare words forming
“garbage collectors” in that they tend to align with too many words in the other
language .
Without smoothing, we observe early overﬁtting: The alignment error rate increases after the second iteration of HMM, as shown in Figure 4. On the Verbmobil
task, the best alignment error rate is obtained in the second iteration. On the Hansards
task, the best alignment error rate is obtained in the sixth iteration. In iterations subsequent to the second on the Verbmobil task and the sixth on the Hansards task, the
alignment error rate increases signiﬁcantly. With smoothing of the alignment param-
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
Overﬁtting on the training data with the hidden Markov alignment model using various
smoothing parameters (top: 34K Verbmobil task, bottom: 128K Hansards task).
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
Effect of smoothing on alignment error rate (Hansards task, Model 6). Body of table presents
error rate percentages.
Size of training corpus
Smoothing method
Alignment and fertility
Effect of word classes on alignment error rate (Verbmobil task). Body of table presents error
rate percentages.
Size of training corpus
Word classes
Effect of word classes on alignment error rate (Hansards task). Body of table presents error
rate percentages.
Size of training corpus
Word classes
eters, we obtain a lower alignment error rate, overﬁtting occurs later in the process,
and its effect is smaller.
6.6 Alignment Models Depending on Word Classes
Tables 11 and 12 show the effects of including a dependence on word classes in the
alignment model, as described in Section 2.3.
The word classes are always trained
on the same subset of the training corpus as is used for the training of the alignment models. We observe no signiﬁcant improvement in performance as a result
of including dependence on word classes when a small training corpus is used. A
possible reason for this lack of improvement is that either the word classes themselves or the resulting large number of alignment parameters cannot be estimated
reliably using a small training corpus. When a large training corpus is used, however,
there is a clear improvement in performance on both the Verbmobil and the Hansards
6.7 Using a Conventional Bilingual Dictionary
Tables 13 and 14 show the effect of using a conventional bilingual dictionary in training
on the Verbmobil and Hansards tasks, respectively. We compare the two methods for
using the dictionary described in Section 3.4. We observe that the method with a ﬁxed
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
Effect of using a conventional dictionary on alignment error rate (Verbmobil task). Body of
table presents error rate percentages.
Size of training corpus
Bilingual dictionary
Yes/µ var.
Yes/µ+ = 8
Yes/µ+ = 16
Yes/µ+ = 32
Effect of using a conventional dictionary on alignment error rate (Hansards task). Body of
table presents error rate percentages.
Size of training corpus
Bilingual dictionary
Yes/µ var.
Yes/µ+ = 8
Yes/µ+ = 16
Yes/µ+ = 32
threshold of µ+ = 16 gives the best results. The method with a varying µ gives worse
results, but this method has one fewer parameter to be optimized on held-out data.
On small corpora, there is an improvement of up to 6.7% on the Verbmobil task
and 3.2% on the Hansards task, but when a larger training corpus is used, the improvements are reduced to 1.1% and 0.4%, respectively. Interestingly, the amount
of the overall improvement contributed by the use of a conventional dictionary is
small compared to the improvement achieved through the use of better alignment
6.8 Generalized Alignments
In this section, we compare the results obtained using different translation directions
and using the symmetrization methods described in Section 4. Tables 15 and 16 show
precision, recall, and alignment error rate for the last iteration of Model 6 for both
translation directions. In this experiment, we use the conventional dictionary as well.
Particularly for the Verbmobil task, with the language pair German-English, we observe that for German as the source language the alignment error rate is much higher
than for English as source language. A possible reason for this difference in the alignment error rates is that the baseline alignment representation as a vector aJ
1 does not
allow German word compounds (which occur frequently) to be aligned with more
than one English word.
The effect of merging alignments by forming the intersection, the union, or the
reﬁned combination of the Viterbi alignments in both translation directions is shown in
Tables 17 and 18. Figure 5 shows the corresponding precision/recall graphs. By using
the reﬁned combination, we can increase precision and recall on the Hansards task. The
lowest alignment error rate on the Hansards task is obtained by using the intersection
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
Effect of training corpus size and translation direction on precision, recall, and alignment error
rate (Verbmobil task + dictionary). All ﬁgures are percentages.
English →German
German →English
Corpus size
Effect of training corpus size and translation direction on precision, recall, and alignment error
rate (Hansards task + dictionary). All ﬁgures are percentages.
English →French
French →English
Corpus size
Effect of alignment combination on precision, recall, and alignment error rate (Verbmobil task
+ dictionary). All ﬁgures are percentages.
Intersection
Reﬁned method
Corpus size
Effect of alignment combination on precision, recall, and alignment error rate (Hansards task +
dictionary). All ﬁgures are percentages.
Intersection
Reﬁned method
Corpus size
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
Effect of various symmetrization methods on precision and recall for different training corpus
sizes (top: Verbmobil task, bottom: Hansards task).
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
method. By forming a union or intersection of the alignments, we can obtain very high
recall or precision values on both the Hansards task and the Verbmobil task.
6.9 Effect of Alignment Quality on Translation Quality
Alignment models similar to those studied in this article have been used as a starting point for reﬁned phrase-based statistical machine translation systems . In Och
and Ney , the overall result of the experimental evaluation has been that an
improved alignment quality yields an improved subjective quality of the statistical
machine translation system as well.
7. Conclusion
In this article, we have discussed in detail various statistical and heuristic word alignment models and described various modiﬁcations and extensions to models known in
the literature. We have developed a new statistical alignment model (Model 6) that has
yielded the best results among all the models we considered in the experiments we
have conducted. We have presented two methods for including a conventional bilingual dictionary in training and described heuristic symmetrization algorithms that
combine alignments in both translation directions possible between two languages,
producing an alignment with a higher precision, a higher recall, or an improved alignment error rate.
We have suggested measuring the quality of an alignment model using the quality
of the Viterbi alignment compared to that achieved in a manually produced reference
alignment. This quality measure has the advantage of automatic evaluation. To produce the reference alignment, we have used a reﬁned annotation scheme that reduces
the problems and ambiguities associated with the manual construction of a word
alignment.
We have performed various experiments to assess the effect of different alignment
models, training schemes, and knowledge sources. The key results of these experiments are as follows:
Statistical alignment models outperform the simple Dice coefﬁcient.
The best results are obtained with our Model 6. In general, very
important ingredients of a good model seem to be a ﬁrst-order
dependence between word positions and a fertility model.
Smoothing and symmetrization have a signiﬁcant effect on the alignment
quality achieved by a particular model.
The following methods have only a minor effect on the quality of
alignment achieved by a particular model:
adding entries of a conventional bilingual dictionary to the
training data.
making the alignment models dependent on word classes (as in
Models 4 and 5).
increasing the number of alignments used in the approximation
of the EM algorithm for the fertility-based alignment models.
Further improvements in alignments are expected to be produced through the
adoption of cognates and from statistical alignment
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
models based on word groups rather than single words . The use of models that explicitly deal with the hierarchical structures of natural
language is very promising .
We plan to develop structured models for the lexicon, alignment, and fertility probabilities using maximum-entropy models. This is expected to allow an easy integration
of more dependencies, such as in a second-order alignment model, without running
into the problem of the number of alignment parameters getting unmanageably large.
Furthermore, it will be important to verify the applicability of the statistical alignment models examined in this article to less similar language pairs such as Chinese-
English and Japanese-English.
Appendix: Efﬁcient Training of Fertility-Based Alignment Models
In this Appendix, we describe some methods for efﬁcient training of fertility-based
alignment models. The core idea is to enumerate only a small subset of good alignments in the E-step of the EM algorithm instead of enumerating all (I + 1)J alignments. This small subset of alignments is the set of neighboring alignments of the
best alignment that can be found by a greedy search algorithm. We use two operators
to transform alignments: The move operator m[i,j](a) changes aj := i, and the swap
operator s[j1,j2](a) exchanges aj1 and aj2. The neighborhood N(a) of an alignment a is
then deﬁned as the set of all alignments that differ by one move or one swap from
alignment a:
N(a) = {a′ : ∃i,j : a′ = m[i,j](a) ∨∃j1,j2 : a′ = s[j1,j2](a)}
For one step of the greedy search algorithm, we deﬁne the following hill-climbing
operator (for Model 3), which yields for an alignment a the most probable alignment
b(a) in the neighborhood N(a):
b(a) = argmax
p3(a′ | e, f)
Similarly, we deﬁne a hill-climbing operator for the other alignment models.
Straightforward Implementation
A straightforward count collection procedure for a sentence pair (f,e) following the
description in Brown, Della Pietra, Della Pietra, and Mercer is as follows:5
Calculate the Viterbi alignment of Model 2: a0 := argmaxa p2(f, a | e),
While in the neighborhood N(an) an alignment a′ exists with
p3(a′ | e, f) > p3(an | e, f):
Set an+1 to the best alignment in the neighborhood.
n := n + 1.
Pr(f, a | e)
5 To simplify the description, we ignore the process known as pegging, which generates a bigger number
of alignments considered in training.
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
For each alignment a in the neighborhood N(an)
Pr(a | e, f)
Pr(f, a | e)
For each j := 1 to J: Increase alignment counts
c(j | aj, m, l; e, f) := c(j | aj, m, l; e, f) + p
For each i := 1 to I: Increase the fertility counts with p:
c(φi | ei; e, f) := c(φi | ei; e, f) + p
Increase the counts for p1:
c(1; e, f) := c(1; e, f) + p · φ0
A major part of the time in this procedure is spent on calculating the probability
Pr(a′ | e, f) of an alignment a′. In general, this takes about (I + J) operations. Brown,
Della Pietra, Della Pietra, and Mercer describe a method for obtaining Pr(a′ |
e, f) incrementally from Pr(a | e, f) if alignment a differs only by moves or swaps from
alignment a′. This method results in a constant number of operations that is sufﬁcient
to calculate the score of a move or the score of a swap.
Reﬁned Implementation: Fast Hill Climbing
Analyzing the training program reveals that most of the time is spent on the computation of the costs of moves and swaps. To reduce the number of operations required
in such computation, these values are cached in two matrices. We use one matrix for
the scores of a move aj := i:
Mij = Pr(m[i,j](a) | e, f)
Pr(a | e, f)
· (1 −δ(aj, i))
and an additional matrix for the scores of a swap of aj and aj′:
Pr(s[j,j′](a) | e, f)
Pr(a | e, f)
· (1 −δ(aj, aj′))
During the hill climbing, it is sufﬁcient, after making a move or a swap, to update
only those rows or columns in the matrix that are affected by the move or swap. For
example, when performing a move aj := i, it is necessary to
update in matrix M the columns j′ with aj′ = aj or aj′ = i.
update in matrix M the rows aj and i.
update in matrix S the rows and the columns j′ with aj′ = aj or aj′ = i.
Similar updates have to be performed after a swap. In the count collection (step 3), it
is possible to use the same matrices as obtained in the last hill-climbing step.
By restricting in this way the number of matrix entries that need to be updated,
it is possible to reduce the number of operations in hill climbing by about one order
of magnitude.
Downloaded from by guest on 26 March 2025
Computational Linguistics
Volume 29, Number 1
Reﬁned Implementation: Fast Count Collection
The straightforward algorithm given for performing the count collection has the disadvantage of requiring that all alignments in the neighborhood of alignment a be
enumerated explicitly. In addition, it is necessary to perform a loop over all targets
and a loop over all source positions to update the lexicon/alignment and the fertility counts. To perform the count collection in an efﬁcient way, we use the fact that
the alignments in the neighborhood N(a) are very similar. This allows the sharing of
many operations in the count collection process.
To efﬁciently obtain the alignment and lexicon probability counts, we introduce the
following auxiliary quantities that use the move and swap matrices that are available
after performing the hill climbing described above:
probability of all alignments in the neighborhood N(a):
Pr(N(a) | e, f)
Pr(a′ | e, f)
Pr(a | e, f) ·
probability of all alignments in the neighborhood N(a) that differ in
position j from alignment a:
Pr(Nj(a) | e, f)
Pr(a′ | e, f)(1 −δ(aj, a′
Pr(a | e, f)
(Sjj ′ + Sj′j)
For the alignment counts c(j | i; e, f) and the lexicon counts c(f | e; e, f), we have
c(j | i; e, f)
Pr(N(a) | e, f)−Pr(Nj(a) | e, f)
Pr(a | e, f)
j′ δ(aj′, i)·(Sjj ′ +Sj′j)
c(f | e; e, f)
c(j | i; e, f) · δ(f, fj) · δ(e, ei)
To obtain the fertility probability counts and the count for p1 efﬁciently, we introduce the following auxiliary quantities:
probability of all alignments that have an increased fertility for position i:
(a) | e, f) = Pr(a | f, e)
(1 −δ(aj, i)) · Mij
probability of all alignments that have a decreased fertility for position i:
(a) | e, f) = Pr(a | e, f)
Downloaded from by guest on 26 March 2025
Och and Ney
Comparison of Statistical Alignment Models
probability of all alignments that have an unchanged fertility for position i:
(a) | e, f)
Pr(N(a) | e, f)
(a) | e, f) −Pr(N −1
(a) | e, f)
These quantities do not depend on swaps, since a swap does not change the fertilities
of an alignment. For the fertility counts, we have:
c(φ | e; e, f) =
(a) | e, f)δ(φi + k, φ)
For p1, we have:
c(1; e, f) =
0 (a) | e, f)(φ0 + k)
Using the auxiliary quantities, a count collection algorithm can be formulated that
requires about O(max(I, J)2) operations. This is one order of magnitude faster than the
straightforward algorithm described above. In practice, we observe that the resulting
training is 10–20 times faster.
Acknowledgments
This work has been partially supported as
part of the Verbmobil project (contract
number 01 IV 701 T4) by the German
Federal Ministry of Education, Science,
Research and Technology and as part of the
EuTrans project (project number 30268) by
the European Union. In addition, this work
has been partially supported by the
National Science Foundation under grant
no. IIS-9820687 through the 1999 Workshop
on Language Engineering, Center for
Language and Speech Processing, Johns
Hopkins University. All work for this paper
was done at RWTH Aachen.