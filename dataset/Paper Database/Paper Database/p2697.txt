Quantum Machine Learning
Jacob Biamonte1,2,*, Peter Wittek3, Nicola Pancotti4, Patrick
Rebentrost5, Nathan Wiebe6, and Seth Lloyd7
* 
1Quantum Software Initiative, Skolkovo Institute of Science and
Technology, Skoltech Building 3, Moscow 143026, Russia
2Institute for Quantum Computing, University of Waterloo,
Waterloo, N2L 3G1 Ontario, Canada
3ICFO-The Institute of Photonic Sciences, Castelldefels (Barcelona),
08860 Spain
4Max Planck Institute of Quantum Optics , Hans-Kopfermannstr. 1,
D-85748 Garching, Germany
5Massachusetts Institute of Technology, Research Laboratory of
Electronics, Cambridge, MA 02139
6Station Q Quantum Architectures and Computation Group,
Microsoft Research, Redmond WA 98052
7Massachusetts Institute of Technology, Department of Mechanical
Engineering, Cambridge MA 02139 USA
May 14, 2018
Fuelled by increasing computer power and algorithmic advances, machine learning techniques have become powerful tools for ﬁnding patterns
in data. Since quantum systems produce counter-intuitive patterns believed not to be eﬃciently produced by classical systems, it is reasonable
to postulate that quantum computers may outperform classical computers on machine learning tasks. The ﬁeld of quantum machine learning
explores how to devise and implement concrete quantum software that
oﬀers such advantages. Recent work has made clear that the hardware
and software challenges are still considerable but has also opened paths
towards solutions.
Introduction
Long before they possessed computers, human beings strove to ﬁnd patterns in
data. Ptolemy ﬁt observations of the motions of the stars to a geocentric model of
 
the cosmos, with complex epicycles to explain retrograde motions of the planets.
In the 16th century, Kepler analyzed the data of Copernicus and Brahe to reveal
a previously hidden pattern: planets move in ellipses with the sun at one focus
of the ellipse. The analysis of astronomical data to reveal such patterns gave
rise to mathematical techniques such as methods for solving linear equations
(Newton-Gauss), learning optima via gradient descent (Newton), polynomial
interpolation (Lagrange), and least-squares ﬁtting (Laplace). The nineteenth
and early twentieth century gave rise to a broad range of mathematical methods
for analyzing data to learn the patterns that it contained.
The construction of digital computers in the mid 20th century allowed
the automation of data analysis techniques. Over the past half century, the
rapid progression of computer power has allowed the implementation of linear
algebraic data analysis techniques such as regression and principal component
analysis, and lead to more complex learning methods such as support vector
machines. Over the same time frame, the development and rapid advance of
digital computers spawned novel machine learning methods. Artiﬁcial neural
networks such as perceptrons were implemented in the 1950s , as soon as
computers had the power to realize them. Deep learning built on neural networks
such as Hopﬁeld networks and Boltzmann machines, and training methods such
as back propagation, were introduced and implemented in the 1960s to 1990s .
In the past decade, particularly in the past ﬁve years, the combination of powerful
computers and special-purpose information processors capable of implementing
deep networks with billions of weights , together with their application to very
large data sets, has revealed that such deep learning networks are capable of
learning complex and subtle patterns in data.
Quantum mechanics is well-known to generate counter intuitive patterns
in data. Classical machine learning methods such as deep neural networks
frequently have the feature that they can both recognize statistical patterns in
data, and produce data that possess the same statistical patterns: they recognize
the patterns that they produce. This observation suggests the following hope. If
small quantum information processors can produce statistical patterns that are
computationally diﬃcult to be produced by a classical computer, then perhaps
they can also recognize patterns that are equally diﬃcult to recognize classically.
The realization of this hope depends on whether eﬃcient quantum algorithms
can be found for machine learning. A quantum algorithm is a set of instructions
solving a problem, for example ﬁnding out whether two graphs are isomorphic,
that can be performed on a quantum computer. Quantum machine learning
software makes use of quantum algorithms as part of a larger implementation.
Analysing the steps that quantum algorithms prescribe, it becomes clear that
they have the potential to outperform classical algorithms for speciﬁc problems.
This potential is known as quantum speedup.
The notion of a quantum speedup depends on whether one takes a formal
computer science perspective—which demands mathematical proofs—or a perspective based on what can be done with realistic, ﬁnite-size devices—which
requires solid statistical evidence of a scaling advantage over some ﬁnite range
of problem sizes. For the case of quantum machine learning, the best possible
performance of classical algorithms isn’t always known. This is similar to the
case of Shor’s polynomial-time quantum algorithm for integer factorization: no
subexponetial-time classical algorithm has been found, but the possibility is not
provably ruled out.
Determination of a scaling advantage contrasting quantum and classical
machine learning would rely on the existence of a quantum computer and is a so
called, benchmarking problem. Such advantages could include improved classiﬁcation accuracy and sampling of classically inaccessible systems. Accordingly,
quantum speedups in machine learning are currently characterized using idealized
measures from complexity theory: query complexity and gate complexity (see
Box 1). Query complexity measures the number of queries to the information
source for the classical or quantum algorithm. A quantum speedup results if
the number of queries needed to solve a problem is lower for the quantum- than
for the classical algorithm. To determine the gate complexity, the number of
elementary quantum operations, or gates, required to obtain the desired result
are counted.
Query and gate complexity are idealized models which quantify the necessary
resources to solve a problem class. Without knowing how to map this idealization
to reality, not much can be said about the necessary resource scaling in a realworld scenario. Therefore, the required resources of classical machine learning
algorithms are mostly quantiﬁed by numerical experimentation. The resource
requirements of quantum machine learning algorithms are likely to be similarly
diﬃcult to quantify in practice. The analysis of their practical feasibility is a
central subject of this review.
As will be seen throughout the review, there are quantum algorithms for
machine learning that exhibit quantum speedups . For example, the
quantum basic linear algebra subroutines (BLAS)—Fourier transforms, ﬁnding eigenvectors and eigenvalues, solving linear equations—exhibit exponential
quantum speedups over their best known classical counterparts . This
quantum BLAS (qBLAS) translates into quantum speedups for a variety of data
analysis and machine learning algorithms including linear algebra, least-squares
ﬁtting, gradient descent, Newton’s method, principal component analysis, linear,
semideﬁnite, and quadratic programming, topological analysis, and support
vector machines . At the same time, special purpose quantum information processors such as quantum annealers and
programmable quantum optical arrays are well-matched to deep learning architectures . While it is not completely clear yet to which extent this
potential is born out in reality, there are reasons to be optimistic that quantum
computers can recognize patterns in data that surpass the reach of classical
computers.
We organize this review as follows. The machines that learn can be either
classical or quantum . The data they analyze can be either classical or quantum states
produced by quantum sensing or measuring apparatus . We brieﬂy discuss
conventional machine learning—the use of classical computers to ﬁnd patterns
in classical data. We then turn to quantum machine learning, where the data
that the quantum computer analyzes can be either classical data, which ends
up encoded as quantum states, or quantum data. Finally, we discuss brieﬂy
the problem of using classical machine learning techniques to ﬁnd patterns in
quantum dynamics.
Box 1. Quantum Speedups
Quantum computers use eﬀects such as quantum coherence and entanglement to
process information in ways that classical computers can not. The past two decades
have seen steady advances in constructing more powerful quantum computers. A
quantum algorithm is a step-wise procedure performed on a quantum computer
to solve a problem, such as searching a database. Quantum machine learning
software makes use of quantum algorithms to process information.
Quantum algorithms can in principal outperform the best known classical
algorithms when solving certain problems. This is known as a quantum speedup
 . The question addressed in this review is how quantum computers and
special-purpose information processors such as quantum annealers could be used
to perform quantum machine learning.
For example, quantum computers can search an unsorted database with N
entries in time proportional to
N—that is O(
N)—where a classical computer
given blackbox access to the same database takes time proportional to N: the
quantum computer exhibits a square root speed up over the classical computer.
Similarly, quantum computers can perform Fourier transforms over N data points,
invert sparse N × N matrices, and ﬁnd their eigenvalues and eigenvectors in time
proportional to a polynomial in log2 N, where the best known algorithms for
classical computers take time proportional to N log2 N: the quantum computer
exhibits an exponential speed up over the best classical computer algorithms. The
following table summarizes the techniques used to achieve speedups for various
quantum-enhanced machine learning subroutines.
In the above table, speedups are taken with respect to their classical counterpart(s)—
N) means quadratic speedup and O(log(N)) means exponential relative
to their classical counterpart. (∗) denotes important caveats that can limit applicability of method and AA denotes amplitude ampliﬁcation.
Bayesian Inference 
Online Perceptron 
Least squares ﬁtting 
O(log N(∗))
Classical BM 
optional/N
Quantum BM 
O(log N(∗))
optional/N
Quantum PCA 
O(log N(∗))
Quantum SVM 
O(log N(∗))
Quantum reinforcement learning 
Classical machine learning
Classical machine learning and data analysis can be divided into several categories.
First, computers can be used to perform ‘classic’ data analysis methods such as
least squares regression, polynomical interpolation, and data analysis. Machine
learning protocols can be supervised or unsupervised. In supervised learning, the
training data is divided into labeled categories, such as samples of handwritten
digits together with the actual number the handwritten digit is supposed to
represent, and the job of the machine is to learn how to assign labels to data
outside the training set. In unsupervised learning, the training set is unlabeled:
the goal of the machine is to ﬁnd the natural categories into which the training
data falls (e.g., diﬀerent types of photos on the internet) and then to categorize
data outside of the training set. Finally, there are machine learning tasks, such as
playing Go, that involve combinations of supervised and unsupervised learning,
together with training sets that may be generated by the machine itself.
Linear-algebra based quantum machine learning
A wide variety of data analysis and machine learning protocols operate by
performing matrix operations on vectors in a high dimensional vector space. But
quantum mechanics is all about matrix operations on vectors in high dimensional
vector spaces.
The key ingredient behind these methods is that the quantum state of n
quantum bits or qubits is a vector in a 2n-dimensional complex vector space;
quantum logic operations or measurements performed on qubits multiplies the
corresponding state vector by 2n × 2n matrices. By building up such matrix
transformations, quantum computers have been shown to perform common
linear algebraic operations such as Fourier transforms , ﬁnding eigenvectors
and eigenvalues , and solving linear sets of equations over 2n-dimensional
vector spaces in time polynomial in n, exponentially faster than their best
known classical counterparts . This latter is commonly referred to as the HHL
algorithm for the authors of the paper see Box 2). The original variant assumed
a well-conditioned matrix that is sparse. Sparsity is unlikely in data science,
but later improvements relaxed this assumption to include low-rank matrices as
well . Going past HHL, here we survey several quantum algorithms
which appear as subroutines when linear algebra techniques are employed in
quantum machine learning software.
Quantum principal component analysis
For example, consider principal component analysis (PCA). Suppose that one’s
data is presented in the form of vectors ⃗vj in a d dimensional vector space.
For example, ⃗vj could be the vector of changes in prices of all stocks in the
stock market from time tj to time tj+1. The covariance matrix of the data is
j , where T denotes the transpose operation: the covariance matrix
summarizes the correlations between the diﬀerent components of the data, e.g.,
correlations between changes in the prices of diﬀerent stocks. In its simplest
form, principal component analysis operates by diagonalizing the covariance
matrix: C = P
k ek⃗ck⃗c†
k, where the ⃗ck are the eigenvectors of C, and ek are
the corresponding eigenvalues. (Because C is symmetric, the eigenvectors ⃗ck
form an orthonormal set.) If only a few of the eigenvalues ck are large, and
the remainder are small or zero, then the eigenvectors corresponding to those
eigenvalues are called the principal components of C. Each principal component
represents an underlying common trend or form of correlation in the data, and
decomposing a data vectors ⃗v in terms of principal components, ⃗v = P
allows one both to compress the representation of the data, and to predict future
behavior. Classical algorithms for performing PCA scale as O(d2) in terms of
computational complexity and query complexity.
For quantum principal component analysis of classical data (qPCA ), we
choose a data vector ⃗vj at random, and use a quantum random access memory
(qRAM ) to map that vector into a quantum state: ⃗vj →|vj⟩. The quantum
state that summarizes the vector has log d qubits, and the operation of the qRAM
requires O(d) operations divided over O(log d) steps that can be performed in
parallel. Because ⃗vj was chosen at random, the resulting quantum state has a
density matrix ρ = (1/N) P
j |vj⟩⟨vj|, where N is the number of data vectors.
Comparing with the covariance matrix C for the classical data we see that the
density matrix for the quantum version of the data is the covariance matrix,
up to an overall factor. Repeatedly sampling the data, and using a trick called
density matrix exponentiation combined with the quantum phase estimation
algorithm , which ﬁnds eigenvectors and eigenvalues of matrices, allowing
one to take the quantum version of any data vector |⃗v⟩and to decompose it
into the principal components |ck⟩, revealing the eigenvalue of C at the same
time:|v⟩→P
k vk|ck⟩|˜ek⟩. The properties of the principal components of C can
then be probed by making measurements on the quantum representation of
the eigenvectors of C. The quantum algorithm scales as O
 (log d)2
computational complexity and query complexity. That is, quantum PCA is
exponentially more eﬃcient than classical PCA.
Quantum support vector machines and kernel methods
The simplest examples of supervised ML algorithms are linear support vector
machines and perceptrons. These methods seek to ﬁnd an optimal separating
hyperplane between two classes of data in a data set such that, with high
probability, all training examples of one class are only found on one side of the
hyperplane. The most robust classiﬁer for the data is given when the margin
between the hyperplane and the data is maximized. Here the “weights” learned
in the training are the parameters of the hyperplane. One of the greatest powers
of the SVM lies in its generalization to nonlinear hyper-surfaces via kernel
functions . Such classiﬁers have found great success in image segmentation
as well as in the biological sciences.
As its classical counterpart, the quantum support vector machine is a paradigmatic example of a quantum machine learning algorithm . A ﬁrst quantum
support vector machine was discussed in the early 2000s , using a variant
of Grover’s search for function minimization . Finding s support vectors
out of N vectors consequently takes
N/s iterations. Recently a least-squares
quantum support vector machine was developed that harnesses the full power
of the qBLAS subroutines. The data input can come from various sources,
such as from qRAM accessing classical data or a quantum subroutine preparing
quantum states. Once the data are made available to the quantum computing
device, they are processed with quantum phase estimation and matrix inversion
(the HHL algorithm). All the operations required to construct the optimal
separating hyperplane and to test whether a vector lies on one side or the other
can in principle be performed in time poly(log N) where N is the dimension
of the matrix required to prepare a quantum version of the hyperplane vector.
Polynomial and radial basis function kernels are discussed, as well as
another kernel-based method called Gaussian process regression . This approach to quantum support machines has been experimentally demonstrated in
a nuclear magnetic resonance testbed for a hand-written digit recognition task
Box 2. HHL Algorithm
The HHL algorithm for inverting systems of equations is a fundamental, and easy to
understand subroutine, underpinning many quantum machine learning algorithms. The
algorithm seeks to solve A⃗x = ⃗b using a quantum computer. HHL quantizes the problem
by expressing the vector ⃗b ∈CN as a quantum state |b⟩over log2 N qubits, and the
vector ⃗x as a quantum state |x⟩. The matrix A can be assumed to be Hermitian without
loss of generality because the space can always be expanded to make this true. The
equation A|x⟩= |b⟩can then be solved by multiplying both sides of the equation by A−1.
The Harrow, Hassidim and Lloyd algorithm then allows one to construct the quantum
state proportional A−1|b⟩, where A−1 is the inverse of A. More generally, when A is
not square or has zero eigenvalues, the algorithm can be used to ﬁnd the state |x⟩that
minimizes |A|x⟩−|b⟩| .
The algorithm works as follows. Assume |b⟩= P
n bn|En⟩where |En⟩is an eigenvector of A with eigenvalue λn ≥Λ. By applying phase estimation under A to compute λn
and by rotating an ancillary qubit through an angle of arcsin(Λ/λn) and then uncomputing
the phase-estimation we obtain
Then if the ancillary qubit is measured and if 1 is observed then each eigenstate is
divided through by λn, which aﬀects the inverse. The number of times that the state
preparation circuit needs to be applied to succeed, after applying amplitude ampliﬁcation,
is O(∥A∥/Λ) which is the condition number for the matrix.
The HHL algorithm takes O((log N)2) quantum steps to output |x⟩, compared with
O(N log N) steps required to ﬁnd ⃗x using the best known method on a classical computer.
There are several important caveats to the HHL algorithm. First, ﬁnding the full
answer ⃗x from the quantum state |x⟩requires O(N) repetitions to reconstruct the N
components of ⃗x. Generalizations to HHL such as least squares ﬁtting side step this
problem by allowing the output to be much smaller dimensional than the input. In
general, however, HHL can only provide features of the data such as moments of the
solution vector or its expectation value ⃗x†B⃗x over other sparse matrices B. The second
caveat is that the input vector |b⟩needs to be prepared, either on a quantum computer
or using qRAM, which may be expensive. The third caveat is that the matrix must
be well conditioned and e−iA must be eﬃciently simulatable. Finally, although the
HHL algorithms scales as O((log N)2) current estimates of the cost of the algorithm for
practical problems are prohibitive , which underlines the importance of investigating
further improvements such as . In general, the promise of exponential speedups for
linear systems should be tempered with the realization that they only apply to certain
thermal annealing
thermal state
Figure 1: Quantum tunneling vs thermalization. A quantum state tunnels
when approaching a resonance point before decoherence induces thermalization.
A. A quantum state must traverse a local minimum in thermal annealing
whereas a coherent quantum state can tunnel when brought close to resonance.
B. Coherent eﬀects decay through interaction with an environment, resulting in
a probability distribution in occupancy of a systems energy levels following a
Gibbs distribution.
qBLAS-based optimization
A wide variety of data analysis and machine learning techniques involve optimization.
Of increasing interest is the use of D-Wave processors to solve
combinatorial optimization problems by means of quantum annealing. Some
optimization problems can also be formulated as a single shot solution of a
linear system, for example the optimization of a quadratic function subject
to equality constraints, a subset of quadratic programming problems. If the
matrices involved are sparse or low rank, such problems can be solved in time
poly(log d), where d is the system dimension via the HHL matrix inversion
algorithm, yielding an exponential speedup over classical algorithms, which run
in time poly(d).
Most methods in ML require iterative optimization of their performance.
As an example, inequality constraints are often handled via penalty functions
 and variations of gradient descent or Newton’s method. A modiﬁcation of
the quantum PCA method implements iterative gradient descent and Newton’s
methods for polynomial optimization, again providing an exponential speedup
over classical methods. Multiple copies of the present solution, encoded in a
quantum state, are used to improve that solution at each step. Brandao and
Svore provide a quantum version of semi-deﬁnite programming, that holds out
the possibility of super-polynomial speed-ups . The quantum approximate
optimization algorithm (QAOA, or QAO algorithm) provides a unique approach to optimization based on alternating qubit rotations with the application
of the problem’s penalty function.
Reading classical data into quantum machines
Classical data must be inputted before being processed on a quantum computer.
Often called, ‘the input problem’, this is often done with little overhead but
does present a serious bottle neck for certain algorithms. Likewise, the ‘output
problem’ is faced when reading out data after being processed on a quantum
device. Like the input problem, the output problem often brings a signiﬁcant
operational slowdown.
Specially, if we consider applying HHL, least squares ﬁtting, qPCA, quantum
support vector machines, and related approaches need to classical data, the
procedure begins with ﬁrst loading considerable amounts of data into a quantum
system which can require exponential time .
This can be addressed in
principle using qRAM but the cost of doing so may be prohibitive for big data
problems . Apart from combinatorial optimization based approaches, the only
known linear-algebra based quantum machine learning algorithm that does not
rely on large-scale qRAM is the quantum algorithm for performing topological
analysis of data (persistent homology) . With the notable exceptions of
least squares ﬁtting and quantum support vector machines, linear algebra based
algorithms also can suﬀer from the output problem since classical quantities that
are sought after such as the solution vector for HHL or the principal components
for PCA are exponentially hard to estimate.
Despite the potential for exponential quantum speed ups, without signiﬁcant
eﬀort put into optimization, the circuit size and depth overhead can balloon
(to ∼1025 in one proposed realization of HHL ). Ongoing work is needed
to optimize such algorithms, provide better cost estimates and ultimately to
understand the sort of quantum computer that we would need to provide useful
quantum alternatives to classical machine learning within this space.
Deep quantum learning
Classical deep neural networks are highly eﬀective tools for machine learning and
are well suited to inspire the development of deep quantum learning methods.
Special-purpose quantum information processors such as quantum annealers and
programmable photonic circuits are well-suited for constructing deep quantum
learning networks . The simplest deep neural network to quantize
is the Boltzmann machine. The classical Boltzmann machine consists of bits
with tunable interactions: the Boltzmann machine is trained by adjusting those
interactions so that the thermal statistics of the bits, described by a Boltzmann-
Gibbs distribution (see ﬁgure 1B), reproduces the statistics of the data. To
quantize the Boltzmann machine one simply takes the neural network and
expresses it as a set of interacting quantum spins, corresponding to a tunable
Ising model. Then by initializing the input neurons in the Boltzmann machines
into a ﬁxed state and allowing the system to thermalize, we can read out the
output qubits to obtain an answer.
An essential feature of deep quantum learning is that it does not require
a large, general purpose quantum computer. Quantum annealers are special
purpose quantum information processors that are signiﬁcantly easier to construct
and to scale up than general purpose quantum computers (see ﬁgure 1A).
Quantum annealers are well-suited for implementing deep quantum learners,
and are commercially available. The D-Wave quantum annealer is a tunable
transverse Ising model that can be programmed to yield thermal states of
classical, and certain quantum spin systems. The D-Wave device has been used
to perform deep quantum learning protocols on more than a thousand spins .
Quantum Boltzmann machines with more general tunable couplings, capable
of implementing universal quantum logic, are currently in the design stage .
On chip silicon waveguides have been used to construct linear optical arrays
with hundreds of tunable interferometers, and special purpose superconducting
quantum information processors could be used to implement the QAO algorithm.
There are several ways that quantum computers can give advantages here.
First, quantum methods can make the system thermalize quadratically faster
than its classical counterpart . This can make accurate training
of fully connected Boltzmann machines practical.
Second, quantum computers can accelerate Boltzmann training by providing
improved ways of sampling.
Because the neuron activation pattern in the
Boltzmann machine is stochastic, many repetitions are needed to ﬁnd success
probabilities, and in turn the eﬀect that changing a weight in the neural network
has on the performance of the deep network. In training a quantum Boltzmann
machine, by contrast, quantum coherence can quadratically reduce the number
of samples needed to learn the performance. Furthermore, quantum access to
the training data (i.e. qRAM or a quantum blackbox subroutine) allows the
machine to be trained using quadratically fewer accesses to the training data
than classical methods requires: a quantum algorithm can train a deep neural
network on a large training data set while only reading a minuscule number of
training vectors .
Quantum information processing provides new fundamentally quantum models for deep learning. For example, adding a transverse ﬁeld to the simple
Ising model quantum Boltzmann machine above yields a transverse Ising model,
which can exhibit a variety of fundamental quantum eﬀects such as entanglement . Adding further quantum couplings transforms the quantum
Boltzmann machine into a variety of quantum systems . Adding a tunable
transverse interaction to a tunable Ising model is known to be universal for full
quantum computing : with the proper weight assignments this model can
execute any algorithm that a general purpose quantum computer can perform.
Such universal deep quantum learners may recognize and classify patterns that
classical computers can not.
Unlike classical Boltzmann machines, quantum Boltzmann machines output
a quantum state. Thus deep quantum networks can learn to generate quantum
states representative of a wide variety of systems. This ability is absent from
classical machine learning and allows it to act as a form of quantum associative
memory .
Thus quantum Boltzmann training has applications beyond
classifying quantum states and providing richer models for classical data.
Box 3. Training Quantum Boltzmann Machines
In quantum Boltzmann machine training we wish to learn a set of Hamiltonian
parameters (wj) such that for a ﬁxed set of Hj we have that our input state
ρtrain is well approximated by σ = e
j wjHj/Tr(e
j wjHj) .
all visible Boltzmann machines, the quantum relative entropy S(ρtrain∥σ) =
Tr (ρtrain log(ρtrain) −ρtrain log(σ)) is the most natural way to measure the quality
of the approximation. It is easy to see (assuming that the kernels of ρ and σ
coincide) that the quantum relative entropy upper bounds the distance between
the two states. Thus, minimizing it minimizes the error in approximating the
While the relative entropy is an excellent measure of the distance between
two states, it can be diﬃcult to learn experimentally. However, the gradient (i.e.
direction of greatest change) of the relative entropy is easy to estimate :
∂wjS(ρtrain∥σ) = Tr(σHj)Tr(ρHj).
Given an experimental data set of expectation values for ρtrain and a quantum
simulator for Tr(σHj) we can ﬁnd the direction of greatest improvement in
the quantum relative entropy. Gradient descent then is used to update ⃗w via
⃗w →⃗w −η∇S(ρtrain∥σ) for η > 0 . Stoquastic Hamiltonians have the property
that all oﬀ-diagonal matrix elements in the standard basis are real and non-positive
(eqv. non-negative). No eﬃcient classical analogue of this method is known in
general for non-stoquastic H—see .
We show this protocol below for learning a random state formed from a uniform
mixture of 4 random states—random with respect to the unique and unitarily
invariant Haar measure. Fewer than 10 gradient steps (epochs) are needed to train
it to approximately generate ρtrain using a complete set of Hamiltonian terms.
True State
Quantum machine learning for quantum data
Perhaps the most immediate application of quantum machine learning is to
quantum data – the actual states generated by quantum systems and processes.
As described above, many quantum machine learning algorithms ﬁnd patterns
in classical data by mapping the data to quantum mechanical states, and then
manipulating those states using basic quantum linear algebra subroutines. Those
same quantum machine learning algorithms can be applied directly to the
quantum states of light and of matter to reveal their underlying features and
patterns. The resulting quantum modes of analysis are frequently much more
eﬃcient and more illuminating than the classical analysis of data taken from
quantum systems. For example, given multiple copies of a system described
by an N × N density matrix, quantum principal component analysis can be
used to ﬁnd its eigenvalues and to reveal the corresponding eigenvectors in time
O((log2 N)2), compared with O(N 2) measurements needed for a classical device
to perform tomography on density matrix, and the O(N 2) operations needed
to perform the classical PCA. Such quantum analysis of quantum data could
proﬁtably be performed on the relatively small quantum computers that are
likely to be available over the next several years.
A particularly powerful quantum data analysis technique is the use of quantum
simulators to probe quantum dynamics. Quantum simulators are ‘quantum
analog computers’—quantum systems whose dynamics can be programmed to
match the dynamics of some desired quantum system. A quantum simulator can
either be a special purpose device constructed to simulate a particular class of
quantum systems, or a general purpose quantum computer. By connecting a
trusted quantum simulator to an unknown system and tuning the model of the
simulator to counteract the unknown dynamics, the dynamics of the unknown
system can be eﬃciently learned using approximate Bayesian inference. 
This exponentially reduces the number of measurements needed to perform the
simulation. Similarly, the universal quantum emulator algorithm allows
one to reconstruct quantum dynamics and the quantum Boltzmann training
algorithm of allows states to be reconstructed, in time logarithmic in the
dimension of the Hilbert space—exponentially faster than reconstructing the
dynamics via classical tomography.
In order to use a quantum computer to help characterize a quantum system or to accept input states for use in a quantum PCA algorithm then we
must face the signiﬁcant technical challenge of loading coherent input states.
Nonetheless, because such applications do not require QRAM and oﬀer the
potential for exponential speedups for device characterization 
they remain among the promising possibilities for near-term application of
quantum machine learning.
Designing and controlling quantum systems
A major challenge in the development of quantum computation and information
science involves tuning quantum gates to within the exacting requirements needed
for quantum error correction. Heuristic search methods can help achieve this in a
supervised learning scenario , for instance in the case of nearest-neighborcoupled superconducting artiﬁcial atoms with gate ﬁdelity above 99.9% in
the presence of noise, and hence reaching an accepted threshold for fault-tolerant
quantum computing. A similar methodology has been successful in constructing
a single-shot Toﬀoli gate, again reaching gate ﬁdelity above 99.9% . Genetic
algorithms have been employed to reduce digital and experimental errors in
quantum gates . They have been used to simulate CNOT gates by means
of ancillary qubits and imperfect gates. Besides outperforming protocols for
digital quantum simulations, it has been shown that genetic algorithms are
also useful for suppressing experimental errors in gates . Another approach
used stochastic gradient descent and two body interactions to embed a Toﬀoli
gate without time-dependent control using the natural dynamics of a quantum
network . Dynamical decoupling sequences help protect quantum states from
decoherence, which can be designed using recurrent neural networks .
Controlling a quantum system is just as important and complex. Learning
methods have also seen ample success in developing control sequences to optimize
adaptive quantum metrology, which is a key quantum building block in many
quantum technologies. Genetic algorithms have been proposed for the control of
quantum molecules to overcome the problem caused by changing in environmental
parameters in an experiment . Reinforcement learning algorithms using
heuristic global optimization, like the one in designing circuits, have been widely
successful, particularly in the presence of noise and decoherence, scaling well
with the system size . One can also exploit reinforcement learning
in gate-based quantum systems. For instance, adaptive controllers based on
intelligent agents for quantum information demonstrate adaptive calibration and
compensation strategies to an external stray ﬁeld of unknown magnitude in a
ﬁxed direction.
Classical machine learning is also a powerful tool to extract theoretical insights about quantum states. Neural networks have recently been deployed
to study two central problems in condensed matter, namely phase of matter
detection and ground state search . They gathered ample success
achieving better performances than established numerical tools. Theoretical
physicists are now studying these models to analytically understand their descriptive power compared to traditional methods such as tensor networks. Interesting
applications to exotic states of matter are already on the market, it has been
shown that they can capture highly non trivial features from disordered or
topologically ordered systems.
Perspectives on future work
As shown in this review, small quantum computers and larger special purpose
quantum simulators, annealers, etc., exhibit promising applications in machine
learning and data analysis . The execution of these algorithms requires quantum hardware:
can this promise be realized?
On the hardware side, there have been great strides in several enabling
technologies. Small scale quantum computers with 50-100 qubits will be made
widely available via quantum cloud computing (the ‘Qloud’). Special purpose
quantum information processors such as quantum simulators, quantum annealers,
integrated photonic chips, NV-diamond arrays, quantum random access memory,
and made-to-order superconducting circuits will continue to advance in size and
complexity. Quantum machine learning oﬀers a suite of potential applications for
small quantum computers complemented and enhanced by special purpose quantum information processors ,
digital quantum processors and sensors 
In particular, quantum annealers with ∼2000 qubits have been built and
operated, using integrated superconducting circuits that are in principle scalable.
The biggest challenges for quantum annealers to implement quantum machine
learning algorithms include improving connectivity and implementing more
general tunable couplings between qubits. Programmable quantum optic arrays
with ∼100 tunable interferometers have been constructed using integrated
photonics in silicon, but loss represents an important challenge in scaling such
circuits up. A particularly important challenge for quantum machine learning is
the construction of interface devices such as quantum random access memories
(qRAM) that allow classical information to be encoded in quantum mechanical
form . A qRAM to access N pieces of data consists of a branching array of
2N quantum switches, which must operate coherently during a memory call. In
principle, such a qRAM takes time O(log2 N) to perform a memory call, and
can tolerate error rates of up to O(1/ log2 N) per switching operation, where
log2 N is the depth of the qRAM circuit. Proof of principle demonstrations of
qRAM have been performed, but constructing large arrays of quantum switches
is a diﬃcult technological problem.
These hardware challenges are technical in nature, and clear paths exist
towards overcoming them. They must be overcome, however, if quantum machine
learning is to become a ‘killer app’ for quantum computers. As noted previously,
most of the quantum algorithms that have been identiﬁed face a number of
caveats that limits their applicability. We can distill the caveats mentioned
above into four fundamental problems.
1. Input problem: While quantum algorithms can provide dramatic speedups
for processing data they seldom provide advantages for reading data. This
means that the cost of reading in the input can in some cases dominate
the cost of quantum algorithms. Understanding this potentially mitigating
factor is a subject of ongoing work.
2. Output problem: Learning the full solution from some quantum algorithms
as a bit string requires learning an exponential number of bits.
makes some applications of QML algorithms infeasible. This problem can
potentially be sidestepped by only learning summary statistics for the
solution state but more work is needed.
3. Costing problem: Closely related to the input/output problem(s), at
present very little is known about the actual number of gates required by
quantum machine learning algorithms. While bounds on the complexity
suggest that for suﬃciently large problems they will oﬀer huge advantages,
it is still an open question to determine exactly when that crossover point
4. Benchmarking problem: It is often diﬃcult to assert that a quantum algorithm is ever better than all known classical machine algorithms in practice
because this requires extensive benchmarking against modern heuristic
methods. Additional results establishing lower bounds for quantum machine learning would partially address this.
One potential path forward that sidesteps some of these issues is examining
applications of quantum computing to quantum, rather than classical, data. The
aim therein is to use quantum machine learning to characterize and control
quantum computers . This would enable a virtuous cycle of innovation
similar to that which occurred in classical computing, wherein each generation of
processors is then leveraged to design the next generation processors. We have
already begun to see the ﬁrst fruits of this cycle with classical machine learning
being used improve quantum processor designs which in turn provide powerful computational resources for
quantum enhanced machine learning applications themselves .
Acknowledgments and author contributions section
Financial acknowledgements. J.B. acknowledges AFOSR grant FA9550-16-1-
0300, Models and Protocols for Quantum Distributed Computation, for ﬁnancial
support. P.W. acknowledges ﬁnancial support from the ERC (Consolidator Grant
QITBOX), Spanish Ministry of Economy and Competitiveness , Generalitat de Catalunya (CERCA Programme and SGR
875), and Fundacio Privada Cellex. P.R. and S.L. acknowledge funding from
ARO and AFOSR under MURI programs.
Origin of ﬁgures. Figure 1 courtesy of Lusa Zheglova (illustrator). Bar plots in
Box 3 produced by the authors.
Author contributions. All authors designed the study, analyzed data, interpreted
data and wrote the article.
Competing interests. The authors declare no competing interests.