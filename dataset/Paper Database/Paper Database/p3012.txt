Towards Eﬀective Low-bitwidth Convolutional Neural Networks∗†
Bohan Zhuang, Chunhua Shen, Mingkui Tan, Lingqiao Liu, Ian Reid
This paper tackles the problem of training a deep
convolutional neural network with both low-precision
weights and low-bitwidth activations.
Optimizing a
low-precision network is very challenging since the
training process can easily get trapped in a poor local minima, which results in substantial accuracy loss.
To mitigate this problem, we propose three simple-yeteﬀective approaches to improve the network training.
First, we propose to use a two-stage optimization strategy to progressively ﬁnd good local minima.
Speciﬁcally, we propose to ﬁrst optimize a net with quantized
weights and then quantized activations. This is in contrast to the traditional methods which optimize them
simultaneously.
Second, following a similar spirit of
the ﬁrst method, we propose another progressive optimization approach which progressively decreases the
bit-width from high-precision to low-precision during
the course of training. Third, we adopt a novel learning
scheme to jointly train a full-precision model alongside
the low-precision one. By doing so, the full-precision
model provides hints to guide the low-precision model
Extensive experiments on various datasets
( i.e., CIFAR-100 and ImageNet) show the eﬀectiveness
of the proposed methods. To highlight, using our methods to train a 4-bit precision network leads to no performance decrease in comparison with its full-precision
counterpart with standard network architectures ( i.e.,
AlexNet and ResNet-50).
1. Introduction
2. Related work
3. Methods
3.1. Quantization function revisited . . . . . .
∗B. Zhuang, C. Shen, L. Liu and I. Reid are with The University of Adelaide, Australia. M. Tan is with South China University of Technology, China.
†Correspondence to C. Shen (e-mail: ).
3.2. Two-stage optimization . . . . . . . . . .
3.3. Progressive quantization
. . . . . . . . .
3.4. Guided training with a full-precision network . . . . . . . . . . . . . . . . . . . .
3.5. Remark on the proposed methods . . . .
3.6. Implementation details . . . . . . . . . .
4. Experiment
4.1. Evaluation on ImageNet
. . . . . . . . .
4.2. Evaluation on Cifar100 . . . . . . . . . .
4.3. Ablation study . . . . . . . . . . . . . . .
5. Conclusion
 
1. Introduction
The state-of-the-art deep neural networks 
usually involve millions of parameters and need billions of FLOPs during computation. Those memory
and computational cost can be unaﬀordable for mobile
hardware device or especially implementing deep neural networks on chips. To improve the computational
and memory eﬃciency, various solutions have been proposed, including pruning network weights , low
rank approximation of weights , and training a
low-bit-precision network . In this work, we
follow the idea of training a low-precision network and
our focus is to improve the training process of such a
network. Note that in the literature, many works adopt
this idea but only attempt to quantize the weights of
a network while keeping the activations to 32-bit ﬂoating point .
Although this treatment leads
to lower performance decrease comparing to its fullprecision counterpart, it still needs substantial amount
of computational resource requirement to handle the
full-precision activations. Thus, our work targets the
problem of training network with both low-bit quantized
weights and activations.
The solutions proposed in this paper contain three
components.
They can be applied independently or
jointly. The ﬁrst method is to adopt a two-stage training process. At the ﬁrst stage, only the weights of a network is quantized. After obtaining a suﬃciently good
solution of the ﬁrst stage, the activation of the network
is further required to be in low-precision and the network will be trained again. Essentially, this progressive
approach ﬁrst solves a related sub-problem, i.e., training a network with only low-bit weights and the solution of the sub-problem provides a good initial point
for training our target problem.
Following the similar idea, we propose our second method by performing
progressive training on the bit-width aspect of the network. Speciﬁcally, we incrementally train a serial of
networks with the quantization bit-width (precision)
gradually decreased from full-precision to the target
precision. The third method is inspired by the recent
progress of mutual learning and information distillation . The basic idea of those works
is to train a target network alongside another guidance
network. For example, The works in 
propose to train a small student network to mimic the
deeper or wider teacher network. They add an additional regularizer by minimizing the diﬀerence between
student’s and teacher’s posterior probabilities or
intermediate feature representations . It is observed that by using the guidance of the teacher model,
better performance can be obtained with the student
model than directly training the student model on the
target problem. Motivated by these observations, we
propose to train a full-precision network alongside the
target low-precision network. Also, in contrast to standard knowledge distillation methods, we do not require
to pre-train the guidance model. Rather, we allow the
two models to be trained jointly from scratch since we
discover that this treatment enables the two nets adjust
better to each other.
Compared to several existing works that achieve
good performance when quantizing both weights and
activations , our methods is more considerably scalable to the deeper neural networks .
For example, some methods adopt a layer-wise training
procedure , thus their training cost will be signiﬁcantly increased if the number of layers becomes larger.
In contrast, the proposed method does not have this issue and we have experimentally demonstrated that our
method is eﬀective with various depth of networks (i.e.,
AlexNet, ResNet-50).
2. Related work
Several methods have been proposed to compress
deep models and accelerate inference during testing.
We can roughly summarize them into four main categories: limited numerial percision, low-rank approximation, eﬃcient architecture design and network pruning.
Limited numerical precision When deploying
DNNs into hardware chips like FPGA, network quantization is a must process for eﬃcient computing and
storage. Several works have been proposed to quantize
only parameters with high accuracy . Courbariaux et al. propose to constrain the weights
to binary values (i.e., -1 or 1) to replace multiplyaccumulate operations by simple accumulations.
keep a balance between the eﬃciency and the accuracy,
ternary networks are proposed to keep the weights
to 2-bit while maintaining high accuracy. Zhou et al.
 present incremental network quantization (INQ) to
eﬃciently convert any pre-trained full-precision CNN
model into low-precision whose weights are constrained
to be either powers of two or zero. Diﬀerent from these
methods, a mutual knowledge transfer strategy is proposed to jointly optimize the full-precision model and
its low-precision counterpart for high accuracy. What’s
more, we propose to use a progressive optimization approach to quantize both weights and activations for
better performance.
Low-rank approximation Among existing works,
some methods attempt to approximate low-rank ﬁlters
in pre-trained networks . In , reconstruction
error of the nonlinear responses are minimized layerwisely, with subject to the low-rank constraint to re-
duce the computational cost. Other seminal works attempt to restrict ﬁlters with low-rank constraints during training phrase . To better exploit the structure in kernels, it is also proposed to use low-rank tensor decomposition approaches to remove the redundancy in convolutional kernels in pretrained networks.
architecture
design The increasing
demand for running highly energy eﬃcient neural
networks for hardware devices have motivated the
network architecture design.
GoogLeNet and
SqueezeNet propose to replace 3x3 convolutional
ﬁlters with 1x1 size, which tremendously increase the
depth of the network while decreasing the complexity a
lot. ResNet and its variants utilize residual
connections to relieve the gradient vanishing problem
when training very deep networks.
Recently, depthwise separable convolution employed in Xception 
and MobileNet have been proved to be quite eﬀective. Based on it, ShuﬄeNet generalizes the group
convolution and the depthwise separable convolution
to get the state-of-the-art results.
Pruning and sparsity Substantial eﬀort have been
made to reduce the storage of deep neural networks in
order to save the bandwidth for dedicated hardware
Han et al. introduce “deep compression”, a three stage pipeline: pruning, trained quantization and Huﬀman coding to eﬀectively reduce the
memory requirement of CNNs with no loss of accuracy.
Guo et al. further incorporate connection slicing to
avoid incorrect pruning. More works propose
to employ structural sparsity for more energy-eﬃcient
compression.
3. Methods
In this section, we will ﬁrst revisit the quantization
function in the neural network and the way to train
it. Then we will elaborate our three methods in the
subsequent sections.
3.1. Quantization function revisited
A common practise in training a neural network
with low-precision weights and activations is to introduce a quantization function. Considering the general
case of k-bit quantization as in , we deﬁne the quantization function Q(·) to be
zq = Q(zr) =
2k −1round((2k −1)zr)
where zr ∈ denotes the full-precision value and
zq ∈ denotes the quantized value. With this quantization function, we can deﬁne the weight quantization
process and the activation quantization process as follows:
Quantization on weights:
2 max(|tanh(w)|) + 1
In other words, we ﬁrst use
2 max(|tanh(w)|) + 1
2 to obtain a normalized version of w and then perform the
quantization, where tanh(·) is adopted to reduce the
impact of large values.
Quantization on activations:
Same as , we ﬁrst use a clip function f(x) =
clip(x, 0, 1) to bound the activations to .
that, we conduct quantize the activation by applying
the quantization function Q(·) on f(x).
xq = Q(f(x)).
Back-propagation with quantization function:
quantization
nondiﬀerentiable and thus it is impossible to directly apply
the back-propagation to train the network. To overcome this issue, we adopt the straight-through estimator to approximate the gradients calculation.
Formally, we approximate the partial gradient ∂zq
an identity mapping, namely ∂zq
∂zr ≈1. Accordingly,
can be approximated by
3.2. Two-stage optimization
With the straight-through estimator, it is possible
to directly optimize the low-precision network. However, the gradient approximation of the quantization
function inevitably introduces noisy signal for updating network parameters. Strictly speaking, the approximated gradient may not be the right updating direction.
Thus, the training process will be more likely
to get trapped at a poor local minima than training a
full precision model. Applying the quantization function to both weights and activations further worsens
the situation.
To reduce the diﬃculty of training, we devise a twostage optimization procedure: at the ﬁrst stage, we
only quanitze the weights of the network while setting
the activations to be full precision. After the converge
(or after certain number of iterations) of this model,
we further apply the quantization function on the activations as well and retrain the network. Essentially,
the ﬁrst stage of this method is a related subproblem of
the target one. Compared to the target problem, it is
easier to optimize since it only introduces quantization
full-precision
low-precision
guidance loss
Figure 1: Demonstration of the guided training strategy. We use the residual network structure for illustration.
function on weights. Thus, we are more likely to arrive
at a good solution for this sub-problem. Then, using it
to initialize the target problem may help the network
avoid poor local minima which will be encountered if
we train the network from scratch. Let M K
low be the
high-precision model with K-bit. We propose to learn
a low-precision model M k
low in a two-stage manner with
low serving as the initial point, where k < K. The
detailed algorithm is shown in Algorithm 1.
Algorithm 1: Two-stage optimization for k-bit
quantization
Input: Training data {(xi, yi)}N
i=1; A K-bit
precision model M K
Output: A low-precision deep model M k
weights Wlow and activations being
quantized into k-bit.
1 Stage 1: Quantize Wlow:
2 for epoch = 1, ..., L do
for t = 1, ...T do
Randomly sample a mini-batch data;
Quantize the weights Wlow into k-bit by
calling some quantization methods with
K-bit activations;
6 Stage 2: Quantize activations:
7 Initialize Wlow using the converged k-bit weights
from Stage 1 as the starting point;
8 for epoch = 1, ..., L do
for t = 1, ...T do
Randomly sample a mini-batch data;
Quantize the activations into k-bit by
calling some quantization methods while
keeping the weights to k-bit;
3.3. Progressive quantization
The aforementioned two-stage optimization approach suggests the beneﬁts of using a related easy optimized problem to ﬁnd a good initialization. However,
separating the quantization of weights and activations
is not the only solution to implement the above idea. In
this paper, we also propose another solution which progressively lower the bitwidth of the quantization during
the course of network training. Speciﬁcally, we progressively conduct the quantization from higher precisions
to lower precisions (e.g., 32-bit →16-bit →4-bit →
2-bit). The model of higher precision will be used the
the starting point of the relatively lower precision, in
analogy with annealing.
Let {b1, ..., bn} be a sequence precisions, where bn <
bn−1, ..., b2 < b1, bn is the target precision and b1 is set
to 32 by default. The whole progressive optimization
procedure is summarized in as Algorithm 2. Let M k
be the low-precision model with k-bit and Mfull be the
full precision model. In each step, we propose to learn
low, with the solution in the (i −1)-th step, denoted
low, serving as the initial point, where k < K.
3.4. Guided training with a full-precision network
The third method proposed in this paper is inspired by the success of using information distillation to train a relatively shallow network. Speciﬁcally, these methods usually use a teacher
model (usually a pretrained deeper network) to provide guided signal for the shallower network. Following
this spirit, we propose to train the low-precision network alongside another guidance network. Unlike the
work in , the guidance network shares
the same architecture as the target network but is pretrained with full-precision weights and activations.
However, a pre-trained model may not be necessarily
optimal or may not be suitable for quantization. As a
result, directly using a ﬁxed pretrained model to guide
Algorithm 2: Progressive quantization for accurate CNNs with low-precision weights and activations
Input: Training data {(xj, yj)}N
j=1; A pre-trained
32-bit full-precision model Mfull as
baseline; the precision sequence
{b1, ..., bn} where
bn < bn−1, ..., b2 < b1 = 32.
Output: A low-precision deep model M bn
1 Let M b1
low = Mfull, where b1 = 32;
2 for i = 2, ...n do
Let k = bi and K = bi−1;
Obtain M k
low by calling some quantization
methods with M K
low being the input;
the target network may not produce the best guidance
signals. To mitigate this problem, we do not ﬁx the
parameters of a pretrained full precision network as in
the previous work .
By using the guidance training strategy, we assume that there exist some full-precision models with
good generalization performance, and an accurate lowprecision model can be obtained by directly performing
the quantization on those full-precision models. In this
sense, the feature maps of the learned low-precision
model should be close to that obtained by directly
doing quantization on the full-precision model.
achieve this, essentially, in our learning scheme, we can
jointly train the full-precision and low-precision models. This allows these two models adapt to each other.
We even ﬁnd by doing so the performance of the fullprecision model can be slightly improved in some cases.
Formally, let Wfull and Wlow be the full-precision
model and low-precision model, respectively.
µ(x; Wfull) and ν(x; Wlow) be the nested feature maps
(e.g., activations) of the full-precision model and lowprecision model, respectively.
To create the guidance signal, we may require that the nested feature
maps from the two models should be similar.
However, µ(x; Wfull) and ν(x; Wlow) is usually not directly comparable since one is full precision and the
other is low-precision.
To link these two models, we can directly quantize
the weights and activations of the full-precision model
by equations (2) and (3).
For simplicity, we denote
the quantized feature maps by Q(µ(x; Wfull)). Thus,
Q(µ(x; Wfull)) and ν(x; Wlow) will become comparable. Then we can deﬁne the guidance loss as:
R(Wfull, Wlow) = 1
2 ∥Q(µ(x; Wfull))−ν(x; Wlow)∥2,
where ∥· ∥denotes some proper norms.
Let Lθ1 and Lθ2 be the cross-entropy classiﬁcation
losses for the full-precision and low-precision model,
respectively. The guidance loss will be added to Lθ1
and Lθ2, respectively, resulting in two new objectives
for the two networks, namely
L1(Wfull) = Lθ1 + λR(Wfull, Wlow).
L2(Wlow) = Lθ2 + λR(Wfull, Wlow).
where λ is a balancing parameter. Here, the guidance
loss R can be considered as some regularization on Lθ1
In the learning procedure, both Wfull and Wlow
minimizing
L2(Wlow) separately, using a mini-batch stochastic
gradient descent method.
The detailed algorithm is
shown in Algorithm 3.
A high-bit precision model
low is used as an initialization of M k
low, where K >
Speciﬁcally, for the full-precision model, we have
K = 32. Relying on Mfull, the weights and activations
low can be initialized by equations (2) and (3),
respectively.
Note that the training process of the two networks
are diﬀerent.
When updating Wlow by minimizing
L2(Wlow), we use full-precision model as the initialization and apply the forward-backward propagation rule
in Section 3.1 to ﬁne-tune the model. When updating
Wfull by minimizing L1(Wfull), we use conventional
forward-backward propagation to ﬁne-tune the model.
fullprecision network for k-bit quantization
Input: Training data {(xi, yi)}N
i=1; A pre-trained
32-bit full-precision model Mfull; A k-bit
precision model M k
Output: A low-precision deep model M k
weights and activations being quantized
into k bits.
1 Initialize M k
low based on Mfull;
2 for epoch = 1, ..., L do
for t = 1, ...T do
Randomly sample a mini-batch data;
Quantize the weights Wlow and
activations into k-bit by minimizing
Update Mfull by minimizing L1(Wfull);
3.5. Remark on the proposed methods
The proposed three approaches tackle the diﬃculty
in training a low-precision model with diﬀerent strate-
gies. They can be applied independently. However, it
is also possible to combine them together. For example,
we can apply the progressive quantization to any of the
steps in the two-stage approach; we can also apply the
guided training to any sub-step in the progressive training. Detailed analysis on possible combinations will be
experimentally evaluated in the experiment section.
3.6. Implementation details
In all the three methods, we quantize the weights
and activations of all layers except that the input data
are kept to 8-bit.
Furthermore, to promote convergence, we propose to add a scalar layer after the last
fully-connected layer before feeding the low-bit activations into the softmax function for classiﬁcation. The
scalar layer has only one trainable small scalar parameter and is initialized to 0.01 in our approach.
During training, we randomly crop 224x224 patches
from an image or its horizontal ﬂip, with the per-pixel
mean subtracted. We don’t use any further data augmentation in our implementation.
We adopt batch
normalization (BN) after each convolution before
activation. For pretraining the full-precision baseline
model, we use Nesterov SGD and batch size is set
to 256. The learning rate starts from 0.01 and is divided by 10 every 30 epochs. We use a weight decay
0.0001 and a momentum 0.9.
For weights and activations quantization, the initial learning rate is set to
0.001 and is divided by 10 every 10 epochs. We use a
simple single-crop testing for standard evaluation. Following , for ResNet-50, we add only two guidance
losses in the 2 last groups of residual blocks. And for
AlexNet, we add two guidance losses in the last two
fully-connected layers.
4. Experiment
To investigate the performance of the proposed
methods, we conduct experiments on Cifar100 and ImageNet datasets. Two representative networks, diﬀerent precisions AlexNet and ResNet-50 are evaluated
with top-1 and top-5 accuracy reported.
variant of AlexNet structure by removing dropout
layers and add batch normalization after each convolutional layer and fully-connected layer. This structure is
widely used in previous works . We analyze the
eﬀect of the guided training approach, two-stage optimization and the progressive quantization in details
in the ablation study. Seven methods are implemented
and compared:
1. “Baseline”: We implement the baseline model
based on DoReFa-Net as described in Section 3.1.
2. “TS”: We apply the two-stage optimization strategy described in Sec. 3.2 and Algorithm 1 to quantize the weights and activations. We denote the
ﬁrst stage as Stage1 and the second stage as
3. “PQ”: We apply the progressive quantization
strategy described in Sec. 3.3 and Algorithm 2 to
continuously quantize weights and activations simultaneously from high-precision (i.e., 32-bit) to
low-precision.
4. “Guided”: We implement the guided training approach as described in Sec. 3.4 and Algorithm 3
to independently investigate its eﬀect on the ﬁnal
performance.
5. “PQ+TS”: We further combine PQ and TS together to see whether their combination can improve the performance.
6. “PQ+TS+Guided”: This implements the full
model by combining PQ, TS and Guided modules together.
7. “PQ+TS+Guided**”:
Based on PQ+TS+-
Guided, we use full-precision weights for the ﬁrst
convolutional layer and the last fully-connected
layer following the setting of to investigate
its sensitivity to the proposed method.
4.1. Evaluation on ImageNet
ILSVRC2012 , which includes over 1.2 million images and 50 thousand validation images. We report 4bit and 2-bit precision accuracy for both AlexNet and
ResNet-50. The sequence of bit-width precisions are
set as {32, 8, 4, 2}. The results of INQ are directly
cited from the original paper. We did not use the sophisticated image augmentation and more details can
be found in Sec. 3.6. We compare our model to the
32-bit full-precision model, INQ, DoReFa-Net and the
baseline approach described in Sec. 3.1. For INQ, only
the weights are quantized. For DoReFa-Net, the ﬁrst
convolutional layer uses the full-precision weights and
the last fully-connected layer use both full-precision
weights and activations.
Results on AlexNet: The results for AlexNet are
listed in Table 1. Compared to competing approaches,
we achieve steadily improvement for 4-bit and 2-bit
settings. This can be attributed to the eﬀective progressive optimization and the knowledge from the fullprecision model for assisting the optimization process.
Furthermore, our 4-bit full model even outperforms
the full-precision reference by 0.7% on top-1 accuracy.
This may be due to the fact that on this data, we may
not need a model as complex as the full-precision one.
However, when the expected bit-width decrease to 2bit, we observe obvious performance drop compared
to the 32-bit model while our low-bit model still brings
2.8% top-1 accuracy increase compared to the Baseline
Results on ResNet-50: The results for ResNet-
50 are listed in Table 2.
For the full-precision
model, we implement it using Pytorch following the
re-implementation provided by Facebook1. Comparatively, we ﬁnd that the performance are approximately
consistent with the results of AlexNet. Similarly, we
observe that our 4-bit full model is comparable with the
full-precision reference with no loss of accuracy. When
decreasing the precision to 2-bit, we achieve promising
improvement over the competing Baseline even though
there’s still an accuracy gap between the full-precision
model. Similar to the AlexNet on ImageNet dataset,
we ﬁnd our 2-bit full model improves more comparing
with the 4-bit case. This phenomenon shows that when
the model becomes more diﬃcult to optimize, the proposed approach turns out to be more eﬀective in dealing with the optimization diﬃculty. To better understand our model, we also draw the process of training
for 2-bit ResNet-50 in Figure 3 and more analysis can
be referred in Sec. 4.3.
4.2. Evaluation on Cifar100
Cifar100 is an image classiﬁcation benchmark containing images of size 32x32 in a training set of 50,000
and a test set of 10,000. We use the AlexNet for our
experiment. The quantitative results are reported in
From the table, we can observe that the
proposed approach steadily outperforms the competing method DoReFa-Net. Interestingly, the accuracy
of our 4-bit full model also surpasses its full precision
model. We speculate that this is due to 4-bit weights
and activations providing the right model capacity and
preventing overﬁtting for the networks.
4.3. Ablation study
In this section, we analyze the eﬀects of diﬀerent
components of the proposed model.
Learning from scratch vs. Fine-tuning: To analyze the eﬀect, we perform comparative experiments
on Cifar100 with AlexNet using learning from scratch
and ﬁne-tuning strategies.
The results are shown in
Figure 2, respectively. For convenience of exposition,
this comparison study is performed based on method
TS. First, we observe that the overall accuracy of ﬁnetuning from full-precision model is higher than that of
1 
Stage2+Guided
Stage2+Guided
Figure 2: Validation accuracy of 4-bit AlexNet on Cifar100 using (a): the ﬁne-tuning strategy; (b): learning
from scratch strategy. Stage2+Guided means we combine the methods Stage2 and Guided together during
optimization to investigate the eﬀect of the guided training on the ﬁnal performance.
learning from scratch. This indicates that the initial
point for training low-bitwidth model is crutial for obtaining good accuracy. In addition, the gap between
the Baseline and TS is obvious (i.e., 2.7 % in our experiment) with learning from scratch.
This justiﬁes
that the two-stage optimization strategy can eﬀectively
help the model converge to a better local minimum.
The eﬀect of quantizing all layers: This set of
experiments is performed to analyze the inﬂuence for
quantizing the ﬁrst convolutional layer and the last
fully-connected layer. Several previous works argue to keep these two layers precision as 32-bit ﬂoating
points to decrease accuracy loss.
By comparing the
results of PQ+TS+Guided** and PQ+TS+Guided in
Table 4 and Table 5, we notice that the accuracy gap
between the two settings is not large, which indicates
that our model is not sensitive to the precision of these
two layers. It can be attributed to two facts. On one
hand, ﬁne-tuning from 32-bit precision can drastically
decrease the diﬃculty for optimization. On the other
Full precision
5-bit (INQ)
4-bit (DoReFa-Net)
4-bit (Baseline)
4-bit (PQ+TS+Guided)
2-bit (DoReFa-Net)
2-bit (Baseline)
2-bit (PQ+TS+Guided)
Table 1: Top1 and Top5 validation accuracy of AlexNet on ImageNet.
Full precision
5-bit (INQ)
4-bit (DoReFa-Net)
4-bit (Baseline)
4-bit (PQ+TS+Guided)
2-bit (DoReFa-Net)
2-bit (Baseline)
2-bit (PQ+TS+Guided)
Table 2: Top1 and Top5 validation accuracy of ResNet-50 on ImageNet.
Full precision
4-bit (DoReFa-Net)
4-bit (Baseline)
4-bit (PQ+TS+Guided)
2-bit (DoReFa-Net)
2-bit (Baseline)
2-bit (PQ+TS+Guided)
Table 3: Top1 and Top5 validation accuracy of AlexNet on Cifar100.
4-bit (TS)
4-bit (PQ)
4-bit (PQ+TS)
4-bit (Guided)
4-bit (PQ+TS+Guided)
4-bit (PQ+TS+Guided**)
2-bit (TS)
2-bit (PQ)
2-bit (PQ+TS)
2-bit (Guided)
2-bit (PQ+TS+Guided)
2-bit (PQ+TS+Guided**)
Table 4: Evaluation of diﬀerent components of the proposed method on the validation accuracy with AlexNet
on ImageNet.
4-bit (TS)
4-bit (PQ)
4-bit (PQ+TS)
4-bit (Guided)
4-bit (PQ+TS+Guided)
4-bit (PQ+TS+Guided**)
2-bit (TS)
2-bit (PQ)
2-bit (PQ+TS)
2-bit (Guided)
2-bit (PQ+TS+Guided)
2-bit (PQ+TS+Guided**)
Table 5: Evaluation of diﬀerent components of the proposed method on the validation accuracy with ResNet-50
on ImageNet.
hand, the progressive optimization approach as well as
the guided training strategy further ease the instability
during training.
The eﬀect of the two-stage optimization strategy:
We further analyze the eﬀect of each stage in
the TS approach in Figure 2 and Figure 3. We take
the 2-bitwidth ResNet-50 on ImageNet as an example.
In Figure 3, Stage1 has the minimal loss of accuracy.
As for the Stage2, although it incurs apparent accuracy decrease in comparison with that of the Stage1,
its accuracy is consistently better than the results of
Baseline in every epoch. This illustrates that progressively seeking for the local minimum point is crutial for
ﬁnal better convergence. We also conduct additional
experiments on Cifar100 with 4-bit AlexNet. Interestingly, taking the model of Stage1 as the initial point,
the results of Stage2 even have relative increase using
two diﬀerent training strategies as mentioned above.
This can be interpreted by that further quantizing the
activations impose more regularization on the model
to overcome overﬁtting.
Overall, the two-step optimization strategy still performs steadily better than
the Baseline method which proves the eﬀectiveness of
this simple mechanism.
The eﬀect of the progressive quantization strategy: What’s more, we also separately explore the progressive quantization (i.e., PQ) eﬀect on the ﬁnal performance.
In this experiment, we apply AlexNet on
the ImageNet dataset. We continuously quantize both
weights and activations simultaneously from 32-bit→8bit→4-bit→2-bit and explictly illustrate the accuracy
change process for each precision in Figure 4.
quantitative results are also reported in Table 4 and
Table 5. From the ﬁgure we can ﬁnd that for the 8-bit
and 4-bit, the low-bit model has no accuracy loss with
respect to the full precision model.
However, when
quantizing from 4-bit to 2-bit, we can observe signiﬁcant accuracy drop. Despite this, we still observe 1.5%
Stage2+Guided
Figure 3: Validation accuracy of 2-bit ResNet-50 on ImageNet. Stage2+Guided means we combine the methods
Stage2 and Guided together during training.
relative improvement by comparing the top-1 accuracy
over the 2-bit baseline, which proves the eﬀectiveness
of the proposed strategy. It is worth noticing that the
accuracy curves become more unstable when quantizing to lower bit. This phenomenon is reasonable since
the precision becomes lower, the value will change more
frequently during training.
32-bit(PQ)
2-bit(Baseline)
Figure 4: Validation accuracy of the progressive quantization approach using AlexNet on ImageNet.
The eﬀect of the jointly guided training: We also
investigate the eﬀect of the guided joint training approach explained in Sec. 3.4. By comparing the results
in Table 4 and Table 5, we can ﬁnd that Guided method
steadily improves the baseline method by a promising
margin. This justiﬁes the low-precision model can always beneﬁt by learning from the full-precision model.
What’s more, we can ﬁnd PQ+TS+Guided outperforms PQ+TS in all settings.
This shows that the
guided training strategy and the progressive learning
mechanism can beneﬁt from each other for further improvement.
Joint vs. without joint: We further illustrate the
joint optimization eﬀect on guided training in Figure 5.
For explaning convenience, we implement it
based on the method Stage2+Guided and report the
2-bit AlexNet top-1 validation accuracy on ImageNet.
From the ﬁgure, we can observe that both the fullprecision model and its low-precision counterpart can
beneﬁt from learning from each other. In contrast, if
we keep the full-precision model unchanged, apparent
performance drop is observed. This result strongly supports our assumption that the high-precision and the
low-precision models should be jointly optimized in order to obtain the optimal gradient during training. The
improvement on the full-precision model may due to
the ensemble learning with the low-precision model and
similar observation is found in but with diﬀerent
32-bit model
32-bit model with joint training
2-bit(without joint training)
2-bit(joint training)
Figure 5: The eﬀect of the joint training strategy using
AlexNet on ImageNet.
5. Conclusion
In this paper, we have proposed three novel approaches to solve the optimization problem for quantizing the network with both low-precision weights and
activations. We ﬁrst propose a two-stage approach to
quantize the weights and activations in a two-step manner. We also observe that continuously quantize from
high-precision to low-precision is also beneﬁcial to the
ﬁnal performance. To better utilize the knowledge from
the full-precision model, we propose to jointly learn the
low-precision model and its full-precision counterpart
to optimize the gradient problem during training. Using 4-bit weights and activations for all layers, we even
outperform the performance of the 32-bit model on ImageNet and Cifar100 with general frameworks.