Occupancy Networks: Learning 3D Reconstruction in Function Space
Lars Mescheder1
Michael Oechsle1,2
Michael Niemeyer1
Sebastian Nowozin3†
Andreas Geiger1
1Autonomous Vision Group, MPI for Intelligent Systems and University of T¨ubingen
2ETAS GmbH, Stuttgart
3Google AI Berlin
{firstname.lastname}@tue.mpg.de
 
With the advent of deep neural networks, learning-based
approaches for 3D reconstruction have gained popularity.
However, unlike for images, in 3D there is no canonical representation which is both computationally and memory ef-
ﬁcient yet allows for representing high-resolution geometry
of arbitrary topology. Many of the state-of-the-art learningbased 3D reconstruction approaches can hence only represent very coarse 3D geometry or are limited to a restricted
domain. In this paper, we propose Occupancy Networks,
a new representation for learning-based 3D reconstruction
methods. Occupancy networks implicitly represent the 3D
surface as the continuous decision boundary of a deep neural network classiﬁer. In contrast to existing approaches,
our representation encodes a description of the 3D output
at inﬁnite resolution without excessive memory footprint.
We validate that our representation can efﬁciently encode
3D structure and can be inferred from various kinds of input. Our experiments demonstrate competitive results, both
qualitatively and quantitatively, for the challenging tasks of
3D reconstruction from single images, noisy point clouds
and coarse discrete voxel grids. We believe that occupancy
networks will become a useful tool in a wide variety of
learning-based 3D tasks.
1. Introduction
Recently, learning-based approaches for 3D reconstruction have gained popularity . In contrast
to traditional multi-view stereo algorithms, learned models
are able to encode rich prior information about the space of
3D shapes which helps to resolve ambiguities in the input.
While generative models have recently achieved remarkable successes in generating realistic high resolution images , this success has not yet been replicated
in the 3D domain. In contrast to the 2D domain, the com-
†Part of this work was done while at MSR Cambridge.
Figure 1: Overview: Existing 3D representations discretize
the output space differently: (a) spatially in voxel representations, (b) in terms of predicted points, and (c) in terms of
vertices for mesh representations. In contrast, (d) we propose to consider the continuous decision boundary of a classiﬁer fθ (e.g., a deep neural network) as a 3D surface which
allows to extract 3D meshes at any resolution.
munity has not yet agreed on a 3D output representation
that is both memory efﬁcient and can be efﬁciently inferred
from data. Existing representations can be broadly categorized into three categories: voxel-based representations
 , point-based representations 
and mesh representations , see Fig. 1.
Voxel representations are a straightforward generalization of pixels to the 3D case. Unfortunately, however, the
memory footprint of voxel representations grows cubically
with resolution, hence limiting na¨ıve implementations to
323 or 643 voxels. While it is possible to reduce the memory
footprint by using data adaptive representations such as octrees , this approach leads to complex implementations and existing data-adaptive algorithms are still limited
to relatively small 2563 voxel grids. Point clouds and
meshes have been introduced as alternative representations for deep learning, using appropriate loss functions. However, point clouds lack the connectivity structure
of the underlying mesh and hence require additional postprocessing steps to extract 3D geometry from the model.
 
Existing mesh representations are typically based on deforming a template mesh and hence do not allow arbitrary
topologies. Moreover, both approaches are limited in the
number of points/vertices which can be reliably predicted
using a standard feed-forward network.
In this paper1, we propose a novel approach to 3Dreconstruction based on directly learning the continuous
3D occupancy function (Fig. 1d). Instead of predicting a
voxelized representation at a ﬁxed resolution, we predict
the complete occupancy function with a neural network fθ
which can be evaluated at arbitrary resolution. This drastically reduces the memory footprint during training. At
inference time, we extract the mesh from the learned model
using a simple multi-resolution isosurface extraction algorithm which trivially parallelizes over 3D locations.
In summary, our contributions are as follows:
• We introduce a new representation for 3D geometry
based on learning a continuous 3D mapping.
• We show how this representation can be used for reconstructing 3D geometry from various input types.
• We experimentally validate that our approach is able
to generate high-quality meshes and demonstrate that
it compares favorably to the state-of-the-art.
2. Related Work
Existing work on learning-based 3D reconstruction can
be broadly categorized by the output representation they
produce as either voxel-based, point-based or mesh-based.
Voxel Representations: Due to their simplicity, voxels are
the most commonly used representation for discriminative
 and generative 3D tasks.
Early works have considered the problem of reconstructing 3D geometry from a single image using 3D convolutional neural networks which operate on voxel grids
 . Due to memory requirements, however, these
approaches were limited to relatively small 323 voxel grids.
While recent works have applied 3D convolutional neural networks to resolutions up to 1283, this is only
possible with shallow architectures and small batch sizes,
which leads to slow training.
The problem of reconstructing 3D geometry from multiple input views has been considered in . Ji
et al. and Kar et al. encode the camera parameters together with the input images in a 3D voxel representation and apply 3D convolutions to reconstruct 3D scenes
from multiple views. Paschalidou et al. introduced an
architecture that predicts voxel occupancies from multiple
images, exploiting multi-view geometry constraints .
Other works applied voxel representations to learn generative models of 3D shapes. Most of these methods are
1Also see for concurrent work that proposes similar ideas.
either based on variational auto-encoders or generative adversarial networks . These two approaches were
pursued in and , respectively.
Due to the high memory requirements of voxel representations, recent works have proposed to reconstruct 3D
objects in a multi-resolution fashion . However, the
resulting methods are often complicated to implement and
require multiple passes over the input to generate the ﬁnal
3D model. Furthermore, they are still limited to comparably
small 2563 voxel grids. For achieving sub-voxel precision,
several works have proposed to predict truncated
signed distance ﬁelds (TSDF) where each point in a
3D grid stores the truncated signed distance to the closest
3D surface point. However, this representation is usually
much harder to learn compared to occupancy representations as the network must reason about distance functions
in 3D space instead of merely classifying a voxel as occupied or not. Moreover, this representation is still limited by
the resolution of the underlying 3D grid.
Point Representations:
An interesting alternative representation of 3D geometry is given by 3D point clouds which
are widely used both in the robotics and in the computer
graphics communities. Qi et al. pioneered point
clouds as a representation for discriminative deep learning
tasks. They achieved permutation invariance by applying a
fully connected neural network to each point independently
followed by a global pooling operation. Fan et al. introduced point clouds as an output representation for 3D reconstruction. However, unlike other representations, this approach requires additional non-trivial post-processing steps
 to generate the ﬁnal 3D mesh.
Mesh Representations:
Meshes have ﬁrst been considered for discriminative 3D classiﬁcation or segmentation
tasks by applying convolutions on the graph spanned by the
mesh’s vertices and edges .
More recently, meshes have also been considered as output representation for 3D reconstruction . Unfortunately, most of these approaches are prone to generating self-intersecting meshes. Moreover, they are only able
to generate meshes with simple topology , require a
reference template from the same object class 
or cannot guarantee closed surfaces . Liao et al. 
proposed an end-to-end learnable version of the marching
cubes algorithm . However, their approach is still limited by the memory requirements of the underlying 3D grid
and hence also restricted to 323 voxel resolution.
In contrast to the aforementioned approaches, our approach leads to high resolution closed surfaces without selfintersections and does not require template meshes from the
same object class as input. This idea is related to classical
level set approaches to multi-view 3D reconstruction . However, instead of solving
a differential equation, our approach uses deep learning to
obtain a more expressive representation which can be naturally integrated into an end-to-end learning pipeline.
In this section, we ﬁrst introduce Occupancy Networks as
a representation of 3D geometry. We then describe how we
can learn a model that infers this representation from various forms of input such as point clouds, single images and
low-resolution voxel representations. Lastly, we describe a
technique for extracting high-quality 3D meshes from our
model at test time.
3.1. Occupancy Networks
Ideally, we would like to reason about the occupancy not
only at ﬁxed discrete 3D locations (as in voxel respresentations) but at every possible 3D point p ∈R3. We call the
resulting function
o : R3 →{0, 1}
the occupancy function of the 3D object. Our key insight
is that we can approximate this 3D function with a neural network that assigns to every location p ∈R3 an occupancy probability between 0 and 1. Note that this network is
equivalent to a neural network for binary classiﬁcation, except that we are interested in the decision boundary which
implicitly represents the object’s surface.
When using such a network for 3D reconstruction of an
object based on observations of that object (e.g., image,
point cloud, etc.), we must condition it on the input. Fortunately, we can make use of the following simple functional
equivalence: a function that takes an observation x ∈X
as input and has a function from p ∈R3 to R as output
can be equivalently described by a function that takes a pair
(p, x) ∈R3 × X as input and outputs a real number. The
latter representation can be simply parameterized by a neural network fθ that takes a pair (p, x) as input and outputs a
real number which represents the probability of occupancy:
fθ : R3 × X → 
We call this network the Occupancy Network.
3.2. Training
To learn the parameters θ of the neural network fθ(p, x),
we randomly sample points in the 3D bounding volume of
the object under consideration: for the i-th sample in a training batch we sample K points pij ∈R3, j = 1, . . . , K. We
then evaluate the mini-batch loss LB at those locations:
L(fθ(pij, xi), oij)
Here, xi is the i’th observation of batch B, oij ≡o(pij) denotes the true occupancy at point pij, and L(·, ·) is a crossentropy classiﬁcation loss.
The performance of our method depends on the sampling scheme that we employ for drawing the locations
pij that are used for training.
In Section 4.6 we perform a detailed ablation study comparing different sampling
schemes. In practice, we found that sampling uniformly inside the bounding box of the object with an additional small
padding yields the best results.
Our 3D representation can also be used for learning probabilistic latent variable models.
Towards this
goal, we introduce an encoder network gψ(·) that takes
locations pij and occupancies oij as input and predicts mean µψ and standard deviation σψ of a Gaussian distribution qψ(z|(pij, oij)j=1:K) on latent z ∈RL
as output.
We optimize a lower bound 
to the negative log-likelihood of the generative model
p((oij)j=1:K|(pij)j=1:K):
B (θ, ψ) = 1
L(fθ(pij, zi), oij)
+ KL (qψ(z|(pij, oij)j=1:K) ∥p0(z))
where KL denotes the KL-divergence, p0(z) is a prior distribution on the latent variable zi (typically Gaussian) and
zi is sampled according to qψ(zi|(pij, oij)j=1:K).
3.3. Inference
For extracting the isosurface corresponding to a new observation given a trained occupancy network, we introduce
Multiresolution IsoSurface Extraction (MISE), a hierarchical isosurface extraction algorithm (Fig. 2). By incrementally building an octree , MISE enables us to
extract high resolution meshes from the occupancy network
without densely evaluating all points of a high-dimensional
occupancy grid.
We ﬁrst discretize the volumetric space at an initial resolution and evaluate the occupancy network fθ(p, x) for all p
in this grid. We mark all grid points p as occupied for which
fθ(p, x) is bigger or equal to some threshold2 τ. Next, we
mark all voxels as active for which at least two adjacent
grid points have differing occupancy predictions. These are
the voxels which would intersect the mesh if we applied
the marching cubes algorithm at the current resolution. We
subdivide all active voxels into 8 subvoxels and evaluate all
new grid points which are introduced to the occupancy grid
through this subdivision. We repeat these steps until the
desired ﬁnal resolution is reached. At this ﬁnal resolution,
2The threshold τ is the only hyperparameter of our occupancy network.
It determines the “thickness” of the extracted 3D surface. In our experiments we cross-validate this threshold on a validation set.
Figure 2: Multiresolution IsoSurface Extraction: We ﬁrst
mark all points at a given resolution which have already
been evaluated as either occupied (red circles) or unoccupied (cyan diamonds). We then determine all voxels that
have both occupied and unoccupied corners and mark them
as active (light red) and subdivide them into 8 subvoxels
each. Next, we evaluate all new grid points (empty circles)
that have been introduced by the subdivision. The previous
two steps are repeated until the desired output resolution is
reached. Finally we extract the mesh using the marching
cubes algorithm , simplify and reﬁne the output mesh
using ﬁrst and second order gradient information.
we apply the Marching Cubes algorithm to extract an
approximate isosurface
{p ∈R3 | fθ(p, x) = τ}.
Our algorithm converges to the correct mesh if the occupancy grid at the initial resolution contains points from every connected component of both the interior and the exterior of the mesh. It is hence important to take an initial
resolution which is high enough to satisfy this condition.
In practice, we found that an initial resolution of 323 was
sufﬁcient in almost all cases.
The initial mesh extracted by the Marching Cubes algorithm can be further reﬁned. In a ﬁrst step, we simplify
the mesh using the Fast-Quadric-Mesh-Simpliﬁcation algorithm3 . Finally, we reﬁne the output mesh using ﬁrst
and second order (i.e., gradient) information. Towards this
goal, we sample random points pk from each face of the
output mesh and minimize the loss
(fθ(pk, x) −τ)2 + λ
∇pfθ(pk, x)
∥∇pfθ(pk, x)∥−n(pk)
where n(pk) denotes the normal vector of the mesh at pk. In
practice, we set λ = 0.01. Minimization of the second term
3 
in (6) uses second order gradient information and can be ef-
ﬁciently implemented using Double-Backpropagation .
Note that this last step removes the discretization artifacts of the Marching Cubes approximation and would not
be possible if we had directly predicted a voxel-based representation. In addition, our approach also allows to efﬁciently extract normals for all vertices of our output mesh
by simply backpropagating through the occupancy network.
In total, our inference algorithm requires 3s per mesh.
3.4. Implementation Details
We implemented our occupancy network using a fullyconnected neural network with 5 ResNet blocks and
condition it on the input using conditional batch normalization . We exploit different encoder architectures
depending on the type of input. For single view 3D reconstruction, we use a ResNet18 architecture . For point
clouds we use the PointNet encoder . For voxelized inputs, we use a 3D convolutional neural network . For
unconditional mesh generation, we use a PointNet for
the encoder network gψ. More details are provided in the
supplementary material.
4. Experiments
We conduct three types of experiments to validate the
proposed occupancy networks. First, we analyze the representation power of occupancy networks by examining how
well the network can reconstruct complex 3D shapes from a
learned latent embedding. This gives us an upper bound on
the results we can achieve when conditioning our representation on additional input. Second, we condition our occupancy networks on images, noisy point clouds and low resolution voxel representations, and compare the performance
of our method to several state-of-the-art baselines. Finally,
we examine the generative capabilities of occupancy networks by adding an encoder to our model and generating
unconditional samples from this model.4
Baselines: For the single image 3D reconstruction task, we
compare our approach against several state-of-the-art baselines which leverage various 3D representations: we evaluate against 3D-R2N2 as a voxel-based method, Point
Set Generating Networks (PSGN) as a point-based
technique and Pixel2Mesh as well as AtlasNet as
mesh-based approaches. For point cloud inputs, we adapted
3D-R2N2 and PSGN by changing the encoder. As meshbased baseline, we use Deep Marching Cubes (DMC) 
which has recently reported state-of-the-art results on this
task. For the voxel super-resolution task we assess the improvements wrt. the input.
4The code to reproduce our experiments is available under https://
github.com/LMescheder/Occupancy-Networks.
Figure 3: Discrete vs. Continuous. Qualitative comparison
of our continuous representation (right) to voxelizations at
various resolutions (left). Note how our representation encodes details which are lost in voxel-based representations.
Dataset: For all of our experiments we use the ShapeNet
 subset of Choy et al. . We also use the same voxelization, image renderings and train/test split as Choy et al.
Moreover, we subdivide the training set into a training and
a validation set on which we track the loss of our method
and the baselines to determine when to stop training.
In order to generate watertight meshes and to determine
if a point lies in the interior of a mesh (e.g., for measuring
IoU) we use the code provided by Stutz et al. . For a fair
comparison, we sample points from the surface of the watertight mesh instead of the original model as ground truth
for PSGN , Pixel2Mesh and DMC . All of our
evaluations are conducted wrt. these watertight meshes.
For evaluation we use the volumetric IoU, the
Chamfer-L1 distance and a normal consistency score.
Volumetric IoU is deﬁned as the quotient of the volume
of the two meshes’ union and the volume of their intersection. We obtain unbiased estimates of the volume of the intersection and the union by randomly sampling 100k points
from the bounding volume and determining if the points lie
inside our outside the ground truth / predicted mesh.
The Chamfer-L1 distance is deﬁned as the mean of an
accuracy and and a completeness metric. The accuracy metric is deﬁned as the mean distance of points on the output
mesh to their nearest neighbors on the ground truth mesh.
The completeness metric is deﬁned similarly, but in opposite direction. We estimate both distances efﬁciently by randomly sampling 100k points from both meshes and using
a KD-tree to estimate the corresponding distances. Like
Fan et al. we use 1/10 times the maximal edge length
of the current object’s bounding box as unit 1.
Finally, to measure how well the methods can capture
higher order information, we deﬁne a normal consistency
score as the mean absolute dot product of the normals in one
mesh and the normals at the corresponding nearest neighbors in the other mesh.
4.1. Representation Power
In our ﬁrst experiment, we investigate how well occupancy networks represent 3D geometry, independent of the
inaccuracies of the input encoding. The question we try
to answer in this experiment is whether our network can
Figure 4: IoU vs. Resolution. This plot shows the IoU
of a voxelization to the ground truth mesh (solid blue line)
in comparison to our continuous representation (solid orange line) as well as the number of parameters per model
needed for the two representations (dashed lines). Note how
our representation leads to larger IoU wrt. the ground truth
mesh compared to a low-resolution voxel representation. At
the same time, the number of parameters of a voxel representation grows cubically with the resolution, whereas the
number of parameters of occupancy networks is independent of the resolution.
learn a memory efﬁcient representation of 3D shapes while
at the same time preserving as many details as possible.
This gives us an estimate of the representational capacity
of our model and an upper bound on the performance we
may expect when conditioning our model on additional input. Similarly to , we embed each training sample in a
512 dimensional latent space and train our neural network
to reconstruct the 3D shape from this embedding.
We apply our method to the training split of the “chair”
category of the ShapeNet dataset. This subset is challenging to represent as it is highly varied and many models contain high-frequency details. Since we are only interested
in reconstructing the training data, we do not use separate
validation and test sets for this experiment.
For evaluation, we measure the volumetric IoU to the
ground truth mesh. Quantitative results and a comparison
to voxel representations at various resolutions are shown
in Fig. 4. We see that the Occupancy Network (ONet) is
able to faithfully represent the entire dataset with a high
mean IoU of 0.89 while a low-resolution voxel representation is not able to represent the meshes accurately. At the
same time, the occupancy network is able to encode all 4746
training samples with as little as 6M parameters, independently of the resolution. In contrast, the memory requirements of a voxel representation grow cubically with resolution. Qualitative results are shown in Fig. 3. We observe
that the occupancy network enables us to represent details
of the 3D geometry which are lost in a low-resolution voxelization.
Figure 5: Single Image 3D Reconstruction. The input image is shown in the ﬁrst column, the other columns show
the results for our method compared to various baselines.
4.2. Single Image 3D Reconstruction
In our second experiment, we condition the occupancy
network on an additional view of the object from a random
camera location. The goal of this experiment is to evaluate how well occupancy functions can be inferred from
complex input. While we train and test our method on the
ShapeNet dataset, we also present qualitative results for the
KITTI and the Online Products dataset .
ShapeNet: In this experiment, we use a ResNet-18 image
encoder, which was pretrained on the ImageNet dataset. For
a fair comparison, we use the same image encoder for both
3D-R2N2 and PSGN5. For PSGN we use a fully connected
decoder with 4 layers and 512 hidden units in each layer.
The last layer projects the hidden representation to a 3072
dimensional vector which we reshape into 1024 3D points.
As we use only a single input view, we remove the recurrent network in 3D-R2N2. We reimplemented the method
of in PyTorch, closely following the Tensorﬂow implementation provided by the authors. For the method of ,
we use the code and pretrained model from the authors6.
5See supplementary for a comparison to the original architectures.
6 
For all methods, we track the loss and other metrics on
the validation set and stop training as soon as the target metric reaches its optimum.
For 3D-R2N2 and our method
we use the IoU to the ground truth mesh as target metric,
for PSGN and Pixel2Mesh we use the Chamfer distance to
the ground truth mesh as target metric. To extract the ﬁnal
mesh, we use a threshold of 0.4 for 3D-R2N2 as suggested
in the original publication . To choose the threshold parameter τ for our method, we perform grid search on the
validation set (see supplementary) and found that τ = 0.2
yields a good trade-off between accuracy and completeness.
Qualitative results from our model and the baselines are
shown in Fig. 5. We observe that all methods are able to
capture the 3D geometry of the input image.
3D-R2N2 produces a very coarse representation and hence
lacks details. In contrast, PSGN produces a high-ﬁdelity
output, but lacks connectivity. As a result, PSGN requires
additional lossy post-processing steps to produce a ﬁnal
mesh7. Pixel2Mesh is able to create compelling meshes,
but often misses holes in the presence of more complicated
topologies. Such topologies are frequent, for example, for
the “chairs“ category in the ShapeNet dataset. Similarly,
AtlasNet captures the geometry well, but produces artifacts
in form of self-intersections and overlapping patches.
In contrast, our method is able to capture complex
topologies, produces closed meshes and preserves most of
the details. Please see the supplementary material for additional high resolution results and failure cases.
Quantitative results are shown in Table 1. We observe
that our method achieves the highest IoU and normal consistency to the ground truth mesh. Surprisingly, while not
trained wrt. Chamfer distance as PSGN, Pixel2Mesh or AtlasNet, our method also achieves good results for this metric. Note that it is not possible to evaluate the IoU for PSGN
or AtlasNet, as they do not yield watertight meshes.
Real Data: To test how well our model generalizes to real
data, we apply our network to the KITTI and Online
Products datasets . To capture the variety in viewpoints
of KITTI and Online Products, we rerendered all ShapeNet
objects with random camera locations and retrained our network for this task.
For the KITTI dataset, we additionally use the instance
masks provided in to mask and crop car regions. We
then feed these images into our neural network to predict
the occupancy function. Some selected qualitative results
are shown in Fig. 6a. Despite only trained on synthetic data,
we observe that our method is also able to generate realistic
reconstructions in this challenging setting.
For the Online Products dataset, we apply the same pretrained model.
Several qualitative results are shown in
Fig. 6b. Again, we observe that our method generalizes rea-
7See supplementary material for meshing results.
Chamfer-L1
Normal Consistency
loudspeaker
Table 1: Single Image 3D Reconstruction. This table shows a numerical comparison of our approach and the baselines for
single image 3D reconstruction on the ShapeNet dataset. We measure the IoU, Chamfer-L1 distance and Normal Consistency
for various methods wrt. the ground truth mesh. Note that in contrast to prior work, we compute the IoU wrt. the highresolution mesh and not a coarse voxel representation. All methods apart from AtlasNet are evaluated on the test split by
Choy et al. . Since AtlasNet uses a pretrained model, we evaluate it on the intersection of the test splits from and .
Reconstruction
Reconstruction
(b) Online Products
Figure 6: Qualitative results for real data. We applied our
trained model to the KITTI and Online Products datasets.
Despite only trained on synthetic data, our model generalizes reasonably well to real data.
sonably well to real images despite being trained solely on
synthetic data. An additional quantitative evaluation on the
Pix3D dataset can be found in the supplementary.
4.3. Point Cloud Completion
As a second conditional task, we apply our method to
the problem of reconstructing the mesh from noisy point
clouds. Towards this goal, we subsample 300 points from
the surface of each of the (watertight) ShapeNet models and
apply noise using a Gaussian distribution with zero mean
and standard deviation 0.05 to the point clouds.
Again, we measure both the IoU and Chamfer-L1 distance wrt. the ground truth mesh. The results are shown in
Table 2. We observe that our method achieves the highest
Chamfer-L1†
Normal Consistency
Table 2: 3D Reconstruction from Point Clouds. This table shows a numerical comparison of our approach wrt. the
baselines for 3D reconstruction from point clouds on the
ShapeNet dataset. We measure IoU, Chamfer-L1 distance
and Normal Consistency wrt. the ground truth mesh.
IoU and normal consistency as well as the lowest Chamfer-
L1 distance. Note that all numbers are signiﬁcantly better
than for the single image 3D reconstruction task. This can
be explained by the fact that this task is much easier for the
recognition model, as there is less ambiguity and the model
only has to ﬁll in the gaps.
4.4. Voxel Super-Resolution
As a ﬁnal conditional task, we apply occupancy networks to 3D super-resolution . Here, the task is to reconstruct a high-resolution mesh from a coarse 323 voxelization of this mesh.
The results are shown in Table 3. We observe that our
model considerably improves IoU, Chamfer-L1 distance
and normal consistency compared to the coarse input mesh.
Please see the supplementary for qualitative results.
4.5. Unconditional Mesh Generation
Finally, we apply our occupancy network to unconditional mesh generation, training it separately on four categories of the ShapeNet dataset in an unsupervised fashion.
†Result for PSGN was corrected after CVPR camera-ready version.
Chamfer-L1
Normal Consistency
Table 3: Voxel Super-Resolution. This table shows a numerical comparison of the output of our approach in comparison to the input on the ShapeNet dataset.
Figure 7: Unconditional 3D Samples. Random samples
of our unsupervised models trained on the categories “car“,
“airplane“, “sofa“ and “chair“ of the ShapeNet dataset. We
see that our models are able to capture the distribution of
3D objects and produce compelling new samples.
Our goal is to explore how well our model can represent
the latent space of 3D models. Some samples are shown
in Figure 7. Indeed, we ﬁnd that our model can generate
compelling new models. In the supplementary material we
show interpolations in latent space for our model.
4.6. Ablation Study
In this section, we test how the various components of
our model affect its performance on the single-image 3Dreconstruction task.
Effect of sampling strategy
First, we examine how the
sampling strategy affects the performance of our ﬁnal
model. We try three different sampling strategies: (i) sampling 2048 points uniformly in the bounding volume of the
ground truth mesh (uniform sampling), (ii) sampling 1024
points inside and 1024 points outside mesh (equal sampling) and (iii) sampling 1024 points uniformly and 1024
points on the surface of the mesh plus some Gaussian noise
with standard deviation 0.1 (surface sampling). We also examine the effect of the number of sampling points by decreasing this number from 2048 to 64.
The results are shown in Table 4a. To our surprise, we
ﬁnd that uniform, the simplest sampling strategy, works
best. We explain this by the fact that other sampling strategies introduce bias to the model: for example, when sampling an equal number of points inside and outside the mesh,
we implicitly tell the model that every object has a volume
Chamfer-L1
Normal Consistency
Uniform (64)
(a) Inﬂuence of Sampling Strategy
Chamfer-L1
Normal Consistency
Full model
(b) Inﬂuence of Occupancy Network Architecture
Table 4: Ablation Study. When we vary the sampling strategy, we observe that uniform sampling in the bounding volume performs best. Similarly, when we vary the architecture, we ﬁnd that our ResNet architecture with conditional
batch normalization yields the best results.
of 0.5. Indeed, when using this sampling strategy, we observe thickening artifacts in the model’s output. Moreover,
we ﬁnd that reducing the number of sampling points from
2048 to 64 still leads to good performance, although the
model does not perform as well as a model trained with
2048 sampling points.
Effect of architecture
To test the effect of the various
components of our architecture, we test two variations: (i)
we remove the conditional batch normalization and replace
it with a linear layer in the beginning of the network that
projects the encoding of the input to the required hidden
dimension and (ii) we remove all ResNet blocks in the decoder and replace them with linear blocks. The results are
presented in Table 4b. We ﬁnd that both components are
helpful to achieve good performance.
5. Conclusion
In this paper, we introduced occupancy networks, a new
representation for 3D geometry. In contrast to existing representations, occupancy networks are not constrained by the
discretization of the 3D space and can hence be used to represent realistic high-resolution meshes.
Our experiments demonstrate that occupancy networks
are very expressive and can be used effectively both for supervised and unsupervised learning. We hence believe that
occupancy networks are a useful tool which can be applied
to a wide variety of 3D tasks.
Acknowledgements
This work was supported by the Intel Network on Intelligent Systems and by Microsoft Research through its PhD
Scholarship Programme.