FoldingNet: Point Cloud Auto-encoder via Deep Grid Deformation
Yaoqing Yang†
 
Chen Feng‡
 
Yiru Shen§
 
Dong Tian‡
 
†Carnegie Mellon University
‡Mitsubishi Electric Research Laboratories (MERL)
§Clemson University
Recent deep networks that directly handle points in a
point set, e.g., PointNet, have been state-of-the-art for supervised learning tasks on point clouds such as classiﬁcation and segmentation.
In this work, a novel end-toend deep auto-encoder is proposed to address unsupervised
learning challenges on point clouds. On the encoder side,
a graph-based enhancement is enforced to promote local
structures on top of PointNet. Then, a novel folding-based
decoder deforms a canonical 2D grid onto the underlying
3D object surface of a point cloud, achieving low reconstruction errors even for objects with delicate structures.
The proposed decoder only uses about 7% parameters of a
decoder with fully-connected neural networks, yet leads to
a more discriminative representation that achieves higher
linear SVM classiﬁcation accuracy than the benchmark.
In addition, the proposed decoder structure is shown, in
theory, to be a generic architecture that is able to reconstruct an arbitrary point cloud from a 2D grid. Our code
is available at 
license#FoldingNet
1. Introduction
3D point cloud processing and understanding are usually deemed more challenging than 2D images mainly due
to a fact that point cloud samples live on an irregular structure while 2D image samples (pixels) rely on a 2D grid in
the image plane with a regular spacing. Point cloud geometry is typically represented by a set of sparse 3D points.
Such a data format makes it difﬁcult to apply traditional
deep learning framework. E.g. for each sample, traditional
convolutional neural network (CNN) requires its neighboring samples to appear at some ﬁxed spatial orientations
and distances so as to facilitate the convolution.
Unfortunately, point cloud samples typically do not follow such
constraints. One way to alleviate the problem is to voxelize
a point cloud to mimic the image representation and then
to operate on voxels. The downside is that voxelization has
to either sacriﬁce the representation accuracy or incurs huge
redundancies, that may pose an unnecessary cost in the sub-
1st folding
2nd folding
Table 1. Illustration of the two-step-folding decoding. Column
one contains the original point cloud samples from the ShapeNet
dataset . Column two illustrates the 2D grid points to be folded
during decoding. Column three contains the output after one folding operation. Column four contains the output after two folding
operations. This output is also the reconstructed point cloud. We
use a color gradient to illustrate the correspondence between the
2D grid in column two and the reconstructed point clouds after
folding operations in the last two columns. Best viewed in color.
sequent processing, either at a compromised performance or
an rapidly increased processing complexity. Related priorarts will be reviewed in Section 1.1.
In this work, we focus on the emerging ﬁeld of unsupervised learning for point clouds. We propose an autoencoder (AE) that is referenced as FoldingNet. The output from the bottleneck layer in the auto-encoder is called
a codeword that can be used as a high-dimensional embedding of an input point cloud. We are going to show that a 2D
grid structure is not only a sampling structure for imaging,
but can indeed be used to construct a point cloud through
 
perceptron
max-pooling
perceptron
2D)grid)points)(fixed)
Graph-based Encoder
concatenate
perceptron
perceptron
Folding-based Decoder
covariance
concatenate
intermediate)
point)cloud
Figure 1. FoldingNet Architecture. The graph-layers are the graph-based max-pooling layers mentioned in (2) in Section 2.1. The 1st
and the 2nd folding are both implemented by concatenating the codeword to the feature vectors followed by a 3-layer perceptron. Each
perceptron independently applies to the feature vector of a single point as in , i.e., applies to the rows of the m-by-k matrix.
the proposed folding operation. This is based on the observation that the 3D point clouds of our interest are obtained
from object surfaces: either discretized from boundary representations in CAD/computer graphics, or sampled from
line-of-sight sensors like LIDAR. Intuitively, any 3D object
surface could be transformed to a 2D plane through certain
operations like cutting, squeezing, and stretching. The inverse procedure is to glue those 2D point samples back onto
an object surface via certain folding operations, which are
initialized as 2D grid samples. As illustrated in Table 1, to
reconstruct a point cloud, successive folding operations are
joined to reproduce the surface structure. The points are
colorized to show the correspondence between the initial
2D grid samples and the reconstructed 3D point samples.
Using the folding-based method, the challenges from the
irregular structure of point clouds are well addressed by directly introducing such an implicit 2D grid constraint in the
decoder, which avoids the costly 3D voxelization in other
works . It will be demonstrated later that the folding
operations can build an arbitrary surface provided a proper
codeword. Notice that when data are from volumetric format instead of 2D surfaces, a 3D grid may perform better.
Despite being strongly expressive in reconstructing point
clouds, the folding operation is simple: it is started by augmenting the 2D grid points with the codeword obtained
from the encoder, which is then processed through a 3layer perceptron. The proposed decoder is simply a concatenation of two folding operations. This design makes
the proposed decoder much smaller in parameter size than
the fully-connected decoder proposed recently in . In
Section 4.6, we show that the number of parameters of our
folding-based decoder is about 7% of the fully connected
decoder in . Although the proposed decoder has a simple structure, we theoretically show in Theorem 3.2 that this
folding-based structure is universal in that one folding operation that uses only a 2-layer perceptron can already reproduce arbitrary point-cloud structure. Therefore, it is not
surprising that our FoldingNet auto-encoder exploiting two
consecutive folding operations can produce elaborate structures.
To show the efﬁciency of FoldingNet auto-encoder for
unsupervised representation learning, we follow the experimental settings in and test the transfer classiﬁcation accuracy from ShapeNet dataset to ModelNet dataset .
The FoldingNet auto-encoder is trained using ShapeNet
dataset, and tested out by extracting codewords from ModelNet dataset. Then, we train a linear SVM classiﬁer to
test the discrimination effectiveness of the extracted codewords. The transfer classiﬁcation accuracy is 88.4% on the
ModelNet dataset with 40 shape categories. This classiﬁcation accuracy is even close to the state-of-the-art supervised training result . To achieve the best classiﬁcation
performance and least reconstruction loss, we use a graphbased encoder structure that is different from . This
graph-based encoder is based on the idea of local feature
pooling operations and is able to retrieve and propagate local structural information along the graph structure.
To intuitively interpret our network design: we want to
impose a “virtual force” to deform/cut/stretch a 2D grid lattice onto a 3D object surface, and such a deformation force
should be inﬂuenced or regulated by interconnections induced by the lattice neighborhood. Since the intermediate
folding steps in the decoder and the training process can be
illustrated by reconstructed points, the gradual change of
the folding forces can be visualized.
Now we summarize our contributions in this work:
• We train an end-to-end deep auto-encoder that consumes unordered point clouds directly.
• We propose a new decoding operation called folding
and theoretically show it is universal in point cloud reconstruction, while providing orders to reconstructed
points as a unique byproduct than other methods.
• We show by experiments on major datasets that folding
can achieve higher classiﬁcation accuracy than other
unsupervised methods.
1.1. Related works
Applications of learning on point clouds include shape
completion and recognition , unmanned autonomous
vehicles , 3D object detection, recognition and classiﬁcation , contour detection ,
layout inference , scene labeling , category discovery , point classiﬁcation, dense labeling and segmentation ,
Most deep neural networks designed for 3D point clouds
are based on the idea of partitioning the 3D space into
regular voxels and extending 2D CNNs to voxels, such
as , including the the work on 3D generative adversarial network . The main problem of voxel-based
networks is the fast growth of neural-network size with the
increasing spatial resolution. Some other options include
octree-based and kd-tree-based neural networks.
Recently, it is shown that neural networks based on purely
3D point representations work quite efﬁciently
for point clouds. The point-based neural networks can reduce the overhead of converting point clouds into other data
formats (such as octrees and voxels), and in the meantime
avoid the information loss due to the conversion.
The only work that we are aware of on end-to-end deep
auto-encoder that directly handles point clouds is . The
AE designed in is for the purpose of extracting features
for generative networks. To encode, it sorts the 3D points
using the lexicographic order and applies a 1D CNN on the
point sequence. To decode, it applies a three-layer fully
connected network. This simple structure turns out to outperform all existing unsupervised works on representation
extraction of point clouds in terms of the transfer classiﬁcation accuracy from the ShapeNet dataset to the ModelNet
dataset . Our method, which has a graph-based encoder
and a folding-based decoder, outperforms this method in
transfer classiﬁcation accuracy on the ModelNet40 dataset
 . Moreover, compared to , our AE design is more interpretable: the encoder learns the local shape information
and combines information by max-pooling on a nearestneighbor graph, and the decoder learns a “force” to fold a
two-dimensional grid twice in order to warp the grid into
the shape of the point cloud, using the information obtained
by the encoder. Another closely related work reconstructs a
point set from a 2D image . Although the deconvolution
network in requires a 2D image as side information,
we ﬁnd it useful as another implementation of our folding
operation. We compare FoldingNet with the deconvolutionbased folding and show that FoldingNet performs slightly
better in reconstruction error with fewer parameters (see
Supplementary Section 9).
It is hard for purely point-based neural networks to
extract local neighborhood structure around points, i.e.,
features of neighboring points instead of individual ones.
Some attempts for this are made in . In this work,
we exploit local neighborhood features using a graph-based
framework. Deep learning on graph-structured data is not
a new idea. There are tremendous amount of works on applying deep learning onto irregular data such as graphs and
point sets . Although using graphs as a processing framework for
deep learning on point clouds is a natural idea, only several
seminal works made attempts in this direction .
These works try to generalize the convolution operations
from 2D images to graphs. However, since it is hard to
deﬁne convolution operations on graphs, we use a simple
graph-based neural network layer that is different from previous works: we construct the K-nearest neighbor graph (K-
NNG) and repeatedly conduct the max-pooling operations
in each node’s neighborhood. It generalizes the global maxpooling operation proposed in in that the max-pooling
is only applied to each local neighborhood to generate local
data signatures. Compared to the above graph based convolution networks, our design is simpler and computationally
efﬁcient as in . K-NNGs are also used in other applications of point clouds without the deep learning framework
such as surface detection, 3D object recognition, 3D object
segmentation and compression .
The folding operation that reconstructs a surface from a
2D grid essentially establishes a mapping from a 2D regular domain to a 3D point cloud.
A natural question to
ask is whether we can parameterize 3D points with compatible meshes that are not necessarily regular grids, such
as cross-parametrization . From Table 2, it seems that
FoldingNet can learn to generate “cuts” on the 2D grid and
generate surfaces that are not even topologically equivalent
to a 2D grid, and hence make the 2D grid representation
universal to some extent. Nonetheless, the reconstructed
points may still have genus-wise distortions when the original surface is too complex. For example, in Table 2, see
the missing winglets on the reconstructed plane and the
missing holes on the back of the reconstructed chair. To
recover those ﬁner details might require more input point
samples and more complex encoder/decoder networks. Another method to learn the surface embedding is to learn a
metric alignment layer as in , which may require computationally intensive internal optimization during training.
1.2. Preliminaries and Notation
We will often denote the point set by S. We use bold
lower-case letters to represent vectors, such as x, and use
bold upper-case letters to represent matrices, such as A.
The codeword is always represented by θ. We call a matrix m-by-n or m × n if it has m rows and n columns.
2. FoldingNet Auto-encoder on Point Clouds
Now we propose the FoldingNet deep auto-encoder. The
structure of the auto-encoder is shown in Figure 1. The input to the encoder is an n-by-3 matrix. Each row of the
matrix is composed of the 3D position (x, y, z). The output
is an m-by-3 matrix, representing the reconstructed point
positions. The number of reconstructed points m is not necessarily the same as n. Suppose the input contains the point
set S and the reconstructed point set is the set bS. Then, the
reconstruction error for bS is computed using a layer deﬁned
as the (extended) Chamfer distance,
dCH(S, bS) = max
x∈S ∥bx −x∥2
The term minbx∈bS ∥x −bx∥2 enforces that any 3D point x
in the original point cloud has a matching 3D point bx in the
reconstructed point cloud, and the term minx∈S ∥bx −x∥2
enforces the matching vice versa. The max operation enforces that the distance from S to bS and the distance vice
versa have to be small simultaneously. The encoder computes a representation (codeword) of each input point cloud
and the decoder reconstructs the point cloud using this codeword. In our experiments, the codeword length is set as 512
in accordance with .
2.1. Graph-based Encoder Architecture
The graph-based encoder follows a similar design in 
which focuses on supervised learning using point cloud
neighborhood graphs.
The encoder is a concatenation
of multi-layer perceptrons (MLP) and graph-based maxpooling layers. The graph is the K-NNG constructed from
the 3D positions of the nodes in the input point set. In experiments, we choose K = 16. First, for every single point
v, we compute its local covariance matrix of size 3-by-3
and vectorize it to size 1-by-9. The local covariance of v
is computed using the 3D positions of the points that are
one-hop neighbors of v (including v) in the K-NNG. We
concatenate the matrix of point positions with size n-by-3
and the local covariances for all points of size n-by-9 into a
matrix of size n-by-12 and input them to a 3-layer perceptron. The perceptron is applied in parallel to each row of the
input matrix of size n-by-12. It can be viewed as a per-point
function on each 3D point. The output of the perceptron is
fed to two consecutive graph layers, where each layer applies max-pooling to the neighborhood of each node. More
speciﬁcally, suppose the K-NN graph has adjacency matrix
A and the input matrix to the graph layer is X. Then, the
output matrix is
Y = Amax(X)K,
where K is a feature mapping matrix, and the (i,j)-th entry
of the matrix Amax(X) is
(Amax(X))ij = ReLU( max
k∈N(i) xkj).
The local max-pooling operation maxk∈N(i) in (3) essentially computes a local signature based on the graph structure. This signature can represent the (aggregated) topology
information of the local neighborhood. Through concatenations of the graph-based max-pooling layers, the network
propagates the topology information into larger areas.
2.2. Folding-based Decoder Architecture
The proposed decoder uses two consecutive 3-layer perceptrons to warp a ﬁxed 2D grid into the shape of the input point cloud. The input codeword is obtained from the
graph-based encoder. Before we feed the codeword into the
decoder, we replicate it m times and concatenate the m-by-
512 matrix with an m-by-2 matrix that contains the m grid
points on a square centered at the origin. The result of the
concatenation is a matrix of size m-by-514. The matrix is
processed row-wise by a 3-layer perceptron and the output
is a matrix of size m-by-3. After that, we again concatenate
the replicated codewords to the m-by-3 output and feed it
into a 3-layer perceptron. This output is the reconstructed
point cloud. The parameter n is set as per the input point
cloud size, e.g. n = 2048 in our experiments, which is the
same as .We choose m grid points in a square, so m is
chosen as 2025 which is the closest square number to 2048.
Deﬁnition 1. We call the concatenation of replicated codewords to low-dimensional grid points, followed by a pointwise MLP a folding operation.
The folding operation essentially forms a universal 2Dto-3D mapping. To intuitively see why this folding operation is a universal 2D-to-3D mapping, denote the input
2D grid points by the matrix U. Each row of U is a twodimensional grid point. Denote the i-th row of U by ui
and the codeword output from the encoder by θ. Then, after concatenation, the i-th row of the input matrix to the
MLP is [ui, θ]. Since the MLP is applied in parallel to each
row of the input matrix, the i-th row of the output matrix
can be written as f([ui, θ]), where f indicates the function
conducted by the MLP. This function can be viewed as a parameterized high-dimensional function with the codeword θ
being a parameter to guide the structure of the function (the
folding operation). Since MLPs are good at approximating
non-linear functions, they can perform elaborate folding operations on the 2D grids. The high-dimensional codeword
essentially stores the force that is needed to do the folding,
which makes the folding operation more diverse.
The proposed decoder has two successive folding operations. The ﬁrst one folds the 2D grid to 3D space, and the
second one folds inside the 3D space. We show the outputs
after these two folding operations in Table 1. From column
C and column D in Table 1, we can see that each folding
operation conducts a relatively simple operation, and the
composition of the two folding operations can produce quite
elaborate surface shapes. Although the ﬁrst folding seems
simpler than the second one, together they lead to substantial changes in the ﬁnal output. More successive folding operations can be applied if more elaborate surface shapes are
required. More variations of the decoder including changes
of grid dimensions and the number of folding operations
can be found in Supplementary Section 8.
3. Theoretical Analysis
Theorem 3.1. The proposed encoder structure is permutation invariant, i.e., if the rows of the input point cloud matrix
are permuted, the codeword remains unchanged.
Proof. See Supplementary Section 6.
Then, we state a theorem about the universality of the
proposed folding-based decoder. It shows the existence of a
folding-based decoder such that by changing the codeword
θ, the output can be an arbitrary point cloud.
Theorem 3.2. There exists a 2-layer perceptron that can reconstruct arbitrary point clouds from a 2-dimensional grid
using the folding operation.
More speciﬁcally, suppose the input is a matrix U of size
m-by-2 such that each row of U is the 2D position of a
point on a 2-dimensional grid of size m. Then, there exists
an explicit construction of a 2-layer perceptron (with handcrafted coefﬁcients) such that for any arbitrary 3D point
cloud matrix S of size m-by-3 (where each row of S is the
(x, y, z) position of a point in the point cloud), there exists a codeword vector θ such that if we concatenate θ to
each row of U and apply the 2-layer perceptron in parallel
to each row of the matrix after concatenation, we obtain the
point cloud matrix S from the output of the perceptron.
Proof in sketch. The full proof is in Supplementary Section
7. In the proof, we show the existence by explicitly constructing a 2-layer perceptron that satisﬁes the stated properties. The main idea is to show that in the worst case, the
points in the 2D grid functions as a selective logic gate to
map the 2D points in the 2D grid to the corresponding 3D
points in the point cloud.
Notice that the above proof is just an existence-based one
to show that our decoder structure is universal. It does not
indicate what happens in reality inside the FoldingNet autoencoder. The theoretically constructed decoder requires 3m
hidden units while in reality, the size of the decoder that we
use is much smaller. Moreover, the construction in Theorem 3.2 leads to a lossless reconstruction of the point cloud,
while the FoldingNet auto-encoder only achieves lossy reconstruction. However, the above theorem can indeed guarantee that the proposed decoding operation (i.e., concatenating the codewords to the 2-dimensional grid points and processing each row using a perceptron) is legitimate because
in the worst case there exists a folding-based neural network with hand-crafted edge weights that can reconstruct
arbitrary point clouds. In reality, a good parameterization
of the proposed decoder with suitable training leads to better performance.
4. Experimental Results
4.1. Visualization of the Training Process
It might not be straightforward to see how the decoder
folds the 2D grid into the surface of a 3D point cloud.
Therefore, we include an illustration of the training process
to show how a random 2D manifold obtained by the initial random folding gradually turns into a meaningful point
cloud. The auto-encoder is a single FoldingNet trained using the ShapeNet part dataset which contains 16 categories of the ShapeNet dataset. We trained the FoldingNet
using ADAM with an initial learning rate 0.0001, batch size
1, momentum 0.9, momentum2 0.999, and weight decay
1e−6, for 4 × 106 iterations (i.e., 330 epochs). The reconstructed point clouds of several models after different numbers of training iterations are reported in Table 2. From the
training process, we see that an initial random 2D manifold
can be warped/cut/squeezed/stretched/attached to form the
point cloud surface in various ways.
4.2. Point Cloud Interpolation
A common method to demonstrate that the codewords
have extracted the natural representations of the input is to
see if the auto-encoder enables meaningful novel interpolations between two inputs in the dataset. In Table 3, we show
both inter-class and intra-class interpolations. Note that we
used a single AE for all shape categories for this task.
4.3. Illustration of Point Cloud Clustering
We also provide an illustration of clustering 3D point
clouds using the codewords obtained from FoldingNet. We
used the ShapeNet dataset to train the AE and obtain codewords for the ModelNet10 dataset, which we will explain
in details in Section 4.4. Then, we used T-SNE to obtain an embedding of the high-dimensional codewords in
100K iters
500K iters
Table 2. Illustration of the training process. Random 2D manifolds gradually transform into the surfaces of point clouds.
Interpolations
Table 3. Illustration of point cloud interpolation. The ﬁrst 3 rows: intra-class interpolations. The last 3 rows: inter-class interpolations.
R2. The parameter “perplexity” in T-SNE was set as 50.
We show the embedding result in Figure 2. From the ﬁgure, we see that most classes are easily separable except
{dresser (violet) v.s. nightstand (pink)} and {desk (red) v.s.
table (yellow)}. We have visually checked these two pairs
of classes, and found that many pairs cannot be easily distinguished even by a human. In Table 4, we list the most common mistakes made in classifying the ModelNet10 dataset.
4.4. Transfer Classiﬁcation Accuracy
In this section, we show the efﬁciency of FoldingNet
in representation learning and feature extraction from 3D
point clouds.
In particular, we follow the routine from
 to train a linear SVM classiﬁer on the ModelNet
dataset using the codewords (latent representations)
obtained from the auto-encoder, while training the autoencoder from the ShapeNet dataset . The train/test splits
Figure 2. The T-SNE clustering visualization of the codewords obtained from FoldingNet auto-encoder.
Number of mistakes
night stand
night stand
Table 4. The ﬁrst four types of mistakes made in the classiﬁcation
of ModelNet10 dataset. Their images are shown in the Supplementary Section 11.
of the ModelNet dataset in our experiment is the same as
in . The point-cloud-format of the ShapeNet dataset
is obtained by sampling random points on the triangles from
the mesh models in the dataset. It contains 57447 models
from 55 categories of man-made objects. The ModelNet
datasets are the same one used in , and the MN40/MN10
datasets respectively contain 9843/3991 models for training
and 2468/909 models for testing. Each point cloud in the selected datasets contains 2048 points with (x,y,z) positions
normalized into a unit sphere as in .
The codewords obtained from the FoldingNet autoencoder is of length 512, which is the same as in and
smaller than 7168 in . When training the auto-encoder,
we used ADAM with an initial learning rate of 0.0001 and
batch size of 1. We trained the auto-encoder for 1.6 × 107
iterations (i.e., 278 epochs) on the ShapeNet dataset. Similar to , when training the AE, we applied random
rotations to each point cloud. Unlike the random rotations
in , we applied the rotation that is one of the 24 axisaligned rotations in the right-handed system. When training
the linear SVM from the codewords obtained by the AE,
we did not apply random rotations. We report our results in
Table 5. The results of are according to the report in . Since the training of the AE and the training
of the SVM are based on different datasets, the experiment
shows the transfer robustness of the FoldingNet. We also include a ﬁgure (see Figure 3) to show how the reconstruction
loss decreases and the linear SVM classiﬁcation accuracy
increases during training. From Table 5, we can see that
FoldingNet outperforms all other methods on the MN40
Training epochs
Classification Accuracy
Reconstruction loss (chamfer distance)
Chamfer distance v.s. classification accuracy on ModelNet40
Figure 3. Linear SVM classiﬁcation accuracy v.s. reconstruction
loss on ModelNet40 dataset. The auto-encoder is trained using
data from the ShapeNet dataset.
T-L Network 
VConv-DAE 
3D-GAN 
Latent-GAN 
FoldingNet (ours)
Table 5. The comparison on classiﬁcation accuracy between FoldingNet and other unsupervised methods. All the methods train
a linear SVM on the high-dimensional representations obtained
from unsupervised training.
dataset. On the MN10 dataset, the auto-encoder proposed
in performs slightly better. However, the point-cloud
format of the ModelNet10 dataset used in is not public,
so the point-cloud sampling protocol of ours may be different from the one in . So it is inconclusive whether is
better than ours on MN10 dataset.
4.5. Semi-supervised Learning:
What Happens
when Labeled Data are Rare
One of the main motivations to study unsupervised classiﬁcation problems is that the number of labeled data is usually much smaller compared to the number of unlabeled
data. In Section 4.4, the experiment is very close to this
setting: the number of data in the ShapeNet dataset is large,
which is more than 5.74 × 104, while the number of data
in the labeled ModelNet dataset is small, which is around
1.23 × 104. Since obtaining human-labeled data is usually
hard, we would like to test how the performance of FoldingNet degrades when the number of labeled data is small.
We still used the ShapeNet dataset to train the FoldingNet
auto-encoder. Then, we trained the linear SVM using only
a% of the overall training data in the ModelNet dataset,
where a can be 1, 2, 5, 7.5, 10, 15, and 20. The test data for
the linear SVM are always all the data in the test data partition of the ModelNet dataset. If the codewords obtained
by the auto-encoder are already linearly separable, the re-
Available Labeled Data/Overall Labeled Data
Classification Accuracy
Classification Accuracy v.s. Number of Labeled Data
Figure 4. Linear SVM classiﬁcation accuracy v.s. percentage of
available labeled training data in ModelNet40 dataset.
Training epochs
Classification Accuracy
Reconstruction loss (chamfer distance)
Comparing FC decoder with Folding decoder
Folding decoder
FC decoder
Figure 5. Comparison between the fully-connected (FC) decoder
in and the folding decoder on ModelNet40.
quired number of labeled data to train a linear SVM should
be small. To demonstrate this intuitive statement, we report the experiment results in Figure 4. We can see that
even if only 1% of the labeled training data are available
(98 labeled training data, which is about 1∼3 labeled data
per class), the test accuracy is still more than 55%. When
20% of the training data are available, the test classiﬁcation
accuracy is already close to 85%, higher than most methods
listed in Table 5.
4.6. Effectiveness of the Folding-Based Decoder
In this section, we show that the folding-based decoder performs better in extracting features than the fullyconnected decoder proposed in in terms of classiﬁcation
accuracy and reconstruction loss. We used the ModelNet40
dataset to train two deep auto-encoders.
The ﬁrst autoencoder uses the folding-based decoder that has the same
structure as in Section 2.2, and the second auto-encoder
uses a fully-connected three-layer perceptron as proposed
in . For the fully-connected decoder, the number of inputs and number of outputs in the three layers are respectively {512,1024}, {1024,2048}, {2048,2048×3}, which
are the same as in .
The output is a 2048-by-3 matrix that contains the three-dimensional points in the output
point cloud. The encoders of the two auto-encoders are both
the graph-based encoder mentioned in Section 2.1. When
training the AE, we used ADAM with an initial learning
rate 0.0001, a batch size 1, for 4 × 106 iterations (i.e., 406
epochs) on the ModelNet40 training dataset.
After training, we used the encoder to process all data
in the ModelNet40 dataset to obtain a codeword for each
point cloud. Then, similar to Section 4.4, we trained a linear SVM using these codewords and report the classiﬁcation accuracy to see if the codewords are already linearly
separable after encoding. The results are shown in Figure 5.
During the training process, the reconstruction loss (measured in Chamfer distance) keeps decreasing, which means
the reconstructed point cloud is more and more similar to
the input point cloud. At the same time, the classiﬁcation
accuracy of the linear SVM trained on the codewords is
increasing, which means the codeword representation becomes more linearly separable.
From the ﬁgure, we can see that the folding decoder almost always has a higher accuracy and lower reconstruction
loss. Compared to the fully-connected decoder that relies
on the unnatural “1D order” of the reconstructed 3D points
in 3D space, the proposed decoder relies on the folding of
an inherently 2D manifold corresponding to the point cloud
inside the 3D space. As we mentioned earlier, this folding
operation is more natural than the fully-connected decoder.
Moreover, the number of parameters in the fully-connected
decoder is 1.52 × 107, while the number of parameters in
our folding decoder is 1.05 × 106, which is about 7% of the
fully-connected decoder.
One may wonder if uniformly random sampled 2D
points on a plane can perform better than the 2D grid
points in reconstructing point clouds.
From our experiments, 2D grid points indeed provide reduced reconstruction loss than random points (Table 6 in Supplementary
Section 8). Notice that our graph-based max-pooling encoder can be viewed as a generalized version of the maxpooling neural network PointNet . The main difference
is that the pooling operation in our encoder is done in a local neighborhood instead of globally (see Section 2.1). In
Supplementary Section 10, we show that the graph-based
encoder architecture is better than an encoder architecture
without the graph-pooling layers mentioned in Section 2.1
in terms of robustness towards random disturbance in point
positions.
5. Acknowledgment
This work is supported by MERL. The authors would
like to thank the helpful comments and suggestions from
the anonymous reviewers, Teng-Yok Lee, Ziming Zhang,
Zhiding Yu, Siheng Chen, Yuichi Taguchi, Mike Jones and
Alan Sullivan.