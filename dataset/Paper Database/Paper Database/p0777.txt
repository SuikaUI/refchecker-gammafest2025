Least Squares Generative Adversarial Networks
Xudong Mao∗1, Qing Li†1, Haoran Xie‡2, Raymond Y.K. Lau§3,
Zhen Wang¶4, and Stephen Paul Smolley∥5
1Department of Computer Science, City University of Hong Kong
2Department of Mathematics and Information Technology, The
Education University of Hong Kong
3Department of Information Systems, City University of Hong
4Center for OPTical IMagery Analysis and Learning (OPTIMAL),
Northwestern Polytechnical University
5CodeHatch Corp.
Unsupervised learning with generative adversarial networks (GANs)
has proven hugely successful. Regular GANs hypothesize the discriminator as a classiﬁer with the sigmoid cross entropy loss function. However,
we found that this loss function may lead to the vanishing gradients problem during the learning process. To overcome such a problem, we propose
in this paper the Least Squares Generative Adversarial Networks (LS-
GANs) which adopt the least squares loss function for the discriminator.
We show that minimizing the objective function of LSGAN yields minimizing the Pearson χ2 divergence. There are two beneﬁts of LSGANs
over regular GANs. First, LSGANs are able to generate higher quality
images than regular GANs. Second, LSGANs perform more stable during
the learning process. We evaluate LSGANs on ﬁve scene datasets and the
experimental results show that the images generated by LSGANs are of
better quality than the ones generated by regular GANs. We also conduct two comparison experiments between LSGANs and regular GANs to
illustrate the stability of LSGANs.
∗ 
† 
‡ 
§ 
¶ 
∥ 
 
Introduction
Deep learning has launched a profound reformation and even been applied to
many real-world tasks, such as image classiﬁcation
 , object detection
and segmentation . These tasks obviously fall into the scope of supervised
learning, which means that a lot of labeled data are provided for the learning
processes. Compared with supervised learning, however, unsupervised learning
tasks, such as generative models, obtain limited impact from deep learning.
Although some deep generative models, e.g. RBM , DBM and VAE ,
have been proposed, these models face the diﬃculty of intractable functions or
the diﬃculty of intractable inference, which in turn restricts the eﬀectiveness of
these models.
Recently, Generative adversarial networks (GANs) have demonstrated
impressive performance for unsupervised learning tasks. Unlike other deep generative models which usually adopt approximation methods for intractable functions or inference, GANs do not require any approximation and can be trained
end-to-end through the diﬀerentiable networks. The basic idea of GANs is to
simultaneously train a discriminator and a generator: the discriminator aims
to distinguish between real samples and generated samples; while the generator tries to generate fake samples as real as possible, making the discriminator
believe that the fake samples are from real data. So far, plenty of works have
shown that GANs can play a signiﬁcant role in various tasks, such as image
generation , image super-resolution , and semi-supervised learning .
In spite of the great progress for GANs in image generation, the quality
of generated images by GANs is still limited for some realistic tasks. Regular
GANs adopt the sigmoid cross entropy loss function for the discriminator .
We argue that this loss function, however, will lead to the problem of vanishing
gradients when updating the generator using the fake samples that are on the
correct side of the decision boundary, but are still far from the real data. As
Figure 1(b) shows, when we use the fake samples (in magenta) to update the
generator by making the discriminator believe they are from real data, it will
cause almost no error because they are on the correct side, i.e., the real data side,
of the decision boundary. However, these samples are still far from the real data
and we want to pull them close to the real data. Based on this observation, we
propose the Least Squares Generative Adversarial Networks (LSGANs) which
adopt the least squares loss function for the discriminator. The idea is simple
yet powerful: the least squares loss function is able to move the fake samples
toward the decision boundary, because the least squares loss function penalizes
samples that lie in a long way on the correct side of the decision boundary. As
Figure 1(c) shows, the least squares loss function will penalize the fake samples
(in magenta) and pull them toward the decision boundary even though they
are correctly classiﬁed. Based on this property, LSGANs are able to generate
samples that are closer to real data.
Another beneﬁt of LSGANs is the improved stability of learning process.
Generally speaking, training GANs is a diﬃcult issue in practice because of the
Fake samples
Real samples
Sigmoid decision boundary
Least squares decision boundary
Fake samples
Real samples
Fake samples for updating G
Sigmoid decision boundary
Fake samples
Real samples
Fake samples for updating G
Least squares decision boundary
Figure 1: Illustration of diﬀerent behaviors of two loss functions. (a): Decision
boundaries of two loss functions. Note that the decision boundary should go
across the real data distribution for a successful GANs learning. Otherwise,
the learning process is saturated. (b): Decision boundary of the sigmoid cross
entropy loss function. It gets very small errors for the fake samples (in magenta)
for updateing G as they are on the correct side of the decision boundary. (c):
Decision boundary of the least squares loss function. It penalize the fake samples
(in magenta), and as a result, it forces the generator to generate samples toward
decision boundary.
instability of GANs learning . Recently, several papers have pointed out
that the instability of GANs learning is partially caused by the objective function . Speciﬁcally, minimizing the objective function of regular GAN
suﬀers from vanishing gradients, which makes it hard to update the generator.
LSGANs can relieve this problem because LSGANs penalize samples based on
their distances to the decision boundary, which generates more gradients to update the generator. Recently, Arjovsky et al. have proposed a method to
compare the stability of GANs learning by excluding batch normalization .
Following this method for comparing the stability, we ﬁnd that LSGANs are
also able to converge to a relatively good state without batch normalization.
Our contributions in this paper can be summarized as follows:
• We propose LSGANs which adopt least squares loss function for the discriminator. We show that minimizing the objective function of LSGAN
yields minimizing the Pearson χ2 divergence. The experimental results
demonstrate that LSGANs can generate more realistic images than regular GANs. Numerous comparison experiments are also conducted to prove
the stability of LSGANs.
• Two network architectures of LSGANs are designed. The ﬁrst one is for
image generation with 112 × 112 resolution, which is evaluated on various
kinds of scene datasets. The experimental results show that this architecture of LSGAN can generate higher quality images than the current
state-of-the-art method. The second one is for tasks with a lot of classes.
We evaluate it on a handwritten Chinese character dataset with 3470
classes, and the proposed model is able to generate readable characters.
The rest of this paper is organized as follows. Section 2 brieﬂy reviews related
work of generative adversarial networks. The proposed method is introduced
in Section 3, and experimental results are presented in Section 4. Finally, we
conclude the paper in Section 5.
Related Work
Deep generative models attempt to capture the probability distributions over
the given data. Restricted Boltzmann Machines (RBMs) are the basis of many
other deep generative models, and they have been used to model the distributions of images and documents . Deep Belief Networks (DBNs) 
and Deep Boltzmann Machines (DBMs) are extended from the RBMs. The
most successful application of DBNs is for image classiﬁcation , where DBNs
are used to extract feature representations. However, RBMs, DBNs and DBMs
all have the diﬃculties of intractable partition functions or intractable posterior distributions, which thus use the approximation methods to learn the
models. Another important deep generative model is Variational Autoencoders
(VAE) , a directed model, which can be trained with gradient-based optimization methods. But VAEs are trained by maximizing the variational lower
bound, which may lead to the blurry problem of generated images.
Recently, Generative Adversarial Networks (GANs) have been proposed by
Goodfellow et al. , who explained the theory of GANs learning based on a
game theoretic scenario. Compared with the above models, training GANs does
not require any approximation method. Like VAEs, GANs also can be trained
through diﬀerentiable networks. Showing the powerful capability for unsupervised tasks, GANs have been applied to many speciﬁc tasks, like image generation , image super-resolution , text to image synthesis and image to
image translation . By combining the traditional content loss and the adversarial loss, super-resolution generative adversarial networks achieve stateof-the-art performance for the task of image super-resolution. Reed et al. 
proposed a model to synthesize images given text descriptions based on the conditional GANs . Isola et al. also used the conditional GANs to transfer
images from one representation to another. In addition to unsupervised learning
tasks, GANs also show potential for semi-supervised learning tasks. Salimans
et al. proposed a GAN-based framework for semi-supervised learning, in
which the discriminator not only outputs the probability that an input image
is from real data but also outputs the probabilities of belonging to each class.
Despite the great successes GANs have achieved, improving the quality of
generated images is still a challenge.
A lot of works have been proposed to
improve the quality of images for GANs. Radford et al. ﬁrst introduced
convolutional layers to GANs architecture, and proposed a network architecture
called deep convolutional generative adversarial networks (DCGANs). Denton
et al. proposed another framework called Laplacian pyramid of generative
adversarial networks (LAPGANs). They constructed a Laplacian pyramid to
generate high-resolution images starting from low-resolution images. Further,
Salimans et al. proposed a technique called feature matching to get better
Figure 2: (a): The sigmoid cross entropy loss function. (b): The least squares
loss function.
convergence. The idea is to make the generated samples match the statistics of
the real data by minimizing the mean square error on an intermediate layer of
the discriminator.
Another critical issue for GANs is the stability of learning process. Many
works have been proposed to address this problem by analyzing the objective
functions of GANs . Viewing the discriminator as an energy
 used an auto-encoder architecture to improve the stability of
GANs learning. To make the generator and the discriminator be more balanced,
Metz et al. created a unrolled objective function to enhance the generator.
Che et al.
 incorporated a reconstruction module and use the distance
between real samples and reconstructed samples as a regularizer to get more
stable gradients.
Nowozin et al.
 pointed out that the objective of the
original GAN which is related to Jensen-Shannon divergence is a special
case of divergence estimation, and generalized it to arbitrary f-divergences .
Another generalization work is presented in literature . They framed GANs
as algorithms for learning in implicit generative models and presented several
kinds of probability-based learning losses. Arjovsky et al.
 analyzed the
properties of four diﬀerent divergences or distances over two distributions and
concluded that Wasserstein distance is nicer than Jensen-Shannon divergence.
Qi proposed the Loss-Sensitive GAN whose loss function is based on the
assumption that real samples should have smaller losses than fake samples and
proved that this loss function has non-vanishing gradient almost everywhere.
In this section, we ﬁrst review the formulation of GANs brieﬂy. Next, we present
the LSGANs along with their beneﬁts in Section 3.2. Finally, two model architectures of LSGANs are introduced in 3.3.
Generative Adversarial Networks
The learning process of the GANs is to train a discriminator D and a generator
G simultaneously. The target of G is to learn the distribution pg over data x.
G starts from sampling input variables z from a uniform or Gaussian distribution pz(z), then maps the input variables z to data space G(z; θg) through a
diﬀerentiable network. On the other hand, D is a classiﬁer D(x; θd) that aims
to recognize whether an image is from training data or from G. The minimax
objective for GANs can be formulated as follows:
D VGAN(D, G) = Ex∼pdata(x)[log D(x)] + Ez∼pz(z)[log(1 −D(G(z)))].
Least Squares Generative Adversarial Networks
Viewing the discriminator as a classiﬁer, regular GANs adopt the sigmoid cross
entropy loss function. As stated in Section 1, when updating the generator,
this loss function will cause the problem of vanishing gradients for the samples
that are on the correct side of the decision boundary, but are still far from the
real data. To remedy this problem, we propose the Least Squares Generative
Adversarial Networks (LSGANs). Suppose we use the a-b coding scheme for
the discriminator, where a and b are the labels for fake data and real data,
respectively. Then the objective functions for LSGANs can be deﬁned as follows:
D VLSGAN(D) =1
2Ex∼pdata(x)
(D(x) −b)2
(D(G(z)) −a)2
G VLSGAN(G) =1
(D(G(z)) −c)2
where c denotes the value that G wants D to believe for fake data.
Beneﬁts of LSGANs
The beneﬁts of LSGANs can be derived from two aspects. First, unlike regular
GANs, which cause almost no loss for samples that lie in a long way on the
correct side of the decision boundary (Figure 1(b)), LSGANs will penalize those
samples even though they are correctly classiﬁed (Figure 1(c)). When we update
the generator, the parameters of the discriminator are ﬁxed, i.e., the decision
boundary is ﬁxed.
As a result, the penalization will make the generator to
generate samples toward the decision boundary. On the other hand, the decision
boundary should go across the manifold of real data for a successful GANs
learning. Otherwise, the learning process will be saturated. Thus moving the
generated samples toward the decision boundary leads to making them be closer
to the manifold of real data.
Second, penalizing the samples lying a long way to the decision boundary can
generate more gradients when updating the generator, which in turn relieves the
problem of vanishing gradients. This allows LSGANs to perform more stable
during the learning process.
This beneﬁt can also be derived from another
perspective: as shown in Figure 2, the least squares loss function is ﬂat only at
one point, while the sigmoid cross entropy loss function will saturate when x is
relatively large.
Reltation to f-divergence
In the original GAN paper , the authors has shown that minimizing Equation
1 yields minimizing the Jensen-Shannon divergence:
pdata + pg
pdata + pg
Here we also explore the relation between LSGANs and f-divergence. Consider
the following extension of Equation 2:
D VLSGAN(D) =1
2Ex∼pdata(x)
(D(x) −b)2
(D(G(z)) −a)2
G VLSGAN(G) =1
2Ex∼pdata(x)
(D(x) −c)2
(D(G(z)) −c)2
Note that adding the term Ex∼pdata(x)[(D(x)−c)2] to VLSGAN(G) does not change
the optimal values since this term does not contain parameters of G.
We ﬁrst derive the optimal discriminator D for a ﬁxed G as below :
D∗(x) = bpdata(x) + apg(x)
pdata(x) + pg(x) .
In the following equations we use pd to denote pdata for simplicity. Then we can
reformulate Equation 4 as follows:
2C(G) = Ex∼pd
(D∗(x) −c)2
(D∗(x) −c)2
 bpd(x) + apg(x)
pd(x) + pg(x)
 bpd(x) + apg(x)
pd(x) + pg(x)
 (b −c)pd(x) + (a −c)pg(x)
pd(x) + pg(x)
 (b −c)pd(x) + (a −c)pg(x)
pd(x) + pg(x)
 (b −c)pd(x) + (a −c)pg(x)
pd(x) + pg(x)
 (b −c)(pd(x) + pg(x)) −(b −a)pg(x)
pd(x) + pg(x)
If we set b −c = 1 and b −a = 2, then
 2pg(x) −(pd(x) + pg(x))
pd(x) + pg(x)
Pearson(pd + pg∥2pg),
Pearson is the Pearson χ2 divergence. Thus minimizing Equation 4 yields
minimizing the Pearson χ2 divergence between pd + pg and 2pg if a, b, and c
satisfy the condtions of b −c = 1 and b −a = 2.
3×3 deconv, 256, stride=1, BN
3×3, deconv, 256, stride=2, BN
fc, 7×7×256, BN
3×3 deconv, 256, stride=2, BN
3×3 deconv, 256, stride=1, BN
3×3 deconv, 128, stride=2, BN
3×3 deconv, 64, stride=2, BN
3×3 deconv, 3, stride=1
5×5 conv, 512, stride=2, BN
5×5 conv, 256, stride=2, BN
least squares loss
5×5 conv, 128, stride=2, BN
5×5 conv, 64, stride=2
Figure 3: Model architecture. “K × K, conv/deconv, C, stride = S” denotes
a convolutional/deconvolutional layer with K × K kernel, C output ﬁlters and
stride = S. The layer with BN means that the layer is followed by a batch normalization layer. “fc, N” denotes a fully-connected layer with N output nodes.
The activation layers are omitted. (a): The generator. (b): The discriminator.
Parameters Selection
One method to determine the values of a, b, and c in Equation 2 is to satisfy the
conditions of b −c = 1 and b −a = 2, such that minimizing Equation 2 yields
minimizing the Pearson χ2 divergence between pd + pg and 2pg. For example,
by setting a = −1, b = 1, and c = 0, we get the following objective functions:
D VLSGAN(D) =1
2Ex∼pdata(x)
(D(x) −1)2
(D(G(z)) + 1)2
G VLSGAN(G) =1
(D(G(z)))2
Another method is to make G generate samples as real as possible by setting
c = b. For example, by using the 0-1 binary coding scheme, we get the following
objective functions:
D VLSGAN(D) =1
2Ex∼pdata(x)
(D(x) −1)2
(D(G(z)))2
G VLSGAN(G) =1
(D(G(z)) −1)2
In practice, we observe that Equation 8 and Equation 9 show similar performance. Thus either one can be selected. In the following sections, we use
Equation 9 to train the models.
Model Architectures
The ﬁrst model we have designed is shown in Figure 3, which is motivated by
the VGG model . Compared with the architecture in
 , two stride=1
5×5 deconv, 1, stride=2
5×5, deconv, 128, stride=2, BN
fc, 7×7×128, BN
y, one-hot, 3740
fc, 1024, BN
5×5 conv, 320, stride=2, BN
5×5 conv, 256, stride=2
y, one-hot, 3740
least squares loss
Figure 4: Model architecture for datasets with amount of classes. (a): The
generator. (b): The discriminator.
deconvolutional layers are added after the top two deconvolutional layers. The
architecture of the discriminator is identical to the one in except for the
usage of the least squares loss function. Following DCGANs, ReLU activations
and LeakyReLU activations are used for the generator and the discriminator,
respectively.
The second model we have designed is for tasks with lots of classes, for example, Chinese characters. For Chinese characters, we ﬁnd that training GANs
on multiple classes is not able to generate readable characters. The reason is
that there are multiple classes in the input, but only one class in the output.
As stated in , there should be a deterministic relationship between input
and output. One way to solve this problem is to use the conditional GANs 
because conditioning on the label information creates the deterministic relationship between input and output. However, using one-hot encoding, conditioning
on the label vectors with thousands of classes is infeasible in terms of memory
cost and computational time cost. We propose to use a linear mapping layer to
map the large label vectors into small vectors ﬁrst, and then concatenate the
small vectors to the layers of models. In summary, the model architecture is
shown in Figure 4, and the layers to be concatenated are determined empirically.
For this conditional LSGAN, the objective functions can be deﬁned as follows:
D VLSGAN(D) =1
2Ex∼pdata(x)
(D(x|Φ(y)) −1)2
(D(G(z)|Φ(y)))2
G VLSGAN(G) =1
(D(G(z)|Φ(y)) −1)2
where Φ(·) denotes the linear mapping function and y denotes the label vectors.
(a) Generated by LSGANs.
(b) Generated by DCGANs (Reported in ).
(c) Generated by EBGANs (Reported in ).
Figure 5: Generated images on LSUN-bedroom.
Experiments
In this section, we ﬁrst present the details of datasets and implementation. Next,
we present the results of evaluating LSGANs on several scene datasets. Then we
compare the stability between LSGANs and regular GANs by two comparison
experiments. Finally, we evaluate LSGANs on a handwritten Chinese character
dataset which contains 3740 classes.
Table 1: Statistics of the datasets.
#Categories
LSUN Bedroom
3, 033, 042
LSUN Church
LSUN Dining
LSUN Kitchen
2, 212, 277
LSUN Conference
Datasets and Implementation Details
We evaluate LSGANs on two datasets, LSUN and HWDB1.0 . The
details of the two datasets are presented in Table 1. The implementation of
our proposed models is based on a public implementation of DCGANs1 using
TensorFlow . The learning rates for scenes and Chinese characters are set
1 
(a) Church outdoor.
(b) Dining room.
(c) Kitchen.
(d) Conference room.
Figure 6: Generated images on diﬀerent scene datasets.
to 0.001 and 0.0002, respectively. Following DCGANs, β1 for Adam optimizer
is set to 0.5. All the codes of our implementation will be public available soon.
We train LSGANs (Figure 3) on ﬁve scene datasets of LSUN including bedroom,
kitchen, church, dining room and conference room. The bedroom generations
by LSGANs and two baseline methods, DCGANs and EBGANs, are presented
in Figure 5. We can observe that the images generated by LSGANs are of better
quality than the ones generated by the two baseline methods. The results of
LSGANs trained on other scene datasets are shown in Figure 6.
Stability Comparison
As stated in Section 3.2, one beneﬁt of LSGANs is the improved stability. Here
we present two comparison experiments to compare the stability between LS-
GANs and regular GANs.
One is to follow the comparison method in . Based on the network architectures of DCGANs, two architectures are designed to compare the stability.
The ﬁrst one is to exclude the batch normalization for the generator (BNG for
(a) LSGANs.
(b) Regular GANs.
(c) LSGANs.
(d) Regular GANs.
Figure 7: Comparison experiments by excluding batch normalization (BN). (a):
LSGANs without BN in G using Adam. (b): Regular GANs without BN in
G using Adam. (c): LSGANs without BN in G and D using RMSProp. (d):
Regular GANs without BN in G and D using RMSProp.
short), and the second one is to exclude the batch normalization for both the
generator and the discriminator (BNGD for short). As pointed out in , the
selection of optimizer is critical to the model performance. Thus we evaluate the
two architectures with two optimizers, Adam and RMSProp . In summary, we have four training settings, BNG with Adam, BNG with RMSProp,
BNGD with Adam, and BNGD with RMSProp. We train these models on LSUN
bedroom dataset using regular GANs and LSGANs separately and have the following four major observations. First, for BNG with Adam, there is a chance
for LSGANs to generate relatively good quality images. We test 10 times, and
5 of them succeeds to generate relatively good quality images. But for regular
GANs, we never observe successful learning. Regular GANs suﬀer from a severe
degree of mode collapse. The generated images by LSGANs and regular GANs
are shown in Figure 7. Second, for BNGD with RMSProp, as Figure 7 shows,
LSGANs generate higher quality images than regular GANs which have a slight
degree of mode collapse. Third, LSGANs and regular GANs have similar performances for BNG with RMSProp and BNGD with Adam. Speciﬁcally, for BNG
with RMSProp, both LSGANs and regular GANs learn the data distribution
successfully, and for BNGD with Adam, both the ones have a slight degree of
mode collapse. Last, RMSProp performs more stable than Adam since regular
GANs are able to learn the data distribution for BNG with RMSProp, but fail
to learn with Adam.
Another experiment is to evaluate on a Gaussian mixture distribution dataset,
which is designed in literature . We train LSGANs and regular GANs on a
2D mixture of 8 Gaussian dataset using a simple architecture, where both the
generator and the discriminator contain three fully-connected layers. Figure 8
shows the dynamic results of Gaussian kernel density estimation. We can see
that regular GANs suﬀer from mode collapse starting at step 15k. They generate samples around a single valid mode of the data distribution. But LSGANs
learn the Gaussian mixture distribution successfully.
Figure 8: Dynamic results of Gaussian kernel estimation for LSGANs and regular GANs. The ﬁnal column shows the real data distribution.
Figure 9: Generated images of handwritten Chinese characters by LSGANs.
For row 1 and row 2, the images in the same column belong to the same class
of characters. Row 3 and row 4 are also with this condition. The generated
characters are readable.
Handwritten Chinese Characters
We also train a conditional LSGAN model (Figure 4) on a handwritten Chinese
character dataset which contains 3740 classes. LSGANs learn to generate readable Chinese characters successfully, and some randomly selected characters are
shown in Figure 9. We have two major observations from Figure 9. First, the
generated characters by LSGANs are readable. Second, we can get the correct
labels of the generated images through label vectors, which can be used for
further applications such as data augmentation.
Conclusions and Future Work
In this paper, we have proposed the Least Squares Generative Adversarial Networks (LSGANs). Two model architectures (Figure 3 and Figure 4) are designed. The ﬁrst one is evaluated on several scene datasets. The experimental
results show that LSGANs generate higher quality images than regular GANs.
The second one is evaluated on a handwritten Chinese character dataset with
3740 classes. Besides, numerous comparison experiments for evaluating the stability are conducted and the results demonstrate that LSGANs perform more
stable than regular GANs during the learning process. Based on the present
ﬁndings, we hope to extend LSGANs to more complex datasets such as ImageNet in the future. Instead of pulling the generated samples toward the decision boundary, designing a method to pull the generated samples toward the
real data directly is also worth our further investigation.