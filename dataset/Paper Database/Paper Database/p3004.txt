Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 5540–5552
July 5 - 10, 2020. c⃝2020 Association for Computational Linguistics
Evaluating Explainable AI: Which Algorithmic Explanations
Help Users Predict Model Behavior?
Peter Hase and Mohit Bansal
UNC Chapel Hill
 , 
Algorithmic approaches to interpreting machine learning models have proliferated in recent years. We carry out human subject tests
that are the ﬁrst of their kind to isolate the effect of algorithmic explanations on a key aspect of model interpretability, simulatability,
while avoiding important confounding experimental factors. A model is simulatable when
a person can predict its behavior on new inputs. Through two kinds of simulation tests involving text and tabular data, we evaluate ﬁve
explanations methods: (1) LIME, (2) Anchor,
(3) Decision Boundary, (4) a Prototype model,
and (5) a Composite approach that combines
explanations from each method.
Clear evidence of method effectiveness is found in
very few cases: LIME improves simulatability in tabular classiﬁcation, and our Prototype
method is effective in counterfactual simulation tests. We also collect subjective ratings
of explanations, but we do not ﬁnd that ratings are predictive of how helpful explanations
are. Our results provide the ﬁrst reliable and
comprehensive estimates of how explanations
inﬂuence simulatability across a variety of explanation methods and data domains. We show
that (1) we need to be careful about the metrics
we use to evaluate explanation methods, and
(2) there is signiﬁcant room for improvement
in current methods.1
Introduction
Interpretable machine learning is now a widely
discussed topic .
While survey papers have not converged on definitions of “explainable” or “interpretable,” there
are some common threads in the discourse. Commentators observe that interpretability is useful for
1We make all our supporting code, data, and models publicly available at: 
InterpretableNLP-ACL2020
achieving other model desiderata, which may include building user trust, identifying the inﬂuence
of certain variables, understanding how a model
will behave on given inputs, and ensuring that
models are fair and unbiased.
In their review, Doshi-Velez and Kim 
outline an approach to measuring interpretability.
They describe two human-subject tasks that test
for a particularly useful property: simulatability.
A model is simulatable when a person can predict
its behavior on new inputs. This property is especially useful since it indicates that a person understands why a model produces the outputs it does.
The ﬁrst of the two tasks is termed forward simulation: given an input and an “explanation,” users
must predict what a model would output for the
given input. The second is counterfactual simulation: users are given an input, a model’s output for
that input, and an “explanation” of that output, and
then they must predict what the model will output when given a perturbation of the original input. The explanation itself is algorithmically generated by a method for interpreting or explaining
a model. Simulation tests have been carried out
before, but no study to date has isolated the effect
of explanations on simulatability .
We carry out simulation tests that are the ﬁrst to
incorporate all of the following design choices: (1)
separating explained instances from test instances,
so explanations do not give away the answers,
(2) evaluating the effect of explanations against a
baseline of unexplained examples, (3) balancing
data by model correctness, so users cannot succeed by guessing the true label, and (4) forcing
user predictions on all inputs, so performance is
not biased toward overly speciﬁc explanations. We
display our study design in Figure 1.
We provide results from high-quality human
Prediction Phase
Learning Phase
(w/ explanations)
Learning Phase
Prediction Phase
Simulation
Simulation
Counterfactual
Prediction Phase
: Human simulation
: Model prediction
: Explanation
: Counterfactual input
: Counterfactual model prediction
Prediction Phase
Explanation
Figure 1: Forward and counterfactual simulation test procedures. We measure human users’ ability to predict
model behavior. We isolate the effect of explanations by ﬁrst measuring baseline accuracy, then measuring accuracy after users are given access to explanations of model behavior. In the forward test, the explained examples are
distinct from the test instances. In the counterfactual test, each test instance is a counterfactual version of a model
input, and the explanations pertain to the original inputs.
user tests (with over 2100 responses) that include
both forward and counterfactual simulation tasks.
Through these tests, we measure explanation effectiveness for ﬁve methods across text and tabular
classiﬁcation tasks. Our evaluation includes two
existing explanation techniques, LIME and Anchor , and we translate
two other explanation methods from image recognition models to work with our textual and tabular
setups. The ﬁrst of these is a latent space traversal method, which we term the Decision Boundary
approach , and the second is a case-based reasoning method, which we term the Prototype method
 . The ﬁnal method is a novel
Composite approach that combines complementary explanations from each method. Lastly, we
also collect subjective, numerical user ratings of
explanation quality. Our key ﬁndings are:
1. LIME improves forward and counterfactual
simulatability in our tabular classiﬁcation task.
2. Prototype improves counterfactual simulatability across textual and tabular data domains.
3. No method deﬁnitively improves forward and
counterfactual simulatability together on the
text task, though our Prototype and Composite
methods perform the best on average.
4. It appears that users’ quality ratings of explanations are not predictive of how helpful the explanations are with counterfactual simulation.
5. While users rate Composite explanations as
among the best in quality, these combined explanations do not overtly improve simulatability in either data domain.
Background and Related Work
What Does “Interpretable” Mean?
Survey papers use key terms in varying ways.
Rudin draws a distinction between interpretability and explainability, suggesting that a
model is interpretable if it performs computations
that are directly understandable. Post-hoc explanations, on the other hand, are potentially misleading approximations of the true computations.
Gilpin et al. also distinguish between the
two concepts, though they deﬁne them differently.
In this paper, we do not distinguish between
interpretability and explainability.
Rather, we
adopt the conceptual framework of Doshi-Velez
and Kim , who consider interpretability in
terms of downstream desiderata one can assess
models with respect to. Our terminology is as follows: we will say that explanation methods may
improve the interpretability of a model, in the
sense that an interpretable model is simulatable.
Explanation Methods
Several taxonomies have been proposed for categorizing methods for interpretability. We organize
methods below into the categories of: feature importance estimation, case-based reasoning, and latent space traversal.
Feature Importance Estimation.
Feature importance estimates provide information about how
the model uses certain features. Most prominent
among these methods are the gradient-based approaches ﬁrst introduced for vision by Simonyan
et al. , which Li et al. show may
be translated for use with text data.
These approaches have since been demonstrated to sometimes behave in counterintuitive ways . A number of alternative methods have been proposed for quantifying feature importance across data domains . In our study, we choose to evaluate two domain-agnostic approaches, LIME and
Anchor . These methods use simple models, i.e. sparse linear models
and rule lists, to approximate complex model behavior locally around inputs. They show the estimated effects of directly interpretable features on
the model’s output. For these methods, what is
“local” to an input is deﬁned in a domain-speciﬁc
manner via a perturbation distribution centered on
that input.
Case-based Reasoning.
Prototype models classify new instances based on their similarity to
other known cases. Two works on prototype models for computer vision introduced neural models
that learn prototypes corresponding to parts of images . These
prototypes are used to produce classiﬁer features
that are intended to be directly interpretable.
Latent Space Traversal. These methods traverse
the latent space of a model in order to show how
the model behaves as its input changes. In a classiﬁcation setting, crossing the decision boundary
may reveal necessary conditions for a model’s prediction for the original input. Several methods exist for vision models . To our knowledge no such approach exists for discriminative models of text and
tabular data, so we develop a simple method for
these kinds of models (described in Section 3.4).
Evaluating Interpretability
Here we discuss works involving automatic and
human evaluations of interpretability, as well as
how we improve on past simulation test design.
While human evaluations are useful for evaluating many aspects of interpretability, we restrict our
discussion to works measuring simulatability.
Improving Forward Test Design. Forward simulation tasks have been implemented in many different forms, and there is a serious need for consensus on proper procedure here. Doshi-Velez and
Kim originally propose that users predict
model behavior, given an input and an explanation.
With many explanation methods, this is a trivial task because the explanations directly reveal
the output. For example, LIME gives a predicted
probability that indicates the model behavior with
high likelihood. We make a number of experimental design choices that give us more reliable estimates of method effectiveness than past studies.
(1) We separate the explained instances from the
test instances, to prevent explanations from giving
away the answers. In three studies, the same data
points were used as both explanation and prediction items . (2) We evaluate the effect of explanations against a baseline where users
see the same example data points without explanations. No prior evaluation includes this control.
(3) Two choices further distinguish our test from
that of Ribeiro et al. . We balance data by
model correctness, so users cannot succeed simply by guessing the true label, and we force user
predictions on every input, so our metrics do not
favor overly niche explanations.
Counterfactual Simulatability.
Counterfactual
simulatability has, to our knowledge, never been
measured for machine learning models.
Doshi-Velez and Kim propose asking users
to edit inputs in order to change the model outputs,
we instead ask users to predict model behavior on
edited versions of data points, as this approach is
more scalable than soliciting creative responses.
Relation to Automatic Tests.
Prior works have
proposed automatic metrics for feature importance
estimates .
Typically these operate
by checking that model behavior follows reasonable patterns on counterfactual inputs constructed
using the explanation, e.g., by masking “important” features and checking that a class score
drops. Whereas automatic metrics deﬁne appropriate model behavior in advance for counterfactual instances generated by a ﬁxed schema, we
present a random counterfactual to a human and
elicit their prediction of model behavior for that instance. This allows for human validation of model
behavior in a broader range of input scenarios than
an automatic procedure, where human expectations are given in response to diverse and concrete
examples rather than dictated in advance.
Subjective Ratings.
Hutton et al. measure user judgments of whether word importance
measures explain model behavior in a text classi-
occasional
Sum of Words
Est. Probability
Despite modest aspirations its occasional charms are not to be dismissed.
Input, Label, and Model Output
Step 2 modest
impressive
Evidence Margin: +0.32
Decision Boundary
Evidence Margin: -5.21
Step 1 occasional
Evidence Margin: -3.00
Despite impressive aspirations its rare
charms are not to be dismissed.
Most similar prototype:
Important words: (none selected)
Similarity score: 9.96 out of 10
Routine and rather silly.
Figure 2: Explanation methods applied to an input from the test set of movie reviews.
ﬁcation setting. Our rating task is thus similar to
theirs; our changes are that we evaluate with a Likert scale rather than forced ranking, using explanation techniques for neural models rather than word
importance estimates from a naive Bayes classi-
ﬁer. In another study, users judged image classiﬁcation explanations on a Likert scale ranging from
“no explanation” to “concise explanation” . Whereas this scale focuses on conciseness, we ask users to rate how explanations reveal reasons for model behavior.
Explanation Methods
In this section, we describe the explanation methods. Example explanations for a test movie review are shown in Figure 2. We limit our discussion of LIME and Anchor, since details for these
methods can be found in the original papers. Note
that LIME, Anchor, and our Decision Boundary
method can be used with arbitrary blackbox models. The Prototype method is itself a neural model
that also produces an explanation.
Ribeiro et al. present LIME as a local linear approximation of model behavior. With a userspeciﬁed feature space, a linear model is ﬁt to the
blackbox outputs on samples from a distribution
around an input. We set the number of features
to use to 5, and we take class probabilities as our
model output. When showing LIME explanations
to users, we give them the selected features with
estimated weights, the model intercept, the sum of
model weights, and the predicted model output.
Ribeiro et al. introduce a method for learning rule lists that predict model behavior with
high conﬁdence. With samples from a distribution around an input, they use a PAC learning approach to obtain a rule list. When the rules apply
to an input, there is a high probability it will receive the same prediction as the original. The feature space of the rule list is speciﬁed by the user.
As in the original work, we use individual tokens
for our text data, and we use the same learning parameters for each Anchor explanation.
Prototype Model
Prototype models have previously been used for
interpretable computer vision . We develop a prototype model
for use with text and tabular classiﬁcation tasks.
In our model, a neural network g maps inputs to a
latent space, and the score of class c is:
f(xi)c = max
pk∈Pc a(g(xi), pk)
where a is a similarity function for vectors in the
latent space, and Pc is the set of protoype vectors
for class c. We choose the Gaussian kernel for
our similarity function: a(zi, pk) = e−||zi−pk||2.
The model predicts inputs to belong to the same
class as the prototype they’re closest to in the latent space. Unlike in Chen et al. , we take
the max activation to obtain concise explanations.
In lieu of image heatmaps, we provide feature importance scores. What distinguishes these
scores from those of standard feature importance
estimates is that the scores are prototype-speciﬁc,
rather than class-speciﬁc.
We choose a feature
omission approach for estimation. With text data,
omission is straightforward: for a given token, we
take the difference in function output between the
original input and the input with that token’s embedding zeroed out. In the tabular domain, however, variables can never take on meaningless values. To circumvent this problem, we take the difference between the function value at the original
input and the expected function value with a particular feature missing. The expectation is computed with a distribution over possible values for
a missing feature, which is provided by a multinomial logistic regression conditioned on the remaining covariates.
When presenting prototype explanations, we
provide users with the predicted class score, most
similar prototype, and top six feature importance
scores, provided that score magnitudes meet a
small threshold. In the explanation in Figure 2,
no scores meet this threshold. We set the size of
Pc to 40 for our text classiﬁcation task and 20 for
our tabular classiﬁcation task. For further training
and feature importance details, see the Appendix.
Decision Boundary
Joshi et al. and Samangouei et al. introduce techniques for traversing the latent spaces
of generative image models. Their methods provide paths that start at input data points and cross
a classiﬁer’s decision boundary.
Such methods
may help users see the necessary conditions for
the model prediction.
We provide a simple method for traversing the
latent space of a discriminative classiﬁer (see example in Figure 2). Our algorithm ﬁrst samples
around the original input to get instances that cross
the decision boundary.
A counterfactual input
is chosen from these by taking the instance with
the fewest edited features (tokens or variables),
while breaking ties using the Euclidean distance
between latent representations.
Lastly, we provide a path between inputs by greedily picking the
edit from the remaining edits that least changes the
model’s evidence margin, which is the difference
between positive and negative class scores. The
explanations we present to users include the input, steps to the counterfactual input, and evidence
margin at each step. When the path is longer than
four steps, we show only the last four.
Composite Approach
We hypothesize that the above explanations provide complementary information, since they take
distinct approaches to explaining model behavior.
Hence, we test a Composite method that combines
LIME and Anchor with our decision boundary and
prototype explanations. We make two adjustments
to methods as we combine them. First, we show
only the last step of each decision boundary explanation, i.e., the set of changes that ﬂips the prediction.
Second, we train our prototype model
with its feature extraction layers initialized from
the neural task model and thereafter ﬁxed. We do
so since we are interested in explaining the task
model behavior, and this tactic yields prototypes
that reﬂect characteristics of the task model.
Experimental Design
In this section, we describe our datasets, task models, user pool, and experimental design.
Data and Task Models
We perform experiments for classiﬁcation tasks
with text and tabular data. The ﬁrst dataset consists of movie review excerpts .
The dataset includes 10,662 reviews with binary
sentiment labels, which we split into partitions of
70%, 10%, and 20% for the train, validation, and
test sets, respectively.
We use the same neural
architecture as in Yang et al. , limited to
use with single sentences. The second dataset is
the tabular Adult data from the UCI ML repository .
This dataset contains records of 15,682 individuals, and the label is
whether their annual income is more than $50,000.
We use the same data processing scheme and neural network architecture as Ribeiro et al. .
Model accuracies are given in the Appendix.
We gathered over 2100 responses via in-person
tests with 32 trained undergraduates who had
taken at least one course in computer science or
statistics.2 Each user was randomly assigned to
one of the ten conditions corresponding to our
dataset-method pairs. Once each condition had at
least 3 full tests collected, we allocated remaining
participants to the Composite method. In order to
ensure high quality data, we employed a screening test to check for user understanding of their
explanation method and test procedure. Two participants were screened out due to low scores. We
also excluded data from a user whose task completion time was extremely low. We paid all users $15
USD per hour. Ten users were tested again with
a new dataset and explanation method, giving us
a total of 39 user tests. Some users had to exit
the experiment before ﬁnishing all of the tasks;
2We require this advanced background because explanations rely on conditional probabilities, approximations of
probabilities, and other quantitative concepts.
Table 1: Change in user accuracies after being given explanations of model behavior, relative to the baseline
performance (Pre). Data is grouped by domain. CI gives the 95% conﬁdence interval, calculated by bootstrap
using n user responses, and we bold results that are signiﬁcant at a level of p < .05. LIME improves simulatability
with tabular data. Other methods do not deﬁnitively improve simulatability in either domain.
Forward Simulation
Counterfactual Simulation
Table 2: Change in user accuracies after being given explanations of model behavior, relative to the baseline
performance (Pre). Data is grouped by simulation test type. CI gives the 95% conﬁdence interval, calculated by
bootstrap using n user responses. We bold results that are signiﬁcant at the p < .05 level. Prototype explanations
improve counterfactual simulatability, while other methods do not deﬁnitively improve simulatability for one test.
for data analysis purposes, we consider only task
items answered in both Pre and Post test phases.
Simulation Tests
We collect 1103 forward test and 1063 counterfactual test responses in total.
Forward Simulation. This test is represented in
Figure 1. The test is split into four phases: a learning phase, a Pre prediction phase, a learning phase
with explanations, and a Post prediction phase.
To begin, users are given 16 examples from the
validation set with labels and model predictions
but no explanations. Then they must predict the
model output for either 16 or 32 new inputs, with
the number chosen based on user time constraints.
Users are not allowed to reference the learning
data while in prediction phases. Next, they return
to the same learning examples, now with explanations included. Finally, they predict model behavior again on the same instances from the ﬁrst
prediction round. By design, any improvement in
user performance in the Post prediction phase is
attributable only to the addition of explanations.
We show a screenshot of the user testing interface
in the Appendix.
Counterfactual Simulation. Represented in Figure 1, this test requires users to predict how a
model will behave on a perturbation of a given
data point.
The test consists of Pre and Post
prediction rounds, where the only difference between them is the addition of explanations.
both rounds, we provide users with the same 32
inputs from the test dataset (or 16 due to time
constraints), their ground truth labels, the model’s
prediction, and a perturbation of the input. See
the Appendix for a description of the perturbation
generation algorithm. Users then predict model
behavior on the perturbations. In the Post round,
users are given the same data, but they are also
equipped with explanations of the model predictions for the original inputs. Therefore, any improvement in performance is attributable to the addition of explanations.
Data Balancing. One critical aspect of our experimental design is our data balancing. We aim to
prevent users from succeeding on our tests simply
by guessing the true label for every instance. To
do so, we ensure that true positives, false positives,
true negatives, and false negatives are equally represented in the inputs. Likewise, for the counterfactual test, we sample perturbations such that for
any instance, there is a 50% chance that the pertur-
Text Ratings
Tabular Ratings
Table 3: User simulatability ratings by data domain, on a scale of 1 to 7. The mean and standard deviation for
ratings are given by µ and σ. The 95% conﬁdence interval for the mean is given by CI, as calculated by bootstrap.
bation receives the same prediction as the original
input. We conﬁrm user understanding of the data
balancing in our screening test.
Data Matching.
Within each data domain, all
users receive the same data points throughout the
experiment.
This design controls for any differences in the data across conditions and users,
though this does reduce the information added by
each test, making our conﬁdence intervals relatively wide given the same sample size. We also
match data across prediction rounds in order to
control for the inﬂuence of particular data points
on user accuracy between the Pre and Post phases.
Subjective Simulatability Ratings
Users see explanations in two phases of the tests:
the second learning phase in the forward test, and
the Post phase of the counterfactual test. In these
stages, we ask users to give subjective judgments
of the explanations. They rate each method on a
7 point Likert scale, in response to the question,
“Does this explanation show me why the system
thought what it did?” We explain that users should
give higher ratings when the explanation shows
the reasons for a model prediction, regardless of
whether or not the prediction is correct.
We report data from a total of 2166 responses from
39 user tests. Each test is for a method and data
domain pair, and contains either 16 or 32 task
items, with some missingness due to users exiting the study early. In the results to follow, we
use the term Change to refer to our estimate of
explanation effectiveness: the difference in user
accuracy across prediction phases in simulation
tests. We perform two-sided hypothesis tests for
this quantity by a block bootstrap, resampling both
users and unique task items within each condition
 . In addition, since
users complete the ﬁrst prediction round in either
simulation test without access to explanations, we
estimate the mean Pre accuracy for each method
with a random effects model. This allows us to
share information across methods to yield more
precise estimates of test performance.
Below, we analyze our experimental results and
answer three questions: 1) Do explanations help
users? 2) How do users rate explanations? 3) Can
users predict explanation effectiveness?
Do explanations help users?
We show simulation test results in Tables 1 and 2.
In Table 1, we group results by data domain, and
in Table 2, we group results by test type.
Our principal ﬁndings are as follows:
1. LIME with tabular data is the only setting
where there is deﬁnitive improvement in forward and counterfactual simulatability. With
no other method and data domain do we ﬁnd
a deﬁnitive improvement across tests.
2. Even with combined explanations in the Composite method, we do not observe deﬁnitive effects on model simulatability.
3. Interestingly, our prototype method does reliably well on counterfactual simulation tests in
both data domains, though not forward tests. It
may be that the explanations are helpful only
when shown side by side with inputs.
These results suggest that: (1) many explanation
methods may not noticeably help users understand
how models will behave, (2) methods that are successful in one domain might not work equally well
in another, (3) combining information from explanations does not result in overt improvements
in simulatability. Yet, given our wide conﬁdence
intervals, these results should be considered cautiously. It may also be that other methods do in
fact improve simulatability, but we have not precisely estimated this. For example, our Prototype
and Composite methods do the best on average
with text data, though we cannot be conﬁdent that
they improve simulatability.
Note that estimates of explanation effectiveness
could be inﬂuenced by users simply regressing to
the mean accuracy between prediction rounds. We
ﬁnd that our primary results are not skewed by this
phenomenon: the highest estimates of Change in
each data domain and test type come from conditions where mean Pre test performance was either
above the overall mean or, in one case, within 1.15
percentage points. This potential problem is further mitigated by our random effects model of Pre
test performance, which pulls low Pre test means
toward the overall mean.
How do users rate explanations?
It seems that, as intended, users rated explanations
based on quality rather than model correctness,
as we observe no signiﬁcant difference in ratings
grouped by model correctness (table in Appendix).
In Table 3, we show user ratings for each method
and data domain.
We observe that: 1) ratings are generally higher
for tabular data, relative to text data, 2) the Composite and LIME methods receive the highest ratings in both domains, and 3) variance in explanation ratings is quite high, relative to their scale.
Can users predict explanation
effectiveness?
We answer this question by measuring how explanation ratings relate to user correctness in the Post
phase of the counterfactual simulation test. In this
phase, users rate explanations of model predictions for an original input and predict model behavior for a perturbation of that input. If ratings
of explanation quality are a good indicator of their
effectiveness, we would expect to see that higher
ratings are associated with user correctness.
We do not ﬁnd evidence that explanation ratings
are predictive of user correctness. We estimate the
relationship via logistic regression with user correctness and ratings. We test models with both absolute ratings and ratings normalized within users,
since ratings lack an absolute scale between users.
With 640 text data points, we estimate with 95%
conﬁdence that moving from a rating of 4 to 5 is
associated with between a −2.9 and 5.2 percentage
point change in expected user correctness. Using
normalized ratings, we ﬁnd that moving from the
mean explanation rating to the ﬁrst standard deviation is associated with between a −3.9 and 12.2
percentage point change. With 515 tabular data
points, we estimate that a change in rating from 4
to 5 is associated with between a −2.6 and 5.3 percentage point change in expected user correctness.
Of course, we have not shown that there is no association. Yet it’s important to note that if there is
no relationship between user ratings and simulatability, then simply querying humans about explanation quality will not provide a good indication
of true explanation effectiveness.
Qualitative Analysis
When do explanations succeed at improving user
accuracy, and when do they fail at doing so? Below, we present example counterfactual test items,
and we analyze how the explanations may have
pointed to the reasons for model behavior.
Explanation Success Example
For the example below, 5 of 6 Post test responses
for Prototype and LIME were correct that the
model output did not change for the counterfactual, up from 3 of 6 in the Pre test.
Original (ˆy = pos): “Pretty much sucks, but has a
funny moment or two.”
Counterfactual (ˆyc = pos): “Mostly just bothers,
but looks a funny moment or two.”
LIME identiﬁes “funny” and “moment” as positive words, with weights adding to 1.04 after including the baseline. The notable negative word
is “sucks” (w = −.23), which changes to a similar word (“bothers”). All together, LIME suggests
the prediction would stay the same since the positive words are unaffected and the only important
negative word has a similar substitute.
The Prototype model gives the most activated
prototype:
“Murders by Numbers isn’t a great
movie, but it’s a perfectly acceptable widget.” It
identiﬁes “but” and “funny” as important words
for the prototype’s activation. The counterfactual
is still similar to the prototype in key ways, suggesting the prediction would not change.
Explanation Failure Example
For the item below, only 7 of 13 responses were
correct after seeing explanations, with no method
improving correctness relative to the Pre test accuracy. Users needed to predict that the model prediction changed to negative for the counterfactual.
Original (ˆy = pos): “A bittersweet ﬁlm, simple in
form but rich with human events.”
Counterfactual (ˆyc = neg): “A teary ﬁlm, simple
in form but vibrant with devoid events.”
Anchor gives one word as a condition for the original positive prediction: “bittersweet.” But what
happens when “bittersweet” changes to “teary”?
The Anchor explanation does not actually apply
to this counterfactual scenario, as its probabilistic
description of model behavior is conditioned on
the word bittersweet being present.
LIME gives ﬁve words,
each with small
weights (|w| < .04), while the baseline is .91.
This suggests that LIME has failed to identify features of the input that are necessary to the model
output. Among these ﬁve words are the three that
changed between sentences, but we would not suspect from their weights that the changes made in
the counterfactual would ﬂip the model output.
Decision Boundary gives a counterfactual input with a negative prediction: “A sappy ﬁlm, simple in link but unique with human events.” However, it is difﬁcult to tell whether this counterfactual sentence is similar in decision-relevant ways
to the proposed counterfactual sentence.
The Prototype model gives the activated prototype for the original prediction: “Watstein handily directs and edits around his screenplay’s sappier elements...and sustains Off the Hook’s buildup
with remarkable assuredness for a ﬁrst-timer.” No
important words are selected. We are left without
a clear sense of why this was the most similar prototype and what circumstances would lead to the
model output changing.
These examples reveal areas for improvement
in explanations. Better methods will need to distinguish between sufﬁcient and necessary factors
in model behavior and clearly point to the ways
in which examples share decision-relevant characteristics with new inputs. Further, they must do so
in the appropriate feature space for the problem at
hand, especially for models of complex data.
Discussion
Forward Tests Stretch User Memory. We show
users 16 examples during learning phases but do
not allow them to reference the learning data during prediction phases. Reasonably, some users reported that it was difﬁcult to retain insights from
the learning phase during later prediction rounds.
Generating Counterfactual Inputs.
difﬁcult to algorithmically construct counterfactual inputs that match the true data distribution,
especially when seeking to change the model prediction. Our text counterfactuals are regularly out
of the data distribution, in the sense that no real
movie review would exhibit the word choice they
do. We still consider these inputs to be of interest,
for the reason that a model will handle such inputs
in some manner, and we aim to assess all possible
model behaviors in our analysis.
Fair Comparison of Explanation Methods.
our forward simulation treatment phases, we provide users with 16 explained instances and allow
them to read at their own pace. We control for
the number of data points between methods, but
one could instead control for user exposure time or
computation time of explanation generation. Further, for LIME and Anchor, there are approaches
for efﬁciently covering the space of inputs with a
limited budget of examples .
We opt not to use them since 1) they are not applicable to the Decision Boundary and Prototype
methods, which lack a similar notion of coverage,
and 2) it is not clear whether these approaches are
useful for text data. It may be that when using such
approaches, LIME and Anchor perform better on
forward simulation tasks.
Conclusion
Simulatability metrics give a quantitative measure
of interpretability, capturing the intuition that explanations should improve a person’s understanding of why a model produces its outputs.
this paper, we evaluated ﬁve explanation methods
through simulation tests with text and tabular data.
These are the ﬁrst experiments to fully isolate the
effect of algorithmic explanations on simulatability. We ﬁnd clear improvements in simulatability
only with LIME for tabular data and our Prototype
method in counterfactual tests. It also appears that
subjective user ratings of explanation quality are
not predictive of explanation effectiveness in simulation tests. These results suggest that we must be
careful about the metrics we use to evaluate explanation methods, and that there is signiﬁcant room
for improvement in current methods.
Acknowledgments
We thank the reviewers for their helpful feedback
and our study users.
This work was supported
by NSF-CAREER Award 1846185, DARPA MCS
Grant N66001-19-2-4031, a Royster Society PhD
Fellowship, and Google and AWS cloud compute
awards. The views contained in this article are
those of the authors and not of the funding agency.