Proceedings of SemEval-2016, pages 202–208,
San Diego, California, June 16-17, 2016. c⃝2016 Association for Computational Linguistics
SENSEI-LIF at SemEval-2016 Task 4: Polarity embedding fusion for robust
sentiment analysis
Mickael Rouvier
Aix-Marseille Universit´e
CNRS, LIF UMR 7279
13000, Marseille, France
 
Benoit Favre
Aix-Marseille Universit´e
CNRS, LIF UMR 7279
13000, Marseille, France
 
This paper describes the system developed at
LIF for the SemEval-2016 evaluation campaign.
The goal of Task 4.A was to identify sentiment polarity in tweets. The system
extends the Convolutional Neural Networks
(CNN) state of the art approach.
We initialize the input representations with embeddings trained on different units: lexical, partof-speech, and sentiment embeddings. Neural
networks for each input space are trained separately, and then the representations extracted
from their hidden layers are concatenated as
input of a fusion neural network. The system
ranked 2nd at SemEval-2016 and obtained an
average F1 of 63.0%.
Introduction
This paper describes the system developed at LIF
for the SemEval-2016 sentiment analysis evaluation
task . The goal of our participation was to apply approaches developed for the
European FP7 project SENSEI 1 based on the study
of human conversations according to feelings, opinions, emotions of the participants, in corpora such as
transcripts of telephone speech and web comments.
We have participated in Subtask A: sentiment
analysis at the message level. It consists in determining the message polarity of each tweet in the test
set. The sentiment polarity classiﬁcation task is set
as a three-class problem: positive, negative and neutral.
The sentiment analysis task is often modeled as a
classiﬁcation problem which relies on features ex-
1 
tracted from the text in order to feed a classiﬁer.
Recent work has shown that Convolutional Neural
Networks (CNN) using word representations as input are well suited for sentence classiﬁcation problems and have been shown to produce
state-of-the-art results for sentiment polarity classi-
ﬁcation and introduce lexical information similar to .
• We introduce polarity embeddings, tweet representations extracted from the hidden layer of
CNNs with different word embeddings as input.
• We fuse polarity embeddings by concatenating them and feeding them to a neural network
trained on the ﬁnal task.
• The source code of our system, the models
trained for the evaluation, and the corpus collected for creating word embeddings are made
available to the community to help future research 2.
The paper is structured as follows.
presents the system architecture. Section 3 reviews
the implementation details. Then we detail the different word embeddings and other features used in
our system (Section 4). Results and discussion appear in Section 5.
Polarity embeddings
Deep learning models have been shown to produce
state-of-the-art performance in various domains (vision, speech, etc...).
Convolutional Neural Networks (CNN) represent one of the most used deep
learning model in computer vision . Recent work has shown that CNNs are
also well suited for sentence classiﬁcation problems
and can produce state-of-the-art results . The difference between CNNs applied to computer vision and
their equivalent in NLP lies in the input dimensionality and format. In computer vision, inputs are usually single-channel (eg. grayscale) or multi-channel
(eg. RGB) 2D or 3D matrices, usually of constant
dimension.
In sentence classiﬁcation, each input
consists of a sequence of words of variable length.
Each word w is represented with a n-dimensional
vector (word embedding) ew of constant size. All
the word representations are then concatenated in
their respective order and padded with zero-vectors
to a ﬁxed length (maximum possible length of the
sentence).
Word embeddings are an approach for distributional semantics which represents words as vectors of real numbers. Such representation has useful clustering properties, since it groups together
words that are semantically and syntactically similar . For example, the word
“coffee” and “tea” will be very close in the created
The goal is to use these features as input
to a CNN classiﬁer. However, with the sentiment
analysis task in mind, typical word embeddings extracted from lexical context might not be the most
accurate because antonyms tend to be placed at the
same location in the created space. As exempliﬁed
in Table 1, “good” and “bad” occur in similar con-
2 
texts, and therefore obtain very similar representations. In addition, the model does not differentiate
the senses of a word and creates a representation
close to the most used sense in the training data. In
order to tackle the representation robustness problem, we propose to extract word embeddings with
different training regimes, and fuse their contribution to the system.
embeddings%
Part8of8speech%
embeddings%
embeddings%
w1# w2# w3# wi'1# wi#
w1# w2# w3# wi'1# wi#
w1# w2# w3# wi'1# wi#
Figure 1: Overview of the sentiment embedding fusion approach. In a ﬁrst level, different word representations are used
to train CNNs to predict sentiment polarity, in the second level,
representations extracted at hidden layers are concatenated and
fed to a ﬁnal classiﬁer.
There are two approaches commonly used for fusion: early and late fusion. Late fusion considers
that the different systems are independent by ﬁrst applying classiﬁcation separately on each system and
then merging the output using a high-level classi-
ﬁer. Unfortunately, the classiﬁer cannot model the
correlations among modalities. The early fusion approach tackles this problem by learning features and
class relationships to model the interaction between
modalities. While late fusion cannot beneﬁt from
different system feature correlations, early fusion requires lots of training data.
In previous work , we have
proposed a new fusion framework called embedding
fusion which consists in concatenating hidden layers
of subsystems trained independently, and input them
to an other classiﬁer trained to the actual task targets.
This embedding fusion approach goes beyond late
fusion and overcomes most of the problems linked
to early fusion.
In this paper, we apply the embedding fusion to
Part-of-speech
ﬁckle-minded
Table 1: Closest words to “good” and “bad” according to different regimes for creating word embeddings: lexical, part-of-speech
and sentiment (described later in the paper).
the sentiment polarity prediction task, with a twolevel architecture (Figure 1). Given a tweet, the ﬁrst
level extracts input representations based different
word embeddings. These embeddings are fed to a
CNN with n-gram ﬁlters (from 1 to 5). The CNN is
followed by a series of fully connected hidden layers which are trained to predict the target (sentiment
polarity). Three different sets of word embeddings
are used: lexical embeddings, joint lexical-part-ofspeech embeddings, and joint lexical-sentiment embeddings.
The training procedure for the embeddings is explained in the following sections.
The second level inputs the concatenation of the
last hidden layer resulting from each input representation, which we call polarity embeddings. This
representation is fed to fully connected hidden layers, and also trained to predict the polarity target.
This method allows us to take advantage of both
early and late fusion at the same time, which brings
an improvement in term of performance over merging the decisions of the independent neural networks.
Implementation details
The proposed architecture relies on word embeddings as word representation as well as sentiment
polarity lexicon features, concatenated to the word
representation. An alternative to word-level features
captured by CNNs is to extract sentence-level features in order to model global evidence in the tweet.
In order to incorporate this source of information
into the system, a classical MLP with one hidden
layer is trained to predict sentiment polarity from a
set of sentence-level features and its hidden layer is
concatenated to the other polarity embeddings and
fed to the second-level MLP. The CNN and MLP
are trained jointly.
The ﬁnal complete architecture including CNNs
and the sentence-level MLP, presented in Figure 2,
is based on a single convolutional layer followed
by a max-over-time pooling layer and two fully-connected layers. In order to
learn this kind of model there are two soft-max fully
connected layers. The ﬁrst one is connected to the
pooling layer and the second one at the end of fullyconnected layer.
Word%embeddings%
Feature%Lexicon%@%Word%level%
Feature%Lexicon%
@%Sentence%level%
w1# w2# w3# wi'1# wi#
Word%Representa-on%
Sentence%Composi-on%
Sentence%Representa-on%
Figure 2: Actual CNN architecture: word representations are
concatenated with lexicon features, and sentence-level lexicon
features are concatenated with the polarity embeddings, and
also trained to predict polarity targets on its own.
The parameters of our model were chosen so as to
maximize performance on the development set: the
width of the convolution ﬁlters is set to 5 and the
number of convolutional feature maps is 500. We
use ReLU activation functions and a simple maxpooling. The two fully connected hidden-layers are
of size 512. For each layer, a standard dropout of
0.4 (40 % of the neurons are disabled in each iteration) is used. The back-propagation algorithm used
for training is Adadelta. In our experiments we observed that the weight initialization of the convolution layer can lead to high variation in term of performance. Therefore, we trained 20 models and selected the one that obtained the best results on the
development corpus.
In the second part of the system which inputs polarity embeddings and predicts polarity targets, the
DNN is composed of two 512-dimensional hidden
layers. The non-linearity of the hidden layers is corrected by a ReLU function.
Input features
Word embeddings
We propose to make use of word embeddings trained
under different regimes, in order to capture different
aspects of the relation between words so that it might
beneﬁt the polarity classiﬁer. Three representations
are explored.
embeddings:
embeddings
from .
The representation
is created by using the hidden layer of a linear
neural network to predict a context window from
a central word. For a given context wi−2 . . . wi+2,
the input to the model is wi, and the output could
be wi−2, wi−1, wi+1, wi+2. This method typically
extracts a representation which both covers syntax
and semantics, to some extent.
Part-of-speech embeddings: as stated earlier, the
lexical model cannot distinguish between the senses
of words and creates a single representation per
word form.
For example, the word “apple” receives an embedding that is a mixture of its different contextual senses: fruit, company...
of sophisticated approaches have been proposed to
tackle the problem , by considering senses as latent variables during training, or by
conditionning the training documents on topic distributions.
In our system we follow a very simple approach which creates joint embeddings for
words and their part of speech.
Thus, for context wi−2 . . . wi+2 tagged with the part-of-speech
sequence pi−2 . . . pi+2 the input to the model is
(wi, pi) and the output is (wi−2, pi−2), (wi−1, pi−1),
(wi+1 : pi+1), (wi+2, pi+2).
Sentiment embeddings: another problem with the
basic skipgram approach (lexical embeddings) is
that the model ignores the sentiment polarity of the
words. As a result, words with opposite polarity,
such as “good” and “bad”, are mapped into close
vectors. In , the authors propose to tackle this problem so that sentiment information is encoded in the continuous representation of words.
They propose to create a neural network that predicts two tasks:
the context
of the word and the sentiment label of the whole
sentence. Since it is expensive to manually label
sentences with a polarity label, the authors propose to use tweets that contain emoticons and rely
on the polarity of the emoticon to label the sentences.
As they report that best performance is
obtained by weighting both tasks equivalently, the
model is the same as for lexical embeddings, except
that the predicted context is formed of (word, sentiment) couples. For example, if s is the polarity of
the sentence where the context wi−2 . . . wi+2 is extracted, the model gets wi as input and has to predict
(wi−2, s), (wi−1, s), (wi+1, s), (wi+2, s).
Sentiment lexicon features
Word representations are learned from distributional
information of words in large corpora.
such statistics are semantically informative, they disregard the valuable information that is contained in
manually curated sentiment lexicons. In , the authors propose to incorporate knowledge from semantic lexicons at the word level. The
goal is to extract features based on the overlap between words in the input and sentiment lexicons, and
stack these features to the word embedding.
We create two such features per word per lexicon.
Both are binary indicators of positive and negative
polarity of that word in the lexicons. The lexicons
for this feature type are MPQA ,
Opinion lexicon , and NRC Emotion lexicon . The
NRC lexicons provide a score for each word instead
of just a label. We replace the binary indicators by
the scores.
Sentence-level features
The following features are extracted at sentence
level and used for training the sentence-level MLP:
• Lexicons:
frequency of lemmas that are
matched in MPQA , Opinion Lexicon and NRC Emotion lexicon .
• Emoticons:
number of emoticons that are
grouped in positive, negative and neutral categories.
• All-caps: number of words in all-caps
• Elongated units: number of words in which
characters are repeated more than twice (for example: looooool)
• Punctuation: number of contiguous sequences
of period, exclamation mark and question
Experiments
Pre-processing
A step of pre-processing is applied to every tweet in
the corpus:
• Character encoding: every tweet is encoded
• XML Entities: all the XML entities are converted back to characters
• Lowercase: all the characters are converted in
• Lengthening: character lengthening consists
in repeating several times a character in a word.
It is used in social media as a method to emphasize a fact. This extension is often correlated
with the expression of sentiment. If a character
is repeated more than three times, we reduce it
to three characters. For example, “looool” is
replaced by “loool”.
• Tokenization:
tokenization
by splitting a sentence in pre-lexical units.
We used the tokenizer from the macaon
toolchain .
It is based on
a regular grammar that deﬁnes a set of types
of atoms. A lexical analyzer detects the character sequences (in terms of the grammar) and
combines them as a type. We added the atoms
for detecting smileys, hashtags and users names
(atoms speciﬁc to tweets).
• Map generic words: The hashtags, numbers
and usertags are mapped to generic tokens.
We use the train and dev corpora from Twitter’13
to 16 for training and Twitter’16-dev as a development set. Note that we were unable to download
all the training and development data because some
tweets were deleted or not available due to modiﬁed
authorization status. The datasets are summarized in
Table 3: Statistics of the successfully downloaded part of the
SemEval 2016 Twitter sentiment classiﬁcation dataset.
Word embedding training
To train the word embeddings, we have created a
unannotated corpus of sentiment bearing tweets in
English. These tweets were recovered on the Twitter
platform by searching for emotion keywords (from
the sentiment lexicons) and unigrams, bigrams and
trigrams extracted from the SemEval training corpus. This corpus consists of about 90 million tweets.
A sub-corpus of about 20 million tweets containing
at least one emoticon is used for training the sentiment embeddings. Both corpora are made available 3.
In our experiments,
lexical embeddings and
part-of-speech embeddings are estimated using the
word2vec toolkit . Sentiment
embeddings are estimated using word2vecf.
toolkit allows to replace linear bag-of-word contexts
with arbitrary features. The embeddings are trained
using the skipgram approach with a window of size
3 and 5 iterations. The dimension of the embeddings
is ﬁxed to 100. Part-of-speech tagging is performed
with Tweet NLP .
Overall performance: The evaluation metric used
in the competition is the macro-averaged F-measure
calculated over the positive and negative categories.
Table 4 presents the overall performance of our system. It achieved the second rank on the Twitter 2016
3 
Feature set
Part-of-speech
SENSEI-LIF
all features
w/o word level lexicon
61.7 (+0.4)
62.4 (+0.4)
61.6 (-0.7)
63.2 (+0.2)
w/o sentence level lexicon
60.7 (-0.6)
61.1 (-0.9)
62.0 (-0.3)
62.6 (-0.4)
w/o both lexicon
61.0 (-0.3)
61.4 (-0.6)
61.8 (-0.5)
62.8 (-0.2)
w/o word embeddings
58.4 (-2.9)
59.1 (-2.9)
59.6 (-2.7)
59.6 (-3.4)
Table 2: Ablation experiment: macro-averaged F-scores obtained on the Twitter 2016 test sets with each of the feature groups
data among 34 teams. The system proved to generalize well to other types of short informal texts; it
ranked ﬁrst and third respectively on the two out-ofdomain datasets: Live Journal 2014 and SMS 2013.
SENSEI-LIF
TwtSarc2014
Table 4: Overall performance of the SENSEI-LIF sentiment
analysis systems.
Contribution of features: Table 2 presents the results of ablation experiments on the Twitter 2016
test set. SENSEI-LIF is the system which participated to the evaluation campaign. We present the
results of three contrastive systems: Lexical, Partof-speech and Sentiment. These systems are based
on the CNN classiﬁer prior to the concatenation of
the hidden layers. They use only one set of word
embeddings without any kind of fusion.
The different features used in our system are: lexicon features and word embeddings. The ablation
of lexicon features removes the lexicon features at
the word and sentence level. The ablation of word
embeddings feature consists in randomly initializing
the word representations.
We observe that the most inﬂuential features are
word embeddings. They provide a gain of 3.4 points.
The main advantage of word embeddings is to learn
unsupervised representations on very large corpora
which capture general semantic properties. The last
most important features are lexicon features. We observe that word level lexicon features are not relevant and tend to degrade the performance of the
SENSEI-LIF system on the Twitter 2016 dataset.
Impact of fusion: Table 5 presents the results using different kinds of fusion: early, late and embedding fusion. We observe that early fusion obtains the
worse results. We think that is due to the small training corpus used. Embedding fusion obtains the bests
results on the Twitter 2016 dataset, but more generally late and embedding fusions obtain very close
results on the other datasets.
TwtSarc2014
Table 5: Overall performance using different methods of fusion: early, late and embedding fusion.
Conclusions
This paper describes the LIF participation at SemEval 2016.
Our approach consists in learning
polarity classiﬁers for three types of embeddings,
based on the same CNN architecture. Each set of
word embeddings models the tweet according to a
different point of view: lexical, part-of-speech and
sentiment. A ﬁnal fusion step is applied, based on
concatenating the hidden layers of the CNNs and
training a deep neural network for the fusion. The
fusion system ranked 2nd at the SemEval-2016 evaluation campaign.
Acknowledgments
The research leading to these results has received
funding from the European Union - Seventh Framework Programme under grant
agreement 610916 SENSEI 4. The Tesla K40 used
for this research was donated by the NVIDIA Corporation.
4