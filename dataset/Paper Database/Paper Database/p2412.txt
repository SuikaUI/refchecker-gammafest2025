Full Resolution Image Compression with Recurrent Neural Networks
George Toderici
Google Research
 
Damien Vincent
 
Nick Johnston
 
Sung Jin Hwang
 
David Minnen
 
 
Michele Covell
 
This paper presents a set of full-resolution lossy image
compression methods based on neural networks. Each of
the architectures we describe can provide variable compression rates during deployment without requiring retraining
of the network: each network need only be trained once. All
of our architectures consist of a recurrent neural network
(RNN)-based encoder and decoder, a binarizer, and a neural
network for entropy coding. We compare RNN types (LSTM,
associative LSTM) and introduce a new hybrid of GRU and
ResNet. We also study “one-shot” versus additive reconstruction architectures and introduce a new scaled-additive
framework. We compare to previous work, showing improvements of 4.3%–8.8% AUC (area under the rate-distortion
curve), depending on the perceptual metric used. As far as
we know, this is the ﬁrst neural network architecture that is
able to outperform JPEG at image compression across most
bitrates on the rate-distortion curve on the Kodak dataset
images, with and without the aid of entropy coding.
1. Introduction
Image compression has traditionally been one of the tasks
which neural networks were suspected to be good at, but
there was little evidence that it would be possible to train
a single neural network that would be competitive across
compression rates and image sizes. showed that it
is possible to train a single recurrent neural network and
achieve better than state of the art compression rates for a
given quality regardless of the input image, but was limited
to 32×32 images. In that work, no effort was made to capture
the long-range dependencies between image patches.
Our goal is to provide a neural network which is competitive across compression rates on images of arbitrary size.
There are two possible ways to achieve this: 1) design a
stronger patch-based residual encoder; and 2) design an entropy coder that is able to capture long-term dependencies
between patches in the image. In this paper, we address both
problems and combine the two possible ways to improve
compression rates for a given quality.
In order to measure how well our architectures are doing
(i.e., “quality”), we cannot rely on typical metrics such as
Peak Signal to Noise Ratio (PSNR), or Lp differences between compressed and reference images because the human
visual system is more sensitive to certain types of distortions
than others. This idea was exploited in lossy image compression methods such as JPEG. In order to be able to measure
such differences, we need to use a human visual systeminspired measure which, ideally should correlate with how
humans perceive image differences. Moreover, if such a
metric existed, and were differentiable, we could directly
optimize for it. Unfortunately, in the literature there is a
wide variety of metrics of varying quality, most of which
are non-differentiable. For evaluation purposes, we selected
two commonly used metrics, PSNR-HVS and MS-SSIM
 , as discussed in Section 4.
1.1. Previous Work
Autoencoders have been used to reduce the dimensionality of images , convert images to compressed binary
codes for retrieval , and to extract compact visual representations that can be used in other applications . More
recently, variational (recurrent) autoencoders have been directly applied to the problem of compression (with results
on images of size up to 64×64 pixels), while non-variational
recurrent neural networks were used to implement variablerate encoding .
Most image compression neural networks use a ﬁxed
compression rate based on the size of a bottleneck layer .
This work extends previous methods by supporting variable
rate compression while maintaining high compression rates
beyond thumbnail-sized images.
 
2. Methods
In this section, we describe the high-level model architectures we explored. The subsections provide additional details
about the different recurrent network components in our experiments. Our compression networks are comprised of an
encoding network E, a binarizer B and a decoding network
D, where D and E contain recurrent network components.
The input images are ﬁrst encoded, and then transformed
into binary codes that can be stored or transmitted to the
decoder. The decoder network creates an estimate of the
original input image based on the received binary code. We
repeat this procedure with the residual error, the difference
between the original image and the reconstruction from the
Figure 1 shows the architecture of a single iteration of our
model. While the network weights are shared between iterations, the states in the recurrent components are propagated
to the next iteration. Therefore residuals are encoded and
decoded in different contexts in different iterations. Note
that the binarizer B is stateless in our system.
We can compactly represent a single iteration of our networks as follows:
bt = B(Et(rt−1)),
ˆxt = Dt(bt) + γˆxt−1,
rt = x −ˆxt,
where Dt and Et represent the decoder and encoder with
their states at iteration t respectively, bt is the progressive
binary representation; ˆxt is the progressive reconstruction
of the original image x with γ = 0 for “one-shot” reconstruction or 1 for additive reconstruction (see Section 2.2);
and rt is the residual between x and the reconstruction ˆxt.
In every iteration, B will produce a binarized bit stream
bt ∈{−1, 1}m where m is the number of bits produced after every iteration, using the approach reported in . After
k iterations, the network produces m · k bits in total. Since
our models are fully convolutional, m is a linear function of
input size. For image patches of 32×32, m = 128.
The recurrent units used to create the encoder and decoder
include two convolutional kernels: one on the input vector
which comes into the unit from the previous layer and the
other one on the state vector which provides the recurrent
nature of the unit. We will refer to the convolution on the
state vector and its kernel as the “hidden convolution” and
the “hidden kernel”.
In Figure 1, we give the spatial extent of the input-vector
convolutional kernel along with the output depth. All convolutional kernels allow full mixing across depth. For example,
the unit D-RNN#3 has 256 convolutional kernels that operate
on the input vector, each with 3×3 spatial extent and full
input-depth extent (128 in this example, since the depth of
D-RNN#2 is reduced by a factor of four as it goes through
the “Depth-to-Space” unit).
The spatial extents of the hidden kernels are all 1×1,
except for in units D-RNN#3 and D-RNN#4 where the hidden
kernels are 3×3. The larger hidden kernels consistently
resulted in improved compression curves compared to the
1×1 hidden kernels exclusively used in .
During training, a L1 loss is calculated on the weighted
residuals generated at each iteration (see Section 4), so our
total loss for the network is:
In our networks, each 32×32×3 input image is reduced to
a 2×2×32 binarized representation per iteration. This results
in each iteration representing 1/8 bit per pixel (bpp). If only
the ﬁrst iteration is used, this would be 192:1 compression,
even before entropy coding (Section 3).
We explore a combination of recurrent unit variants and
reconstruction frameworks for our compression systems. We
compare these compression results to the results from the
deconvolutional network described in , referred to in this
paper as the Baseline network.
2.1. Types of Recurrent Units
In this subsection, we introduce the different types of
recurrent units that we examined.
LSTM: One recurrent neural-network element we examine is a LSTM with the formulation proposed by .
Let xt, ct, and ht denote the input, cell, and hidden states,
respectively, at iteration t. Given the current input xt, previous cell state ct−1, and previous hidden state ht−1, the new
cell state ct and the new hidden state ht are computed as
[f, i, o, j]T = [σ, σ, σ, tanh]T  (Wxt + Uht−1) + b
ct = f ⊙ct−1 + i ⊙j,
ht = o ⊙tanh(ct),
where ⊙denotes element-wise multiplication, and b is the
bias. The activation function σ is the sigmoid function
σ(x) = 1/(1 + exp(−x)). The output of an LSTM layer at
iteration t is ht.
The transforms W and U, applied to xt and ht−1, respectively, are convolutional linear transformations. That is, they
are composites of Toeplitz matrices with padding and stride
transformations. The spatial extent and depth of the W convolutions are as shown in Figure 1. As pointed out earlier in
this section, the U convolutions have the same depths as the
W convolutions. For a more in-depth explanation, see .
Associative LSTM: Another neural network element we
examine is the Associative LSTM . Associative LSTM
extends LSTM using holographic representation. Its new
Stride: 2×2
Stride: 2×2
Stride: 2×2
Stride: 2×2
Input (ﬂoats)
Size H×W×3
Stride: 1×1
Encoded (ﬂoats)
(H/16)×(W/16)×512
Stride: 1×1
Stride: 1×1
Stride: 1×1
Stride: 1×1
Stride: 1×1
Stride: 1×1
Binary Code (bits), Size (H/16)×(W/16)×32
It (ﬂoats)
Size H×W×3
Figure 1. A single iteration of our shared RNN architecture.
states are computed as
[f,i, o, j, ri, ro]T =
[σ, σ, σ, bnd, bnd, bnd]T  (Wxt + Uht−1) + b
ct = f ⊙ct−1 + ri ⊙i ⊙j,
ht = o ⊙bnd(ro ⊙ct),
˜ht = (Re ht, Im ht).
The output of an Associative LSTM at iteration t is ˜ht. The
input xt, the output ˜ht, and the gate values f, i, o are realvalued, but the rest of the quantities are complex-valued. The
function bnd(z) for complex z is z if |z| ≤1 and is z/|z|
otherwise. As in the case of non-associative LSTM, we use
convolutional linear transformations W and U.
Experimentally, we determined that Associative LSTMs
were effective only when used in the decoder. Thus, in all
our experiments with Associative LSTMs, non-associative
LSTMs were used in the encoder. Gated Recurrent Units:
The last recurrent element we investigate is the Gated Recurrent Unit (GRU). The formulation for GRU, which has
an input xt and a hidden state/output ht, is:
zt = σ(Wzxt + Uzht−1),
rt = σ(Wrxt + Urht−1),
ht = (1 −zt) ⊙ht−1+
zt ⊙tanh(Wxt + U(rt ⊙ht−1)).
As in the case of LSTM, we use convolutions instead
of simple multiplications. Inspired by the core ideas from
ResNet and Highway Networks , we can think of
GRU as a computation block and pass residual information
around the block in order to speed up convergence. Since
GRU can be seen as a doubly indexed block, with one index
being iteration and the other being space, we can formulate
a residual version of GRU which now has two residual connections. In the equations below, we use ho
t to denote the
output of our formulation, which will be distinct from the
hidden state ht:
ht = (1 −zt) ⊙ht−1+
zt ⊙tanh(Wxt + U(rt ⊙ht−1)) + αhWhht−1, (14)
t = ht + αxWoxxt.
where we use αx = αh = 0.1 for all the experiments in this
This idea parallels the work done in Higher Order RNNs
 , where linear connections are added between iterations,
but not between the input and the output of the RNN.
2.2. Reconstruction Framework
In addition to using different types of recurrent units,
we examine three different approaches to creating the ﬁnal
image reconstruction from our decoder outputs. We describe
those approaches in this subsection, along with the changes
needed to the loss function.
One-shot Reconstruction: As was done in , we predict the full image after each iteration of the decoder (γ = 0
in (1)). Each successive iteration has access to more bits
generated by the encoder which allows for a better reconstruction. We call this approach “one-shot reconstruction”.
Despite trying to reconstruct the original image at each iteration, we only pass the previous iteration’s residual to the
next iteration. This reduces the number of weights, and experiments show that passing both the original image and the
residual does not improve the reconstructions.
Additive Reconstruction: In additive reconstruction,
which is more widely used in traditional image coding, each
iteration only tries to reconstruct the residual from the previous iterations. The ﬁnal image reconstruction is then the
sum of the outputs of all iterations (γ = 1 in (1)).
Residual Scaling: In both additive and “one shot” reconstruction, the residual starts large, and we expect it to
decrease with each iteration. However, it may be difﬁcult
for the encoder and the decoder to operate efﬁciently across
a wide range of values. Furthermore, the rate at which the
residual shrinks is content dependent. In some patches (e.g.,
uniform regions), the drop-off will be much more dramatic
than in other patches (e.g., highly textured patches).
Figure 2. Adding content-dependent, iteration-dependent residual scaling to the additive reconstruction framework. Residual images are of
size H×W×3 with three color channels, while gains are of size 1 and the same gain factor is applied to all three channels per pixel.
To accommodate these variations, we extend our additive
reconstruction architecture to include a content-dependent,
iteration-dependent gain factor. Figure 2 shows the extension
that we used. Conceptually, we look at the reconstruction
of the previous residual image, rt−1, and derive a gain multiplier for each patch. We then multiply the target residual
going into the current iteration by the gain that is given
from processing the previous iteration’s output. Equation 1
gt = G(ˆxt),
bt = B(Et(rt−1 ⊙ZOH(gt−1))),
ˆrt−1 = Dt(bt) ⊘ZOH(gt−1),
ˆxt = ˆxt−1 + ˆrt−1,
rt = x −ˆxt,
where ⊘is element-wise division and ZOH is spatial upsampling by zero-order hold. G(·) estimates the gain factor, gt,
using a ﬁve-layer feed-forward convolutional network, each
layer with a stride of two. The ﬁrst four layers give an output
depth of 32, using a 3×3 convolutional kernel with an ELU
nonlinearity . The ﬁnal layer gives an output depth of 1,
using a 2×2 convolutional kernel, with an ELU nonlinearity.
Since ELU has a range of (−1, ∞) a constant of 2 is added
to the output of this network to obtain gt in the range of
3. Entropy Coding
The entropy of the codes generated during inference are
not maximal because the network is not explicitly designed
to maximize entropy in its codes, and the model does not
necessarily exploit visual redundancy over a large spatial extent. Adding an entropy coding layer can further improve the
compression ratio, as is commonly done in standard image
compression codecs. In this section, the image encoder is a
given and is only used as a binary code generator.
The lossless entropy coding schemes considered here
are fully convolutional, process binary codes in progressive
order and for a given encoding iteration in raster-scan order. All of our image encoder architectures generate binary
codes of the form c(y, x, d) of size H × W × D, where
H and W are integer fractions of the image height and
width and D is m × the number of iterations. We consider a standard lossless encoding framework that combines
a conditional probabilistic model of the current binary code
c(y, x, d) with an arithmetic coder to do the actual compression. More formally, given a context T(y, x, d) which
depends only on previous bits in stream order, we will estimate P(c(y, x, d) | T(y, x, d)) so that the expected ideal
encoded length of c(y, x, d) is the cross entropy between
P(c | T) and ˆP(c | T). We do not consider the small
penalty involved by using a practical arithmetic coder that
requires a quantized version of ˆP(c | T).
3.1. Single Iteration Entropy Coder
We leverage the PixelRNN architecture and use a
similar architecture (BinaryRNN) for the compression of
binary codes of a single layer. In this architecture (shown on
Figure 3), the estimation of the conditional code probabilities for line y depends directly on some neighboring codes
but also indirectly on the previously decoded binary codes
through a line of states S of size 1 × W × k which captures
both some short term and long term dependencies. The state
line is a summary of all the previous lines. In practice, we
use k = 64. The probabilities are estimated and the state is
updated line by line using a 1×3 LSTM convolution.
The end-to-end probability estimation includes 3 stages.
First, the initial convolution is a 7×7 convolution used to
increase the receptive ﬁeld of the LSTM state, the receptive
ﬁeld being the set of codes c(i, j, ·) which can inﬂuence the
probability estimation of codes c(y, x, ·). As in , this
initial convolution is a masked convolution so as to avoid
dependencies on future codes. In the second stage, the line
LSTM takes as input the result z0 of this initial convolution
and processes one scan line at a time. Since LSTM hidden
states are produced by processing the previous scan lines, the
line LSTM captures both short- and long-term dependencies.
For the same reason, the input-to-state LSTM transform
is also a masked convolution. Finally, two 1×1 convolutions are added to increase the capacity of the network to
memorize more binary code patterns. Since we attempt to
predict binary codes, the Bernoulli-distribution parameter
can be directly estimated using a sigmoid activation in the
Short range features:
7×7 masked convolution
Raster order
Input to state
LSTM Logic
LSTM state
Figure 3. Binary recurrent network (BinaryRNN) architecture for a single iteration. The gray area denotes the context that is available at
decode time.
last convolution.
We want to minimize the number of bits used after entropy
coding, which leads naturally to a cross-entropy loss. In case
of {0, 1} binary codes, the cross-entropy loss can be written
−c log2( ˆP(c | T))−(1−c) log2(1−ˆP(c | T)) (20)
3.2. Progressive Entropy Coding
When dealing with multiple iterations, a baseline entropy
coder would be to duplicate the single iteration entropy coder
as many times as there are iterations, each iteration having
its own line LSTM. However, such an architecture would
not capture the redundancy between the iterations. We can
augment the data that is passed to the line LSTM of iteration #k with some information coming from the previous
layers: the line LSTM in Figure 3 receives not just z0 like
in the single iteration approach but also z1 estimated from
the previous iteration using a recurrent network as shown
on Figure 4. Computing z1 does not require any masked
convolution since the codes of the previous layers are fully
available.
4. Results
Training Setup: In order to evaluate the recurrent models we described, we used two sets of training data. The ﬁrst
dataset is the “32×32” dataset gathered in . The second dataset takes a random sample of 6 million 1280×720
images on the web, decomposes the images into nonoverlapping 32×32 tiles and samples 100 tiles that have
the worst compression ratio when using the PNG compression algorithm. By selecting the patches that compress the
least under PNG, we intend to create a dataset with “hardto-compress” data. The hypothesis is that training on such
patches should yield a better compression model. We refer
to this dataset as the “High Entropy (HE)” dataset.
All network architectures were trained using the Tensor-
ﬂow API, with the Adam optimizer. Each network
was trained using learning rates of [0.1, ..., 2]. The L1 loss
(see Equation 3) was weighted by β = (s × n)−1 where s
is equal to B × H × W × C where B = 32 is the batch
size, H = 32 and W = 32 are the image height and width,
and C = 3 is the number of color channels. n = 16 is the
number of RNN unroll iterations.
Evaluation Metrics: In order to assess the performance
of our models, we use a perceptual, full-reference image
metric for comparing original, uncompressed images to compressed, degraded ones. It is important to note that there is
no consensus in the ﬁeld for which metric best represents
human perception so the best we can do is sample from the
available choices while acknowledging that each metric has
its own strengths and weaknesses. We use Multi-Scale Structural Similarity (MS-SSIM) , a well-established metric
for comparing lossy image compression algorithms, and the
more recent Peak Signal to Noise Ratio - Human Visual
System (PSNR-HVS) . We apply MS-SSIM to each of
the RGB channels independently and average the results,
while PSNR-HVS already incorporates color information.
MS-SSIM gives a score between 0 and 1, and PSNR-HVS
is measured in decibels. In both cases, higher values imply
a closer match between the test and reference images. Both
metrics are computed for all models over the reconstructed
images after each iteration. In order to rank models, we
use an aggregate measure computed as the area under the
rate-distortion curve (AUC).
We collect these metrics on the widely used Kodak Photo
CD dataset . The dataset consists of 24 768×512 PNG
images (landscape/portrait) which were never compressed
with a lossy algorithm.
Architectures: We ran experiments consisting of {GRU,
Residual GRU, LSTM, Associative LSTM} × {One Shot
Reconstruction, Additive Reconstruction, Additive Rescaled
Residual} and report the results for the best performing
models after 1 million training steps.
It is difﬁcult to pick a “winning” architecture since the
two metrics that we are using don’t always agree. To further
complicate matters, some models may perform better at low
bit rates, while others do better at high bit rates. In order to
Figure 4. Description of neural network used to compute additional line LSTM inputs for progressive entropy coder. This allows propagation
of information from the previous iterations to the current.
be as fair as possible, we picked those models which had the
largest area under the curve, and plotted them in Figure 5
and Figure 6.
The effect of the High Entropy training set can be seen
in Table 1. In general models beneﬁted from being trained
on this dataset rather than on the 32×32 dataset, suggesting
that it is important to train models using “hard” examples.
For examples of compressed images from each method, we
refer the reader to the supplemental materials.
When using the 32×32 training data, GRU (One Shot)
had the highest performance in both metrics. The LSTM
model with Residual Scaling had the second highest MS-
SSIM, while the Residual GRU had the second highest
PSNR-HVS. When training on the High Entropy dataset,
The One Shot version of LSTM had the highest MS-SSIM,
but the worst PSNR-HVS. The GRU with “one shot” reconstruction ranked 2nd highest in both metrics, while the
Residual GRU with “one shot” reconstruction had the highest PSNR-HVS.
We depict the results of compressing image 5 from the
Kodak dataset in Figure 7. We invite the reader to refer to the
supplemental materials for more examples of compressed
images from the Kodak dataset.
Entropy Coding: The progressive entropy coder is
trained for a speciﬁc image encoder, and we compare a subset of our models. For training, we use a set of 1280×720
images that are encoded using one of the previous image
encoders (resulting in a 80×45×32 bitmap or 1/8 bits per
pixel per RNN iteration).
Figure 5 and Figure 6 show that all models beneﬁt from
this additional entropy coding layer. Since the Kodak dataset
has relatively low resolution images, the gains are not very
signiﬁcant – for the best models we gained between 5% at
2 bpp, and 32% at 0.25 bpp. The beneﬁt of such a model is
truly realized only on large images. We apply the entropy
coding model to the Baseline LSTM model, and the bit-rate
saving ranges from 25% at 2 bpp to 57% at 0.25 bpp.
5. Discussion
We presented a general architecture for compressing with
RNNs, content-based residual scaling, and a new variation
of GRU, which provided the highest PSNR-HVS out of
the models trained on the high entropy dataset. Because
our class of networks produce image distortions that are
not well captured by the existing perceptual metrics, it is
difﬁcult to declare a best model. However, we provided
a set of models which perform well according to these
metrics, and on average we achieve better than JPEG performance on both MS-SSIM AUC and PSNR-HVS AUC,
both with and without entropy coding. With that said, our
models do beneﬁt from the additional step of entropy coding due to the fact that in the early iterations the recurrent
encoder models produce spatially correlated codes. Additionally, we are open sourcing our best Residual GRU
model and our Entropy Coder training and evaluation in
 ression.
The next challenge will be besting compression methods
derived from video compression codecs, such as WebP
(which was derived from VP8 video codec), on large images
since they employ tricks such as reusing patches that were
already decoded. Additionally training the entropy coder
(BinaryRNN) and the patch-based encoder jointly and
on larger patches should allow us to choose a trade-off
between the efﬁciency of the patch-based encoder and the
predictive power of the entropy coder. Lastly, it is important
to emphasize that the domain of perceptual differences is
in active development. None of the available perceptual
metrics truly correlate with human vision very well, and if
they do, they only correlate for particular types of distortions.
If one such metric were capable of correlating with human
raters for all types of distortions, we could incorporate it
directly into our loss function, and optimize directly for it.
6. Supplementary Materials
Supplementary Materials are available here: https://
storage.googleapis.com/compression-ml/
residual_gru_results/supplemental.pdf.