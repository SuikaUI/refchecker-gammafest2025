Generic User Modeling Systems
ALFRED KOBSA
Department of Information and Computer Science, University of California, Irvine,
CA 92697-3425, U.S.A., E-mail: 
 
Abstract. The paper reviews the development of generic user modeling systems over the past
twenty years. It describes their purposes, their services within user-adaptive systems, and the
different design requirements for research prototypes and commercially deployed servers. It discusses the architectures that have been explored so far, namely shell systems that form part
oftheapplication,centralserversystemsthatcommunicatewithseveralapplications,andpossible
future user modeling agents that physically follow the user. Several implemented research prototypes and commercial systems are brie£y described.
Key words: user models, tool systems, user model shells, user model servers, user model agents
1. Early History of User Modeling Shell Systems
User modeling is usually traced back to the works of Allen, Cohen and Perrault and Elaine Rich . For a ten-year period following this seminal research, numerous
application systems were developed that collected different types of information
about, and exhibited different kinds of adaptation to, their current users. Many
of these early user-adaptive applications have been reviewed in Morik , Kobsa
and Wahlster and McTear .
In this early work, the user modeling was performed by the application system,
and often no clear distinction could be made between system components that served
user modeling purposes and components that performed other tasks. From the
mid-eighties onwards, such a separation was increasingly made , but no efforts are reported on
rendering the user modeling component reusable for the development of future
user-adaptive systems.
In 1986, Tim Finin published his `General User Modeling System' GUMS user modeling systems, namely the provision
of selected user modeling services at runtime that can be con¢gured during development time. When ¢lled by the developer with application-speci¢c user modeling
knowledge, these systems would serve as separate user modeling components in
the respective applications.
Kobsa seems to be the ¢rst author who used the term `user modeling shell
system' for such kinds of software tools. The term `shell system', or `shell' for short,
was thereby borrowed from the ¢eld of Expert Systems. There, van Melle 
and Buchanan and Shortliffe had condensed the experiences made with
the medical expert system MYCIN into EMYCIN (`Essential'
MYCIN), an `empty' expert system that had to be ¢lled with domain-speci¢c rules
for deployment as a `real' expert system. Commercial expert system shells like
Knowledge Craft , KEE (Intellicorp) and ART thereafter became very popular in the late seventies and early eighties.
The general aims that underlay the drift to user modeling shell systems, namely
software decomposition and abstraction to support modi¢ability and reusability,
is of course much older than expert system shells.
2. Academic Developments
2.1. EXAMPLE SYSTEMS
In the early nineties, several research groups in different countries independently
started condensing basic structures and processes into user modeling shells that they
believed were important for user-adaptive application systems. Major shell systems
developed during this time include the following ones:
UMT allows the user model developer the de¢nition of
hierarchically ordered user stereotypes, and of rules for user model inferences
as well as contradiction detection. Information about the user that is received
from the application can be classi¢ed as invariable premises or (later still
retractable) assumptions. After the ¢ring of all applicable inference rules
and the activation of all applicable stereotypes, contradictions between
assumptions are sought and various resolution strategies applied (`truth
maintenance').
BGP-MS allows assumptions about the user and
stereotypical assumptions about user groups to be represented in a ¢rst-order
predicate logic. A subset of these assumptions is stored in a terminological logic.
Inferences across different assumption types (i.e., types of modals) could be
de¢ned in a ¢rst-order modal logic. The system can be used as a network server
with multi-user and multi-application capabilities.
ALFRED KOBSA
DOPPELGAë NGER is also a user modeling server that accepts information about the user from hardware and software sensors. Techniques
for generalizing and extrapolating data from the sensors (such as beta distributions, linear prediction, Markov models, and unsupervised clustering for
stereotype formation) are put at the disposal of user model developers. Users
can inspect and edit their user models.
TAGUS represents assumptions about the user in ¢rst-order
formulas, with meta-operators expressing the assumption types. The system
allows for the de¢nition of a stereotype hierarchy and contains an inference
mechanism, a truth maintenance system, and a diagnostic subsystem that
includes a library of misconceptions. It also supports the `simulation of the user'
through forward-directed inferences on the basis of the user model, and the
diagnosis of unexpected user behavior.
um is a toolkit1 for user modeling that represents assumptions about the
user's knowledge, beliefs, preferences, and other user characteristics in
attribute-value pairs. Each piece of information is accompanied by a list of
evidence for its truth and its falsehood. The source of each piece of evidence,
its type (observation, stereotype activation, rule invocation, user input, told
to the user) and a time stamp is also recorded.
Other shell systems include Huang et al. , Vergara , Kono et al. ,
Blank and Machado et al. .
2.2. CHARACTERISTICS
The decisions as to what important structures and processes should go into user
modeling shell systems were mostly based on intuition and/or experience of the shell
developers through prior work on user-adaptive systems. Efforts to put these
decisions on more empirical grounds were seemingly only made in Kleiber 
and Pohl . Even these authors however merely identi¢ed individual
user-adaptive application systems in the literature that would have pro¢ted from
the functionality of their own developed shell system, rather than performing a comprehensive review of prior user-adaptive systems, and determining current and
predicting future system needs.
In an attempt to extend the de facto de¢nition of user modeling shells introduced
by GUMS and to avoid characterizing user modeling shell systems via internal structures and processes, Kobsa listed the following frequently-found services of
such systems:
1 From the point of view of the application system, um was more a library of user modeling
functions than an independent user modeling component. It therefore is not a user modeling
shell in a strict sense.
GENERIC USER MODELING SYSTEMS
. the representation of assumptions about one or more types of user characteristics in models of individual users (e.g. assumptions about their knowledge,
misconceptions, goals, plans, preferences, tasks, and abilities);
. the representation of relevant common characteristics of users pertaining to
speci¢c user subgroups of the application system (the so-called stereotypes);
. the classi¢cation of users as belonging to one or more of these subgroups, and
the integration of the typical characteristics of these subgroups into the current
individual user model;
. the recording of users' behavior, particularly their past interaction with the
. the formation of assumptions about the user based on the interaction history;
. the generalization of the interaction histories of many users into stereotypes;
. the drawing of additional assumptions about the current user based on initial
. consistency maintenance in the user model;
. the provision of the current assumptions about the user, as well as justi¢cations
for these assumptions;
. the evaluation of the entries in the current user model, and the comparison with
given standards.
This characterization of user modeling shell systems is observational only, and it is
again not backed up by a comprehensive analysis of what user modeling services
are actually demanded from current and future user-adaptive systems.
Several requirements for user modeling shell systems were regarded as important,
including the following ones.
Generality, including domain independence
Shell systems were required to be usable in as many application and content
domains as possible, and within these domains for as many user modeling
tasks as possible. They were therefore expected to provide as many services
as possible. `Concessions' in this regard were only made for shell systems
in student-adaptive tutoring systems , which were expected to be usable
for teaching different subject matters, but not for additional application
domains besides educational ones.
Expressiveness
Shell systems were expected to be able to express as many types of assumptions
about the user as possible at the same time. This not only included the different
types of propositional attitudes mentioned above, but also all sorts of re£exive
assumptions concerning the user and the system , plus uncertainty and vagueness in these assumptions.
ALFRED KOBSA
Strong Inferential Capabilities
Shell systems were expected to perform all sorts of reasoning that are traditionally distinguished in arti¢cial intelligence and formal logic, such as reasoning
in a ¢rst-order predicate logic, complex modal reasoning (e.g., reasoning about
types of modalities), reasoning with uncertainty, plausible reasoning when full
information is not available, and con£ict resolution when contradictory
assumptions are detected.
The rationale for assigning so much importance to these requirements rather than
others lies in the af¢nity of user modeling research of those days to arti¢cial
intelligence, natural-language dialog , and intelligent tutoring . User
modeling shells were expected to support the complex assumptions and complex
reasoning about the user that had been identi¢ed in these domains, and additionally
to be usable in a wide range of other domains as well. When in the mid-nineties
user-adaptive application systems shifted towards different domains with less
demanding user modeling requirements and user-tailored web sites ), such complex user modeling and reasoning capabilities became
redundant. Moreover, commercial applications necessitate additional services
and requirements that were largely lacking in the research-oriented shells of these
days (see Section 3.2).
Another observation is that virtually all of these user modeling shell systems
adhered to a `mentalistic' paradigm . They modeled `propositional
attitudes' of the user like his or her knowledge, beliefs, goals, preferences and interests. User behavior was only used as an information source for drawing assumptions about users' propositional attitudes, and not regarded as a
phenomenon that should be analyzed and modeled per se. DOPPELGAë NGER
 , and more recently LaboUr , were the only user
modeling shells that provided means for detecting patterns in user behavior.
The `academic' user modeling shells of the early nineties did not enjoy much distribution, even not in the research community. It seems that BGP-MS was the only
user modeling shell that was used outside of the institution at which it was originally
developed, and even for this system there exist only few reports on extensive external
usage. However, some of the ideas that were ¢rst explored in these prototypical
systems (particularly the stereotype approach and the client-server architecture)
have since made it into commercial user modeling software.
3. The Beginning of a Commercial Boom
In the late 1990s, the value of web personalization was increasingly recognized in the
area of electronic commerce . Web personalization allows product offerings, sales
promotions, product news, ad banners, etc. to be targeted to each individual user,
GENERIC USER MODELING SYSTEMS
taking the user's navigation data, purchase history and other previous interactions
with the electronic merchant into account. From a more general perspective,
personalization allows the relationship with customers on the Internet to migrate
from anonymous mass marketing and sales to `one-to-one' marketing .
User modeling and user modeling shells can play an important role in this
endeavor . Around 50 different tool systems for web
personalization with very different capabilities are currently being advertised (which
does however not necessarily mean that they are also available).
3.1. EXAMPLE SYSTEMS
Major current tool systems for web personalization include the following ones:
Group Lens employs various collaborative ¢ltering
algorithms for predicting users' interests. Predictions are based on ratings explicitly provided by users (e.g., in on-line
forms), implicit ratings derived from navigational data (e.g., products that the
online customer viewed and products that have been put into the shopping cart),
and data from transaction history (e.g., products purchased in the past).
LikeMinds is similar to Group Lens. Major differences include
a more modular architecture, better load distribution, ODBC support, and
slightly different input types (namely purchase data, navigational data,
explicitly stated user preferences, and pre-de¢ned product similarities).
Personalization Server allows for the de¢nition of rules that assign
individual users to one or more user groups based on their demographic data
(e.g., gender and age), information about the user's system usage, and information about the user's software, hardware and network environments. Rules
can also be de¢ned for inferring individual assumptions about the user from
his or her navigation behavior, and for personalizing the content of web pages.
The operation of Personalization Server thus follows very much the `stereotype
approach' from classical user modeling research .
Frontmind (Manna) provides a rule-based development, management, and simulation environment for personalized information and personalized services
on the web. It distinguishes itself from other rule-based products like
Personalization Server by having Bayesian networks for modeling users'
behavior integrated into its personalization framework.
Learn Sesame allows for the de¢nition of a
domain model consisting of objects, object attributes, and event types. It accepts
information about the user from an application, categorizes this information
based on the domain model, and tries to detect recurrent patterns, correlations
and similarities through incremental clustering. Interesting observations are
then reported back to the application.
ALFRED KOBSA
Other recent commercial user modeling systems are discussed in Fink and Kobsa
 . In addition, there exist a number of comprehensive commercial e-commerce
environments with built-in user modeling components that however cannot be
separated from the rest of the system and Microsoft's `Site Server' ).
3.2. CHARACTERISTICS
A central characteristic of most current commercial systems is their client-server
architecture. Here, user modeling systems are not functionally integrated into
the application but communicate with the application through inter-process communication and can serve more than one user/client applications at the same time.
This has generally not been the case for the academic user modeling shell systems
mentioned in Section 2, even though Kobsa et al. , Orwant , Pohl
and Ho« hle and Machado et al. represent important steps in this
direction.
A client-server based architecture provides a number of advantages compared to
embedded user modeling components and Billsus
and Pazzani for a more comprehensive discussion):
. Information about the user is maintained in a central or virtually integrated
repository and put at the disposal of more than one application at the same
. User information acquired by one application can be employed by other
applications, and vice versa.
. Information about users is stored in a non-redundant manner. The consistency
and coherence of information gathered by different applications can be
achieved more easily.
. Information about user groups, either available a priori as stereotypes or dynamically calculated as user group models
 , can be maintained with low
redundancy.
. Methods and tools for system security, identi¢cation, authentication, access
control and encryption can be applied for protecting user models in user
modeling servers .
. Complementary user information that is dispersed across the enterprise (e.g.,
demographic data from client databases, past purchase data from transactional
systems, user segmentations from marketing research) can be integrated more
easily with the information in the user model repository.
In addition, many more general advantages of centralized systems design (e.g.,
centralized user modeling servers relieve clients from user modeling tasks and
can take advantage of powerful hardware resources), as well as disadvantages (e.g.,
necessity of a network connection, potential central point of failure), also apply.
GENERIC USER MODELING SYSTEMS
We will henceforth use the term `user modeling server' to refer to these commercial
user modeling systems. Since the term `shell' has meanwhile become outdated, we
will use the term `(generic) user modeling system' to refer to any generic system
which offers user modeling services at runtime that can be con¢gured at the time
of development.
Commercial user modeling servers must support services that to some extent are
different from those that were expected from academic user modeling shells.
Examples of such new user modeling services include:
Comparisons of different users' selective actions. In certain application areas, users'
choices cannot very well be reconstructed by step-wise reasoning processes,
but only by reference to vaguer concepts like users' taste, personality and
lifestyle (examples include the selection of music, books, clothes, and
restaurants). In such domains it was found useful to match users' selective
actions (buying items, bookmarking them, putting them into a shopping cart,
rating them highly) with those of other users, and to predict users' future
selective actions based on those of the most similar other users. Many current
commercial user modeling servers therefore support the comparison of different
users' action patterns, using `collaborative' (aka clique-based) ¢ltering
algorithms .
Import of external user-related information. Many businesses already own customer
and marketing data, and usually want to integrate these into user modeling
systems when starting with personalized e-commerce. To access external data,
ODBC interfaces or native support for a wide variety of databases are a must.
Due to legacy business processes and software, external user-related information often continues to be updated in parallel to the e-commerce application,
and therefore needs to be continually integrated at reasonable costs and without
impairing the response time.
Privacy support. Company privacy policies, industry privacy norms and conventions, national and international privacy legislation, and privacy-supporting
software tools and service providers are slowly emerging. While this is not yet
the case to date, user modeling servers should ideally support any company
privacy policy that complies with these constraints and be able to take advantage of all major privacy software and services that will then be available
on the market.
Current commercial user modeling servers are very much behavior-oriented.
Observed user actions or action patterns often lead directly to adaptations, without
an explicit representation of the user characteristics (interests, knowledge, plans,
etc.) that probably underlie this behavior and justify these adaptations. Making
these assumptions explicit would allow the user modeling system to employ them
for purposes other than only those for which they were recorded, as was the case
for the classical user modeling shells.
ALFRED KOBSA
Current user modeling servers also rate rather poorly on the dimensions of
generality, expressiveness and inferential capabilities, all of which were regarded
as important for the academic user modeling shells. In many cases, they are quite
domain-dependent, their user model representation is very much intertwined with
processing considerations, and they can only be used for limited personalization
purposes. However, these classical quality characteristics are not regarded as
important for commercial user modeling servers anymore. For them, the following
dimensions seem to be considerably more signi¢cant, along which in return the
classical user modeling shells rate very poorly.2
Quick adaptation. In order to bond users with web shops, adaptations should already
take place for ¢rst-time visitors during their usually relatively short initial
interaction. Several commercial user modeling systems can therefore select
between more than one modeling and personalization methods with different
degrees of complexity, depending on the amount of data that is already available about the user.
Extensibility. Current user modeling servers support a number of user model acquisition and personalization methods, but companies may want to integrate their
own methods or third-party tools. Application Programmer Interfaces (APIs)
and interfaces that allow for the (possibly bi-directional) exchange of user information between user-modeling tools are therefore required.
Load balancing. Under real-world conditions, user model servers will experience
dramatic changes in their average load. Noticeable response delays or even
denials of requests should only occur in emergency situations. User modeling
servers should be able to react to increases in load through load distribution
(ideally with CORBA-based components that can be distributed across a
network of computers) and possibly through less thorough (and thereby less
time-consuming) user model analyses.
Failover strategies. Centralized architectures need to provide fallback mechanisms
in case of a breakdown.
Transactional Consistency. Parallel read/write on the user model and abnormal process termination can lead to inconsistencies that must be avoided by carefully
selected transaction management strategies .
4. The Future of Generic User Modeling Systems
It goes without saying that predictions concerning the future of user modeling systems are fairly speculative, due to the rapidly changing nature of computing and
computing devices. Since personalization has already been demonstrated to bene¢t
2 See Zukerman and Litman for a similar paradigm shift in the area of natural-language
GENERIC USER MODELING SYSTEMS
both the users and the providers of personalized services and since personalization is
therefore going to stay, it is practically certain that generic tool systems that allow
for the easy development and maintenance of personalized systems will be needed
in the future as well.
The exact form which user modeling systems of the future will take on is
however likely to be strongly in£uenced by many characteristics of system usage
that are dif¢cult to predict. Here are a few considerations concerning likely
future avenues:
Mobile user models. Computing is increasingly becoming mobile, but in the near
future the reliability of mobile networks (and possibly also their bandwidth) will
still fall short of the demands imposed by the client-server architecture for user
modeling systems, which requires permanent connectivity. Hence for ubiquitous
computing3 and ubiquitous information4 scenarios, mobile user models (which
we may cautiously dub `user model agents') seem to be worth considering.These
user model agents may reside on the server side and be replicated at the beginning
of each interaction. Or, they may be true mobile agents and stay with the user all
the time, either on his or her computing device or on a gadget that the user always
wears ).
User models for smart appliances. Personalization has so far been almost exclusively con¢ned to computing systems. Recently, however, appliances are being
o¡ered that feature limited but very useful personalization. Examples include
car radios with a chip card that both contains a security code and also stores
the drivers' preferences concerning pre-set stations, volume and tone, and tra¤c
news. Electronic car keys exist that adjust the driver seat, the mirrors and the
GPS system to the driver's individual preferences when plugged into the ignition
lock. While these are proprietary solutions with proprietary minuscule user
models, it is likely that we will see far more examples of personalizable appliances
in the future. Since people will not want to carry a small user model gadget for
each and every personalized appliance, standardized solutions and hence the
need for generic tool systems will soon arise.
Multiple-purpose usage. Information about the characteristics of individual users
may not only be interesting for personalization purposes. Other possible
applications include organizational directory services, skill inventory systems,
and organizational or global expert-¢nding applications. Considerations concerning a central user model server versus a local user model agent can also
be made with respect to these kinds of applications ,
and it seems that in principle generic user model systems can be developed that
3 The user carries a mobile information device wherever he or she goes.
4 The user is able to conjure up his or her personal information environment anywhere, say, at
every wall and desktop.
ALFRED KOBSA
can support all these di¡erent usage purposes for people-related information.
Basing the user model representation of such systems on standards that were
developed for directory services would also help
transfer user modeling systems from the area of proprietary developments into
that of industry standards.
As a consequence of this plethora of different possible applications of information
about users, it is unlikely that in the near future there will be a single or a small
number of universal `user modeling pearl systems' suitable for a large number
of user modeling tasks, as has to some extent been the tacit hope in the late eighties
and early nineties. Instead one can expect to ¢nd a wide variety of generic user
modeling systems, each of which is going to support only a few of the very different
future manifestations of personalization and other applications of information
about the user. Privacy requirements, the need to include user information from
legacy systems, and the need to exchange user information across different systems
will however hopefully enforce some standardization, at least on the communication
Acknowledgements
I would like to thank Peter Brusilovsky, Josef Fink, Judy Kay, Wolfgang Pohl and
Ingrid Zukerman for their valuable comments on an earlier version of this paper.