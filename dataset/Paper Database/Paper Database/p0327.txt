T-Finder: A Recommender System for Finding
Passengers and Vacant Taxis
Nicholas Jing Yuan, Yu Zheng, Liuhang Zhang, Xing Xie
Abstract—This paper presents a recommender system for both taxi drivers and people expecting to take a taxi, using the knowledge
of 1) passengers’ mobility patterns and 2) taxi drivers’ picking-up/dropping-off behaviors learned from the GPS trajectories of
taxicabs. First, this recommender system provides taxi drivers with some locations and the routes to these locations, towards which
they are more likely to pick up passengers quickly (during the routes or in these locations) and maximize the proﬁt of the next
trip. Second, it recommends people with some locations (within a walking distance) where they can easily ﬁnd vacant taxis. In our
method, we learn the above-mentioned knowledge (represented by probabilities) from GPS trajectories of taxis. Then, we feed the
knowledge into a probabilistic model which estimates the proﬁt of the candidate locations for a particular driver based on where
and when the driver requests the recommendation. We build our system using historical trajectories generated by over 12,000 taxis
during 110 days and validate the system with extensive evaluations including in-the-ﬁeld user studies.
Index Terms—Location-based services, urban computing, recommender systems, trajectories, taxicabs, parking place detection
INTRODUCTION
Have you ever suffered from waiting a long time for a
taxicab? Actually, taxi drivers are also upset when cruising on
road surfaces for ﬁnding passengers. The vacant taxis cruising
on roads do not only waste gas and time of a taxi driver
but also generate additional trafﬁc in a city. Thus, how to
improve the utilization of these taxis and reduce the energy
consumption effectively poses an urgent challenge.
Recently, in many big cities, like New York, Beijing,
and Singapore, taxicabs are equipped with GPS sensors for
dispatching and safety. Typically, these taxis will report on
their present locations to a data center in a certain frequency,
e.g., 2 minutes . Besides a geo-position and time stamp,
the occupancy information of a taxi is also recorded (using
some weight sensor or by connecting a taxi meter with the
embedded GPS device). Therefore, a large number of GPS
trajectories with occupancy information are being generated
everyday. Intuitively, these taxi trajectories contain two aspects of knowledge. One is passengers’ mobility, i.e., where
and when passengers get on and off a taxi. The other are
taxis’ pick-up/drop-off behaviors. For example, where highproﬁt taxi drivers usually go and how they can ﬁnd passengers
With these two aspects of knowledge, we present a
• Nicholas Jing Yuan, Yu Zheng and Xing Xie are with Microsoft Research
Asia, Beijing, China, Email:{nichy,yuzheng,xing.xie}@microsoft.com
• Liuhang Zhang is with Institute Of Computing Technology, Chinese
Academy Of Sciences, Email: 
This article is an expanded version of , which appeared in Proceedings of the 13th ACM international conference on Ubiquitous computing
 .
recommender system for both taxi drivers and passengers
using a huge number of historical GPS trajectories of taxis.
Speciﬁcally, on the one hand, given the geo-position and time
of a taxicab looking for passengers, we suggest the taxi driver
with a location, towards which he/she is most likely to pick
up a passenger as soon as possible and maximize the proﬁt of
the next trip. This recommendation helps reduce the cruising
(without a fare) time of a taxi thus saves energy consumption
and eases the exhaust pollution as well as helps the drivers
to make more proﬁt. On the other hand, we provide people
expecting to take a taxi with the locations (within a walking
distance) where they are most likely to ﬁnd a vacant taxicab.
Using our recommender system, a taxi will ﬁnd passengers
more quickly and people will take a taxi more easily thereby
reducing the supply/demand disequilibrium problem to some
The contributions of this work are summarized as follows:
• we propose an approach to detect parking places based
on a large number of GPS trajectories generated by taxis,
where the parking places stand for the locations where taxi
drivers usually wait for passengers with their taxis parked. We
devise a probabilistic model to formulate the time-dependent
taxi behaviors (picking-up/dropping-off/cruising/parking) and
enable a city-wide recommendation system for both taxi
drivers and passengers.
• We improve the taxi recommender by considering the timevarying queue length at the parking places; We enhance the
passenger recommender by estimating the waiting time on
a speciﬁed nearby road segment in addition to calculating
the probability of ﬁnding a vacant taxi. Besides, we develop
a bisected clustering algorithm for categorizing the road
segments in order to obtain a statistical reasonable result
based on sparse data.
• For both of the taxi recommender and the passenger recommender, we build our model incorporating day of the
week and historical weather conditions to tackle the varying
pick-up/drop-off behaviors. We perform extensive evaluations
including in-the-ﬁeld user studies to validate our system.
Preliminary
Deﬁnition 1 (Road Segment): A road segment r is a directed edge that is associated with a direction symbol r.dir
(one-way or bidirectional), two terminal points r.s and r.e,
road level r.level (e.g., level-0 roads are mainly high-ways),
as well as the travel time r.t.
Deﬁnition 2 (Route): A route R is a sequence of connected
road segments, i.e., R: r1 →r2 →· · · →rn, where rk+1.s =
rk.e, (1 ≤k < n). The start point and end point of a route
can be represented as R.s = r1.s and R.e = rn.e.
Deﬁnition 3 (State): We consider three states for a working taxi: occupied (O), cruising (C) and parked (P), detailed
in Table 1. The taxi is non-occupied for both the cruising
and parked states.
The states of a taxi
Taxi Status
Occupied (O)
A taxi is occupied by a passenger.
Cruising (C)
A taxi is traveling without a passenger.
Parked (P)
A taxi is waiting for a passenger.
Note that the “parked” state proposed in this paper is the
status that taxi drivers wait somewhere for business, i.e., stay
and/or queue for a while with the intention to get a passenger
on-board. This status is frequently found at airports, hotels,
shopping centers, etc. We call the places where the taxis are
often parked as parking places. The parking place here does
not merely imply a parking lot for private vehicles (which is
the typical deﬁnition for the “parking place”).
Deﬁnition 4 (Trajectory and Trip): A taxi trajectory is a
sequence of GPS points logged for a working taxi, where
each point p has the following ﬁelds: time stamp p.t, latitude
p.lat, longitude p.lon, located road segment (provided by
map matching ) p.r, state p.s (The raw GPS trajectory
only indicates whether a point is occupied or non-occupied).
A taxi trip is a sub-trajectory which has a single state, either
cruising (need to be inferred) or occupied. Note that a taxi
could generate multiple trips between two parking places.
Motivation
Different from other public transports like buses or subways,
which follow the ﬁxed routes everyday, taxi drivers plan their
own routes once they drop off a passenger. This is the main
reason that different drivers get discrepant incomes. Figure
1 reveals some statistics w.r.t. 12,000 taxicabs during 110
days. As shown in Figure 1(a), the proﬁt of a taxi driver can
be measured by the fare (occupied) distance per unit working
time, based on which, we divide the taxi drivers into 3 groups,
the top 10% are regarded as high-proﬁt drivers, the bottom
fare distance/unit time (m/s)
proportion
(a) Distribution of proﬁt
10 13 16 19 22
time of day (hour)
occupied ratio
(b) Occupied ratio during a day
Fig. 1. Motivation based on statistical results
10% are considered as the low-proﬁt drivers and the rests are
medium-proﬁt drivers.
There is no doubt that at peak hours, taxicabs more easily
ﬁnd passengers. i.e., the taxis are often in short supply.
However, at off-peak hours, the gap between the highproﬁt drivers and the low-proﬁt drivers becomes obvious.
Figure 1(b) further shows the time-variant occupied ratio
(the quotient between the occupied distance and the whole
distance) pertaining to the high/low-proﬁt taxi drivers as well
as the overall occupied ratio changing during a day. It’s clear
that from 10am to 3pm, the gap between the high-proﬁt
drivers and low-proﬁt drivers is more signiﬁcant. The critical
factor determining the proﬁt of a taxi driver depends on two
folds. One is that the driver should know the places where
he/she can pick up passengers quickly given a particular
time of day. The other is the length of the typical trips that
originate from a pick-up place. As we know, transportation
terminals, shopping centers and hotels all generate demand
for taxi service. A professional taxi driver usually knows
when certain planes and trains arrive, when the movie is over
at a local theater and even what time shifts change at certain
businesses.
Typically, for experienced local drivers, instead of random
cruising, they usually have a place to go with the intention to
pick up new passengers after dropping off a passenger. Figure
2 presents an informative density scatter of the cruising
distance per unit time w.r.t. the proﬁt (measured by fare
distance per unit time) for the time interval 10am to 3pm,
where the color indicates the density of a point. The Pearson
correlation coefﬁcient of these two variables is only 0.0874
according to the plotted data. This ﬁgure shows us that
cruising more does not mean earning more. Instead, waiting
at some right places may bring more chance to pick up a
passenger. As shown in the ﬁgure, quite a few drivers cruise
more than the majority (the points on the upper left corner
of the hot kernel), however, their proﬁt is lower. The right
bottom parts (of the hot kernel) are the drivers who earn more
but cruise less than the majority.
The framework of the system is illustrated in Figure 3. We
develop an approach to detect the parking places (Section 3)
from GPS trajectories and segment the GPS trajectories according to Deﬁnition 4, then map-match the GPS trajectories
to road networks using the IVMM algorithm , which
fare distance/unit time (m/s)
cruising distance/unit time (m/s)
r = 0.0874
Fig. 2. Density scatter of cruising distance/unit time w.r.t.
Trajectories
Parking Detection
Parking places
Segmentation
Map-Matching
Statistic learning
Knowledge of
road segments
Offline Mining
Knowledge of
parking places
Taxi Recommender
Passenger Recommender
Online Recommendation
Fig. 3. System Overview
outperforms other approaches for low-sampling-rate GPS
trajectories. Later, we utilize the detected parking places
and the mapped trajectories to learn the time-dependent
statistical results based on a probabilistic model (Section 4).
To tackle the data sparseness problem, we devise a road
segment clustering method and perform statistical learning on
each road segment cluster instead of a single road segment
(Section 5). The above processes are performed ofﬂine and
will be repeated only when the trajectory data is updated
(e.g., once a month). Based on this model, we perform
recommendations to taxi drivers and passengers, given their
locations and current times (Section 6).
PARKING PLACES DETECTION
This section details the process for detecting parked status
from a non-occupied trip and accordingly ﬁnding out the
parking places in the urban area of a city based on a collection
of taxi trajectories.
Candidates Detection
Figure 4 demonstrates the parking candidate detection approach, given a non-occupied trip p1 →p2 →· · · →p7.
We ﬁrst keep checking the distance (Great-circle distance)
between the current point and the latter point until the
distance is smaller than a threshold. As depicted in Figure
4 B), since dist(p1, p2) exceeds the distance threshold δ,
we move next, ﬁxing p2 as the “pivot” point and ﬁnd that
dist(p2, p3) < δ, dist(p2, p4) < δ while dist(p2, p5) > δ
Fig. 4. Detection of candidate parking places
(Figure 4 C). If the time interval between p2.t and p4.t is
larger than the time threshold τ, the three points that form
a small cluster represent a possible parking candidate. Next,
we ﬁx p3 as the pivot point and keep on the procedure to
check latter points. Finally, as shown in Figure 4 D), we
detect (p2, p3, p4, p5, p6) as a parking candidate because we
cannot expand this group any further, i.e., all the points in this
group have a distance farther than δ to p7. The pseudocode
is provided in Algorithm 1.
Essentially, the candidate detection algorithm ﬁnds out the locations where the GPS points of a taxi are densely clustered,
with spatial and temporal constraints. However, a parking
candidate could sometimes be generated by taxis stuck in a
trafﬁc jam, or waiting for signals at a trafﬁc light, instead of
a real parking. To reduce such false selections, we design a
supervised model for picking out the true parked status from
the candidate set, using the following features:
• Spatial-Temporal
Bounding Ratio (MBR). As shown in Figure 5(A),B)),
MBR is the area ratio between the bounding box of
the road segment (MBRr) and the bounding box of
the GPS points (MBRc) in the candidate set. 2) AverageDistance. The average distance dc between points
in the candidate set and their nearest road segments, as
Algorithm 1: ParkingCandidateDetection
Input: A road network G, a trajectory J, distance threshold δ, time
threshold τ
Output: A set of parking candidates P = {P }
1 i ←0, M ←∥J∥, P ←∅, P ←∅;
2 while i < (M −1) do
j ←i + 1; ﬂag ←false;
while j < M do
dist ←Distance (pi, pj);
if dist < δ then j ←j + 1;ﬂag =true;
else break;
if pj−1.t −pi.t > τ and ﬂag =true then
foreach point p ∈J[i, j) and p /∈P do
P .Add(p);/* build a candidate
if i = j −1 then
P.Add(MB (P)); P ←∅;
/* add the minimum bounding box of P
A) Real parking place
B) Traffic jam
A GPS point
C) Features
Fig. 5. Distinguishing parking places from trafﬁc jams
shown in Figure 5 C). 3) CenterDistance. The distance
between center point in MBRc of the candidate set and
the road segments. 4) Duration. The parking duration of
a candidate. 5) LastSpeed. The speed of the last point
leaving a parking candidate (we found a high LastSpeed
is a strong indicator that a taxi changes its status from
parked to occupied).
• POI feature. As we know, a parking place is highly
relevant with the points of interests (POI) around it, e.g.,
subway exits, theaters, shopping malls within 50 meters,
shown in Figure 5 C). We employ the term frequencyinverse document frequency (tf-idf) to measure the
importance of a POI to a parking place. Speciﬁcally,
for a given parking place, we formulate a POI vector,
⟨v1, v2, . . . , vk⟩where vi is the tf-idf value of the i-th
POI category, given by:
∥{P ∈P|the i-th POI category ∈P}∥,
where ni is the number of POIs belonging to the i-th
category and N is the number of POIs lying around the
parking candidate. The idf item is calculated using the
logarithm of the number of parking candidates divided
by the number of parking candidates which have the i-th
POI category.
• Collaborative feature. For a real parking place, other
drivers should also park historically at that place. Otherwise, it’s not a common parking place. So we use the
number of parking candidates within 50 meters in the
past 7 days of a candidate as a collaborative feature to
enhance the classiﬁer.
We use a human-labeled dataset to learn the threshold and
train a bagging classiﬁer model to guarantee the high
precision and recall of the detected parking candidate. Then
we utilize the model to inference whether a candidate is a
really parking or a trafﬁc jam.
Parking Place Clustering
The parked status is detected for each trajectory separately.
However, the parking place detected from a single trajectory
is only a portion of a real parking place. Thus different
parking places may be actually the same one. We use a
density based clustering method OPTICS to discover what
are essentially the same parking places. The reason for using
this method is that it outperforms other methods when the
clustered region may have an arbitrary shape and the points
inside a region may be arbitrarily distributed.
MODEL DESCRIPTION
Both the taxi recommender and the passenger recommender
are multiple-criteria recommendation systems. In particular,
given the current location Lc and time T0 of a taxi driver or
a passenger, the taxi recommender provides the driver with
top-k parking places and routes to these parking places while
the passenger recommender suggests a set of road segments
within a walking distance, both according to a speciﬁed
recommendation strategy, which is either identiﬁed by the
user’s preference or automatically set to a default value. We
detail the computation of each criterion in this section and
then describe the strategies later in Section 6.
Taxi Recommender
The taxi recommender aims to provide the taxi drivers with
the best parking places and the routes to these parking
places. But how to deﬁne a “good” parking place? Different
drivers may have different deﬁnitions. However, it’s intuitively obvious that a good parking place should bring a high
probability (during the routes or at the parking place) to get
a passenger, a short waiting time, a short queue length at the
parking place and a long distance of the next trip.
Deﬁnition 5 (Action ΛRP ): Assume P is a certain parking
place and R : r1 →r2 →. . . →rn is a route to P. We say
the driver takes action ΛRP if he/she drives along R until
ﬁnding a new passenger and queues at P for at most tmax
time if he/she fails to pick up a passenger along R.
Actually, the recommendation adopts the risk-cost-beneﬁt
analysis used by many decision-making system. Speciﬁcally,
the criteria used for the taxi recommender are as follows:
1) [Risk] How likely will the driver pick up a passenger
if he/she takes the action ΛRP ?
2) [Cost1] If the driver takes action ΛRP and succeeds in
ﬁnding a new passenger, what is the expected duration
from T0 to the beginning of the next trip?
3) [Cost2] If the driver takes action ΛRP and arrives at
a parking place, what is the expected queue length at
that parking place?
4) [Beneﬁt] If the driver takes action ΛRP and succeeds
in ﬁnding a new passenger, how long is the expected
distance/travel time of the next trip ?
We answer the above questions in the following subsections.
The Probability of Picking up the Next Passenger
If the driver takes action ΛRP , he may pick-up a passenger on
R; or pick-up a passenger at P; or fail to pick-up a passenger
after waiting at P for tmax time. Let S be the event that the
driver succeeds in picking up the next passenger if he/she
takes the action ΛRP and S be the opposite situation (fails
to get the next passenger). Then we have
where Si for i = 1, 2, . . . , n is the event that the driver picks
up a passenger at road segment ri, and Sn+1 is the event
that the driver picks up a passenger at the parking place.
Note that both S and Si are with respect to the current time
T0. Let ti = Pi
j=1 rj.t, i.e., the travel time from the start
point to ri. Denote the probability that a cruising taxi picks
up a passenger at road segment ri and at time T0 + ti by
pi = Pr(C⇝O|ri, T0 + ti).
−−−−−⇝O|T0 + tn)
be the probability that a taxi succeeds in picking up a
passenger at parking place P and waiting time TP ∈(0, tmax]
if the driver reaches P at T0 + tn . Then
i = 2, 3, . . . , n,
i = n + 1.
Now the answer of question 1 is clear:
Pr(S) =1 −Pr(
=1 −(1 −p∗)
The factor Qn
j=1(1 −pj) in Equation 5 is the probability
that the driver fails to ﬁnd a passenger along R. We denote
this event by SR. Note the route from the current position
of the driver to P is not unique. Should we suggest the
driver with the route that has the minimum Pr(SR)? It’s
obviously absurd since the driver can traverse all the road
network in that case. In practice, we can provide the fastest
route or a route with the minimum Pr(SR) conditioned by
that the distance does not exceed a threshold. This can be
implemented by a simple generalization of the constrained
shortest path problem .
In practice, we assume the probability is stable during time
interval [t −△t, t + △t], where △t is a ﬁxed threshold. This
is reasonable, since the probability changes gradually instead
of sharply. For computing the time-dependent probability, a
common way is to partition a day into ﬁxed slots (e.g., one
hour a slot), and calculate the result for each slot beforehand.
Different from this method, we develop a partition-and-group
approach so as to compute this probability “just-in-time”
and enable real-time recommendation. More concretely, we
partition one day into K small time units, the length of each
unit is τ (where △t can be divisible by τ, e.g., τ = 5 minutes,
△t = 15 minutes). Thus, the kth interval is
Φk = [(k −1)τ, kτ], k = 1, 2, . . . , K.
Then we count the instances pertaining to each Φk (for
needed probabilities) ofﬂine. In the online phase, when the
time t of a taxi driver/passenger is input, we retrieve the
corresponding intervals (i.e., a set of Φk) which belong to
[⌊t/τ⌋τ −△t, ⌊t/τ⌋τ +△t], then compute the corresponding
probability using the statistical results obtained from all the
retrieved intervals. The intuition of this partition-and-group
approach is much like the Riemann Integral. The advantage
of the above “just-in-time” way compared to the ﬁxed slot
method is that we can avoid the discontinuity when crossing
the boundary of a interval (e.g., the probability at 10:59 am
may entirely different with the one at 11:00am if 11:00am is
the boundary of a ﬁxed time slot) as well as make the most
use of the sparse data in each small interval.
Let #k(C ⇝O; r) be the number of trips that the taxis
transfer from the cruising state to occupied state, i.e., pick
up a passenger during Φk when cruising on road segments
r, then pj in Equation 5 can be computed by:
Pr(C⇝O|r, t) =
P⌊(t+△t)/τ⌋
k=⌊(t−△t)/τ⌋#k(C⇝O; r)
P⌊(t+△t)/τ⌋
k=⌊(t−△t)/τ⌋(#k(C; r))
For each cluster of the parking places, we have a set
of trajectories which are at the parked status with varied
arriving time and leaving time. Let #k(ta, tb, P⇝O; P) be
the number of trips that originate from parking place P when
the taxis arrive at P during Φk and ﬁnally become occupied
with the waiting time TP ∈(ta, tb]. Let #k(P⇝O; P) be
the number of trips that originate from P after the taxis
arrive at P during Φk and become occupied when leaving
P, versus #k(P⇝C; P) denotes the taxis which are still nonoccupied (cruising) when leaving P. Then the probability that
the waiting time TP ∈(ta, tb] when reaching P at t can be
calculated by
−−−−⇝O|TP > 0, t) =
k=⌊(t−△t)/τ⌋#k(ta, tb, P⇝O; P)
P⌊(t+△t)/τ⌋
k=⌊(t−△t)/τ⌋(#k(P⇝O; P) + #k(P⇝C; P))
which can be used to compute the p∗in Equation 5.
Duration Before the Next Trip T
Let random variable T be the duration from current time T0
to the beginning of the next trip, given that the taxi driver
takes the action ΛRP . Then T is a summation of two random
variables: the cruising time along R, denoted by TR and the
waiting time at P, termed as TP , i.e.,
T = TR + TP .
Note that TR and TP are not independent. Actually,
if TR ≤tn,
if TP > 0.
Major Notations in This Paper
Current time
Parking place
The route to P
The i-th road segment of R
Equation 2
Equation 15
Equation 3
Equation 20
The event that the driver succeeds in picking up the
next passenger
Travel time from the current position to ri
Duration before the taxi picks up the next passenger
Duration of driving along the route R
Duration of waiting at parking place P
Distance of the next trip
Duration of the next trip
Queue length at a parking place at time t
Waiting time of a passenger arriving at time t
Arriving rate of vacant taxi on a road segment at time t
Based on Bayes rules, the probability mass function is given
Pr(TR = ti|S)
= Pr(TR = ti, S)/Pr(S)
Pr(Si)/Pr(S),
i = 1, 2, . . . , n −1,
Pr(Sn) + Pr(Sn+1)
thus the conditional expectation of TR is
ti Pr(TR = ti|S)
ti Pr(Si) + tn Pr(Sn+1)
Let W be the event that the driver waits at P, we have
To learn the distribution, we break the interval (0, tmax] into
m buckets (in our system, we set m = 200 and tmax = 100
min. We later discuss the parameter selection in Section 8.2).
Speciﬁcally, let
△t∗= tmax/2m,
j = (2j −1)△t∗, j = 1, 2, . . . , m,
j is the average waiting time for the j-th bucket.
Denote the probability that the taxi succeeds in picking up a
passenger and the waiting time TP belongs to the j-th bucket
−−−−−−−−−−−⇝O|TP > 0, T0 + tn).
Actually, recall Equation 3, we have p∗= Pm
The conditional probability
Pr(TP = t∗
(1 −Pr(W))
Therefore, the conditional expectation of TP is
E[TP |S] = Pr(W)
Then, the conditional expectation of T is
=E[TR|S] + E[TP |S]
ti Pr(Si) + tn Pr(Sn+1) + Pr(W)
where Pr(Si) is given by Equation 4, Equation 7 and pj
computed using Equation 8.
Queue Length
In some parking places, taxis often queue to wait for passengers, e.g., at the airports and railway stations. We learn
the average queue length at a given time from the historical
data. Figure 6(a) presents the number of arriving vacant taxis
at a parking place along the time line. It’s clear that the data
reveals a certain cyclical characteristics. Since the data in a
single day is not enough to get a statistical reasonable result,
we ﬁrst partition the data according to the day of week, and
weather condition (normal weather and severe weather), then
aggregate the corresponding data into one day (as shown in
Figure 6(b)) and estimate the queue length.
We note that given the arriving time t at a parking place
P, the number of parked taxis at P is only related with the
# arriving vacant taxis
(a) Taxi arriving sequence at a parking place
time of day
# arriving vacant taxis
(b) Average number of arriving vacant taxis per day
Fig. 6. Data aggregation for queue length estimation
taxis which arrive at P after t −tmax (recall Deﬁnition 5,
the taxis arriving before t −tmax will leave P before t, thus
do not affect the number of parked taxis at time t). Note
that since the data is derived from multiple days, we regard
the taxis arriving in different days as different taxis even
if they have an identical taxi id. We denote the set of the
taxis arriving at P during the interval Φk by Tin
k (P) be the set of taxis that leave P during the time
interval Φk. We assume that in each interval Φk (we set the
length of Φk as 5 minutes in our system), the taxi driver can
only join and leave the queue once. We retrieve the intervals
Φk1, Φk1+1, . . . , Φk2, where k1 = ⌊(t −tmax)/τ⌋and k2 =
We devise an iterative method to compute the average
queue length at t, denoted by L(t). At the end of interval Φk1,
the set of parked taxis arriving after Φk1 (as stated above, we
are only concerned about the taxis arriving after t −tmax)
is the set difference of Tin
k1(P) and Tout
k1 (P). At the end of
the second interval Φk1+1, the parked taxis are increased by
the taxis arriving at P in Φk1+1 and decreased by the taxis
that leave P in Φk1+1. As shown in Equation 19, we can
compute the set of taxis queueing at the end of Φk2 and get
the queue length L(t).
k1(P) = Tin
k1(P) \ Tout
k1 + 1 ≤k ≤k2,
L(t) = ∥T′
Distance/Travel Time of the Next Trip DN, TN
Let random variable DN be the distance of the next trip if the
driver takes the action ΛRP conditioned by that S happens.
i be the probability that the distance of the next trip
satisﬁes dj−1 < DN ≤dj, when Si happens (note the time
at that moment is T0 + ti), i.e., ∀i = 1, 2, . . . , n + 1,
i = Pr(dj −△d < DN ≤dj + △d|Si, T0 + ti).
△d = dmax/2s,
dj = (2j −1)△d,
j = 1, 2, . . . , s,
where dmax is the maximum distance of the next trip (in
our system, we set s = 80 and dmax = 80 km). Then, the
conditional probability distribution is given by:
Pr(DN = dj|S) =
for j = 1, 2, . . . , s. Thus, the conditional expected distance
of the next trip is
Similarly, we apply the partition-and-group method to
calculate qj
i , given by,
Pr(da < DN ≤db|r, t) =
k=⌊(t−△t)/τ⌋#k(da, db; r)
P⌊(t+△t)/τ⌋
k=⌊(t−△t)/τ⌋#k(0, dmax; r)
where dmax is the maximum distance of a trip and Pr(ta <
TN ≤tb | r, t) is similarly computed.
Note that the conditional expected travel time of the
next trip E[TN|S] is computed in exactly the same way as
E[DN|S], thus we omit the detail.
Passenger Recommender
Different from the taxis, the passengers do not want to walk
too long for hailing a taxi. If a passenger is close to at least
one parking place, we provide him with the nearby parking
places with the maximum expected queue length calculated
with the method described in 4.1.3. Otherwise, we suggest
the passenger with the nearby road segments (in a walking
distance) considering two criteria 1) the possibility to ﬁnd a
vacant taxi and 2) the average waiting time.
Probability of Finding a Vacant Taxi
Let Pr(C; r|t) be the probability that there is a vacant taxi
on road segment r at time t. Given the passenger’s current
position, we suggest him with the road segments, which have
the highest probability of ﬁnding a cruising taxi among a
reachable region Ωof the passenger, i.e.,
r = argmax
Pr(C; r|t)
Pr(r|t) Pr(C|r, t).
i=1 be the set of all the road segments in the road
network, then the ﬁrst factor on the right side of Equation 25
can be calculated by:
P⌊(t+△t)/τ⌋
k=⌊(t−△t)/τ⌋
#k (C; r) + #k (O; r)
P⌊(t+△t)/τ⌋
k=⌊(t−△t)/τ⌋
#k (C; ri) + #k (O; ri)
where #k (C; r) and #k (O; r) denote the number of cruising
and occupied taxis on road segment r within the interval Φk
respectively. Similarly, the second factor on the right side of
Equation 25 is given by:
Pr(C; r|t) =
k=⌊(t−△t)/τ⌋#k(C; r)
P⌊(t+△t)/τ⌋
k=⌊(t−△t)/τ⌋
#k (C; r) + #k (O; r)
Combining Equation 25, 26 and 27 (note that we only
consider the road segments in Ω), we have
r = argmax
k=⌊(t−△t)/τ⌋
⌊(t+△t)/τ⌋
k=⌊(t−△t)/τ⌋
#k (C; ri) + #k (O; ri)
Average Waiting Time
For a passenger, the waiting time is a crucial concern in
addition to the probability. The arrival of the vacant taxis
on a given road segment can be modeled using a nonhomogeneous Poisson process (which is a Poisson
process with a time-dependent arriving rate function) with
arriving rate µ(t). Let Tw(t) be the waiting time when a
passenger arrive at time t on a given road segment. Note that
the expected waiting time should be less than the average
interval of two consecutive vacant taxis, i.e.,
E[Tw(t)] ≤
t−△t µ(x)dx
Hence, we use ˆTw(t) as an upper bound to approximate the
expected waiting time.
To learn the arriving rate µ(t) from the data, we incorporate the maximum likelihood method proposed in ,
which regards the arriving rate function as a piece-wise
linear function. Here, we also employ the partition-and-group
method (proposed in Section 4.1.1). Speciﬁcally, we count
the number of vacant taxis arriving on a given road segment
r for each time interval Φk. Later, we aggregate the data into
one single day (for weekdays and weekends, we perform the
aggregation separately since they may have different patterns). Given the arriving time at a road segment t, we retrieve
the subintervals Φk within the time slot [t −△t, t + △t], say
Φ1, Φ2, . . . , Φm. Denote the realization of the average count
vector (number of counts per day) Y = (Y1, Y2, . . . , Ym) for
the m subintervals by n = (n1, n2, . . . , nm), where Yi is
a random variable produced by a non-homogeneous Poisson
process with mean value
µk = a + bxk,
where xk = 2(k −1/2)△t/m. As stated above, we assume
the arriving rate function is linear in the short time slot [t −
△t, t + △t], written as
µ(t) = a + bt.
Then the goal is to ﬁnd the estimator ˆa and ˆb to maximize
the following log-likelihood
ln Pr(Y; a, b) = −
Yk ln µk −
= −a△t −b△t2
Yk ln((a + bxk)(△t/m)) + C,
Feature Space
(A) Feature vector
(B) Bisective clustering
(C) Clusters for each level
(dsin, dsout)
(dein, deout)
Fig. 7. Road segment clustering methodology
where C is a constant. This maximization problem can be
efﬁciently solved using Newton’s iterative method .
ROAD SEGMENT CLUSTERING
On some road segments, the data is too sparse to perform the
statistical learning proposed in Section 4. Instead of computing the probability on each road segment, we ﬁrst conduct a
road segment clustering to integrate the road segments with
similar features so as to tackle the data sparseness problem
and accelerate the online computing.
We identify the following features (as input for road
segment clustering), which are derived from the underlying
road structure and POIs.
– L: The actual length of a road segment.
– L/E: The ratio between L and the Euclidean length
(between the terminal points) E of a road segment. In
general, the larger the value is, the more tortuous the
road segment is.
– dir: The direction of a road segment (one-way/two-way).
– Lanes: The number of lanes in a given road segment.
– degree: Given a road segment r, we deﬁne the in-degree
of the start node (dsin) as the number of directed edges
terminating at node s , while the out-degree of the start
node (dout) as the number of directed edges originating
at node s. Similarly, we deﬁne the in-degree and outdegree for the terminal node e as dein and deout, as
shown in Figure 7 A.
– POI: The POI features used are similar with the ones
used in parking place detection.
Later, we devise a Bisected Clustering algorithm, which
respectively group the road segments of the same level into a
certain number of clusters according to the above-mentioned
features. This algorithm is based on K-means (with K = 2)
clustering and is performed recursively.
In this algorithm, we ﬁrst partition all the road segments into 2 respective clusters {left, right} by using a
2-means clustering algorithm. Now for each cluster C ∈
{left, right}, keep on sub-dividing the cluster C via 2means unless and until the total of samples (GPS points)
inside C ≤φ. In this example, if we set φ = 5, the ﬁve
clusters with gray background cannot be further divided. So,
in total, six clusters will be generated as a result of the
clustering. Note that this clustering is only performed on
the road segments with the same level, e.g., r.level = 2,
as illustrated in Figure 7 B.
The reasons to use the Bisected clustering (with φ constraint) as opposed to simple K-means lie in two aspects:
First, we need to avoid clusters with few GPS points, which
would then result in biased and incorrect computation of prior
probabilities. Second, we do not know how to deﬁne the
number of clusters K in advance.
As a result, we obtain a collection of clusters, each of
which contains a set of road segments with similar features.
In the off-line learning stage, we learn the needed probabilities of our model introduced in Section 4 with respect to each
cluster of road segments instead of a single road segment so
as to gain a statistical reasonable result based on the sparse
data. For example, let #k(C⇝O; ˜r) be the number of trips
that the taxis transfer from the cruising state to the occupied
state, i.e., pick up a passenger during Φk when cruising on
all road segments within cluster ˜r, then the probability of
Equation 6 is actually calculated by:
Pr(C⇝O|r, t) =
P⌊(t+△t)/τ⌋
#k(C⇝O; ˜r)
P⌊(t+△t)/τ⌋
(#k(C; ˜r))
Other probabilities related to the road segments, such as
Equation 26 and Equation 27, are similarly computed. Additionally, in the later on-line phase described in Section 6,
the computation cost is also saved thanks to the road segment
clustering, since the number of candidate road segments to be
computed is signiﬁcantly reduced to a comparatively smaller
cluster space.
ONLINE RECOMMENDATION
In this stage, given the location and time of a taxi driver/passenger, we provide recommendations based on the
proposed model and the derived statistical knowledge.
For the taxi recommender, we ﬁrst perform a range
query according to the location of the taxi, and then retrieve
a set of potential parking places. For each parking place
P, we generate the route R with the minimum Pr(SR)
constrained by a distance threshold (1.5× distance of the
shortest path) using a dynamic programming recursion 
in parallel. Then we compute the probability Pr(S) and the
conditional expectations: E[T|S], E[DN|S], E[TN|S] with
respect to the current time of the driver T0. Later, we rank
the candidate parking places with (but not limited to) the
following strategies (S1–S4) and accordingly recommend
top-k parking places to the driver in real-time. The thresholds
Pθ, Dθ and Fθ can either be learned from the training data
or be set by the user.
S1. (Most proﬁtable) Topkmax{E[DN|S]/E[T + TN|S] :
Pr(S) > Pθ}. The candidate parking places of this
strategy are restricted to the ones which have a Pr(S)
larger than a threshold Pθ, among which, we provide
the taxi driver with the top-k proﬁtable parking places,
i.e., the driver can earn the most money per unit time
by traveling to these k parking places.
S2. (Fastest) Topkmin{E[T|S] : Pr(S) > Pθ, DN > Dθ}.
This strategy retrieves k parking places which have the
Fig. 8. WP7 App for the passenger recommender
minimum expected duration before picking up a new
passenger and have at least Pθ possibility to pick up a
passenger as well as Dθ distance of the next trip.
S3. (Highest
probability)
Topkmax{Pr(S)
E[DN|S]/E[T + TN|S] > Fθ}. This strategy retrieves
the parking places, towards which the drivers are most
likely to pick up a passenger and has a guaranteed
proﬁt (at least Fθ).
S4. (Shortest queue) Topkmin{E(L(t)) : E[DN|S]/E[T +
TN|S] > Fθ, Pr(S) > Pθ}. This strategy provides
the parking places with the minimum expected queue
length, a guaranteed proﬁt (at least Fθ) and a guaranteed
possibility of ﬁnding a passenger (at least Pθ).
For the passenger recommender, we also perform a
range query so as to obtain a region, which is within a
walking distance of the passenger. As shown in Figure 8, the
recommender provides the user with nearby parking places
as well as the road segments with the colors indicating the
possibility to ﬁnd a vacant taxi. The user can choose to
rank top-k road segments based on either the probability
of ﬁnding a vacant taxi (denoted by Rankp) or the average
waiting time (denoted by Rankt). By default, the system
returns the top-k road segments using Rankp and provides
the estimated waiting time of the suggested k road segments
so as to be more user friendly. The results presented to the
users are also time-dependent.
VALIDATION
Road networks: We evaluate our method using the road
network of Beijing, which contains 106,579 road nodes and
141,380 road segments.
Trajectories: The dataset contains the GPS trajectory recorded by over 12,000 taxis in a period of 110 days in the year
of 2010. The total distance of the data set is more than 200
million kilometers and the number of points reaches to 577
million. After trip segmentation, there are in total 20 million
trips, among which 46% are occupied trips and 54% are nonoccupied trips. Since in Beijing there are about 67,000 taxis,
we enlarge the results with a scale factor 5.83(=67000/12000)
time of day (hour)
road level
probability
(a) Pr(C⇝O), normal weather
time of day (hour)
road level
probability
(b) Pr(C⇝O), severe weather
0 1 2 3 4 5 6
time of day (hour)
queue length
proportion
(c) Queue length, weekdays
0 1 2 3 4 5 6
time of day (hour)
queue length
proportion
(d) Queue length, weekends
Fig. 9. Statistics results on road segments and parking places
when calculating the queue length and arriving rate (based
on the additivity of Poisson distribution). A sample data is
available at .
Evaluation on Statistical Learning
We present some of the statistical results associated with
parking places and road segments as shown in Figure 9.
For example, Figure 9(a) depicts the average probability (for
each level of road segments) that a taxi transfers from the
cruising status to the occupied status changing over time on
weekdays when the weather condition is normal. Since the
level-0 roads and level-1 roads are mainly high-ways or main
roads, the probability is reasonably lower compared with
level-2/3. Figure 9(b) reveals the corresponding results under
severe weather condition. It is clear that during inclement
weather, there are more passengers picked up on low-level
road segments, especially in the evening (see Figure 9(b)).
Figure 9(c) and Figure 9(d) depict the distribution of queue
length of all the parking places changing over time. We note
that on weekends, during midnight (10pm–2am) the queue
length is comparatively longer than on weekdays. The reason
may be that people go out more often on the evenings of
Based on the method proposed in Section 4.2.2 and Section 5, we calculate the average arriving rate of vacant taxis
on each road segment cluster. For example, Figure 10 plots
the results of three road segments pertaining to different
clusters on weekdays and weekends changing over time.
Obviously, during the period around 4am, the arriving rate
is the lowest for all of the road segments. In addition, we
note that on weekdays the arriving rate around morning rush
hour (8am) is signiﬁcantly higher (with a gap of 0.1) than on
weekends, since the taxi drivers can take this chance to earn
money from the passengers who go to work or go to school.
Evaluation on Road Segment Clustering
The road segment clustering process aims to group the road
segments which have similar statistical results based on a set
of features we choose. Here, we evaluate the performance
of the road segment clustering by verifying that the road
segments with similar feature values are close in terms of
statistical results.
Speciﬁcally, we select some road segments having enough
number of GPS points, and directly calculate the statistical
results (like Pr(C⇝O|r, t)) according to the method proposed
# vacant taxis/min
(a) weekdays
# vacant taxis/min
(b) weekends
Vacant taxi arriving rate on different road
segment clusters changing over time
time of day
probability
Ground truth
All features
Hierarchical
(a) Overall Pr(C⇝O|r, t) under normal weather condition, weekdays
time of day
standard deviation
All features
Hierarchical
(b) Standard deviation of Pr(C⇝O|r, t) compared with the ground truth
Fig. 11. Evaluation results on road segment clustering
in Section 4 based on their own data. The statistical results
of such road segments are considered as the ground truth
(since the data is enough for an accurate estimation) to
evaluate the clustering results. Later, we randomly remove the
samples (the samples are used in the POI feature) in each of
these road segments and then perform our clustering method.
Next, we evaluate the closeness of the statistical results on
the road segments within each cluster and study the effects
of the features we described in Section 5. In addition, we
compare our method with the hierarchical clustering method
proposed in . For example, Figure 11(a) presents the
overall probabilities of Pr(C ⇝O|r, t) on all the clusters,
changing over time. As is shown, our method using all
the features outperforms both the baseline method and our
Grid−based
(a) weekdays
Grid−based
(b) weekends
Fig. 12. NDCG of different recommendation methods
method considering only partial features. Meanwhile, Figure 11(b) plots the corresponding standard deviation for the
above methods at each time stamp. It’s clear that our method
using all the features has the lowest standard deviation (with
the ground truth) among all the compared methods.
Evaluation on Taxi Recommender
In our previous paper , we evaluated the parking place
detection method and the taxi recommender (using strategies
S1–S3). The result showed that our method can precisely
detect the parking places with a precision over 90% and effectively provide taxi drivers with high-proﬁt parking places,
e.g., our method outperforms the baseline methods (e.g.,
kNN-based method) with an 4.5% improvement in precision
and an 8% improvement in recall, based on the data of highproﬁt taxi drivers. Here, we further conduct experiments to
evaluate the effectiveness of the taxi recommender.
We compare our recommender with the grid-based method,
which partitions the map into grids and recommends the taxi
driver with a nearby high-proﬁt grid (for comparison, the
grid size is maintained in the same scale with a parking
place), based on the historical statistics. In this experiment,
we utilize the high-proﬁt drivers’ data as ground truth.
The query points are generated by two categories: 1) the
drop-off points and 2) the points which are 500m, 1000m
and 1500m before the next parking place along a cruising
trip. For each method, we retrieve the recommended top-k
locations as well as the routes to these locations. We measure
the performance of different recommendations using NDCG
(normalized discounted cumulative gain) and employ the
scoring metrics proposed in to calculate the NDCG@k
for each method. Figure 12 presents the results for both
the weekdays and weekends. As is shown, our methods
outperforms the competing method, where the improvements
in terms of nDCG are more signiﬁcant on weekends.
In addition, we perform in-the-ﬁeld studies to explore
the accuracy of the proposed queue length estimation (w.r.t.
strategy S4). Speciﬁcally, we invite 4 users to stand by 7
different parking places and record the number of parked
taxis every 5 minutes during a period of 2 hours. This
evaluation is repeated in a period of 3 weeks and is conducted
on both the weekdays and weekends. Later, we compare the
evaluation results with the recommended results to validate
the effectiveness of our system.
queue length
(a) weekdays
queue length
(b) weekends
Fig. 13. Recorded queue length compared with estimated queue length changing over time
Figure 13 presents the overall results (10 days for weekdays and 5 days for weekends) of the recorded queue length
compared with the estimated queue length changing over
time on weekdays and weekends. The results show that the
difference between the estimated and recorded queue length
is quite small (RMSE=0.5576) on weekdays. Besides, the
trends changing over time are accurately modeled for both
the weekdays and weekends.
Evaluation on Passenger Recommender
(a) weekday, Suzhou Street
(b) weekend, Wudaokou
Number of vacant taxis passing through the
road segments close to two areas, counted per minute
We perform the in-the-ﬁeld study for the passenger recommender in 5 areas of Beijing: Zhichun Road, Suzhou Street,
Wudaokou, Zhongguancun (shortened as ZGC) East Road
and Zhongguancun Main Street. For each area, the users
are involved to record the number of vacant taxis passing
by 4 nearby road segments every minute during a period
of 30 minutes. For each road segment close to an area, we
ask one user to record the number of vacant taxis passing
through the road segment every minute. This evaluation is
also repeated in a period of 3 weeks and is conducted on both
the weekdays and weekends. For example, Figure 14 presents
the results for one test in Suzhou Street on a weekday and
another in Wudaokou on a weekend, where the road segments
R1, R2, R3, R4 are ranked by Rankp, i.e., the possibility
Overall evaluation results of passenger recommender on weekdays
Zhichun Rd.
Suzhou St.
ZGC East Rd.
ZGC Main St.
9:35-10:05
15:55-16:20
14:00-14:30
Overall evaluation results of passenger recommender on weekends
Zhichun Rd.
Suzhou St.
ZGC East Rd.
ZGC Main St.
10:30-11:00
13:10-13:40
9:40-10:10
14:15-14:45
15:35-16:05
to ﬁnd a vacant taxi (see Section 6). It’s clear that the
recommended road segment R1 has the most vacant taxis
passing by in the period of 30 minutes. Table 3 gives the
overall results of the in-the-ﬁeld evaluation on weekdays.
In the ﬁrst column, Rankd,w
stands for ranking according
to probability of ﬁnding a vacant taxi considering day of
the week (d) and weather conditions (w); Rankd
only considers day of the week/weather conditions; Rankp
considers neither of them. The notations for Rankt are
similar. We compare the above ranking with the real ranking
(denoted by Rank) according to the average number of
vacant taxis encountered in 30 minutes (denoted by #). It’s
obvious that the methods considering both the day of the
week and weather conditions are better than the competing
methods. We note that in all of the tested areas, the rank-
1 road segments of Rankd,w
and Rankd,w
match the real
ranking perfectly. For rank-2∼rank-4 road segments, in some
places Rankd,w
is better than Rankd,w
(e.g., ZGC Main St.)
and vise versa. Tabel 4 shows the corresponding results on
weekends (due to the space limitation, here we only present
the results of our combined approaches, i.e., Rankd,w
DISCUSSION
Load Balance
The load balance problem is an open challenge for many recommendation systems and is also widely studied in many other ﬁelds such as distributed networks and web services .
According to the places where the balancing approaches
are used, the balancing strategies can be categorized into
two groups: client-side balancing and server-side balancing.
We note that our recommender is location-variant and timedependent, i.e., vary for the queries in different places and
no balance
round robin
incremental
(a) maximum loads
no balance
round robin
incremental
(b) average loads
Fig. 15. The performance of different balancing strategies
different time periods. Hence, the load balance problem is
weakened in the “client”-side to a certain extent. Meanwhile, since our recommender is based on a probabilistic
model learned from the historical data, the “high-loaded”
parking places/road segments where many drivers/passengers
often choose are already considered in the model (e.g., the
queueing model of taxis in Section 4.1.3). In addition, the
taxi recommender aims to provide recommendations to taxi
drivers and let them make their own decisions. However,
this recommender can also be combined with the central
taxi dispatching system (which takes the responsibility for
controlling the loads of taxis in different places) so as to
complement each other.
In practice, in order to further lower down the risk of
overloads, we can adopt the round-robin or incremental-load
balancing strategies in the “server”-side. For each time unit τ
(see Equation 6), the round-robin strategy (as utilized in )
maintains the number of queries on each road segment (only
the ones on which the queries are already sent), chooses one
from the top-k lists calculated by the system in a circular
manner, e.g., for the ﬁrst query, return the top-1 parking
place, and for the second query, return the top-2 parking
place..., and return the top-1 again for the k + 1th query.
Instead, the incremental-load strategy returns the least-loaded
parking place to answer the current query for the queries sent
from the same road segment and at the same time unit. We
investigate the maximum loads (i.e., the maximum number
of times that a certain parking place is recommended to taxi
drivers) per minute and average loads with different balancing
strategies in Figure 15(a) and Figure 15(b) respectively. Here,
we simulate the queries with all the drop-off points (in total
1,151,703 points) during a week , where the average query interval is 0.53 seconds. As
a result, both of the proposed balancing strategies alleviate
the loads signiﬁcantly, while the incremental-load method has
a better performance. Note that the chain reactions, such as
the trafﬁc dynamics induced by mobilizing the taxis using the
above strategies, are not taken into account, however, this is
beyond the focus of this paper.
Parameter Selection
In Section 4.1.1, we propose the partition-and-group framework for calculating the required probabilities of the model,
which is then utilized many times, such as in Equation 7,8,26
and 27. In our model, the time unit τ is the smallest unit
(the partition part in the partition-and-group framework) for
counting the number of samples based on the historical data.
Thus a smaller τ means a higher resolution segmentation in
the time line, whereas the number of samples in a single time
unit is reduced simultaneously. Hence, our selection rule is
to obtain a τ as small as possible, while providing sufﬁcient
data for a statistical reasonable estimation. For example,
Figure 16 presents the distribution (over different time units
during a day) of average number of samples on each road
segment cluster (keep in mind that the statistical learning are
performed with respect to each road segment cluster instead
of individual road segments, as described in Section 5). As is
shown, when τ = 1 min or 3 min, the number of samples in
most time units is less than 150, however, when τ increases
to 5 min, the number of samples in most time units is close
to 300. Thus in our system, we set τ = 5 min. We use similar
method to determine the value of △t∗in Equation 14 and
△d in Equation 21.
Figure 17 gives another example showing the selection of
parameter △t, which is the smallest time interval (the group
part in the partition-and-group framework) for answering a
time-dependent query. Here, given the query time t, the time
interval with length △t is utilized as a sliding window to
aggregate statistical results in the time units around t, learned
in the off-line phase, so as to smooth the values changing over
time (which is similar to the “moving averaging smoothing”
method). As is shown, when △t = 30 min, we obtain a
trade-off between the smoothness and the sensitivity (of the
time-dependent probabilities).
RELATED WORK
Dispatching Systems
Taxi dispatching systems are attracting growing attention
from researchers with the development of intelligent trans-
proportion
(a) τ = 1 min
proportion
(b) τ = 3 min
proportion
(c) τ = 5 min
Fig. 16. Distribution of average #samples w.r.t. τ
time of day
probability (× 10−2)
(a) △t = 15 min
time of day
probability (× 10−2)
(b) △t = 20 min
time of day
probability (× 10−2)
(c) △t = 30 min
Fig. 17. Pr(C⇝O) at different time of day w.r.t. △t
portation systems and the popularization of GPS sensors
 . Most existing dispatching systems assign a task to
taxi drivers based on nearest neighbor principle in terms
of distance or time. Phithakkitnukoon et al. use the
naive Bayesian classiﬁer with developed error-based learning
approach to infer the number of vacant taxis at a given time
and location which can be used to enhance the dispatching
system. Yamamoto et al. propose a fuzzy clustering and
adaptive routing approach to improve dispatching system by
assigning vacant taxis adaptively to the locations with high
expectation of potential customers.
Different from the centralized dispatching, our recommendation system provides suggestions to taxi drivers/passengers,
allowing them to make their own decisions. Typically, for
a dispatching system, the customers need to book a taxi
by telephone/internet in advance, and it is usually not free
of charge. Most passengers hail a taxi along the road or
stand where the taxis are available instead of booking a
taxi. Besides, our method aims to maximize the proﬁt for
a particular taxi driver instead of balancing the income of
all the taxi drivers, which is usually a goal of a dispatching
system. In addition, our approach can be combined with a
dispatching system so as to complement each other.
Location Recommendation For Taxi Drivers
A number of recent works provide recommendations for taxi
drivers. Ge et al. present a novel model to recommend
a taxi driver with a sequence of pick-up points so as to
maximize a taxi driver’s proﬁt. This work formulates the
target problem by a mobile sequential recommendation (M-
SR) problem. Combined with a taxi driving fraud detection
method and some business insights such as tip distributions, Ge et al. introduce a taxi business intelligence system
in . Li et al. study the passenger-ﬁnding strategies
(hunting/waiting) of taxi drivers in Hangzhou. In this work,
L1-Norm SVM is used to select features for classifying the
passenger-ﬁnding strategies in terms of performance.
Our approach is different from the above methods in the
following aspects: 1) We provide recommendations to both
taxi drivers and passengers, which mobilizes them and reduces the disequilibrium of the demand and supply. 2) Instead
of a grid/cell-based partition of the map, our recommendation
is provided on road-segment level, which enables more
accurate and meaningful understanding of the taxi drivers’
behaviors as well as a more practical recommendation for
both the taxi drivers and the passengers. 3) We focus on the
off-peak hours to help the driver make the ﬁrst step decision
whenever and wherever they want to decide a destination to
go. In practice, the “ﬁrst step” recommendation would be
more effective since usually the drivers are not willing to
remember a sequence of places. 4) We develop an algorithm
to distinguish the parked status from trafﬁc jams and propose
a solution to detect the parking places in an urban area. 5)
We target the challenges when building the system based on
sparse data and facilitate the on-line recommendation with a
partition-and-group framework.
CONCLUSION
To save the time for ﬁnding a taxicab and reduce unnecessary
trafﬁc ﬂows as well as energy consumptions caused by
cruising taxicabs, we proposed a taxi-passenger recommender
system based on the pick-up behaviors of high-proﬁt taxi
drivers and the mobility patterns of passengers learned from
a large number of taxi trajectories. We built the recommender
system with a dataset generated by 12,000 taxicabs in a
period of 110 days, and evaluated the system by extensive
experiments including a series of in-the-ﬁeld studies. As a
result, the taxi recommender accurately predicts the timevarying queue length at parking places and effectively provides the high-proﬁt parking places; the passenger recommender successfully suggests the road segments where users
can easily ﬁnd vacant taxis, e.g., the top-1 road segment
recommended by our system considering day of the week
and weather conditions matches the ground truth for all
of the tested areas. In the future, we plan to deploy our
recommender in the real world so as to further validate and
improve the effectiveness and robustness of this system.