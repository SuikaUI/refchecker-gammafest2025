Learning Feature Pyramids for Human Pose Estimation
Shuang Li1
Wanli Ouyang1,2
Hongsheng Li1
Xiaogang Wang1
1 Department of Electronic Engineering, The Chinese University of Hong Kong
2 School of Electrical and Information Engineering, The University of Sydney
{wyang, sli, wlouyang, hsli, xgwang}@ee.cuhk.edu.hk
Articulated human pose estimation is a fundamental yet
challenging task in computer vision. The difﬁculty is particularly pronounced in scale variations of human body parts
when camera view changes or severe foreshortening happens. Although pyramid methods are widely used to handle
scale changes at inference time, learning feature pyramids
in deep convolutional neural networks (DCNNs) is still not
well explored. In this work, we design a Pyramid Residual Module (PRMs) to enhance the invariance in scales
of DCNNs. Given input features, the PRMs learn convolutional ﬁlters on various scales of input features, which
are obtained with different subsampling ratios in a multibranch network. Moreover, we observe that it is inappropriate to adopt existing methods to initialize the weights
of multi-branch networks, which achieve superior performance than plain networks in many tasks recently. Therefore, we provide theoretic derivation to extend the current
weight initialization scheme to multi-branch network structures. We investigate our method on two standard benchmarks for human pose estimation. Our approach obtains
state-of-the-art results on both benchmarks. Code is available at 
1. Introduction
Localizing body parts for human body is a fundamental yet challenging task in computer vision, and it serves
as an important basis for high-level vision tasks, e.g., activity recognition , clothing parsing ,
human re-identiﬁcation , and human-computer interaction. Achieving accurate localization, however, is difﬁcult
due to the highly articulated human body limbs, occlusion,
change of viewpoint, and foreshortening.
Signiﬁcant progress on human pose estimation has been
achieved by deep convolutional neural networks (DC-
NNs) . In these methods, the
DCNNs learn body part detectors from images warped to
the similar scale based on human body size. At inference
Figure 1. Our predictions on the LSP dataset . When images
are warped to approximately the same scale, scales of different
body parts may still be inconsistent due to camera view change
and foreshortening. In (a), the scale of hand and head are larger
than that of foot. In (b), the scale of foot is larger than that of head.
time, testing images should also be warped to the same scale
as that for training images.
Although the right scale of the full human body is provided, scales for body parts may still be inconsistent due
to inter-personal body shape variations and foreshortening
caused by viewpoint change and body articulation. It results
in difﬁculty for body part detectors to localize body parts.
For example, severe foreshortening is present in Figure 1.
When the images are warped to the same size according
to human body scale, the hand in Figure 1 (a) has a larger
scale than that in Figure 1 (b). Therefore, the hand detector
that can detect the hand in Figure 1 (a) might not be able
to detect the hand in Figure 1 (b) reliably. In DCNNs, this
problem from scale change happens not only for high-level
semantics in deeper layers, but also exists for low-level features in shallower layers.
To enhance the robustness of DCNNs against scale variations of visual patterns, we design a Pyramid Residual Module to explicitly learn convolutional ﬁlters for building feature pyramids. Given input features, the Pyramid Residual
Module obtains features of different scales via subsampling
with different ratios. Then convolution is used to learn ﬁlters for features in different scales. The ﬁltered features are
upsampled to the same resolution and are summed together
for the following processing. This Pyramid Residual Module can be used as building blocks in DCNNs for learning
 
feature pyramids at different levels of the network.
There is a trend of designing networks with branches,
e.g., Inception models and ResNets 
for classiﬁcation, ASPP-nets for semantic segmentation, convolutional pose machines and stacked hourglass networks for human pose estimation, in which
the input of a layer is from multiple other layers or the
output of a layer is used by many other layers. Our pyramid residual module also has branches. We observe that
the existing weight initialization scheme, e.g., MSR 
and Xavier methods, are not proper for layers with
branches. Therefore, we extend the current weight initialization scheme and provide theoretic derivation to show
that the initialization of network parameters should take
the number of branches into consideration. We also show
another issue in the residual unit , where the variance
of output of the residual unit accumulates as the depth increases. The problem is caused by the identity mapping.
Since Hourglass network, also called conv-deconv structure, is an effective structure for pose estimation , object
detection , and pixel level tasks , we use it as the basic structure in experiments. We observe a problem of using
residual unit for Hourglass: when outputs of two residual
units are summed up, the output variance is approximately
doubled, which causes difﬁculty in optimization. We propose a simple but efﬁcient way with negligible additional
parameters to solve this problem.
The main contributions are three folds:
• We propose a Pyramid Residual Module, which enhances the invariance in scales of deep models by learning feature pyramids in DCNNs with only a small increase of complexity.
• We identify the problem for initializing DCNNs including layers with multiple input or output branches.
weight initialization scheme is then provided, which can
be used for many network structures including inception
models and ResNets .
• We observe that the problem of activation variance accumulation introduced by identity mapping may be harmful in some scenarios, e.g., adding outputs of multiple
residual units implemented by identity mapping together in the Hourglass structure. A simple yet effective
solution is introduced for solving this issue.
We evaluate the proposed method on two popular human
pose estimation benchmarks, and report state-of-the-art results. We also demonstrate the generalization ability of our
approach on standard image classiﬁcation task. Ablation
study demonstrates the effectiveness of the pyramid residual module, the new initialization scheme, and the approach
in handling drastic activation variance increase caused by
adding residual units.
2. Related Work
Human pose estimation.
Graph structures, e.g., Pictorial structures and loopy structures ,
have been broadly used to model the spatial relationships
among body parts. All these methods were built on handcrafted features such as HOG feature , and their performances relied heavily on image pyramid. Recently, deep
models have achieved state-of-the-art results in human pose
estimation . Among
them, DeepPose is one of the ﬁrst attempts on using
DCNNs for human pose estimation. It regressed the coordinates of body parts directly, which suffered from the problem that image-to-locations is a difﬁcult mapping to learn.
Therefore, later methods modeled part locations as Gaussian peaks in score maps, and predicted the score maps with
fully convolutional networks. In order to achieve higher accuracy, multi-scale testing on image pyramids was often utilized, which produced a multi-scale feature representation.
Our method is a complementary to image pyramids.
On the other hand, to learn a model with strong scale invariance, a multi-branch network trained on three scales of
image pyramid was proposed in . However, when image pyramids are used for training, computation and memory linearly increases with the number of scales. In comparison, our pyramid residual module provides an efﬁcient
way of learning multi-scale features, with relatively small
cost in computation and memory.
DCNNs combining multiple layers.
In contrast to
traditional plain networks (e.g., AlexNet and VGGnets ), multi-branch networks exhibit better performance on various vision tasks. In classiﬁcation, the inception models are one of the most successful
multi-branch networks. The input of each module is ﬁrst
mapped to low dimension by 1×1 convolutions, then transformed by a set of ﬁlters with different sizes to capture various context information and combined by concatenation.
ResNet can be regarded as a two-branch networks
with one identity mapping branch. ResNeXt is an extension of ResNet, in which all branches share the same
topology. The implicitly learned transforms are aggregated
by summation. In our work, we use multi-branch network
to explore another possibility: to learn multi-scale features.
Recent methods in pose estimation, object detection and
segmentation used features from multiple layers for making
predictions . Our approach is complementary to these works. For example, we adopt Hourglass
as our basic structure, and replace its original residual units,
which learn features from a single scale, with the proposed
Pyramid Residual Module.
Weight initialization.
Good initialization is essential
for training deep models. Hinton and Salakhutdinov 
adopted the layer-by-layer pretraining strategy to train a
PRM + Pool
Detailed hourglass structure
ConvoluƟon
Pyramid Residual module
Score maps
Figure 2. Overview of our framework. (a) demonstrates the network architecture, which has n stacks of hourglass network. Details of each stack of hourglass is illustrated in (b). Score maps of
body joint locations are produced at the end of each hourglass, and
a squared-error loss is also attached in each stack of hourglass.
deep autoencoder.
Krizhevsky et al. initialized the
weight of each layer by drawing samples from a Gaussian
distribution with zero mean and 0.01 standard deviation.
However, it has difﬁculty in training very deep networks
due to the instability of gradients . Xavier initialization has provided a theoretically sound estimation of
the variance of weight. It assumes that the weights are initialized close to zero, hence the nonlinear activations like
Sigmoid and Tanh can be regarded as linear functions. This
assumption does not hold for rectiﬁer activations. Thus
He et al. proposed an initialization scheme for rectiﬁer networks based on . All the above initialization
methods, however, are derived for plain networks with only
one branch. We identify the problem of the initialization
methods when applied for multi-branch networks. An initialization scheme for networks with multiple branches is
provided to handle this problem.
3. Framework
An overview of the proposed framework is illustrated in
Figure. 2. We adopt the highly modularized stacked Hourglass Network as the basic network structure to investigate feature pyramid learning for human pose estimation .
The building block of our network is the proposed Pyramid
Residual Module (PRM). We ﬁrst brieﬂy review the structure of hourglass network. Then a detailed discussion of our
pyramid residual module is presented.
3.1. Revisiting Stacked Hourglass Network
Hourglass network aims at capturing information at every scale in feed-forward fashion. It ﬁrst performs bottomup processing by subsampling the feature maps, and conducts top-down processing by upsampling the feature maps
with the comination of higher resolution features from bottom layers, as demonstrated in Figure. 2(b). This bottomup, top-down processing is repeated for several times to
build a “stacked hourglass” network, with intermediate supervision at the end of each stack.
In , residual unit is used as the building block of
the hourglass network. However, it can only capture visual
patterns or semantics at one scale. In this work, we use the
proposed pyramid residual module as the building block for
capturing multi-scale visual patterns or semantics.
3.2. Pyramid Residual Modules (PRMs)
The objective is to learn feature pyramids across different levels of DCNNs. It allows the network to capture feature pyramids from primitive visual patterns to high-level
semantics. Motivated by recent progress on residual learning , we propose a novel Pyramid Residual Module
(PRM), which is able to learn multi-scale feature pyramids.
The PRM explicitly learns ﬁlters for input features with
different resolutions. Let x(l) and W(l) be the input and
the ﬁlter of the l-th layer, respectively. The PRM can be
formulated as,
x(l+1) = x(l) + P(x(l); W(l)),
where P(x(l); W(l)) is feature pyramids decomposed as:
P(x(l); W(l)) = g
fc(x(l); w(l)
fc ); w(l)
+ f0(x(l); w(l)
The C in (2) denotes the number of pyramid levels, fc(·) is
the transformation for the c-th pyramid level, and W(l) =
c=0 is the set of parameters. Outputs of transformations fc(·) are summed up together, and further convolved by ﬁlters g(·). An illustration of the pyramid residual module is illustrated in Figure. 3. To reduce the computational and space complexity, each fc(·) is designed as a
bottleneck structure. For example, in Figure. 3, the feature
dimension is reduced by a 1 × 1 convolution, then new features are computed on a set of subsampled input features by
3 × 3 convolutions. Finally, all the new features are upsampled to the same dimension and are summed together.
Generation of input feature pyramids.
Max-pooling or
average-pooling are widely used in DCNNs to reduce the
resolution of feature maps, and to encode the translation invariance. But pooling reduces the resolution too fast and
coarse by a factor of an integer of at least two, which is
unable to generate pyramids gently. In order to obtain input feature maps of different resolutions, we adopt the fractional max-pooling to approximate the smoothing and
subsampling process used in generating traditional image
BN-ReLU-3x3Conv
3x3 Dilated Conv
Downsampling
Upsampling
BN-ReLU-1x1Conv
= ConcatenaƟon
Figure 3. Structures of PRMs. Dashed links indicate identity mapping. (a) PRM-A produces separate input feature maps for different
levels of pyramids, while (b) PRM-B uses shared input for all levels of pyramids. PRM-C use concatenation instead of addition to combine
features generated from pyramids, which is similar to inception models. (c) PRM-D use dilated convolutions, which are also used in
ASPP-net , instead of pooling to build the pyramid. The dashed trapezoids mean that the subsampling and upsampling are skipped.
pyramids. The subsampling ratio of the cth level pyramid is
computed as:
sc = 2−M c
c = 0, · · · , C, M ≥1,
where sc ∈[2−M, 1] denotes the relative resolution compared with the input features. For example, when c = 0,
the output has the same resolution as its input.
M = 1, c = C, the map has half resolution of its input.
In experiments, we set M = 1 and C = 4, with which the
lowest scale in pyramid is half the resolution of its input.
3.3. Discussions
PRM for general CNNs.
Our PRM is a general module
and can be used as the basic building block for various CNN
architectures, e.g., stacked hourglass networks for pose
estimation, and Wide Residual Nets and ResNeXt 
for image classiﬁcation, as demonstrated in experiments.
Variants in pyramid structure.
Besides using fractional max-pooling, convolution and upsampling to learn
feature pyramids, as illustrated in Figure. 3(a-b), one can
also use dilated convolution to compute pyramids, as
shown in Figure. 3(c)(PRM-D). The summation of features
in pyramid can also replaced by concatenation, as shown in
Figure. 3(b)(PRM-C). We discuss the performance of these
variants in experiments, and show that the design in Figure. 3(b)(PRM-B) has comparable performance with others, while maintains relatively fewer parameters and smaller
computational complexity.
Weight sharing.
To generate the feature pyramids, traditional methods usually apply a same handcrafted ﬁlter, e.g.,
HOG, on different levels of image pyramids . This
process corresponds to sharing the weights W(l)
fc across different levels of pyramid fc(·), which is able to greatly reduce the number of parameters.
Complexity. The residual unit used in has 256-d input
and output, which are reduced to 128-d within the residual
unit. We adopt this structure for the branch with original
scale (i.e., f0 in Eq.(2)). Since features with smaller resolution contain relatively fewer information, we use fewer
feature channels for branches with smaller scales. For example, given a PRM with ﬁve branches and 28 feature channels for branches with smaller scale (i.e., f1 to f4 in Eq.(2)),
the increased complexity is about only 10% compared with
residual unit in terms of both parameters and GFLOPs.
4. Training and Inference
We use score maps to represent the body joint locations.
Denote the ground-truth locations by z = {zk}K
k=1, where
zk = (xk, yk) denotes the location of the kth body joint in
the image. Then the ground-truth score map Sk is generated
from a Gaussian with mean zk and variance Σ as follows,
Sk(p) ∼N(zk, Σ),
where p ∈R2 denotes the location, and Σ is empirically set
as an identity matrix I. Each stack of hourglass network predicts K score maps, i.e. ˆS = {ˆSk}K
k=1, for K body joints.
A loss is attached at the end of each stack deﬁned by the
squared error
∥Sk −ˆSk∥2,
where N is the number of samples.
During inference, we obtain the predicted body joint locations ˆzk from the predicted score maps generated from
the last stack of hourglass by taking the locations with the
maximum score as follows:
ˆzk = arg max
k = 1, · · · , K.
4.1. Initialization Multi-Branch Networks
Initialization is essential to train very deep networks , especially for tasks of dense prediction, where
Batch Normalization is less effective because of the
small minibatch due to the large memory consumption of
fully convolutional networks. Existing weight initialization
methods are designed upon the assumption of
a plain networks without branches. The proposed PRM has
multiple branches, and does not meet the assumption. Recent developed architectures with multiple branches, e.g.,
Inception models and ResNets , are
not plain network either. Hence we discuss how to derive a
proper initialization for networks adding multiple branches.
Our derivation mainly follows .
Forward propagation. Generally, multi-branch networks
can be characterized by the number of input and output
branches. Figure. 4 (a) shows an example where the lth
layer has C(l)
input branches and one output branch. Figure. 4 (b) shows an example where the lth layer has one input branch and C(l)
output branches. During forward propagation, C(l)
affects the variance for the output of the lth
layer while C(l)
does not. At the lth layer, assume there
input branches and C(l)
output branches. There
input vectors {x(l)
c |c = 1, . . . , C(l)
i }. Take fullyconnected layer for example, a response is computed as:
y(l) = W(l)
x(l+1) = f
where f(·) is the non-linear activation function.
As in , we assume that W(l) and x(l) are both
independent and identically distributed (i.i.d.), and they are
independent of each other. Therefore, we respectively denote y(l), x(l) and w(l) as the element in y(l), x(l) and W(l).
Then we have,
where n(l)
is the number of elements in x(l)
1, . . . , C(l)
i . Suppose w(l) has zero mean. The variance for
the product of independent variables above is as follows:
Figure 4. Examples of multi-branch networks when (a) the inputs
might be an addition of multiple branches, or (b) the output might
be forwarded to multiple branches.
where α depends on the activation function f in (8). α =
0.5 for ReLU and α = 1 for Tanh and Sigmoid. In order
to make the variances of the output y(l) approximately the
same for different layers l, the following condition should
be satisﬁed:
Hence in initialization, a proper variance for W (l) should be
Backward propagation. Denote
∂y(l) by ∆x(l)
and ∆y(l) respectively. During backward propagation, the
gradient is computed by chain rule,
W(l)T ∆y(l),
∆y(l) = f ′(y(l))∆x(l+1).
Suppose w(l) and ∆y(l) are i.i.d. and independent of each
other, then ∆x(l) has zero mean when w(l) is initialized
with zero mean and symmetric with small magnitude. Let
o denote the number of output neurons. Then we have,
o Var[w(l)] Var[∆y(l)].
Denote E(f ′(y(l))) = α. α = 0.5 for ReLU and α = 1
for Tanh and Sigmoid. We further assume that f ′(y(l)) and
∆x(l) are independent of each other, then from Eq. (12),
. Then we can derive
that Var[∆y(l)] = E[(∆y(l))2] = α Var[x(l+1)]. Therefore,
from Eq.(13) we have,
o Var[w(l)] Var[∆x(l+1)]..
To ensure Var[∆x(l)] = Var[∆x(l+1)], we must have
Var[w(l)] = 1/(αC(l)
In many cases, C(l)
o . As in , a compromise between the forward and backward constraints is to
Var[w(l)] =
Standard deviaƟon
Residual Units
Variance AccumulaƟon with
IdenƟty Mapping
downsampling
Response variances accumulate in ResNets. This accumulation can be reset (blue bar) when the identity mappings
are replaced by convolution or batch normalization (i.e., when the
feature channels of feature resolutions changes between input and
output features).
Special case. For plain networks with one input and one
output branch, we have C(l)
= 1 in (15). In this
case, the result in (15) degenerates to the conclusions obtained for Tanh and Sigmoid in and the conclusion
in for ReLU.
General case. In general, a network with branches would
1 for some ls.
Therefore, the number of input branches and output branches
should be taken into consideration when initializing parameters.
Speciﬁcally, if several multi-branch layers are
stacked together without other operations (e.g., batch normalization,convolution, ReLU, etc.), the output variance
would be increased approximately Q
times by using
Xavier or MSR initialization.
4.2. Output Variance Accumulation
Residual learning allows us to train extremely
deep neural networks due to identity mappings. But it is
also the source of its drawbacks: identity mapping keeps increasing the variances of responses when the network goes
deeper, which increases the difﬁculty of optimization.
The response of the residual unit is computed as follows:
x(l+1) = x(l) + F
x(l); W(l)
where F denotes the residual function, e.g., a bottleneck
structure with three convolutions (1 × 1 →3 × 3 →1 × 1).
Assume x(l) and F
 x(l); W(l)
are uncorrelated, then the
variance of the response of residual unit is as
x(l+1); W(l)i
 x(l+1); W(l)
is positive.
9 10 11 12 13 14 15 16
Standard deviaƟon
Residual Units
Original HG
Ours (variance control)
Figure 6. Top: (a) Addition of outputs of two identity mappings.
(b) One identity mapping is replaced by a BN-ReLU-Conv block.
Bottom: Statistics of response variances of the original hourglass
network (yellow bar) and our structure (b) (red bar).
In , the identity mapping will be replaced by
convolution layer when the resolution of feature maps is reduced, or when the dimension of feature channels are increased. This allows the networks to reset the variance of
response to a small value, and avoid responses with very
large variance, as shown in Figure. 5. The effect of increasing variance becomes more obvious in hourglass-like structures, where the responses of two residual units are summed
together, as illustrated in Figure. 6(a). Assume branches are
uncorrelated, then the variance will be increased as:
Hence the output variance is almost doubled. When the
network goes deeper, the variance will increase drastically.
In this paper, we use a 1 × 1 convolution preceding with
batch normalization and ReLU to replace the identity mapping when the output of two residual units are summed up,
as illustrated in Figure. 6(b). This simple replacement stops
the variance explosion, as demonstrated in Figure. 6(c). In
experiments, we ﬁnd that breaking the variance explosion
also provide a better performance (Section 5.1.3).
5. Experiments
5.1. Experiments on Human Pose Estimation
We conduct experiments on two widely used human
pose estimation benchmarks.
(i) The MPII human pose
dataset , which covers a wide range of human activities
with 25k images containing over 40k people. (ii) The Leeds
Sports Poses (LSP) and its extended training dataset,
which contains 12k images with challenging poses in sports.
Table 1. Comparisons of score on the MPII test set.
Ours-A is trained using the training set used in . Ours-B is
trained with the same settings but using all the MPII training set.
Head Sho. Elb.
Knee Ank. Mean
Pishchulin et al. 
Tompson et al. 
Carreira et al. 
Tompson et al. 
Hu&Ramanan 
Pishchulin et al. 
Lifshitz et al. 
Gkioxary et al. 
Raﬁet al. 
Insafutdinov et al. 
Wei et al. 
Bulat&Tzimiropoulos 97.9
Newell et al. 
Table 2. Comparisons of score on the LSP dataset.
Head Sho. Elb.
Knee Ank. Mean
Belagiannis&Zisserman 95.2
Lifshitz et al. 
Pishchulin et al. 
Insafutdinov et al. 
Wei et al. 
Bulat&Tzimiropoulos 
Implementation Details
Our implementation follows .
The input image is
256 × 256 cropped from a resized image according to the
annotated body position and scale. For the LSP test set, we
simply use the image center as the body position, and estimate the body scale by the image size. Training data are
augmented by scaling, rotation, ﬂipping, and adding color
noise. All the models are trained using Torch . We use
RMSProp to optimize the network on 4 Titan X GPUs
with a mini-batch size of 16 (4 per GPU) for 200 epochs.
The learning rate is initialized as 7 × 10−4 and is dropped
by 10 at the 150th and the 170th epoch. Testing is conducted
on six-scale image pyramids with ﬂipping.
Experimental Results
Evaluation measure. Following previous work, we use the
Percentage Correct Keypoints (PCK) measure on the
LSP dataset, and use the modiﬁed PCK measure that uses
the matching threshold as 50% of the head segment length
(PCKh) on the MPII dataset.
MPII Human Pose. We report the performance on MPII
dataset in Table 1. Ours-A is trained using the training and
validation set used in . Ours-B is trained with the same
settings but using all the MPII training set. Our approach
achieves 92.0% PCKh score at threshold of 0.5, which is
the new state-of-the-art result.
Speciﬁcally, our method
achieves 1.6% and 2.4% improvements on wrist and ankle,
Figure 7. Results on the MPII (top) and the LSP dataset (bottom).
(a) Accuracy
(c) Complexity
# Params (Million)
(b) Parameters
Figure 8. Statistics of (a) accuracy, (b) number of parameters, and
(c) computational complexity in terms of GFLOPs on different designs of PRMs in Figure. 3.
which are considered as the most challenging parts to be
detected. Qualitative results are demonstrated in Figure. 7.
Complexity. Our model increases the number of parameters by 13.5% from 23.7M to 26.9M given an eight-stack
hourglass network. Our model needs 45.9 GFLOPs for a
256×256 RGB image, which is a 11.4% increase compared
to hourglass network (41.2 GFLOPs). As reported in ,
deeper hourglass with more stacks hardly improves result.
LSP dataset. Table 2 presents the PCK scores at the threshold of 0.2. We follow previous methods to train
our model by adding MPII training set to the LSP and its
extended training set. Our method improves the previous
best result with a large margin by 3.2%. For difﬁcult body
parts, e.g., wrist and ankle, we have 3.7% and 5.0% improvements, respectively. Our method gains a lot due to the
high occurrence of foreshortening and extreme poses presented in this dataset, as demonstrated in Figure. 7.
Ablation Study
We conduct ablation study on the MPII validation set used
in with a 2-stack hourglass network as the basic model.
Architectures of PRM. We ﬁrst evaluate different designs
of PRM, as discussed in Section 3.2, with the same number
of branches, and the same feature channels for each branch
(e.g., 5 branches with 28 feature channels for each pyramidal branch). We use PRM-A to PRM-D, which corresponds
to Figure. 3, to denote the different architectures. Speciﬁcally, PRM-A produces separate input feature maps for different levels of pyramids, while PRM-B uses shared feature
maps for all levels of pyramids. PRM-C uses concatenation instead of addition to combine features generated from
pyramid, which is similar to inception models. PRM-D uses
dilated convolutions, which are also used in ASPP-net ,
instead of pooling to build the pyramid. The validation ac-
Validation
Validation
Initialization
Figure 9. Training and validation curves of PCKh scores vs. epoch
on the MPII validation set. (a-b) Investigate the number of scales
in the pyramid. BL stands for baseline model (two-stack hourglass network), S2 to S8 indicate PRM-B* with four scales to eight
scales. (c-d) Comparison of our initialization scheme with Xavier
method and MSR method .
curacy is reported in Figure. 8(a). All the PRMs have better
accuracy compared with the baseline model. We observe
that the difference in accuracy between PRM-A to PRM-D
is subtle, while the parameters of PRM-A/C are higher than
PRM-B/B*/D (Figure. 8(b)), and the computational complexity (GFLOPs) of PRM-A/C/D are higher than PRM-
B/B*. Therefore, we use PRM-B* in the rest of the experiments. Noted that increasing the number of channels to
make the baseline model has the similar model size as ours
(Wide BS) would slightly improve the performance. But it
is still worse than ours.
Scales of pyramids. To evaluate the trade-off between the
scales of pyramids C, we vary the scales from 3 to 5, and
ﬁx the model size by tuning the feature channels in each
scale. We observe that increasing scales generally improves
the performance, as shown in Figure. 9(a-b).
Weight initialization. We compare the performance of our
initialization scheme with Xavier and MSR methods.
The training and validation curves of accuracy vs.
epoch are reported in Figure 9(c-d). It can be seen that the
proposed initialization scheme achieves better performance
than both methods.
Controlling variance explosion. Controlling variance explosion, as discussed in Section 4.2, obtains higher validation score (88.0) compared with the baseline model (87.6).
With our pyramid residual module, the performance could
be further improved to 88.5 PCKh score.
Table 3. Top-1 test error (%), model size (million) and GFLOPs
on CIFAR-10. WRN-28-10 denote the Wide ResNet with depth 29
and widen factor 10. ResNeXt-29, m × nd denote ResNeXt with
depth 29, cardinality m and base width n.
WRN-28-10 
Ours-28-10
ResNeXt-29, 8 × 64d 
ResNeXt-29, 16 × 64d 
Ours-29, 8 × 64d
Ours-29, 16 × 64d
5.2. Experiments on CIFAR-10 Image Classiﬁcation
The CIFAR-10 dataset consists of 50k training images and 10k test images with size 32 × 32 drawn from
10 classes.
We follow previous works for data preparation and augmentation. We incorporate the proposed pyramid branches into two state-of-the-art network architectures, i.e., Wide residual networks and ResNeXt .
We add four pyramid branches with scales ranging from
0.5 to 1 into the building block of both Wide ResNet and
ResNeXt. For Wide ResNet, the total width of all pyramid
branches is equal to the width of the output of each residual
module. For ResNeXt, we simply use the same width as its
original branches for our pyramid branches. Table 3 shows
the top-1 test error, model sizes and GFLOPs. Our method
with similar or less model size (Ours-28-9 vs. WRN-28-10
and Ours-29, 8 × 64d vs. ResNeXt-29, 16 × 64d) achieve
better results. A larger model with our pyramid module
(Ours-29, 16 × 64d ) achieves 3.30% test error, which is
the state-of-the-art result on CIFAR-10.
6. Conclusion
This paper has proposed a Pyramid Residual Module to
enhance the invariance in scales of the DCNNs. We also
provide a derivation of the initialization scheme for multibranch networks, and demonstrate its theoretical soundness
and efﬁciency through experimental analysis. Additionally,
a simple yet effective method to prevent the variances of
response from explosion when adding outputs of multiple
identity mappings has been proposed. Our PRMs and the
initialization scheme for multi-branch networks are general,
and would help other tasks.
Acknowledgment: This work is supported by SenseTime
Group Limited, the General Research Fund sponsored by
the Research Grants Council of Hong Kong (Project Nos.
CUHK14213616,
CUHK14206114,
CUHK14205615,
CUHK419412, CUHK14203015, CUHK14207814, and
CUHK14239816), the Hong Kong Innovation and Technology Support Programme (No.ITS/121/15FX), National
Natural Science Foundation of China (No. 61371192), and
ONR N00014-15-1-2356.