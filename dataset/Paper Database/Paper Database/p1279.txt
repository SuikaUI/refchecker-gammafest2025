3D ShapeNets: A Deep Representation for Volumetric Shapes
Zhirong Wu†⋆
Shuran Song†
Aditya Khosla‡
Fisher Yu†
Linguang Zhang†
Xiaoou Tang⋆
Jianxiong Xiao†
†Princeton University
⋆Chinese University of Hong Kong
‡Massachusetts Institute of Technology
3D shape is a crucial but heavily underutilized cue in today’s computer vision systems, mostly due to the lack of a
good generic shape representation. With the recent availability of inexpensive 2.5D depth sensors (e.g. Microsoft
Kinect), it is becoming increasingly important to have a
powerful 3D shape representation in the loop. Apart from
category recognition, recovering full 3D shapes from viewbased 2.5D depth maps is also a critical part of visual understanding. To this end, we propose to represent a geometric 3D shape as a probability distribution of binary variables on a 3D voxel grid, using a Convolutional Deep Belief
Network. Our model, 3D ShapeNets, learns the distribution
of complex 3D shapes across different object categories and
arbitrary poses from raw CAD data, and discovers hierarchical compositional part representations automatically. It
naturally supports joint object recognition and shape completion from 2.5D depth maps, and it enables active object
recognition through view planning. To train our 3D deep
learning model, we construct ModelNet – a large-scale 3D
CAD model dataset. Extensive experiments show that our
3D deep representation enables signiﬁcant performance improvement over the-state-of-the-arts in a variety of tasks.
1. Introduction
Since the establishment of computer vision as a ﬁeld ﬁve
decades ago, 3D geometric shape has been considered to
be one of the most important cues in object recognition.
Even though there are many theories about 3D representation (e.g. ), the success of 3D-based methods has
largely been limited to instance recognition (e.g. modelbased keypoint matching to nearest neighbors ). For
object category recognition, 3D shape is not used in any
state-of-the-art recognition methods (e.g. ), mostly
due to the lack of a good generic representation for 3D geometric shapes. Furthermore, the recent availability of inexpensive 2.5D depth sensors, such as the Microsoft Kinect,
†This work was done when Zhirong Wu was a VSRC visiting student
at Princeton University.
Input Depth Map
(back of a sofa)
Volumetric
Representation
Next-Best-View
Recognition
Shape Completion
3D ShapeNets
 
Figure 1: Usages of 3D ShapeNets. Given a depth map
of an object, we convert it into a volumetric representation
and identify the observed surface, free space and occluded
space. 3D ShapeNets can recognize object category, complete full 3D shape, and predict the next best view if the initial recognition is uncertain. Finally, 3D ShapeNets can integrate new views to recognize object jointly with all views.
Intel RealSense, Google Project Tango, and Apple Prime-
Sense, has led to a renewed interest in 2.5D object recognition from depth maps (e.g. Sliding Shapes ). Because
the depth from these sensors is very reliable, 3D shape can
play a more important role in a recognition pipeline. As
a result, it is becoming increasingly important to have a
strong 3D shape representation in modern computer vision
Apart from category recognition, another natural and
challenging task for recognition is shape completion: given
a 2.5D depth map of an object from one view, what are the
possible 3D structures behind it? For example, humans do
not need to see the legs of a table to know that they are there
and potentially what they might look like behind the visible
surface. Similarly, even though we may see a coffee mug
from its side, we know that it would have empty space in
the middle, and a handle on the side.
In this paper, we study generic shape representation for
 
object label 10
3D voxel input
48 filters of
160 filters of
512 filters of
(a) Architecture of our 3D ShapeNets
model. For illustration purpose, we
only draw one ﬁlter for each convolutional layer.
(b) Data-driven visualization: For each neuron, we average the top 100 training examples with
highest responses (>0.99) and crop the volume inside the receptive ﬁeld. The averaged result is
visualized by transparency in 3D (Gray) and by the average surface obtained from zero-crossing
(Red). 3D ShapeNets are able to capture complex structures in 3D space, from low-level surfaces
and corners at L1, to objects parts at L2 and L3, and whole objects at L4 and above.
Figure 2: 3D ShapeNets. Architecture and ﬁlter visualizations from different layers.
both object category recognition and shape completion.
While there has been signiﬁcant progress on shape synthesis and recovery , they are mostly limited
to part-based assembly and heavily rely on expensive part
annotations. Instead of hand-coding shapes by parts, we
desire a data-driven way to learn the complex shape distributions from raw 3D data across object categories and
poses, and automatically discover a hierarchical compositional part representation. As shown in Figure 1, this would
allow us to infer the full 3D volume from a depth map without the knowledge of object category and pose a priori. Beyond the ability to jointly hallucinate missing structures and
predict categories, we also desire the ability to compute
the potential information gain for recognition with regard
to missing parts. This would allow an active recognition
system to choose an optimal subsequent view for observation, when the category recognition from the ﬁrst view is
not sufﬁciently conﬁdent.
To this end, we propose 3D ShapeNets to represent a geometric 3D shape as a probabilistic distribution of binary
variables on a 3D voxel grid. Our model uses a powerful Convolutional Deep Belief Network (Figure 2) to learn
the complex joint distribution of all 3D voxels in a datadriven manner. To train this 3D deep learning model, we
construct ModelNet, a large-scale object dataset of 3D computer graphics CAD models. We demonstrate the strength
of our model at capturing complex object shapes by drawing samples from the model. We show that our model can
recognize objects in single-view 2.5D depth images and hallucinate the missing parts of depth maps. Extensive experiments suggest that our model also generalizes well to real
world data from the NYU depth dataset , signiﬁcantly
outperforming existing approaches on single-view 2.5D object recognition. Further it is also effective for next-bestview prediction in view planning for active object recognition .
2. Related Work
There has been a large body of insightful research
on analyzing 3D CAD model collections.
Most of the
works use an assembly-based approach to build
deformable part-based models. These methods are limited
to a speciﬁc class of shapes with small variations, with
surface correspondence being one of the key problems in
such approaches. Since we are interested in shapes across
a variety of objects with large variations and part annotation is tedious and expensive, assembly-based modeling can
be rather cumbersome. For surface reconstruction of corfree space
observed surface
observed points
completed surface
It is a chair!
(1) object
(2) depth & point cloud
(3) volumetric representation
(4) recognition & completion
Figure 3: View-based 2.5D Object Recognition. (1) Illustrates that a depth map is taken from a physical object in the 3D
world. (2) Shows the depth image captured from the back of the chair. A slice is used for visualization. (3) Shows the proﬁle
of the slice and different types of voxels. The surface voxels of the chair xo are in red, and the occluded voxels xu are in
blue. (4) Shows the recognition and shape completion result, conditioned on the observed free space and surface.
rupted scanning input, most related works are largely
based on smooth interpolation or extrapolation. These approaches can only tackle small missing holes or deﬁciencies. Template-based methods are able to deal with
large space corruption but are mostly limited by the quality of available templates and often do not provide different
semantic interpretations of reconstructions.
The great generative power of deep learning models has
allowed researchers to build deep generative models for 2D
shapes: most notably the DBN to generate handwritten digits and ShapeBM to generate horses, etc. These
models are able to effectively capture intra-class variations.
We also desire this generative ability for shape reconstruction but we focus on more complex real world object shapes
in 3D. For 2.5D deep learning, and build discriminative convolutional neural nets to model images and depth
maps. Although their algorithms are applied to depth maps,
they use depth as an extra 2D channel instead of modeling
full 3D. Unlike , our model learns a shape distribution
over a voxel grid. To the best of our knowledge, we are
the ﬁrst work to build 3D deep learning models. To deal
with the dimensionality of high resolution voxels, inspired
by 1, we apply the same convolution technique in our
Unlike static object recognition in a single image, the
sensor in active object recognition can move to new view
points to gain more information about the object. Therefore,
the Next-Best-View problem of doing view planning
based on current observation arises. Most previous works
in active object recognition build their view planning strategy using 2D color information.
However this
multi-view problem is intrinsically 3D in nature. Atanasov
et al, implement the idea in real world robots, but they
assume that there is only one object associated with each
class reducing their problem to instance-level recognition
with no intra-class variance. Similar to , we use mutual
information to decide the NBV. However, we consider this
1The model is precisely a convolutional DBM where all the connections
are undirected, while ours is a convolutional DBN.
problem at the precise voxel level allowing us to infer how
voxels in a 3D region would contribute to the reduction of
recognition uncertainty.
3. 3D ShapeNets
To study 3D shape representation, we propose to represent a geometric 3D shape as a probability distribution of
binary variables on a 3D voxel grid. Each 3D mesh is represented as a binary tensor: 1 indicates the voxel is inside the
mesh surface, and 0 indicates the voxel is outside the mesh
(i.e., it is empty space). The grid size in our experiments is
30 × 30 × 30.
To represent the probability distribution of these binary
variables for 3D shapes, we design a Convolutional Deep
Belief Network (CDBN). Deep Belief Networks (DBN)
 are a powerful class of probabilistic models often used
to model the joint probabilistic distribution over pixels and
labels in 2D images. Here, we adapt the model from 2D
pixel data to 3D voxel data, which imposes some unique
challenges. A 3D voxel volume with reasonable resolution
(say 30 × 30 × 30) would have the same dimensions as a
high-resolution image (165×165). A fully connected DBN
on such an image would result in a huge number of parameters making the model intractable to train effectively.
Therefore, we propose to use convolution to reduce model
parameters by weight sharing. However, different from typical convolutional deep learning models (e.g. ), we do
not use any form of pooling in the hidden layers – while
pooling may enhance the invariance properties for recognition, in our case, it would also lead to greater uncertainty
for shape reconstruction.
The energy, E, of a convolutional layer in our model can
be computed as:
E(v, h) = −
where vl denotes each visible unit, hf
j denotes each hidden
unit in a feature channel f, and W f denotes the convoluthree different next-view candidates
3 possible shapes
predicted new freespace & visible surface
observed surface
potentially visible voxels in next view
newly visible surface
free space
original surface
Figure 4: Next-Best-View Prediction. [Row 1, Col 1]: the
observed (red) and unknown (blue) voxels from a single
view. [Row 2-4, Col 1]: three possible completion samples generated by conditioning on (xo, xu). [Row 1, Col 2-
4]: three possible camera positions Vi, front top, left-sided,
tilted bottom, front, top. [Row 2-4, Col 2-4]: predict the
new visibility pattern of the object given the possible shape
and camera position Vi.
tional ﬁlter. The “∗” sign represents the convolution operation. In this energy deﬁnition, each visible unit vl is associated with a unique bias term bl to facilitate reconstruction,
and all hidden units {hf
j } in the same convolution channel
share the same bias term cf. Similar to , we also allow
for a convolution stride.
A 3D shape is represented as a 24 × 24 × 24 voxel grid
with 3 extra cells of padding in both directions to reduce
the convolution border artifacts. The labels are presented as
standard one of K softmax variables. The ﬁnal architecture
of our model is illustrated in Figure 2(a). The ﬁrst layer has
48 ﬁlters of size 6 and stride 2; the second layer has 160
ﬁlters of size 5 and stride 2 (i.e., each ﬁlter has 48×5×5×5
parameters); the third layer has 512 ﬁlters of size 4; each
convolution ﬁlter is connected to all the feature channels in
the previous layer; the fourth layer is a standard fully connected RBM with 1200 hidden units; and the ﬁfth and ﬁnal
layer with 4000 hidden units takes as input a combination of
multinomial label variables and Bernoulli feature variables.
The top layer forms an associative memory DBN as indicated by the bi-directional arrows, while all the other layer
connections are directed top-down.
We ﬁrst pre-train the model in a layer-wise fashion followed by a generative ﬁne-tuning procedure. During pretraining, the ﬁrst four layers are trained using standard
Contrastive Divergence , while the top layer is trained
more carefully using Fast Persistent Contrastive Divergence
(FPCD) . Once the lower layer is learned, the weights
are ﬁxed and the hidden activations are fed into the next
layer as input. Our ﬁne-tuning procedure is similar to wake
sleep algorithm except that we keep the weights tied.
In the wake phase, we propagate the data bottom-up and use
the activations to collect the positive learning signal. In the
sleep phase, we maintain a persistent chain on the topmost
layer and propagate the data top-down to collect the negative learning signal. This ﬁne-tuning procedure mimics the
recognition and generation behavior of the model and works
well in practice. We visualize some of the learned ﬁlters in
Figure 2(b).
During pre-training of the ﬁrst layer, we collect learning
signal only in receptive ﬁelds which are non-empty. Because of the nature of the data, empty spaces occupy a large
proportion of the whole volume, which have no information
for the RBM and would distract the learning. Our experiment shows that ignoring those learning signals during gradient computation results in our model learning more meaningful ﬁlters. In addition, for the ﬁrst layer, we also add
sparsity regularization to restrict the mean activation of the
hidden units to be a small constant (following the method
of ). During pre-training of the topmost RBM where
the joint distribution of labels and high-level abstractions
are learned, we duplicate the label units 10 times to increase
their signiﬁcance.
4. 2.5D Recognition and Reconstruction
4.1. View-based Sampling
After training the CDBN, the model learns the joint distribution p(x, y) of voxel data x and object category label
y ∈{1, · · · , K}. Although the model is trained on complete 3D shapes, it is able to recognize objects in singleview 2.5D depth maps (e.g., from RGB-D sensors).
shown in Figure 3, the 2.5D depth map is ﬁrst converted into
a volumetric representation where we categorize each voxel
as free space, surface or occluded, depending on whether
it is in front of, on, or behind the visible surface (i.e., the
depth value) from the depth map. The free space and surface voxels are considered to be observed, and the occluded
voxels are regarded as missing data. The test data is represented by x = (xo, xu), where xo refers to the observed
free space and surface voxels, while xu refers to the unknown voxels. Recognizing the object category involves
estimating p(y|xo).
We approximate the posterior distribution p(y|xo) by
Gibbs sampling.
The sampling procedure is as follows.
We ﬁrst initialize xu to a random value and propagate the
data x = (xo, xu) bottom up to sample for a label y from
p(y|xo, xu). Then the high level signal is propagated down
to sample for voxels x. We clamp the observed voxels xo in
Figure 5: ModelNet Dataset. Left: word cloud visualization of the ModelNet dataset based on the number of 3D models in
each category. Larger font size indicates more instances in the category. Right: Examples of 3D chair models.
this sample x and do another bottom up pass. 50 iterations
of up-down sampling are sufﬁcient to get a shape completion x, and its corresponding label y. The above procedure
is run in parallel for a large number of particles resulting in
a variety of completion results corresponding to potentially
different classes. The ﬁnal category label corresponds to the
most frequently sampled class.
4.2. Next-Best-View Prediction
Object recognition from a single-view can sometimes be
challenging, both for humans and computers. However, if
an observer is allowed to view the object from another view
point when recognition fails from the ﬁrst view point, we
may be able to signiﬁcantly reduce the recognition uncertainty. Given the current view, our model is able to predict
which next view would be optimal for discriminating the
object category.
The inputs to our next-best-view system are observed
voxels xo of an unknown object captured by a depth camera from a single view, and a ﬁnite list of next-view candidates {Vi} representing the camera rotation and translation
in 3D. An algorithm chooses the next-view from the list that
has the highest potential to reduce the recognition uncertainty. Note that during this view planning process, we do
not observe any new data, and hence there is no improvement on the conﬁdence of p(y|xo = xo).
The original recognition uncertainty, H, is given by the
entropy of y conditioned on the observed xo:
H = H (p(y|xo = xo))
p(y = k|xo = xo)log p(y = k|xo = xo)
where the conditional probability p(y|xo = xo) can be approximated as before by sampling from p(y, xu|xo = xo)
and marginalizing xu.
When the camera is moved to another view Vi, some of
the previously unobserved voxels xu may become observed
based on its actual shape. Different views Vi will result in
different visibility of these unobserved voxels xu. A view
with the potential to see distinctive parts of objects (e.g.
arms of chairs) may be a better next view. However, since
the actual shape is partially unknown2, we will hallucinate
that region from our model. As shown in Figure 4, conditioning on xo = xo, we can sample many shapes to generate hypotheses of the actual shape, and then render each
hypothesis to obtain the depth maps observed from different views, Vi. In this way, we can simulate the new depth
maps for different views on different samples and compute
the potential reduction in recognition uncertainty.
Mathematically, let xi
n = Render(xu, xo, Vi) \ xo denote the new observed voxels (both free space and surface)
in the next view Vi. We have xi
n ⊆xu, and they are unknown variables that will be marginalized in the following
equation. Then the potential recognition uncertainty for Vi
is measured by this conditional entropy,
n, xo = xo)
n|xo = xo)H(y|xi
n, xo = xo).
The above conditional entropy could be calculated by ﬁrst
sampling enough xu from p(xu|xo = xo), doing the 3D
rendering to obtain 2.5D depth map in order to get xi
from xu, and then taking each xi
n to calculate H(y|xi
n, xo = xo) as before.
According to information theory, the reduction of entropy H −Hi = I(y; xi
n|xo = xo) ≥0 is the mutual information between y and xi
n conditioned on xo. This meets
our intuition that observing more data will always potentially reduce the uncertainty. With this deﬁnition, our view
planning algorithm is to simply choose the view that maximizes this mutual information,
V∗= arg maxViI(y; xi
n|xo = xo).
Our view planning scheme can naturally be extended to
a sequence of view planning steps. After deciding the best
2If the 3D shape is fully observed, adding more views will not help to
reduce the recognition uncertainty in any algorithm purely based on 3D
shapes, including our 3D ShapeNets.
nightstand
Figure 6: Shape Sampling. Example shapes generated by
sampling our 3D ShapeNets for some categories.
candidate to move for the ﬁrst frame, we physically move
the camera there and capture the other object surface from
that view. The object surfaces from all previous views are
merged together as our new observation xo, allowing us to
run our view planning scheme again.
5. ModelNet: A Large-scale 3D CAD Dataset
Training a deep 3D shape representation that captures
intra-class variance requires a large collection of 3D shapes.
Previous CAD datasets (e.g., ) are limited both in the
variety of categories and the number of examples per category. Therefore, we construct ModelNet, a large-scale 3D
CAD model dataset.
To construct ModelNet, we downloaded 3D CAD models from 3D Warehouse, and Yobi3D search engine indexing 261 CAD model websites. We query common object
categories from the SUN database that contain no less
than 20 object instances per category, removing those with
too few search results, resulting in a total of 660 categories.
We also include models from the Princeton Shape Benchmark . After downloading, we remove mis-categorized
models using Amazon Mechanical Turk. Turkers are shown
a sequence of thumbnails of the models and answer “Yes”
or “No” as to whether the category label matches the model.
The authors then manually checked each 3D model and removed irrelevant objects from each CAD model (e.g, ﬂoor,
thumbnail image, person standing next to the object, etc) so
10 classes
classiﬁcation
retrieval AUC
retrieval MAP
40 classes
classiﬁcation
retrieval AUC
retrieval MAP
Table 1: Shape Classiﬁcation and Retrieval Results.
that each mesh model contains only one object belonging to
the labeled category. We also discarded unrealistic (overly
simpliﬁed models or those only containing images of the
object) and duplicate models.
Compared to , which
consists of 6670 models in 161 categories, our new dataset
is 22 times larger containing 151,128 3D CAD models belonging to 660 unique object categories. Examples of major
categories and dataset statistics are shown in Figure 5.
6. Experiments
We choose 40 common object categories from ModelNet
with 100 unique CAD models per category. We then augment the data by rotating each model every 30 degrees along
the gravity direction (i.e., 12 poses per model) resulting in
models in arbitrary poses. Pre-training and ﬁne-tuning each
took about two days on a desktop with one Intel XEON E5-
2690 CPU and one NVIDIA K40c GPU. Figure 6 shows
some shapes sampled from our trained model.
6.1. 3D Shape Classiﬁcation and Retrieval
Deep learning has been widely used as a feature extraction technique. Here, we are also interested in how well
the features learned from 3D ShapeNets compare with other
state-of-the-art 3D mesh features. We discriminatively ﬁnetune 3D ShapeNets by replacing the top layer with class
labels and use the 5th layer as features. For comparison, we
choose Light Field descriptor (LFD, 4,700 dimensions)
and Spherical Harmonic descriptor (SPH, 544 dimensions), which performed best among all descriptors .
We conduct 3D classiﬁcation and retrieval experiments
to evaluate our features. Of the 48,000 CAD models (with
rotation enlargement), 38,400 are used for training and
9,600 for testing.
We also report a smaller scale result
on a 10-category subset (corresponding to NYU RGB-D
dataset ) of the 40-category data. For classiﬁcation, we
train a linear SVM to classify meshes using each of the features mentioned above, and use average category accuracy
to evaluate the performance.
For retrieval, we use L2 distance to measure the similarity of the shapes between each pair of testing samples.
Given a query from the test set, a ranked list of the remaining test data is returned according to the similarity mea-
10 Classes Results
Spherical Harmonic
Light Field
Our 5th layer finetuned
40 Classes Results
Spherical Harmonic
Light Field
Our 5th layer finetuned
Figure 7: 3D Mesh Retrieval. Precision-recall curves at
standard recall levels.
sure3. We evaluate retrieval algorithms using two metrics:
(1) mean area under precision-recall curve (AUC) for all the
testing queries4; (2) mean average precision (MAP) where
AP is deﬁned as the average precision each time a positive
sample is returned.
We summarize the results in Table 1 and Figure 7. Since
both of the baseline mesh features (LFD and SPH) are rotation invariant, from the performance we have achieved,
we believe 3D ShapeNets must have learned this invariance
during feature learning. Despite using a signiﬁcantly lower
resolution mesh as compared to the baseline descriptors,
3D ShapeNets outperforms them by a large margin. This
demonstrates that our 3D deep learning model can learn better features from 3D data automatically.
6.2. View-based 2.5D Recognition
To evaluate 3D ShapeNets for 2.5D depth-based object
recognition task, we set up an experiment on the NYU
RGB-D dataset with Kinect depth maps . We select
10 object categories from ModelNet that overlap with the
NYU dataset. This results in 4,899 unique CAD models for
training 3D ShapeNets.
We create each testing example by cropping the 3D point
cloud from the 3D bounding boxes. The segmentation mask
is used to remove outlier depth in the bounding box. Then
we directly apply our model trained on CAD models to the
NYU dataset.
This is absolutely non-trivial because the
statistics of real world depth are signiﬁcantly different from
the synthetic CAD models used for training. In Figure 9, we
visualize the successful recognitions and reconstructions.
Note that 3D ShapeNets is even able to partially reconstruct
the “monitor” despite the bad scanning caused by the reﬂection problem. To further boost recognition performance, we
discriminatively ﬁne-tune our model on the NYU dataset
using back propagation. By simply assigning invisible voxels as 0 (i.e. considering occluded voxels as free space and
only representing the shape as the voxels on the 3D surface)
3For our feature and SPH we use the L2 norm, and for LFD we use the
distance measure from .
4We interpolate each precision-recall curve.
3D ShapeNets Completion Result
Figure 8: Shape Completion. From left to right: input
depth map from a single view, ground truth shape, shape
completion result (4 cols), nearest neighbor result (1 col).
and rotating training examples every 30 degrees, ﬁne-tuning
works reasonably well in practice.
As a baseline approach, we use k-nearest-neighbor
matching in our low resolution voxel space. Testing depth
maps are converted to voxel representation and compared
with each of the training samples. As a more sophisticated
high resolution baseline, we match the testing point cloud
to each of our 3D mesh models using Iterated Closest Point
method and use the top 10 matches to vote for the labels.
We also compare our result with which is the stateof-the-art deep learning model applied to RGB-D data. To
train and test their model, 2D bounding boxes are obtained
by projecting the 3D bounding box to the image plane, and
object segmentations are also used to extract features. 1,390
instances are used to train the algorithm of and perform
our discriminative ﬁne-tuning, while the remaining 495 instances are used for testing all ﬁve methods. Table 2 summarizes the recognition results. Using only depth without
color, our ﬁne-tuned 3D ShapeNets outperforms all other
approaches with or without color by a signiﬁcant margin.
6.3. Next-Best-View Prediction
For our view planning strategy, computation of the term
n|xo = xo) is critical. When the observation xo is ambiguous, samples drawn from p(xi
n|xo = xo) should come
from a variety of different categories. When the observation
is rich, samples should be limited to very few categories.
n is the surface of the completions, we could just
test the shape completion performance p(xu|xo = xo). In
Figure 8, our results give reasonable shapes across different
categories. We also match the nearest neighbor in the training set to show that our algorithm is not just memorizing
the shape and it can generalize well.
Figure 9: Successful Cases of Recognition and Reconstruction on NYU dataset . In each example, we show the RGB
color crop, the segmented depth map, and the shape reconstruction from two view points.
nightstand
 Depth
3D ShapeNets
3D ShapeNets ﬁne-tuned
Table 2: Accuracy for View-based 2.5D Recognition on NYU dataset . The ﬁrst ﬁve rows are algorithms that use
only depth information. The last two rows are algorithms that also use color information. Our 3D ShapeNets as a generative
model performs reasonably well as compared to the other methods. After discriminative ﬁne-tuning, our method achieves
the best performance by a large margin of over 10%.
nightstand
Max Visibility
Furthest Away
Random Selection
Table 3: Comparison of Different Next-Best-View Selections Based on Recognition Accuracy from Two Views. Based
on an algorithm’s choice, we obtain the actual depth map for the next view and recognize the object using those two views in
our 3D ShapeNets representation.
To evaluate our view planning strategy, we use CAD
models from the test set to create synthetic renderings of
depth maps. We evaluate the accuracy by running our 3D
ShapeNets model on the integration depth maps of both
the ﬁrst view and the selected second view. A good viewplanning strategy should result in a better recognition accuracy. Note that next-best-view selection is always coupled with the recognition algorithm. We prepare three baseline methods for comparison : (1) random selection among
the candidate views; (2) choose the view with the highest
new visibility (yellow voxels, NBV for reconstruction); (3)
choose the view which is farthest away from the previous
view (based on camera center distance). In our experiment,
we generate 8 view candidates randomly distributed on the
sphere of the object, pointing to the region near the object
center and, we randomly choose 200 test examples (20 per
category) from our testing set. Table 3 reports the recognition accuracy of different view planning strategies with
the same recognition 3D ShapeNets. We observe that our
entropy based method outperforms all other strategies.
7. Conclusion
To study 3D shape representation for objects, we propose
a convolutional deep belief network to represent a geometric 3D shape as a probability distribution of binary variables
on a 3D voxel grid. Our model can jointly recognize and reconstruct objects from a single-view 2.5D depth map (e.g.
from popular RGB-D sensors). To train this 3D deep learning model, we construct ModelNet, a large-scale 3D CAD
model dataset. Our model signiﬁcantly outperforms existing approaches on a variety of recognition tasks, and it is
also a promising approach for next-best-view planning. All
source code and data set are available at our project website.
Acknowledgment.
This work is supported by gift funds
from Intel Corporation and Project X grant to the Princeton
Vision Group, and a hardware donation from NVIDIA Corporation. Z.W. is also partially supported by Hong Kong
RGC Fellowship. We thank Thomas Funkhouser, Derek
Hoiem, Alexei A. Efros, Andrew Owens, Antonio Torralba,
Siddhartha Chaudhuri, and Szymon Rusinkiewicz for valuable discussion.