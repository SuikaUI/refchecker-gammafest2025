This document is downloaded from DR‑NTU ( 
Nanyang Technological University, Singapore.
Density‑based clustering of data streams at
multiple resolutions
Wan, L.  . Density‑based clustering of data streams at multiple resolutions.
Presented at Discover URECA @ NTU poster exhibition and competition, Nanyang
Technological University, Singapore.
 
© 2008 The Author(s).
Downloaded on 27 Mar 2025 02:38:20 SGT
URECA Undergraduate Research Experience on CAmpus
School of Computer Engineering
Project Title: Data Mining Research
Student: Wan Li
Supervisor: A/P Ng Wee Keong
Collaborators: Dang Xuan Hong and Zhang Kuan
Category: 4
Project ID: SCE07022
Density-Based Clustering of Data
Streams at Multiple Resolutions
Introduction
In data stream clustering, it is desirable to have algorithms that are able to detect clusters of arbitrary shapes, changing clusters that evolve over time, and clusters with
noise. In recent years, stream data clustering algorithms are based on an online-offline approach: The online component captures synopsis information from the data stream
(thus, overcoming the real-time and memory constraint issues) and the offline component generates clusters using the stored synopsis.
The online-offline approach affects the overall performance of stream data clustering in various ways: (1) How easily is the synopsis information derived from stream data?
(2) The complexity of data structure used to store and man age the synopsis information. (3) The frequency with which the offline component is used to generate clusters.
In this project we propose an algorithm that (1) computes and updates synopsis information in constant time; (2) allows users to discover clusters at multiple resolutions; (3)
determines the right time for users to generate clusters from the synopsis information; (4) generates clusters of higher purity than existing algorithms; and (5) determines the
right threshold function for density-based clustering based on the fading model of stream data. To the best of our knowledge, no existing data stream algorithm has all of
these features. Experimental results show that our algorithm is able to detect arbitrarily shaped evolving clusters of high quality.
MR-Stream Algorithm
Experiment Results
we assume that the input stream data has n dimensions and forms an dimensional space S.
Any record of the data stream is a n dimensional vector x = [x1, x2, . . . , xn] in space S.
We conceptually partition the space S into well-defined partitions or cells. Any cell C can be
further partitioned into 2n sub-cells if we divide each dimension into 2 parts. The end result of
this partitioning is a recursive partitioning of space S into cells at various granularities.
We use a tree-like data structure to mirror the space partitioning so that each tree node
corresponds to a cell. A tree node that has children nodes corresponds to the further
partitioning of the parent cell. The space partitioning and its corresponding tree structure are
shown in Figure 1.
We may use a user-defined parameter H to control the levels of partitioning so that the height
of the tree is no more than H (the root node is at height 0). Thus, each dimension is divided into
2H intervals.
We assign a weight value to each record of the data stream. This weight value decreases over
time if the record do not appear again frequent enough in the stream.
MR-Stream Algorithm
Hash Tree Data Structure
Detecting Sporadic Cells
Fading function
Detecting evolving data streams
(2 dimensional data stream)
Performance analysis
(34 dimensional data stream)
1. High Accuracy
2. Low Memory Cost
3. Short Process Time
Memory Sampling Method
The changing of memory cost reflects the evolving of clusters
Memory Sampling Method
In the data streaming process, the number of nodes in the tree is not stable. We establish the
relationship between the number of nodes in the tree (which also determines the memory
cost) and the evolution of clusters in this section. This relationship is important as it allows
one to obtain evolving cluster information by sampling the memory cost rather than running
the relatively computational expensive offline component.
Our Contribution
1. The MR-Stream algorithm provides a hierarchical, multi-resolution view of
clusters at any time; that is, MR-Stream can perform clustering algorithm at
different resolution by the offline component while not affecting the online
component.
2. The online component of MR-Stream has constant time complexity to accept a
new record from data stream. The offline component can provide a better cluster
result by extending the neighbor cell concept.
3. As all density-based clustering algorithms require a threshold function to control
the discovery of clusters with respect to memory limitations, we provide a general
method to determine the threshold function for a given memory bound. The
function enables any data stream clustering algorithm that is based on the fading
model to work within a fixed memory bound without missing any potential clusters.
4. We propose a memory sampling method that enable users to detect the evolving
nature of clusters without executing the expensive offline component. It is important
as it helps users to determine when to run the offline component on-demand rather
running it periodically.