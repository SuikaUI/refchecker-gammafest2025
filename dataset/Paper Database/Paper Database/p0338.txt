Optimal Full Matching and Related Designs via
Network Flows
Ben B. HANSEN and Stephanie OLSEN KLOPFER
In the matched analysis of an observational study, confounding on covariates X
is addressed by comparing members of a distinguished group (Z = 1) to controls
(Z = 0)onlywhentheybelongtothesamematchedset.Thebettermatchings,therefore,
are those whose matched sets exhibit both dispersion in Z and uniformity in X. For
dispersion in Z, pair matching is best, creating matched sets that are equally balanced
between the groups; but actual data place limits, often severe limits, on matched pairs’
uniformity in X. At the other extreme is full matching, the matched sets of which are as
uniform in X as can be, while often so poorly dispersed in Z as to sacriﬁce efﬁciency.
This article presents an algorithm for exploring the intermediate territory. Given
requirements on matched sets’ uniformity in X and dispersion in Z, the algorithm ﬁrst
decidestherequirements’feasibility.Infeasiblecases,itfurnishesamatchthatisoptimal
for X-uniformity among matches with Z-dispersion as stipulated. To illustrate, we
describethealgorithm’suseinastudycomparingwomens’tomens’workingconditions;
and we compare our method to a commonly used alternative, greedy matching, which
is neither optimal nor as ﬂexible but is algorithmically much simpler. The comparison
ﬁnds meaningful advantages, in terms of both bias and efﬁciency, for our more studied
Key Words: Matched sampling; Minimum cost ﬂow; Nonrandom treatment assignment; Observational study; Quasiexperiment; Subclassiﬁcation.
INTRODUCTION
Full matching is a form of subclassiﬁcation generalizing pair matching and matching
with multiple controls. Like those methods, full matching is suited to prospective studies
comparing a treatment and a control group, or to retrospective studies comparing cases to
controls. Such techniques sort all or part of a sample into nonoverlapping matched sets,
striving to place similar subjects alongside one another while separating those treatment
and control subjects who are too dissimilar to be compared.
Ben B. Hansen is Assistant Professor, Statistics Department, University of Michigan, Ann Arbor, MI 48109-1107
(E-mail: ). Stephanie Olsen Klopfer is Senior Biometrician, Vaccine Clinical Biostatistics, Merck Research Laboratories, Blue Bell, PA 19422 (E-mail: stephanie ).
American Statistical Association, Institute of Mathematical Statistics,
and Interface Foundation of North America
Journal of Computational and Graphical Statistics, Volume 15, Number 3, Pages 1–19
DOI: 10.1198/106186006X137047
B. B. HANSEN AND S. O. KLOPFER
Older methodological work suggests, and a growing applied literature conﬁrms, that
such sortings of observations can strengthen a subsequent statistical analysis in a number
of important ways. On the methodological side, Cochran documented their utility
for reducing bias in estimates of treatment effects in situations where covariance adjustment may not be appropriate, a theme with echoes in later work of Rubin and his
coauthors ; related methodological literature promotes the use of matching in combination with covariance adjustment in
order to simultaneously secure beneﬁts of both . Recent applications that use matching to good advantage include
Harding’s in sociology , Dehejia and Wahba’s in labor economics , Ho’s in law , and the SUPPORT
investigators’ in medicine , among many others.
A common weakness of these studies, one they share with many applications of
multivariate-distance matching, is their use of greedy, rather than optimal, matching algorithms, algorithms that match treated and control units in relatively inﬂexible proportions.
Without overshadowing the studies’ strengths, this aspect of their approach brings several
deleterious side effects. First, when matching in regions of covariate space where treated
subjects are many and controls are few, it lacks a protocol for grouping several treated
subjects with a single control; this tempts the analyst to “re-use” controls, creating matched
sets that overlap and are not disjoint. Second, in regions of the covariate space where controls are relatively plentiful, it fails to take advantage of their numbers, needlessly leaving
some of them unmatched. The ﬁrst of these side effects precludes the proper use of existing
statistical methods for matched or stratiﬁed data, such as permutation inference , inference
conditional on matched sets , or inference from a random effects model ; and the second reduces inferential precision.
In a full match, some matched sets may contain one treated subject (or case) alongside
one or more controls, while other matched sets may contain multiple treated units (cases)
alongside one control. This distinguishes full matching from both pair matching, matching with k ≥2 controls, and matching with a variable number of controls, although full
matchings sometimes coincide with matches produced by these simpler methods. Among
all methods of matching for two groups, full matching alone is demonstrably optimal as
a method of producing similarity within matched sets ; and it remedies
the aforementioned side effects of greedy matching. Despite these attractions, software for
full matching have been lacking.
This article describes the algorithm beneath our effort to ﬁll that gap; and it demonstrates
the advantage of ﬁnding matches optimally, by way of a minimum-cost network ﬂow solver.
It understands full matching more broadly than Rosenbaum originally deﬁned it,
permitting the options of restricting matched sets’ relative proportions of treatment and
control units, and of using only a fraction of the control group; understood in this way, full
matching includes matching with k ≥1 or a variable number of controls as special cases,
so that an algorithm or program for optimal full matching can also be used to create optimal
OPTIMAL FULL MATCHING AND RELATED DESIGNS VIA NETWORK FLOWS
Pair Match (solid lines) and Match With One to Four Controls (all lines) for One Science
Department’s Research-Only Faculty
log10(Grant)
log10(Grant)
matchings of these other types. More important beneﬁts, in our view, are those conveyed
upon full matching as such, which we illustrate with a small case study (Section 1.1, 5)
in which full matching is applied to the analysis of a gender equity study. (This study has
no treatment or control group per se, but it resembles an observational study in seeking to
compare two groups while adjusting for measured covariates.)
WHY USE FULL MATCHING?
Theargumentforfullmatching’soptimalityasamethodofsubclassiﬁcationissomewhat
abstract, but it has a number of concrete manifestations. The ﬁrst is its ability to make use
of as many observations as are suitable to be included in a comparison.
In some studies, one begins with mostly complete data on treated units or cases, but less
complete data on a much larger reservoir of potential controls; in such settings, resources
may permit additional data collection on no more than one or a small number k of controls
per treated subject. In many other studies, however, matching is done after all the data
have been collected. In typical cases of this type, full matching closely matches many more
subjects than would matching with a ﬁxed number of controls.
Table 1 illustrates this with an example drawn from a study of gender equity to which
one of us (B.B.H.) served as a consultant. Men and women professors at a major research
university were to be matched on the basis of administrative data, then compared as to the
size of their lab and ofﬁce space assignments. At universities like the one in question, space
requirements increase with amount of lab equipment and with the number of students and
staff working in a lab, and a professor’s total grant funding correlates with all of these. Thus,
grant funding was used as a proxy for space requirement, and matches were sought between
faculty who are as similar as possible in terms of grant totals. (Speciﬁcally, log(1+Grant).)
Since matches were made only within departments and within instructional and researchonly career tracks, the study is a good source of small, illustrative matching problems, and
that is the spirit in which the data are presented here; the matching actually used took into
account several other factors in addition to grant funding.
Given a preassembled database of subjects, one seeks to match as many of them as
B. B. HANSEN AND S. O. KLOPFER
An Optimal Full Match of a Science Department’s Research-Only Faculty. (Any full matching
that places E, F, and U–Z into the same sets as does the indicated match is also an optimal,
but all other full matchings of these subjects lead to net discrepancies on log(Grant) that
exceed the optimal value.)
log10(Grant)
log10(Grant)
possible; but pair matchings, one of which is indicated by solid lines in Table 1, necessarily
omit three of nine available controls. The pair match of Table 1 is optimal among pair
matches, in the sense that it minimizes the net discrepancy in log of Grant Funding between
matched counterparts; its net discrepancy is |0 −0| + |0 −0| + |0 −0| + |0 −4.4| +
|4.4 −5.0| + |6.1 −6.0|, or 5.1. An optimal match with a varying number of controls
 allows for potentially a different number of controls within
each matched set, and is also indicated in the table by the solid and dashed lines taken
together. This match remedies pair matching’s drawback of needlessly rejecting controls,
and it increases net discrepancy only slightly, to 5.9.
With full matching, however, each control can be matched while at the same time net
discrepancy is sharply reduced, from 5.1 (or 5.9) to 1.5. Apart from its ability to make use
of more potential controls, Table 2 shows the better performance of full matching, at the
same time illustrating the second important reason to prefer full matching to more restrictive
techniques. Considered as groups, the treated and the controls may differ enough that some
number of the controls have similar treated counterparts only among a smaller number of
treated subjects, while some number of treated subjects have only a smaller number of good
potential matches among the controls. Tables 1 and 2 represent this possibility compactly,
with U–Z as the controls with fewer treated subjects who are good potential matches for
them and A–D as the treated subjects with fewer similarly funded counterparts among the
controls. By accommodating this structure, full matching aligns treated and control subjects
better than either pair matching or matching with a variable number of controls.
This beneﬁt of full matching is of perhaps greater importance than the example would
suggest. Such mismatched concentrations of treated and control group members as given in
this example are common in propensity-score matching, since in ﬁtting the propensity score
prior to matching, one in effect does one’s best to separate treated and controls groups on
a linear covariate index; see, for instance, Heckman, Ichimura, and Todd or Dehejia
and Wahba .
OPTIMAL FULL MATCHING AND RELATED DESIGNS VIA NETWORK FLOWS
RECOVERING THE BENEFITS OF MATCHING WITH A FIXED NUMBER OF CONTROLS
BY IMPOSING SPECIAL RESTRICTIONS
To obtain optimal full matches, we shall translate matching problems into network ﬂow
problems. Simpler algorithms that avoid this detour, such as greedy matching, may appear
to enjoy certain advantages over optimal full matching. Consider the following special
requirements, for example; one can imagine simple algorithms that accommodate each, if
perhaps not optimally. Can optimal full matching do the same?
The statistician may wish to forbid the matching of certain treatment-control pairs, perhaps those that are dissimilar enough that comparing them would undermine the credibility
of the analysis. Forbidding matches across levels of a categorical covariate, such as the department in which a researcher is employed, can be accomplished by matching separately
within each level of the covariate, but other prohibitions may not be accommodated in this
way. An example is matching within calipers ; to impose a grant
caliper of one (on the log scale) upon the matching problems in Tables 1 and 2 is to insist
that only woman-man pairs whose log grant fundings differ by no more than one may be
placed in the same matched set.
The statistician may wish to use only a portion of the control group, perhaps because
securing control data necessary for the analysis requires follow-up at some cost.
The statistician may wish to place restrictions on the relative proportions with which
treated and control subjects are combined into matched sets, perhaps to control the variability of an estimate based on the matching. If the matching of four treated and four control
units into a 3:1 and a 1:3 matched set is no better warranted than their placement into a
2:1, a 1:1, and a 1:2 matched set, then the latter, with its three matched comparisons rather
than two, will likely lead to a sharper contrast of treatment and control groups. Similarly,
when controls are so plentiful and dispersed as to allow that each treated subject be matched
to at least two of them, then the statistician might prefer to insist on this rather than allow
matchings with just one comparison unit for some treated subjects, or matches in which
multiple treated subjects may share a control.
Rosenbaum’s originalfull-matchingalgorithmaccommodatesonlytheﬁrstofthe
three challenges listed above. That algorithm is implemented by Gu and Rosenbaum ,
and by Augursky and Kluve , whose ﬁndings indicate that the absence of restrictions
on treatment and control subjects’ relative proportions, in particular, is problematic, so
much so that the latter authors reject it in favor of a suboptimal, greedy approach. In
contrast, the algorithm presented here accepts restrictions of each of the three types, singly
or in combination. Particularly when combined, such restrictions may render a matching
problem impossible to solve; the algorithms of Section 3 also decide whether this is so,
furnishing either a match meeting given restrictions or a report that no such match exists.
The match, if it exists, will be optimal. The algorithm is relatively fast as well; the time
complexity of the algorithm is competitive with that of previously published algorithms for
more restrictive matching techniques (Section 4.2).
B. B. HANSEN AND S. O. KLOPFER
THE PLACE OF OPTIMAL FULL MATCHING AMONG
BIPARTITE MATCHING METHODS
A UNIFIED SETTING FOR OPTIMAL MATCHING OF TWO GROUPS
The algorithm we present supports one basic operation: given a treatment and a control
group, a list of prohibited matches, a numeric discrepancy rating for each permissible
match between treatment and control subjects, a target number of potential controls to be
matched to the pool of treated units, and restrictions governing the balance between treated
and control units within matched sets, either: ﬁnd a full match of minimum net discrepancy
among full matches meeting the restrictions, if such a match exists; or report that the problem
is infeasible. Two treatment-control balance restrictions are required: ﬁrst, an upper limit
on the number of controls to be placed in a matched set; second, either a lower limit, one
or greater, on the number of controls to be placed in a matched set, or an upper limit of two
or greater on the number of treated units that may be placed into a matched set. Such an
algorithm sufﬁces to perform pair matching, matching with multiple controls, full matching
as originally conceived (i.e., full matching with neither omission of potential controls nor
restrictions on the degree of treatment-control unit balance within matched sets), and full
matching as it is understood in this article.
To illustrate the use of this operation, we borrow the syntax of optmatch, an add-on
package to R that implements it . Thus,
fullmatch() is the operation itself, and max.controls denotes an upper restriction on the
number of controls to be placed in any one matched set. In full matching, any set with two
or more controls has exactly one treated subject, so max.controls is also an upper limit on
a matched set’s ratio of controls to treated subjects. Let min.controls be the lower limit
on that ratio; this is set to a number less than or equal to 1/2 or greater than or equal to 1
according as matched sets with multiple treated subjects are or are not desired. We assume
that either min.controls or its reciprocal is a positive integer, as is max.controls.
Let T and C be the treatment and control groups, respectively, so that |C| potential
controls, that is, as many as C has distinct members, are available to be matched to |T|
treated units. Assume for the moment that no treated unit is isolated, in the sense that every
potential matching of it to a control is forbidden.
Finally let M denote the treatment-by-control group discrepancy matrix, whose entries
M[t, c] are either positive discrepancies between treatment and control observations t and c
or ∞, if the matching of t to c is prohibited. The ﬁnite elements of M can be computed in any
of a number of ways—propensity score distances and distances based on the Mahalanobis
metricarecommonchoices,butarebynomeanstheonlychoices.SeeRosenbaumandRubin
 , Rubin , Olsen , and Rubin and Thomas for some examples
and properties.
Pair matching. When |C| ≥|T|,
fullmatch(M, min.controls = 1, max.controls = 1, omit.fraction = r),
r := (|C| −|T|)/|C|, returns either an optimal pair match, if such exists, or an
OPTIMAL FULL MATCHING AND RELATED DESIGNS VIA NETWORK FLOWS
indication of infeasibility, otherwise.
Feasibility requires that there be at least |T| nonisolated controls, but this is not
sufﬁcient for feasibility: as a simple example, let M be
Matching with multiple controls. Suppose that a match of each treated unit to, say, two
to ﬁve controls is sought. Our function permits the speciﬁcation of a desired fraction
of the control group to be matched, which defaults to the full proportion of the control
group capable of being included in some full match: that is, the fraction of control
units that are not isolated. Thus,
fullmatch(M, min.controls = 2, max.controls = 5)
returns an optimal matching of each treated unit with two to ﬁve controls, placing
each nonisolated control into some matched set (if there exists such a matching that
is consistent with M). The matching problem speciﬁed here may be feasible only if
the number of (nonisolated) potential controls is from two to ﬁve times the number of
(nonisolated) treated subjects, but since the problem places nontrivial restrictions on
the sizes of matched sets, such a condition is not sufﬁcient for solutions to the problem
to exist. When they do not, fullmatch() returns an indication that the problem was
infeasible.
Full matching (with and without restrictions on treatment-control balance). The call
fullmatch(M, min.controls = .25, max.controls = 5, omit = .1)
generates an optimal full matching of the treated group to all but 1/10 of the potential
controls, with matched sets having as few as one control per four treated subjects and
as many ﬁve controls per treated subject (or an indication that no such match exists,
if appropriate).
If not given an omit argument, fullmatch seeks to place into matched sets each
treated unit and each nonisolated control (thereby using all nonisolated controls). If
either of max.controls or min.controls are not speciﬁed, they default to |C|:1
or 1:|T|, respectively, so that in effect no upper (respectively, lower) restriction is
placed on matched sets’ ratios of controls to treated units. Thus omitting all arguments
other than M prompts fullmatch() to ﬁnd an optimal full matching in the original,
unrestricted sense of Rosenbaum .
Provided that there are nonisolated units, some full matching in Rosenbaum’s 
unrestricted sense always exists. Except in this case, however, deciding the existence of
matches of a desired type may require elaborate combinatorial calculations. In pair matching, for instance, the fundamental theorem of Hall states that the existence of a pair
match is guaranteed only when for any T ′ ⊆T, the collection of control subjects eligible
B. B. HANSEN AND S. O. KLOPFER
to be matched to some member of T ′ is at least as large as T ′; proving or refuting this of a
matching setup can be quite demanding. It is helpful in practice to have an algorithm that
settles such questions automatically.
A WORD ON GREEDY MATCHING
These and other calls to fullmatch() resolve deﬁnitely the question of whether a
match of the speciﬁed type exists, and if such matches exist, they ﬁnd one that is optimal,
in the sense that its net discrepancy is within a small, speciﬁed tolerance of least-possible.
In present practice, matches are more commonly found via so-called greedy algorithms,
which compare unfavorably to optimal matching on both of these counts.
Greedy matching takes the following approach, or a variation of it. First, treated and
control units are put in some order. In this order, treated units are each matched to the
control, or the ﬁrst of the controls, from which they are least discrepant, progressively
generating a pair matching. At each stage, matches are made without attention to how they
affect later possibilities for matching; as a consequence, the algorithm may be incapable of
ﬁnding permissible matchings, even when they exist. For example, suppose that two women
and two men scientists are to be matched, with differences in the log of grant funding as
discrepancies and with a grant funding caliper of one, on the log scale; suppose further
than one man and one woman have the same grant funding, while the other man’s log grant
funding is .6 less and the remaining woman’s is .6 more. The resulting discrepancy matrix
the “∞” reﬂecting that B’s discrepancy with Z exceeds the caliper. If A is matched ﬁrst,
he or she will be matched to Y, leaving B without a potential match other than to Z; but that
match is forbidden. Greedy matching fails to ﬁnd a permissible pair matching, even though
one exists. (See Section 5 for a comparison of greedy and optimal approaches in an actual
application.)
The problem may be remedied in part by repeating the procedure after a random reordering of the list of treated units. Still, when this composite algorithm fails to ﬁnd a suitable
matching, one does not know whether the algorithm or the problem fed to it is to blame;
and when greedy matching does ﬁnd a permissible match, it offers no assessment of how
close to optimal it is.
FULL MATCHING AND EQUIVALENT NETWORK FLOW
FULL MATCHES
Let sets T and C of treated and control units be given, with a discrepancy M[t, c] ∈
[0, ∞] for each (t, c) ∈T × C, M[t, c] = ∞indicating a forbidden matching. Set E =
{(t, c) ∈T × C : M[t, c] < ∞}; then (T, C, E) is a bipartite graph with vertices or nodes
OPTIMAL FULL MATCHING AND RELATED DESIGNS VIA NETWORK FLOWS
T ∪C and edges E. It can be depicted as a plot with a point for each vertex or node and
for each edge (t, c) ∈E, a line connecting t’s point to c’s. If F ⊆E, then (T, C, F) is a
subgraph of (T, C, E).
Matches, and subclassiﬁcations more generally, can be associated with subgraphs of
particular types. Elements x and y of T ∪C are said to belong to the same subclass if they
fall in the same connected component of (T, C, F): that is, if there is a path in (T, C, F)
connecting them, a sequence of edges e1, . . . , ek ∈F, e1 = (x, ·) or (·, x) and ek = (y, ·)
or (·, y), such that for i = 2, . . . , k, ei shares a node with ei−1. A given subgraph (T, C, F),
then, induces a partition of T ′∪C′, where T ′ is the set of all t ∈T such that some (t, c) ∈F
and C′ is the set of all c ∈C such that some (t, c) ∈F. If the components of the partition
each contain one member of T and one or more from C, say, then the subgraph (T, C, F)
would encode a match with multiple controls. Table 1, for instance, depicts graphs encoding
a pair matching and matches with multiple controls.
The graphs in Table 1 also encode full matchings, as does that depicted in Table 2,
among many others that are possible. If an additional edge between subjects B and S were
added to the graph of Table 2, however, then it would cease to encode a full matching,
since the partition of {A, . . . , F} ∪{R, . . . , Z} encoded by it would contain a component
with both multiple controls ({R, S}) and multiple treated units ({A, B, C}). In general,
a subclassiﬁcation in which each subclass contains either precisely one treated unit or
precisely one control is a full matching (of some subset of T to some subset of C).
The diameter of a connected component of (T, C, F) is the smallest number d such
that any two members of the component may be connected by a path of d or fewer edges.
In their graph-theoretic representations (T, C, F), subclassiﬁcations that are and are not
full matchings may be neatly distinguished in terms of the diameters of their connected
components.
 . Let (T, C, E) be a bipartite graph and
f the subclassiﬁcation of T ′ ∪C′ (T ′ = {t ∈T : (t, c) ∈E, some c ∈C}, C′ = {c ∈
C : (t, c) ∈E, some t ∈T}) corresponding to it. Then f is a full matching if and only if
all connected components of (T, C, E) have diameter two or less.
Finding full matches, then, amounts to ﬁnding graphs all connected components of
which have diameter one or two.
FULL MATCHES AND NETWORK FLOWS
This section and the section that follows present and analyze a network-ﬂow algorithm
for solving full matching problems that was introduced by the second author in her Ph.D.
thesis . We begin with a review of the deﬁnition of a network ﬂow.
Let (V, E) be a directed graph: V is a set of nodes and E ⊆V × V a set of arcs
connecting the nodes. If e = (w, v) ∈E, then e is an arc into v and out of w. For each
v ∈V , a divergence d is given. v is called a supply, demand, or conservation node, according
as dv > 0, dv < 0, or dv = 0. There is at least one supply and at least one demand node,
and the sum of all divergences is assumed to be zero. Upper and lower capacities Ue and
Le, 0 ≤Le ≤Ue ≤∞, are associated with each arc e. Together, these numbers deﬁne a
B. B. HANSEN AND S. O. KLOPFER
network. A ﬂow through the network is a function l of E into [0, ∞) such that: at each arc
e, Le ≤l(e) ≤Ue; and at each node v,
l(v, x) = dv.
An integral ﬂow is a ﬂow l mapping edges to integers. In a given network, there may or
may not exist ﬂows or integral ﬂows.
If in addition a cost ce ≥0 is given for each e ∈E, then the cost of a ﬂow l is
e∈E cel(e). The min-cost integral ﬂow problem is the problem of ﬁnding a ﬂow through
a given network, with given edge costs, of minimum total ﬂow cost. We shall establish an
equivalence between the problems of ﬁnding optimal full matches, under given treatmentcontrol balance restrictions, and of ﬁnding min-cost integral ﬂows in certain networks.
Let f denote a full-matching problem (f.m.p.) with treatment and control groups T =
T(f) and C = C(f), discrepancy matrix M = M(f), treatment-control balance restrictions
max.controls = maxc(f) and min.controls = minc(f), and a target number nc(f) of
controls to be put into matched sets. Say that f is well-speciﬁed if minc(f) · |T| ≤nc(f) ≤
maxc(f) · |T|.
Our algorithm begins by representing f as a network, nwk(f). nwk(f) has (|T|+|C|+
2) nodes: a node for each member of T and C as well as two additional nodes, “ Sink”
and “ Overflow.” For each t ∈T and c ∈C such that M[t, c] < ∞, there is an arc (t, c)
out of t and into c, and the arc has lower and upper capacities L(t,c) = 0 and U(t,c) = 1,
respectively. For each c ∈C, an arc of lower capacity 0 and upper capacity 1 goes out
of c and into Sink. For each t ∈T and each c ∈C, there is an arc out of t or c and
into Overflow, but the capacities of these arcs depend on the treatment-control balance
restrictions accompanying the f.m.p. being modeled.
Let U = maxc(f) be the maximum, and L = max(1, minc(f)) the minimum, number
of controls per matched set permissible. Let ˜U = max(1, 1/minc(f)) denote the problem’s
upper limit on the number of treated subjects per matched set. Arcs from members of T
to Overflow have lower and upper capacities 0 and U −L, respectively, and arcs from
members of C to Overflow have lower and upper capacities 0 and ˜U −1, respectively.
When minc(f) ≥1, ˜U = 1 and arcs of the form (c, Overflow), c ∈C, have zero capacity
— in effect, they are not part of the network. Thus in Figure 1 (Section 3.3), which assumes
minc(f) ≥1, these arcs do not appear; Figure 2 (Section 3.4) treats separately the case that
minc(f) is small enough to make ˜U two or greater.
In the network representation of a f.m.p. f, node divergences dv depend both on
treatment-control balance restrictions and on the number nc of control subjects to be
matched. Members t ∈T become supply nodes, with supply dt = +U; members of
C become conservation nodes, that is, dc = 0, all c ∈C; whereas Sink and Overflow
have supplies −nc and nc −U · |T|, respectively. This completes the deﬁnition of nwk(f)
in terms of f.
OPTIMAL FULL MATCHING AND RELATED DESIGNS VIA NETWORK FLOWS
Network nwk(f) for a f.m.p. f that forbids many-one matches. U := maxc(f), L := minc(f), and
n := |T(f)|. Nodes are labeled with their divergences; arcs, with upper and lower capacity limits. Because their
upper capacities are zero, arcs from members of C(f) to Overflow are not shown.
PROPERTIES OF f.m.p.’s AS NETWORK FLOWS
If l is an integral ﬂow for nwk(f), let (T, C, {(t, c) : l(t, c) = 1}) be the induced
subgraph of the bipartite graph (T, C, {(t, c) : M[t, c] < ∞}) and let sc(l) be the subclassiﬁcation of T ∪C represented by this graph (see Section 3.1).
It so happens that the network representations of f.m.p.’s operate somewhat differently
depending on whether the problem permits many-one matches, that is, matched sets with
several treated subjects and one control, which it does if and only if minc(f) ≤1/2. The
two variations on full matching require separate analyses; however, one important property
is shared by both.
Let f be a well-speciﬁed f.m.p. with restrictions. If there is a full matching
f solving f,then there is an integral ﬂow lf for nwk(f) such that f = sc(lf).
The veriﬁcation of Lemma 2 is not difﬁcult, but it requires systematic attention to
contingencies that need not detain us now. It appears in the Appendix.
Lemma 2 entails that for well-speciﬁed f, the existence of an integral ﬂow for nwk(f)
is a necessary condition for existence of a feasible solution to f. Yet it is not a sufﬁcient
condition for f to have a solution, because it is not the case that for any f.m.p. f and for any
integral ﬂow l in nwk(f), sc(l) is a full match solving f. As a counterexample, consider
the matching problem
f = (T = {A, B}, C = {C, D},
, maxc = 2, minc = 1/2, nc = 2),
and the ﬂow l through nwk(f) such that l(t, Overflow) = 0, t = A or B, while l ≡1
for all other arcs. For such an l, sc(l) places two treatment and two control units into a
B. B. HANSEN AND S. O. KLOPFER
single subclass, so it is not a full match. There is a subclass of f.m.p.’s f, however, such
that each integral ﬂow l in nwk(f) induces an admissible solution sc(l) to f: namely, those
problems that forbid many-one matches, that is, f with minc ≥1. Thus, Lemma 2 and
the lemma to follow, Lemma 3, together establish that, at least for problems f that forbid
many-one matches, existence of an integral ﬂow for nwk(f) is necessary and sufﬁcient for
existence of a solution to f. For such problems, the question of existence can be decided by
any algorithm capable of deciding whether a network admits an integral ﬂow.
Let f be a f.m.p. that forbids many-one matches (minc(f) ≥1). If l is an
integral ﬂow for nwk(f), then sc(l) is a full match placing precisely nc(f) members of
C(f), and all members of T(f), into matched sets, all of which contain one member of T(f)
and between minc(f) and maxc(f) members of C(f).
Proof: Let f be a f.m.p. that forbids many-one matches, and let l be an integral ﬂow
for nwk(f). To meet its demand, Sink draws nc(f) units of ﬂow, and by the capacity
constraints of arcs into Sink, each of these units must come from a distinct control node;
so there are at least nc(f) control nodes across which l transports at least one unit of
ﬂow. But l can transport no ﬂow other than this across control nodes, because there is
nowhere else for it to go. (Recall that when many-one matches are forbidden, arcs from
control nodes to Overflow have upper capacity 0.) So sc(l) places precisely nc(f) control
units into subclasses containing a treated unit. In addition, each of the nc(f) control nodes
transporting ﬂow receives only one unit of ﬂow, which by integrality of l comes from one
treatment node. Should maxc(f) be greater than one, this treatment node may send ﬂow
to other control nodes, but each of these other control nodes itself receives ﬂow from no
treatment nodes other than it; this shows that the connected components of the bipartite
graph (T(f), C(f), {(t, c) ∈T(f) × C(f) : l(t, c) = 1}) have diameter no greater than
two. It follows by Lemma 1 that sc(l) is a full matching. Finally, capacity constraints on the
arcs out of treatment nodes are so arranged that l must send a one unit of ﬂow to between
minc(f) and maxc(f) control nodes.
FULL MATCHING AS A MIN-COST FLOW PROBLEM
Forthecaseoff.m.p.’sf thatforbidmany-onematches,Section3.3showedthatsolutions
to f can be found if and only if a corresponding network admits an integral ﬂow. However,
for an f.m.p. f that permits many-one matches, it did not address how to decide whether
a matching solving f exists; nor did it indicate how to ﬁnd optimal solutions to f.m.p.’s of
either type. It so happens that in addressing the second of these problems, one solves the
ﬁrst as well.
Let f be a f.m.p. and nwk(f) the corresponding network. Let cf be a function assigning
cost to arcs (v, w) in nwk(f) as follows:
M(f)[v, w],
v ∈T(f), w ∈C(f);
otherwise.
If l is a ﬂow in nwk(f), write cf(l) for the net cost of l, 
e cf(e). Then mcf(f) :=
(nwk(f), cf) encodes the min-cost integral ﬂow problem corresponding to f: determine
OPTIMAL FULL MATCHING AND RELATED DESIGNS VIA NETWORK FLOWS
Network nwk(f) for a f.m.p. f that permits many-one matches. U = maxc(f), ˜U = (minc(f))−1,
and n := |T(f)|. Nodes are labeled with their divergences; arcs, with upper and lower capacity limits.
whether the set {cf(l) : l an integral ﬂow in nwk(f)} is empty, and if not, ﬁnd an l
minimizing it.
Letf beasolutionoff andl anintegralﬂowinnwk(f)suchthatsc(l) = f.
Net discrepancy of f = cf(l).
Proof: By (3.2), l incurs cost only when it moves ﬂow along arcs from members of T(f)
to members of C(f), in which case the costs are proportional to the discrepancy assigned
by f to that pair of units. By nwk(f)’s capacity constraints on these arcs, an integral ﬂow
can move either one or no units of ﬂow along such an arc, incurring a cost of 0 or the cost
of the arc; and if sc(l) is known to be a full match, then for any t ∈T(f) and c ∈C(f) that
sc(l) places in the same subclass, l(t, c) = 1.
In light of Lemmas 2 and 3, Lemma 4 establishes that for f.m.p.’s forbidding many-one
matches, ﬁnding an optimal solution or establishing that no solution exists can be accomplished by solving the corresponding min-cost integral ﬂow problem. Because Lemma 3
applies only to problems forbidding many-one matches, the same equivalence is not yet
assured for all full matching problems with treatment-control balance restrictions. To establish it, we must rule out the possibility of minimum-cost ﬂows l in mcf(f) which induce
subclassiﬁcations sc(l) that are not full matches. This possibility may be excluded for many,
but not all, f.m.p.’s that permit many-one matches.
Let f be a f.m.p. such that: (i) minc(f) ≤1/2 (many-one matches are
permitted); and (ii) all entries of M(f) are strictly positive. If l is a minimum-cost ﬂow
for mcf(f), then sc(l) is a full match placing all members of T(f) and from nc(f) to
B. B. HANSEN AND S. O. KLOPFER
|C(f)| members of C(f) into matched sets, each containing 1 to maxc(f) controls and 1 to
1/minc(f) treated units.
Proof: Suppose that l is an integral ﬂow in nwk(f) such that sc(l) is not a full matching.
We shall show that c(l) is not least-possible. Lemma 1 entails that the graph (T, C, {(t, c) ∈
T × C : l(t, c) = 1}) has a connected component of diameter greater than two, since sc(l)
is not a full match. So there must be t1, t2 ∈T, c1, c2 ∈C such that l(t1, c1) = l(t2, c1) =
l(t2, c2) = 1. Because the arc out of c1 into Sink has upper capacity 1, l must send at least
one unit of ﬂow along (c1, Overflow). Let l′ be the same as l, except that l′(t2, c1) = 0,
l′(t2, Overflow) = l(t2, Overflow) + 1, and l′(c1, Overflow) = l(c1, Overflow) −1.
These changes do not affect the divergence condition (3.1). Since l′ sends at least one unit
of t2’s supply to a member of C, it can send as much as necessary of its remaining supply
to Overflow without violating the capacity constraint on the arc (t2, Overflow). Finally,
c(l′) = c(l) −c(t2,c1), and by assumption c(t2,c1) > 0, so c(l) is not minimal.
This shows that if l is a min-cost solution to mcf(f), then sc(l) is a full matching. In
addition, whenever l solves mcf(f) and sc(l) is a full matching, sc(l) places between nc
and |T| controls into matched sets and respects f’s restrictions on treatment-control balance;
the proof of this is routine and is omitted.
Taken together, these lemmas establish the equivalence of the problem of determining
whether a well-speciﬁed f.m.p. f admits a solution and, if it does, producing an optimal
solution, with a certain related min-cost ﬂow problem, mcf(f). Note that we have given a
slightly different interpretation to f’s target for the number of controls to be included, nc(f),
depending on whether minc(f) ≥1. If f forbids many-one matches, then we ask whether
a solution matching precisely nc(f) controls exists, reporting that the problem is infeasible
if not. If f permits many-one matches, then we ask for a solution matching at least nc(f)
control units, reporting infeasibility if and only if this less restrictive class is empty. Of
course, for problems asking that all controls be matched, that is, f with nc(f) = |C|, this
distinction disappears.
PRACTICAL CONSIDERATIONS
INCREMENTING TREATMENT-CONTROL DISCREPANCIES FOR STABILITY
Lemma 5 reduces f.m.p.’s to min-cost ﬂow problems only if all discrepancies between
treated and control units are strictly positive; but surely problems in which some discrepancies are zero also arise. A simple solution is to modify the initial problem by adding
some ﬁxed, positive quantity ϵ to each entry of M: Given a f.m.p. f and ϵ > 0, let fϵ be
the f.m.p. with T(fϵ) = T(f), C(fϵ) = C(f), M(fϵ) = M(f) + ϵ, maxc(fϵ) = maxc(f),
minc(fϵ) = minc(f), and nc(fϵ) = nc(f).
Certainly this change does not affect the answer to the existence question: there exist
full matches solving f if and only if solutions for fϵ exist. If solutions do exist, then whether
f and fϵ have the same optimal solutions depends on whether the problems permit many-one
matches and on the magnitude of ϵ relative to the entries in M.
For well-speciﬁed problems f that forbid many-one matches, it can be shown that the
OPTIMAL FULL MATCHING AND RELATED DESIGNS VIA NETWORK FLOWS
optimal solution for fϵ is the same as that for f, whatever be ϵ > 0. The situation is different
with problems that permit many-one matches. Let ms(f) be the number of matched sets
in a full matching f and nc(f) the number of controls matched to some treated unit by
f. Unlike with problems forbidding many-one matches, the number of treatment-control
discrepancies contributing to a match’s net discrepancy, |T(f)| + nc(f) −ms(f), may
vary, even among matches all of which place the same number of controls into matched
sets; this means that optimum solutions to f and fϵ may differ. As an example, suppose T =
{A, B, C} is to be matched with C = {X, Y, Z}, and suppose that M[A, Z] = M[B, X] =
M[B, Y ] = M[C, X] = M[C, Y ] = 1, and that other discrepancies are 0. If f1 places A,
B, and X into one matched set and C, Y, and Z into a second, while f2 matches A to X,
B to Y, and C to Z, then d(f1) = 0 and d(f2) = 1, so f1 is superior to f2. Increasing all
discrepancies by ϵ, however, dϵ(f1) = 4ϵ and dϵ(f2) = 1 + 3ϵ, so that increments of ϵ > 1
yield f.m.p.’s fϵ for which f2 is the optimal solution, not f1.
Such a shift can be avoided by setting ϵ sufﬁciently small. However, a larger ϵ is sometimes beneﬁcial: if a many-one and a one-many matched set are replaced with three or more
matched sets, then the replacing sets will generally have better treatment-control balance,
and they are sure to support at least one additional matched comparison. For this reason,
we call ϵ a stability increment. In practice, there is a trade-off to be made between, on
the one hand, enhancing treatment-control balance—across matched sets, homogeneity in
their ratios of the number of control to treatment units—and, on the other hand, reducing treatment-control discrepancies—within matched sets, dissimilarity among treated and
control units. In our R implementation of the algorithm, only a small ϵ is added by default;
but the user is free to add a larger stability increment.
COMPUTATIONAL EFFICIENCY OF FULL MATCHING VIA NETWORK FLOWS
The min-cost ﬂow problem has been widely studied, and a variety of algorithms for it
exist.Attheirworst,thatisonproblemsspeciﬁcallydesignedtoexploittheirweaknesses,the
better algorithms work in pseudopolynomial time, meaning that the number of computations
required to execute them is bounded by a polynomial in the number of nodes, N, the
number of arcs, A, the greatest arc cost, C, and the largest absolute supply at an arc . For example, Bertsekas and Tseng’s RELAX-IV
algorithm, which is the min-cost ﬂow solver supporting our R function, terminates within
O(NA log(NC)) steps, and often much sooner. Now in our networks, N = |T|+|C|+2 =
n + 2 and A ≤|T| · |C| ≤n2, so with RELAX-IV a f.m.p. can be solved in no more
than O(n3 log(n max(M[t, c]))) steps. By comparison, squaring an n × n matrix in the
conventional way involves O(n3) steps. As n increases, the time required for the most
difﬁcult full matching problem with a sample of size n increases faster than does the time
required to square a n × n matrix—but only slightly faster.
For matching with a varying number of controls, that is, for problems that forbid manyone matches, only, Ming and Rosenbaum described an optimal matching algorithm
with a slightly better time complexity bound, namely O(n3). We suspect that for many
problems, our approach’s disadvantage in terms of worst-case complexity is outweighed by
B. B. HANSEN AND S. O. KLOPFER
its increased ﬂexibility. If run time should become a problem, our procedure’s performance
on large problems can be substantially improved by imposing a well-chosen caliper r, that
is, replacing {M[t, c] : t ∈T, c ∈C} with {M[t, c]/[M[t, c] < r] : t ∈T, c ∈C};
the effect of this is to reduce the number of arcs in the network ﬂow problem. (Here,
[condition] = 1 if condition is true, 0 otherwise, and r/0 = ∞for r ≥0.)
EXAMPLE: MATCHING IN A GENDER EQUITY STUDY
Recall the gender equity study described in Section 1.1. As in many studies of people,
the conclusions of the study would be of interest to the study subjects themselves. In
contrast with typical human subjects, however, ours were themselves scientists, experts in
the critique of scientiﬁc work; and the results of the study could potentially expose them to
moral rebuke. It would be necessary to provide a baseline analysis with as few assumptions
and implementation decisions as possible, the justiﬁcation of which would be transparent
and, as nearly as possible, beyond reproach.
To begin, it was decided that for this baseline analysis, men and women would be
candidates for comparison only if they held the same rank in the same department, if they
differed in total grant funding by a factor of no more than 100, and if they differed in grants
awarded to them as principal investigators by no more than a factor of ten. The basis for
these decisions will not be reviewed here, except to note that they were relatively stringent,
excluding about half of the 886 initial members of the sample, and that they were made after
inspection of the covariate characteristics of the sample, including gender, but before any
consideration of outcomes. Every professor with a counterpart meeting these conditions
would be included in the comparison. So individualized an inclusion criterion can be met
within the framework of full matching, but not with other matched designs.
Within the conﬁnes thus set, however, a variety of matchings would still be possible. For
permissible pairings (t, c), discrepancies M[t, c] must be chosen; we use the Mahalanobis
distance between t and c in terms of logs of the grant-funding variables. Then a method of
matchingmustbechosen.Thesimplestmethodguaranteeingamatchforeachprofessorwith
a suitable counterpart would be full matching without restrictions. However, declining to
impose restrictions on treatment-control balance might lead to matched sets that vary greatly
in their relative proportions of treatment and control subjects, even if a conﬁguration closer
to k:1 matching could be achieved with little increase in net discrepancy; this variation
makes matched inferences less precise.
To minimize variation in the matched sets’ treatment-to-control proportions, for each
department and rank combination we ﬁrst used a line search to determine the maximum
feasible value of value of min.controls in calls to fullmatch(), which reports on a
matching problem’s feasibility by default. With min.controls set to the number thus
determined, the smallest feasible value of max.controls was set for each department and
rank in a similar fashion. Such a tuning of matched sets’ treatment-control balance can
substantially reduce the variance of the estimates that result . It would not
have been possible with common greedy approaches to matching, because their failure to
produce a matching of a desired type does not prove that such a matching does not exist.
OPTIMAL FULL MATCHING AND RELATED DESIGNS VIA NETWORK FLOWS
OPTMATCH provides convenience functions, minControlsCap and maxControlsCap, to
perform the necessary line searches.
The matching that resulted supported comparisons of lab and ofﬁce space in 24 departments. These were made nonparametrically, using the aligned rank procedure of Hodges
and Lehmann , with space assignment in square feet as the outcome measure. [A
description of this method can also be found in Section 2.4.3 of Rosenbaum .] Only
one department showed a signiﬁcant (p = 0.01) difference between men and women, with
women having smaller space assignments than their matched counterparts.
Using our method, each of the four women of this department was matched to between
three and sixteen men (inclusive). A method of matching that does not allow ﬂexibility in
the number of controls per treated subject might have matched in pairs, triples, or 3:1 con-
ﬁgurations. The R add-on package MATCHIT, either through a call to OPTMATCH or through
a greedy algorithm, ﬁnds k:1 matches . Using the greedy algorithm and the
given data for this department, MATCHIT produces the same 1:1 and 3:1 matches as does our
optimal approach. With the pair match, however, the difference between men and women
falls just short of statistical signiﬁcance (p = 0.06). In the 3:1 match, full matching’s ﬁnding of signiﬁcance is reproduced. However, when tests are inverted to produce a conﬁdence
interval for the effect of gender, putatively additive, 3:1 matching’s interval runs from 190
to 2,120 square feet in favor of men, while restricted full matching’s interval is 120 to 1,520
square feet in favor of men—about 30% shorter, a noteworthy improvement of precision.
Furthermore, without optimal matching it would have been difﬁcult to determine that 3:1
but not 5:1 matching, for instance, could have respected our constraints on which pairs
should and should not be placed in the same matched sets. Once that had been determined,
optimal full matching with restrictions still showed a substantial advantage over greedy k:1
matching; but in this case that advantage was due to its added ﬂexibility rather than to its
ability to ﬁnd demonstrably optimal matches with certainty.
APPENDIX: PROOF OF LEMMA 2
For each arc (t, c) of nwk(f), put lf = 1 if f matches t to c, lf = 0 otherwise.
This ensures that the subgraph (T, C, {(t, c) : l(t, c) = 1}) is that representing f, so that
sc(lf) = f, provided that lf is a feasible ﬂow in nwk(f). In nwk(f), arcs out of treatment
and into control nodes have upper and lower capacities 0 and 1, respectively, so lf conforms
to nwk(f)’s rules so far.
Complete the deﬁnition of lf as follows. Write U = maxc(f), L = max(1, minc(f)),
and ˜U = max(1, 1/minc(f)). For each arc from a treatment node t to Overflow, lf = U −
(number of controls matched by f to t). Then U units ﬂow out of t, as required to balance
its supply of dt = U, while the ﬂow through the arc (t, Overflow) is within the permissible
range [0, U −L]. If c is a control node that is not matched by f to any treatment node, then
lf(c, Overflow) = lf(c, Sink) = 0. Place the remaining control nodes into some order; in
the event that there are control nodes matched by f to as many as ˜U treatment nodes, see to
it that these come before others in this ordering. For arcs e out of these control nodes, set
lf(e) as follows. To begin, if c is a control node matched to k ≥1 treatment nodes, then
B. B. HANSEN AND S. O. KLOPFER
set lf(c, Overflow) = k −1 and lf(c, Sink) = 1. Continue setting ﬂows out of control
nodes c in this fashion until nc(f) units of ﬂow have been directed to Sink. Since nc(f) is
no larger than than the number of control units matched to some treatment unit by f, Sink
will receive its full nc(f) units of ﬂow.
At this point, there may remain control nodes, matched by f to some treatment node, the
outﬂows of which have yet to be speciﬁed. Note that, if this is the case, then the remaining
control units must be matched by f to fewer than ˜U treated units, since otherwise |T| would
have to exceed ˜U ·nc(f), contrary to the assumption that f is well-speciﬁed. For such c ∈C
set lf(c, Sink) = 0 and lf(c, Overflow) = k, where k is the number of treatment units
matched to c by f. In each of these cases, lf(c, Overflow) and lf(c, Sink) lie in their
permitted capacity ranges of and [0, ˜U −1], respectively, and ﬂow out of c is the same
as ﬂow into it. As Sink receives nc(f) units of ﬂow, its inﬂow matches the demand on it
placed by nwk(f); and Overflow receives all remaining ﬂow originating from treatment
nodes, as required by nwk(f).
ACKNOWLEDGMENTS
The ﬁrst author’s work was partially supported by a National Science Foundation Fellowship (DMS-0102056).
Both authors thank Paul R. Rosenbaum, for very helpful advice, and an anonymous referee, for valuable comments
on the article.
[Received January 2005. Revised November 2005.]