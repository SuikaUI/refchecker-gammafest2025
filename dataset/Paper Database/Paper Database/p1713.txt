Auto-Encoding Scene Graphs for Image Captioning
Xu Yang, Kaihua Tang, Hanwang Zhang, Jianfei Cai
School of Computer Science and Engineering,
Nanyang Technological University,
{s170018@e,kaihua001@e}.ntu.edu.sg,{hanwangzhang@,ASJFCai@}ntu.edu.sg
We propose Scene Graph Auto-Encoder (SGAE) that incorporates the language inductive bias into the encoderdecoder image captioning framework for more human-like
captions. Intuitively, we humans use the inductive bias to
compose collocations and contextual inference in discourse.
For example, when we see the relation “person on bike”,
it is natural to replace “on” with “ride” and infer “person riding bike on a road” even the “road” is not evident. Therefore, exploiting such bias as a language prior
is expected to help the conventional encoder-decoder models less likely overﬁt to the dataset bias and focus on reasoning. Speciﬁcally, we use the scene graph — a directed
graph (G) where an object node is connected by adjective
nodes and relationship nodes — to represent the complex
structural layout of both image (I) and sentence (S). In the
textual domain, we use SGAE to learn a dictionary (D) that
helps to reconstruct sentences in the S →G →D →S
pipeline, where D encodes the desired language prior; in
the vision-language domain, we use the shared D to guide
the encoder-decoder in the I →G →D →S pipeline.
Thanks to the scene graph representation and shared dictionary, the inductive bias is transferred across domains
in principle. We validate the effectiveness of SGAE on the
challenging MS-COCO image captioning benchmark, e.g.,
our SGAE-based single-model achieves a new state-of-theart 127.8 CIDEr-D on the Karpathy split, and a competitive
125.5 CIDEr-D (c40) on the ofﬁcial server even compared
to other ensemble models. Code has been made available
at: 
1. Introduction
Modern image captioning models employ an end-to-end
encoder-decoder framework , i.e., the encoder encodes an image into vector representations and then
the decoder decodes them into a language sequence. Since
its invention inspired from neural machine translation ,
this framework has experienced several signiﬁcant upgrades
Dictionary
“a man with a red
helmet riding a
motorcycle down a
countryside dirt
Motorcycle
Countryside
Figure 1. Illustration of auto-encoding scene graphs (blue arrows)
into the conventional encoder-decoder framework for image captioning (red arrows), where the language inductive bias is encoded in the trainable shared dictionary. Word colors correspond
to nodes in image and sentence scene graphs.
such as the top-bottom and bottom-up visual attentions for dynamic encoding, and the reinforced mechanism
for sequence decoding . However, a ubiquitous
problem has never been substantially resolved: when we
feed an unseen image scene into the framework, we usually get a simple and trivial caption about the salient objects
such as “there is a dog on the ﬂoor”, which is no better than
just a list of object detection . This situation is particularly embarrassing in front of the booming “mid-level”
vision techniques nowadays: we can already detect and segment almost everything in an image .
We humans are good at telling sentences about a visual
scene. Not surprisingly, cognitive evidences show that
the visually grounded language generation is not end-toend and largely attributed to the “high-level” symbolic reasoning, that is, once we abstract the scene into symbols,
the generation will be almost disentangled from the visual
perception. For example, as shown in Figure 1, from the
scene abstraction “helmet-on-human” and “road dirty”, we
can say “a man with a helmet in countryside” by using the
common sense knowledge like “country road is dirty”. In
fact, such collocations and contextual inference in human
language can be considered as the inductive bias that is
apprehended by us from everyday practice, which makes
us performing better than machines in high-level reasoning . However, the direct exploitation of the inductive
bias, e.g., early template/rule-based caption models ,
is well-known ineffective compared to the encoder-decoder
ones, due to the large gap between visual perception and
language composition.
In this paper, we propose to incorporate the inductive
bias of language generation into the encoder-decoder framework for image captioning, beneﬁting from the complementary strengths of both symbolic reasoning and end-to-end
multi-modal feature mapping. In particular, we use scene
graphs to bridge the gap between the two worlds.
A scene graph (G) is a uniﬁed representation that connects
1) the objects (or entities), 2) their attributes, and 3) their
relationships in an image (I) or a sentence (S) by directed
edges. Thanks to the recent advances in spatial Graph Convolutional Networks (GCNs) , we can embed the
graph structure into vector representations, which can be
seamlessly integrated into the encoder-decoder. Our key insight is that the vector representations are expected to transfer the inductive bias from the pure language domain to the
vision-language domain.
Speciﬁcally, to encode the language prior, we propose
the Scene Graph Auto-Encoder (SGAE) that is a sentence
self-reconstruction network in the S →G →D →S
pipeline, where D is a trainable dictionary for the reencoding purpose of the node features, the S →G module
is a ﬁxed off-the-shelf scene graph language parser , and
the D →S is a trainable RNN-based language decoder .
Note that D is the “juice” — the language inductive bias
— we extract from training SGAE. By sharing D in the
encoder-decoder training pipeline: I →G →D →S,
we can incorporate the language prior to guide the end-toend image captioning. In particular, the I →G module
is a visual scene graph detector and we introduce a
multi-modal GCN for the G →D module in the captioning pipeline, to complement necessary visual cues that are
missing due to the imperfect visual detection. Interestingly,
D can be considered as a working memory that helps
to re-key the encoded nodes from I or S to a more generic
representation with smaller domain gaps. More motivations
and the incarnation of D will be discussed in Section 4.3.
We implement the proposed SGAE-based captioning
model by using the recently released visual encoder 
and language decoder with RL-based training strategy . Extensive experiments on MS-COCO validates the superiority of using SGAE in image captioning.
Particularly, in terms of the popular CIDEr-D metric ,
we achieve an absolute 7.2 points improvement over a
strong baseline:
an upgraded version of Up-Down .
Then, we advance to a new state-of-the-art single-model
achieving 127.8 on the Karpathy split and a competitive
125.5 on the ofﬁcial test server even compared to many ensemble models.
In summary, we would like to make the following technical contributions:
• A novel Scene Graph Auto-Encoder (SGAE) for learning
the feature representation of the language inductive bias.
• A multi-modal graph convolutional network for modulating scene graphs into visual representations.
• A SGAE-based encoder-decoder image captioner with a
shared dictionary guiding the language decoding.
2. Related Work
Image Captioning. There is a long history for researchers
to develop automatic image captioning methods. Compared
with early works which are rules/templates based , the modern captioning models have achieved striking
advances by three techniques inspired from the NLP ﬁeld,
i.e., encoder-decoder based pipeline , attention technique , and RL-based training objective . Afterwards, researchers tried to discover more semantic information from images and incorporated them into captioning
models for better descriptive abilities. For example, some
methods exploit object , attribute , and relationship knowledge into their captioning models. Compared with these approaches, we use the scene graph as the
bridge to integrate object, attribute, and relationship knowledge together to discover more meaningful semantic contexts for better caption generations.
Scene Graphs. The scene graph contains the structured semantic information of an image, which includes the knowledge of present objects, their attributes, and pairwise relationships. Thus, the scene graph can provide a beneﬁcial
prior for other vision tasks like VQA ,image generation , and visual grounding . By observing the
potential of exploiting scene graphs in vision tasks, a variety of approaches are proposed to improve the scene graph
generation from images . On the
another hand, some researchers also tried to extract scene
graphs only from textual data . In this research, we
use to parse scene graphs from images and to parse
scene graphs from captions.
Memory Networks.
Recently, many researchers try to
augment a working memory into network for preserving
a dynamic knowledge base for facilitating subsequent inference . Among these methods, differentiable
attention mechanisms are usually applied to extract useful
knowledge from memory for the tasks at hand. Inspired by
these methods, we also implement a memory architecture
to preserve humans’ inductive bias, guiding our image captioning model to generate more descriptive captions.
Dictionary
Dictionary
Figure 2. Top: the conventional encoder-decoder. Bottom: our
proposed encoder-decoder, where the novel SGAE embeds the
language inductive bias in the shared dictionary.
3. Encoder-Decoder Revisited
As illustrated in Figure 2, given an image I, the target of
image captioning is to generate a natural language sentence
S = {w1, w2, ..., wT } describing the image. A state-of-theart encoder-decoder image captioner can be formulated as:
Usually, an encoder is a Convolutional Neural Network
(CNN) that extracts the image feature V; the map is
the widely used attention mechanism that re-encodes
the visual features into more informative ˆV that is dynamic
to language generation; a decoder is an RNN-based language decoder for the sequence prediction of S. Given a
ground truth caption S∗for I, we can train this encoderdecoder model by minimizing the cross-entropy loss:
LXE = −log P(S∗),
or by maximizing a reinforcement learning (RL) based reward as:
RRL = ESs∼P (S)[r(Ss; S∗)],
where r is a sentence-level metric for the sampled sentence
Ss and the ground-truth S∗, e.g., the CIDEr-D metric.
This encoder-decoder framework is the core pillar underpinning almost all state-of-the-art image captioners
since . However, it is widely shown brittle to dataset
bias . We propose to exploit the language inductive
bias, which is beneﬁcial, to confront the dataset bias, which
is pernicious, for more human-like image captioning. As
shown in Figure 2, the proposed framework is formulated
ˆV ←R(V, G; D), G ←V,
As can be clearly seen that we focus on modifying the Map
module by introducing the scene graph G into a re-encoder
R parameterized by a shared dictionary D. As we will detail in the rest of the paper, we ﬁrst propose a Scene Graph
Auto-Encoder (SGAE) to learn the dictionary D which embeds the language inductive bias from sentence to sentence
self-reconstruction (cf. Section 4) with the help of scene
graphs. Then, we equip the encoder-decoder with the proposed SGAE to be our overall image captioner (cf. Section 5). Speciﬁcally, we use a novel Multi-modal Graph
Convolutional Network (MGCN) (cf. Section 5.1) to reencode the image features by using D, narrowing the gap
between vision and language.
4. Auto-Encoding Scene Graphs
In this section, we will introduce how to learn D through
self-reconstructing sentence S.
As shown in Figure 2,
the process of reconstructing S is also an encoder-decoder
pipeline. Thus, by slightly abusing the notations, we can
formulate SGAE as:
X ←R(X; D),
Next, we will detail every component mentioned in Eq. (5).
4.1. Scene Graphs
We introduce how to implement the step G ←S, i.e.,
from sentence to scene graph. Formally, a scene graph is a
tuple G = (N, E), where N and E are the sets of nodes and
edges, respectively. There are three kinds of nodes in N:
object node o, attribute node a, and relationship node r. We
denote oi as the i-th object, rij as the relationship between
object oi and oj, and ai,l as the l-th attribute of object oi.
For each node in N, it is represented by a d-dimensional
vector, i.e., eo, ea, and er. In our implementation, d is set
to 1, 000. In particular, the node features are trainable label
embeddings. The edges in E are formulated as follows:
• if an object oi owns an attribute ai,l, assigning a directed edge from ai,l to oi;
• if there is one relationship triplet < oi −rij −oj >
appearing, assigning two directed edges from oi to rij
and from rij to oj, respectively.
Figure 3. Graph Convolutional Network. In particular, it is spatial
convolution, where the colored neighborhood is “convolved” for
the resultant embedding.
Figure 3 shows one example of G, which contains 7 nodes
in N and 6 directed edges in E.
We use the scene graph parser provided by for scene
graphs G from sentences, where a syntactic dependency tree
is built by and then a rule-based method is applied
for transforming the tree to a scene graph.
4.2. Graph Convolution Network
We present the implementation for the step X ←G in
Eq. (5), i.e., how to transform the original node embeddings eo, ea, and er into a new set of context-aware embeddings X. Formally, X contains three kinds of d-dimensional
embeddings: relationship embedding xrij for relationship
node rij, object embedding xoi for object node oi, and attribute embedding xai for object node oi. In our implementation, d is set to 1, 000. We use four spatial graph convolutions: gr, ga, gs, and go for generating the above mentioned
three kinds of embeddings. In our implementation, all these
four functions have the same structure with independent parameters: a vector concatenation input to a fully-connected
layer, followed by an ReLU.
Relationship Embedding xrij:
Given one relationship
triplet < oi −rij −oj > in G, we have:
xrij = gr(eoi, erij, eoj),
where the context of a relationship triplet is incorporated
together. Figure 3 (a) shows such an example.
Attribute Embedding xai: Given one object node oi with
all its attributes ai,1:Nai in G, where Nai is the number of
attributes that the object oi has, then xai for oi is:
ga(eoi, eai,l),
where the context of this object and all its attributes are incorporated. Figure 3 (b) shows such an example.
Object Embedding xoi: In G, oi can act as “subject” or
“object” in relationships, which means oi will play different
roles due to different edge directions. Then, different functions should be used to incorporate such knowledge. For
avoiding ambiguous meaning of the same “predicate” in different context, knowledge of the whole relationship triplets
Figure 4. The visualization of the re-encoder function R. The
black dashed block shows the operation of re-encoding. The top
part demonstrates how “imagination” is achieved by re-encoding:
green line shows the generated phrase by re-encoding, while the
red line shows the one without re-encoding.
where oi appears should be incorporated into xoi. One simple example for ambiguity is that, in <hand-with-cup>, the
predicate “with” may mean “hold”, while in <head-withhat>, “with” may mean “wear”. Therefore, xoi can be calculated as:
oj∈sbj(oi)
gs(eoi, eoj, erij)
ok∈obj(oi)
go(eok, eoi, erki)].
For each node oj ∈sbj(oi), it acts as “object” while oi
acts as “subject”, e.g., sbj(o1) = {o2} in Figure 3 (c).
Nri = |sbj(i)| + |obj(i)| is the number of relationship
triplets where oi is present. Figure 3 (c) shows this example.
4.3. Dictionary
Now we introduce how to learn the dictionary D and
then use it to re-encode ˆ
X ←R(X; D) in Eq. (5). Our
key idea is inspired by using the working memory to preserve a dynamic knowledge base for run-time inference,
which is widely used in textual QA , VQA , and
one-shot classiﬁcation .
Our D aims to embed language inductive bias in language composition. Therefore,
we propose to place the dictionary learning into the sentence self-reconstruction framework. Formally, we denote
D as a d × K matrix D = {d1, d2, ..., dK}. The K is set
as 10, 000 in implementation. Given an embedding vector
x ∈X, the re-encoder function RD can be formulated as:
ˆx = R(x; D) = Dα =
where α = softmax(DT x) can be viewed as the “key” operation in memory network . As shown in Figure 4,
this re-encoding offers some interesting “imagination” in
human common sense reasoning. For example, from “yellow and dotted banana”, after re-encoding, the feature will
be more likely to generate “ripe banana”.
We deploy the attention structure in for reconstructing S. Given a reconstructed S, we can use the training objective in Eq. (2) or (3) to train SGAE parameterized by D in
an end-to-end fashion. Note that training SGAE is unsupervised, that is, SGAE offers a potential never-ending learning
from large-scale unsupervised inductive bias learning for D.
Some preliminary studies are reported in Section 6.2.2.
5. Overall Model:
SGAE-based Encoder-
In this section, we will introduce the overall model:
SGAE-based Encoder-Decoder as sketched in Figure 2 and
5.1. Multi-modal Graph Convolution Network
The original image features extracted by CNN are not
ready for use for the dictionary re-encoding as in Eq. (9),
due to the large gap between vision and language. To this
end, we propose a Multi-modal Graph Convolution Network (MGCN) to ﬁrst map the visual features V into a set
of scene graph-modulated features V′.
Here, the scene graph G is extracted by an image scene
graph parser that contains an object proposal detector, an attribute classiﬁer, and a relationship classiﬁer. In our implementation, we use Faster-RCNN as the object detector ,
MOTIFS relationship detector as the relationship classiﬁer, and we use our own attribute classiﬁer: an small fc-
ReLU-fc-Softmax network head. The key representation
difference between the sentence-parsed G and the imageparsed G is that the node oi is not only the label embedding. In particular, we use the RoI features pre-trained from
Faster RCNN and then fuse the detected label embedding
eoi with the visual feature voi, into a new node feature uoi:
uoi = ReLU(W1eoi + W2voi) −(W1eoi −W2voi)2.
where W1 and W2 are the fusion parameters following . Compared to the popular bi-linear fusion ,
Eq (10) is empirically shown a faster convergence of training the label embeddings in our experiments. The rest node
embeddings: urij and uai are obtained in a similar way.
The differences between two scene graphs generated from
I and S are visualized in Figure 1, where the image G is
usually more simpler and nosier than the sentence G.
Similar to the GCN used in Section 4.2, MGCN also has
an ensemble of four functions fr, fa, fs and fo, each of
which is a two-layer structure: fc-ReLU with independent
parameters. And the computation of relationship, attribute
and object embeddings are similar to Eq. (6), Eq. (7), and
Eq. (8), respectively. After computing V′ by using MGCN,
we can adopt Eq. (9) to re-encode V′ as ˆV and feed ˆV to the
decoder for generating language S. In particular, we deploy
the attention structure in for the generation.
5.2. Training and Inference
Following the common practice in deep-learning feature
transfer , we use the SGAE pre-trained D as the initialization for the D in our overall encoder-decoder for image captioning. In particular, we intentionally use a very
small learning rate (e.g., 10−5) for ﬁne-tuning D to impose
the sharing purpose. The overall training loss is hybrid: we
use the cross-entropy loss in Eq. (2) for 20 epochs and then
use the RL-based reward in Eq. (3) for another 40 epochs.
For inference in language generation, we adopt the beam
search strategy with a beam size of 5.
6. Experiments
6.1. Datasets, Settings, and Metrics
MS-COCO .
There are two standard splits of
MS-COCO: the ofﬁcial online test split and the 3rdparty Karpathy split for ofﬂine test.
The ﬁrst split
has 82, 783/40, 504/40, 775 train/val/test images, each of
which has 5 human labeled captions. The second split has
113, 287/5, 000/5, 000 train/val/test images, each of which
has 5 captions.
Visual Genome (VG). This dataset has abundant scene
graph annotations, e.g., objects’ categories, objects’ attributes, and pairwise relationships, which can be exploited
to train the object proposal detector, attribute classiﬁer, and
relationship classiﬁer as our image scene graph parser.
Settings. For captions, we used the following steps to preprocess the captions: we ﬁrst tokenized the texts on white
space; then we changed all the words to lowercase; we also
deleted the words which appear less than 5 times; at last, we
trimmed each caption to a maximum of 16 words. This results in a vocabulary of 10, 369 words. This pre-processing
was also applied in VG. It is noteworthy that except for ablative studies, these additional text descriptions from VG
were not used for training the captioner. Since the object,
attribute, and relationship annotations are very noisy in VG
dataset, we ﬁlter them by keeping the objects, attributes,
and relationships which appear more than 2, 000 times in
the training set. After ﬁltering, the remained 305 objects,
103 attributes, and 64 relationships are used to train our object detector, attribute classiﬁer and relationship classiﬁer.
We chose the language decoder proposed in . The
number of hidden units of both LSTMs used in this decoder
is set to 1000. For training SGAE in Eq. (5), the decoder is
ﬁrstly set as S ←X and D is not trained to learn a rudiment encoder and decoder. We used the corss-entropy loss
in Eq. (2) to train them for 20 epochs. Then the decoder
was set as S ←ˆ
X to train D by cross-entropy loss for another 20 epochs. The learning rate was initialized to 5e−4
for all parameters and we decayed them by 0.8 for every 5
epochs. For training our SGAE-based encoder-decoder, we
followed Eq. (4) to generate S with shared D pre-trained
Table 1. The performances of various methods on MS-COCO
Karpathy split.
The metrics:
B@N, M, R, C and S denote
BLEU@N, METEOR, ROUGE-L, CIDEr-D and SPICE. Note
that the fuse subscript indicates fused models while the rest methods are all single models. The best results for each metric on fused
models and single models are marked in boldface separately.
LSTM-A 
StackCap 
Up-Down 
GCN-LSTM† 
GCN-LSTM 
Base+D w/o GCN
GCN-LSTMfuse 
from SGAE. The decoder was set as S ←{ˆV, V′}, where
V′ and ˆV can provide visual clues and high-level semantic contexts respectively. In this process, cross-entropy loss
was ﬁrst used to train the network for 20 epochs and then the
RL-based reward was used to train for another 80 epochs.
The learning rate for D was initialized to 5e−5 and for other
parameters it was 5e−4, and all these learning rates were decayed by 0.8 for every 5 epochs. Adam optimizer was
used for batch size 100.
We used ﬁve standard automatic evaluations metrics: CIDEr-D , BLEU , METEOR ,
ROUGE and SPICE .
6.2. Ablative Studies
We conducted extensive ablations for architecture (Section 6.2.1), language corpus (Section 6.2.2), and sentence
reconstruction quality (Section 6.2.3). For simplicity, we
use SGAE to denote our SGAE-based encoder-decoder
captioning model.
Architecture
Comparing Methods. For quantifying the importance of
the proposed GCN, MGCN, and dictionary D, we ablated
our SGAE with the following baselines: Base: We followed
the pipeline given in Eq (1) without using GCN, MGCN,
and D. This baseline is the benchmark for other ablative
baselines. Base+MGCN: We added MGCN to compute the
multi-modal embedding set ˆV. This baseline is designed for
validating the importance of MGCN. Base+D w/o GCN:
We learned D by using Eq. (5), while GCN is not used and
only word embeddings of S were input to the decoder. Also,
MGCN in Eq. (4) is not used. This baseline is designed for
validating the importance of GCN. Base+D: Compared to
Table 2. The performances of using different language corpora
Table 3. The performances of using different scene graphs
Table 4. The performances of various methods on MS-COCO
Karpathy split trained by cross-entropy loss only.
LSTM-A 
StackCap 
Up-Down 
GCN-LSTM 
Base, we learned D by using GCN. And MGCN in Eq. (4)
was not used. This baseline is designed for validating the
importance of the shared D.
Results. The middle section of Table 1 shows the performances of the ablative baselines on MS-COCO Karpathy
split. Compared with Base, our SGAE can boost the CIDEr-
D by absolute 7.2. By comparing Base+MGCN, Base+D
w/o GCN, and Base+D with Base, we can ﬁnd that all
the performances are improved, which demonstrate that the
proposed MGCN, GCN, and D are all indispensable for advancing the performances. We can also observe that the performances of Base+D or Base+D w/o GCN are better than
Base+MGCN, which suggests that the language inductive
bias plays an important role in generating better captions.
Qualitative Examples.
Figure 5 shows 6 examples of
the generated captions using different baselines.
can see that compared with captions generated by Base,
Base+MGCN’s descriptions usually contain more descriptions about objects’ attributes and pairwise relationships.
For captions generated by SGAE, they are more complex
and descriptive. For example, in Figure 5 (a), the word
“busy” will be used to describe the heavy trafﬁc; in (b) the
scene “forest” can be deduced from “trees”; and in (d), the
weather “rain” will be inferred from “umbrella’.
Language Corpus
Comparing Methods. To test the potential of using largescale corpus for learning a better D, we used the texts
provided by VG instead of MS-COCO to learn D, and
then share the learned D in the encoder-decoder pipeline.
The results are demonstrated in Table 2, where VG and
(e): 325557
(f): 396209
BASE: a motorcycle parked on the side of
BASE+MGCN: a motorcycle parked on the
side of a road
SGAE: a motorcycle is parked on the
gravel road
GT: a motor bike parked on the side of
the road by the bushes
BASE: a motorcycle parked on the side of
BASE+MGCN: a motorcycle parked on the
side of a road
SGAE: a motorcycle is parked on the
gravel road
GT: a motor bike parked on the side of
the road by the bushes
BASE: a city street with many cars
BASE+MGCN: a city street with many cars
SGAE: a busy highway filled with lots of
GT: there are many cars and buses on the
busy highway
BASE: a city street with many cars
BASE+MGCN: a city street with many cars
SGAE: a busy highway filled with lots of
GT: there are many cars and buses on the
busy highway
(b): 45710
(a): 553879
(c): 76529
(d):177861
BASE: a building with a chair on the side
BASE+MGCN: a street with a motorbike
and a chair on it
SGAE: a narrow alley with a chair and a
motorbike on the side of it
GT: a narrow alley way with a chair by the
BASE: a building with a chair on the side
BASE+MGCN: a street with a motorbike
and a chair on it
SGAE: a narrow alley with a chair and a
motorbike on the side of it
GT: a narrow alley way with a chair by the
BASE: a building with a chair on the side
BASE+MGCN: a street with a motorbike
and a chair on it
SGAE: a narrow alley with a chair and a
motorbike on the side of it
GT: a narrow alley way with a chair by the
BASE: a couple of elephants walking in a
BASE+MGCN: two elephants walking in
the grass in a field
SGAE: a couple of elephants walking
through a lush green forest
GT: two elephants standing in grassy area
with trees around
BASE: a couple of elephants walking in a
BASE+MGCN: two elephants walking in
the grass in a field
SGAE: a couple of elephants walking
through a lush green forest
GT: two elephants standing in grassy area
with trees around
BASE: a banana sitting on top of a bowl
BASE+MGCN: a cup of coffee next to a
yellow banana
SGAE: a cup of coffee next to a ripe
GT: an over ripened banana and a cup of
BASE: a banana sitting on top of a bowl
BASE+MGCN: a cup of coffee next to a
yellow banana
SGAE: a cup of coffee next to a ripe
GT: an over ripened banana and a cup of
BASE: a person walking in the street
BASE+MGCN: a person walking in the
street with a black umbrella
SGAE: a person walking down street with
a black umbrella in the rain
GT: a group of people walking down a wet
rain soaked sidewalk
BASE: a person walking in the street
BASE+MGCN: a person walking in the
street with a black umbrella
SGAE: a person walking down street with
a black umbrella in the rain
GT: a group of people walking down a wet
rain soaked sidewalk
Figure 5. Qualitative examples of different baselines. For each ﬁgure, the image scene graph is pruned to avoid clutter. The id refers to the
image id in MS-COCO. Word colors correspond to nodes in the detected scene graphs.
(b): 199247
(c): 557135
(d): 520430
(e): 173385
(f): 412813
Base: a fire hydrant sitting on the side of
Web: a black fire hydrant sitting next to a
SGAE: a green bench sitting next to a
yellow fire hydrant
GT: a fire hydrant with a bench and
building in a background
Base: a herd of sheep are laying in a field
Web: a herd of cows laying in the grass
SGAE: a herd of animals laying in a lush
green field
GT: a herd of animals laying down in a
lush green field
Base: a bathroom with two sinks
Web: a bathroom with a sink and a
SGAE: a bathroom with two sinks and a
GT: a bathroom that has two sinks and a
Base: a woman holding a wii game
controller
Web: a woman holding a game controller
SGAE: a woman holding a nintendo wii
game controller
GT: a young woman smiling holding a
video game remote
Base: an elephant is standing in front of a
Web: an elephant is standing in the sands
SGAE: an elephant is standing in the dirt
near a building
GT: an elephant is by a tire and a pile of
Base: an umbrella sitting on the beach
Web: a black umbrella sitting on the
SGAE: a black and white photo of an
umbrella on the beach
GT: an umbrella is at the beach tilted
Figure 6. Captions generated by using different language corpora.
Table 5. The performances of various methods on the online MS-
COCO test server.
LSTM-A 
StackCap 
Up-Down 
SGAEsingle
VG+COCO mean the results obtained by using texts from
VG and VG+COCO, respectively.
Results. We can observe that by using the web description
texts, the performances are boosted, which validates the potential of our proposed model in exploiting additional Web
texts. We can also see that by using texts provided by MS-
COCO itself (SGAE), the generated captions have better
scores than using Web texts. This is intuitively reasonable
since D can preserve more useful clues when a matched language corpus is given. All of these observations validate the
SGAE vs. Base
SGAE vs. Web
Web vs. Base
Comparative
Figure 7. The pie charts each comparing the two methods in human evaluation. Each color indicates the percentage of users who
consider that the corresponding method generates more descriptive captions. In particular, the gray color indicates that the two
methods are comparative.
effectiveness of D in two aspects: D can memorize common
inductive bias from the additional unmatched Web texts or
speciﬁc inductive bias from a matched language corpus. In
addition, when language corpora of both VG and COCO are
exploited, a consistent improvement can be achieved compared with the baselines where only one corpus is used.
Qualitative Examples. Figure 6 shows 6 examples of generated captions by using different language corpora. Generally, compared with captions generated by Base, the captions of Web and SGAE are more descriptive. Speciﬁcally,
the captions generated by using the matched language corpus can usually describe a scene by some speciﬁc expressions in the dataset, while more general expressions will
appear in captions generated by using Web texts. For example, in Figure 6 (b), SGAE uses “lush green ﬁeld” as GT
captions while Web uses “grass” ; or in (e), SGAE prefers
“dirt” while Web prefers “sand”.
Human Evaluation.
For better evaluating the qualities
of the generated captions by using different language corpora, we conducted human evaluation with 30 workers. We
showed them two captions generated by different methods
and asked them which one is more descriptive. For each
pairwise comparison, 100 images are randomly extracted
from the Karpathy split for them to compare. The results
of the comparisons are shown in Figure 7. From these pie
charts, we can observe that when a D is used, the generated
captions are evaluated to be more descriptive.
Sentence Reconstruction
Comparing Methods. We investigated how well the sentences are reconstructed in training SGAE in Eq. (5), with
or without using the re-encoding by D, that is, we denote
X as the pipeline using D and X as the pipeline directly
reconstructing sentences from their scene graph node features. Such results are given in Table 3.
Analysis. As we can see, the performances of using direct
scene graph features b
X are much better than those (X) imposed with D for re-encoding. This is reasonable since D
will regularize the reconstruction and thus encourages the
learning of language inductive bias. Interestingly, the gap
X and SGAE suggest that we should develop a
more powerful image scene graph parser for improving the
quality of G in Eq. (4), and a stronger re-encoder should be
designed for extracting more preserved inductive bias when
only low-quality visual scene graphs are available.
6.3. Comparisons with State-of-The-Arts
Comparing Methods. Though there are various captioning
models developed in recent years, for fair comparison, we
only compared SGAE with some encoder-decoder methods
trained by the RL-based reward (Eq. (3)), due to their superior performances. Speciﬁcally, we compared our methods with SCST , StackCap , Up-Down , LSTM-
A , GCN-LSTM , and CAVP . Among these
methods, SCST and Up-Down are two baselines where the
more advanced self-critic reward and visual features are
used. Compared with SCST, StackCap proposes a more
complex RL-based reward for learning captions with more
details. All of LSTM-A, GCN-LSTM, and CAVP try to
exploit information of visual scene graphs, e.g., LSTM-A
and GCN-LSTM exploit attributes and relationships information respectively, while CAVP tries to learn pairwise relationships in the decoder.
Noteworthy, in GCN-LSTM,
they set the batch size as 1, 024 and the training epoch as
250, which is quite large compared with some other methods like Up-Down or CAVP, and is beyond our computation
resources. For fair comparison, we also re-implemented a
version of their work (since they do not publish the code),
and set the batch size and training epoch both as 100, such
result is denoted as GCN-LSTM† in Table 1. In addition,
the best result reported by GCN-LSTM is obtained by fusing two probabilities computed from two different kinds of
relationships, which is denoted as GCN-LSTMfuse, and our
counterpart is denoted as SGAEfuse.
Analysis. From Table 1 and 4, we can see that our single model can outperform the other image captioners. In
particular, when both cross-entropy loss and RL reward are
used, our single model can achieve a new state-of-the-art
score among all the compared methods in terms of CIDEr-
D, 127.8. And compared with GCN-LSTMfuse, our fusion
model SGAEfuse also achieves better performances. By
exploiting the inductive bias in D, even when our decoder
or RL-reward is not as sophisticated as CVAP or Stack-
Cap, our method still has better performances. Moreover,
our small batch size and fewer training epochs still lead to
higher performances than GCN-LSTM, whose batch size
and training epochs are much larger. Table 5 reports the performances of different methods test on the ofﬁcial server.
Compared with the published captioning methods , our single model has competitive performances and can achieve the highest CIDEr-D score.
7. Conclusions
We proposed to incorporate the language inductive bias
— a prior for more human-like language generation — into
the prevailing encoder-decoder framework for image captioning. In particular, we presented a novel unsupervised
learning method: Scene Graph Auto-Encoder (SGAE), for
embedding the inductive bias into a dictionary, which can be
shared as a re-encoder for language generation and significantly improves the performance of the encoder-decoder.
We validated the SGAE-based framework by extensive ablations and comparisons with state-of-the-art performances
on MS-COCO. As we believe that SGAE is a general solution for capturing the language inductive bias, we are going
to apply it in other vision-language tasks.
Acknowledgements.
This work is partially supported
Intelligence
NTU-Alibaba