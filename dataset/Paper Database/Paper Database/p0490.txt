A Deep and Autoregressive Approach for
Topic Modeling of Multimodal Data
Department of Electronic Engineering,
Tsinghua University,
Beijing, China, 10084
 
Yu-Jin Zhang
Department of Electronic Engineering
Tsinghua University,
Beijing, China, 10084
 
Hugo Larochelle
D´epartment d’Informatique
Universit´e de Sherbrooke, Sherbrooke (QC), Canada, J1K 2R1
 
January 1, 2016
Topic modeling based on latent Dirichlet allocation (LDA) has been a framework of choice to deal with multimodal data, such as in image annotation tasks. Another popular approach to model the multimodal data is through
deep neural networks, such as the deep Boltzmann machine (DBM). Recently, a new type of topic model called the
Document Neural Autoregressive Distribution Estimator (DocNADE) was proposed and demonstrated state-of-theart performance for text document modeling. In this work, we show how to successfully apply and extend this model
to multimodal data, such as simultaneous image classiﬁcation and annotation. First, we propose SupDocNADE, a
supervised extension of DocNADE, that increases the discriminative power of the learned hidden topic features and
show how to employ it to learn a joint representation from image visual words, annotation words and class label information. We test our model on the LabelMe and UIUC-Sports data sets and show that it compares favorably to other
topic models. Second, we propose a deep extension of our model and provide an efﬁcient way of training the deep
model. Experimental results show that our deep model outperforms its shallow version and reaches state-of-the-art
performance on the Multimedia Information Retrieval (MIR) Flickr data set.
Introduction
Multimodal data modeling, which combines information from different sources, is increasingly attracting attention in
computer vision . One of the leading approaches is based on topic modelling, the most popular
model being latent Dirichlet allocation or LDA . LDA is a generative model for documents that originates from the
natural language processing community, but has had great success in computer vision . LDA models a document
as a multinomial distribution over topics, where a topic is itself a multinomial distribution over words. While the
distribution over topics is speciﬁc for each document, the topic-dependent distributions over words are shared across
all documents. Topic models can thus extract a meaningful, semantic representation from a document by inferring its
latent distribution over topics from the words it contains. In the context of computer vision, LDA can be used by ﬁrst
extracting so-called “visual words” from images, convert the images into visual word documents and training an LDA
topic model on the bags of visual words. To deal with multimodal data, some variants of LDA have been proposed
recently . For instance, Correspondence LDA (Corr-LDA) was proposed to discover the relationship
between images and annotation modalities, by assuming each image topic must have a corresponding text topic.
Multimodal LDA generalizes Corr-LDA by learning a regression module relating the topics from the different
 
Visual word
Annotation
Classification
Annotation
Figure 1: Illustration of a single hidden layer SupDocNADE model for multimodal image data. Visual words, annotation words and class label y are modeled as p(v, y) = p(y|v) Q
i p(vi|v1, . . . , vi−1). All conditionals p(y|v)
and p(vi|v1, . . . , vi−1) are modeled using neural networks with shared weights. Each predictive word conditional
p(vi|v1, . . . , vi−1) (noted ˆvi for brevity) follows a tree decomposition where each leaf is a possible word. At test time,
the annotation words are not used (trated with a dotted box) to compute the image’s topic feature representation.
modalities. Multimodal Document Random Field Model (MDRF) was also proposed to deal with multimodal data,
which learns cross-modality similarities from a document corpus containing multinomial data. Besides the annotation
words, the class label modality can also be embedded into LDA, such as in supervised LDA (sLDA) . By
modeling the image visual words, annotation words and their class labels, the discriminative power of the learned
image representations could thus be improved.
At the heart of most topic models is a generative story in which the image’s latent representation is generated ﬁrst
and the visual words are subsequently produced from this representation. The appeal of this approach is that the task
of extracting the representation from observations is easily framed as a probabilistic inference problem, for which
many general purpose solutions exist. The disadvantage however is that as a model becomes more sophisticated,
inference becomes less trivial and more computationally expensive. In LDA for instance, inference of the distribution
over topics does not have a closed-form solution and must be approximated, either using variational approximate
inference or MCMC sampling. Yet, the model is actually relatively simple, making certain simplifying independence
assumptions such as the conditional independence of the visual words given the image’s latent distribution over topics.
Another approach to model the statistical structure of words is through the use of distributed representations modeled by artiﬁcial neurons. In the realm of document modeling, Salakhutdinov and Hinton proposed a so-called
Replicated Softmax (RS) model for bags of words. The RS model was later used for multimodal data modeling ,
where pairs of images and text annotations were modeled jointly within a deep Boltzmann machine (DBM) . This
deep learning approach to the generative modeling of multimodal data achieved state-of-the-art performance on the
MIR Flickr data set . On the other hand, it also shares with LDA and its different extensions the reliance on
a stochastic latent representation of the data, requiring variational approximations and MCMC sampling at training
and test time. Another neural network based state-of-the-art multimodal data modeling approach is Multimodal Deep
Recurrent Neural Network (MDRNN) which aims at predicting missing data modalities through the rest of data
modalities by minimizing the variation of information rather than maximizing likelihood.
Recently, an alternative generative modeling approach for documents was proposed in Larochelle and Lauly .
In this work, a Document Neural Autoregressive Distribution Estimator (DocNADE) is proposed, which models directly the joint distribution of the words in a document by decomposing it as a product of conditional distributions
(through the probability chain rule) and modeling each conditional using a neural network. Hence, DocNADE doesn’t
incorporate any latent random variables over which potentially expensive inference must be performed. Instead, a
document representation can be computed efﬁciently in a simple feed-forward fashion, using the value of the neural
Topic Feature
Annotations
Visual words
Retrieval Task
Figure 2: Illustration of the deep extension of Supervised DocNADE (SupDeepDocNADE) model. At the training
phase, the input v (visual and annotation words) is ﬁrst shufﬂed randomly based on an ordering o and then randomly
split into two parts, vo<d and vo≥d. Then we compute each of the conditionals in Equation 21 and use backpropagation
to optimize the parameters of the model. To deal with the imbalance between the visual and annotation words, the
histogram of vo<d and vo≥d is weighted by ω (ρ). At test time, all the words in v are fed to the model to compute a
discriminative deep representation. Besides the visual and annotation words, global features f are also leveraged by
the model.
network’s hidden layer. Larochelle and Lauly also show that DocNADE is a better generative model of text
documents than LDA and the RS model, and can extract a useful representation for text information retrieval.
In this paper, we consider the application of DocNADE to deal with multimodal data in computer vision. More
speciﬁcally, we ﬁrst propose a supervised variant of DocNADE (SupDocNADE), which can be used to model the joint
distribution over an image’s visual words, annotation words and class label. The model is illustrated in Figure 1. We
investigate how to successfully incorporate spatial information about the visual words and highlight the importance
of calibrating the generative and discriminative components of the training objective. Our results conﬁrm that this
approach can outperform other topic models, such as the supervised variant of LDA. Moreover, we propose a deep
extension of SupDocNADE, that learns a deep and discriminative representation of pairs of images and annotation
words. The deep version of SupDocNADE, which is illustrated in Figure 2, outperforms its shallow one and achieves
state-of-the-art performance on the challenging MIR Flickr data set.
Related Work
As previously mentioned, multimodal data is often modeled using extensions of the basic LDA topic model, such as
Corr-LDA , Multimodal LDA and MDRF . In this paper, we focus on learning a joint representation from
three different modalities: image visual words, annotations, and class labels. The class label describes the image
globally with a single descriptive label (such as coast, outdoor, inside city, etc.), while the annotation focuses on
tagging the local content within the image. Wang et al. proposed a supervised LDA formulation to tackle this
problem. Wang et al. opted instead for a maximum margin formulation of LDA (MMLDA). Our work also
belongs to this line of work, extending topic models to a supervised variant: our ﬁrst contribution in this paper is thus
to extend a different topic model, DocNADE, to this context for multimodal data modeling.
What distinguishes DocNADE from other topic models is its reliance on an autoregressive neural network architecture. Recently, deep neural networks are increasingly used for the probabilistic modeling of images and text
(see for a review). The work of Srivastava and Salakhutdinov on DBMs and Sohn et al. on MDRNN are
good recent examples. Ngiam et al. also proposed deep autoencoder networks for multimodal learning, though
this approach was recently shown to be outperformed by DBMs and MDRNN . Although DocNADE shows
favorable performance over other topic models, the lack of an efﬁcient deep formulation reduces its ability of modeling multimodal data, especially compared with the deep neural network based models . Thus, the second
contribution of this paper is to propose an efﬁcient deep version of DocNADE and its supervised variant. As we’ll see,
the deep version of our DocNADE model will outperform the DBM approach of Srivastava and Salakhutdinov .
Document NADE
In this section, we describe the original DocNADE model. In Larochelle and Lauly , DocNADE was used to model
documents of real words, belonging to some predeﬁned vocabulary. To model image data, we assume that images
have ﬁrst been converted into a bag of visual words. A standard approach is to learn a vocabulary of visual words by
performing K-means clustering on SIFT descriptors densely exacted from all training images. See Section 6.1.2 for
more details about this procedure. From that point on, any image can thus be represented as a bag of visual words
v = [v1, v2, . . . , vDv], where each vi is the index of the closest K-means cluster to the ith SIFT descriptor extracted
from the image and Dv is the number of extracted descriptors for image v.
DocNADE models the joint probability of the visual words p(v) by rewriting it as
p (vi|v<i)
and modeling instead each conditional p(vi|v<i), where v<i is the subvector containing all vj such that j < i1. Notice
that Equation 1 is true for any distribution, based on the probability chain rule. Hence, the main assumption made by
DocNADE is in the form of the conditionals. Speciﬁcally, DocNADE assumes that each conditional can be modeled
and learned by a feedforward neural network.
One possibility would be to model p(vi|v<i) with the following architecture:
hi (v<i) = g
p (vi = w|v<i) =
exp (bw + Vw,:hi (v<i))
w′ exp (bw′ + Vw′,:hi (v<i))
where g(·) is an element-wise non-linear activation function, W ∈RH×Q and V ∈RQ×H are the connection
parameter matrices, c ∈RN and b ∈RQ are bias parameter vectors and H, Q are the number of hidden units (topics)
and vocabulary size, respectively.
Computing the distribution p(vi = w|v<i) of Equation 3 requires time linear in Q. In practice, this is too expensive, since it must be computed for each of the Dv visual words vi. To address this issue, Larochelle and Lauly
 propose to use a balanced binary tree to decompose the computation of the conditionals and obtain a complexity
logarithmic in Q. This is achieved by randomly assigning all visual words to a different leaf in a binary tree. Given this
tree, the probability of a word is modeled as the probability of reaching its associated leaf from the root. Larochelle
and Lauly model each left/right transition probabilities in the binary tree using a set of binary logistic regressors
taking the hidden layer hi(v<i) as input. The probability of a given word can then be obtained by multiplying the
probabilities of each left/right choices of the associated tree path.
1 We use a random ordering of the visual words in Equation 1 for each image, and we ﬁnd it works well in practice. See the discussion in
Section 4.1 for more details.
Speciﬁcally, let l (vi) be the sequence of tree nodes on the path from the root to the leaf of vi and let π (vi) be the
sequence of binary left/right choices at the internal nodes along that path. For example, l (vi)1 will always be the root
node of the binary tree, and π (vi)1 will be 0 if the word leaf vi is in the left subtree or 1 otherwise. Let V ∈RT ×H
now be the matrix containing the logistic regression weights and b ∈RT be a vector containing the biases, where T
is the number of inner nodes in the binary tree and H is the number of hidden units. The probability p(vi = w|v<i) is
now modeled as
p(vi = w|v<i) =
p(π (vi)k |v<i) ,
p(π (vi)k = 1|v<i) = sigm
 bl(vi)m + Vl(vi)m,:hi (v<i)
are the internal node logistic regression outputs and sigm(x) = 1/(1 + exp(−x)) is the sigmoid function. By using
a balanced tree, we are guaranteed that computing Equation 4 involves only O(log2 Q) logistic regression outputs.
One could attempt to optimize the organization of the words within the tree, but a random assignment of the words to
leaves works well in practice .
Thus, by combining Equations 2, 4 and 5, we can compute the probability p (v) = Q
i=1 p (vi|v<i) for any
document under DocNADE. To train the parameters θ = {W, V, b, c} of DocNADE, we simply optimize the average
negative log-likelihood of the training set documents using stochastic gradient descent.
Equations 4,5 indicate that the conditional probability of each word vi requires computing the position dependent
hidden layer hi (v<i), which extracts a representation out of the bag of previous visual words v<i. Since computing
hi (v<i) is in O(HDv) on average, and there are Dv hidden layers hi (v<i) to compute, then a naive procedure for
computing all hidden layers would be in O(HD2
However, noticing that
hi+1 (v<i+1)
W:,vi + c +
and exploiting that fact that the weight matrix W is the same across all conditionals, the linear transformation c +
k<i W:,vk can be reused from the computation of the previous hidden layer hi(v<i) to compute hi+1(v<i+1). With
this procedure, computing all hidden layers hi(v<i) sequentially from i = 1 to i = Dv becomes in O(HDv).
Finally, since the computation complexity of each of the O(log2 Q) logistic regressions in Equation 4 is O(H), the
total complexity of computing p(vi = w|v<i) is O(log2(Q)HDv). In practice, the length of document Dv and the
number of hidden units H tends to be small, while log2(Q) will be small even for large vocabularies. Thus DocNADE
can be used and trained efﬁciently.
Once the model is trained, a latent representation can be extracted from a new document v∗as follows:
hy (v∗) = g
This representation could be fed to a standard classiﬁer to perform any supervised computer vision task. The index y
is used to highlight that it is the representation used to predict the class label y of the image.
SupDocNADE for Multimodal Data
In this section, we describe the approach of this paper, inspired by DocNADE, to learn jointly from multimodal data.
Here, we will concentrate on the single layer version of our model and discuss its deep extension later, in Section 5.
First, we describe a supervised extension of DocNADE (SupDocNADE), which incorporates the class label modality into training to learn more discriminative hidden features for classiﬁcation. Then we describe how we exploit the
spatial position information of the visual words. Finally, we describe how to jointly model the text annotation modality
with SupDocNADE.
Supervised DocNADE
It has been observed that learning image feature representations using unsupervised topic models such as LDA can
perform worse than training a classiﬁer directly on the visual words themselves, using an appropriate kernel such
as a pyramid kernel . One reason is that the unsupervised topic features are trained to explain as much of the
entire statistical structure of images as possible and might not model well the particular discriminative structure we
are after in our computer vision task. This issue has been addressed in the literature by devising supervised variants
of LDA, such as Supervised LDA or sLDA . DocNADE also being an unsupervised topic model, we propose
here a supervised variant of DocNADE, SupDocNADE, in an attempt to make the learned image representation more
discriminative for the purpose of image classiﬁcation.
Speciﬁcally, given an image v = [v1, v2, . . . , vDv] and its class label y ∈{1, . . . , C}, SupDocNADE models the
full joint distribution as
p(v, y) = p(y|v)
p (vi|v<i) .
As in DocNADE, each conditional is modeled by a neural network. We use the same architecture for p (vi|v<i) as in
regular DocNADE. We now only need to deﬁne the model for p(y|v).
Since hy (v) is the image representation that we’ll use to perform classiﬁcation, we propose to model p (y|v) as a
multiclass logistic regression output computed from hy (v):
p (y|v) = softmax (d + Uhy (v))y
where softmax(a)i = exp(ai)/ PC
j=1 exp(aj), d ∈RC is the bias parameter vector in the supervised layer and
U ∈RC×H is the connection matrix between hidden layer hy and the class label.
Put differently, p (y|v) is modeled as a regular multiclass neural network, taking as input the bag of visual words
v. The crucial difference however with a regular neural network is that some of its parameters (namely the hidden unit
parameters W and c) are also used to model the visual word conditionals p (vi|v<i).
Maximum likelihood training of this model is performed by minimizing the negative log-likelihood
−log p (v, y) = −log p (y|v) +
−log p(vi|v<i)
averaged over all training images. This is known as generative learning . The ﬁrst term is a purely discriminative
term, while the second is unsupervised and can be understood as a regularizer, that encourages a solution which also
explains the unsupervised statistical structure within the visual words. In practice, this regularizer can bias the solution
too strongly away from a more discriminative solution that generalizes well. Hence, similarly to previous work on
hybrid generative/discriminative learning, we propose instead to weight the importance of the generative term
L(v, y; θ) = −log p (y|v) + λ
−log p(vi|v<i)
where λ is treated as a regularization hyper-parameter.
Optimizing the training set average of Equation 12 is performed by stochastic gradient descent, using backpropagation to compute the parameter derivatives. As in regular DocNADE, computation of the training objective and
its gradient requires that we deﬁne an ordering of the visual words. Though we could have deﬁned an arbitrary path
across the image to order the words (e.g. from left to right, top to bottom in the image), we follow Larochelle and
Lauly and randomly permute the words before every stochastic gradient update. The implication is that the model
is effectively trained to be a good inference model of any conditional p(vi|v<i), for any ordering of the words in v.
Algorithm 1 Computing p (v, y) using SupDocNADE
Input: bag of words representation v, target y
Output: p (v, y)
for i from 1 to Dv do
hi ←g (act)
p (vi|v<i) = 1
for m from 1 to |π (vi) | do
p (vi|v<i) ←p (vi|v<i) p (π (vi)m |v<i)
p (v) ←p (v) p (vi|v<i)
act ←act + W:,vi
hc (v) ←max(0, act)
p (y|v) ←softmax (d + Uhc (v)))|y
p (v, y) ←p (v) p (y|v)
This again helps ﬁghting against overﬁtting and better regularizes our model. One could thus think of SupDocNADE
as learning from a sequence of random ﬁxations performed in a visual scene.
In our experiments, we used the rectiﬁed linear function as the activation function
g(a) = max(0, a) = [max(0, a1), . . . , max(0, aH)]
which often outperforms other activation functions and has been shown to work well for image data . Since
this is a piece-wise linear function, the (sub-)gradient with respect to its input, needed by backpropagation to compute
the parameter gradients, is simply
1(g(a)>0) = [1(g(a1)>0), . . . , 1(g(aH)>0)]
where 1P is 1 if P is true and 0 otherwise.
Algorithms 1 and 2 give pseudocodes for efﬁciently computing the joint distribution p (v, y) and the parameter
gradients of Equation 12 required for stochastic gradient descent training.
Dealing with Multiple Regions
Spatial information plays an important role for understanding an image. For example, the sky will often appear on
the top part of the image, while a car will most often appear at the bottom. A lot of previous work has exploited this
intuition successfully. For example, in the seminal work on spatial pyramids , it is shown that extracting different
visual word histograms over distinct regions instead of a single image-wide histogram can yield substantial gains in
performance.
We follow a similar approach, whereby we model both the presence of the visual words and the identity of the region they appear in. Speciﬁcally, let’s assume the image is divided into several distinct regions R = {R1, R2, . . . , RM},
where M is the number of regions. The image can now be represented as
2 , . . . , vR
[(v1, r1) , (v2, r2) , . . . , (vDv, rDv)]
where ri ∈R is the region from which the visual word vi was extracted. To model the joint distribution over these
visual words, we decompose it as p(vR) = Q
i p((vi, ri)|vR
<i) and treat each Q × M possible visual word/region pair
as a distinct word. One implication of this is that the binary tree of visual words must be larger so as to have a leaf for
each possible visual word/region pair. Fortunately, since computations grow logarithmically with the size of the tree,
this is not a problem and we can still deal with a large number of regions.
Algorithm 2 Computing SupDocNADE training gradients
Input: training vector v, target y,
unsupervised learning weight λ
Output: gradients of Equation 12 w.r.t. parameters
f (v) ←softmax (d + Uhc (v)))
δd ←(f (v) −1y)
δact ←(U⊺δd) ◦1hy>0
δU ←δd hc⊺
δc ←0, δb ←0, δV ←0, δW ←0
for i from Dv to 1 do
for m from 1 to |π (vi) | do
δt ←λ (p (π (vi)m |v<i) −π (vi)m)
δbl(vi)m ←δbl(vi)m + δt
δVl(vi)m,: ←δVl(vi)m,: + δt h⊺
δhi ←δhi + δt V⊺
δact ←δact + δhi ◦1hi>0
δc ←δc + δhi ◦1hi>0
δW:,vi ←δW:,vi + δact
Dealing with Annotations
So far, we’ve described how to model the visual word and class label modalities. In this section, we now describe how
we also model the annotation word modality with SupDocNADE.
Speciﬁcally, let A be the predeﬁned vocabulary of all annotation words, we will note the annotation of a given
image as a = [a1, a2, . . . , aL] where ai ∈A, with L being the number of words in the annotation. Thus, the image
with its annotation can be represented as a mixed bag of visual and annotation words:
1 , . . . , vA
Dv+1, . . . , , vA
1 , . . . , vR
Dv, a1, . . . , aL] .
To embed the annotation words into the SupDocNADE framework, we treat each annotation word the same way we
deal with visual words. Speciﬁcally, we use a joint indexing of all visual and annotation words and use a larger
binary word tree so as to augment it with leaves for the annotation words. By training SupDocNADE on this joint
image/annotation representation vA, it can learn the relationship between the labels, the spatially-embedded visual
words and the annotation words.
At test time, the annotation words are not given and we wish to predict them. To achieve this, we compute the
document representation hy(vR) based only on the visual words and compute for each possible annotation word
a ∈A the probability that it would be the next observed word p(vA
i = a|vA = vR), based on the tree decomposition
as in Equation 4. In other words, we only compute the probability of paths that reach a leaf corresponding to an
annotation word (not a visual word). We then rank the annotation words in A in decreasing order of their probability
and select the top 5 words as our predicted annotation.
Deep Extension of SupDocNADE
Although SupDocNADE has achieved better performance than the other topic models in our previous work , the
lack of an efﬁcient deep formulation of SupDocNADE reduces its capability of modeling multimodal data, especially
compared with other models based on deep neural network .
Recently, Uria et al. proposed an efﬁcient extension of the original NADE model for binary vector
observations, from which DocNADE was derived. We take inspiration from Uria et al. and propose SupDeep-
DocNADE, i.e. a supervised deep autoregressive neural topic model for multimodal data modeling.
In this section, we introduce the deep extension of DocNADE (DeepDocNADE) and then describe how to incorporate supervised information into its training. We also discuss how to deal with the inbalance between the number of
visual words and annotation words, in order to obtain good performances. Before we start the discussion, we note that
the notation v, which denotes the words of an image, includes both visual words and annotation words of an image in
the following section, as is discussed in Section 4.3
DocNADE revisited
We ﬁrst revisit the training procedure for DocNADE. We will concentrate on the unsupervised version of DocNADE
for now and discuss the supervised case later.
In Section 4.1 we mentioned that words are randomly permuted before every stochastic gradient update, to make
DocNADE be a good inference model for any ordering of the words. As Uria et al. notice, we can think of the
use of many orderings as the instantiation of many different DocNADE models, one for each distinct ordering. From
that point of view, by training a single set of parameters (connection matrices and biases) on all these orderings, we
are effectively employing a parameter sharing strategy across these models and the training process can be interpreted
as training a factorial number of DocNADE models simultaneously.
We will now make the notion of ordering more explicit in our notation. Following Uria et al. , we now denote
p (v|θ, o) as the joint distribution of the DocNADE model over the words of an image given the parameters θ and
ordering o. We will also note p
 vod|vo<d, θ, o
as the conditional distribution described in Equation 3 or 4, where
vo<d is the subvector of the previous d −1 words extracted from an ordered word vector vo, and vod is the dth word
of vo. Notice that the ordering o is now treated explicitly as a random variable.
Thus, training DocNADE on stochastically sampled orderings corresponds, in expectation, to minimize the negative log-likelihood −log p (v|θ, o) across all possible orderings, for each training example v:
L (v; θ) = E
o∈O −log p (v|θ, o)
where O is the set of all orderings.
Applying DocNADE’s autoregressive expression for the conditionals in Equation 1, Equation 17 can be rewritten
L (v; θ) = E
 vod|vo<d, θ, o
By moving the expectation over orderings, E
o∈O, inside the summation over the conditionals, the expectation can
be split into three parts2: one over o<d, standing for the ﬁrst d −1 indices in the ordering o; one over od, which is the
dth index of the ordering o; and one over o>d, standing for the remaining indices of the ordering.
Hence, the loss function can be rewritten as:
L (v; θ) =
o>d −log p
 vod|vo<d, θ, o<d, od, o>d
Noting that the value of each conditional does not depend on o>d, Equation 19 can then be simpliﬁed as:
L (v; θ) =
 vod|vo<d, θ, o<d, od
In practice, Equation 20 still sums over a number of terms of too large to be performed exhaustively. For training,
we thus use a stochastic estimation and replace the expectations/sums over d and o<d with samples. On the other
hand, the innermost expectation over od can be obtained cheaply. Indeed, for a given value of d and o<d, all terms
2 The split is done in a modality-agnostic way, i.e. the visual words and annotations words are mixed together and are treated equally when
training the model.
 vod|vo<d, θ, o<d, od
require the computation of the same hidden layer representation hd
from the subvector
vo<d. Therefore, L (v, θ) can be estimated by:
ˆL (v, θ) =
 vod|vo<d, θ, o<d, od
where Dv is the number of words (including both visual and annotation words) in v. In words, Equation 21 measures
the ability of the model to predict, from a ﬁxed and random context of d −1 words vo<d, any of the remaining words
in the image/annotation.
From this, training of DocNADE can be performed by stochastic gradient descent. For a given training example
v, a training update is performed as follows3:
1). Shufﬂe v to specify an ordering o;
2). Sample d uniformly from [0, Dv], which separates v into two parts: vo<d as inputs and vo≥d as outputs;
3). Compute each of the conditionals in Equation 21, where od ∈vo≥d ;
4). Compute and sum the gradients for each of the conditionals in Equation 21, and rescale by
It should be noticed that, since the number of words in an image/annotation pair can vary across examples, the
value of Dv will vary between updates, unlike in Uria et al. will models binary vectors of ﬁxed size.
We can contrast this procedure from the one described in Section 4.1, which prescribed a stochastic estimation with
respect to the possible orderings of the words and an exhaustive sum in predicting all the words in the sequence. Here,
we have the opposite: it is stochastic by predicting a subset of the words but is (partially) exhaustive by implicitly
summing the gradient contributions over several orderings sharing the same permutation up to position d.
Deep Document NADE
As shown in Section 5.1, training of DocNADE can be performed by randomly splitting the words v into two parts,
vo<d and vo≥d, and applying stochastic gradient descent on the loss function of Equation 21. Thus, the training
procedure now corresponds to a neural network, with vo<d being the input and vo≥d as the output’s target. The
advantage of this approach is that DocNADE can more easily be extended to a deep version this way, which we will
refer to as DeepDocNADE.
Indeed, as mentioned in the previous section, all conditionals p
 vod|vo<d, θ, o<d, od
in the summation of Equation 21 require the computation of a single hidden layer representation:
 c(1) + W(1)x
is the histogram vector representation of the word sequence vo<d and where the exponent (1) is used
to index the ﬁrst hidden layer and its parameters.
So, unlike in the original training procedure for DocNADE, a training update now requires the computation of a
single hidden layer, instead of Dv hidden layers. This way, adding more hidden layers only has an additive, instead of
multiplicative, effect on the complexity of each training update. Hidden layers are added as in regular deep feedforward
neural networks, as follows:
c(n) + W(n)h(n−1)
3In experiments, both visual words and annotation words are represented in Bag of Words (BoW) fashion. As is shown in Section 5.2, the
training processing actually equals to generating a word vector v from BoW, shufﬂing the word vector v and splitting it, and then regenerating the
histogram x
, which is inefﬁcient for processing samples in a mini-batch fashion. Hence, in practice, we split the original
histogram x (v) directly by uniformly sampling how many are put in the left of the split (the others are put on the right of the split) for each
individual word. This is not equivalent to the one mentioned in this paper, but it works well in practice.
where W(n) and c(n) are the connection matrix and bias for hidden layer h(n), n = 1, . . . , N, where N is the number
of hidden layers.
To compute the conditional p
 vod|vo<d, θ, o<d, od
in Equation 21 after obtaining the hidden representation h(N),
the binary tree introduced in Section 3 could be used for an efﬁcient implementation. However, in cases where
the histogram x
of future words is not sparse, the binary tree output model might not be the most efﬁcient
approach. For example, suppose x
is full (has no zero entries) and the vocabulary size is Q, the computation
of Equation 21 via the binary tree is in O (Q log2 Q), since it has to compute O (log Q) logistic regressions for each
of the Q words in x
. In this speciﬁc scenario however, going back to a softmax model of the conditionals
is preferable. Indeed, since all conditionals in Equation 21 share the same hidden representation h(N) and thus the
normalization term in the softmax is the same for all future words, it is only in O (Q). Another advantage of the
softmax over the binary tree is that the softmax is more amenable to an efﬁcient implementation on the GPU, which
will also speed up the training process.
In the end, for the experiments with the deep extension of DocNADE of this paper, we opted for the softmax model
as we’ve found it to be more efﬁcient. We emphasize however that the binary tree is still the most efﬁcient option for
the loss function of Equation 12 or when the histogram of future words x
is sparse.
Supervised Deep Document NADE
Deep Document NADE can also be extended to a supervised variant, which is referred to as SupDeepDocNADE,
following the formulation in Section 4.1.
Speciﬁcally, to add the supervised information into DeepDocNADE, the negative log-likelihood function in Equation 17 could be extended as follows:
L (v, y; θ)
o∈O −log p (v, y|θ, o)
o∈O −log p (y|v, θ) −log p (v|θ, o)
Since p (y|v, θ) is independent of o, Equation 26 can be rewritten as:
L (v, y; θ) = −log p (y|v, θ) −E
o∈O log p (v|θ, o)
Then L (v, y; θ) can be approximated by sampling v, d and o<d as follows:
ˆL (v, y; θ)
−log p (y|v, θ)
 vod|vo<d, θ, o<d, od
Similar to Equation 12, the ﬁrst term in Equation 28 is supervised, while the second term is unsupervised and can
be interpreted as a regularizer. Thus, we can also weight the importance of the unsupervised part by a hyperparameter
λ and obtain a hybrid cost function:
ˆL (v, y; θ)
−log p (y|v, θ)
 vod|vo<d, θ, o<d, od
Equation 29 can then be used as the per-example loss and optimized over the training set using stochastic gradient
Weighting the Annotation Words
As mentioned in Section 4.3, the annotation words can be embedded into the framework of SupDocNADE by treating
them the same way we deal with visual words. In practice, however, the number of visual words could be much larger
than that of the annotation words. For example, in the MIR Flickr data set, with the experimental setup of Srivastava
and Salakhutdinov , the average number of visual words for an image is about 69 011, which is much larger than
the average number of annotation words for an image (5.15). The imbalance of visual words and annotation words
might cause some problems. For example, the contribution to the hidden representation from the annotation words
is so small that it might be ignored compared with the contribution from the huge mount of visual words, and the
gradients coming from the annotation words might also be too small to have any meaningful effect for increasing the
conditionals probability of the annotation words.
To deal with this problem, we propose to weight the annotation words in the histogram x
More speciﬁcally, let ω (ρ) ∈RQ be a vector containing Q components, where Q is the vocabulary size (including both
visual and annotation words), each component corresponding to a word (either visual or annotation). The components
corresponding to the visual words is set to 1 and the components corresponding to the annotation word is set to ρ.
Then the new histogram of ˜x
is computed as
where ⊙is element-wise multiplication.
Moreover, the hybrid cost function of Equation 29 is rewritten as:
ˆL (v, y; θ) = −log p (y|v, θ)
Φod (ρ) log ˜p
 vod|vo<d, θ, o<d, od
 vod|vo<d, θ, o<d, od
is a conditional probability obtained by replacing x
in Equation 23, and Φod (ρ) is a function that assigns weight ρ if od is an annotation word, and 1 otherwise.
By weighting annotation words in the histogram, the model will pay more attention to the annotation words,
reducing the problem caused by the imbalance between visual and annotation words. In practice, the weight ρ is a
hyper-parameter and can be selected by cross-validation. As we’ll see in Section 6.2.4, weighting annotation words
more heavily can signiﬁcantly improve the performance.
Exploiting Global Image Features
Besides the spatial information and annotation which are embedded into the framework of DocNADE in Section 4.2
and Section 4.3, bottom-up global features, such as Gist and MPEG-7 descriptors , can also play an important
role in multimodal data modeling . Global features can, among other things, complement the local information
extracted from patch-based visual words. In this section, we describe how to embed such features into the framework
of our model.
Speciﬁcally, let f ∈RNf be the global feature vector extracted from an image, where Nf is the length of the global
feature vector. One possibility for embedding f into the model could be to condition the hidden representation on the
global feature f as follows:
c(1) + W(1)x
where P is a connection matrix speciﬁc to the global features. This can be understood as a hidden layer whose hidden
unit biases are conditioned on the image’s global features vector f. Thus, the whole model is conditioned not only on
previous words but also on the global features f.
Experiments and Results
In this section, we compare the performance of our model over the other models for multimodal data modeling. Specifically, we ﬁrst test the ability of the single hidden layer SupDocNADE to learn from multimodal data on two real-world
data sets which are widely used in the research on other topic models. Then we test the performance of SupDeep-
DocNADE on the largescale multimedia informaton retrieval (MIR) Flickr data set and show that SupDeepDocNADE
achieves state-of-the-art performance. The code to download the data sets and for SupDocNADE and SupDeepDoc-
NADE is available at 
Experiments for SupDocNADE
To test the ability of the single hidden layer SupDocNADE to learn from multimodal data, we measured its performance under simultaneous image classiﬁcation and annotation tasks. We tested our model on 2 real-world data sets: a
subset of the LabelMe data set and the UIUC-Sports data set . LabelMe and UIUC-Sports come with annotations and are popular classiﬁcation and annotation benchmarks. We performed extensive quantitative comparisons
of SupDocNADE with the original DocNADE model and supervised LDA (sLDA)4 . We also provide some
comparisons with MMLDA and a Spatial Pyramid Matching (SPM) approach .
Data sets Description
Following Wang et al. , we constructed our LabelMe data set using the online tool to obtain images of size 256×256
pixels from the following 8 classes: highway, inside city, coast, forest, tall building, street, open country and mountain.
For each class, 200 images were randomly selected and split evenly in the training and test sets, yielding a total of
1600 images.
The UIUC-Sports data set contains 1792 images, classiﬁed into 8 classes: badminton (313 images), bocce (137
images), croquet (330 images), polo (183 images), rockclimbing (194 images), rowing (255 images), sailing (190
images), snowboarding (190 images). Following previous work, the maximum side of each image was resized to 400
pixels, while maintaining the aspect ratio. We randomly split the images of each class evenly into training and test
sets. For both LabelMe and UIUC-Sports data sets, we removed the annotation words occurring less than 3 times, as
in Wang et al. .
Experimental Setup for SupDocNADE
Following Wang et al. , 128 dimensional, densely extracted SIFT features were used to extract the visual words.
The step and patch size of the dense SIFT extraction was set to 8 and 16, respectively. The dense SIFT features from
the training set were quantized into 240 clusters, to construct our visual word vocabulary, using K-means. We divided
each image into a 2 × 2 grid to extract the spatial position information, as described in Section 4.2. This produced
2 × 2 × 240 = 960 different visual word/region pairs.
We use classiﬁcation accuracy to evaluate the performance of image classiﬁcation and the average F-measure of
the top 5 predicted annotations to evaluate the annotation performance, as in previous work. The F-measure of an
image is deﬁned as
F-measure = 2 × Precision × Recall
Precision + Recall
where recall is the percentage of correctly predicted annotations out of all ground-truth annotations for an image, while
the precision is the percentage of correctly predicted annotations out of all predicted annotations5. We used 5 random
train/test splits to estimate the average accuracy and F-measure.
Image classiﬁcation with SupDocNADE is performed by feeding the learned document representations to a RBF
kernel SVM. In our experiments, all hyper-parameters (learning rate, unsupervised learning weight λ in SupDoc-
NADE, C and γ in RBF kernel SVM), were chosen by cross validation. We emphasize that, again from following
Wang et al. , the annotation words are not available at test time and all methods predict an image’s class based
solely on its bag of visual words.
4We mention that has shown that sLDA performs better than Corr-LDA . Moreover, found that Multimodal LDA did not improve
on the performance of Corr-LDA. Finally, sLDA distinguishes itself from the other models in the fact that it also supports the class label modality
and has code available online. Hence, we compare directly with sLDA only.
5When there are repeated words in the ground-truth annotations, the repeated terms were removed to calculate the F-measure.
Number of Topics
Classiﬁcation Accuracy %
Classiﬁcation Performance on LabelMe
SupDocNADE(2 × 2), λ varies
sLDA(2 × 2)
DocNADE(2 × 2)
Number of Topics
Classiﬁcation Accuracy %
Classiﬁcation Performance on UIUC-Sports
SupDocNADE(2 ⇥2), λ varies
sLDA(2 ⇥2)
DocNADE(2 ⇥2)
Number of Topics
Classiﬁcation Accuracy %
Classiﬁcation Performance on LabelMe
SupDocNADE(2 × 2), λ varies
SupDocNADE(1 × 1), λ varies
SupDocNADE(2 × 2), λ = 1
SupDocNADE(2 × 2), λ = 0
Number of Topics
Classiﬁcation Accuracy %
Classiﬁcation Performance on UIUC-Sports
SupDocNADE(2 × 2), λ varies
SupDocNADE(1 × 1), λ varies
SupDocNADE(2 × 2), λ = 1
SupDocNADE(2 × 2), λ = 0
Figure 3: Classiﬁcation performance comparison on LabelMe (even) and UIUC-Sports (odd). On the left, we compare
the classiﬁcation performance of SupDocNADE, DocNADE and sLDA. On the right, we compare the performance
between different variants of SupDocNADE. The “λ varies” means the unsupervised weight λ in Equation 12 is chosen
by cross-validation.
Table 1: Performance comparison of SupDocNADE with different models on LabelMe and UIUC-Sports data sets.
UIUC-Sports
Accuracy% F-measure% Accuracy% F-measure%
MMLDA 
SupDocNADE
†: Taken from the original paper.
∗: MMLDA performs classiﬁcation and annotation separately
and doesn’t learn jointly from all 3 modalities.
Quantitative Comparison
In this section, we describe our quantitative comparison between SupDocNADE, DocNADE and sLDA. We used
the implementation of sLDA available at in our comparison, to
which we fed the same visual (with spatial regions) and annotation words as for DocNADE and SupDocNADE.
The classiﬁcation results are illustrated in Figure 3. Similarly, we observe that SupDocNADE outperforms Doc-
NADE and sLDA. Tuning the trade-off between generative and discriminative learning and exploiting position information is usually beneﬁcial. There is just one exception, on LabelMe, with 200 hidden topic units, where using a 1×1
grid slightly outperforms a 2 × 2 grid.
As for image annotation, we computed the performance of our model with 200 topics. As shown in Table 1,
SupDocNADE obtains an F-measure of 43.87% and 46.95% on the LabelMe and UIUC-Sports data sets respectively.
This is slightly superior to regular DocNADE. Since code for performing image annotation using sLDA is not publicly
available, we compare directly with the results found in the corresponding paper . Wang et al. report F-measures
of 38.7% and 35.0% for sLDA, which is below SupDocNADE by a large margin.
We also compare with MMLDA , which has been applied to image classiﬁcation and annotation separately.
The reported classiﬁcation accuracy for MMLDA is less than SupDocNADE as shown in Table 1. The performance
for annotation reported in Wang et al. is better than SupDocNADE on LabelMe but worse on UIUC-Sports. We
highlight that MMLDA did not deal with the class label and annotation word modalities jointly, the different modalities
being treated separately.
The spatial pyramid approach of Lazebnik et al. could also be adapted to perform both image classiﬁcation and
annotation. We used the code from Lazebnik et al. to generate two-layer SPM representations with a vocabulary
size of 240, which is the same conﬁguration as used by the other models. For image classiﬁcation, an SVM with
rock, , sky
seawater, rocks,
sand beach
Tallbuilding
sky,skyscraper
occluded,buildings,
skyscraper,building
sky,car,road,
sign,field,
mountain,sky,
tree,trees,field,
rock,sand beach,
sea water, sky,
Tallbuilding
sky,buildings
occluded, trees,
skyscraper
sky,road, sign,
centralreservation,
sky,mountain,trees,
rocky mountain,
river water
tree,trees,sky,
tree trunk,
buildings occluded
road,car,sign,
trees,building
sky,trees,tree,
field,mountain
Insidecity
window,building
occluded,building,
sidewalk,door
house occluded,
sky,ground grass
sky,trees,sign,car,
bus,road,central
reservation
Opencountry
sky,mountain,trees
,river water, boat
Tallbuilding
buildings occluded,
building,buildings,
Figure 4: Predicted class and annotation by SupDocNADE on LabelMe data set. We list some correctly (top row)
and incorrectly (bottom row) classiﬁed images. The predicted (in blue) and ground-truth (in black) class labels and
annotation words are presented under each image.
Histogram Intersection Kernel (HIK) is adopted as the classiﬁer, as in Lazebnik et al. . For annotation, we used a
k nearest neighbor (KNN) prediction of the annotation words for the test images. Speciﬁcally, the top 5 most frequent
annotation words among the k nearest images (based on the SPM representation with HIK similarity) in the training
set were selected as the prediction of a test image’s annotation words. The number k was selected by cross validation,
for each of the 5 random splits. As shown in Table 1, SPM achieves a classiﬁcation accuracy of 80.88% and 72.33%
for LabelMe and UIUC-Sports, which is lower than SupDocNADE. As for annotation, the F-measure of SPM is also
lower than SupDocNADE, with 43.68% and 41.78% for LabelMe and UIUC-Sports, respectively.
Figure 4 illustrates examples of correct and incorrect predictions made by SupDocNADE on the LabelMe data set.
Visualization of Learned Representations
Since topic models are often used to interpret and explore the semantic structure of image data, we looked at how we
could observe the structure learned by SupDocNADE.
We extracted the visual/annotation words that were most strongly associated with certain class labels within Sup-
DocNADE as follows. Given a class label street, which corresponds to a column U:,i in matrix U, we selected the
top 3 topics (hidden units) having the largest connection weight in U:,i. Then, we averaged the columns of matrix W
buildings,
person walking,
Class: Street
Visual words
Annotation words
Class: Sailing
Visual words
Annotation words
tree trunk,
Class: Forest
Visual words
Annotation words
car occluded,
Class: Highway
Visual words
Annotation words
Figure 5: Visualization of learned representations. Class labels are colored in red. For each class, we list 4 visual
words (each represented by 16 image patches) and 5 annotation words that are strongly associated with each class.
See Sec. 6.1.4 for more details.
corresponding to these 3 hidden topics and selected the visual/annotation words with largest averaged weight connection. The results of this procedure for classes street, sailing, forest and highway is illustrated in Figure 5. To visualize
the visual words, we show 16 image patches belonging to each visual word’s cluster, as extracted by K-means. The
learned associations are intuitive: for example, the class street is associated with the annotation words “building”,
“buildings”, “window”, “person walking” and “sky”, while the visual words showcase parts of buildings and windows.
Experiments for SupDeepDocNADE
We now test the performance of SupDeepDocNADE, the deep extension of SupDocNADE, on the large-scale MIR
Flickr data set . MIR Flickr is a challenging benchmark for multimodal data modeling task. In this section, we will
show that SupDeepDocNADE achieves state-of-the-art performance on the MIR Flickr data set over strong baselines :
the DBM apporach of Srivastava and Salakhutdinov , MDRNN , TagProp and the multiple kernel learning
approach of Verbeek et al. .
MIR Flickr Data Set
The MIR Flickr data set contains 1 million real images that are collected from the image hosting website Flickr. The
social tags of each image are also collected and used as annotations in our experiments. Among the 1 million images,
there are 25 000 images that is labeled into 38 classes, such as sky, bird, people, animals, car, etc., giving us a subset
of labeled images. Each image in the labeled subset can have multiple class labels. In our experiments, we used
15 000 images for training and 10 000 images for testing. The remaining 975 000 images do not have labels and thus
were used for the unsupervised pretraining of SupDeepDocNADE (see next section). The most frequent 2000 tags are
collected for the annotation vocabulary, following previous work . The averaged number of annotations for an
image is 5.15. In the whole data set, 128 501 images do not have annotations, out of which 4551 images are in the
labeled subset.
Experimental Setup for SupDeepDocNADE
In order to compare directly with the DBM approach of Srivastava and Salakhutdinov , we use the same experimental conﬁguration. Speciﬁcally, the images in MIR Flickr are ﬁrst rescaled to make the maximum side of each
image be 480 pixels, keeping the aspect ratio. Then, 128 dimensional SIFT features are densely sampled on these images to extract the visual words. Following Srivastava and Salakhutdinov , we used 4 different scales of patch size,
which are 4, 6, 8, 10 pixels, respectively, and the patch step is ﬁxed to 3 pixels. The SIFT features from the unlabeled
images were quantized into 2000 clusters, which is used as the visual word vocabulary. Thus, the image modality is
represented by the bag of visual words representation using this vocabulary. As preliminary experiments suggested
that spatial information (see Section 4.2) wasn’t useful on the Flickr data set, we opted for not using it here. Similarly,
the text modality for SupDeepDocNADE is represented using the annotation vocabulary, which is built upon the most
frequent 2000 tags, as is mentioned in Section 6.2.1. The visual words and annotation words are combined together
and treated as the input of SupDeepDocNADE.
As for the global features (Section 5.5), a combination of Gist and MPEG-7 descriptors (EHD, HTD,
CSD, CLD, SCD) is adopted in our experiments, as in Srivastava and Salakhutdinov . The length of the global
features is 1857.
We used a 3 hidden layers architecture in our experiments, with the size of each hidden layer being 2048. Note that
the DBM also use 3 hidden layers with 2048 hidden units for each layer, thus our comparison with the DBM
is fair. The activation function for the hidden units is the rectiﬁed linear function. We used a softmax output layer
instead of a binary tree to compute the conditionals p
 vod|vo<d, θ, o<d, od
for SupDeepDocNADE, as discussed in
Section 5.2.
For the prediction of class labels, since images in MIR Flickr could have multiple labels, we used a sigmoid output
layer instead of the softmax to compute the probability that an image belongs to a speciﬁc class ci
p (ci = 1|v, θ) = sigmoid
dci + Uci,:h(N)
where h(N) is the hidden representation of the top layer. As a result, the supervised cost part in Equation 29 is replaced
by the cross entropy PC
i=1 −ci log p (ci = 1|v, θ) −(1 −ci) log p (ci = 0|v, θ), where C is the number of classes.
In all experiments, the unlabeled images are used for unsupervised pretraining. This is achieved by ﬁrst training
a DeepDocNADE model, without any output layer predicting class labels. The result of this training is then used to
initialize the parameters of a SupDeepDocNADE model, which is ﬁnetuned on the labeled training set based on the
loss of Equation 32.
Once training is ﬁnalized, the hidden representation from the top hidden layer after observing all words (both
visual words and annotation words) of an image is feed to a linear SVM to compute conﬁdences of an image
belonging to each class. The average precision (AP) for each class is obtained based on these conﬁdences, where AP
is the area under the precision-recall curve. After that, the mean average precision (MAP) over all classes is computed
and used as the metric to measure the performance of the model. We used the same 5 training/validation/test set splits
on the labeled subset of MIR Flickr as Srivastava and Salakhutdinov and report the average performance on the 5
To initialize the connection matrices, we followed the recommendation of Glorot and Bengio used a uniform
distribution:
where Θ ∈{W, U, V} is a connection matrix, lΘ,wΘ are the number of rows and columns respectively of matrix Θ,
respectively, and U is the uniform distribution. In practice, we’ve also found it useful to normalize the input histograms
for each image, by rescaling them to have unit variance.
The hyper-parameters (learning rate, unsupervised weight λ, and the parameter for linear SVM, etc.) are chosen
by cross-validation. To prevent overﬁtting, dropout is adopted during training, with a dropout rate of 0.5 for all
Table 2: Performance comparison on MIR Flickr data set.
0.384 ± 0.004
Multiple Kernel Learning SVMs 
TagProp 
Multimodal DBM 
0.651 ± 0.005
MDRNN 
0.686 ± 0.003
SupDeepDocNADE (1 hidden layer, 625 epochs pretraining)
0.654 ± 0.004
SupDeepDocNADE (2 hidden layers, 625 epochs pretraining)
0.671 ± 0.006
SupDeepDocNADE (3 hidden layers, 625 epochs pretraining)
0.670 ± 0.005
SupDeepDocNADE (2 hidden layers, 2325 epochs pretraining)
0.682 ± 0.005
SupDeepDocNADE (3 hidden layers, 2325 epochs pretraining)
0.686 ± 0.005
SupDeepDocNADE (2 hidden layers, 4125 epochs pretraining)
0.684 ± 0.005
SupDeepDocNADE (3 hidden layers, 4125 epochs pretraining)
0.691 ± 0.005
hidden layers. We also maintained an exponentially decaying average of the parameter values throughout the gradient
decent training procedure and used the averaged parameters at test time. This corresponds to Polyak averaging ,
but where the linear average is replaced by a weighting that puts more emphasis on recent parameter values. For the
annotation weight, it was ﬁxed to 12 000, which is approximately the ratio of the averaged visual words and annotation
words of the data set. We will investigate the impact of the annotation weight on the performance in Section 6.2.4.
Comparison with other baselines
Table 2 presents a comparison of the performance of SupDeepDocNADE with the DBM approach of Srivastava and
Salakhutdinov and MDRNN of Sohn et al. as well as other strong baselines, in terms of MAP performance.
We also provide the simple and popular TF-IDF baseline in Table 2 to make the comparison more complete. The
TF-IDF baseline is conducted only on the bag-of-words representations of images without global features. We feed
the TF-IDF representations to a linear SVM to obtain conﬁdences of an image belonging to each class and then we
compute the Mean AP, as for SupDeepDocNADE.
We can see that SupDeepDocNADE achieves the best performance among all methods. More speciﬁcally, we ﬁrst
pretrained the model for 625 epochs on the unlabeled data with 1, 2 and 3 hidden layers. The results illustrated in
Table 2 show that SupDeepDocNADE outperforms the DBM baseline by a large margin. Moreover, we can see that
SupDeepDocNADE with 2 and 3 hidden layers performs better than with only 1 hidden layer, with 625 epochs of
pretraining. We then pretrained the model for more epochs on the unlabeled data (2325 epochs). As shown in Table 2,
with more pretraining epochs, the deeper model (3 hidden layers) performs even better. This conﬁrms that the use
of a deep architecture is beneﬁcial. When the number of pretraining epochs reaches 4125, the SupDeepDocNADE
model with 3 hidden layers achieves a MAP of 0.691, which outperforms all the strong baselines and increases the
performance gap with the 2-hidden-layers model.
From Tabel 2 we can also see that the performance of 2-layers SupDeepDocNADE does not improve as much as
3-layers SupDeepDocNADE when the number of pretraining epochs increases from 2325 to 4125. Figure 6 shows the
the performance of SupDeepDocNADE w.r.t the number of pretraining epochs. We can see from Figure 6 that with
more epochs of pretraining, the performance of 3-layers SupDeepDocNADE increases faster than the 2-layers models,
which indicates that the capacity of 3-layers SupDeepDocNADE is bigger than the 2-layers model and the capacity
could be leveraged by more pretraining. Figure 6 also suggests that the performance of SupDeepDocNADE could be
even better than 0.691 with more pretraining epochs.
Figure 7 illustrates some failed predictions of SupDeepDocNADE, where the reasons for failure are shown on the
Number of Pretraining Epochs
SupDeepDocNADE(3 hidden layers)
SupDeepDocNADE(2 hidden layers)
Figure 6: Performance of SupDeepDocNADE w.r.t the number of epochs pretrained on unlabeled data.
left-side of each row. One of the reasons for failure is that the local texture/color is ambiguous or misleading. For
example, in the ﬁrst image of the top row, the blue color in the upper side of the wall misleads the model to predict
”sky” with a conﬁdence of 0.995. Another type of failure, which is shown in the middle row of Figure 7, is caused by
images of an abstract illustration of the class. For instance, the model fails to recognize the bird, car and tree in the
images of the middle row, respectively, as these images are merely abstract illustrations of these concepts. The third
reason illustrated in the bottom row is that the class takes a small portion of the image, making it more likely to be
ignored. For example, the female face on the stamp in the ﬁrst image of the bottom row is too small to be recognized
by the model. Note that we just illustrated some failed examples and there might be other kinds of failures. In practice,
we also ﬁnd that some images are not correctly labeled, which might also cause some failures.
Having established that SupDeepDocNADE achieves state-of-the-art performance on the MIR Flickr data set and
also discussed some failed examples, we now explore in more details some of its properties in the following sections.
The Impact of the Annotation Weight
In Section 6.2.4, we proposed to weight differently the annotation words to deal with the problem of imbalance in
the number of visual and annotation words. In this part, we investigate the inﬂuence of the annotation weight on the
performance. Speciﬁcally, we set the annotation weight to {1, 4000, 8000, 12 000, 16 000}, and show the performance
for each of the annotation weight values. Note that when the annotation weight equals 1, there is no compensation
for the imbalance of visual words and annotation words. The other experimental conﬁgurations are the same as in
Section 6.2.2.
Figure 8 shows the performance comparison between different annotation weights. As expected, SupDeepDoc-
NADE performs extremely bad when the annotation equals to 1, When the annotation weight is increased, the performance gets better. Among all the chosen annotation weights, 12 000 performs best, which achieves a MAP of 0.671.
The other annotation weights also achieves good performance compared with the DBM model : MAP of 0.658,
0.669 and 0.670 for annotation weight values of 4000, 8000 and 16 000, respectively.
sky (0.995)
clouds (0.9703)
flower (0.92)
bird(0.001)
car (0.002)
plant life (0.013)
of the class
class takes
small portion
of the image
texture/color
is ambiguous
or misleading
female (0.015)
flower (0.001)
bird (0.0004)
Figure 7: Illustration of some failed examples of SupDeepDocNADE. The reasons for failure are listed on the leftside of each row. For each reason, we list 3 examples. The text below each image is the conﬁdence of either the
wrongly predicted class (the top row) or the ground truth class (the middle and bottom rows). The maximum value of
conﬁdence is 1 and minimum is 0.
Visualization of the Retrieval Results
Since SupDeepDocNADE is used for multimodal data modeling, we illustrate here some results for multimodal data
retrieval tasks. More speciﬁcally, we show some qualitative results in two multimodal data retrieval scenarios: multimodal data query and generation of text from images.
Multimodal Data Query: Given a query corresponding to an image/annotation pair, the task is to retrieve other similar pairs from a collection, using the hidden representation learned by SupDeepDocNADE. In this task, the cosine
similarity is adopted as the similarity metric. In this experiment, each query corresponds to an individual test example
and the collection corresponds to the rest of the test set. Figure 10 illustrates the retrieval results for multimodal data
query task, where we show the 4 most similar images to the query input in the testset.
Generating Text from Image: As SupDeepDocNADE learns the relationship between the image and text modalities,
we test its ability to generate text from given images. This task is implemented by feeding SupDeepDocNADE only
the bag of visual words and selecting the annotation words according to their probability of being the next word, similarly to Section 4.3. Figure 9 illustrates the ground truth annotation and the most probable 8 annotations generated
by SupDeepDocNADE. We can see that SupDeepDocNADE generated very meaningful texts according to the image
modality, which shows that it effectively learned about the statistical structure between the two modalities.
Conclusion and Discussion
In this paper, we proposed SupDocNADE, a supervised extension of DocNADE, which can learn jointly from visual
words, annotations and class labels. Moreover, we proposed a deep extension of SupDocNADE which outperforms
its shallow version and can be trained efﬁciently. Although both SupDocNADE and SupDeepDocNADE are the
same in nature, SupDeepDocNADE differs from the single layer version in its training process. Speciﬁcally, the
Annotation Weight
SupDeepDocNADE (2 hidden layers)
Figure 8: Comparison between different annotation weights.
training process of SupDeepDocNADE is performed over a subset of the words by summing the gradients over several
orderings sharing the same permutation up to a randomly selected position d, while the single layer version does the
opposite and exploits a single randomly selected ordering but updates all the conditionals on the words.
Like all topic models, our model is trained to model the distribution of the bag-of-word representations of images
and can extract a meaningful representation from it. Unlike most topic models however, the image representation is
not modeled as a latent random variable in a model, but instead as the hidden layer of a neural autoregressive network.
A distinctive advantage of SupDocNADE is that it does not require any iterative, approximate inference procedure to
compute an image’s representation. Our experiments conﬁrm that SupDocNADE is a competitive approach for multimodal data modeling and SupDeepDocNADE achieves state-of-the-art performance on the challenging multimodal
data benchmark MIR Flickr.