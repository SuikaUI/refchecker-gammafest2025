Deep Hashing Network for Unsupervised Domain Adaptation
Hemanth Venkateswara, Jose Eusebio, Shayok Chakraborty, Sethuraman Panchanathan
Center for Cognitive Ubiquitous Computing, Arizona State University, Tempe, AZ, USA
{hemanthv, jeusebio, shayok.chakraborty, panch}@asu.edu
In recent years, deep neural networks have emerged as a
dominant machine learning tool for a wide variety of application domains. However, training a deep neural network
requires a large amount of labeled data, which is an expensive process in terms of time, labor and human expertise.
Domain adaptation or transfer learning algorithms address
this challenge by leveraging labeled data in a different, but
related source domain, to develop a model for the target
domain. Further, the explosive growth of digital data has
posed a fundamental challenge concerning its storage and
retrieval. Due to its storage and retrieval efﬁciency, recent
years have witnessed a wide application of hashing in a
variety of computer vision applications. In this paper, we
ﬁrst introduce a new dataset, Ofﬁce-Home, to evaluate domain adaptation algorithms. The dataset contains images
of a variety of everyday objects from multiple domains. We
then propose a novel deep learning framework that can exploit labeled source data and unlabeled target data to learn
informative hash codes, to accurately classify unseen target data.
To the best of our knowledge, this is the ﬁrst
research effort to exploit the feature learning capabilities
of deep neural networks to learn representative hash codes
to address the domain adaptation problem. Our extensive
empirical studies on multiple transfer tasks corroborate the
usefulness of the framework in learning efﬁcient hash codes
which outperform existing competitive baselines for unsupervised domain adaptation.
1. Introduction
Deep learning algorithms automatically learn a discriminating set of features and have depicted commendable performance in a variety of computer vision applications. Unfortunately, training a deep model necessitates a large volume of labeled data, which can be time consuming and expensive to acquire. However, labeled data from a different, but related domain is often available, which has motivated the development of algorithms which can leverage
labeled data in a source domain to develop a machine learning model for the target domain. Learning a discriminative model in the presence of the shift between training and
test distributions is known as transfer learning or domain
adaptation . Unsupervised domain adaptation is a challenging setting, where labeled data is available only in the
source domain; no labeled data is available in the target
domain. Conventional shallow transfer learning methods
develop their models in two stages, feature extraction followed by domain adaptation. The features are ﬁxed and
then a model is trained to align the source and target domains . On the other hand, deep
transfer learning procedures exploit the feature learning capabilities of deep networks to learn transferable feature representations for domain adaptation and have demonstrated
impressive empirical performance .
The explosive growth of digital data in the modern era
has posed fundamental challenges regarding their storage,
retrieval and computational requirements.
Against this
backdrop, hashing has emerged as one of the most popular and effective techniques due to its fast query speed and
low memory cost . Hashing techniques transform high
dimensional data into compact binary codes and generate
similar binary codes for similar data items. Motivated by
this fact, we propose to train a deep neural network to output binary hash codes (instead of probability values), which
can be used for classiﬁcation. We see two advantages to estimating a hash value instead of a standard probability vector in the ﬁnal layer of the network: (i) the hash values are
used to develop a unique loss function for target data in the
absence of labels and (ii) during prediction, the hash value
of a test sample can be compared against the hash values
of the training samples to arrive at a more robust category
prediction.
In this paper, we ﬁrst introduce a new dataset, Ofﬁce-
Home, which we use to evaluate our algorithm. The Ofﬁce-
Home dataset is an object recognition dataset which contains images from 4 domains. It has around 15, 500 images
organized into 65 categories. We further propose a novel
deep learning framework called Domain Adaptive Hash-
ing (DAH) to learn informative hash codes to address the
problem of unsupervised domain adaptation. We propose
a unique loss function to train the deep network with the
following components: (i) supervised hash loss for labeled
source data, which ensures that source samples belonging
to the same class have similar hash codes; (ii) unsupervised entropy loss for unlabeled target data, which imposes
each target sample to align closely with exactly one of the
source categories and be distinct from the other categories
and (iii) a loss based on multi-kernel Maximum Mean Discrepancy (MK-MMD), which seeks to learn transferable
features within the layers of the network to minimize the
distribution difference between the source and target domains. Figure 1 illustrates the different layers of the DAH
and the components of the loss function.
2. Related Work
There have been many approaches to address the problem of domain-shift in unsupervised domain adaptation.
One straightforward approach is, to modify a classiﬁer
trained for the source data by adapting it to classify target
data or learn a transformation matrix to linearly transform the source data, so that it is aligned with the target
 . Some other procedures re-weight the data points
in the source domain, to select source data that is similar
to the target, when training a domain adaptive classiﬁer,
 . A standard procedure to reduce domain discrepancy is, to project the source and target data to a common
subspace, thereby aligning their principal axes .
Reducing domain disparity through nonlinear alignment of
data has been possible with Maximum Mean Discrepancy
(MMD) - a measure that provides the distribution difference between two datasets in a reproducing-kernel Hilbert
space . Kernel-PCA based methods apply the MMD to
achieve nonlinear alignment of domains . Manifold based approaches are also popular in domain adaptation for computer vision, where the subspace of a domain is
treated as a point on the manifold and transformations are
learned to align two domains . A survey of popular
domain adaptation techniques for computer vision is provided in and a more generic survey of transfer learning
approaches can be found in .
All of the above techniques can be termed as shallow
learning procedures, since the models are learned using predetermined features. In recent years deep learning has become very successful at learning highly discriminative features for computer vision applications . Deep learning
systems like deep CNNs learn representations of data that
capture underlying factors of variation between different
tasks in a multi-task transfer learning setting . These representations also disentangle the factors of variation allowing for the transfer of knowledge between tasks .
Yosinski et al. demonstrated how the lower layers of a
network produce generic features and the upper layers output task speciﬁc features. Based on this, deep learning procedures for domain adaptation train networks to learn transferable features in the fully connected ﬁnal layers of a network . In other approaches to deep domain adaptation, Ganin et al. trained domain adversarial networks
to learn features that make the source and target domain indistinguishable and Long et al. , trained a network to
do both feature adaptation and classiﬁer adaptation using
residual transfer networks.
Unsupervised hashing techniques have been developed
to extract unique hash codes for efﬁcient storage and retrieval of data . Neural network based hashing has
led the way in state-of-the-art unsupervised hashing techniques . The closest work incorporating hashing and adaptation appears in cross-modal hashing, where
deep hashing techniques embed multi-modal data and learn
hash codes for two related domains, like text and images
 . However, these algorithms are not unsupervised
and they are mainly applied to extract common hash codes
for multi-modal data for retrieval purposes. To the best of
our knowledge, there has been no work in unsupervised
domain adaptation using deep hashing networks. We now
present the Domain Adaptive Hashing (DAH) network for
unsupervised domain adaptation through deep hashing.
3. Domain Adaptive Hashing Networks
In unsupervised domain adaptation, we consider data
from two domains; source and target. The source consists
of labeled data, Ds = {xs
i=1 and the target has only
unlabeled data Dt = {xt
i=1. The data points x∗
i belong to
X, where X is some input space. The corresponding labels
are represented by y∗
i ∈Y := {1, . . . , C}. The paradigm of
domain adaptive learning attempts to address the problem of
domain-shift in the data, where the data distributions of the
source and target are different, i.e. Ps(X, Y ) ̸= Pt(X, Y ).
The domain-shift notwithstanding, our goal is to train a
deep neural network classiﬁer ψ(.), that can predict the labels {ˆyt
i=1, for the target data.
We implement the neural network as a deep CNN which
consists of 5 convolution layers conv1 - conv5 and 3 fully
connected layers fc6 - fc8 followed by a loss layer. In our
model, we introduce a hashing layer hash-fc8 in place of
the standard fc8 layer to learn a binary code hi, for every
data point xi, where hi ∈{−1, +1}d. The hash-fc8 layer
is driven by two loss functions, (i) supervised hash loss for
the source data, (ii) unsupervised entropy loss for the target
data. The supervised hash loss ensures hash values that are
distinct and discriminatory, i.e. if xi and xj belong to the
same category, their hash values hi and hj are similar and
different otherwise. The unsupervised entropy loss aligns
the target hash values with source hash values based on the
similarity of their feature representations. The output of the
Figure 1: The Domain Adaptive Hash (DAH) network that outputs hash codes for the source and the target. The network is
trained with a batch of source and target data. The convolution
layers conv1 - conv5 and the fully connected layers fc6 and fc7 are
ﬁne tuned from the VGG-F network. The MK-MMD loss trains
the DAH to learn feature representations which align the source
and the target. The hash-fc8 layer is trained to output vectors of d
dimensions. The supervised hash loss drives the DAH to estimate
a unique hash value for each object category. The unsupervised
entropy loss aligns the target hash values to their corresponding
source categories. Best viewed in color.
network is represented as ψ(x), where ψ(x) ∈Rd, which
we convert to a hash code h = sgn(ψ(x)), where sgn(.)
is the sign function. Once the network has been trained,
the probability of x being assigned a label y is given by
f(x) = p(y|h). We train the network using Ds and Dt and
predict the target data labels ˆyt
∗using f(.).
In order to address the issue of domain-shift, we need to
align the feature representations of the target and the source.
We do that by reducing the domain discrepancy between the
source and target feature representations at multiple layers
of the network. In the following subsections, we discuss
the design of the domain adaptive hash (DAH) network in
3.1. Reducing Domain Disparity
Deep learning methods have been very successful in domain adaptation with state-of-the-art algorithms in recent years. The feature representations transition
from generic to task-speciﬁc as one goes up the layers of
a deep CNN . The convolution layers conv1 to conv5
have been shown to be generic and so, readily transferable,
whereas the fully connected layers are more task-speciﬁc
and need to be adapted before they can be transferred. In
the DAH algorithm, we attempt to minimize the MK-MMD
loss to reduce the domain difference between the source
and target feature representations for fully connected layers, F = {fc6, fc7, fc8}. Such a loss function has been used
in previous research . The multi-layer MK-MMD
loss is given by,
M(Us, Ut) =
i=1 and Ul
i=1 are the set
of output representations for the source and target data at
layer l, where u∗,l
is the output representation of x∗
lth layer. The ﬁnal layer outputs are denoted as Us and Ut.
The MK-MMD measure d2
k(.) is the multi-kernel maximum
mean discrepancy between the source and target representations, . For a nonlinear mapping φ(.) associated with a
reproducing kernel Hilbert space Hk and kernel k(.), where
k(x, y) = ⟨φ(x), φ(y)⟩, the MMD is deﬁned as,
E[φ(us,l)] −E[φ(ut,l)]
The characteristic kernel k(.), is determined as a convex
combination of κ PSD kernels, {km}κ
m=1 βmkm, Pκ
m=1 βm = 1, βm ≥0, ∀m
βm = 1/κ according to and it works well in practice.
3.2. Supervised Hashing for Source Data
The Hamming distance for a pair of hash values hi and
hj has a unique relationship with the dot product ⟨hi, hj⟩,
given by: distH(hi, hj) =
i hj), where d is the
hash length. The dot product ⟨hi, hj⟩can be treated as
a similarity measure for the hash codes. Larger the value
of the dot product (high similarity), smaller is the distance
distH and smaller the dot product (low similarity), larger is
the distance distH. Let sij ∈{0, 1} be the similarity between xi and xj. If xi and xj belong to the same category,
sij = 1 and 0, otherwise. The probability of similarity between xi and xj given the corresponding hash values hi
and hj, can be expressed as a likelihood function, given by,
p(sij|hi, hj) =
where, σ(x) =
1+e−x is the sigmoid function.
dot product ⟨hi, hj⟩increases, the probability of p(sij =
1|hi, hj) also increases, i.e., xi and xj belong to the same
As the dot product decreases, the probability
p(sij = 1|hi, hj) also decreases, i.e., xi and xj belong
to different categories. We construct the (ns × ns) similarity matrix S = {sij}, for the source data with the provided
labels, where sij = 1 if xi and xj belong to the same category and 0, otherwise. Let H = {hi}ns
i=1 be the set of
source data hash values. If the elements of H are assumed
to be i.i.d., the negative log likelihood of the similarity matrix S given H can be written as,
H L(H) = −log p(S|H)
 1 + exp(h⊤
By minimizing Equation (4), we can determine hash values H for the source data which are consistent with the
similarity matrix S. The hash loss has been used in previous research for supervised hashing . Equation
(4) is a discrete optimization problem that is challenging to
solve. We introduce a relaxation on the discrete constraint
hi ∈{−1, +1}d by instead solving for ui ∈Rd, where
Us = {ui}ns
i=1 is the output of the network and ui = ψ(xi)
(the superscript denoting the domain has been dropped for
ease of representation). However, the continuous relaxation
gives rise to (i) approximation error, when ⟨hi, hj⟩is substituted with ⟨ui, uj⟩and, (ii) quantization error, when the
resulting real codes ui are binarized . We account for
the approximation error by having a tanh(.) as the ﬁnal activation layer of the neural network, so that the components
of ui are bounded between −1 and +1. In addition, we also
introduce a quantization loss ||ui −sgn(ui)||2
2 along the
lines of , where sgn(.) is the sign function. The continuous optimization problem for supervised hashing can now
be outlined;
U s L(Us) = −
 1 + exp(u⊤
ui −sgn(ui)
3.3. Unsupervised Hashing for Target Data
In the absence of target data labels, we use the similarity
measure ⟨ui, uj⟩, to guide the network to learn discriminative hash values for the target data. An ideal target output
i, needs to be similar to many of the source outputs from
the jth category
. We assume without loss of
generality, K source data points for every category j where,
j ∈{1, . . . , C} and usj
k is the kth source output from category j. In addition, ut
i must be dissimilar to most other
source outputs usl
k belonging to a different category (j ̸= l).
Enforcing similarity with all the K data points makes for a
more robust target data category assignment. We outline
a probability measure to capture this intuition. Let pij be
the probability that input target data point xi is assigned to
category j where,
k=1 exp(ut
k=1 exp(ut
The exp(.) has been introduced for ease of differentiability and the denominator ensures P
j pij = 1. When the
target data point output is similar to one category only and
dissimilar to all the other categories, the probability vector pi = [pi1, . . . , piC]T tends to be a one-hot vector. A
one-hot vector can be viewed as a low entropy realization
of pi. We can therefore envisage all the pi to be one-hot
vectors (low entropy probability vectors), where the target
data point outputs are similar to source data point outputs in
one and only one category. To this end we introduce a loss
to capture the entropy of the target probability vectors. The
entropy loss for the network outputs is given by,
H(Us, Ut) = −1
pijlog(pij)
Minimizing the entropy loss gives us probability vectors pi
that tend to be one-hot vectors, i.e., the target data point
outputs are similar to source data point outputs from any
one category only. Enforcing similarity with K source data
points from a category, guarantees that the hash values are
determined based on a common similarity between multiple
source category data points and the target data point.
3.4. Domain Adaptive Hash Network
We propose a model for deep unsupervised domain adaptation based on hashing (DAH) that incorporates unsupervised domain adaptation between the source and the target
(1), supervised hashing for the source (5) and unsupervised
hashing for the target (7) in a deep convolutional neural network. The DAH network is trained to minimize
U J = L(Us) + γM(Us, Ut) + ηH(Us, Ut),
where, U := {Us ∪
Ut} and (γ, η) control the importance
of domain adaptation (1) and target entropy loss (7) respectively. The hash values H are obtained from the output of
the network using H = sgn(U). The loss terms (5) and
(7) are determined in the ﬁnal layer of the network with the
network output U. The MK-MMD loss (1) is determined
between layer outputs {Ul
t} at each of the fully connected layers F = {fc6, fc7, fc8}, where we adopt the linear time estimate for the unbiased MK-MMD as described
in and . The DAH is trained using standard backpropagation. The detailed derivation of the derivative of (8)
w.r.t. U is provided in the supplementary material.
Network Architecture: Owing to the paucity of images
in a domain adaptation setting, we circumvent the need to
train a deep CNN with millions of images by adapting the
pre-trained VGG-F network to the DAH. The VGG-F
has been trained on the ImageNet 2012 dataset and it consists of 5 convolution layers (conv1 - conv5) and 3 fully
connected layers (fc6, fc7, fc8). We introduce the hashing
layer hash-fc8 that outputs vectors in Rd in the place of fc8.
To account for the hashing approximation, we introduced
a tanh() layer. However, we encounter the issue of vanishing gradients when using tanh() as it saturates with
large inputs. We therefore preface the tanh() with a batch
normalization layer which prevents the tanh() from saturating. In effect, hash-fc8 := {fc8 →batch-norm →tanh()}.
The hash-fc8 provides greater stability when ﬁne-tuning the
learning rates than the deep hashing networks . Figure 1 illustrates the proposed DAH network.
Table 1: Statistics for the Ofﬁce-Home dataset. Min: # is the
minimum number of images amongst all the categories, Min: Size
and Max: Size are the minimum and maximum image sizes across
all categories and Acc. is the classiﬁcation accuracy.
117×85 pix.
4384×2686 pix.
44.99±1.85
18×18 pix.
2400×2400 pix.
53.95±1.45
75×63 pix.
2560×2560 pix.
66.41±1.18
Real-World
88×80 pix.
6500×4900 pix.
59.70±1.04
4. The Ofﬁce-Home Dataset
Supervised deep learning models require a large volume
of labeled training data. Unfortunately, existing datasets
for vision-based domain adaptation are limited in their
size and are not suitable for validating deep learning algorithms. The standard datasets for vision based domain
adaptation are, facial expression datasets CKPlus and
MMI , digit datasets SVHN , USPS and MNIST ,
head pose recognition datasets PIE , object recognition datasets COIL , Ofﬁce and Ofﬁce-Caltech .
These datasets were created before deep-learning became
popular and are insufﬁcient for training and evaluating deep
learning based domain adaptation approaches. For instance,
the object-recognition dataset Ofﬁce has 4110 images across
31 categories and Ofﬁce-Caltech has 2533 images across 10
categories.
We release the Ofﬁce-Home dataset for domain adaptation based object recognition, that can be used to evaluate deep learning algorithms for domain adaptation. The
Ofﬁce-Home dataset consists of 4 domains, with each domain containing images from 65 categories of everyday objects and a total of around 15, 500 images. The domains
include, Art: artistic depictions of objects in the form of
sketches, paintings, ornamentation, etc.; Clipart: collection of clipart images; Product: images of objects without a background, akin to the Amazon category in Ofﬁce
dataset; Real-World: images of objects captured with a
regular camera.
Public domain images were downloaded from websites like www.deviantart.com and www.ﬂickr.com to create the Art and Real-World domains. Clipart images were gathered from multiple clipart websites.
Product domain images were exclusively collected from
www.amazon.com using web-crawlers. The collected images were manually ﬁltered on the basis of quality, size and
content. The dataset has an average of around 70 images
per category and a maximum of 99 images in a category.
The primary challenge in creating this dataset was acquiring sufﬁcient number of public domain images across all
the 4 domains. Figure 2 depicts a sampling of 16 categories
from the Ofﬁce-Home dataset and Table 1 outlines some
meta data for the dataset. The Acc. column in the Table
1 refers to classiﬁcation accuracies using the LIBLINEAR
SVM classiﬁer (5-fold cross validation) with deep features extracted using the VGG-F network. The dataset is
publicly available for research 1.
5. Experiments
In this section we conduct extensive experiments to
evaluate the DAH algorithm.
Since we propose a domain adaptation technique based on hashing, we evaluate objection recognition accuracies for unsupervised domain adaptation and also study the discriminatory capability of the learned hash codes for unsupervised domain adaptive hashing. The implementation details are available at
 
5.1. Datasets
Ofﬁce : This is currently the most popular benchmark
dataset for object recognition in the domain adaptation computer vision community. The dataset consists of images of
everyday objects in an ofﬁce environment. It has 3 domains;
Amazon (A), Dslr (D) and Webcam (W). The dataset has
around 4, 100 images with a majority of the images (2816
images) in the Amazon domain. We adopt the common
evaluation protocol of different pairs of transfer tasks for
this dataset . We consider 6 transfer tasks for all
combinations of source and target pairs for the 3 domains.
Ofﬁce-Home: We introduce this new dataset and evaluate
it in a similar manner to the Ofﬁce dataset. We consider 12
transfer tasks for the Art (Ar), Clipart (Cl), Product
(Pr) and Real-World (Rw) domains for all combinations
of source and target for the 4 domains. Considering all the
different pairs of transfer enables us to evaluate the inherent
bias between the domains in a comprehensive manner .
5.2. Implementation Details
We implement the DAH using the MatConvnet framework . Since we train a pre-trained VGG-F, we ﬁnetune the weights of conv1-conv5, fc6 and fc7.
their learning rates to 1/10th the learning rate of hash-fc8.
We vary the learning rate between 10−4 to 10−5 over 300
epochs with a momentum 0.9 and weight decay 5 × 10−4.
We set K = 5 (number of samples from a category). Since
we have 31 categories in the Ofﬁce dataset, we get a source
batch size of 31 × 5 = 155. For the target batch, we randomly select 155 samples. The total batch size turns out to
be 310. For the Ofﬁce-Home dataset, with K = 5 and 65
categories, we get a batch size of 650. We set d = 64 (hash
code length) for all our experiments. Since there is imbalance in the number of like and unlike pairs in S, we set the
values in similarity matrix Si,j ∈{0, 10}. Increasing the
similarity weight of like-pairs improves the performance of
DAH. For the entropy loss, we set η = 1. For the MK-
MMD loss, we follow the heuristics mentioned in , to
1 
Figure 2: Sample images from the Ofﬁce-Home dataset. The dataset consists of images of everyday objects organized into 4 domains;
Art: paintings, sketches and/or artistic depictions, Clipart: clipart images, Product: images without background and Real-World:
regular images captured with a camera. The ﬁgure displays examples from 16 of the 65 categories.
determine the parameters. We estimate γ, by validating a
binary domain classiﬁer to distinguish between source and
target data points and select γ which gives largest error on a
validation set. For MMD, we use a Gaussian kernel with a
bandwidth σ given by the median of the pairwise distances
in the training data. To incorporate the multi-kernel, we
vary the bandwidth σm ∈[2−8σ, 28σ] with a multiplicative
factor of 2. We deﬁne the target classiﬁer f(xt
i) = p(y|ht
in terms of 6. The target data point is assigned to the class
with the largest probability, with ˆyi = maxj(pij) using the
hash codes for the source and the target.
5.3. Unsupervised Domain Adaptation
In this section, we study the performance of the DAH
for unsupervised domain adaptation, where labeled data is
available only in the source domain and no labeled data is
available in the target domain. We compare the DAH with
state-of-the-art domain adaptation methods: (i) Geodesic
Flow Kernel (GFK) , (ii) Transfer Component Analysis (TCA) , (iii) Correlation Alignment (CORAL) 
and (iv) Joint Distribution Adaptation (JDA) . We also
compare the DAH with state-of-the-art deep learning methods for domain adaptation: (v) Deep Adaptation Network
(DAN) and (vi) Domain Adversarial Neural Network
(DANN) .
For all of the shallow learning methods,
we extract and use deep features from the fc7 layer of the
VGG-F network that was pre-trained on the ImageNet 2012
dataset. We also evaluate the effect of the entropy loss on
hashing for the DAH. The DAH-e is the DAH algorithm
where η is set to zero, which implies that the target hash
values are not driven to align with the source categories.
We follow the standard protocol for unsupervised domain
adaptation, where all the labeled source data and all the unlabeled target data is used for training.
Results and Discussion: The results are reported for the
target classiﬁcation in each of the transfer tasks in Tables 2
and 3, where accuracies denote the percentage of correctly
Table 2: Recognition accuracies (%) for domain adaptation experiments on the Ofﬁce dataset. {Amazon (A), Dslr (D), Webcam
(W)}. A→W implies A is source and W is target.
classiﬁed target data samples. We present results with hash
length d = 64 bits. The DAH algorithm consistently outperforms the baselines across all the domains for the Ofﬁce-
Home dataset. However, DANN marginally surpasses DAH
for the Ofﬁce dataset, prompting us to reason that domain
adversarial training is more effective than DAH when the
categories are fewer in number. Since domain alignment is
category agnostic, it is possible that the aligned domains are
not classiﬁcation friendly in the presence of large number
of categories. When the number of categories is large, as in
Ofﬁce-Home, DAH does best at extracting transferable features to achieve higher accuracies. We also note that DAH
delivers better performance than DAH-e; thus, minimizing
the entropy on the target data through 7 aids in improved
alignment of the source and target samples, which boosts
the accuracy.
Feature Analysis: We also study the feature representations of the penultimate layer (fc7) outputs using t-SNE embeddings as in . Figure 3a depicts the A-distance between domain pairs using Deep (VGG-F), DAN and DAH
features. Ben-David et al. deﬁned A-distance as the
distance between two domains that can be viewed as the
discrepancy between two domains. Although it is difﬁcult
to estimate its exact value, an approximate distance measure is given by 2(1 −2ǫ), where ǫ is the generalization
error for a binary classiﬁer trained to distinguish between
the two domains. We used a LIBLINEAR SVM clas-
Table 3: Recognition accuracies (%) for domain adaptation experiments on the Ofﬁce-Home dataset.
{Art (Ar), Clipart (Cl),
Product (Pr), Real-World (Rw)}. Ar→Cl implies Ar is source and Cl is target.
siﬁer with 5-fold cross-validation to estimate ǫ. Figure 3a
indicates that the DAH features have the least discrepancy
between the source and target compared to DAN and Deep
features. This is also conﬁrmed with the t-SNE embeddings
in Figures 3b-3d. The Deep features show very little overlap between the domains and the categories depict minimal
clustering. Domain overlap and clustering improves as we
move to DAN and DAH features, with DAH providing the
best visualizations. This corroborates the efﬁcacy of the
DAH algorithm to exploit the feature learning capabilities
of deep neural networks to learn representative hash codes
to address domain adaptation.
5.4. Unsupervised Domain Adaptive Hashing
In this section, we study the performance of our algorithm to generate compact and efﬁcient hash codes from the
data for classifying unseen test instances, when no labels
are available. This problem has been addressed in the literature, with promising empirical results . However,
in a real-world setting, labels may be available from a different, but related (source) domain; a strategy to utilize the
labeled data from the source domain to learn representative
hash codes for the target domain is therefore of immense
practical importance. Our work is the ﬁrst to identify and
address this problem. We consider the following scenarios to address this real-world challenge: (i) No labels are
available for a given dataset and the hash codes need to be
learned in a completely unsupervised manner. We evaluate
against baseline unsupervised hashing methods (ITQ) 
and (KMeans) and also state-of-the-art methods for
unsupervised hashing (BA) and (BDNN) . (ii) Labeled data is available from a different, but related source
domain. A hashing model is trained on the labeled source
data and is used to learn hash codes for the target data. We
refer to this method as NoDA, as no domain adaptation is
performed. We used the deep pairwise-supervised hashing
(DPSH) algorithm to train a deep network with the
source data and applied the network to generate hash codes
for the target data. (iii) Labeled data is available from a
different, but related source domain and we use our DAH
formulation to learn hash codes for the target domain by
reducing domain disparity. (iv) Labeled data is available
Table 4: Mean average precision @64 bits. For the NoDA and
DAH results, Art is the source domain for Clipart, Product
and Real-World and Clipart is the source domain for Art.
Similarly, Amazon and Webcam are source target pairs.
Real-World
in the target domain. This method falls under supervised
hashing (SuH) (as it uses labeled data in the target domain
to learn hash codes in the same domain) and denotes the
upper bound on the performance. It is included to compare the performance of unsupervised hashing algorithms
relative to the supervised algorithm. We used the DPSH algorithm to train a deep network on the target data and
used it to generate hash codes on a validation subset.
Results and Discussion: We applied the precision-recall
curves and the mean average precision (mAP) measures to
evaluate the efﬁcacy of the hashing methods, similar to previous research . The results are depicted in Figures 4 and 5 (precision-recall curves) and Table 4 (mAP
values), where we present hashing with code length d = 64
bits. Hashing performance with d = 16 bits also follows
a similar trend and is presented in the supplementary material. For the sake of brevity, we drop the results with Dslr
as it is very similar to Webcam, with little domain difference. We note that the NoDA has the poorest performance
due to domain mismatch. This demonstrates that domain
disparity needs to be considered before deploying a hashing
network to extract hash codes. The unsupervised hashing
methods ITQ, KMeans, BA and BDNN perform slightly
better compared to NoDA. The proposed DAH algorithm
encompasses hash code learning and domain adaptation in
a single integrated framework. It is thus able to leverage
the labeled data in the source domain in a meaningful manner to learn efﬁcient hash codes for the target domain. This
accounts for its improved performance, as is evident in Figures 4 and 5 and Table 4. The supervised hashing technique
(SuH) uses labels from the target and therefore depicts the
A-Distance
(a) A-Distance
(b) Deep Features (Ar,Cl)
(c) DAN Features (Ar,Cl)
(d) DAH Features (Ar,Cl)
Figure 3: Feature analysis of fc7 layer. (a) A-distances for Deep, DAN and DAH, (b), (c) and (d) t-SNE embeddings for 10 categories
from Art (•) and Clipart(+) domains. Best viewed in color.
(b) Clipart
(c) Product
(d) Real-World
Figure 4: Precision-Recall curves @64 bits for the Ofﬁce-Home dataset. Comparison of hashing without domain adaptation (NoDA),
shallow unsupervised hashing (ITQ, KMeans), state-of-the-art deep unsupervised hashing (BA, BDNN), unsupervised domain adaptive
hashing (DAH) and supervised hashing (SuH). Best viewed in color.
(a) Amazon
(b) Webcam
Figure 5: Precision-Recall curves @64 bits for the Ofﬁce dataset.
Comparison of hashing without domain adaptation (NoDA), shallow unsupervised hashing (ITQ, KMeans), state-of-the-art deep
unsupervised hashing (BA, BDNN), unsupervised domain adaptive hashing (DAH) and supervised hashing (SuH). Best viewed
best performance. The proposed DAH framework consistently delivers the best performance relative to SuH when
compared with the other hashing procedures. This demonstrates the merit of our framework in learning representative hash codes by utilizing labeled data from a different
domain. Such a framework will be immensely useful in a
real-world setting.
6. Conclusions
In this paper, we have proposed a novel domain adaptive hashing (DAH) framework which exploits the feature
learning capabilities of deep neural networks to learn efﬁcient hash codes for unsupervised domain adaptation. The
DAH framework solves two important practical problems:
category assignment with weak supervision or insufﬁcient
labels (through domain adaptation) and the estimation of
hash codes in an unsupervised setting (hash codes for target
data). Thus, two practical challenges are addressed through
a single integrated framework. This research is the ﬁrst
of its kind to integrate hash code learning with unsupervised domain adaptation. We also introduced a new dataset,
Ofﬁce-Home, which can be used to further research in domain adaptation.
Acknowledgements: This material is based upon work
supported by the National Science Foundation (NSF) under Grant No:1116360. Any opinions, ﬁndings, and conclusions or recommendations expressed in this material are
those of the authors and do not necessarily reﬂect the views
of the NSF.