Variational Graph Auto-Encoders
Thomas N. Kipf
University of Amsterdam
 
Max Welling
University of Amsterdam
Canadian Institute for Advanced Research (CIFAR)
 
A latent variable model for graph-structured data
Figure 1: Latent space of unsupervised VGAE
model trained on Cora citation network dataset .
Grey lines denote citation links. Colors denote document class (not provided during training). Best
viewed on screen.
We introduce the variational graph autoencoder (VGAE), a framework for unsupervised
learning on graph-structured data based on the
variational auto-encoder (VAE) . This
model makes use of latent variables and is capable of learning interpretable latent representations for undirected graphs (see Figure 1).
We demonstrate this model using a graph convolutional network (GCN) encoder and a
simple inner product decoder.
achieves competitive results on a link prediction task in citation networks. In contrast to
most existing models for unsupervised learning on graph-structured data and link prediction
 , our model can naturally incorporate
node features, which signiﬁcantly improves predictive performance on a number of benchmark
Deﬁnitions
We are given an undirected, unweighted graph G = (V, E) with N = |V| nodes. We
introduce an adjacency matrix A of G (we assume diagonal elements set to 1, i.e. every node is
connected to itself) and its degree matrix D. We further introduce stochastic latent variables zi,
summarized in an N × F matrix Z. Node features are summarized in an N × D matrix X.
Inference model
We take a simple inference model parameterized by a two-layer GCN:
q(Z | X, A) = QN
i=1 q(zi | X, A) , with
q(zi | X, A) = N(zi | µi, diag(σ2
Here, µ = GCNµ(X, A) is the matrix of mean vectors µi; similarly log σ = GCNσ(X, A).
The two-layer GCN is deﬁned as GCN(X, A) = ˜A ReLU
W1, with weight matrices
Wi. GCNµ(X, A) and GCNσ(X, A) share ﬁrst-layer parameters W0. ReLU(·) = max(0, ·) and
2 is the symmetrically normalized adjacency matrix.
Generative model
Our generative model is given by an inner product between latent variables:
p (A | Z) = QN
j=1 p (Aij | zi, zj) , with
p (Aij = 1 | zi, zj) = σ(z⊤
where Aij are the elements of A and σ(·) is the logistic sigmoid function.
We optimize the variational lower bound L w.r.t. the variational parameters Wi:
L = Eq(Z|X,A)
log p (A | Z)
q(Z | X, A) || p(Z)
 
where KL[q(·)||p(·)] is the Kullback-Leibler divergence between q(·) and p(·). We further take
a Gaussian prior p(Z) = Q
i p(zi) = Q
i N(zi | 0, I). For very sparse A, it can be beneﬁcial to
re-weight terms with Aij = 1 in L or alternatively sub-sample terms with Aij = 0. We choose the
former for the following experiments. We perform full-batch gradient descent and make use of the
reparameterization trick for training. For a featureless approach, we simply drop the dependence
on X and replace X with the identity matrix in the GCN.
Non-probabilistic graph auto-encoder (GAE) model
For a non-probabilistic variant of the VGAE
model, we calculate embeddings Z and the reconstructed adjacency matrix ˆA as follows:
Z = GCN(X, A) .
Experiments on link prediction
We demonstrate the ability of the VGAE and GAE models to learn meaningful latent embeddings on
a link prediction task on several popular citation network datastets . The models are trained on
an incomplete version of these datasets where parts of the citation links (edges) have been removed,
while all node features are kept. We form validation and test sets from previously removed edges and
the same number of randomly sampled pairs of unconnected nodes (non-edges).
We compare models based on their ability to correctly classify edges and non-edges. The validation
and test sets contain 5% and 10% of citation links, respectively. The validation set is used for
optimization of hyperparameters. We compare against two popular baselines: spectral clustering
(SC) and DeepWalk (DW) . Both SC and DW provide node embeddings Z. We use Eq. 4 (left
side) to calculate scores for elements of the reconstructed adjacency matrix. We omit recent variants
of DW due to comparable performance. Both SC and DW do not support input features.
For VGAE and GAE, we initialize weights as described in . We train for 200 iterations using
Adam with a learning rate of 0.01. We use a 32-dim hidden layer and 16-dim latent variables in
all experiments. For SC, we use the implementation from with an embedding dimension of 128.
For DW, we use the implementation provided by the authors of with standard settings used in
their paper, i.e. embedding dimension of 128, 10 random walks of length 80 per node and a context
size of 10, trained for a single epoch.
Discussion
Results for the link prediction task in citation networks are summarized in Table 1.
GAE* and VGAE* denote experiments without using input features, GAE and VGAE use input
features. We report area under the ROC curve (AUC) and average precision (AP) scores for each
model on the test set. Numbers show mean results and standard error for 10 runs with random
initializations on ﬁxed dataset splits.
Table 1: Link prediction task in citation networks. See for dataset details.
84.6 ± 0.01
88.5 ± 0.00
80.5 ± 0.01
85.0 ± 0.01
84.2 ± 0.02
87.8 ± 0.01
83.1 ± 0.01
85.0 ± 0.00
80.5 ± 0.02
83.6 ± 0.01
84.4 ± 0.00
84.1 ± 0.00
84.3 ± 0.02
88.1 ± 0.01
78.7 ± 0.02
84.1 ± 0.02
82.2 ± 0.01
87.4 ± 0.00
84.0 ± 0.02
87.7 ± 0.01
78.9 ± 0.03
84.1 ± 0.02
82.7 ± 0.01
87.5 ± 0.01
91.0 ± 0.02
92.0 ± 0.03
89.5 ± 0.04
89.9 ± 0.05
96.4 ± 0.00
96.5 ± 0.00
91.4 ± 0.01
92.6 ± 0.01
90.8 ± 0.02
92.0 ± 0.02
94.4 ± 0.02
94.7 ± 0.02
Both VGAE and GAE achieve competitive results on the featureless task. Adding input features
signiﬁcantly improves predictive performance across datasets. A Gaussian prior is potentially a
poor choice in combination with an inner product decoder, as the latter tries to push embeddings
away from the zero-center (see Figure 1). Nevertheless, the VGAE model achieves higher predictive
performance on both the Cora and the Citeseer dataset.
Future work will investigate better-suited prior distributions, more ﬂexible generative models and the
application of a stochastic gradient descent algorithm for improved scalability.
Acknowledgments
We would like to thank Christos Louizos, Mart van Baalen, Taco Cohen, Dave Herman, Pramod Sinha
and Abdul-Saboor Sheikh for insightful discussions. This project was funded by SAP Innovation
Center Network.