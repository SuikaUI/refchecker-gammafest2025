SVCCA: Singular Vector Canonical Correlation
Analysis for Deep Learning Dynamics and
Interpretability
Maithra Raghu,1,2 Justin Gilmer,1 Jason Yosinski,3 & Jascha Sohl-Dickstein1
1Google Brain 2Cornell University 3Uber AI Labs
maithrar@gmail•com, gilmer@google•com, yosinski@uber•com, jaschasd@google•com
We propose a new technique, Singular Vector Canonical Correlation Analysis
(SVCCA), a tool for quickly comparing two representations in a way that is both
invariant to afﬁne transform (allowing comparison between different layers and
networks) and fast to compute (allowing more comparisons to be calculated than
with previous methods). We deploy this tool to measure the intrinsic dimensionality of layers, showing in some cases needless over-parameterization; to probe
learning dynamics throughout training, ﬁnding that networks converge to ﬁnal
representations from the bottom up; to show where class-speciﬁc information in
networks is formed; and to suggest new training regimes that simultaneously save
computation and overﬁt less.
Introduction
As the empirical success of deep neural networks ( ) become an indisputable fact, the goal
of better understanding these models escalates in importance. Central to this aim is a core issue
of deciphering learned representations. Facets of this key question have been explored empirically,
particularly for image models, in . Most of these approaches are
motivated by interpretability of learned representations. More recently, studied the similarities
of representations learned by multiple networks by ﬁnding permutations of neurons with maximal
correlation.
In this work we introduce a new approach to the study of network representations, based on an
analysis of each neuron’s activation vector – the scalar outputs it emits on input datapoints. With
this interpretation of neurons as vectors (and layers as subspaces, spanned by neurons), we introduce SVCCA, Singular Vector Canonical Correlation Analysis, an amalgamation of Singular Value
Decomposition and Canonical Correlation Analysis (CCA) , as a powerful method for analyzing
deep representations. Although CCA has not previously been used to compare deep representations,
it has been used for related tasks such as computing the similarity between modeled and measured
brain activity , and training multi-lingual word embeddings in language models .
The main contributions resulting from the introduction of SVCCA are the following:
1. We ask: is the dimensionality of a layer’s learned representation the same as the number
of neurons in the layer? Answer: No. We show that trained networks perform equally well
with a number of directions just a fraction of the number of neurons with no additional
training, provided they are carefully chosen with SVCCA (Section 2.1). We explore the
consequences for model compression (Section 4.4).
2. We ask: what do deep representation learning dynamics look like? Answer: Networks
broadly converge bottom up. Using SVCCA, we compare layers across time and ﬁnd they
31st Conference on Neural Information Processing Systems , Long Beach, CA, USA.
 
index over dataset
index over dataset
index over dataset
Neurons with highest activations
(net1, net2)
Top SVD Directions
(net1, net2)
Top SVCCA directions
(net1, net2)
Figure 1: To demonstrate SVCCA, we consider a toy regression task (regression target as in Figure 3). (a)
We train two networks with four fully connected hidden layers starting from different random initializations,
and examine the representation learned by the penultimate (shaded) layer in each network. (b) The neurons
with the highest activations in net 1 (maroon) and in net 2 (green). The x-axis indexes over the dataset: in
our formulation, the representation of a neuron is simply its value over a dataset (Section 2). (c) The SVD
directions — i.e. the directions of maximal variance — for each network. (d) The top SVCCA directions. We
see that each pair of maroon/green lines (starting from the top) are almost visually identical (up to a sign). Thus,
although looking at just neurons (b) seems to indicate that the networks learn very different representations,
looking at the SVCCA subspace (d) shows that the information in the representations are (up to a sign) nearly
identical.
solidify from the bottom up. This suggests a simple, computationally more efﬁcient method
of training networks, Freeze Training, where lower layers are sequentially frozen after a
certain number of timesteps (Sections 4.1, 4.2).
3. We develop a method based on the discrete Fourier transform which greatly speeds up the
application of SVCCA to convolutional neural networks (Section 3).
4. We also explore an interpretability question, of when an architecture becomes sensitive to
different classes. We ﬁnd that SVCCA captures the semantics of different classes, with
similar classes having similar sensitivities, and vice versa. (Section 4.3).
Experimental Details
Most of our experiments are performed on CIFAR-10 (augmented with
random translations). The main architectures we use are a convolutional network and a residual
network1. To produce a few ﬁgures, we also use a toy regression task: training a four hidden layer
fully connected network with 1D input and 4D output, to regress on four different simple functions.
Measuring Representations in Neural Networks
Our goal in this paper is to analyze and interpret the representations learned by neural networks. The
critical question from which our investigation departs is: how should we deﬁne the representation
of a neuron? Consider that a neuron at a particular layer in a network computes a real-valued
function over the network’s input domain. In other words, if we had a lookup table of all possible
input →output mappings for a neuron, it would be a complete portrayal of that neuron’s functional
However, such inﬁnite tables are not only practically infeasible, but are also problematic to process
into a set of conclusions. Our primary interest is not in the neuron’s response to random data, but
rather in how it represents features of a speciﬁc dataset (e.g. natural images). Therefore, in this
study we take a neuron’s representation to be its set of responses over a ﬁnite set of inputs — those
drawn from some training or validation set.
More concretely, for a given dataset X = {x1, · · · xm} and a neuron i on layer l, zzzl
i, we deﬁne zzzl
be the vector of outputs on X, i.e.
i(x1), · · · ,zzzl
1Convnet layers: conv-conv-bn-pool-conv-conv-conv-bn-pool-fc-bn-fc-bn-out. Resnet layers:
conv-(x10 c/bn/r block)-(x10 c/bn/r block)-(x10 c/bn/r block)-bn-fc-out.
Note that this is a different vector from the often-considered vector of the “representation at a layer
of a single input.” Here zzzl
i is a single neuron’s response over the entire dataset, not an entire layer’s
response for a single input. In this view, a neuron’s representation can be thought of as a single
vector in a high-dimensional space. Broadening our view from a single neuron to the collection of
neurons in a layer, the layer can be thought of as the set of neuron vectors contained within that
layer. This set of vectors will span some subspace. To summarize:
Considered over a dataset X with m examples, a neuron is a vector in Rm.
A layer is the subspace of Rm spanned by its neurons’ vectors.
Within this formalism, we introduce Singular Vector Canonical Correlation Analysis (SVCCA) as
a method for analysing representations. SVCCA proceeds as follows:
• Input: SVCCA takes as input two (not necessarily different) sets of neurons (typically
layers of a network) l1 = {zzzl1
1 , ...,zzzl1
m1} and l2 = {zzzl2
1 , ...,zzzl2
• Step 1 First SVCCA performs a singular value decomposition of each subspace to get subsubspaces l′
2 ⊂l2 which comprise of the most important directions of the original
subspaces l1, l2. In general we take enough directions to explain 99% of variance in the
subspace. This is especially important in neural network representations, where as we will
show many low variance directions (neurons) are primarily noise.
• Step 2 Second, compute the Canonical Correlation similarity ( ) of l′
2: linearly transform l′
2 to be as aligned as possible and compute correlation coefﬁcients. In particular, given the output of step 1, l′
1 = {zzz′l1
1 , ...,zzz′l1
2 = {zzz′l2
1 , ...,zzz′l2
2}, CCA linearly
transforms these subspaces ˜l1 = WXl′
1, ˜l2 = WY l′
2 such as to maximize the correlations
corrs = {ρ1, . . . ρmin(m′
2)} between the transformed subspaces.
• Output: With these steps, SVCCA outputs pairs of aligned directions, (˜zzzl1
i , ˜zzzl2
i ) and how
well they correlate, ρi. Step 1 also produces intermediate output in the form of the top
singular values and directions.
For a more detailed description of each step, see the Appendix. SVCCA can be used to analyse
any two sets of neurons. In our experiments, we utilize this ﬂexibility to compare representations
across different random initializations, architectures, timesteps during training, and speciﬁc classes
and layers.
Figure 1 shows a simple, intuitive demonstration of SVCCA. We train a small network on a toy
regression task and show each step of SVCCA, along with the resulting very similar representations.
SVCCA is able to ﬁnd hidden similarities in the representations.
Distributed Representations
An important property of SVCCA is that it is truly a subspace method: both SVD and CCA work
with span(zzz1, . . . ,zzzm) instead of being axis aligned to the zzzi directions. SVD ﬁnds singular vectors
j=1 sijzzzj, and the subsequent CCA ﬁnds a linear transform W, giving orthogonal canonically correlated directions {˜zzz1, . . . , ˜zzzm} = {Pm
j=1 w1jzzz′
j, . . . , Pm
j=1 wmjzzz′
j}. In other words,
SVCCA has no preference for representations that are neuron (axes) aligned.
If representations are distributed across many dimensions, then this is a desirable property of a
representation analysis method. Previous studies have reported that representations may be more
complex than either fully distributed or axis-aligned but this question remains open.
We use SVCCA as a tool to probe the nature of representations via two experiments:
(a) We ﬁnd that the subspace directions found by SVCCA are disproportionately important to
the representation learned by a layer, relative to neuron-aligned directions.
(b) We show that at least some of these directions are distributed across many neurons.
Experiments for (a), (b) are shown in Figure 2 as (a), (b) respectively. For both experiments, we ﬁrst
acquire two different representations, l1, l2, for a layer l by training two different random initializations of a convolutional network on CIFAR-10. We then apply SVCCA to l1 and l2 to get directions
Number of directions
CIFAR10: Accuracy with SVCCA directions
and random neurons
p2 (4096 neurons) SVCCA
p2 max acts neurons
p2 random neurons
fc1 (512 neurons) SVCCA
fc1 random neurons
fc2 (256 neurons) SVCCA
fc2 max acts neurons
Number of directions
CIFAR10 acc vs neurons used for SVCCA dirns
SVCCA fc1 (512 neurons)
SVCCA p2 (4096 neurons)
50 neurons for fc1
150 neurons for p2
300 neurons for p2
100 neurons for fc1
Figure 2: Demonstration of (a) disproportionate importance of SVCCA directions, and (b) distributed nature
of some of these directions. For both panes, we ﬁrst ﬁnd the top k SVCCA directions by training two conv nets
on CIFAR-10 and comparing corresponding layers. (a) We project the output of the top three layers, pool1, fc1,
fc2, onto this top-k subspace. We see accuracy rises rapidly with increasing k, with even k ≪num neurons
giving reasonable performance, with no retraining. Baselines of random k neuron subspaces and max activation
neurons require larger k to perform as well. (b): after projecting onto top k subspace (like left), dotted lines
then project again onto m neurons, chosen to correspond highly to the top k-SVCCA subspace. Many more
neurons are needed than k for better performance, suggesting distributedness of SVCCA directions.
1 , ..., ˜zzzl1
m} and {˜zzzl2
1 , ..., ˜zzzl2
m}, ordered according to importance by SVCCA, with each ˜zzzli
linear combination of the original neurons, i.e. ˜zzzli
jr zzzlir .
For different values of k < m, we can then restrict layer li’s output to lie in the subspace of
span(˜zzzli
1 , . . . , ˜zzzli
k ), the most useful k-dimensional subspace as found by SVCCA, done by projecting
each neuron into this k dimensional space.
We ﬁnd — somewhat surprisingly — that very few SVCCA directions are required for the network
to perform the task well. As shown in Figure 2(a), for a network trained on CIFAR-10, the ﬁrst
25 dimensions provide nearly the same accuracy as using all 512 dimensions of a fully connected
layer with 512 neurons. The accuracy curve rises rapidly with the ﬁrst few SVCCA directions, and
plateaus quickly afterwards, for k ≪m. This suggests that the useful information contained in m
neurons is well summarized by the subspace formed by the top k SVCCA directions. Two baselines for comparison are picking random and maximum activation neuron aligned subspaces and
projecting outputs onto these. Both of these baselines require far more directions (in this case: neurons) before matching the accuracy achieved by the SVCCA directions. These results also suggest
approaches to model compression, which are explored in more detail in Section 4.4.
Figure 2(b) next demonstrates that these useful SVCCA directions are at least somewhat distributed
over neurons rather than axis-aligned. First, the top k SVCCA directions are picked and the representation is projected onto this subspace. Next, the representation is further projected onto m
neurons, where the m are chosen as those most important to the SVCCA directions . The resulting
accuracy is plotted for different choices of k (given by x-axis) and different choices of m (different
lines). That, for example, keeping even 100 fc1 neurons (dashed green line) cannot maintain the
accuracy of the ﬁrst 20 SVCCA directions (solid green line at x-axis 20) suggests that those 20
SVCCA directions are distributed across 5 or more neurons each, on average. Figure 3 shows a
further demonstration of the effect on the output of projecting onto top SVCCA directions, here for
the toy regression case.
Why the two step SV + CCA method is needed.
Both SVD and CCA have important properties
for analysing network representations and SVCCA consequently beneﬁts greatly from being a two
step method. CCA is invariant to afﬁne transformations, enabling comparisons without natural
alignment (e.g. different architectures, Section 4.4). See Appendix B for proofs and a demonstrative
ﬁgure. While CCA is a powerful method, it also suffers from certain shortcomings, particularly in
determining how many directions were important to the original space X, which is the strength of
Original output
using 200 directions
Projection on top
02 SVCCA directions
Projection on top
06 SVCCA directions
Projection on top
15 SVCCA directions
Projection on top
30 SVCCA directions
Figure 3: The effect on the output of a latent representation being projected onto top SVCCA directions in
the toy regression task. Representations of the penultimate layer are projected onto 2, 6, 15, 30 top SVCCA
directions (from second pane). By 30, the output looks very similar to the full 200 neuron output (left).
SVD. See Appendix for an example where naive CCA performs badly. Both the SVD and CCA
steps are critical to the analysis of learning dynamics in Section 4.1.
Scaling SVCCA for Convolutional Layers
Applying SVCCA to convolutional layers can be done in two natural ways:
(1) Same layer comparisons: If X, Y are the same layer (at different timesteps or across random initializations) receiving the same input we can concatenate along the pixel (height h,
width w) coordinates to form a vector: a conv layer h × w × c maps to c vectors, each
of dimension hwd, where d is the number of datapoints. This is a natural choice because
neurons at different pixel coordinates see different image data patches to each other. When
X, Y are two versions of the same layer, these c different views correspond perfectly.
(2) Different layer comparisons: When X, Y are not the same layer, the image patches seen by
different neurons have no natural correspondence. But we can ﬂatten an h×w×c conv into
hwc neurons, each of dimension d. This approach is valid for convs in different networks
or at different depths.
Scaling SVCCA with Discrete Fourier Transforms
Applying SVCCA to convolutions introduces a computational challenge: the number of neurons
(h×w×c) in convolutional layers, especially early ones, is very large, making SVCCA prohibitively
expensive due to the large matrices involved. Luckily the problem of approximate dimensionality
reduction of large matrices is well studied, and efﬁcient algorithms exist, e.g. .
For convolutional layers however, we can avoid dimensionality reduction and perform exact
SVCCA, even for large networks. This is achieved by preprocessing each channel with a Discrete
Fourier Transform (which preserves CCA due to invariances, see Appendix), causing all (covariance) matrices to be block-diagonal. This allows all matrix operations to be performed block by
block, and only over the diagonal blocks, vastly reducing computation. We show:
Theorem 1. Suppose we have a translation invariant (image) dataset X and convolutional layers
l1, l2. Letting DFT(li) denote the discrete fourier transform applied to each channel of li, the
covariance cov(DFT(l1), DFT(l2)) is block diagonal, with blocks of size c × c.
We make only two assumptions: 1) all layers below l1, l2 are either conv or pooling layers with
circular boundary conditions (translation equivariance) 2) The dataset X has all translations of the
images Xi. This is necessary in the proof for certain symmetries in neuron activations, but these
symmetries typically exist in natural images even without translation invariance, as shown in Figure App.2 in the Appendix. Below are key statements, with proofs in Appendix.
Deﬁnition 1. Say a single channel image dataset X of images is translation invariant if for any
(wlog n × n) image Xi ∈X, with pixel values {zzz11, ...zzznn}, X(a,b)
= {zzzσa(1)σb(1), ...zzzσa(n)σb(n)}
is also in X, for all 0 ≤a, b ≤n −1, where σa(i) = a + i mod n (and similarly for b).
For a multiple channel image Xi, an (a, b) translation is an (a, b) height/width shift on every channel
separately. X is then translation invariant as above.
To prove Theorem 1, we ﬁrst show another theorem:
Theorem 2. Given a translation invariant dataset X, and a convolutional layer l with channels
{c1, . . . ck} applied to X
(a) the DFT of ci, FcF T has diagonal covariance matrix (with itself).
(b) the DFT of ci, cj, FciF T , FcjF T have diagonal covariance with each other.
Finally, both of these theorems rely on properties of circulant matrices and their DFTs:
Lemma 1. The covariance matrix of ci applied to translation invariant X is circulant and block
circulant.
Lemma 2. The DFT of a circulant matrix is diagonal.
Applications of SVCCA
Learning Dynamics with SVCCA
We can use SVCCA as a window into learning dynamics by comparing the representation at a
layer at different points during training to its ﬁnal representation. Furthermore, as the SVCCA
computations are relatively cheap to compute compared to methods that require training an auxiliary
network for each comparison , we can compare all layers during training at all timesteps
to all layers at the ﬁnal time step, producing a rich view into the learning process.
The outputs of SVCCA are the aligned directions (˜xi, ˜yi), how well they align, ρi, as well as intermediate output from the ﬁrst step, of singular values and directions, λ(i)
X , x′(i), λ(j)
Y , y′(j). We
condense these outputs into a single value, the SVCCA similarity ¯ρ, that encapsulates how well the
representations of two layers are aligned with each other,
min (m1, m2)
where min (m1, m2) is the size of the smaller of the two layers being compared. The SVCCA
similarity ¯ρ is the average correlation across aligned directions, and is a direct multidimensional
analogue of Pearson correlation.
The SVCCA similarity for all pairs of layers, and all time steps, is shown in Figure 4 for a convnet
and a resnet architecture trained on CIFAR10.
Freeze Training
Observing in Figure 4 that networks broadly converge from the bottom up, we propose a training
method where we successively freeze lower layers during training, only updating higher and higher
layers, saving all computation needed for deriving gradients and updating in lower layers.
We apply this method to convolutional and residual networks trained on CIFAR-10, Figure 5, using
a linear freezing regime: in the convolutional network, each layer is frozen at a fraction (layer number/total layers) of total training time, while for resnets, each residual block is frozen at a fraction
(block number/total blocks). The vertical grey dotted lines show which steps have another set of layers frozen. Aside from saving computation, Freeze Training appears to actively help generalization
accuracy, like early stopping but with different layers requiring different stopping points.
Interpreting Representations: when are classes learned?
We also can use SVCCA to compare how correlated representations in each layer are with the logits
of each class in order to measure how knowledge about the target evolves throughout the network.
In Figure 6 we apply the DFT CCA technique on the Imagenet Resnet . We take ﬁve different
classes and for different layers in the network, compute the DFT CCA similarity between the logit
of that class and the network layer. The results successfully reﬂect semantic aspects of the classes:
the ﬁretruck class sensitivity line is clearly distinct from the two pairs of dog breeds, and network
develops greater sensitivity to ﬁretruck earlier on. The two pairs of dog breeds, purposefully chosen
so that each pair is similar to the other in appearance, have cca similarity lines that are very close to
each other through the network, indicating these classes are similar to each other.
layer (during training)
layer (end of training)
Convnet, CIFAR-10
Resnet, CIFAR-10
layer (during training)
layer (end of training)
layer (end of training)
layer (end of training)
Weighted SVCCA scale
0% trained
35% trained
75% trained
100% trained
Figure 4: Learning dynamics plots for conv (top) and res (bottom) nets trained on CIFAR-10. Each pane is
a matrix of size layers × layers, with each entry showing the SVCCA similarity ¯ρ between the two layers.
Note that learning broadly happens ‘bottom up’ – layers closer to the input seem to solidify into their ﬁnal
representations with the exception of the very top layers. Per layer plots are included in the Appendix. Other
patterns are also visible – batch norm layers maintain nearly perfect similarity to the layer preceding them due
to scaling invariance (with a slight reduction since batch norm changes the SVD directions which capture 99%
of the variance). In the resnet plot, we see a stripe like pattern due to skip connections inducing high similarities
to previous layers.
Train step
CIFAR10 Conv Freeze Training
test acc base
test acc freeze
Train step
0.90 CIFAR10 Resnet Freeze Training
test acc base
test acc freeze
Figure 5: Freeze Training reduces training cost and improves generalization. We apply Freeze Training to a
convolutional network on CIFAR-10 and a residual network on CIFAR-10. As shown by the grey dotted lines
(which indicate the timestep at which another layer is frozen), both networks have a ‘linear’ freezing regime:
for the convolutional network, we freeze individual layers at evenly spaced timesteps throughout training. For
the residual network, we freeze entire residual blocks at each freeze step. The curves were averaged over ten
Other Applications: Cross Model Comparison and compression
SVCCA similarity can also be used to compare the similarity of representations across different
random initializations, and even different architectures. We compare convolutional networks on
CIFAR-10 across random initializations (Appendix) and also a convolutional network to a residual
network in Figure 7, using the DFT method described in 3.
In Figure 3, we saw that projecting onto the subspace of the top few SVCCA directions resulted in
comparable accuracy. This observations motivates an approach to model compression. In particular,
letting the output vector of layer l be xxx(l) ∈Rn×1, and the weights W (l), we replace the usual
W (l)xxx(l) with (W (l)P T
x )(Pxxxx(l)) where Px is a k × n projection matrix, projecting xxx onto the top
SVCCA directions. This bottleneck reduces both parameter count and inference computational cost
Layer Number
CCA Similarity with Class
CCA Similarity (using DFT) of Layers in
Imagenet Resnet to Different Classes
eskimo_dog
fire truck
Figure 6: We plot the CCA similarity using the Discrete Fourier Transform between the logits of ﬁve classes
and layers in the Imagenet Resnet. The classes are ﬁretruck and two pairs of dog breeds (terriers and husky
like dogs: husky and eskimo dog) that are chosen to be similar to each other. These semantic properties are
captured in CCA similarity, where we see that the line corresponding to ﬁretruck is clearly distinct from the
two pairs of dog breeds, and the two lines in each pair are both very close to each other, reﬂecting the fact that
each pair consists of visually similar looking images. Firetruck also appears to be easier for the network to
learn, with greater sensitivity displayed much sooner.
bncv bncv bncv bncv bncv bncv bncv bn
Resnet layers
Convnet layers
DFT CCA similarity between
Resnet and Convnet on CIFAR10
Figure 7: We plot the CCA similarity using the Discrete Fourier Transform between convolutional layers of a
Resnet and Convnet trained on CIFAR-10. We ﬁnd that the lower layrs of both models are noticeably similar to
each other, and get progressively less similar as we compare higher layers. Note that the highest layers of the
resnet are least similar to the lower layers of the convnet.
for the layer by a factor ∼k
n. In Figure App.5 in the Appendix, we show that we can consecutively
compress top layers with SVCCA by a signiﬁcant amount (in one case reducing each layer to 0.35
original size) and hardly affect performance.
Conclusion
In this paper we present SVCCA, a general method which allows for comparison of the learned distributed representations between different neural network layers and architectures. Using SVCCA
we obtain novel insights into the learning dynamics and learned representations of common neural
network architectures. These insights motivated a new Freeze Training technique which can reduce
the number of ﬂops required to train networks and potentially even increase generalization performance. We observe that CCA similarity can be a helpful tool for interpretability, with sensitivity
to different classes reﬂecting their semantic properties. This technique also motivates a new algorithm for model compression. Finally, the “lower layers learn ﬁrst” behavior was also observed for
recurrent neural networks as shown in Figure App.6 in the Appendix.