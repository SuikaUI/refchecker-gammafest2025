Semantic Image Segmentation with Task-Speciﬁc Edge Detection Using CNNs
and a Discriminatively Trained Domain Transform
Liang-Chieh Chen∗
Jonathan T. Barron, George Papandreou, Kevin Murphy
Alan L. Yuille
 
{barron, gpapan, kpmurphy}@google.com
 
 
Deep convolutional neural networks (CNNs) are the backbone of state-of-art semantic image segmentation systems.
Recent work has shown that complementing CNNs with
fully-connected conditional random ﬁelds (CRFs) can significantly enhance their object localization accuracy, yet dense
CRF inference is computationally expensive. We propose
replacing the fully-connected CRF with domain transform
(DT), a modern edge-preserving ﬁltering method in which
the amount of smoothing is controlled by a reference edge
map. Domain transform ﬁltering is several times faster than
dense CRF inference and we show that it yields comparable
semantic segmentation results, accurately capturing object
boundaries. Importantly, our formulation allows learning
the reference edge map from intermediate CNN features
instead of using the image gradient magnitude as in standard DT ﬁltering. This produces task-speciﬁc edges in an
end-to-end trainable system optimizing the target semantic
segmentation quality.
1. Introduction
Deep convolutional neural networks (CNNs) are very
effective in semantic image segmentation, the task of assigning a semantic label to every pixel in an image. Recently, it
has been demonstrated that post-processing the output of a
CNN with a fully-connected CRF can signiﬁcantly increase
segmentation accuracy near object boundaries .
As explained in , mean-ﬁeld inference in the fullyconnected CRF model amounts to iterated application of the
bilateral ﬁlter, a popular technique for edge-aware ﬁltering.
This encourages pixels which are nearby in position and in
color to be assigned the same semantic label. In practice,
this produces semantic segmentation results which are well
aligned with object boundaries in the image.
One key impediment in adopting the fully-connected CRF
is the rather high computational cost of the underlying bi-
∗Work done in part during an internship at Google Inc.
Convolutional
Neural Network
Filtered Score
Segmentation Score
Edge Prediction
Figure 1. A single uniﬁed CNN produces both coarse semantic
segmentation scores and an edge map, which respectively serve as
input multi-channel image and reference edge to a domain transform edge-preserving ﬁlter. The resulting ﬁltered semantic segmentation scores are well-aligned with the object boundaries. The full
architecture is discriminatively trained by backpropagation (red
dashed arrows) to optimize the target semantic segmentation.
lateral ﬁltering step. Bilateral ﬁltering amounts to highdimensional Gaussian ﬁltering in the 5-D bilateral (2-D position, 3-D color) space and is expensive in terms of both
memory and CPU time, even when advanced algorithmic
techniques are used.
In this paper, we propose replacing the fully-connected
CRF and its associated bilateral ﬁltering with the domain
transform (DT) , an alternative edge-aware ﬁlter. The
recursive formulation of the domain transform amounts to
adaptive recursive ﬁltering of a signal, where information
is not allowed to propagate across edges in some reference
signal. This results in an extremely efﬁcient scheme which
is an order of magnitude faster than the fastest algorithms
for a bilateral ﬁlter of equivalent quality.
The domain transform can equivalently be seen as a recurrent neural network (RNN). In particular, we show that the
domain transform is a special case of the recently proposed
RNN with gated recurrent units. This connection allows us to
share insights, better understanding two seemingly different
methods, as we explain in Section 3.4.
The amount of smoothing in a DT is spatially modulated
by a reference edge map, which in the standard DT corresponds to image gradient magnitude. Instead, we will learn
the reference edge map from intermediate layer features
of the same CNN that produces the semantic segmentation
scores, as illustrated in Fig. 1. Crucially, this allows us to
 
learn a task-speciﬁc edge detector tuned for semantic image
segmentation in an end-to-end trainable system.
We evaluate the performance of the proposed method on
the challenging PASCAL VOC 2012 semantic segmentation
task. In this task, domain transform ﬁltering is several times
faster than dense CRF inference, while performing almost
as well in terms of the mean intersection-over-union (mIOU)
metric. In addition, although we only trained for semantic
segmentation, the learned edge map performs competitively
on the BSDS500 edge detection benchmark.
2. Related Work
Semantic image segmentation
Deep Convolutional Neural Networks (CNNs) have demonstrated excellent
performance on the task of semantic image segmentation
 . However, due to the employment of maxpooling layers and downsampling, the output of these networks tend to have poorly localized object boundaries. Several approaches have been adopted to handle this problem.
 proposed to extract features from the intermediate layers of a deep network to better estimate the object
boundaries. Networks employing deconvolutional layers and
unpooling layers to recover the “spatial invariance” effect of
max-pooling layers have been proposed by . 
used super-pixel representation, which essentially appeals
to low-level segmentation methods for the task of localization. The fully connected Conditional Random Field (CRF)
 has been applied to capture long range dependencies
between pixels in . Further improvements
have been shown in when backpropagating through
the CRF to reﬁne the segmentation CNN. In contrary, we
adopt another approach based on the domain transform 
and show that beyond reﬁning the segmentation CNN, we
can also jointly learn to detect object boundaries, embedding
task-speciﬁc edge detection into the proposed model.
Edge detection
The edge/contour detection task has a
long history , which we will only brieﬂy review. Recently, several works have achieved outstanding
performance on the edge detection task by employing CNNs
 . Our work is most related to the ones
by . While Xie and Tu also exploited features from the intermediate layers of a deep network 
for edge detection, they did not apply the learned edges for
high-level tasks, such as semantic image segmentation. On
the other hand, Bertasius et al. and Kokkinos made
use of their learned boundaries to improve the performance
of semantic image segmentation. However, the boundary
detection and semantic image segmentation are considered
as two separate tasks. They optimized the performance of
boundary detection instead of the performance of high level
tasks. On the contrary, we learn object boundaries in order to directly optimize the performance of semantic image
segmentation.
Long range dependency
Recurrent neural networks
(RNNs) with long short-term memory (LSTM) units
 or gated recurrent units (GRUs) have proven
successful to model the long term dependencies in sequential data (e.g., text and speech). Sainath et al. have
combined CNNs and RNNs into one uniﬁed architecture
for speech recognition. Some recent work has attempted
to model spatial long range dependency with recurrent networks for computer vision tasks . Our
work, integrating CNNs and Domain Transform (DT) with
recursive ﬁltering , bears a similarity to ReNet ,
which also performs recursive operations both horizontally
and vertically to capture long range dependency within
whole image. In this work, we show the relationship between
DT and GRU, and we also demonstrate the effectiveness of
exploiting long range dependency by DT for semantic image
segmentation. While has previously employed the DT
(for joint object-stereo labeling), we propose to backpropagate through both of the DT inputs to jointly learn segmentation scores and edge maps in an end-to-end trainable system.
We show that these learned edge maps bring signiﬁcant improvements compared to standard image gradient magnitude
used by or earlier DT literature .
3. Proposed Model
3.1. Model overview
Our proposed model consists of three components, illustrated in Fig. 2. They are jointly trained end-to-end to
optimize the output semantic segmentation quality.
The ﬁrst component that produces coarse semantic segmentation score predictions is based on the publicly available
DeepLab model, , which modiﬁes VGG-16 net to
be FCN . The model is initialized from the VGG-16
ImageNet pretrained model. We employ the DeepLab-
LargeFOV variant of , which introduces zeros into the
ﬁlters to enlarge its Field-Of-View, which we will simply
denote by DeepLab in the sequel.
We add a second component, which we refer to as EdgeNet. The EdgeNet predicts edges by exploiting features
from intermediate layers of DeepLab. The features are resized to have the same spatial resolution by bilinear interpolation before concatenation. A convolutional layer with
kernel size 1×1 and one output channel is applied to yield
edge prediction. ReLU is used so that the edge prediction is
in the range of zero to inﬁnity.
The third component in our system is the domain transform (DT), which is is an edge-preserving ﬁlter that lends
itself to very efﬁcient implementation by separable 1-D recursive ﬁltering across rows and columns. Though DT is
128 + 256 + 512
Upsampling (x8)
Semantic Segmentation Prediction
Edge Prediction
Upsampling and concatenation
Domain Transform
(one iteration)
Filtered Score Map
Edge Prediction
Segmentation Prediction
Figure 2. Our proposed model has three components: (1) DeepLab for semantic segmentation prediction, (2) EdgeNet for edge prediction,
and (3) Domain Transform to accurately align segmentation scores with object boundaries. EdgeNet reuses features from intermediate
DeepLab layers, resized and concatenated before edge prediction. Domain transform takes as input the raw segmentation scores and edge
map, and recursively ﬁlters across rows and columns to produce the ﬁnal ﬁltered segmentation scores.
traditionally used for graphics applications , we use it to
ﬁlter the raw CNN semantic segmentation scores to be better aligned with object boundaries, guided by the EdgeNet
produced edge map.
We review the standard DT in Sec. 3.2, we extend it to a
fully trainable system with learned edge detection in Sec. 3.3,
and we discuss connections with the recently proposed gated
recurrent unit networks in Sec. 3.4.
3.2. Domain transform with recursive ﬁltering
The domain transform takes two inputs: (1) The raw
input signal x to be ﬁltered, which in our case corresponds
to the coarse DCNN semantic segmentation scores, and (2) a
positive “domain transform density” signal d, whose choice
we discuss in detail in the following section. The output
of the DT is a ﬁltered signal y. We will use the recursive
formulation of the DT due to its speed and efﬁciency, though
the ﬁlter can be applied via other techniques .
For 1-D signals of length N, the output is computed by
setting y1 = x1 and then recursively for i = 2, . . . , N
yi = (1 −wi)xi + wiyi−1 .
The weight wi depends on the domain transform density di
where σs is the standard deviation of the ﬁlter kernel over
the input’s spatial domain.
Intuitively, the strength of the domain transform density
di ≥0 determines the amount of diffusion/smoothing by
controlling the relative contribution of the raw input signal
xi to the ﬁltered signal value at the previous position yi−1
when computing the ﬁltered signal at the current position
yi. The value of wi ∈(0, 1) acts like a gate, which controls
how much information is propagated from pixel i −1 to i.
We have full diffusion when di is very small, resulting into
wi = 1 and yi = yi−1. On the other extreme, if di is very
large, then wi = 0 and diffusion stops, resulting in yi = xi.
Filtering by Eq. (1) is asymmetric, since the current output only depends on previous outputs. To overcome this
asymmetry, we ﬁlter 1-D signals twice, ﬁrst left-to-right,
then right-to-left on the output of the left-to-right pass.
Domain transform ﬁltering for 2-D signals works in a
separable fashion, employing 1-D ﬁltering sequentially along
each signal dimension. That is, a horizontal pass (left-toright and right-to-left) is performed along each row, followed
by a vertical pass (top-to-bottom and bottom-to-top) along
each column. In practice, K > 1 iterations of the two-pass 1-
D ﬁltering process can suppress “striping” artifacts resulting
from 1-D ﬁltering on 2-D signals [16, Fig. 4]. We reduce the
standard deviation of the DT ﬁltering kernel at each iteration,
requiring that the sum of total variances equals the desired
variance σ2
s, following [16, Eq. 14]
k = 1, . . . , K ,
plugging σk in place of σs to compute the weights wi by
Eq. (2) at the k-th iteration.
The domain transform density values di are deﬁned as
di = 1 + gi
where gi ≥0 is the “reference edge”, and σr is the standard
deviation of the ﬁlter kernel over the reference edge map’s
range. Note that the larger the value of gi is, the more
conﬁdent the model thinks there is a strong edge at pixel i,
thus inhibiting diffusion (i.e., di →∞and wi = 0). The
Figure 3. Computation tree for domain transform recursive ﬁltering:
(a) Forward pass. Upward arrows from yi nodes denote feeds to
subsequent layers. (b) Backward pass, including contributions ∂L
from subsequent layers.
standard DT usually employs the color image gradient
but we show next that better results can be obtained by
computing the reference edge map by a learned DCNN.
3.3. Trainable domain transform ﬁltering
One novel aspect of our proposed approach is to backpropagate the segmentation errors at the DT output y through
the DT onto its two inputs. This allows us to use the DT as a
layer in a CNN, thereby allowing us to jointly learn DCNNs
that compute the coarse segmentation score maps in x and
the reference edge map in g.
We demonstrate how DT backpropagation works for the
1-D ﬁltering process of Eq. (1), whose forward pass is illustrated as computation tree in Fig. 3(a). We assume that
each node yi not only inﬂuences the following node yi+1 but
also feeds a subsequent layer, thus also receiving gradient
contributions ∂L
∂yi from that layer during back-propagation.
Similar to standard back-propagation in time, we unroll the
recursion of Eq. (1) in reverse for i = N, . . . , 2 as illustrated
in Fig. 3(b) to update the derivatives with respect to y, and
to also compute derivatives with respect to x and w,
(1 −wi) ∂L
+ (yi−1 −xi) ∂L
∂wi are initialized to 0 and
∂yi is initially set to the value sent by the subsequent layer. Note
that the weight wi is shared across all ﬁltering stages (i.e.,
left-to-right/right-to-left within horizontal pass and top-tobottom/bottom-to-top within vertical pass) and K iterations,
with each pass contributing to the partial derivative.
With these partial derivatives we can produce derivatives
with respect to the reference edge gi. Plugging Eq. (4) into
Eq. (2) yields
Then, by the chain rule, the derivative with respect to gi is
This gradient is then further propagated onto the deep convolutional neural network that generated the edge predictions
that were used as input to the DT.
3.4. Relation to gated recurrent unit networks
Equation 1 deﬁnes DT ﬁltering as a recursive operation.
It is interesting to draw connections with other recent RNN
formulations. Here we establish a precise connection with
the gated recurrent unit (GRU) RNN architecture recently
proposed for modeling sequential text data. The GRU employs the update rule
yi = zi˜yi + (1 −zi)yi−1 .
Comparing with Eq. (1), we can relate the GRU’s “update
gate” zi and “candidate activation” ˜yi with DT’s weight and
raw input signal as follows: zi = 1 −wi and ˜yi = xi.
The GRU update gate zi is deﬁned as zi = σ(fi), where
fi is an activation signal and σ(t) = 1/(1+e−t). Comparing
with Eq. (9) yields a direct correspondence between the DT
reference edge map gi and the GRU activation fi:
2 log(1 + efi) −1
4. Experimental Evaluation
4.1. Experimental Protocol
We evaluate the proposed method on the PASCAL
VOC 2012 segmentation benchmark , consisting of 20
foreground object classes and one background class. We
augment the training set from the annotations by . The
performance is measured in terms of pixel intersection-overunion (IOU) averaged across the 21 classes.
A two-step training process is employed. We
ﬁrst train the DeepLab component and then we jointly ﬁnetune the whole model. Speciﬁcally, we employ exactly the
same setting as to train DeepLab in the ﬁrst stage. In
the second stage, we employ a small learning rate of 10−8
for ﬁne-tuning. The added convolutional layer of EdgeNet
is initialized with Gaussian variables with zero mean and
Baseline: DeepLab
conv2 2 + conv3 3
conv2 2 + conv3 3 + conv4 3
conv2 2 + conv3 3 + conv4 3 + conv5 3
conv1 2 + conv2 2 + conv3 3 + conv4 3
Table 1. VOC 2012 val set. Effect of using features from different
convolutinal layers for EdgeNet (σs = 100 and σr = 1 for DT).
standard deviation of 10−5 so that in the beginning the EdgeNet predicts no edges and it starts to gradually learn edges
for semantic segmentation. Total training time is 11.5 hours
(10.5 and 1 hours for each stage).
Reproducibility
The proposed methods are implemented
by extending the Caffe framework . The code and models are available at 
projects/DeepLab.html.
4.2. Experimental Results
We ﬁrst explore on the validation set the hyper-parameters
in the proposed model, including (1) features for EdgeNet,
(2) hyper-parameters for domain transform (i.e., number of
iterations, σs, and σr). We also experiment with different
methods to generate edge prediction. After that, we analyze
our models and evaluate on the ofﬁcial test set.
Features for EdgeNet
The EdgeNet we employ exploits
intermediate features from DeepLab. We ﬁrst investigate
which VGG-16 layers give better performance with the
DT hyper-parameters ﬁxed. As shown in Tab. 1, baseline
DeepLab attains 62.25% mIOU on PASCAL VOC 2012 validation set. We start to exploit the features from conv3 3,
which has receptive ﬁeld size 40. The size is similar to
the patch size typically used for edge detection . The
resulting model achieves performance of 65.64%, 3.4% better than the baseline. When using features from conv2 2,
conv3 3, and conv4 3, the performance can be further improved to 66.03%. However, we do not observe any signiﬁcant improvement if we also exploit the features from
conv1 2 or conv5 3. We use features from conv2 2, conv3 3,
and conv4 3 in remaining experiments involving EdgeNet.
Number of domain transform iterations
Domain transform requires multiple iterations of the two-pass 1-D ﬁltering
process to avoid the “striping” effect [16, Fig. 4]. We train
the proposed model with K iterations for the domain transform, and perform the same K iterations during test. Since
there are two more hyper-parameters σs and σr (see Eq. (9)),
we also vary their values to investigate the effect of varying
DT iteration
σs=130, σr=0.1
σs=130, σr=0.5
σs=130, σr=1
σs=130, σr=2
DT iteration
σs=170, σr=1
σs=130, σr=1
σs=90, σr=1
σs=50, σr=1
Figure 4. VOC 2012 val set. Effect of varying number of iterations
for domain transform: (a) Fix σs and vary both σr and K iterations.
(b) Fix σr and vary both σs and K iterations.
the K iterations for domain transform. As shown in Fig. 4,
employing K = 3 iterations for domain transform in our
proposed model is sufﬁcient to reap most of the gains for
several different values of σs and σr.
Varying domain transform σs, σr and comparison with
other edge detectors
We investigate the effect of varying
σs and σr for domain transform. We also compare alternative methods to generate edge prediction for domain transform: (1) DT-Oracle, where groundtruth object boundaries
are used, which serves as an upper bound on our method. (2)
The proposed DT-EdgeNet, where the edges are produced
by EdgeNet. (3) DT-SE, where the edges are found by Structured Edges (SE) . (4) DT-Gradient, where the image
(color) gradient magnitude of Eq. (5) is used as in standard
domain transform . We search for optimal σs and σr
for those methods. First, we ﬁx σs = 100 and vary σr in
Fig. 5(a). We found that the performance of DT-Oracle, DT-
SE, and DT-Gradient are affected a lot by different values of
σr, since they are generated by other “plugged-in” modules
(i.e., not jointly ﬁne-tuned). We also show the performance
of baseline DeepLab and DeepLab-CRF which employs
dense CRF. We then ﬁx the found optimal value of σr and
vary σs in Fig. 5 (b). We found that as long as σs ≥90, the
performance of DT-EdgeNet, DT-SE, and DT-Gradient do
not vary signiﬁcantly. After ﬁnding optimal values of σr and
σs for each setting, we use them for remaining experiments.
We further visualize the edges learned by our DT-
EdgeNet in Fig. 6. As shown in the ﬁrst row, when σr
increases, the learned edges start to include not only object
boundaries but also background textures, which degrades the
performance for semantic segmentation in our method (i.e.,
noisy edges make it hard to propagate information between
neighboring pixels). As shown in the second row, varying σs
does not change the learned edges a lot, as long as its value
is large enough (i.e., ≥90).
We show val set performance (with the best values of σs
and σr) for each method in Tab. 2. The method DT-Gradient
improves over the baseline DeepLab by 1.7%. While DT-
SE is 0.9% better than DT-Gradient, DT-EdgeNet further
0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 2
DeepLab−CRF
DT−EdgeNet
DT−Gradient
80 100 120 140 160 180 200
Figure 5. VOC 2012 val set. Effect of varying σs and σr. (a) Fix
σs = 100 and vary σr. (b) Use the best σr from (a) and vary σs.
DeepLab-CRF
DT-Gradient
DT-EdgeNet
DT-EdgeNet + DenseCRF
Table 2. Performance on PASCAL VOC 2012 val set.
enhances performance (4.1% over baseline). Even though
DT-EdgeNet is 1.2% lower than DeepLab-CRF, it is several
times faster, as we discuss later. Moreover, we have found
that combining DT-EdgeNet and dense CRF yields the best
performance (0.8% better than DeepLab-CRF). In this hybrid DT-EdgeNet+DenseCRF scheme we post-process the
DT ﬁltered score maps in an extra fully-connected CRF step.
Similar to , we quantify the accuracy
of the proposed model near object boundaries. We use the
“void” label annotated on PASCAL VOC 2012 validation
set. The annotations usually correspond to object boundaries.
We compute the mean IOU for the pixels that lie within a
narrow band (called trimap) of “void” labels, and vary the
width of the band, as shown in Fig. 7.
Qualitative results
We show some semantic segmentation
results on PASCAL VOC 2012 val set in Fig. 9. DT-EdgeNet
visually improves over the baseline DeepLab and DT-SE.
Besides, when comparing the edges learned by Structured
Edges and our EdgeNet, we found that EdgeNet better captures the object exterior boundaries and responds less than
SE to interior edges. We also show failure cases in the
bottom two rows of Fig. 9. The ﬁrst is due to the wrong predictions from DeepLab, and the second due to the difﬁculty
in localizing object boundaries with cluttered background.
Test set results
After ﬁnding the best hyper-parameters,
we evaluate our models on the test set. As shown in the top
mean IOU (%)
Trimap Width (pixels)
DeepLab−CRF
DT−EdgeNet
DT−Gradient
Figure 7. (a) Some trimap examples (top-left: image. top-right:
ground-truth. bottom-left: trimap of 2 pixels. bottom-right: trimap
of 10 pixels). (b) Segmentation result within a band around the
object boundaries for the proposed methods (mean IOU).
of Tab. 4, DT-SE improves 2.7% over the baseline DeepLab,
and DT-EdgeNet can further enhance the performance to
69.0% (3.9% better than baseline), which is 1.3% behind
employing a fully-connected CRF as post-processing (i.e.,
DeepLab-CRF) to smooth the results. However, if we also
incorporate a fully-connected CRF as post-processing to our
model, we can further increase performance to 71.2%.
Models pretrained with MS-COCO
We perform another experiment with the stronger baseline of , where
DeepLab is pretrained with the MS-COCO 2014 dataset
 . Our goal is to test if we can still obtain improvements
with the proposed methods over that stronger baseline. We
use the same optimal values of hyper-parameters as before,
and report the results on validation set in Tab. 3. We still
observe 1.6% and 2.7% improvement over the baseline by
DT-SE and DT-EdgeNet, respectively. Besides, adding a
fully-connected CRF to DT-EdgeNet can bring another 1.8%
improvement. We then evaluate the models on test set in the
bottom of Tab. 4. Our best model, DT-EdgeNet, improves
the baseline DeepLab by 2.8%, while it is 1.0% lower than
DeepLab-CRF. When combining DT-EdgeNet and a fullyconnected CRF, we achieve 73.6% on the test set. Note
the gap between DT-EdgeNet and DeepLab-CRF becomes
smaller when stronger baseline is used.
Incorporating multi-scale inputs
State-of-art models on
the PASCAL VOC 2012 leaderboard usually employ multiscale features (either multi-scale inputs or features
from intermediate layers of DCNN ). Motivated
by this, we further combine our proposed discriminatively
trained domain transform and the model of , yielding
76.3% performance on test set, 1.5% behind current best
models which jointly train CRF and DCNN 
EdgeNet on BSDS500
We further evaluate the edge detection performance of our learned EdgeNet on the test set of
BSDS500 . We employ the standard metrics to evaluate
edge detection accuracy: ﬁxed contour threshold (ODS Fscore), per-image best threshold (OIS F-score), and average
(b) σs = 100, σr = 0.1
(c) σs = 100, σr = 0.5
(d) σs = 100, σr = 2
(e) σs = 100, σr = 10
(f) Groundtruth
(g) σs = 50, σr = 0.1
(h) σs = 90, σr = 0.1
(i) σs = 130, σr = 0.1
(j) σs = 170, σr = 0.1
Figure 6. Effect of varying domain transform’s σs and σr. First row: when σs is ﬁxed and σr increases, the EdgeNet starts to include more
background edges. Second row: when σr is ﬁxed, varying σs has little effect on learned edges.
precision (AP). We also apply a standard non-maximal suppression technique to the edge maps produced by EdgeNet
for evaluation. Our method attains ODS=0.718, OIS=0.731,
and AP=0.685. As shown in Fig. 8, interestingly, our EdgeNet yields a reasonably good performance (only 3% worse
than Structured Edges in terms of ODS F-score), while
our EdgeNet is not trained on BSDS500 and there is no edge
supervision during training on PASCAL VOC 2012.
Comparison
Employing a fullyconnected CRF is an effective method to improve the segmentation performance. Our best model (DT-EdgeNet) is
1.3% and 1.0% lower than DeepLab-CRF on PASCAL VOC
2012 test set when the models are pretrained with ImageNet or MS-COCO, respectively. However, our method is
many times faster in terms of computation time. To quantify this, we time the inference computation on 50 PAS-
CAL VOC 2012 validation images. As shown in Tab. 5,
for CPU timing, on a machine with Intel i7-4790K CPU,
the well-optimized dense CRF implementation with 10
mean-ﬁeld iterations takes 830 ms/image, while our implementation of domain transform with K = 3 iterations (each
iteration consists of separable two-pass ﬁlterings across rows
and columns) takes 180 ms/image (4.6 times faster). On a
NVIDIA Tesla K40 GPU, our GPU implementation of domain transform further reduces the average computation time
to 25 ms/image. In our GPU implementation, the total computational cost of the proposed method (EdgeNet+DT) is
26.2 ms/image, which amounts to a modest overhead (about
18%) compared to the 145 ms/image required by DeepLab.
Note there is no publicly available GPU implementation of
dense CRF inference yet.
5. Conclusions
We have presented an approach to learn edge maps useful
for semantic image segmentation in a uniﬁed system that
is trained discriminatively in an end-to-end fashion. The
proposed method builds on the domain transform, an edgepreserving ﬁlter traditionally used for graphics applications.
DeepLab-CRF
DT-EdgeNet
DT-EdgeNet + DenseCRF
Table 3. Performance on PASCAL VOC 2012 val set. The models
have been pretrained on MS-COCO 2014 dataset.
DeepLab 
DeepLab-CRF 
DT-EdgeNet
DT-EdgeNet + DenseCRF
DeepLab-CRF-Attention 
DeepLab-CRF-Attention-DT
CRF-RNN 
BoxSup 
CentraleSuperBoundaries++ 
Adelaide Context 
Table 4. mIOU (%) on PASCAL VOC 2012 test set. We evaluate
our models with two settings: the models are (1) pretrained with
ImageNet, and (2) further pretrained with MS-COCO.
We show that backpropagating through the domain transform
allows us to learn an task-speciﬁc edge map optimized for
semantic segmentation. Filtering the raw semantic segmentation maps produced by deep fully convolutional networks
with our learned domain transform leads to improved localization accuracy near object boundaries. The resulting
scheme is several times faster than fully-connected CRFs
that have been previously used for this purpose.
(b) Baseline
(e) EdgeNet
(f) DT-EdgeNet
Figure 9. Visualizing results on VOC 2012 val set. For each row, we show (a) Image, (b) Baseline DeepLab segmentation result, (c) edges
produced by Structured Edges, (d) segmentation result with Structured Edges, (e) edges generated by EdgeNet, and (f) segmentation result
with EdgeNet. Note that our EdgeNet better captures the object boundaries and responds less to the background or object interior edges. For
example, see the legs of left second person in the ﬁrst image or the dog shapes in the second image. Two failure examples in the bottom.
[F=.80] Human
[F=.79] HED
[F=.75] SE
[F=.72] EdgeNet
Figure 8. Evaluation of our learned EdgeNet on the test set of
BSDS500. Note that our EdgeNet is only trained on PASCAL
VOC 2012 semantic segmentation task without edge supervision.
1.2 (0.8%)
Dense CRF (10 iterations)
830 (15.8%)
DT (3 iterations)
180 (3.4%)
25 (17.2%)
CRF-RNN (CRF part) 
Table 5. Average inference time (ms/image). Number in parentheses is the percentage w.r.t. the DeepLab computation. Note that
EdgeNet computation time is improved by performing convolution
ﬁrst and then upsampling.
Acknowledgments
This work wast partly supported by
ARO 62250-CS and NIH Grant 5R01EY022247-03.
The appendix contains: (1) Detailed quantitative results
for the proposed methods, showing per-class semantic segmentation IOU on the PASCAL VOC 2012 test set. (2)
Qualitative edge detection and semantic segmentation results on additional images.
A. Detailed quantitative image segmentation
We provide per-class semantic segmentation IOU on
the PASCAL VOC 2012 test set. We compare with the
DeepLab-LargeFOV and DeepLab-CRF-LargeFOV baselines. In Tab. 6 we show performance of models that have
only been pretrained on the Imagenet 2012 image classiﬁcation task , while in Tab. 7 we show performance of
models that have also been pretrained on the MS-COCO
2014 semantic segmentation task .
B. Qualitative edge detection and image segmentation results
We show additional edge detection and semantic segmentation results on PASCAL VOC 2012 val set in Figs. 10
and 11. We compare results obtained with the proposed
domain transform when using our learned EdgeNet edges vs.
the SE edges of .
(b) Baseline
(e) EdgeNet
(f) DT-EdgeNet
Figure 10. Visualizing results on VOC 2012 val set. For each row, we show (a) Image, (b) Baseline (DeepLab-LargeFOV) segmentation
result, (c) edges produced by Structured Edges, (d) segmentation result with Structured Edges, (e) edges generated by EdgeNet, and (f)
segmentation result with EdgeNet. Similar to Fig. (9) of main paper.
(b) Baseline
(e) EdgeNet
(f) DT-EdgeNet
Figure 11. Visualizing results on VOC 2012 val set. Continued from Fig. 10.
bkg aero bike bird boat bottle
chair cow table dog horse mbike person plant sheep sofa train
DeepLab-LargeFOV 
90.7 74.7 34.0 74.3 57.1
82.6 75.5 79.1 26.2 65.7 55.8 73.0
45.5 66.6 57.1
DeepLab-CRF-LargeFOV 
92.6 83.5 36.6 82.5 62.3
85.4 78.5 83.7 30.4 72.9 60.4 78.5
48.8 73.7 63.3
91.7 78.8 33.5 78.7 60.6
84.5 77.4 81.3 29.0 69.1 59.4 76.1
46.0 70.1 62.5
DT-EdgeNet
92.1 79.8 34.8 79.6 61.3
85.0 78.5 83.2 30.2 70.3 58.9 77.9
47.9 70.8 62.5
DT-EdgeNet + DenseCRF
92.8 83.6 35.8 82.4 63.1
86.2 79.6 84.7 31.8 74.2 61.1 79.6
49.1 74.8 65.1
Table 6. Segmentation IOU on the PASCAL VOC 2012 test set, using the trainval set for training. Model only pretrained on the Imagenet
image classiﬁcation task.
bkg aero bike bird boat bottle
chair cow table dog horse mbike person plant sheep sofa train
DeepLab-COCO-LargeFOV 
92.1 81.6 35.4 81.4 60.1
84.3 79.3 81.8 28.4 71.2 59.0 75.3
50.8 72.7 60.3
DeepLab-CRF-COCO-LargeFOV 
93.4 89.1 38.3 88.1 63.3
87.1 83.1 85.0 29.3 76.5 56.5 79.8
54.9 80.5 64.1
92.6 83.8 35.0 85.5 61.9
85.4 80.3 84.4 30.2 73.6 60.4 77.8
52.3 75.5 64.1
DT-EdgeNet
93.0 85.6 36.0 86.4 63.0
86.0 81.2 85.9 30.7 75.1 60.8 79.3
53.3 75.9 64.4
DT-EdgeNet + DenseCRF
93.5 88.3 37.0 89.8 63.6
87.3 82.0 87.6 31.1 79.0 61.9 81.6
55.9 78.2 65.4
DeepLab-CRF-Attention-DT
94.3 93.2 41.7 88.0 61.7
92.9 84.5 90.4 33.0 82.8 63.2 84.5
57.8 84.3 68.2
Table 7. Segmentation IOU on the PASCAL VOC 2012 test set, using the trainval set for training. Model pretrained on both the Imagenet
image classiﬁcation task and the MS-COCO semantic segmentation task.