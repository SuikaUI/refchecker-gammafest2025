Exploration-exploitation trade-oﬀusing variance
estimates in multi-armed bandits
Jean Yves Audibert∗
Universit´e Paris-Est, Ecole des Ponts ParisTech, CERTIS
6 avenue Blaise Pascal, 77455 Marne-la-Vall´ee, France
Willow - ENS / INRIA
45 rue d’Ulm, 75005 Paris, France
R´emi Munos
INRIA Lille - Nord Europe, SequeL project,
40 avenue Halley, 59650 Villeneuve d’Ascq, France
Csaba Szepesv´ari∗,1
Department of Computing Science
University of Alberta
Edmonton T6G 2E8, Canada
Algorithms based on upper conﬁdence bounds for balancing exploration and
exploitation are gaining popularity since they are easy to implement, eﬃcient
and eﬀective.
This paper considers a variant of the basic algorithm for the
stochastic, multi-armed bandit problem that takes into account the empirical
variance of the diﬀerent arms. In earlier experimental works, such algorithms
were found to outperform the competing algorithms. We provide the ﬁrst analysis of the expected regret for such algorithms. As expected, our results show
that the algorithm that uses the variance estimates has a major advantage over
its alternatives that do not use such estimates provided that the variances of
the payoﬀs of the suboptimal arms are low. We also prove that the regret concentrates only at a polynomial rate. This holds for all the upper conﬁdence
bound based algorithms and for all bandit problems except those special ones
where with probability one the payoﬀobtained by pulling the optimal arm is
larger than the expected payoﬀfor the second best arm. Hence, although upper
conﬁdence bound bandit algorithms achieve logarithmic expected regret rates,
∗Corresponding author.
Email addresses: (Jean Yves Audibert),
 (R´emi Munos), (Csaba Szepesv´ari)
1Csaba Szepesv´ari is on leave from MTA SZTAKI, Budapest, Hungary.
 
January 11, 2009
they might not be suitable for a risk-averse decision maker. We illustrate some
of the results by computer simulations.
Key words:
exploration-exploitation tradeoﬀ, multi-armed bandits, Bernstein
inequality, high probability bound, risk analysis
1. Introduction and notations
In this paper we consider algorithms for stochastic multi-armed bandit problems. Bandit problems illustrate the fundamental diﬃculty of decision making
in the face of uncertainty: A decision maker must choose between following what
seems to be the best choice (“exploit”) or to test (“explore”) some alternative,
hoping to discover a choice that beats the current best choice.
The classical example of a bandit problem is deciding what treatment to
give each patient in a clinical trial when the eﬀectiveness of the treatments are
initially unknown and the patients arrive sequentially . These bandit problems became popular with the seminal paper of Robbins , after which they
have found applications in diverse ﬁelds, such as control, economics, statistics,
or learning theory.
Formally, a K-armed bandit problem (K ≥2) is speciﬁed by K real-valued
distributions, ν1, . . . , νK. In each time step a decision maker can select one of the
distributions to obtain a sample from it. The samples obtained are considered as
rewards. The distributions are initially unknown to the decision maker, whose
goal is to maximize the sum of the rewards received, or equivalently, to minimize
the regret which is deﬁned as the loss compared to the total payoﬀthat can be
achieved given full knowledge of the problem, i.e., when the arm giving the
highest expected reward is pulled all the time.
The name ‘bandit’ comes from imagining a gambler playing with K slot
machines. The gambler can pull the arm of any of the machines, which produces
a random payoﬀas a result: When arm k is pulled the random payoﬀis drawn
from νk. The payoﬀs are assumed to be independent of all previous payoﬀs.
Independence also holds across the arms. We will denote the payoﬀreceived
when the k-th arm is pulled the t-th time by Xk,t.
Since the payoﬀdistributions are initially unknown, the gambler must use
exploratory actions to learn the utility of the individual arms. However, exploration has to be carefully controlled since excessive exploration may lead
to unnecessary losses. Hence, to play well the gambler must carefully balance
exploration and exploitation.
A gambler learning about the distributions of the arms’ payoﬀs can use
all past information to decide about his next action. Thus, designing a strategy for the gambler means that we pick a mapping (“policy”) that maps the
space of possible histories that collects the sequences of decisions and outcomes,
∪t∈N+{1, . . ., K}t × Rt, into the set {1, . . . , K} (indexing the arms).
Let us state the goal of this design problem formally. Let µk = E[Xk,1]
denote the expected reward of arm k.
By deﬁnition, an optimal arm is an
arm having the largest expected reward. The expected payoﬀof such an arm
is the optimal expected reward: µ∗= max1≤k≤K µk.
Let Tk(t) denote the
number of times arm k is chosen by the policy during the ﬁrst t plays and let
It ∈1, . . . , K be the index of the arm played at time t. The (cumulative) regret
of the gambler’s strategy up to time n is deﬁned by
XIt,TIt(t),
where k∗is the index of an optimal arm (when multiple optimal arms exist we
pick one such arm arbitrarily). The goal is to design a policy whose expected
(cumulative) regret, E[ ˆRn], is as small as possible. (Clearly, this is equivalent to
maximizing the total expected reward achieved up to time n.) Wald’s equation
implies that the expected regret satisﬁes
E[Tk(n)] ∆k,
where ∆k = µ∗−µk is the expected loss of playing arm k. Hence, a policy that
aims at minimizing the expected regret should minimize the expected sampling
times of suboptimal arms.
Early papers studied stochastic bandit problems under Bayesian assumptions
(e.g., Gittins ). Lai and Robbins studied bandit problems with parametric
uncertainties in a minimax framework.
They introduced an algorithm that
follows what is now called the “optimism in the face of uncertainty principle”.
Their algorithm works by computing upper conﬁdence bounds for all the arms
and then choosing the arm with the highest such bound. The upper conﬁdence
bound of an algorithm is obtained by maximizing the expected payoﬀwhen
the parameters are varied within an appropriate conﬁdence set. They proved
that the expected regret of their algorithm increases at most at a logarithmic
rate with the number of trials and that the algorithm achieves the smallest
possible regret up to some sub-logarithmic factor (for the considered family of
distributions). Agrawal has shown how to construct upper conﬁdence bound
algorithms that use the sample-means of the arms. More recently, Auer et al. 
considered the non-parametric case when all the knowledge the decision maker
has is that the rewards have bounded range, say they belong to [0, b]. They
have studied several policies, most notably UCB1 which constructs the Upper
Conﬁdence Bound (UCB) for arm k at time t by adding the bias factor
to its sample-mean. They proved that the expected regret of this algorithm
E[ ˆRn] ≤8
log(n) + O(1).
In the same paper they proposed UCB1-NORMAL, a policy specialized to the
case when the payoﬀs are normally distributed with unknown mean and variance. This algorithm estimates the arms’ variances to reﬁne the bias factor.
Under the normality assumption they show that
log(n) + O(1),
k denotes the variance of the kth arm.
Note that one major diﬀerence of this result and the previous one is that
the regret-bound for UCB1 scales with b2, while the regret bound for UCB1-
NORMAL scales with the variances of the arms.
First, let us note that it
can be proven that the scaling behavior of UCB1’s regret-bound with b is not a
proof artifact: The expected regret indeed scales with2 Ω(b2) (see Proposition 1,
Section A.2). Since in many cases b is a conservative, a priori guess on the size
of the interval containing the rewards, it is more than desirable to lessen the
dependence of the algorithm on it. We see that UCB1-NORMAL achieves this
perfectly. However, the price is high: We have to assume that the payoﬀs are
normally distributed.
In the experimental section of their paper Auer et al. introduced another
algorithm, called UCB1-Tuned. This algorithm, similarly to UCB1-NORMAL,
uses the empirical estimates of the variance in the bias sequence.
unlike UCB1-NORMAL, this algorithm is designed to work with any bounded
payoﬀdistribution. The experiments of Auer et al. indicate that the idea of
using empirical variance estimates works: UCB1-Tuned outperformed the other
algorithms in essentially all the experiments. The superiority of this algorithm
has been reconﬁrmed recently in the latest Pascal Challenge . Intuitively,
algorithms using variance estimates should work better than ones that do not
use such estimates (like UCB1) when the variance of some suboptimal arm is
much smaller than b2. If this is the case then a “variance-aware” algorithm can
spot the suboptimal arms much faster, thereby reducing the regret suﬀered.
One purpose of this paper is to study such “variance-aware” algorithms. For
this we study the regret of UCB-V, which is a generic UCB-type algorithm that
use variance estimates in its bias sequence. In particular, the bias sequences of
UCB-V take the form
2Vk,Tk(t−1) ETk(t−1),t
+ c3b ETk(t−1),t
Tk(t −1) ,
where Vk,s is the empirical variance estimate for arm k based on s samples,
E = E·,· (viewed as a function of (s, t)) is the so-called exploration function. A
typical choice for this function is Es,t = ζ log(t). With this choice the algorithm’s
behavior is controlled by the parameters ζ, c > 0.
2Through the paper, we will use the Landau notation:
Ω(g) is a term asymptotically
bounded below by g up to constant factor, and Θ(g) is a term asymptotically bounded below
and above by g (up to constant factors).
Our ﬁrst major contribution is a bound on the expected regret of UCB-V
with this choice of the exploration function that scales in an improved fashion
with b. In particular, in Theorem 4 we show that for c = 1 and ζ = 1.2,
E[ ˆRn] ≤10
The main diﬀerence to the bound (2) is that b2 is replaced by σ2
k. However,
notice that b still appears in the bound, a major diﬀerence to the bound (3).
Although, this is unfortunate, it is possible to show that the dependence on b
is unavoidable (see Section A.1).
In order to prove the above result we will prove a novel tail bound on the
sample average of i.i.d. random variables with bounded support. Unlike previous similar bounds, this bound uses the empirical variance and thus it might be
of independent interest (Theorem 1).
Just like the result of Auer et al. , our regret bound also relies on the
analysis of the sampling times of suboptimal arms (Theorem 2). Compared to
the analysis by Auer et al. , the new result is signiﬁcantly improved. Thanks
to this result, we obtain results on the expected regret for a wide class of exploration functions (Theorem 3), leading to the main result already cited (Theorem 4). In addition, for the “standard” logarithmic sequence we will give lower
limits on the tuning parameters such that if the tuning parameters are below
these limits the loss goes up considerably (Theorems 5 and 6).
The second major contribution of the paper is the analysis of the risk that the
regret of the studied algorithm is much higher than its expected value. To our
best knowledge, for this class of algorithms no such analysis existed previously.
We think that the concentration of regret results obtained can be important
in the analysis of algorithms that nest sequences of bandits, such as the UCT
algorithm proposed by Kocsis and Szepesv´ari , which recently was proven to
be very eﬃcient in computer go (e.g., Gelly et al. ).
In order to analyze the risk, we study the (cumulative) pseudo-regret deﬁned
Note that the expectation of the pseudo-regret and the regret are the same:3
E[Rn] = E[ ˆRn],
but the randomness of the rewards inﬂuences the pseudo-regret only indirectly
(i.e., only through {Tk(n)}). In order to analyze the risk, in Sections 5.2 and 7
3This is a standard result that can be shown using Wald’s identity exploiting that the
rewards coming from diﬀerent arms are independent.
we develop high-probability bounds for the pseudo-regret. Similar results can
be obtained for the cumulative regret (see Remark 2 p.23).
Interestingly, this analysis revealed the following unexpected tradeoﬀ: If
one aims for logarithmic expected regret (or, more generally, for subpolynomial
regret) then the regret will not concentrate exponentially fast around its mean
when with positive probability the optimal arm yields rewards smaller than
some suboptimal arm’s expected reward (Theorem 10).
In order to explain
what happens let us consider the case of two arms that satisfy this condition.
Assume that the ﬁrst arm is the optimal one: µ1 > µ2, ∆2 = µ1 −µ2 > 0.
Then the distribution of the pseudo-regret at time n will have two modes, the
ﬁrst at Θ(log n) and the second at Ω(Θ2n). The second mode corresponds to
the case when the algorithm starts in an unlucky manner in the sense that the
rewards obtained when testing the ﬁrst (optimal) arm are all small in an initial
phase. In this case the algorithm may get stuck with the suboptimal arm for
a long time. Hence, the probability mass associated with the second mode will
decay only polynomially with n and the decay-rate will depend on ∆2. (The
probability that the regret is above a threshold larger than the second mode
decays exponentially.) The decay rate of the mass in the second mode can be
increased by increasing exploration rate. However, then the expected regret
will increase. Our regret tail bound (Theorem 9) makes the dependence on the
algorithm’s parameters explicit in this tradeoﬀ. The theoretical ﬁndings of this
part are illustrated in a series of experiments which are described in Section 6.
In the ﬁnal part of the paper (Section 7) we consider a variant of the problem
when the time horizon is given a priori. As it turns out in this case a good
choice of the exploration function is to make it independent of the global time
index t: Es,t = Es.
In particular, we show that with an appropriate choice
of Es = Es(β), for any 0 < β < 1, the algorithm achieves ﬁnite cumulative
regret with probability 1 −β (Theorem 11). Hence, we name this variant of
the algorithm PAC-UCB (“Probably approximately correct UCB”). Given a
ﬁnite time horizon, n, choosing β = 1/n then yields a logarithmic bound on
the regret that fails to hold at most with probability O(1/n).
This should
be compared with the bound O(1/(log n)a), a > 0 obtained for the standard
choice Es,t = ζ log t in Corollary 1. Thus, knowing the horizon decreases the
risk signiﬁcantly. We conjecture that the knowledge of the time horizon indeed
represents a signiﬁcant advantage in this sense.
2. Notation
We let ⌊x⌋denote the largest integer smaller or equal to x ∈R and let ⌈x⌉
denote the smallest integer larger than x. Further, for u, v reals, u ∧v (u ∨v)
denotes the minimum (resp., maximum) of u and v.
3. The UCB-V algorithm
Let N denote the set of natural numbers including zero and let N+ denote
the set of positive integers. For any k ∈{1, . . . , K} and t ∈N, let Xk,t (resp.,
Vk,t) be the empirical estimate of the expected payoﬀ(resp., variance) of arm
(Xk,i −Xk,t)2,
where by convention Xk,0 ≜0 and Vk,0 ≜0. We recall that k∗is the index of
an optimal arm:
k∈{1,...,K}
In the paper we will use the convention that quantities related to the optimal
arm will be denoted by putting ∗in the upper index.
In the following, we assume that the rewards are bounded. In particular,
we make the simplifying assumption that all the rewards are almost surely in
[0, b] for some b > 0 known to the decision maker. (We loose generality only
because we assume that the bound b is the same for all the arms. However, our
results can be easily generalized to the case when these bounds diﬀer between
the arms.) For easy reference we summarize our assumptions on the reward
sequence here:
Assumption A1 Let K > 2 and let ν1, . . . , νK be distributions over the
reals with support [0, b].
For 1 ≤k ≤K, let {Xk,t} ∼νk be an i.i.d.
sequence of random variables specifying the rewards for arm k.4
Assume that
the rewards of diﬀerent arms are independent, i.e., for any t ≥1, the vectors
(X1,1, . . . , X1,t), . . . , (XK,1, . . . , XK,t) are independent. The decision maker does
not know the distributions of the arms, but knows b.
3.1. The algorithm
Let c ≥0. Let E = (Es,t)s≥0,t≥0 be nonnegative real numbers such that for
any ﬁxed value of s ≥0 the function t 7→Es,t is nondecreasing. We shall call
E (viewed as a function of (s, t)) the exploration function. For any arm k and
nonnegative integers s, t, introduce
Bk,s,t ≜Xk,s +
2Vk,s Es,t
+ c3b Es,t
with the convention that 1/0 = +∞.
UCB-V policy:
At time t, play an arm maximizing Bk,Tk(t−1),t.
Let us summarize the main ideas underlying the algorithm. As long as an
arm is never chosen its bound is inﬁnite. Hence, initially the algorithm tries
all the arms at least once (one by one). After this initial phase the arms will
4The i.i.d. assumption can be relaxed, see e.g., Lai and Yakowitz .
be tried multiple times. The more an arm k has been tested, the closer the
bound (6) gets to the sample-mean, and hence, by the law of large numbers,
to the expected reward µk. So the procedure will hopefully tend to draw arms
having the largest expected rewards with an increasing frequency.
Nevertheless, since the obtained rewards are stochastic it might happen that
during the ﬁrst draws the (unknown) optimal arm always gives low rewards.
This might make the sample-mean of this arm smaller than that of the other
arms. Hence an algorithm that only uses sample-means might get stuck with
not choosing the optimal arm any more. UCB policies (in general) prevent this
situation by using upper conﬁdence bounds on the mean rewards. The conﬁdence level with which these bounds hold determine the amount of exploration
of the policy and ultimately the performance of the algorithm.
The UCB-V policy uses the function, E, to facilitate exploration. Indeed,
assuming that for any ﬁxed s, Es,t increases without bounds in t, we see that if
an arm is not tried for a long time then after a while the last term of (6) will
start to dominate the other terms and will also dominate the bound associated
with the arms drawn very often. This will then allow the algorithm to draw this
arm again and thus the algorithm will have a chance to develop a better estimate of the arm’s expected payoﬀ. In particular, this holds for all the optimal
arms, too and will allow the algorithm to recover even when the optimal arm(s)
start in an unlucky way. We thus see that an appropriate choice of E encourages
exploration; hence it’s name. Naturally, an exploration function that tends to
dominate the sample-means will not give enough room for the observed payoﬀs
to inﬂuence the choices of the actions and as a result the algorithm might draw
suboptimal arms too often. Therefore E must be carefully chosen so as to balance exploration and exploitation. The major idea of upper-conﬁdence bounds
algorithms is that E should be selected such that Bk,s,t is a high-probability
upper bound on the payoﬀof arm k. Then, if no conﬁdence bound fails then a
suboptimal arm k can only be chosen if its conﬁdence bound is larger than ∆k,
its expected payoﬀloss. Since the conﬁdence intervals shrink with increasing
sample sizes the number of times the previous situation can happen is limited.
Further, by designing E such that the error probabilities decay fast enough, we
can make sure that the total error committed due to the failure of the conﬁdence
intervals is not too large either.
In our algorithm, the actual form of the quantity Bk,s,t comes from a novel
tail bound on the sample average of i.i.d. random variables with bounded support. Unlike previous similar bounds (e.g., based on Bennett’s and Bernstein’s
inequalities) that used the true (but unknown) variance our bound uses the
empirical variance. The bound relies on the exponential concentration of the
empirical variance around the true variance.
Theorem 1. Let X1, . . . , Xt be i.i.d. random variables taking their values in
[0, b]. Let µ = E [X1] be their common expected value. Consider the empirical
mean Xt and variance Vt deﬁned respectively by
i=1(Xi −Xt)2
Then, for any t ∈N and x > 0, with probability at least 1 −3e−x,
Furthermore, introducing
β(x, t) = 3 inf
where u ∧v denotes the minimum of u and v, we have for any t ∈N and x > 0,
with probability at least 1 −β(x, t)
holds simultaneously for s ∈{1, 2, . . ., t}.
Proof. See Section A.3.
Remark 1. The uniformity in time is the only diﬀerence between the two assertions of the previous theorem. When we use (9), the values of x and t will
be such that β(x, t) is of order of 3e−x, hence there will be no real price to pay
for writing a version of (7) that is uniform in time. In particular, this means
that if 1 ≤S ≤t is an integer-valued random variable then (9) still holds with
probability at least 1 −β(x, t) and when in (9) s is replaced with S.
Note that (7) is useless for t ≤3 since its right-hand side (r.h.s.) is larger
than b. For any arm k, time t and integer 1 ≤s ≤t we may apply Theorem 1
to the rewards Xk,1, . . . , Xk,s, and obtain that with probability at least 1 −
s=4 e−(c∧1)Es,t, we have µk ≤Bk,s,t. Hence, by our previous remark, at time
t if E takes “suﬃciently high values” then with high probability the expected
reward of arm k is upper bounded by Bk,Tk(t−1),t.
The user of the generic
UCB-V policy has two ‘parameters’ to tune: the exploration function E and the
positive real number c.
There are essentially two types of exploration functions leading to interesting properties of the resulting algorithms in terms of expected regret, highprobability bounds on the regret and tunability with respect to the total number
• the ones in which Es,t depends only on t (see Sections 4 and 5.2).
• the ones in which Es,t depends only on s (see Section 7).
To understand why we do not consider Es,t depending on both s and t, recall
that in Es,t variable s plays the role of the number of pulls of an arm. Hence we
always have s < t. Further, for suboptimal arms we will hopefully have s ≪t.
Normally, the contribution of s to the exploration function should be in the
same order as the contribution of t. Thus, when Es,t already depends on t, the
dependence on s will not alter the behavior (and hence the performance) of the
algorithm in a signiﬁcant way.
3.2. Bounds for the sampling times of suboptimal arms
The natural way of bounding the regret of UCB policies is to bound the
number of times the suboptimal arms are drawn. In this section we derive such
bounds, generalizing and improving upon the previous analysis of Auer et al.
 . The improvement is a necessary step to get tight bounds in the case when
the exploration function scales logarithmically with t, i.e., for the class of most
interesting exploration functions.
Since all the statements here make use of Assumption A1, we will refrain
from citing it. Further, all the results in these sections are for algorithm UCB-V.
Theorem 2. The followings hold: (i) After K plays, each arm has been pulled
once. (ii) Pick an arm k and a time n ∈N+. For any τ ∈R and any integer
u > 1, it holds that
1{∃s:u≤s≤t−1 s.t. Bk,s,t>τ} + 1{∃s∗:1≤s∗≤t−1 s.t. τ≥Bk∗,s∗,t}
Hence, also
 Bk,s,t > τ
 ∃s : 1 ≤s ≤t −1 s.t. Bk∗,s,t ≤τ
Further, it holds that
 Tk(n) > u
 Bk,u,t > τ
 ∃s : 1 ≤s ≤n −u s.t. Bk∗,s,u+s ≤τ
Note that even though the above statements hold for any arm, the bounds
are trivial for the optimal arms. Besides, (10) and (11) hold independently of
the form of the quantity Bk,s,t.
Proof. Part (i) is trivial since at the beginning each arm has an inﬁnite UCB
value, which becomes ﬁnite as soon as the arm has been played once.
Let us thus turn to the proof of Part (ii). To obtain (10), we note that
Tk(n) −u ≤
1{It=k;Tk(t)>u} =
1{It=k; u≤Tk(t−1); 1≤Tk∗(t−1);Bk,Tk(t−1),t≥Bk∗,Tk∗(t−1),t}
1{∃s:u≤s≤t−1 s.t. Bk,s,t>τ} + 1{∃s∗:1≤s∗≤t−1 s.t. τ≥Bk∗,s∗,t}.
Putting these inequalities together proves (10). Taking the expectation of both
sides of (10) and using a union bound, we obtain (11).
Finally, inequality (12) comes from a direct argument that uses that the
exploration function Es,t is a nondecreasing function with respect to t: In order
to prove this inequality consider an event such that the following statements
 ∀t s.t. u + 1 ≤t ≤n we have Bk,u,t ≤τ
∀s s.t. 1 ≤s ≤n −u we have Bk∗,s,u+s > τ
Then for any 1 ≤s ≤n −u and u + s ≤t ≤n it holds that
Bk∗,s,t ≥Bk∗,s,u+s > τ ≥Bk,u,t.
This implies that arm k will not be pulled the (u + 1)-th time. Therefore we
have proved by contradiction that
∃t : u + 1 ≤t ≤n s.t. Bk,u,t > τ
∃s : 1 ≤s ≤n −u s.t. Bk∗,s,u+s ≤τ
By taking probabilities of both sides and using a union-bound argument, we get
the announced result.
4. The expected regret of UCB-V
In this section, we assume that the exploration function does not depend on
s (still, E = (Et)t≥0 is a nondecreasing function of t). We will see that as far
as the expected regret is concerned, a natural choice for Et is the logarithmic
function and that the constant c in Bk,s,t should not be taken too small if one
does not want to suﬀer a polynomial regret instead of a logarithmic one. We
will derive bounds on the expected regret and conclude by specifying natural
constraints on c and Et.
4.1. Upper bounds on the expected regret
Theorem 3. We have
1 + 8(c ∨1)
 (c ∧1)Et, t
where we recall that β
 (c ∧1)Et, t
is essentially of order e−(c∧1)Et (see (8) and
Remark 1).
Note that by (5) the theorem gives a bound on the expected regret, E
We need the following Lemma that will be useful later, too:
Lemma 1. Let u =
. Then for any s, t such that u ≤
s ≤t ≤n, t ≥2, it holds that
P(Bk,s,t > µ∗) ≤2e−s∆2
k+4b∆k/3).
Note that for any suboptimal arm k the probability decays exponentially in s
for s large enough, independently of the value of t and n. Intuitively, this makes
sense as the main term in Bk,s,t is Xk,s, which estimates µk < µ∗.
Proof (of Lemma 1). From the deﬁnition of Bk,s,t (cf. (6)) we obtain
P(Bk,s,t > µ∗)
s > µk + ∆k
k+b∆k/2]Et
s > µk + ∆k
In order to bound the second term note that Vk,s = 1/s Ps
j=1(Xk,j −µk)2 −
(µk −Xk,s)2, hence P
j=1(Xk,j−µk)2
n = (c∨1)En. In order to bound the ﬁrst term note that since u ≤s, t ≤n
and thanks to the choice of u we have
k+b∆k/2]Et
k+2b∆k] = ∆k
where the last inequality holds as it is equivalent to (x −1)2 ≥0 with x =
k+4b∆k . Hence,
P(Bk,s,t > µ∗)
 Xk,s −µk > ∆k/2
j=1(Xk,j−µk)2
k+4b∆k/3),
where in the last step we used Bernstein’s inequality (see (46)) twice.
Proof (of Theorem 3). Because Rn = P
k ∆kTk(n) it suﬃces to bound
E [Tk(n)], where k is the index of a suboptimal arm. Thus, pick such an index k. We use (11) to bound E [Tk(n)] with τ = µ∗and u =
n = (c ∨1)En, as in Lemma 1:
 Bk,s,t > µ∗
 Bk∗,s,t ≤µ∗
Via the help of Lemma 1, the inner sum of the ﬁrst double sum is bounded as
P(Bk,s,t > µ∗) ≤2
k+4b∆k/3) = 2 e−u∆2
k+4b∆k/3) ≤
Here we have used that 1−e−x ≥2x/3 that holds when 0 ≤x ≤3/4. The other
term of (16) is bounded by using the uniform, empirical variance-estimate-based
deviation bound (9) of Theorem 1. Putting the so obtained bounds together we
E [Tk(n)] ≤1 + 8E′
t=u+1 β((c ∧1)Et, t).
This gives the announced result since by assumption u ≥16En.
In order to balance the terms in (14) the exploration function should be
chosen to be proportional to log t, yielding the following upper estimate of the
payoﬀof arm k provided that this arm was chosen s times up to time t:
Bk,s,t ≜Xk,s +
2ζVk,s log t
+ c3bζ log t
For this choice, the following theorem, the main result of this section, gives an
explicit bound on the expected regret:
Theorem 4. Let c = 1 and Et = ζ log t for ζ > 1. Then there exists a constant
cζ that depends on ζ only such that for n ≥2
For instance, for ζ = 1.2, the result holds with cζ = 10.
Proof. Inequality (19) follows directly from Theorem 3 once we bound the
four terms between the brackets in (14). To obtain the logarithmic regret, the
third term of (14) requires ζ ≥1 while the fourth term requires ζ > 1.
The proof of the numerical assertion is tedious. First it uses that
• b n is always a trivial upper bound on Rn,
• b (n −1) is a trivial upper bound on Rn when n ≥K (since in the ﬁrst K
rounds, any optimal arm is drawn exactly once).
As a consequence, the numerical bound is non-trivial only for 20 log n < n−1, so
we only need to check the result for n > 91. For n > 91, we bound the constant
term of (14) using 1 ≤
log 91 ≤a1 2b
∆k (log n), with a1 = 1/(2 log 91) ≈0.11.
The second term between the brackets in (14) is bounded by a2
with a2 = 8 × 1.2 = 9.6. For the third term, we use that for n > 91, we have
24n−0.2 < a3 log n, with a3 =
910.2×log 91 ≈0.21. By tedious computations, the
fourth term can be bounded by a4 2b
∆k (log n), with a4 ≈0.07. This gives the
desired result since a1 + a2 + a3 + a4 ≤10.
As promised, Theorem 4 gives a logarithmic bound on the expected regret
that has a linear dependence on the range of the reward contrary to bounds on
algorithms that do not take into account the empirical variance of the reward
distributions (see e.g. the bound (2) that holds for UCB1).
4.2. Lower limits on the bias sequence
The previous result is well complemented by the following result, which
essentially says that we should not use Et = ζ log t with ζ < 1.
Theorem 5. Consider Et = ζ log t and let n denote the total number of draws.
Whatever c is, if ζ < 1, then there exist some reward distributions (depending
on n) such that
• the expected number of draws of suboptimal arms using the UCB-V algorithm is polynomial in the total number of draws
• the UCB-V algorithm suﬀers a polynomial loss.
Proof. We consider the following reward distributions:
• The distribution of the rewards of arm 1 is concentrated on 0 and 1 with
equal probabilities.
• The other arms provide a reward equal to 1
2 −εn deterministically.
Deﬁne ˜b ≜3cbζ.
Notice that arm 1 is the optimal arm.
After s plays of this arm, since we
necessarily have Vk,s ≤1/4, for any t ≤n we have
2V1,sζ log t
+ ˜b log t
+ ˜b log n
On the other hand, for any 0 ≤˜s ≤t and arm k > 1, we have
Bk,˜s,t = 1
2 −εn + ˜b log t
So the algorithm will continue to choose arm 1, i.e., will behave badly, as long
as for some s < n, we have B1,s,t < 1/2 −εn. Now, we will choose εn and s so
that this happens with a non-negligible probability.
To do this, we need a lower bound on the deviations of X1,s from 1/2, which
is provided by the following lemma.
Lemma 2. Let Xs denote the mean of s independent Bernoulli random variables with parameter 1/2. There is a constant C > 0 such that for any s > 1
and any 1 ≤κ ≤s1/3/(8 log s),
Proof (of Lemma 2). From Stirling’s formula
2πn e1/(12n+1) < n! < nne−n√
2πn e1/(12n),
for ℓsuch that (s + ℓ)/2 ∈{0, 1, . . ., s}, we have
s2 )e−ℓlog(1+ ℓ
where the last inequality uses log(1+t) ≤t for any t > 0. Let ℓ0 = √2κs log s+
s/(2κ log s). For ℓsuch that √2κs log s ≤ℓ≤ℓ0, since ℓ0 ≤2√2κs log s ≤
s2/3 and s ≥2, we have
4κ log s −1
By summing the probabilities corresponding to √2κs log s ≤ℓ≤ℓ0, we obtain
30√κ log s.
Let ζ′ = (1+ζ)/2 and κ > 1/(1−ζ) such that nζ′/κ is an integer larger than
(8ζ′ log n)3 (for a ﬁxed ζ < 1, such a κ exists as soon as n is suﬃciently large).
We consider s = nζ′/κ so that from (20) and Lemma 2, we obtain
2 −(√ζ′ −√ζ)
2nζ′/κ + ˜b log n
√ζ′ log n.
In view of (21), we take εn =
2nζ′/κ −2˜b log n
nζ′/κ such that with probability at least C
√ζ′ log n, we draw the optimal arm no more than s = nζ′/κ times.
Up to multiplicative constants, this leads to an expected number of draws of
suboptimal arms larger than (n −nζ′/κ) n−ζ′
√log n ≈n1−ζ′
√log n and an expected regret
larger than (n −nζ′/κ)εnn−ζ′ ≈n1−ζ′−ζ′/(2κ) > n(1−ζ)/2−1/(2κ) up to logarithmic factors. Since the exponent is positive, we have obtained that polynomial
expected regret can occur as soon as ζ < 1.
So far we have seen that for c = 1 and ζ > 1 the algorithm achieves logarithmic regret, and that the constant ζ could not be taken below 1 (independently
of the value of c) without risking to suﬀer a polynomial regret. Now, let us
consider the last term, which is linear in the ratio Et/s, in Bk,s,t. The next
result shows that this term is also necessary to obtain a logarithmic regret:
Theorem 6. Consider Et = ζ log t. Independently of the value of ζ, if cζ < 1/3,
there exist probability distributions of the rewards such that the UCB-V algorithm
suﬀers a polynomial loss.
Proof. See Section A.4.
The construction used in the proof is a 2-armed bandit problem, where the
optimal arm has a Bernoulli payoﬀwith a parameter ε adjusted to cζ and the
suboptimal arm deterministically gives a payoﬀof ε/2.
The parameter ε is
chosen such that with a polynomially decaying probability it holds that the
optimal arm during its ﬁrst O(log n) pulls always returns 0 and as a result it is
not pulled more than Ω(log n) times during the ﬁrst n steps. This results in a
polynomial regret.
To conclude the above analysis, the natural choice for the bias sequence is
Bk,s,t ≜Xk,s +
2Vk,s log t
This choice corresponds to the critical exploration function Et = ζ log t with
ζ = 1 and to c = 1/3, that is, the minimal associated value of c in view of
the previous theorem. In practice, it would be unwise (or risk seeking) to use
smaller constants than these.
5. Risk bounds
Decision makers may care not only about a good expected return, but also
about the distribution of the return. One desired property of a good algorithm
is to guarantee high returns with high probability, alternatively to guarantee
that the probability of a large regret is small. Motivated by this, in the next
section we study the tail distribution of the regret of UCB1 (we also provide a
reﬁned analysis of its expected regret), followed by a result in the subsequent
section that concerns the tail behavior of the regret of UCB-V. These results
are illustrated by computer experiments in Section 6.
5.1. Risk bounds for UCB1
In this section we analyze the behavior of UCB1 in terms of the expected
regret, as well as the probability of a high regret when the bias factor depends
on an exploration coeﬃcient ρ > 1. The upper bounds take the form:
Bk,s,t ≜Xk,s + b
We remind that in the original version of UCB1, the exploration coeﬃcient
was set to ρ = 2.
We show in the next result that the expected regret is
E[Rn] = O(ρ log n), which exhibits a linear dependency w.r.t. the coeﬃcient
ρ (the greater ρ the greater the exploration of all arms). Next, we provide an
upper bound on the probability of high (pseudo-) regret of the form P(Rn >
z) = O(z1−2ρ) (the greater ρ the thinner the tail on the pseudo-regret).
The user may thus choose a range of possible algorithms between an algorithm (when setting ρ to a value close to 1) which yields low regret on the
average but which may be risky (high probability of obtaining less rewards than
expected), or an algorithm (when ρ is larger) which has a higher regret on the
average, but which is more secure, in the sense that the actual regret is more
concentrated around its expectation. Thus, the algorithm exhibits a tradeoﬀ
between expected reward and risk.
Theorem 7. Let ρ > 1. The expected pseudo-regret for UCB1 deﬁned by (25)
ρ log(n) + ∆k
The proof parallels the proof of Theorem 3. We start with a Lemma that mimics
Lemma 3. Let n ≥2, k be index of some arm and u =
for any u ≤s ≤t ≤n, we have
 Bk,s,t > µ∗
Proof (of Lemma 3). By the choice of u, s, t, we have b
Therefore, P
 Bk,s,t > µ∗
k/(2b2), where we used Hoeﬀding’s inequality (cf. ).
Proof (of Theorem 7). Again, because Rn = P
k ∆kTk(n) it suﬃces to
bound E [Tk(n)], where k is the index of a suboptimal arm. Thus, pick such
an index k. We use (11) to bound E [Tk(n)] with τ = µ∗and u as in Lemma 3:
 Bk,s,t > µ∗
 Bk∗,s,t ≤µ∗
Therefore, for any s ≥u, P
 Bk,s,t > µ∗
k/(2b2) ≤n−2ρ and we deduce
 Bk,s,t > µ∗
≤n2(1−ρ)/2. The ﬁrst sum in (28) is thus
bounded by n2(1−ρ)/2 ≤1/2 whenever n ≥1.
For the second sum, we have P
 Bk∗,s,t ≤µ∗
≤t−2ρ, again from Hoeﬀding’s
inequality. Thus
 Bk∗,s,t ≤µ∗
t1−2ρdt = u−2(ρ−1)
for ρ > 1. Thus (28) implies that E [Tk(n)] ≤
2ρ log(n) + 3
2(ρ−1) holds
for all n ≥1. The bound on the expected regret follows.
Theorem 8. Assume that ρ > 1/2.
Let vk = (2b/∆k)2, r0 = P
ρvk log n). Then, for any x ≥1, we have
n−2ρx+1 + ((1 + ρvk log n)x)−2ρ+1
Proof. We have:
∆kTk(n) > x
∆k(1 + ρvk log n)
Tk(n) > (1 + ρvk log n)x
Deﬁne uk = ⌊(1 + ρvk log n)x⌋. Hence, P
 Tk(n) > (1+ρvk log n)x
. We use (12) with u = uk and τ = µ∗to bound P
 Tk(n) > uk
 Tk(n) > uk
 Bk,uk,t > µ∗
 Bk∗,s,uk+s ≤µ∗
Since uk ≥⌈ρvk log n⌉, we can apply Lemma 3. This gives P
 Bk,uk,t > µ∗
k/(2b2), which can be further bounded by e−2xρ log n = n−2ρx since uk ≥
xρvk log n. Hence, the ﬁrst sum in (30) is bounded by n−2ρx+1.
Now, Hoeﬀding’s inequality gives P
 Bk∗,s,uk+s ≤µ∗
≤(uk + s)−2ρ. Thus
the second sum in (30) is bounded by Pn−uk
 Bk∗,s,uk+s ≤µ∗
uk t−2ρdt = u1−2ρ
2ρ−1 ≤((1+vkρ log n)x)1−2ρ
. Collecting the terms gives (29).
The second term of (29) in Theorem 8 is only polynomial in x. In fact,
this bound cannot be improved in the sense that there exist distributions of the
rewards for which for some constant C > 0, for any z large enough, P
≥1/(CzC). See Theorem 10 for the analogous statement for UCB-V.
Theorems 7 and 8 show that the more we explore (i.e. larger ρ is), the smaller
the tail of the regret is. However, this comes at the price of a larger expected
regret. The next section is devoted to proving similar results for UCB-V.
5.2. Risk bounds for UCB-V
In this section we concentrate on the analysis of the concentration properties
of the pseudo-regret for UCB-V. As we will see in Remark 2 p.23, the concentration properties of the regret follow from the concentration properties of the
pseudo-regret, hence there is no compromise in studying the pseudo-regret.
We still assume that the exploration function does not depend on s and that
E = (Et)t≥0 is nondecreasing.
s0=0<s1<···<sM=n
sj+1≤α(sj+1)
(c∧1)Esj +t+1
This function will appear naturally in the tail-bound of the pseudo-regret of
UCB-V. Although ˜βn(t) has a complicated deﬁnition, up to second order logarithmic terms it is of the order e−(c∧1)Et when Et = Θ(log t). This can be seen
by considering (disregarding rounding issues) the geometric grid sj = αj with α
close to 1 and noting that with Cα = (c∧1)/α, we have P
j:αj≤t e−Cα log(t+αj) =
log αe−Cα log t) and P
j:αj>t e−Cα log(t+αj) = Θ(e−Cα log t).
One of the main results of the paper is the following tail-bound for the
pseudo-regret of UCB-V:
Theorem 9. Let
Then, for any x ≥1, we have
2ne−(c∨1)Enx + ˜βn(⌊vkEnx⌋)
Proof. The proof parallels the proof of Theorem 8. First note that
k:∆k>0 ∆kTk(n) > P
k:∆k>0 ∆k(1 + vkEn)x
Tk(n) > (1 + vkEn)x
We use (12) with τ = µ∗and u = ⌊(1 + vkEn)x⌋. Since u ≥⌈vkEn⌉we can apply
Lemma 1 to get P(Bk,u,t > µ∗) ≤2e−u∆2
k+4b∆k/3) ≤2e−(c∨1)Enx, where
the last inequality follows because u ≥vkEnx. To bound the other probability
in (12), we use α ≥1 and the grid s0, . . . , sM of {1, . . . , n} realizing the minimum
of (31) when t = u. Let Ij = {sj + 1, . . . , sj+1}. Then
 ∃s : 1 ≤s ≤n −u s.t. Bk∗,s,u+s ≤µ∗
 ∃s ∈Ij s.t. Bk∗,s,sj+u+1 ≤µ∗
 ∃s ∈Ij s.t. s(Xk∗,s −µ∗) +
2sVsEsj+u+1 + 3bcEsj+u+1 ≤0
(c∧1)Esj +u+1
= ˜βn(u) ≤˜βn(⌊vkEnx⌋),
where the last line comes from (47) with the roles ′n’= sj+1, ‘t’ restricted to Ij
and ‘x’= (c ∧1)Esj+u+1/α.
In particular, when c = 1 and Et = ζ log t with ζ > 1, the last term dominates
the ﬁrst in (32), and Theorem 9 leads to the following corollary, which essentially
says that for any z > γ log n with γ large enough,
for some constant C > 0:
Corollary 1. Assume that c = 1 and Et = ζ log t, where ζ > 1. Then there
exist κ1 > 0 and κ2 > 0 that depend only on b, K, σ1, . . . , σK and ∆1, . . . , ∆K
such that for any ε > 0, n ≥3 and z > κ1 log n, it holds that
Proof. It suﬃces to prove the result for ε ≤1/2, since for larger ε, the property holds by possibly considering a twice larger constant κ2. For κ3 > 0 and
κ4 > 0 well chosen and depending only on θ ≜(b, K, σ1, . . . , σK, ∆1, . . . , ∆K),
Theorem 9 gives
P(Rn > κ3Enx) ≤2nKe−Enx + K ˜βn(⌊κ4Enx⌋).
Deﬁning x = z/(κ3En) and z′ = ⌊κ4Enx⌋= ⌊κ4/κ3z⌋, this rewrites into
P(Rn > z) ≤2nKe−z/κ3 + K ˜βn(z′).
For κ1 ≜2κ3, n ≥3 and z > κ1 log n, we have ne−z/κ3 ≤e−z/κ1 so the ﬁrst
term of the r.h.s is upper bounded by
2K log(z/κ1)
s>κ1 log 3
e−s/κ1 (s/κ1)ζ
2K log(z/κ1)
log(log 3)
2K log(z/κ1)
log(log 3)
for an appropriate choice of κ′
2 that depends only on θ. To upper bound ˜βn(z′),
we consider a geometric grid with increment α = 1/(1 −ε) and split the sum
deﬁning ˜βn(z′) (cf. (31)) into two parts: for indexes j with sj ≤z′ we use
(c∧1)Esj +z′+1
α = (z′)−ζ(1−ε),
whereas for indexes j with sj > z′, we use e−
(c∧1)Esj +z′+1
≤e−jζ log α
The ﬁrst part of the sum has at most 1 + (log z′)/ log[1/(1 −ε)] terms, which is
of order (log(z/κ1))/ε when ε ≤1/2. Let j0 be the smallest index with sj > z′.
We bound the second part of the sum as follows:
e−j0ζ(log α)/α
1−e−ζ(log α)/α ≤
1−(1−ε)ζ(1−ε)
ζ(1−ε) ≤2ζ(z′)ζ(1−ε)
≤2ζ+1(z′)ζ(1−ε)
where the second to last inequality uses 2−ζ ≤(1 −ε)ζ(1−ε) ≤(1 −ε)1/2 which
holds since ζ > 1 and ε ≤1/2. Combining the bounds gives the ﬁnal result.
Since the regret is expected to be of order log n the condition z = Ω(log n)
is not an essential restriction. Further, the regret concentration, although it
improves as ζ grows, is pretty slow. For comparison, remember that a zeromean martingale Mn with increments bounded by 1 would satisfy P(Mn > z) ≤
exp(−2z2/n).
The slow concentration for UCB-V happens because the ﬁrst
Ω(log(t)) choices of the optimal arm can be unlucky (yielding small rewards) in
which case the optimal arm will not be selected any more during the ﬁrst t steps.
As a result, the distribution of the regret will be of a mixture form with a mode
whose position scales linearly with time and whose associated mass decays only
at a polynomial rate. The rate of this decay is in turn controlled by ζ. The
following result shows that the polynomial rate obtained in Corollary 1 cannot
be replaced by an exponential rate when there is a chance for the optimal arm
to be unlucky.5
5An entirely analogous result holds for UCB1.
Theorem 10. Assume that the optimal arm is unique. Consider Et = ζ log t
with c ζ > 1. Let ˜µ = sup{v ∈R : P(Xk∗,1 < v) = 0} be the essential inﬁmum
of the optimal arm’s distribution and let ˜k be the index of a second best arm.
The followings hold:
1. If ˜µ > µ˜k then the pseudo-regret has exponentially small tails.
2. If, on the contrary, ˜µ < µ˜k then the pseudo-regret assumes a polynomial
tail only.
When there are multiple optimal arms and the minimum of the essential inﬁmums of the optimal arms’ payoﬀs is above the mean payoﬀof a second best
arm then the ﬁrst part of the result continues to hold. On the other hand, when
the maximum of the essential inﬁmums is below the mean payoﬀof a second
best arm then the second part continues to hold.
Proof. First consider the case when ˜µ > µ˜k. Let µ′ be such that µ˜k < µ′ < ˜µ
and let δk = µ′−µk. The bound on the tail probability of Rn is bounded in terms
of the tail-probabilities of Tk(n), where k ranges over the indexes of suboptimal
arms as in (33). Fix such a k. The tail of Tk(n) is bounded by using (12)
with τ = µ′ and where u =
. This value of τ makes the
last probability in (12) vanish. The ﬁrst term is controlled as in the proof of
Theorem 9. Precisely, for v′
k ≜8(c ∨1)
and any x ≥1 we have
2elog(Kn)−(c∨1)Enx,
which proves that Rn has exponential tails in this case.
Now consider the case when ˜µ < µ˜k.
We prove the result for a special
distribution ﬁrst and then argue that the general case follows along similar
lines. Consider the following payoﬀdistributions:
• the optimal arm with index 1 concentrates its rewards on ˜µ and b such
that its expected reward is strictly larger than µ˜k,
• all suboptimal arms are deterministic to the extent that they always provide a reward equal to µ˜k.
Let q be any positive integer. Consider the event:
X1,1 = X1,2 = . . . = X1,q = ˜µ
Let c2 ≜3bcζ and η ≜µ˜k −˜µ. On Γ we have for any t ≤eηq/c2
B1,q,t = ˜µ + c2
Besides for any k > 1, 0 ≤s ≤t, we have
Bk,s,t = µ˜k + c2
This means that the optimal arm cannot be played more than q times during
the ﬁrst eηq/c2 plays. Hence, Rn ≥∆˜k
 eηq/c2 −q
. Now, take q large enough so
that eηq/c2 −q ≥1
2eηq/c2 so that Rn ≥1
2∆˜k eηq/c2. Further, let w > 0 be such
that n ≜ew−1eηq/c2 =
. As w log n = eηq/c2 we get
≥P(Γ) = P(X1,1 = ˜µ)q =
where C = c2
η log(1/p) and p = P(X1,1 = ˜µ). Since w increases with q and the
inequality holds for any suﬃciently large q (the threshold depends only on c2
and η), we have thus shown that the pseudo-regret cannot have a tail thinner
than polynomial.
The proof for the general case is essentially the same. The main diﬀerence is
that Γ has to be redeﬁned as the event when X1,1, X1,2, . . . , X1,q are below µ′′
with ˜µ < µ′′ < µ˜k, and when, for the second optimal arm, the empirical means
stay close to the associated expected mean µ˜k. The rest of the proof, which
is omitted here in the interest of saving some space, follows the same steps as
Remark 2. Theorem 9 and Corollary 1 provide tail bounds for the pseudoregret, Rn = PK
k=1 Tk(n)∆k, instead of the regret,
XIt,TIt(t).
The following considerations show that when the optimal arm is unique, similar
concentration bounds hold for the regret: Assume that c = 1 and Et = ζ log t
with ζ > 1. By slightly modifying the analysis in Theorem 9 and Corollary 1,
one can derive that there exists C′′ > 0 such that for any z > C′′ log n, with
probability at least 1−z−1, the number of draws of suboptimal arms is bounded
by Cz for some C > 0 (in this remark, the constants C, C′ and C′′ depend on
b, K, σ1, . . . , σK and ∆1, . . . , ∆K and may diﬀer from line to line).
algorithm draws the optimal arm at least n−Cz times. This means that n−Cz
terms cancel out in the sum deﬁning the regret. For the Cz remaining terms, one
can use Hoeﬀding’s inequality and union bounds to prove that with probability
1 −Cz−1, for any suboptimal arm k,
t=1 (Xk,t −µk)
t=1(Xk,t −µk)
hence, by the Cauchy-Schwarz inequality
ˆRn −Rn ≤C′ X
Tk(n) log z ≤C′√
Therefore, with probability at least 1 −z−1, we simultaneously have ˆRn ≤
Rn + C′√z log z and Rn ≤Cz. Since √z log z = o(z), the regret ˆRn has similar
tails than the pseudo-regret Rn. Thus, we conclude that for z > C log n, with
probability at least 1 −z−1, ˆRn ≤C′z.
6. Numerical experiments
The purpose of this section is to illustrate the tail bounds obtained. For this
we ran some computer experiments with bandits with two arms: the payoﬀof
the optimal arm follows a Bernoulli distribution with expectation 0.5, while the
payoﬀof the suboptimal arm is deterministic and assumes a value p which is
slightly less than 0.5. This arrangement makes the job of the bandit algorithms
very hard: All algorithms learn the value of the suboptimal arm quickly (although UCB1 will be very optimistic about this arm despite that all the payoﬀs
received are the same). Since the diﬀerence of 0.5 and p is kept very small, it
may take a lot of trials to identify the optimal arm. In particular, if the experiments start in an unlucky way, the algorithms will keep choosing the suboptimal
arm, further delaying the time of recognizing the true identity of the optimal
arm. In all cases, 10, 000 independent runs were used to estimate the quantities
of interest and the algorithms were run for T = 220 ≈1, 000, 000 time steps.
We have run experiments with both UCB1 and UCB-V. In the case of UCB1
the exploration coeﬃcient, ρ (cf. Equation (25)), was chosen to take the value
of 2, which can be considered as a typical choice. In the case of UCB-V we used
ζ = 1, c = 1, as a not too conservative choice (cf. Equation (18)). In both cases
we set b = 1. For the considered bandit problems the diﬀerence between UCB1
and UCB-V is the result of that in the case of UCB-V the upper conﬁdence value
of the suboptimal arm will converge signiﬁcantly faster to the true value than
the same value computed by UCB1 since the estimated variances will always
take the value of zero (the payoﬀis deterministic).
Fix α ≥0. Deﬁne the value at risk for the risk level α as the upper αpercentile of the regret:
Rn(α) = inf{r : P(Rn ≥r) ≤α}.
Hence, Rn(α) is a lower bound on the loss that might happen with α probability.
Notice that the tail bounds of the previous section predict that the value at risk
can be excessively large for diﬃcult bandit problems. In particular, the more
aggressive an algorithm is in optimizing the expected regret, the larger the value
at risk is.
Figures 1 and 2 compare the estimated value at risk as a function of time
for UCB1 and UCB-V for an easier (p = 0.48) and a more diﬃcult problem
(p = 0.495).
Note that UCB-V, having tighter conﬁdence intervals, can be
considered as a more aggressive algorithm. For the ﬁgures the risk parameters
were chosen to be α = 0.01, 0.16 and 0.5 (the latter value corresponding to
the median). These ﬁgures also show the mean regret and (estimated) upper
percentiles of Gaussians ﬁtted to the respective regret distributions. (The labels
of the percentile curves for the Gaussians are marked by pasting “(n)” after the
respective α-values. The percentiles were estimated by drawing 10, 000 values
alpha=0.01
alpha=0.01(n)
alpha=0.16
alpha=0.16(n)
alpha=0.01
alpha=0.01(n)
alpha=0.16
alpha=0.16(n)
Figure 1: Value at risk as a function of time when the expected payoﬀof the suboptimal arm
is p = 0.48. The upper ﬁgure depicts results for UCB1, while the lower one depicts results for
UCB-V. Note the logarithmic scale of the time axis. For more details see the text.
from the respective Gaussians.) If the regret is normally distributed, we can
expect a good match between the respective percentile curves.
alpha=0.01
alpha=0.01(n)
alpha=0.16
alpha=0.16(n)
alpha=0.01
alpha=0.01(n)
alpha=0.16
alpha=0.16(n)
Figure 2: Value at risk as a function of time when the expected payoﬀof the suboptimal arm
is p = 0.495. The upper ﬁgure depicts results for UCB1, while the lower one ﬁgure depicts
results for UCB-V. For more details see the text.
As expected, in the case of the “easier” problem UCB-V outperforms UCB1
by a large margin except for the smallest value α (which partially conﬁrms the
results on the scaling of the expected regret with the variance of the suboptimal arms). For UCB1, uniformly over time, the distribution of regret is well
approximated by Gaussians. In the case of UCB-V, we see that the Gaussian
approximation overestimates the tail. Actually, in this case the regret distribution is bimodal (ﬁgures for the diﬃcult problem will be shown later), but the
r.h.s. mode has a very small mass (ca. 0.3% at the end of the experiment).
Note that by the end of the experiment the expected regret of UCB-V is ca.
120, while the expected regret of UCB1 is ca. 870. This task is already quite
challenging for both algorithms: They both have a hard time identifying the
optimal arm. Looking at the distributions (not shown) of how many times the
optimal arm is played, it turns out that UCB1 fails to shift the vast majority of
the probability mass to the optimal arm by the end of the experiment. At the
same time, for UCB-V the shift happens at around T = 8, 192. Note that in the
initial (transient) phase both algorithms try both actions equally often (hence
in the initial phase the expected regret grows linearly). The main diﬀerence is
that UCB-V shrinks the conﬁdence interval of the suboptimal arm much faster
and hence eventually suﬀers a much smaller regret.
On the more challenging problem, the performance of UCB-V deteriorates
considerably. Although the respective expected regrets of the algorithms are
comparable (1213 and 1195, respectively, for UCB-V and UCB1), the value at
risk of UCB-V for α = 0.16 and smaller is signiﬁcantly larger than that for
In order to illustrate what “goes wrong” with UCB-V for 20 independent
runs we show in Figure 3 the time evolution of the proportion of time-steps when
the suboptimal arm is chosen. That is, the ﬁgure shows the time evolution of
Tbad(t)/t for 20 diﬀerent runs, where Tbad(t) = Pt
s=1 I{Is is the bad arm}. We see
that in quite a few runs the suboptimal arm is preferred for a long time, though
ultimately all curves converge to 0.
Figure 3: Tbad(t)/t, the proportion of times of using the suboptimal arm in the ﬁrst t timesteps as a function of time for 20 independent runs.
The bandit problem has parameter
p = 0.495 and the algorithm is UCB-V.
Based on Figure 3 one may suspect that the distribution of Tbad(t)/t is
This is conﬁrmed by Figure 4 which shows this distribution as a
function of time.
Note that at around time T = 2, 048 (log2(T ) = 11) the
probability mass indeed becomes bimodal. At this time, the probability mass
is split into two with a larger mass shifting towards the (desired) mode with
value 0, while a smaller, but still substantial mass drifting towards 1. The mass
of this second mode is continuously decreasing, albeit at a slow rate. The slow
rate of this decay causes the large regret of UCB-V. A similar ﬁgure for UCB1
(not shown here) reveals that for UCB1 the distribution stays unimodal (up to
the precision of estimation), but the mode starts to drift (slowly) towards 0 as
late as at time T = 217.
In order to asses the rate of leakage of the probability mass from the rightside mode, we plotted the estimated probability of selecting the suboptimal arm
more than α-fraction of the time (i.e., P(Tbad(t) ≥αt)), as a function of time and
Figure 4: The distribution of Tbad(t)/t, the frequency of using the suboptimal arm, plotted
against time. The bandit problem has parameter p = 0.495 and the algorithm is UCB-V.
for various values of α, see Figure 5.
The ﬁgure reinforces that in the initial
1048576 4194304
Figure 5: The probability of choosing the suboptimal arm more than α-fraction of time plotted
against time and various values of α. Note that the experiment was continued up to T = 224
steps to show the beginning of the asymptotic phase.
Figure 6: Distribution of the regret for UCB-V at time T1 = 16, 384 (l.h.s.
ﬁgure) and
T2 = 524, 288 (r.h.s. ﬁgure). The bandit problem has parameter p = 0.495.
phase Tbad(t) is concentrated around 0.5t. At the time when the two modes
appear most of the mass drifts towards zero, though at the same time some
mass is drifting towards t as indicated by the large spread of P(Tbad(t) ≥αt).
The fact that all curves are converging to each other reveals that the distribution
becomes rather concentrated around the two modes, located at 0 and t. As the
rate of convergence of the curves toward zero was hard to judge from the ﬁrst
T = 220 steps (the transient phase hardly ends by this time), we continued the
experiment up to T = 224 time steps (the ﬁgure shows the results up to this
time). Plotting the same ﬁgure on a log-log scale (not shown here), it looks as
if asymptotically the curves followed a polynomial curve.
To show that also the regret follows a bimodal distribution we plotted the
histogram of the regret at times T1 = 16, 384 and T2 = 524, 288, shown on the
left- and r.h.s. subﬁgures of Figure 6, respectively. The ﬁrst time point, T1,
was selected so that the arm-choice distribution and hence also the regret distribution is still unimodal. However, already at this time the regret distribution
looks heavy tailed on the right. By time T2 the regret distribution is already
bimodal, with a substantial mass belonging to the right-side mode (based on the
previous ﬁgure, this mass is estimated to contain about 25% of the total mass).
Note that the left-side mode is close to zero, while the right-side mode is close
to ∆T2 = 0.005 ×T2 ≈2, 600, conﬁrming that runs contributing to either of the
modes tend to stay with the mode from the very beginning of the experiments.
Hence, the distribution of the regret appears to be of a mixture Gaussians.
7. PAC-UCB
In this section, we consider the case when the exploration function does not
depend on t: Es,t = Es. We show that for an appropriate sequence (Es)s≥0 this
leads to a UCB algorithm which with high probability plays any suboptimal arm
only a few times. Hence, the algorithm is “Probably Approximately Correct”,
explaining the algorithm’s name. Note that in this setting, the quantity Bk,s,t
does not depend on the time t so in what follows we will write Bk,s instead of
Bk,s,t. Besides, in order to simplify the discussion, we take c = 1.
Theorem 11. Let β ∈(0, 1). Consider a sequence (Es)s≥0 that takes values in
R ∪{+∞} and satisﬁes Es ≥2 and
s≥7 e−Es ≤β.
Let k be the index of some suboptimal arm and let uk be the smallest integer
satisfying
with the understanding that if no integer index satisﬁes this inequality then
uk = +∞. Then with probability at least 1 −β it holds that no suboptimal arm
k is played more than uk times by PAC-UCB.
When Es takes only ﬁnite values the existence of a ﬁnite uk is guaranteed if
Es = o(s). Note that inﬁnite values of Es are allowed only for technical reasons.
In particular, this will be needed when we apply this theorem in a ﬁnite horizon
setting in which case we will use Es = +∞for s bigger than the horizon.
Proof. See Section A.5.
Let q > 1 be a ﬁxed parameter. A typical choice for Es is
Es = log(Ksqβ−1) ∨2,
up to some additive constant ensuring that (34) holds. For this choice, Theorem 11 implies that for some positive constant κ, with probability at least 1−β,
for any suboptimal arm k (i.e., ∆k > 0), the number of plays is bounded by
Notice that this value is independent of the total number of plays. Hence, we
get the following upper bound on the pseudo-regret:
k=1 Tk(n)∆k ≤P
k:∆k>0 Tk,β∆k.
One should notice that the previous bound holds with an even set of probability
at least 1 −β. On the complementing event no small upper bound is possible:
there exist situations when with probability of at least Ω(β), the regret is of
order n, while (37) still holds with probability greater than 1 −β.
without any additional assumptions the following bound cannot be essentially
E[Rn] = PK
k=1 E[Tk(n)]∆k ≤(1 −β) P
k:∆k>0 Tk,β∆k + βn
As a consequence, if one is interested to have a bound on the expected regret at
some ﬁxed time n, one should take β of order 1/n (up to possibly a logarithmic
Theorem 12. Let n ≥7. Consider the sequence Es = log[Kn(s + 1)]. For this
sequence, the PAC-UCB policy satisﬁes the followings:
• With probability at least 1−4 log(n/7)
, for any suboptimal arm k, the number of plays up to time n is bounded by 1 +
• The expected regret at time n satisﬁes
Proof. See Section A.6.
8. Open problem
When the time horizon n is known, one may want to choose the exploration
function E depending on the value of n. For instance, in view of Theorems 3
and 9, one may want to take c = 1 and a constant exploration function E ≡
3 log n. This choice ensures logarithmic expected regret and a nice concentration
The behavior of this algorithm should be contrasted to the one with Es,t =
3 log t: The algorithm with constant exploration function Es,t = 3 log n concentrates its exploration phase at the beginning of the plays, and then switches to
the exploitation mode. On the contrary, the algorithm that adapts to the time
horizon explores and exploits at any time during the interval [0, n]. However, in
view of Corollary 1 and Theorem 10, its regret satisﬁes
(log n)C ≤P
(log n)C′ ,
a signiﬁcantly worse behavior than what is shown (39). The open question is:
is there an algorithm that does not need to know the time horizon and which
has a logarithmic expected regret and a concentration property similar to (39)?
We conjecture that the answer is no.
Acknowledgements
This work was supported in part by the Agence Nationale de la Recherche
project “Mod`eles Graphiques et Applications” (Jean-Yves Audibert). Csaba
Szepesv´ari greatly acknowledges the support received from the Alberta Ingenuity Fund, iCore and NSERC.
A. Proofs of the results
A.1. Lower bound for UCB-V
The aim of this section is to prove that both terms in (4) are unavoidable.
Precisely, we have the following result:
Theorem 13. Fix b and any constant C > 0. Then there is no algorithm that
would satisfy either
E[ ˆRn] ≤C P
k:µk<µ∗b log(n),
E[ ˆRn] ≤C P
uniformly for all reward distributions with support in [0, b].
Proof. We apply a lower bound developed by Lai and Robbins . Let δa
be the Dirac distribution supported on a ∈R. Let νp = (1 −p)δ0 + pδb be
a Bernoulli-like distribution parameterized by p ∈(0, 1).
Consider a bandit
policy. For (p1, p2) ∈(0, 1)2 let Rn(p1, p2) denote the expected regret of this
policy when it is applied to a two-armed bandit problem in which the reward
distributions for the two arms are respectively νp1 and νp2. If for some a > 0,
(p1, p2) ∈(0, 1)2, Rn(p1, p2) = o(na) does not hold then the logarithmic regret
bounds, (40), (41), cannot hold. Therefore let us assume that Rn(p1, p2) =
o(na) holds for any a > 0 and (p1, p2) ∈(0, 1)2. Then, from Lai and Robbins
 , Theorem 1 we conclude that for any (p1, p2) ∈(0, 1)2 with p1 > p2, we
Rn(p1, p2)
p1 log( p1
p2 ) + (1 −p1) log( 1−p1
Let Θ(p1, p2) denote the r.h.s. of this inequality. Let us consider p1 = (1 + δ)/2
and p2 = (1 −δ)/2 with δ ∈(0, 1). Then we have Θ(p1, p2) = b/ log[(1 +δ)/(1 −
δ)]. Since the logarithmic term goes to 0 when δ goes to 0, there is no algorithm
which can satisfy (40) for all reward distributions in {νp : p ∈(0, 1)}. Besides,
we have σ2
2 = b2(1 −δ2)/4, ∆2 = bδ and
Θ(p1, p2) =
(1 −δ2) log[(1 + δ)/(1 −δ)].
Since the last r.h.s. goes to inﬁnity when δ goes to 1, there is no algorithm
which can satisfy (41) for all reward distributions in {νp : p ∈(0, 1)}.
A.2. Lower bound for UCB1
Proposition 1. There exist arm rewards in [0, b] such that UCB1 (deﬁned by
the bias factor (1)) has an expected regret E [Rn] = Ω(b2 log n), while UCB-V
with c = 1 and ζ = 1.2 satisﬁes E [Rn] ≤20b log n.
Proof. Consider the 2-armed deterministic bandit problem such that arm 1
yields the reward ∆, and arm 2 yields the reward 0. In this case, Theorem 4
gives the desired property of UCB-V. For UCB1, in order to obtain a lower
bound on the regret, we look for a lower bound on T2(n).
First consider the “balance equation”
2 log(n + 1)
2 log(n + 1)
where p(n) is considered as a function of n ≥1. Note that solving (42) yields
1 + n∆2/(2b2 log(n + 1)) −1
n∆2/(2b2 log(n + 1))
Besides, we have the property that: p(n) ≥2b2
∆2 log(n + 1) −4
(log(n+1))3/2
whose ﬁrst term is dominant when n is large. Thus p(n) = Ω( b2
∆2 log(n + 1))
The intuition is that UCB1 works by keeping the upper bound B1,T1(n),n+1
of the ﬁrst arm close to that of the second arm B2,T2(n),n+1 since the algorithm
chooses at each time step the arm that has the highest bound, which, as a
consequence, decreases its value.6 Thus we expect that T2(n) will be close to
p(n). For that purpose, let us prove the following result.
Lemma 4. At any time step n+1, if UCB1 chooses arm 1 then we have T2(n) ≥
p(n), otherwise we have T2(n) ≤p(n). We deduce that for all n ≥3, T2(n) ≥
6The same holds for UCB-V. However, the corresponding “balance” equation for UCB-V
looks diﬀerent.
Proof (of Lemma 4). The ﬁst part of the lemma comes from the fact that if
T2(n) < p(n), then T1(n) > n −p(n), thus
B2,T2(n),n+1 = b
2 log(n + 1)
2 log(n + 1)
2 log(n + 1)
2 log(n + 1)
= B1,T1(n),n+1,
which implies that arm 2 is chosen. A similar reasoning holds in the other case.
Now, let us prove the second part of the lemma. The proof by contradiction:
Let n ≥3 be the ﬁrst time when T2(n) < p(n −1), and let n denote the ﬁrst
such time. Thus T2(n −1) ≥p(n −2) (note that this is also true if n = 3 since
T2(2) = 1 and p(1) ≤1/2). Thus T2(n −1) ≤T2(n) < p(n −1) which, from the
ﬁrst part of the proposition, implies that at time n, arm 2 is chosen. We deduce
p(n −1) > T2(n) = T2(n −1) + 1 ≥p(n −2) + 1.
This is impossible since the function x →p(x) has a slope bounded by 1/2 in
the domain [1, ∞), thus p(n −1) ≤p(n −2) + 1/2.
From the previous lemma, we deduce that T2(n) = Ω( b2
∆2 log n) and thus the
regret of UCB1 satisﬁes Rn = T2(n)∆= Ω( b2
A.3. Proof of Theorem 1
The result follows from a version of Bennett’s inequality which gives a highprobability conﬁdence interval for the mean of an i.i.d. sequence:
Lemma 5. Let U be a real-valued random variable such that almost surely U ≤
b′′ for some b′′ ∈R. Let µ = E [U], b′ ≜b′′ −µ, and b′′
+ = b′′ ∨0. Let U1, . . . , Un
be i.i.d. copies of U, U t = 1/t Pt
s=1 Us. The following statements are true for
any x > 0:
• with probability at least 1 −e−x, simultaneously for 1 ≤t ≤n,
t(U t −µ) ≤
2nE [U 2] x + b′′
• with probability at least 1 −e−x, simultaneously for 1 ≤t ≤n,
t(U t −µ) ≤
2nVar (U) x + b′x/3.
Proof (of Lemma 5). Let v = (Var U)/(b′)2. To prove this inequality, we
use Result (1.6) of Freedman to obtain that for any a > 0
 ∃t : 0 ≤t ≤n and t(U t −µ)/b′ ≥a
≤ea+(a+nv) log[nv/(nv+a)].
In other words, introducing h(u) = (1 + u) log(1 + u) −u, with probability at
least 1 −e−nvh[a/(nv)], simultaneously for 1 ≤t ≤n,
t(U t −µ) < ab′.
Consider a =
2nvx + x/3. To prove (44), it remains to check that
nvh[a/(nv)] ≥x.
This can be done by introducing ϕ(r) = (1 + r + r2/6) log(1 + r + r2/6) −r −
2r2/3. For any r ≥0, we have ϕ′(r) = (1 + r/3) log(1 + r + r2/6) −r and
3ϕ′′(r) = log(1 + r + r2/6) −(r + r2/6)/(1 + r + r2/6), which is nonnegative
since log(1 + r′) ≥r′/(1 + r′) for any r′ ≥0. The proof of (44) is ﬁnished since
2x/(nv)) ≥0 implies (45).
To prove (43), we need to modify the martingale argument underlying Freedman’s result. Precisely, let g(r) ≜(er −1 −r)/r2. Then we replace
eλ[U−EU−λg(λb′)Var U]i
by (see e.g., Audibert , Chap. 2: Inequality (8.2) and Remark 8.1)
eλ[U−EU−λg(λb′′)EU2]i
By following Freedman’s arguments, we get
 ∃t : 0 ≤t ≤n and t(U t −µ) ≥a
λ>0 e−λa+λ2g(λb′′)nE[U2].
Now if b′′ ≤0, this minimum is upper bounded by
λ>0 e−λa+ 1
2 λ2nE[U2] = e
which leads to (43) when b′′ ≤0. When b′′ > 0, the minimum is reached for
λb′′ = log
  b′′a+nE[U2]
. The computations then are similar to the one developed
to obtain (44).
Remark 3. Lemma 5 diﬀers from the standard version of Bernstein’s inequality
in a few ways. The standard form of Bernstein’s inequality (using the notation
of this lemma) is as follows: for any w > 0,
 Un −µ > w
2Var(U)+(2b′w)/3 .
When this inequality is used to derive high-probability conﬁdence interval, we
n(Un −µ) ≤
2nVar (U) x + 2 b′x
Compared with (44) we see that the second term here is larger by a multiplicative
factor of 2.
This factor is saved thanks to the use of Bennett’s inequality.
Another diﬀerence is that Lemma 5 allows the time indices to vary in an interval.
This form follows from a martingale argument due to Freedman .
Proof (of Theorem 1). Given Lemma 5, the proof essentially reduces to an
application of the “square-root trick”. For the ﬁrst part of the theorem, we will
prove the following result: for any x > 0 and n ∈N, with probability at least
1 −3e−x, for any 0 ≤t ≤n,
Note that this is slightly stronger than the ﬁrst part of Theorem 1. We prove
this result since we need it in the proof of the second part of the Theorem.
First, notice that if we prove the theorem for random variables with b = 1
then the theorem follows for the general case by a simple scaling argument.
Let σ denote the standard deviation of X1: σ2 ≜Var X1, and introduce
(X1 −EX1)4
. Lemma 5, (44) with the choices Ui = Xi, Ui = −Xi, and
Lemma 5, (43) with the choice Ui = −(Xi −E[X1])2 yield that with probability
at least 1 −3e−x, for any 0 ≤t ≤n, we simultaneously have
|Xt −µ| ≤σ
σ2 ≤Vt + (µ −Xt)2 +
Let L ≜nx/t2. We claim that from (48) and (49), it follows that
σ ≤√Vt + 1.8
Since the random variable X1 takes its values in , we necessarily have
σ ≤1/2. Hence, when 1.8
L ≥1/2 then (50) is trivially satisﬁed, so from now
on we may assume that 1.8
L ≤1/2, i.e., L ≤(3.6)−2. Noting that V ≤σ2,
plugging (48) into (49) for 0 ≤t ≤n we obtain
Vt + 2Lσ2 + 2L
3×(3.6)2 σ
9×(3.6)2 + σ
or σ2 −1.77
100) ≤0. The l.h.s. when viewed as a second order
polynomial in σ has a positive leading term, hence its larger root gives an upper
bound on σ: σ ≤1.77
L + √Vt + 0.8L ≤√Vt + 1.8
L, ﬁnishing the proof
of (50). Plugging (50) into (48), we obtain
|Xt −µ| ≤√2VtL +
L < √2VtL + 3L,
which, given the deﬁnition of L, proves (47), and thus the ﬁrst part of Theorem 1.
Let us now consider the second part of the theorem: Fix t1 ≤t2, t1, t2 ∈N
and let α ≥t2/t1. From (47) it follows that simultaneously for t ∈{t1, . . . , t2}
we have with probability at least 1 −3e−x/α that
t|Xt −µ| <
2t2Vtx/α + 3x/α
2tVtx + 3x.
To ﬁnish the proof we will use this inequality for a sequence of suitably
chosen intervals [t1, t2] that form a partition of [4, n]. (It suﬃces to consider a
partition of [4, n], because for 1 −3e−x/α ≥0 the r.h.s. of (51) is always greater
than 3. Thus, for t ≤3 inequality (51) holds with probability one.) For the
rigorous reasoning, introduce
¯β(x, n) ≜3
s0=3<s1<···<sM=n,
sj+1≤α(sj+1)
and let s0, . . . , sM be a grid realizing the above minimum. Then we have
∃t : 1 ≤t ≤n s.t. |Xt −µ| >
 ∃t : sj < t ≤sj+1 s.t. t|Xt −µ| >
2tVtx + 3x
e−x/α = ¯β(x, n) ≤β(x, n),
where the last inequality follows since s0, . . . , sM forms a complete geometric
grid of {3, 4, . . ., n} with step-size α. This ﬁnishes the proof of Theorem 1.
Remark 4. Any PAC empirical bound on |Xt −µ| leads to a corresponding
UCB policy. The tighter the bound is, the more eﬃcient (in terms of expected
regret) the UCB policy is. Theorem 1 is essentially obtained by using Bernstein’s
inequality for both the empirical mean and variance. There is a small cost to
consider the variance when it is high. Indeed, in the worst case, the variance
is equal to b2/4, so that (47) leads to that with probability at least 1 −3e−x,
|Xt −µ| < bp x
t . This inequality has to be compared with Hoeﬀding’s
inequality (the one used in UCB1), which, for the same level of conﬁdence,
1 −3e−x, reads |Xt −µ| < b
. This is much tighter than the former
inequality when x/t is not very small. Note that Theorem 1 (and therefore
UCB-V policy) can be (numerically) improved by using (48) and σ ≤b/2. This
gives: for any t ∈N and x > 0, with probability at least 1 −3e−x,
and with probability at least 1 −β(x, t), for any s ∈{1, 2, . . ., t},
Finally, the last term in Bk,s,t, which corresponds to the bx/s term in the
previous inequality, does play a role when the variance is very small. It cannot
be eliminated as can be seen by considering the case when X1 is a Bernoulli
of parameter λ/s with λ > 0. Indeed, in this case, sXs has the distribution
Bin(s, λ/s), which converges in law to Poisson(λ) for s tending to inﬁnity. Now,
it is known that there are no positive constants c1 and c2 such that the inequality
P(|Z −EZ| ≥c1
xVar Z) ≤c2e−x holds for all Poisson distributions (because
of the left “tail” of the Poisson distributions).
Remark 5. One may also write a one-sided version of Theorem 1 taking into
account the previous remark, namely for any t ∈N and x > 0, with probability
at least 1 −2e−x,
and with probability at least 1−2 inf
e−x/α, for any s ∈{1, 2, . . ., t},
To prove (52), we use (49) and the one-sided version of (48), which holds simultaneously with probability 1 −2e−x. We claim that these inequalities imply
that either (50) holds or Xs −µ ≤0. In both cases, (52) follows. Inequality (53)
follows from a similar argument.
A.4. Proof of Theorem 6
We will prove the following, slightly stronger result.
Theorem 14. Consider Et = ζ log t. For any ζ > 0 and p ∈(0, 1), if cζ <
−3 log(1−p), there exist probability distributions of the rewards such that the mean
reward of the optimal arm is pb and the UCB-V algorithm suﬀers a polynomial
Theorem 14 implies Theorem 6 by letting p →0.
Proof (of Theorem 14). For cζ <
−3 log(1−p), there exists ε ∈(0, 1) such
−3 log(1 −p)
Consider the following two-armed bandit problem: Let {X1,t} be an i.i.d. sequence with P(X1,t = b) = p = 1 −P(X1,t = 0). Let {X2,t} be the deterministic
sequence given by X2,t = pbε. Arm 1 is then the optimal arm and its mean
reward is pb. Fix n ∈N. Let T = ⌈γ log n⌉with γ = −ε/ log(1 −p).
consider large values of n for which n > T .
Claim: Consider an event when during the ﬁrst T pulls the optimal arm always
returns 0. On such an event the optimal arm is not pulled more than T times
during the time interval [1, n], i.e., T1(n) ≤T .
Proof. The claim is proved by contradiction. Assume that on the considered
event, the optimal arm is pulled more than T times. Then, at some time t1 ≤n,
the optimal arm is drawn for the (T +1)-th time, hence B1,T,t1 ≥B2,T2(t1−1),t1.
Now, since V1,T = 0 and X1,T = 0, we have
B1,T,t1 = 3cζb log(t1)
where in the last inequality we used (54) and the deﬁnition of γ.
B2,T2(t1−1),t1 = pbε + 3cζ log(t1)/T2(t1 −1) > pbε, hence we get the desired
contradiction.
Now observe that the probability of the event that the optimal arm returns
0 during its ﬁrst T pulls is
(1 −p)T ≥(1 −p)1+γ log n = (1 −p)nγ log(1−p) = (1 −p)n−ε.
Further, when this event holds the regret is at least (n −T )pb(1 −ε). Thus, the
expected regret is at least (1 −p)pb(1 −ε)n1−ε(1 −γ(log n)/n), which is indeed
polynomial in n since 1 −ε > 0.
A.5. Proof of Theorem 11
Proof. Without the loss of generality (by a scaling argument), we may assume
that b = 1. We prove the theorem by ﬁrst proving three claims.
Claim: Consider the event A on which
∀k ∈{1, . . ., K}
Vk,s + 1.8
pVk,s ≤σk +
This event holds with probability at least 1 −β.
Proof. The arguments that we will use to prove the ﬁrst two inequalities are
similar to the ones used in the proof of Theorem 1. The main diﬀerence here
is that we want the third inequality to hold simultaneously with the ﬁrst two
inequalities. We apply Lemma 5 with x = Es, n = s and diﬀerent i.i.d. random
variables: Wi = Xk,i, Wi = −Xk,i, Wi = (Xk,i −µk)2 and Wi = −(Xk,i −
µk)2. We use that the second moment of the last two random variables satisﬁes
E[(Xk,1 −µk)4] ≤σ2
k and that the empirical expectation of (Xk,i −µk)2 is
i=1(Xk,i −µk)2 = Vk,s + (Xk,s −µk)2.
We obtain that for any s ≥7 and k ∈{1, . . ., K}, with probability at least
k ≤Vk,s + (Xk,s −µk)2 +
Vk,s + (Xk,s −µk)2 ≤σ2
As we have seen in Section A.3, the ﬁrst two of these inequalities imply the ﬁrst
two inequalities of (55). The last inequality of (55) is obtained by taking the
square root in the above third inequality.
Using an union bound, all these inequalities hold simultaneously with probability at least
s≥7 e−Es ≥1 −β.
Remember that Bk,s ≜Xk,s +
s . We have the following claim:
Claim: On the event A, for any s ≥1 and k ∈{1, . . . , K}, the following
inequalities hold:
Proof. Inequality (56) is obtained by plugging the second inequality of (55)
into the ﬁrst one of (55) and by noting that since Es ≥2, (56) is trivial for
s ≤6. Introduce Ls = Es
s . To prove (57), we use the ﬁrst and third inequalities
of (55) to obtain
√2Ls + 13Ls
Once more, the inequality is trivial for s ≤6.
Claim: The choice of uk in Theorem 11 guarantees that
Proof. For the sake of compactness, for a moment we drop the arm indices,
so that (58) is equivalent to
Let r = u/Eu. Given that r ≥0, we have
This trivially holds when r > 8σ2
Let B = {∃k : Tk(∞) > uk} be the event that arm k is pulled more than uk
times. By adapting the argument used in the proof Theorem 2 to prove (13)
one can show that
∃k s.t. Bk,uk > τ
∃s ≥1 s.t. Bk∗,s ≤τ
Taking τ = µ∗and using (58), (56) and (57), we get
∃k s.t. Bk,uk > µk + 2σk
∃s ≥1 s.t. Bk∗,s ≤µ∗
where A denotes the complementer of A. Taking probabilities we get P(B) ≤
P(A) ≤β, thus ﬁnishing the proof.
A.6. Proof of Theorem 12
Proof. Consider the following sequence ˜Es = log[Kn(s+1)] for s ≤n and ˜Es =
∞otherwise. For this sequence, the assumptions of Theorem 11 are satisﬁed
for β = 4 log(n/7)
7≤s≤n 1/(s + 1) ≤log(n/7). Besides, to consider the
sequence ( ˜Es)s≥0 instead of (Es)s≥0 does not modify the algorithm up to time
n. Therefore with probability at least 1 −β, we have
ETk(n)−1 ≤8σ2
Tk(n) ≤1 +
log[KnTk(n)],
which gives the ﬁrst assertion.
For the second assertion, ﬁrst note that since Rn ≤n, (38) is non-trivial
only when 30 log n < n. So the bound is trivial when n ≤100. Besides, from
the ﬁrst assertion of Theorem 2, we have Tk(n) = 1 if K ≥n, in which case (38)
is trivial. For n > 100 and K < n, (60) gives
Tk(n) ≤1 +
log(n3) = 1 +
E[Tk(n)] ≤4 log(n/7) + 1 +