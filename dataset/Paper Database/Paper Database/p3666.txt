Statistics and Its Interface Volume 2 349–360
Multi-class AdaBoost∗
Ji Zhu†‡, Hui Zou§, Saharon Rosset and Trevor Hastie¶
Boosting has been a very successful technique for solving
the two-class classiﬁcation problem. In going from two-class
to multi-class classiﬁcation, most algorithms have been restricted to reducing the multi-class classiﬁcation problem to
multiple two-class problems. In this paper, we develop a new
algorithm that directly extends the AdaBoost algorithm to
the multi-class case without reducing it to multiple two-class
problems. We show that the proposed multi-class AdaBoost
algorithm is equivalent to a forward stagewise additive modeling algorithm that minimizes a novel exponential loss for
multi-class classiﬁcation. Furthermore, we show that the exponential loss is a member of a class of Fisher-consistent loss
functions for multi-class classiﬁcation. As shown in the paper, the new algorithm is extremely easy to implement and
is highly competitive in terms of misclassiﬁcation error rate.
AMS 2000 subject classifications: Primary 62H30.
phrases: boosting, exponential loss,
multi-class classiﬁcation, stagewise modeling.
1. INTRODUCTION
Boosting has been a very successful technique for solving
the two-class classiﬁcation problem. It was ﬁrst introduced
by , with their AdaBoost algorithm. In going from twoclass to multi-class classiﬁcation, most boosting algorithms
have been restricted to reducing the multi-class classiﬁcation problem to multiple two-class problems, e.g. , ,
and . The ways to extend AdaBoost from two-class to
multi-class depend on the interpretation or view of the success of AdaBoost in binary classiﬁcation, which still remains
controversial. Much theoretical work on AdaBoost has been
based on the margin analysis, for example, see and .
Another view on boosting, which is popular in the statistical
community, regards AdaBoost as a functional gradient descent algorithm . In , AdaBoost has been shown
to be equivalent to a forward stagewise additive modeling algorithm that minimizes the exponential loss. suggested
that the success of AdaBoost can be understood by the fact
∗We thank the AE and a referee for their helpful comments and suggestions which greatly improved our paper.
†Corresponding author.
‡Zhu was partially supported by NSF grant DMS-0705532.
§Zou was partially supported by NSF grant DMS-0706733.
¶Hastie was partially supported by NSF grant DMS-0204162.
that the population minimizer of exponential loss is onehalf of the log-odds. Based on this statistical explanation,
 derived a multi-class logit-boost algorithm.
The multi-class boosting algorithm by looks very different from AdaBoost, hence it is not clear if the statistical view of AdaBoost still works in the multi-class case.
To resolve this issue, we think it is desirable to derive an
AdaBoost-like multi-class boosting algorithm by using the
exact same statistical explanation of AdaBoost. In this paper, we develop a new algorithm that directly extends the
AdaBoost algorithm to the multi-class case without reducing it to multiple two-class problems. Surprisingly, the new
algorithm is almost identical to AdaBoost but with a simple yet critical modiﬁcation, and similar to AdaBoost in
the two-class case, this new algorithm combines weak classiﬁers and only requires the performance of each weak classiﬁer be better than random guessing. We show that the
proposed multi-class AdaBoost algorithm is equivalent to a
forward stagewise additive modeling algorithm that minimizes a novel exponential loss for multi-class classiﬁcation.
Furthermore, we show that the exponential loss is a member of a class of Fisher-consistent loss functions for multiclass classiﬁcation. Combined with forward stagewise additive modeling, these loss functions can be used to derive
various multi-class boosting algorithms. We believe this paper complements .
1.1 AdaBoost
Before delving into the new algorithm for multi-class
boosting, we brieﬂy review the multi-class classiﬁcation
problem and the AdaBoost algorithm . Suppose we are
given a set of training data (x1, c1), . . . , (xn, cn), where the
input (prediction variable) xi ∈Rp, and the output (response variable) ci is qualitative and assumes values in a
ﬁnite set, e.g. {1, 2, . . . , K}. K is the number of classes. Usually it is assumed that the training data are independently
and identically distributed samples from an unknown probability distribution Prob(X, C). The goal is to ﬁnd a classiﬁcation rule C(x) from the training data, so that when given a
new input x, we can assign it a class label c from {1, . . . , K}.
Under the 0/1 loss, the misclassiﬁcation error rate of a classi-
ﬁer C(x) is given by 1−K
IC(X)=kProb(C = k|X)
It is clear that
C∗(x) = arg max
Prob(C = k|X = x)
will minimize this quantity with the misclassiﬁcation error
rate equal to 1 −EX maxk Prob(C = k|X). This classiﬁer is
known as the Bayes classiﬁer, and its error rate is the Bayes
error rate.
The AdaBoost algorithm is an iterative procedure that
tries to approximate the Bayes classiﬁer C∗(x) by combining
many weak classiﬁers. Starting with the unweighted training sample, the AdaBoost builds a classiﬁer, for example a
classiﬁcation tree , that produces class labels. If a training
data point is misclassiﬁed, the weight of that training data
point is increased (boosted). A second classiﬁer is built using the new weights, which are no longer equal. Again, misclassiﬁed training data have their weights boosted and the
procedure is repeated. Typically, one may build 500 or 1000
classiﬁers this way. A score is assigned to each classiﬁer, and
the ﬁnal classiﬁer is deﬁned as the linear combination of the
classiﬁers from each stage. Speciﬁcally, let T(x) denote a
weak multi-class classiﬁer that assigns a class label to x,
then the AdaBoost algorithm proceeds as follows:
Algorithm 1. AdaBoost 
1. Initialize the observation weights wi
1, 2, . . . , n.
2. For m = 1 to M:
(a) Fit a classiﬁer T (m)(x) to the training data using
weights wi.
(b) Compute
ci ̸= T (m)(xi)
(c) Compute
α(m) = log 1 −err(m)
wi ←wi · exp
ci ̸= T (m)(xi)
for i = 1, 2, . . . , n.
(e) Re-normalize wi.
C(x) = arg max
α(m) · I(T (m)(x) = k).
When applied to two-class classiﬁcation problems, AdaBoost has been proved to be extremely successful in producing accurate classiﬁers. In fact, called AdaBoost with
trees the “best oﬀ-the-shelf classiﬁer in the world.” However, it is not the case for multi-class problems, although
AdaBoost was also proposed to be used in the multi-class
case . Note that the theory of assumes that the error
of each weak classiﬁer err(m) is less than 1/2 (or equivalently α(m) > 0), with respect to the distribution on which
it was trained. This assumption is easily satisﬁed for twoclass classiﬁcation problems, because the error rate of random guessing is 1/2. However, it is much harder to achieve
in the multi-class case, where the random guessing error rate
is (K −1)/K. As pointed out by the inventors of AdaBoost,
the main disadvantage of AdaBoost is that it is unable to
handle weak learners with an error rate greater than 1/2. As
a result, AdaBoost may easily fail in the multi-class case. To
illustrate this point, we consider a simple three-class simulation example. Each input x ∈R10, and the ten input variables for all training examples are randomly drawn from
a ten-dimensional standard normal distribution. The three
classes are deﬁned as:
if 0 ≤ x2
10,1/3 ≤ x2
10,2/3 ≤ x2
10,k/3 is the (k/3)100% quantile of the χ2
10 distribution, so as to put approximately equal numbers of observations in each class. In short, the decision boundaries separating successive classes are nested concentric ten-dimensional
spheres. The training sample size is 3000 with approximately
1000 training observations in each class. An independently
drawn test set of 10000 observations is used to estimate the
error rate.
Figure 1 (upper row) shows how AdaBoost breaks using
ten-terminal node trees as weak classiﬁers. As we can see
(upper left panel), the test error of AdaBoost actually starts
to increase after a few iterations, then levels oﬀaround 0.53.
What has happened can be understood from the upper middle and upper right panels: the err(m) starts below 0.5; after
a few iterations, it overshoots 0.5 (α(m) < 0), then quickly
hinges onto 0.5. Once err(m) is equal to 0.5, the weights of
the training samples do not get updated (α(m) = 0), hence
the same weak classiﬁer is ﬁtted over and over again but is
not added to the existing ﬁt, and the test error rate stays
This illustrative example may help explain why AdaBoost is never used for multi-class problems. Instead, for
multi-class classiﬁcation problems, proposed the AdaBoost.MH algorithm which combines AdaBoost and the
one-versus-all strategy. There are also several other multiclass extensions of the boosting idea, for example, the ECOC
in and the logit-boost in .
1.2 Multi-class AdaBoost
We introduce a new multi-class generalization of AdaBoost for multi-class classiﬁcation. We refer to our algorithm as SAMME — Stagewise Additive Modeling using a
Multi-class Exponential loss function — this choice of name
will be clear in Section 2. Given the same setup as that of
AdaBoost, SAMME proceeds as follows:
350 J. Zhu et al.
Figure 1. Comparison of AdaBoost and the new algorithm SAMME on a simple three-class simulation example. The training
sample size is 3000, and the testing sample size is 10000. Ten-terminal node trees are used as weak classiﬁers. The upper row
is for AdaBoost and the lower row is for SAMME.
Algorithm 2. SAMME
1. Initialize the observation weights wi
1, 2, . . . , n.
2. For m = 1 to M:
(a) Fit a classiﬁer T (m)(x) to the training data using
weights wi.
(b) Compute
ci ̸= T (m)(xi)
(c) Compute
α(m) = log 1 −err(m)
+ log(K −1).
wi ←wi · exp
ci ̸= T (m)(xi)
for i = 1, . . . , n.
(e) Re-normalize wi.
C(x) = arg max
α(m) · I(T (m)(x) = k).
Note that Algorithm 2 (SAMME) shares the same simple
modular structure of AdaBoost with a simple but subtle difference in (1), speciﬁcally, the extra term log(K −1). Obviously, when K = 2, SAMME reduces to AdaBoost. However,
the term log(K −1) in (1) is critical in the multi-class case
(K > 2). One immediate consequence is that now in order
Multi-class AdaBoost 351
for α(m) to be positive, we only need (1−err(m)) > 1/K, or
the accuracy of each weak classiﬁer to be better than random guessing rather than 1/2. To appreciate its eﬀect, we
apply SAMME to the illustrative example in Section 1.1. As
can be seen from Fig. 1, the test error of SAMME quickly
decreases to a low value and keeps decreasing even after 600
iterations, which is exactly what we could expect from a
successful boosting algorithm. In Section 2, we shall show
that the term log(K −1) is not artiﬁcial, it follows naturally
from the multi-class generalization of the exponential loss
in the binary case.
The rest of the paper is organized as follows: In Section 2, we give theoretical justiﬁcation for our new algorithm SAMME. In Section 3, we present numerical results
on both simulation and real-world data. Summary and discussion regarding the implications of the new algorithm are
in Section 4.
2. STATISTICAL JUSTIFICATION
In this section, we are going to show that the extra term
log(K −1) in (1) is not artiﬁcial; it makes Algorithm 2
equivalent to ﬁtting a forward stagewise additive model using a multi-class exponential loss function. Our arguments
are in line with who developed a statistical perspective
on the original two-class AdaBoost algorithm, viewing the
two-class AdaBoost algorithm as forward stagewise additive
modeling using the exponential loss function
L(y, f) = e−yf,
where y = (I(c = 1) −I(c = 2)) ∈{−1, 1} in a two-class
classiﬁcation setting. A key argument is to show that the
population minimizer of this exponential loss function is one
half of the logit transform
f ∗(x) = arg min
f(x) EY |X=xL(y, f(x))
2 log Prob(c = 1|x)
Prob(c = 2|x).
Therefore, the Bayes optimal classiﬁcation rule agrees with
the sign of f ∗(x). recast AdaBoost as a functional gradient descent algorithm to approximate f ∗(x). We note that
besides , and also made connections between the
original two-class AdaBoost algorithm and the exponential
loss function. We acknowledge that these views have been
inﬂuential in our thinking for this paper.
2.1 SAMME as forward stagewise additive
We now show that Algorithm 2 is equivalent to forward
stagewise additive modeling using a multi-class exponential
loss function.
We start with the forward stagewise additive modeling
using a general loss function L(·, ·), then apply it to the
multi-class exponential loss function. In the multi-class classiﬁcation setting, we can recode the output c with a Kdimensional vector y, with all entries equal to −
K−1 except
a 1 in position k if c = k, i.e. y = (y1, . . . , yK)T, and:
if c ̸= k.
 and used the same coding for the multi-class support vector machine. Given the training data, we wish to
ﬁnd f(x) = (f1(x), . . . , fK(x))T such that
L(yi, f(xi))
subject to
f1(x) + · · · + fK(x) = 0.
We consider f(x) that has the following form:
β(m)g(m)(x),
where β(m) ∈R are coeﬃcients, and g(m)(x) are basis functions. We require g(x) to satisfy the symmetric constraint:
g1(x) + · · · + gK(x) = 0.
For example, the g(x) that we consider in this paper takes
value in one of the K possible K-dimensional vectors in (2);
speciﬁcally, at a given x, g(x) maps x onto Y:
g : x ∈Rp →Y,
where Y is the set containing K K-dimensional vectors:
K−1, . . . , −
K−1, 1, . . . , −
K−1, . . . , −
Forward stagewise modeling approximates the solution
to (3)–(4) by sequentially adding new basis functions to the
expansion without adjusting the parameters and coeﬃcients
of those that have already been added. Speciﬁcally, the algorithm starts with f (0)(x) = 0, sequentially selecting new
basis functions from a dictionary and adding them to the
current ﬁt:
Algorithm 3. Forward stagewise additive modeling
1. Initialize f (0)(x) = 0.
2. For m = 1 to M:
(a) Compute
(β(m), g(m)(x))
L(yi, f (m−1)(xi) + βg(xi)).
352 J. Zhu et al.
f (m)(x) = f (m−1)(x) + β(m)g(m)(x).
Now, we consider using the multi-class exponential loss
L(y, f) = exp
K (y1f1 + · · · + yKfK)
in the above forward stagewise modeling algorithm. The
choice of the loss function will be clear in Section 2.2 and
Section 2.3. Then in step (2a), we need to ﬁnd g(m)(x) (and
β(m)) to solve:
(β(m), g(m))
i(f (m−1)(xi) + βg(xi))
where wi = exp
if (m−1)(xi)
are the un-normalized
observation weights.
Notice that every g(x) as in (5) has a one-to-one correspondence with a multi-class classiﬁer T(x) in the following
if gk(x) = 1,
and vice versa:
if T(x) = k,
if T(x) ̸= k.
Hence, solving for g(m)(x) in (7) is equivalent to ﬁnding the
multi-class classiﬁer T (m)(x) that can generate g(m)(x).
Lemma 1. The solution to (7) is
wiI(ci ̸= T(xi)),
log 1 −err(m)
+ log(K −1)
where err(m) is deﬁned as
ci ̸= T (m)(xi)
Based on Lemma 1, the model is then updated
f (m)(x) = f (m−1)(x) + β(m)g(m)(x),
and the weights for the next iteration will be
wi ←wi · exp
This is equal to
wi · e−(K−1)2
i g(m)(xi)
wi · e−K−1
if ci = T(xi),
if ci ̸= T(xi),
where α(m) is deﬁned as in (1) with the extra term log(K −
1), and the new weight (12) is equivalent to the weight updating scheme in Algorithm 2 (2d) after normalization.
arg maxk(f (m)
(x), . . . , f (m)
equivalent
output C(x) = arg maxk
m=1 α(m) · I(T (m)(x) = k) in
Algorithm 2. Hence, Algorithm 2 can be considered as
forward stagewise additive modeling using the multi-class
exponential loss function.
2.2 The multi-class exponential loss
We now justify the use of the multi-class exponential
loss (6). Firstly, we note that when K = 2, the sum-tozero constraint indicates f = (f1, −f1) and then the multiclass exponential loss reduces to the exponential loss used
in binary classiﬁcation. justiﬁed the exponential loss by
showing that its population minimizer is equivalent to the
Bayes rule. We follow the same arguments to investigate
what is the population minimizer of this multi-class exponential loss function. Speciﬁcally, we are interested in
EY |X=x exp
K (Y1f1(x) + · · · + YKfK(x))
subject to f1(x) + · · · + fK(x) = 0. The Lagrange of this
constrained optimization problem can be written as:
Prob(c = 1|x)
Prob(c = K|x)
λ (f1(x) + · · · + fK(x)) ,
Multi-class AdaBoost 353
where λ is the Lagrange multiplier. Taking derivatives with
respect to fk and λ, we reach
Prob(c = 1|x) −λ
Prob(c = K|x) −λ
f1(x) + · · · + fK(x)
Solving this set of equations, we obtain the population minimizer
k(x) = (K −1) log Prob(c = k|x)−
log Prob(c = k′|x),
for k = 1, . . . , K. Thus,
k(x) = arg max
Prob(c = k|x),
which is the multi-class Bayes optimal classiﬁcation rule.
This result justiﬁes the use of this multi-class exponential
loss function. Equation (14) also provides a way to recover
the class probability Prob(c = k|x) once f ∗
k(x)’s are estimated, i.e.
Prob(C = k|x) =
1 (x) + · · · + c
for k = 1, . . . , K.
2.3 Fisher-consistent multi-class loss
We have shown that the population minimizer of the new
multi-class exponential loss is equivalent to the multi-class
Bayes rule. This property is shared by many other multiclass loss functions. Let us use the same notation as in Section 2.1, and consider a general multi-class loss function
L(y, f) = φ
K (y1f1 + · · · + yKfK)
where φ(·) is a non-negative valued function. The multiclass exponential loss uses φ(t) = e−t. We can use the general multi-class loss function in Algorithm 3 to minimize the
empirical loss
However, to derive a sensible algorithm, we need to require
the φ(·) function be Fisher-consistent. Speciﬁcally, we say
φ(·) is Fisher-consistent for K-class classiﬁcation, if for ∀x
in a set of full measure, the following optimization problem
K (Y1f1(x) + · · · + YKfK(x))
subject to f1(x) + · · ·+ fK(x) = 0, has a unique solution ˆf,
ˆfk(x) = arg max
Prob(C = k|x).
We use the sum-to-zero constraint to ensure the existence
and uniqueness of the solution to (18).
Note that as n →∞, the empirical loss in (17) becomes
K (Y1f1(x) + · · · + YKfK(x))
Therefore, the multi-class Fisher-consistent condition basically says that with inﬁnite samples, one can exactly recover
the multi-class Bayes rule by minimizing the multi-class loss
using φ(·). Thus our deﬁnition of Fisher-consistent losses is
a multi-class generalization of the binary Fisher-consistent
loss function discussed in .
In the following theorem, we show that there are a class
of convex functions that are Fisher-consistent for K-class
classiﬁcation, for all K ≥2.
Theorem 1. Let φ(t) be a non-negative twice diﬀerentiable
function. If φ′(0) < 0 and φ′′(t) > 0 for ∀t, then φ is Fisherconsistent for K-class classiﬁcation for ∀K ≥2. Moreover,
let ˆf be the solution of (18), then we have
Prob(C = k|x) =
K−1 ˆfk(x)
K−1 ˆfk′(x)
for k = 1, . . . , K.
Theorem 1 immediately concludes that the three most
popular smooth loss functions, namely, exponential, logit
and L2 loss functions, are Fisher-consistent for all multiclass classiﬁcation problems regardless the number of
classes. The inversion formula (21) allows one to easily construct estimates for the conditional class probabilities. Table 1 shows the explicit inversion formulae for computing the
conditional class probabilities using the exponential, logit
and L2 losses.
With these multi-class Fisher-consistent losses on hand,
we can use the forward stagewise modeling strategy to derive various multi-class boosting algorithms by minimizing
the empirical multi-class loss. The biggest advantage of the
exponential loss is that it gives us a simple re-weighting formula. Other multi-class loss functions may not lead to such
a simple closed-form re-weighting scheme. One could handle this computation issue by employing the computational
354 J. Zhu et al.
Table 1. The probability inversion formula
exponential
φ(t) = e−t
φ(t) = log(1 + e−t)
φ(t) = (1 −t)2
Prob(C = k|x)
k′=1 1/(1−
trick used in and . For example, derived a multiclass boosting algorithm using the logit loss. A multi-class
version of the L2 boosting can be derived following the lines
in . We do not explore these directions in the current paper. To ﬁx ideas, we shall focus on the multi-class AdaBoost
algorithm.
3. NUMERICAL RESULTS
In this section, we use both simulation data and realworld data to demonstrate our multi-class AdaBoost algorithm. For comparison, a single decision tree (CART; )
and AdaBoost.MH are also ﬁt. We have chosen to compare with the AdaBoost.MH algorithm because it is conceptually easy to understand and it seems to have dominated
other proposals in empirical studies . Indeed, also
argue that with large samples, AdaBoost.MH has the optimal classiﬁcation performance. The AdaBoost.MH algorithm converts the K-class problem into that of estimating
a two-class classiﬁer on a training set K times as large, with
an additional feature deﬁned by the set of class labels. It is
essentially the same as the one vs. rest scheme .
We would like to emphasize that the purpose of our numerical experiments is not to argue that SAMME is the ultimate multi-class classiﬁcation tool, but rather to illustrate
that it is a sensible algorithm, and that it is the natural extension of the AdaBoost algorithm to the multi-class case.
3.1 Simulation
We mimic a popular simulation example found in . This
is a three-class problem with twenty one variables, and it is
considered to be a diﬃcult pattern recognition problem with
Bayes error equal to 0.140. The predictors are deﬁned by
u · v1(j) + (1 −u) · v2(j) + ϵj,
u · v1(j) + (1 −u) · v3(j) + ϵj,
u · v2(j) + (1 −u) · v3(j) + ϵj,
where j = 1, . . . , 21, u is uniform on (0, 1), ϵj are standard
normal variables, and the vℓare the shifted triangular waveforms: v1(j) = max(6 −|j −11|, 0), v2(j) = v1(j −4) and
v3(j) = v1(j + 4).
The training sample size is 300 so that approximately 100
training observations are in each class. We use the classiﬁcation tree as the weak classiﬁer for SAMME. The trees are
built using a greedy, top-down recursive partitioning strategy, and we restrict all trees within each method to have the
same number of terminal nodes. This number is chosen via
ﬁve-fold cross-validation. We use an independent test sample of size 5000 to estimate the error rate. Averaged results
over ten such independently drawn training-test set combinations are shown in Fig. 2 and Table 2.
As we can see, for this particular simulation example,
SAMME performs slightly better than the AdaBoost.MH algorithm. A paired t-test across the ten independent comparisons indicates a signiﬁcant diﬀerence with p-value around
3.2 Real data
In this section, we show the results of running SAMME on
a collection of datasets from the UC-Irvine machine learning archive . Seven datasets were used: Letter, Nursery,
Pendigits, Satimage, Segmentation, Thyroid and Vowel.
These datasets come with pre-speciﬁed training and testing
sets, and are summarized in Table 3. They cover a wide
range of scenarios: the number of classes ranges from 3
to 26, and the size of the training data ranges from 210
to 16,000 data points. The types of input variables include both numerical and categorical, for example, in the
Nursery dataset, all input variables are categorical variables. We used a classiﬁcation tree as the weak classiﬁer
in each case. Again, the trees were built using a greedy,
top-down recursive partitioning strategy. We restricted all
trees within each method to have the same number of terminal nodes, and this number was chosen via ﬁve-fold crossvalidation.
Figure 3 compares SAMME and AdaBoost.MH. The test
error rates are summarized in Table 5. The standard errors are approximated by
te.err · (1 −te.err)/n.te, where
te.err is the test error, and n.te is the size of the testing
The most interesting result is on the Vowel dataset. This
is a diﬃcult classiﬁcation problem, and the best methods
achieve around 40% errors on the test data . The data
was collected by , who recorded examples of the eleven
steady state vowels of English spoken by ﬁfteen speakers for
a speaker normalization study. The International Phonetic
Association (IPA) symbols that represent the vowels and the
words in which the eleven vowel sounds were recorded are
given in Table 4.
Four male and four female speakers were used to train
the classiﬁer, and then another four male and three female speakers were used for testing the performance. Each
Multi-class AdaBoost 355
Figure 2. Test errors for SAMME and AdaBoost.MH on the waveform simulation example. The training sample size is 300,
and the testing sample size is 5000. The results are averages of over ten independently drawn training-test set combinations.
Table 2. Test error rates % of diﬀerent methods on the
waveform data. The results are averaged over ten
independently drawn datasets. For comparison, a single
decision tree is also ﬁt
Iterations
CART error = 28.4 (1.8)
17.1 (0.6)
17.0 (0.5)
17.0 (0.6)
16.7 (0.8)
16.6 (0.7)
16.6 (0.6)
Table 3. Summary of seven benchmark datasets
#Variables
Segmentation
speaker yielded six frames of speech from eleven vowels. This
gave 528 frames from the eight speakers used as the training data and 462 frames from the seven speakers used as
the testing data. Ten predictors are derived from the digitized speech in a rather complicated way, but standard in
the speech recognition world. As we can see from Fig. 3 and
Table 5, for this particular dataset, the SAMME algorithm
Table 4. The International Phonetic Association (IPA)
symbols that represent the eleven vowels
performs almost 15% better than the AdaBoost.MH algorithm.
For other datasets, the SAMME algorithm performs
AdaBoost.MH
Letter, Pendigits, and Thyroid, while slightly worse on
Segmentation. In the Segmentation data, there are only
210 training data points, so the diﬀerence might be just
due to randomness. It is also worth noting that for the
Nursery data, both the SAMME algorithm and the AdaBoost.MH algorithm are able to reduce the test error
to zero, while a single decision tree has about 0.8% test
error rate. Overall, we are comfortable to say that the
performance of SAMME is comparable with that of the
AdaBoost.MH.
For the purpose of further investigation, we also merged
the training and the test sets, and randomly split them into
new training and testing sets. The procedure was repeated
ten times. Again, the performance of SAMME is comparable
with that of the AdaBoost.MH. For the sake of space, we do
not present these results.
356 J. Zhu et al.
Figure 3. Test errors for SAMME and AdaBoost.MH on six benchmark datasets. These datasets come with pre-speciﬁed
training and testing splits, and they are summarized in Table 3. The results for the Nursery data are not shown for the test
error rates are reduced to zero for both methods.
4. DISCUSSION
The statistical view of boosting, as illustrated in ,
shows that the two-class AdaBoost builds an additive model
to approximate the two-class Bayes rule. Following the same
statistical principle, we have derived SAMME, the natural
and clean multi-class extension of the two-class AdaBoost
algorithm, and we have shown that
• SAMME adaptively implements the multi-class Bayes
rule by ﬁtting a forward stagewise additive model for
multi-class problems;
• SAMME follows closely to the philosophy of boosting,
i.e. adaptively combining weak classiﬁers (rather than
regressors as in logit-boost and MART ) into a
powerful one;
• At each stage, SAMME returns only one weighted clas-
Multi-class AdaBoost 357
Table 5. Test error rates % on seven benchmark real
datasets. The datasets come with pre-speciﬁed training and
testing splits. The standard errors (in parentheses) are
approximated by
te.err · (1 −te.err)/n.te, where te.err is
the test error, and n.te is the size of the testing data. For
comparison, a single decision tree was also ﬁt, and the tree
size was determined by ﬁve-fold cross-validation
Iterations
CART error = 13.5 (0.5)
CART error = 0.79 (0.14)
CART error = 8.3 (0.5)
CART error = 13.8 (0.8)
Segmentation
CART error = 9.3 (0.6)
CART error = 0.64 (0.14)
0.67 (0.14)
0.67 (0.14)
0.67 (0.14)
0.58 (0.13)
0.61 (0.13)
0.58 (0.13)
CART error = 53.0 (2.3)
52.8 (2.3)
51.5 (2.3)
51.5 (2.3)
43.9 (2.3)
43.3 (2.3)
43.3 (2.3)
siﬁer (rather than K), and the weak classiﬁer only needs
to be better than K-class random guessing;
• SAMME shares the same simple modular structure of
experiments
AdaBoost.MH in general performs very well and SAMME’s
performance is comparable with that of the AdaBoost.MH,
and sometimes slightly better. However, we would like to
emphasize that our goal is not to argue that SAMME is
the ultimate multi-class classiﬁcation tool, but rather to illustrate that it is the natural extension of the AdaBoost
algorithm to the multi-class case. The success of SAMME
is used here to demonstrate the usefulness of the forward
stagewise modeling view of boosting.
 called the AdaBoost algorithm Discrete AdaBoost
and proposed Real AdaBoost and Gentle AdaBoost algorithms which combine regressors to estimate the conditional
class probability. Using their language, SAMME is also a discrete multi-class AdaBoost. We have also derived the corresponding Real Multi-class AdaBoost and Gentle Multi-class
AdaBoost . These results further demonstrate the
usefulness of the forward stagewise modeling view of boosting.
It should also be emphasized here that although our statistical view of boosting leads to interesting and useful results, we do not argue it is the ultimate explanation of boosting. Why boosting works is still an open question. Interested
readers are referred to the discussions on . mentioned
that the forward stagewise modeling view of AdaBoost does
not oﬀer a bound on the generalization error as in the original AdaBoost paper . also pointed out that the statistical view of boosting does not explain why AdaBoost is
robust against overﬁtting. Later, his understandings of AdaBoost lead to the invention of random forests .
Finally, we discuss the computational cost of SAMME.
Suppose one uses a classiﬁcation tree as the weak learner,
and the depth of each tree is ﬁxed as d, then the computational cost for building each tree is O(dpn log(n)), where p
is the dimension of the input x. The computational cost for
our SAMME algorithm is then O(dpn log(n)M) since there
are M iterations.
The SAMME algorithm has been implemented in the R
computing environment, and will be publicly available from
the authors’ websites.
APPENDIX: PROOFS
Lemma 1. First, for any ﬁxed value of β > 0, using the
deﬁnition (8), one can express the criterion in (7) as:
ci̸=T (xi)
(K−1)2 −e−
wiI(ci ̸= T(xi)).
Since only the last sum depends on the classiﬁer T(x), we
get that (10) holds. Now plugging (10) into (7) and solving
for β, we obtain (11) (note that (23) is a convex function
Theorem 1. Firstly, we note that under the sum-to-zero
constraint,
K (Y1f1(x) + · · · + YKfK(x))
Prob(C = 1|x) +
Prob(C = K|x).
358 J. Zhu et al.
Therefore, we wish to solve
K −1f1(x))Prob(C = 1|x) +
K −1fK(x))Prob(C = 1|x)
subject to
fk(x) = 0.
For convenience, let pk = Prob(C = k|x), k = 1, 2, . . . , K
and we omit x in fk(x). Using the Lagrangian multiplier,
K −1f1)p1+
K −1fK)pK +
K −1λ(f1 + . . . + fK).
Then we have
K −1fk)pk +
K −1λ = 0,
for k = 1, . . . , K. Since φ′′(t) > 0 for ∀t, φ′ has an inverse function, denoted by ψ. Equation (24) gives
pk ). By the sum-to-zero constraint on f, we have
Since φ′ is a strictly monotone increasing function, so is
ψ. Thus the left hand size (LHS) of (25) is a decreasing
function of λ. It suﬃces to show that equation (25) has a
root λ∗, which is the unique root. Then it is easy to see
that ˆfk = ψ(−λ∗
pk ) is the unique minimizer of (18), for the
Hessian matrix of Q(f) is a diagonal matrix and the k-th
diagonal element is ∂2Q(f)
(K−1)2 φ′′(
K−1fk) > 0. Note
that when λ = −φ′(0) > 0, we have
pk > −φ′(0), then
pk ) < ψ (φ′(0)) = 0. So the LHS of (25) is negative
when λ = −φ′(0) > 0. On the other hand, let us deﬁne
A = {a : φ′(a) = 0}. If A is an empty set, then φ′(t) →0−
as t →∞(since φ is convex). If A is not empty, denote
a∗= inf A. By the fact φ′(0) < 0, we conclude a∗> 0.
Hence φ′(t) →0−as t →a∗−. In both cases, we see that ∃
a small enough λ0 > 0 such that ψ(−λ0
pk ) > 0 for all k. So
the LHS of (25) is positive when λ = λ0 > 0. Therefore there
must be a positive λ∗∈(λ0, −φ′(0)) such that equation (25)
holds. Now we show the minimizer ˆf agrees with the Bayes
rule. Without loss of generality, let p1 > pk for ∀k ̸= 1.
Then since −λ∗
pk for ∀k ̸= 1, we have ˆf1 > ˆfk for
∀k ̸= 1. For the inversion formula, we note pk = −
k=1 pj = 1 requires K
fk) = 1. Hence it
follows that λ∗= −(K
K−1 ˆfk))−1. Then (21) is
ACKNOWLEDGMENTS
We would like to dedicate this work to the memory of
Leo Breiman, who passed away while we were ﬁnalizing this
manuscript. Leo Breiman has made tremendous contributions to the study of statistics and machine learning. His
work has greatly inﬂuenced us.
Received 22 May 2009