Generalized Intersection over Union: A Metric and A Loss for Bounding Box
Regression
Hamid Rezatoﬁghi1,2
Nathan Tsoi1
JunYoung Gwak1
Amir Sadeghian1,3
Silvio Savarese1
1Computer Science Department, Stanford University, United states
2School of Computer Science, The University of Adelaide, Australia
3Aibee Inc, USA
 
Intersection over Union (IoU) is the most popular evaluation metric used in the object detection benchmarks. However, there is a gap between optimizing the commonly used
distance losses for regressing the parameters of a bounding
box and maximizing this metric value. The optimal objective for a metric is the metric itself. In the case of axisaligned 2D bounding boxes, it can be shown that IoU can
be directly used as a regression loss. However, IoU has a
plateau making it infeasible to optimize in the case of nonoverlapping bounding boxes. In this paper, we address the
weaknesses of IoU by introducing a generalized version as
both a new loss and a new metric. By incorporating this
generalized IoU (GIoU) as a loss into the state-of-the art
object detection frameworks, we show a consistent improvement on their performance using both the standard, IoU
based, and new, GIoU based, performance measures on
popular object detection benchmarks such as PASCAL VOC
and MS COCO.
1. Introduction
Bounding box regression is one of the most fundamental
components in many 2D/3D computer vision tasks. Tasks
such as object localization, multiple object detection, object tracking and instance level segmentation rely on accurate bounding box regression. The dominant trend for
improving performance of applications utilizing deep neural networks is to propose either a better architecture backbone or a better strategy to extract reliable local
features . However, one opportunity for improvement
that is widely ignored is the replacement of the surrogate
regression losses such as ℓ1 and ℓ2-norms, with a metric
loss calculated based on Intersection over Union (IoU).
||.||2 = 8.41
GIoU= 0.23
||.||2 = 8.41
GIoU= 0.41
||.||2 = 8.41
GIoU= 0.65
||.||1 = 9.07
IoU = 0.27
GIoU = 0.24
||.||1 = 9.07
IoU = 0.59
GIoU = 0.59
||.||1 = 9.07
IoU = 0.66
GIoU = 0.62
Figure 1. Two sets of examples (a) and (b) with the bounding
boxes represented by (a) two corners (x1, y1, x2, y2) and (b) center and size (xc, yc, w, h). For all three cases in each set (a) ℓ2norm distance, ||.||2, and (b) ℓ1-norm distance, ||.||1, between the
representation of two rectangles are exactly same value, but their
IoU and GIoU values are very different.
IoU, also known as Jaccard index, is the most commonly
used metric for comparing the similarity between two arbitrary shapes. IoU encodes the shape properties of the objects under comparison, e.g. the widths, heights and locations of two bounding boxes, into the region property and
then calculates a normalized measure that focuses on their
 
areas (or volumes). This property makes IoU invariant to
the scale of the problem under consideration. Due to this
appealing property, all performance measures used to evaluate for segmentation , object detection ,
and tracking rely on this metric.
However, it can be shown that there is not a strong correlation between minimizing the commonly used losses,
e.g. ℓn-norms, deﬁned on parametric representation of two
bounding boxes in 2D/3D and improving their IoU values.
For example, consider the simple 2D scenario in Fig. 1 (a),
where the predicted bounding box (black rectangle), and the
ground truth box (green rectangle), are represented by their
top-left and bottom-right corners, i.e. (x1, y1, x2, y2). For
simplicity, let’s assume that the distance, e.g. ℓ2-norm, between one of the corners of two boxes is ﬁxed. Therefore
any predicted bounding box where the second corner lies
on a circle with a ﬁxed radius centered on the second corner
of the green rectangle (shown by a gray dashed line circle) will have exactly the same ℓ2-norm distance from the
ground truth box; however their IoU values can be signiﬁcantly different (Fig. 1 (a)). The same argument can be extended to any other representation and loss, e.g. Fig. 1 (b).
It is intuitive that a good local optimum for these types of
objectives may not necessarily be a local optimum for IoU.
Moreover, in contrast to IoU, ℓn-norm objectives deﬁned
based on the aforementioned parametric representations are
not invariant to the scale of the problem. To this end, several
pairs of bounding boxes with the same level of overlap, but
different scales due to e.g. perspective, will have different
objective values. In addition, some representations may suffer from lack of regularization between the different types
of parameters used for the representation. For example, in
the center and size representation, (xc, yc) is deﬁned on the
location space while (w, h) belongs to the size space. Complexity increases as more parameters are incorporated, e.g.
rotation, or when adding more dimensions to the problem.
To alleviate some of the aforementioned problems, state-ofthe-art object detectors introduce the concept of an anchor
box as a hypothetically good initial guess. They also
deﬁne a non-linear representation to naively compensate for the scale changes. Even with these handcrafted
changes, there is still a gap between optimizing the regression losses and IoU values.
In this paper, we explore the calculation of IoU between
two axis aligned rectangles, or generally two axis aligned northotopes, which has a straightforward analytical solution
and in contrast to the prevailing belief, IoU in this case can
be backpropagated , i.e. it can be directly used as the
objective function to optimize. It is therefore preferable to
use IoU as the objective function for 2D object detection
tasks. Given the choice between optimizing a metric itself
vs. a surrogate loss function, the optimal choice is the metric itself. However, IoU as both a metric and a loss has a
major issue: if two objects do not overlap, the IoU value
will be zero and will not reﬂect how far the two shapes are
from each other. In this case of non-overlapping objects, if
IoU is used as a loss, its gradient will be zero and cannot
be optimized.
In this paper, we will address this weakness of IoU by
extending the concept to non-overlapping cases. We ensure
this generalization (a) follows the same deﬁnition as IoU,
i.e. encoding the shape properties of the compared objects
into the region property; (b) maintains the scale invariant
property of IoU, and (c) ensures a strong correlation with
IoU in the case of overlapping objects. We introduce this
generalized version of IoU, named GIoU, as a new metric for comparing any two arbitrary shapes. We also provide an analytical solution for calculating GIoU between
two axis aligned rectangles, allowing it to be used as a loss
in this case. Incorporating GIoU loss into state-of-the art
object detection algorithms, we consistently improve their
performance on popular object detection benchmarks such
as PASCAL VOC and MS COCO using both the
standard, i.e. IoU based , and the new, GIoU based,
performance measures.
The main contribution of the paper is summarized as follows:
• We introduce this generalized version of IoU, as a new
metric for comparing any two arbitrary shapes.
• We provide an analytical solution for using GIoU as
loss between two axis-aligned rectangles or generally
n-orthotopes1.
• We incorporate GIoU loss into the most popular
object detection algorithms such as Faster R-CNN,
Mask R-CNN and YOLO v3, and show their performance improvement on standard object detection
benchmarks.
2. Related Work
Object detection accuracy measures: Intersection over
Union (IoU) is the defacto evaluation metric used in object
detection. It is used to determine true positives and false
positives in a set of predictions. When using IoU as an evaluation metric an accuracy threshold must be chosen. For
instance in the PASCAL VOC challenge , the widely reported detection accuracy measure, i.e. mean Average Precision (mAP), is calculated based on a ﬁxed IoU threshold,
i.e. 0.5. However, an arbitrary choice of the IoU threshold
does not fully reﬂect the localization performance of different methods. Any localization accuracy higher than the
threshold is treated equally. In order to make this performance measure less sensitive to the choice of IoU threshold, the MS COCO Benchmark challenge averages
mAP across multiple IoU thresholds.
1Extension provided in supp. material
Bounding box representations and losses: In 2D object detection, learning bounding box parameters is crucial.
Various bounding box representations and losses have been
proposed in the literature. Redmon et al. in YOLO v1 
propose a direct regression on the bounding box parameters
with a small tweak to predict square root of the bounding
box size to remedy scale sensitivity. Girshick et al. in R-
CNN parameterize the bounding box representation by predicting location and size offsets from a prior bounding box
calculated using a selective search algorithm . To alleviate scale sensitivity of the representation, the bounding
box size offsets are deﬁned in log-space. Then, an ℓ2-norm
objective, also known as MSE loss, is used as the objective
to optimize. Later, in Fast R-CNN , Girshick proposes
ℓ1-smooth loss to make the learning more robust against
outliers. Ren et al. propose the use of a set of dense
prior bounding boxes, known as anchor boxes, followed by
a regression to small variations on bounding box locations
and sizes. However, this makes training the bounding box
scores more difﬁcult due to signiﬁcant class imbalance between positive and negative samples. To mitigate this problem, the authors later introduce focal loss , which is
orthogonal to the main focus of our paper.
Most popular object detectors utilize some combination of the bounding box representations
and losses mentioned above.
These considerable efforts
have yielded signiﬁcant improvement in object detection.
We show there may be some opportunity for further improvement in localization with the use of GIoU, as their
bounding box regression losses are not directly representative of the core evaluation metric, i.e. IoU.
Optimizing IoU using an approximate or a surrogate function: In the semantic segmentation task, there
have been some efforts to optimize IoU using either an
approximate function or a surrogate loss . Similarly, for the object detection task, recent works have
attempted to directly or indirectly incorporate IoU to better perform bounding box regression. However, they suffer
from either an approximation or a plateau which exist in
optimizing IoU in non-overlapping cases. In this paper we
address the weakness of IoU by introducing a generalized
version of IoU, which is directly incorporated as a loss for
the object detection problem.
3. Generalized Intersection over Union
Intersection over Union (IoU) for comparing similarity
between two arbitrary shapes (volumes) A, B ⊆S ∈Rn is
attained by:
IoU = |A ∩B|
Two appealing features, which make this similarity measure popular for evaluating many 2D/3D computer vision
tasks are as follows:
Algorithm 1: Generalized Intersection over Union
input : Two arbitrary convex shapes: A, B ⊆S ∈Rn
output: GIoU
1 For A and B, ﬁnd the smallest enclosing convex object C,
where C ⊆S ∈Rn
2 IoU = |A ∩B|
3 GIoU = IoU −|C\(A ∪B)|
• IoU as a distance, e.g. LIoU = 1−IoU, is a metric (by
mathematical deﬁnition) . It means LIoU fulﬁlls all
properties of a metric such as non-negativity, identity
of indiscernibles, symmetry and triangle inequality.
• IoU is invariant to the scale of the problem.
means that the similarity between two arbitrary shapes
A and B is independent from the scale of their space S
(the proof is provided in supp. material).
However, IoU has a major weakness:
• If |A∩B| = 0, IoU(A, B) = 0. In this case, IoU does
not reﬂect if two shapes are in vicinity of each other or
very far from each other.
To address this issue, we propose a general extension to
IoU, namely Generalized Intersection over Union GIoU.
For two arbitrary convex shapes (volumes) A, B ⊆S ∈
Rn, we ﬁrst ﬁnd the smallest convex shapes C ⊆S ∈Rn
enclosing both A and B2. For comparing two speciﬁc types
of geometric shapes, C can be from the same type. For
example, two arbitrary ellipsoids, C could be the smallest
ellipsoids enclosing them. Then we calculate a ratio between the volume (area) occupied by C excluding A and B
and divide by the total volume (area) occupied by C. This
represents a normalized measure that focuses on the empty
volume (area) between A and B. Finally GIoU is attained
by subtracting this ratio from the IoU value. The calculation of GIoU is summarized in Alg. 1.
GIoU as a new metric has the following properties: 3
1. Similar to IoU, GIoU as a distance, e.g. LGIoU =
1 −GIoU, holding all properties of a metric such
as non-negativity, identity of indiscernibles, symmetry
and triangle inequality.
2. Similar to IoU, GIoU is invariant to the scale of the
3. GIoU is always a lower bound for IoU, i.e. ∀A, B ⊆
S GIoU(A, B) ≤IoU(A, B), and this lower bound
becomes tighter when A and B have a stronger shape
2Extension to non-convex cases has been provided in supp. material.
3Their proof has been provided in supp. material.
similarity and proximity, i.e. limA→B GIoU(A, B) =
IoU(A, B).
⊆S, 0 ≤IoU(A, B) ≤1, but GIoU
has a symmetric range, i.e. ∀A, B
GIoU(A, B) ≤1.
I) Similar to IoU, the value 1 occurs only when two
objects overlay perfectly, i.e. if |A∪B| = |A∩B|,
then GIoU = IoU = 1
II) GIoU value asymptotically converges to -1
when the ratio between occupying regions of
two shapes, |A ∪B|, and the volume (area)
of the enclosing shape |C| tends to zero, i.e.
GIoU(A, B) = −1 .
In summary, this generalization keeps the major properties of IoU while rectifying its weakness. Therefore, GIoU
can be a proper substitute for IoU in all performance measures used in 2D/3D computer vision tasks. In this paper,
we only focus on 2D object detection where we can easily
derive an analytical solution for GIoU to apply it as both
metric and loss. The extension to non-axis aligned 3D cases
is left as future work.
3.1. GIoU as Loss for Bounding Box Regression
So far, we introduced GIoU as a metric for any two arbitrary shapes. However as is the case with IoU, there is no
analytical solution for calculating intersection between two
arbitrary shapes and/or for ﬁnding the smallest enclosing
convex object for them.
Fortunately, for the 2D object detection task where the
task is to compare two axis aligned bounding boxes, we can
show that GIoU has a straightforward solution. In this case,
the intersection and the smallest enclosing objects both have
rectangular shapes. It can be shown that the coordinates of
their vertices are simply the coordinates of one of the two
bounding boxes being compared, which can be attained by
comparing each vertices’ coordinates using min and max
functions. To check if two bounding boxes overlap, a condition must also be checked. Therefore, we have an exact
solution to calculate IoU and GIoU.
Since back-propagating min, max and piece-wise linear
functions, e.g. Relu, are feasible, it can be shown that every
component in Alg. 2 has a well-behaved derivative. Therefore, IoU or GIoU can be directly used as a loss, i.e. LIoU
or LGIoU, for optimizing deep neural network based object
detectors. In this case, we are directly optimizing a metric
as loss, which is an optimal choice for the metric. However,
in all non-overlapping cases, IoU has zero gradient, which
affects both training quality and convergence rate. GIoU,
in contrast, has a gradient in all possible cases, including
non-overlapping situations. In addition, using property 3,
Algorithm 2: IoU and GIoU as bounding box losses
input : Predicted Bp and ground truth Bg bounding box
coordinates:
output: LIoU, LGIoU.
1 For the predicted box Bp, ensuring xp
1 = min(xp
2 = max(xp
1 = min(yp
2 = max(yp
2 Calculating area of Bg: Ag = (xg
3 Calculating area of Bp: Ap = (ˆxp
4 Calculating intersection I between Bp and Bg:
1 = max(ˆxp
2 = min(ˆxp
1 = max(ˆyp
2 = min(ˆyp
otherwise.
5 Finding the coordinate of smallest enclosing box Bc:
1 = min(ˆxp
2 = max(ˆxp
1 = min(ˆyp
2 = max(ˆyp
6 Calculating area of Bc: Ac = (xc
U , where U = Ap + Ag −I.
8 GIoU = IoU −Ac −U
9 LIoU = 1 −IoU,
LGIoU = 1 −GIoU.
we show that GIoU has a strong correlation with IoU,
especially in high IoU values. We also demonstrate this
correlation qualitatively in Fig. 2 by taking over 10K random samples from the coordinates of two 2D rectangles. In
Fig. 2, we also observe that in the case of low overlap, e.g.
IoU ≤0.2 and GIoU ≤0.2, GIoU has the opportunity to
change more dramatically compared to IoU. To this end,
GIoU can potentially have a steeper gradient in any possible state in these cases compared to IoU. Therefore, optimizing GIoU as loss, LGIoU can be a better choice compared to LIoU, no matter which IoU-based performance
measure is ultimately used. Our experimental results verify this claim.
Loss Stability: We also investigate if there exist any extreme cases which make the loss unstable/undeﬁned given
any value for the predicted outputs.
Overlapping samples
Line IoU = GIoU
Non-overlaping samples
Line IoU = 0 & GIoU < 0
Figure 2. Correlation between GIoU and IOU for overlapping and
non-overlapping samples.
Considering the ground truth bounding box, Bg is a rectangle with area bigger than zero, i.e. Ag > 0. Alg. 2 (1)
and the Conditions in Alg. 2 (4) respectively ensure the predicted area Ap and intersection I are non-negative values,
i.e. Ap ≥0 and I ≥0 ∀Bp ∈R4. Therefore union U > 0
for any predicted value of Bp = (xp
This ensures that the denominator in IoU cannot be zero
for any predicted value of outputs. Moreover, for any values of Bp = (xp
2) ∈R4, union is always bigger
than intersection, i.e. U ≥I. Consequently, LIoU is always
bounded, i.e. 0 ≤LIoU ≤1 ∀Bp ∈R4.
To check the stability of LGIoU, the extra term, i.e.
Ac , should always be a deﬁned and bounded value. It
can be easily perceived that the smallest enclosing box Bc
cannot be smaller than Bg for all predicted values. Therefore the denominator in Ac−U
is always a positive nonzero value, because Ac ≥Ag ∀Bp ∈R4 and Ag ≥0.
Moreover, the area of the smallest enclosing box cannot be
smaller than union for any value of predictions, i.e. Ac ≥U
∀Bp ∈R4. Therefore, the extra term in GIoU is positive
and bounded. Consequently, LGIoU is always bounded, i.e.
0 ≤LGIoU ≤2 ∀Bp ∈R4.
LGIoU behaviour when IoU = 0: For GIoU loss, we
have LGIoU = 1 −GIoU = 1 + Ac−U
−IoU. In the case
when Bg and Bp do not overlap, i.e. I = 0 and IoU = 0,
GIoU loss simpliﬁes to LGIoU = 1 + Ac−U
In this case, by minimizing LGIoU, we actually maximize
Ac . This term is a normalized measure between 0
and 1, i.e. 0 ≤
Ac ≤1, and is maximized when the area
of the smallest enclosing box Ac is minimized while the
union U = Ag +Ap, or more precisely the area of predicted
bounding box Ap, is maximized. To accomplish this, the
vertices of the predicted bounding box Bp should move in
a direction that encourages Bg and Bp to overlap, making
4. Experimental Results
We evaluate our new bounding box regression loss
LGIoU by incorporating it into the most popular 2D object
detectors such as Faster R-CNN , Mask R-CNN 
and YOLO v3 . To this end, we replace their default
regression losses with LGIoU, i.e. we replace ℓ1-smooth in
Faster /Mask-RCNN and MSE in YOLO v3 .
We also compare the baseline losses against LIoU 4.
We train all detection baselines and report
all the results on two standard object detection benchmarks,
i.e. the PASCAL VOC and the Microsoft Common
Objects in Context (MS COCO) challenges.
details of their training protocol and their evaluation have
4All source codes including the evaluation scripts, the training codes,
trained models and all loss implementations in PyTorch, TensorFlow and
darknet are available at: 
been provided in their own sections.
PASCAL VOC 2007: The Pascal Visual Object Classes
(VOC) benchmark is one of the most widely used
datasets for classiﬁcation, object detection and semantic
segmentation. It consists of 9963 images with a 50/50 split
for training and test, where objects from 20 pre-deﬁned
categories have been annotated with bounding boxes.
captioning, recognition, detection and segmentation is
the more recent Microsoft Common Objects in Context
(MS-COCO) .
The COCO dataset consists of over
200,000 images across train, validation and test sets with
over 500,000 annotated object instances from 80 categories.
Evaluation protocol.
In this paper,
we adopt the
same performance measure as the MS COCO 2018
Challenge to report all our results.
This includes
the calculation of mean Average precision (mAP) over
different class labels for a speciﬁc value of IoU threshold
in order to determine true positives and false positives.
The main performance measure used in this benchmark is
shown by AP, which is averaging mAP across different
value of IoU thresholds, i.e. IoU = {.5, .55, · · · , .95}.
Additionally, we modify this evaluation script to use GIoU
instead of IoU as a metric to decide about true positives
and false positives. Therefore, we report another value for
AP by averaging mAP across different values of GIoU
thresholds, GIoU = {.5, .55, · · · , .95}. We also report the
mAP value for IoU and GIoU thresholds equal to 0.75,
shown as AP75 in the tables.
All detection baselines have also been evaluated using
the test set of the MS COCO 2018 dataset, where the annotations are not accessible for the evaluation. Therefore in
this case, we are only able to report results using the standard performance measure, i.e. IoU.
4.1. YOLO v3
Training protocol. We used the original Darknet implementation of YOLO v3 released by the authors 5. For baseline results (training using MSE loss), we used DarkNet-
608 as backbone network architecture in all experiments
and followed exactly their training protocol using the reported default parameters and the number of iteration on
each benchmark. To train YOLO v3 using IoU and GIoU
losses, we simply replace the bounding box regression MSE
loss with LIoU and LGIoU losses explained in Alg. 2. Considering the additional MSE loss on classiﬁcation and since
we replace an unbounded distance loss such as MSE distance with a bounded distance, e.g. LIoU or LGIoU, we
need to regularize the new bounding box regression against
the classiﬁcation loss. However, we performed a very minimal effort to regularize these new regression losses against
5Available at: 
Table 1. Comparison between the performance of YOLO v3 trained
using its own loss (MSE) as well as LIoU and LGIoU losses. The results
are reported on the test set of PASCAL VOC 2007.
Evaluation
Relative improv %
Relative improv %
the MSE classiﬁcation loss.
PASCAL VOC 2007.
Following the original code’s
training protocol, we trained the network using each loss
on both training and validation set of the dataset up to 50K
iterations. Their performance using the best network model
for each loss has been evaluated using the PASCAL VOC
2007 test and the results have been reported in Tab. 1.
Considering both standard IoU based and new GIoU
based performance measures, the results in Tab. 1 show
that training YOLO v3 using LGIoU as regression loss can
considerably improve its performance compared to its own
regression loss (MSE). Moreover, incorporating LIoU as
regression loss can slightly improve the performance of
YOLO v3 on this benchmark. However, the improvement is
inferior compared to the case where it is trained by LGIoU.
MS COCO. Following the original code’s training protocol, we trained YOLO v3 using each loss on both the
training set and 88% of the validation set of MS COCO
2014 up to 502k iterations.
Then we evaluated the results using the remaining 12% of the validation set and reported the results in Tab. 2. We also compared them on
the MS COCO 2018 Challenge by submitting the results to
the COCO server. All results using the IoU based performance measure are reported in Tab. 3. Similar to the PAS-
CAL VOC experiment, the results show consistent improvement in performance for YOLO v3 when it is trained using
LGIoU as regression loss. We have also investigated how
each component, i.e. bounding box regression and classiﬁcation losses, contribute to the ﬁnal AP performance mea-
Training Iteration
Accuracy IoU
Training Iteration
Class Loss
Figure 3. The classiﬁcation loss and accuracy (average IoU)
against training iterations when YOLO v3 was trained using
its standard (MSE) loss as well as LIoU and LGIoU losses.
Table 2. Comparison between the performance of YOLO v3 trained
using its own loss (MSE) as well as LIoU and LGIoU losses. The results
are reported on 5K of the 2014 validation set of MS COCO.
Evaluation
Relative improv %
Relative improv %
Table 3. Comparison between the performance of YOLO v3 trained
using its own loss (MSE) as well as using LIoU and LGIoU losses. The
results are reported on the test set of MS COCO 2018.
Evaluation
Relative improv %
Relative improv %
sure. We believe the localization accuracy for YOLO v3
signiﬁcantly improves when LGIoU loss is used (Fig. 3 (a)).
However, with the current naive tuning of regularization parameters, balancing bounding box loss vs.
classiﬁcation
loss, the classiﬁcation scores may not be optimal, compared
to the baseline (Fig. 3 (b)). Since AP based performance
measure is considerably affected by small classiﬁcation error, we believe the results can be further improved with a
better search for regularization parameters.
4.2. Faster R-CNN and Mask R-CNN
Training protocol. We used the latest PyTorch implementations of Faster R-CNN and Mask R-CNN 6,
released by Facebook research. This code is analogous to
the original Caffe2 implementation 7. For baseline results
(trained using ℓ1-smooth), we used ResNet-50 the backbone
network architecture for both Faster R-CNN and Mask R-
CNN in all experiments and followed their training protocol using the reported default parameters and the number of
iteration on each benchmark. To train Faster R-CNN and
Mask R-CNN using IoU and GIoU losses, we replaced
their ℓ1-smooth loss in the ﬁnal bounding box reﬁnement
stage with LIoU and LGIoU losses explained in Alg. 2. Similar to the YOLO v3 experiment, we undertook minimal effort to regularize the new regression loss against the other
losses such as classiﬁcation and segmentation losses. We
simply multiplied LIoU and LGIoU losses by a factor of 10
for all experiments.
PASCAL VOC 2007. Since there is no instance mask
annotation available in this dataset, we did not evaluate
Mask R-CNN on this dataset. Therefore, we only trained
Faster R-CNN using the aforementioned bounding box re-
6 
7 
IoU Threshold
Default loss
Figure 4. mAP value against different IoU thresholds, i.e. .5 ≤
IoU ≤.95, for Faster R-CNN trained using ℓ1-smooth (green),
LIoU (blue) and LGIoU (red) losses.
gression losses on the training set of the dataset for 20k iterations. Then, we searched for the best-performing model on
the validation set over different parameters such as the number of training iterations and bounding box regression loss
regularizer. The ﬁnal results on the test set of the dataset
have been reported in Tab. 4.
According to both standard IoU based and new GIoU
based performance measure, the results in Tab. 4 show that
training Faster R-CNN using LGIoU as the bounding box
regression loss can consistently improve its performance
compared to its own regression loss (ℓ1-smooth). Moreover, incorporating LIoU as the regression loss can slightly
improve the performance of Faster R-CNN on this benchmark. The improvement is inferior compared to the case
where it is trained using LGIoU, see Fig. 4, where we visualized different values of mAP against different value of
IoU thresholds, i.e. .5 ≤IoU ≤.95.
MS COCO. Similarly, we trained both Faster R-CNN
and Mask R-CNN using each of the aforementioned bounding box regression losses on the MS COCO 2018 training
dataset for 95K iterations. The results for the best model on
the validation set of MS COCO 2018 for Faster R-CNN and
Mask R-CNN have been reported in Tables 5 and 7 respectively. We have also compared them on the MS COCO 2018
Challenge by submitting their results to the COCO server.
All results using the IoU based performance measure are
also reported in Tables 6 and 8.
Table 4. Comparison between the performance of Faster R-CNN 
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the test set of PASCAL VOC 2007.
Evaluation
ℓ1-smooth 
Relative improv. %
Relative improv. %
Table 5. Comparison between the performance of Faster R-CNN 
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the validation set of MS COCO 2018.
Evaluation
ℓ1-smooth 
Relative improv.%
Relative improv. %
Table 6. Comparison between the performance of Faster R-CNN 
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the test set of MS COCO 2018.
ℓ1-smooth 
Relative improv.%
Relative improv.%
Table 7. Comparison between the performance of Mask R-CNN 
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the validation set of MS COCO 2018.
Evaluation
ℓ1-smooth 
Relative improv.%
Relative improv. %
Table 8. Comparison between the performance of Mask R-CNN 
trained using its own loss (ℓ1-smooth) as well as LIoU and LGIoU losses.
The results are reported on the test set of MS COCO 2018.
ℓ1-smooth 
Relative improv.%
Relative improv.%
Similar to the above experiments, detection accuracy
improves by using LGIoU as regression loss over ℓ1smooth . However, the amount of improvement between different losses is less than previous experiments.
This may be due to several factors. First, the detection anchor boxes on Faster R-CNN and Mask R-CNN are
more dense than YOLO v3 , resulting in less frequent
scenarios where LGIoU has an advantage over LIoU such
as non-overlapping bounding boxes. Second, the bounding box regularization parameter has been naively tuned
on PASCAL VOC, leading to sub-optimal result on MS
COCO .
Figure 5. Example results from COCO validation using YOLO v3 trained using (left to right) LGIoU, LIoU, and MSE losses. Ground
truth is shown by a solid line and predictions are represented with dashed lines.
Figure 6. Two example results from COCO validation using Mask R-CNN trained using (left to right) LGIoU, LIoU, ℓ1-smooth losses.
Ground truth is shown by a solid line and predictions are represented with dashed lines.
5. Conclusion
In this paper, we introduced a generalization to IoU as
a new metric, namely GIoU, for comparing any two arbitrary shapes. We showed that this new metric has all of
the appealing properties which IoU has while addressing
its weakness. Therefore it can be a good alternative in all
performance measures in 2D/3D vision tasks relying on the
IoU metric.
We also provided an analytical solution for calculating
GIoU between two axis-aligned rectangles. We showed
that the derivative of GIoU as a distance can be computed
and it can be used as a bounding box regression loss. By incorporating it into the state-of-the art object detection algorithms, we consistently improved their performance on popular object detection benchmarks such as PASCAL VOC
and MS COCO using both the commonly used performance
measures and also our new accuracy measure, i.e. GIoU
based average precision. Since the optimal loss for a metric
is the metric itself, our GIoU loss can be used as the optimal bounding box regression loss in all applications which
require 2D bounding box regression.
In the future, we plan to investigate the feasibility of deriving an analytic solution for GIoU in the case of two rotating rectangular cuboids. This extension and incorporating it as a loss could have great potential to improve the
performance of 3D object detection frameworks.