Short-term Load Forecasting with
Deep Residual Networks
Kunjin Chen, Kunlong Chen, Qin Wang, Ziyu He, Jun Hu, Member, IEEE, and Jinliang He, Fellow, IEEE
Abstract—We present in this paper a model for forecasting
short-term electric load based on deep residual networks. The
proposed model is able to integrate domain knowledge and
researchers’ understanding of the task by virtue of different
neural network building blocks. Speciﬁcally, a modiﬁed deep
residual network is formulated to improve the forecast results.
Further, a two-stage ensemble strategy is used to enhance the
generalization capability of the proposed model. We also apply
the proposed model to probabilistic load forecasting using Monte
Carlo dropout. Three public datasets are used to prove the
effectiveness of the proposed model. Multiple test cases and
comparison with existing models show that the proposed model
is able to provide accurate load forecasting results and has high
generalization capability.
Index Terms—Short-term load forecasting, deep learning, deep
residual network, probabilistic load forecasting.
I. INTRODUCTION
HE FORECASTING of power demand is of crucial
importance for the development of modern power systems. The stable and efﬁcient management, scheduling and
dispatch in power systems rely heavily on precise forecasting
of future loads on various time horizons. In particular, shortterm load forecasting (STLF) focuses on the forecasting of
loads from several minutes up to one week into the future
 . A reliable STLF helps utilities and energy providers
deal with the challenges posed by the higher penetration of
renewable energies and the development of electricity markets
with increasingly complex pricing strategies in future smart
Various STLF methods have been proposed by researchers
over the years. Some of the models used for STLF include
linear or nonparametric regression , , support vector
regression (SVR) , , autoregressive models , fuzzylogic approach , etc. Reviews and evaluations of existing
methods can be found in – . Building STLF systems
with artiﬁcial neural networks (ANN) has long been one of the
main-stream solutions to this task. As early as 2001, a review
paper by Hippert et al. surveyed and examined a collection of
papers that had been published between 1991 and 1999, and
arrived at the conclusions that most of the proposed models
K. J. Chen, J. Hu, and J. L. He are with the State Key Lab of Power
Systems, Department of Electrical Engineering, Tsinghua University, Beijing
100084, P. R. of China.
K. L. Chen is with the Department of Electrical Engineering, Beijing
Jiaotong University, Beijing 100044, P. R. of China.
Q. Wang is with the Department of Information Technology and Electrical
Engineering, ETH Z¨urich, 8092 Z¨urich, Switzerland.
Z. He is with the Department of Industrial and Systems Engineering,
University of Southern California, Los Angeles, CA 90007, USA.
(Corresponding author email: ).
were over-parameterized and the results they had to offer were
not convincing enough . In addition to the fact that the size
of neural networks would grow rapidly with the increase in
the numbers of input variables, hidden nodes or hidden layers,
other criticisms mainly focus on the “overﬁtting” issue of
neural networks . Nevertheless, different types and variants
of neural networks have been proposed and applied to STLF,
such as radial basis function (RBF) neural networks ,
wavelet neural networks , , extreme learning machines
(ELM) , to name a few.
Recent developments in neural networks, especially deep
neural networks, have had great impacts in the ﬁelds including
computer vision, natural language processing, and speech
recognition . Instead of sticking with ﬁxed shallow structures of neural networks with hand-designed features as inputs,
researchers are now able to integrate their understandings of
different tasks into the network structures. Different building
blocks including convolutional neural networks (CNN) ,
and long short-term memory (LSTM) have allowed deep
neural networks to be highly ﬂexible and effective. Various
techniques have also been proposed so that neural networks
with many layers can be trained effectively without the vanishing of gradients or severe overﬁtting. Applying deep neural
networks to short-term load forecasting is a relatively new
topic. Researchers have been using restricted Boltzmann machines (RBM) and feed-forward neural networks with multiple
layers in forecasting of demand side loads and natural gas
loads , . However, these models are increasingly hard
to train as the number of layers increases, thus the number of
hidden layers are often considerably small (e.g., 2 to 5 layers),
which limits the performance of the models.
In this work, we aim at extending existing structures of
ANN for STLF by adopting state-of-the-art deep neural network structures and implementation techniques. Instead of
stacking multiple hidden layers between the input and the
output, we learn from the residual network structure proposed
in and propose a novel end-to-end neural network model
capable of forecasting loads of next 24 hours. An ensemble strategy to combine multiple individual networks is also
proposed. Further, we extend the model to probabilistic load
forecasting by adopting Monte Carlo (MC) dropout (For a
comprehensive review of probabilistic electric load forecasting, the reader is referred to , ). The contributions of
this work are three-folds. First, a fully end-to-end model based
on deep residual networks for STLF is proposed. The proposed
model does not require external feature extraction or feature
selection algorithms, and only raw data of loads, temperature
and information that is readily available are used as inputs. The
 
results show that the forecasting performance can be greatly
enhanced by improving the structure of the neural networks
and adopting the ensemble strategy, and that the proposed
model has good generalization capability across datasets. To
the best of our knowledge, this is the ﬁrst work that uses
deep residual networks for the task of STLF. Second, the
building blocks of the proposed model can easily be adapted to
existing neural-network-based models to improve forecasting
accuracy (e.g., adding residual networks on top of 24-hour
forecasts). Third, a new formulation of probabilistic STLF for
an ensemble of neural networks is proposed.
The remainder of the paper is organized as follows. In
section II, we formulate the proposed model based on deep
residual networks. The ensemble strategy, the MC dropout
method, as well as the implementation details are also provided. In section III, the results of STLF by the proposed
model are presented. We also discuss the performance of the
proposed model and compare it with existing methods. Section
IV concludes this paper and proposes future works. The source
code for the STLF model proposed in this paper is available
at 
II. SHORT-TERM LOAD FORECASTING BASED ON DEEP
RESIDUAL NETWORKS
In this paper, we propose a day-ahead load forecasting
model based on deep residual networks. We ﬁrst formulate
the low-level basic structure where the inputs of the model are
processed by several fully connected layers to produce preliminary forecasts of 24 hours. The preliminary forecasts are then
passed through a deep residual network. After presenting the
structure of the deep residual network, some modiﬁcations are
made to further enhance its learning capability. An ensemble
strategy is designed to enhance the generalization capability
of the proposed model. The formulation of MC dropout for
probabilistic forecasting is also provided.
A. Model Input and the Basic Structure for Load Forecasting
of One Hour
We use the model with the basic structure to give preliminary forecasts of the 24 hours of the next day. Speciﬁcally,
the inputs used to forecast the load for the hth hour of the
next day, Lh, are listed in Table I. The values for loads
and temperatures are normalized by dividing the maximum
value of the training dataset. The selected inputs allow us to
capture both short-term closeness and long-term trends in the
load and temperature time series . More speciﬁcally, we
expect that Lmonth
and T week
can help the
model identify long-term trends in the time series (the days
of the same day-of-week index as the next day are selected as
they are more likely to have similar load characteristics ),
while Lday
are able to provide short-term closeness
and characteristics. The input Lhour
feeds the loads of the
most recent 24 hours to the model. Forecast loads are used
to replace the values in Lhour
that are not available at the
time of forecasting, which also helps associate the forecasts
of the whole day. Note that the sizes of the above-mentioned
inputs can be adjusted ﬂexibly. In addition, one-hot codes
for season1, weekday/weekend distinction, and holiday/nonholiday2 distinction are added to help the model capture the
periodic and unordinary temporal characteristics of the load
time series.
The structure of the neural network model for load forecasting of one hour is illustrated in Fig. 1. For Lmonth
, and T day
, we ﬁrst concatenate
the pairs [Lmonth
], and [Lday
and connect them with three separate fully-connected layers.
The three fully-connected layers are then concatenated and
connected with another fully-connected layer denoted as FC2.
, we forward pass it through two fully-connected
layers, the second layer of which is denoted as FC1. S and W
are concatenated to produce two fully-connected layers, one
used as part of the input of FC1, the other used as part of the
input of FC2. H is also connected to FC2. In order to produce
the output Lh, we concatenate FC1, FC2, and Th, and connect
them with a fully-connected layer. This layer is then connected
to Lh with another fully connected layer. All fully-connected
layers but the output layer use scaled exponential linear units
(SELU) as the activation function.
The adoption of the ReLU has greatly improved the performance of deep neural networks . Speciﬁcally, ReLU has
ReLU(yi) = max(0, yi)
where yi is the linear activation of the i-th node of a layer.
A problem with ReLU is that if a unit can not be activated
by any input in the dataset, the gradient-based optimization
algorithm is unable to update the weights of the unit, so that
1In this paper, the ranges for Spring, Summer, Autumn, and Winter are
March 8th to June 7th, June 8th to September 7th, September 8th to December
7th, December 8th to March 7th, respectively.
2In this paper, we consider three major public holidays, namely, Christmas
Eve, Thanksgiving Day, and Independence Day as the activities involved in
these holidays have great impacts on the loads. The rest of the holidays are
considered as non-holidays for simplicity.
INPUTS FOR THE LOAD FORECAST OF THE hTH HOUR OF THE NEXT DAY
Description of the Inputs
Loads of the hth hour of the days that are 4, 8, 12,
16, 20, and 24 weeks prior to the next day
Loads of the hth hour of the days that are 1, 2, 3,
and 4 weeks prior to the next day
Loads of the hth hour of every day of the week
prior to the next day
Loads of the most recent 24 hours prior to the hth
hour of the next day
Temperature values of the same hours as Lmonth
Temperature values of the same hours as Lweek
Temperature values of the same hours as Lday
The actual temperature of the hth hour of the next
One-hot code for season
One-hot code for weekday/weekend distinction
One-hot code for holiday/non-holiday distinction
Fig. 1. The structure of the neural network model for load forecasting of one
the unit will never be activated again. In addition, the network
will become very hard to train if a large proportion of the
hidden units produce constant 0 gradients . This problem
can be solved by adding a slope to the negative half axis of
ReLU. With a simple modiﬁcation to the formulation of ReLU
on the negative half axis, we get PReLU . The activations
of a layer with PReLU as the activation function is obtained
PReLU(yi) =
where βi is the coefﬁcient controlling the slope of βiyi when
yi ≤0. A further modiﬁcation to ReLU that induces selfnormalizing properties is provided in , where the activation
function of SELU is given by
SELU(yi) = λ
where λ and α are two tunable parameters. It is shown in
 that if we have λ ≈1.0577 and α ≈1.6733, the
outputs of the layers in a fully-connected neural network
would approach the standard normal distribution when the
inputs follow the standard normal distribution. This helps the
networks to prevent the problems of vanishing and exploding
gradients.
As previously mentioned, in order to associate the forecasts
of the 24 hours of the next day, the corresponding values
within Lhour
are replaced by {L1, · · · , Lh−1} for h > 1.
Instead of simply copying the values, we maintain the neural
network connections underneath them. Thus, the gradients of
subsequent hours can be propagated backward through time.
This would help the model adjust the forecast value of each
hour given the inputs and forecast values of the rest of the
We then concatenate {L1, · · · , L24} as L, which directly
becomes the output of the model with the basic structure. Next,
we proceed to formulate the deep residual network and add
it on top of L. The output of the deep residual network is
denoted as ˆy and has the same size of L.
The building block of the deep residual network. SELU is used as
the activation function between two linear layers.
B. The Deep Residual Network Structure for Day-ahead Load
Forecasting
In , an innovative way of constructing deep neural
networks for image recognition is proposed. In this paper, the
residual block in Fig. 2 is used to build the deep neural network
structure. In the residual block, instead of learning a mapping
from x to H(x), a mapping from x to F(x, Θ) is learned,
where Θ is a set of weights (and biases) associated with the
residual block. Thus, the overall representation of the residual
block becomes
H(x) = F(x, Θ) + x
A deep residual network can be easily constructed by stacking
a number of residual blocks. We illustrate in Fig. 3 the
structure of the deep residual network (ResNet) used for the
proposed model. More speciﬁcally, if K residual blocks are
stacked, the forward propagation of such a structure can be
represented by
F(xi−1, Θi−1)
where x0 is the input of the residual network, xK the output of
the residual network, and Θi = {θi,l|1≤l≤L} the set of weights
associated with the ith residual block, L being the number of
layers within the block. The back propagation of the overall
loss of the neural network to x0 can then be calculated as
F(xi−1, Θi−1))
where L is the overall loss of the neural network. The “1”
in the equation indicates that the gradients at the output of
the network can be directly back-propagated to the input of
the network, so that the vanishing of gradients (which is often
observed when the gradients at the output have to go through
many layers before reaching the input) in the network is much
less likely to occur . As a matter of fact, this equation can
also be applied to any pair (xi, xj) (0 ≤i < j ≤K), where
xi and xj are the output of the ith residual block (or the
input of the network when i = 0), and the jth residual block,
respectively.
Fig. 3. An illustration of the deep residual network (ResNet) structure. More
shortcut connections are made in addition to the ones within the blocks. In this
ﬁgure, every three residual blocks has one shortcut connection and another
shortcut connection is made from the input to the output. Each round node
averages all of its inputs.
In addition to the stacked residual blocks, extra shortcut
connections can be added into the deep residual network,
as is introduced in . Concretely, two levels of extra
shortcut connections are added to the network. The lower level
shortcut connection bypasses several adjacent residual blocks,
while the higher level shortcut connection is made between
the input and output. If more than one shortcut connection
reaches a residual block or the output of the network, the
values from the connections are averaged. Note that after
adding the extra shortcut connections, the formulations of the
forward-propagation of responses and the back-propagation of
gradients are slightly different, but the characteristics of the
network that we care about remain unchanged.
We can further improve the learning ability of ResNet by
modifying its structure. Inspired by the convolutional network
structures proposed in , , we propose the modiﬁed
deep residual network (ResNetPlus), whose structure is shown
in Fig. 4. First, we add a series of side residual blocks
to the model (the residual blocks on the right). Unlike the
implementation in , the input of the side residual blocks
is the output of the ﬁrst residual block on the main path (except
for the ﬁrst side residual block, whose input is the input of the
network). The output of each main residual block is averaged
with the output of the side residual block in the same layer
(indicated by the blue dots on the right). Similar to the densely
connected network in , the outputs of those blue dots are
connected to all main residual blocks in subsequent layers.
Starting from the second layer, the input of each main residual
block is obtained by averaging all connections from the blue
dots on the right together with the connection from the input of
Fig. 4. An illustration of the modiﬁed deep residual network (ResNetPlus)
structure. The blue dots in the ﬁgure average their inputs, and the outputs are
connected to subsequent residual blocks.
A demonstration of the ensemble strategy used in this paper. The
snapshot models are taken where the slope of validation loss is considerably
the network (indicated by the blue dots on the main path). It is
expected that the additional side residual blocks and the dense
shortcut connections can improve the representation capability
and the efﬁciency of error back-propagation of the network.
Later in this paper, we will compare the performance of the
basic structure, the basic structure connected with ResNet, and
the basic structure connected with ResNetPlus.
C. The Ensemble Strategy of Multiple Models
It is widely acknowledged in the ﬁeld of machine learning
that an ensemble of multiple models has higher generalization
capability than individual models. In , analysis of
neural network ensembles for STLF of ofﬁce buildings is
provided by the authors. Results show that an ensemble of
neural networks reduces the variance of performances. A
demonstration of the ensemble strategy used in this paper
is shown in Fig. 5. More speciﬁcally, the ensemble strategy
consists of two stages.
The ﬁrst stage of the strategy takes several snapshots during
the training of a single model. In , the authors show that
setting cyclic learning rate schedules for stochastic gradient
descent (SGD) optimizer greatly improves the performance
of existing deep neural network models. In this paper, as
we use Adam (abbreviated from adaptive moment estimation
 ) as the optimizer, the learning rates for each iteration
are decided adaptively. Thus, no learning rate schedules are
set by ourselves. This scheme is similar to the NoCycle
snapshot ensemble method discussed in , that is, we take
several snapshots of the same model during its training process
(e.g., the 4 snapshots along the training process of the model
with initial parameters W (1)
). As is indicated in Fig. 5, the
snapshots are taken after an appropriate number of epochs, so
that the loss of each snapshot is of similar level.
We can further ensemble a number of models that are
trained independently. This is done by simply re-initializing
the parameters of the model (e.g., W(1)
are 5 sets of
initial parameters sampled from the same distribution used for
initializing the model), which is one of the standard practices
of obtaining good ensemble models . The numbers of
snapshots and re-trained models are hyper-parameters, which
means they can be tuned using the validation dataset. After
we obtain the all the snapshot models, we average the outputs
of the models and produce the ﬁnal forecast.
D. Probabilistic Forecasting Based on Monte Carlo Dropout
If we look at the deep residual network (either ResNet or
ResNetPlus) as an ensemble of relatively shallow networks, the
increased width and number of connections in the network can
provide more shallow networks to form the ensemble model
 . It is expected that the relatively shallow networks themselves can partially capture the nature of the load forecasting
task, and multiple shallow networks with the same input can
give varied outputs. This indicates that the proposed model
have the potential to be used for probabilistic load forecasting.
Probabilistic forecasting of time series can be fulﬁlled
by capturing the uncertainty within the models . From
a Bayesian probability theory point of view, the predictive
probability of a Bayesian neural network can be obtained with
p(y∗|x∗) =
p(y∗|f W(x∗))p(W|X, Y ) dW
where X and Y are the observations we use to train f W(·), a
neural network with parameters W. The intractable posterior
distribution p(W|X, Y ) is often approximated by various
inference methods . In this paper, we use MC dropout 
to obtain the probabilistic forecasting uncertainty, which is
easy and computationally efﬁcient to implement. Speciﬁcally,
dropout refers to the technique of randomly dropping out
hidden units in a neural network during the training of the
network , and a parameter p is used to control the
probability that any hidden neuron is dropped out. If we apply
dropout stochastically for M times at test time and collect the
outputs of the network, we can approximate the ﬁrst term of
the forecasting uncertainty, which is
Var(y∗|x∗) = Var [E(y∗|W, x∗)] + E [Var(y∗|W, x∗)]
= Var(f W(x∗)) + σ2
(m) −¯ˆy∗)2 + σ2
(m) is the mth output we obtain, ¯ˆy∗is the mean of all
M outputs, and E denotes the expectation operator. The second
term, σ2, measures the inherent noise for the data generating
process. According to , σ2 can be estimated using an independent validation dataset. We denote the validation dataset
with X′ = {x′
1, · · · , x′
V }, Y ′ = {y′
1, · · · , y′
V }, and estimate
W(·) is the model trained on the training dataset and β
is a parameter to be estimated also using the validation dataset.
We need to extend the above estimation procedure to an
ensemble of models. Concretely, for an ensemble of K neural
network models of the same structure, we estimate the ﬁrst
term of (8) with a single model of the same structure trained
with dropout. The parameter β in (9) is also estimated by the
model. More speciﬁcally, we ﬁnd the β that provides the best
90% and 95% interval forecasts on the validation dataset. σ2
is estimated by replacing f ˆ
W(·) in (9) by the ensemble model,
f ∗(·). Note that the estimation of σ2 is speciﬁc to each hour
of the day.
After obtaining the forecasting uncertainty for each forecast,
we can calculate the α-level interval with the point forecast,
f ∗(x∗), and its corresponding quantiles to obtain probabilistic
forecasting results.
E. Model Design and Implementation Details
The proposed model consists of the neural network structure
for load forecasting of one hour (referred to as the basic
structure), the deep residual network (referred to as ResNet)
for improving the forecasts of 24 hours, and the modiﬁed deep
residual network (referred to as ResNetPlus). The conﬁgurations of the models are elaborated as follows.
1) The model with the basic structure: The graphic representation of the model with the basic structure is shown
in Fig. 1. Each fully-connected layer for [Lday
], [Lmonth
], and Lhour
has 10 hidden
nodes, while the fully-connected layers for [S, W] have 5
hidden nodes. FC1, FC2, and the fully-connected layer before
Lh have 10 hidden nodes. All but the output layer use SELU
as the activation function.
2) The deep residual network (ResNet): ResNet is added
to the neural network with the basic structure. Each residual
block has a hidden layer with 20 hidden nodes and SELU as
the activation function. The size of the outputs of the blocks
is 24, which is the same as that of the inputs. A total of 30
residual blocks are stacked, forming a 60-layer deep residual
network. The second level of shortcut connections is made
every 5 residual blocks. The shortcut path of the highest level
connects the input and the output of the network.
3) The modiﬁed deep residual network (ResNetPlus): The
structure of ResNetPlus follows the structure shown in Fig. 4.
The hyper-parameters inside the residual blocks are the same
as ResNet.
In order to properly train the models, the loss of the model,
L, is formulated as the sum of two terms:
L = LE + LR
where LE measures the error of the forecasts, and LR is
an out-of-range penalty term used to accelerate the training
process. Speciﬁcally, LE is deﬁned as
ˆy(i,h) −y(i,h)
where ˆy(i,h) and y(i,h) are the output of the model and
the actual normalized load for the hth hour of the ith day,
respectively, N the number of data samples, and H the number
of hourly loads within a day (i.e., H = 24 in this case). This
error measure, widely known as the mean absolute percentage
error (MAPE), is also used to evaluate the forecast results of
the models. The second term, LR, is calculated as
max(0, max
ˆy(i,h) −max
+ max(0, min
h y(i,h) −min
This term penalizes the model when the forecast daily load
curves are out of the range of the actual load curves, thus
accelerating the beginning stage of the training process. When
a model is able to produce forecasts with relatively high accuracy, this term serves to emphasize the cost for overestimating
the peaks and the valleys of the load curves.
All the models are trained using the Adam optimizer with
default parameters as suggested in . The models are
implemented using Keras 2.0.2 with Tensorflow 1.0.1 as
backend in the Python 3.5 environment , . A laptop
with Intel R⃝CoreTM i7-5500U CPUs is used to train the
models. Training the ResNetPlus model with data of three
years for 700 epochs takes approximately 1.5 hours. When 5
individual models are trained, the total training time is less
than 8 hours.
III. RESULTS AND DISCUSSION
In this section, we use the North-American Utility dataset3
and the ISO-NE dataset4 to verify the effectiveness of the
proposed model. As we use actual temperature as the input,
we further modify the temperature values to evaluate the
performance of the proposed model. Results of probabilistic
forecasting on the North-American Utility dataset and the
GEFCom2014 dataset are also provided.
3Available at 
4Available
 
Test losses of the neural network with the basic structure (Basic),
the model with the deep residual network (Basic + ResNet), and the model
with the modiﬁed deep residual network (Basic + ResNetPlus). Each model
is trained 5 times with shufﬂed weight initialization. The solid lines are the
average losses, and the standard deviation above and below the average losses
are indicated by coloured areas.
A. Performance of the Proposed model on the North-American
Utility Dataset
The ﬁrst test case uses the North-American Utility dataset.
This dataset contains load and temperature data at one-hour
resolution for a north-American utility. The dataset covers the
time range between January 1st, 1985 and October 12th, 1992.
The data of the two-year period prior to October 12th, 1992
is used as the test set, and the data prior to the test set is
used for training the model. More speciﬁcally, two starting
dates, namely, January 1st, 1986, and January 1st, 1988, are
used for the training sets. As the latter starting date is used
in experiments in the literature, we tune the hyper-parameters
using the last 10% of the training set with this starting date5.
The model trained with the training set containing 2 years of
extra data has the same hyper-parameters.
Before reporting the performance of the ensemble model
obtained by combining multiple individual models, we ﬁrst
look at the performance of the three models mentioned in
section II. The test losses of the three models are shown in
Fig. 6 . In order to yield credible results, we
train each model 5 times and average the losses to obtain
the solid lines in the ﬁgure. The coloured areas indicate the
range between one standard deviation above and below the
average losses. It is observed in the ﬁgure that ResNet is able
to improve the performance of the model, and further reduction
in loss can be achieved when ResNetPlus is implemented. Note
that the results to be reported in this paper are all obtained with
the ensemble model. For simplicity, the ensemble model with
the basic structure connected with ResNetPlus is referred to
as “the ResNetPlus model” hereinafter.
We compare the results of the proposed ResNetPlus model
with existing models proposed in , – , as is shown in
5For this dataset, 4 snapshots are taken between 1200 to 1350 epochs for
8 individual models. For the basic structure, all layers except the input and
the output layers are shared for the 24 hours (sharing weights for 24 hours is
only implemented in this test case). The ResNetPlus model has 30 layers on
the main path.
COMPARISON OF THE PROPOSED RESNETPLUS MODEL WITH EXISTING
MODELS ON THE NORTH-AMERICAN UTILITY DATASET WITH RESPECT
TO MAPE (%)
temperature
temperature
WT-NN 
WT-NN 
SSA-SVR 
WT-ELM-MABC 
CLPSO-MA-SVR 
WT-ELM-LM 
Proposed model
Proposed model (2 extra years)
Table II. In order to estimate the performance of the models
when forecast temperature is used, we also add a Gaussian
noise with mean 0 oF, and standard deviation 1 oF to the
temperature input and report the MAPE in this case. It is
seen in the table that the proposed model outperforms existing
models which highly depend on external feature extraction,
feature selection, or hyper-parameter optimization techniques.
The proposed model also has a lower increase of MAPE when
modiﬁed temperature is applied. In addition, the test loss can
be further reduced when more data is added to the training
B. Performance of the Proposed Model on the ISO-NE Dataset
The second task of the paper is to examine the generalization capability of the proposed model. To this end,
we use the majority of the hyper-parameters of ResNetPlus
tuned with the North-American Utility dataset to train load
forecasting models for the ISO-NE dataset .
Here, the ResNetPlus structure has 10 layers on the main path.
The ﬁrst test case is to predict the daily loads of the year
2006 in the ISO-NE dataset. For the proposed ResNetPlus
model, the training period is from June 2003 to December
20056 (we reduce the size of Lmonth
and T month
that more training samples can be used, and the rest of the
hyper-parameters are unchanged). In comparison, the similar
day-based wavelet neural network (SIWNN) model in 
is trained with data from 2003 to 2005, while the models
proposed in and use data from March 2003 to
December 2005 (both models use past loads up to 200 hours
prior to the hour to be predicted). The results of MAPEs with
respect to each month are listed in Table III. The MAPEs
for the 12 months in 2006 are not explicitly reported in .
It is seen in the table that the proposed ResNetPlus model
has the lowest overall MAPE for the year 2006. For some
months, however, the WT-ELM-MABC model proposed in
 produces better results. Nevertheless, as most of the
hyper-parameters are not tuned on the ISO-NE dataset, we
6The training dataset is used to determine how the snapshots are taken
for the ensemble model for the ISO-NE dataset. For each implementation, 5
individual models are trained, and the snapshots are taken at 600, 650, and
700 epochs.
MAPES (%) OF THE PROPOSED RESNETPLUS MODEL FOR THE ISO-NE
DATASET IN 2006 AND A COMPARISON WITH EXISTING MODELS
COMPARISON OF THE PROPOSED RESNETPLUS MODEL WITH EXISTING
MODELS ON THE ISO-NE DATASET FOR 2010 AND 2011
RBFN-ErrCorr original 
RBFN-ErrCorr modiﬁed 
WT-ELM-PLSR 
Proposed model
can conclude that the proposed model has good generalization
capability across different datasets.
We further test the generalization capability of the proposed
ResNetPlus model on data of the years 2010 and 2011. The
same model for the year 2006 is used for this test case, and
historical data from 2004 to 2009 is used to train the model. In
Table IV, we report the performance of the proposed model
and compare it with models mentioned in , , .
Results show that the proposed ResNetPlus model outperforms
existing models with respect to the overall MAPE for the two
years, and an improvement of 8.9% is achieved for the year
2011. Note that all the existing models are speciﬁcally tuned
on the ISO-NE dataset for the period from 2004 to 2009,
while the design of the proposed ResNetPlus model is directly
implemented without any tuning.
As we use actual temperature values for the input of
the proposed model (except for the ”modiﬁed temperature”
case of North-American Utility dataset), the results we have
obtained previously provide us with an estimated upper bound
of the performance of the model. Thus, we need to further
analyze how the proposed model would perform when forecast
temperature data is used, and whether the ensemble model is
more robust to noise in forecast weather. We follow the way of
modifying temperature values introduced in , and consider
three cases of temperature modiﬁcation:
• Case 1: add Gaussian noise with mean 0 oF, and standard
deviation 1 oF to the original temperature values before
normalization.
• Case 2: add Gaussian noise with mean 0 oF, and change
the standard deviation of case 1 to 2 oF.
Fig. 7. The comparison of the proposed model with the ensemble strategy
and the proposed model without ensemble when different cases of modiﬁed
temperature are applied. The model without ensemble is a single ResNetPlus
model trained with 700 epochs.
EMPIRICAL COVERAGES OF THE PROPOSED MODEL WITH MC DROPOUT
Expected Coverage
Empirical Coverage
• Case 3: add Gaussian noise with mean 0 oF, and change
the standard deviation of case 1 to 3 oF.
For all three cases, we repeat the trials 5 times and calculate
the means and standard deviations of increased MAPE compared with the case where actual temperature data is used.
The results of increased test MAPEs for the year 2006
with modiﬁed temperature values are shown in Fig. 7. We
compare the performance of the proposed ResNetPlus model
(which is an ensemble of 15 single snapshot models) with a
single snapshot model trained with 700 epochs. As can be
seen in the ﬁgure, the ensemble strategy greatly reduces the
increase of MAPE, especially for case 1, where the increase
of MAPE is 0.0168%. As the reported smallest increase of
MAPE for case 1 in is 0.04%, it is reasonable to conclude
that the proposed model is robust against the uncertainty of
temperature for case 1 (as we use a different dataset here, the
results are not directly comparable). Is is also observed that
the ensemble strategy is able to reduce the standard deviation
of multiple trials. This also indicates the higher generalization
capability of the proposed model with the ensemble strategy.
C. Probabilistic Forecasting for the Ensemble Model
We ﬁrst use the North-American Utility dataset to demonstrate the probabilistic STLF by MC dropout. The last year
of the dataset is used as the test set and the previous year
is used for validation. Dropout with p = 0.1 is added to the
previously implemented ensemble model7 except for the input
7the model implemented here uses ResNet instead of ResNetPlus, and the
information of season, weekday/weekend distinction, and holiday/non-holiday
distinction is not used. In addition, the activation function used for the residual
blocks is ReLU.
COMPARISON OF PROBABILISTIC FORECASTING PERFORMANCE
MEASURES FOR THE YEAR 2011 IN THE GEFCOM2014 DATASET
Lasso 
Proposed model
layer and the output layer (dropout with p ranging from 0.05
and 0.2 produce similar results, similar to the results reported
in ). The ﬁrst term in (8) and is estimated by a single
model trained with 500 epochs (with M = 100 for (8) and
p = 0.1), and the estimated value of β is 0.79.
The empirical coverages produced by the proposed model
with respect to different z-scores are listed in Table V, and an
illustration of the 95% prediction intervals for two weeks in
1992 is provided in Fig. 8. The results show that the proposed
model with MC dropout is able to give satisfactory empirical
coverages for different intervals.
In order to quantify the performance of the probabilistic
STLF by MC dropout, we adopt the pinball loss and Winkler
score mentioned in and use them to assess the proposed
method in terms of coverage rate and interval width. Speciﬁcally, the pinball loss is averaged over all quantiles and hours
in the prediction range, and the Winkler scores are averaged
over all the hours of the year in the test set. We implement the
ResNetPlus model8 on the GEFCom2014 dataset and compare
the results with those reported in , . Following the
setting in , the load and temperature data from 2006 to
2009 is used to train the proposed model, the data of the year
2010 is used for validation, and the test results are obtained
using data of the year 2011. The temperature values used
for the input of the model are calculated as the mean of the
temperature values of all 25 weather stations in the dataset.
In Table VI, we present the values of pinball loss and
Winkler scores for the proposed model and the models in ,
 for the year of 2011 in the GEFCom2014 dataset. The
Lasso method in serves as a benchmark for methods that
build regression models on the input data, and the quantile
regression averaging (QRA) method in builds quantile
regression models on sister point forecasts (the row of Ind
stands for the performance of a single model). It can be seen
in Table VI that the proposed ResNetPlus model is able to
provide improved probabilistic forecasting results compared
with existing methods in terms of the pinball loss and two
Winkler scores. As we obtain the probabilistic forecasting
results by sampling the trained neural networks with MC
dropout, we can conclude that the proposed model is good
at capturing the uncertainty of the task of STLF.
8Five individual models are trained with a dropout rate of 0.1 and 6
snapshots are taken from 100 epochs to 350 epochs. M is set to 100 for
MC dropout and the ﬁrst term in (7) is estimated by a single model trained
with 100 epochs. The estimated value of β is 0.77.
Fig. 8. Actual load and 95% prediction intervals for a winter week (left) and a summer week (right) of 1992 for the North-American Utility dataset. The
two weeks start with February 3rd, 1992, and July 6th, 1992, respectively.
IV. CONCLUSION AND FUTURE WORK
We have proposed an STLF model based on deep residual
networks in this paper. The low-level neural network with
the basic structure, the ResNetPlus structure, and the twostage ensemble strategy enable the proposed model to have
high accuracy as well as satisfactory generalization capability.
Two widely acknowledged public datasets are used to verify
the effectiveness of the proposed model with various test
cases. Comparisons with existing models have shown that
the proposed model is superior in both forecasting accuracy
and robustness to temperature variation. We have also shown
that the proposed model can be directly used for probabilistic
forecasting when MC dropout is adopted.
A number of paths for further work are attractive. As we
have only scratched the surface of state-of-the-art of deep
neural networks, we may apply more building blocks of deep
neural networks (e.g., CNN or LSTM) into the model to enhance its performance. In addition, we will further investigate
the implementation of deep neural works for probabilistic
STLF and make further comparisons with existing methods.