DeepGauge: Multi-Granularity Testing Criteria for Deep
Learning Systems
Lei Ma1,3∗, Felix Juefei-Xu2, Fuyuan Zhang3, Jiyuan Sun4, Minhui Xue3, Bo Li5
Chunyang Chen6, Ting Su3, Li Li6, Yang Liu3, Jianjun Zhao4, and Yadong Wang1
1Harbin Institute of Technology, China 2Carnegie Mellon University, USA 3Nanyang Technological University, Singapore
4Kyushu University, Japan 5University of Illinois at Urbana–Champaign, USA 6Monash University, Australia
Deep learning (DL) defines a new data-driven programming paradigm that constructs the internal system logic of a crafted neuron
network through a set of training data. We have seen wide adoption of DL in many safety-critical scenarios. However, a plethora
of studies have shown that the state-of-the-art DL systems suffer
from various vulnerabilities which can lead to severe consequences
when applied to real-world applications. Currently, the testing adequacy of a DL system is usually measured by the accuracy of
test data. Considering the limitation of accessible high quality test
data, good accuracy performance on test data can hardly provide
confidence to the testing adequacy and generality of DL systems.
Unlike traditional software systems that have clear and controllable logic and functionality, the lack of interpretability in a DL
system makes system analysis and defect detection difficult, which
could potentially hinder its real-world deployment. In this paper,
we propose DeepGauge, a set of multi-granularity testing criteria
for DL systems, which aims at rendering a multi-faceted portrayal
of the testbed. The in-depth evaluation of our proposed testing
criteria is demonstrated on two well-known datasets, five DL systems, and with four state-of-the-art adversarial attack techniques
against DL. The potential usefulness of DeepGauge sheds light on
the construction of more generic and robust DL systems.
CCS CONCEPTS
• Software and its engineering →Software testing and debugging; • Theory of computation →Adversarial learning;
Deep learning, Software testing, Deep neural networks, Testing
ACM Reference Format:
Lei Ma, Felix Juefei-Xu, Fuyuan Zhang, Jiyuan Sun, Minhui Xue, Bo Li, Chunyang Chen, Ting Su, Li Li, Yang Liu, Jianjun Zhao, and Yadong Wang. 2018.
DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems.
∗Lei Ma is the corresponding author. Email: .
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from .
ASE ’18, September 3–7, 2018, Montpellier, France
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5937-5/18/09...$15.00
 
In Proceedings of the 2018 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE ’18), September 3–7, 2018, Montpellier,
France. ACM, New York, NY, USA, 12 pages. 
INTRODUCTION
Deep learning (DL) systems have gained great popularity in various
applications, e.g., speech processing , medical diagnostics ,
image processing , and robotics . A deep neural network
(DNN), as a type of deep learning systems, is the key driving force
behind recent success. However, DNN-based software systems,
such as autonomous driving, often exhibit erroneous behaviors
that lead to fatal consequences. For example, several accidents 
have been reported due to autonomous vehicle’s failure to handle
unexpected/corner-case driving conditions.
One of the trending research areas is to investigate the cause of
vulnerability in DL systems by means of generating adversarial test
examples for image- and video-based DL systems. Such carefully
learned pixel-level perturbations, imperceptible to human eyes,
can cause the DL-based classification system to output completely
wrong decisions with high confidence . Ever since the inception
of adversarial attacks on the DL systems, more and more research
has been dedicated to building up strong attackers . As
a consequence, better defense mechanisms in DL systems against
adversarial attacks are in dire need. Various techniques to nullify
adversarial attacks and to train a more robust DL system are emerging in recent studies . Together, research
in both realms forms a virtuous circle and blazes a trail for better
understanding of how to build more generic and robust DL systems.
However, what is still lacking is a systematic way of gauging the
testing adequacy of given DL systems. Current studies focus only
on pursuing high accuracy of DL systems as a testing criterion, for
which we show several caveats as follows. First, measuring the
software quality from DL output alone is superficial in the sense
that fundamental understanding of the DL internal neuron activities
and network behaviors is not touched upon. We agree that it could
be an indicator of DL system quality and generality, but it is far
from complete, and oftentimes unreliable. Second, a criterion solely
based on DL output will rely heavily on how representative the test
data are. Having achieved high-performance DL output does not
necessarily mean that the system is utmost generic, and achieving
low-performance does not indicate the opposite either. A DL model
can be immune to many known types of adversarial attacks, but may
fail from unseen attacks. This is because such a criterion based only
on DL outputs is far from being comprehensive, and it leaves high
risks for currently cocooned DL systems to be deployed in the realworld environment where newly evolved adversarial attacks are
 
ASE ’18, September 3–7, 2018, Montpellier, France
Ma, Xu, Zhang, Sun, Xue, Li, Chen, Su, Li, Liu, Zhao, and Wang
inescapable. Third, any DL system that passes systematic testing
should be able to withstand all types of adversarial attacks to some
extent. Such generality upon various attacks is of vital importance
for DL systems to be deployed. But apparently this is not the case,
unless we stick to a set of more comprehensive gauging criteria.
We understand that even the most comprehensive gauging criteria
would not be able to entirely eliminate risks from adversarial attacks.
Nevertheless, by enforcing a suitable set of testing criteria, we hope
that a DL system could be better tested to facilitate the construction
of a more generic and robust deep learning system.
Towards addressing the aforementioned limitations, a set of testing criteria is needed, as opposed to the sole criterion based on
DL decision output. In addition to being scalable, the proposed
criteria will have to monitor and gauge the neuron activities and
intrinsic network connectivity at various granularity levels, so that
a multi-faceted in-depth portrayal of the DL system and testing
quality measures become desirable.
In this work, we are probing this problem from a software engineering and software testing perspective. At a high level, erroneous
behaviors appeared in DNNs are analogous to logic bugs in traditional software. However, these two types of software are fundamentally different in their designs. Traditional software represents
its logic as control flows crafted by human knowledge, while a DNN
characterizes its behaviors by the weights of neuron edges and the
nonlinear activation functions (determined by the training data).
Therefore, detecting erroneous behaviors in DNNs is different from
detecting those in traditional software in nature, which necessitates
novel test generation approaches.
To achieve this goal, the very first step is to precisely define
a set of suitable coverage criteria, which can guide test design
and evaluate test quality. Despite a number of criteria existing for
traditional software, e.g., statement, branch, data-flow coverage,
they completely lose effect in testing DNNs. To the best of our
knowledge, the design of testing coverage criteria for DNNs is still at
the early stage . Without a comprehensive set of criteria, (1)
designing tests to cover different learned logics and rules of DNNs
is difficult to achieve. Consequently, erroneous behaviors may be
missed; (2) evaluating test quality is biased, and the confidence of
obtained testing results may be overestimated. In this paper, we
propose DeepGauge—a set of testing criteria based on multi-level
and -granularity coverage for testing DNNs and measure the testing
quality. Our contributions are summarized as follows:
• Our proposed criteria facilitate the understanding of DNNs as
well as the test data quality from different levels and angles.
In general, we find defects could potentially distribute on both
major function regions as well as the corner-case regions of
DNNs. Given a set of inputs, our criteria could measure to what
extent it covers the main functionality and the corner cases of the
neurons, where DL defects could incur. Our evaluation results
reveal that the existing test data of a given DL in general skew
more towards testing the major function region, with relatively
few cases covering the corner-case region.
• In line with existing test data of DNNs, we evaluate the usefulness of our coverage criteria as indicators to quantify defect
detection ability of test data on DNNs, through generating new
adversarial test data using 4 well-known adversarial data generation algorithms (i.e., Fast Gradient Sign Method (FGSM) ,
Basic Iterative Method (BIM) , Jacobian-based Saliency Map
Attack (JSMA) and Carlini/Wagner attack (CW) ). The
extensive evaluation shows that our criteria can effectively capture the difference between the original test data and adversarial
examples, where DNNs could and could not correctly recognize,
respectively, demonstrating that a higher coverage of our criteria
potentially indicates a higher chance to detect the DNN’s defects.
• The various criteria proposed behave differently on DNNs w.r.t.
network complexity and dataset under analysis. Altogether, these
criteria can potentially help us gain insights of testing DNNs. By
providing these insights, we hope that both software engineering
and machine learning communities can benefit from applying
new criteria for gauging the testing quality of the DNNs to gain
confidence towards constructing generic and robust DL systems.
To the best of our knowledge, this is among the earliest studies
to propose multi-granularity testing criteria for DL systems, which
are mirrored by the test coverage in traditional software testing.
PRELIMINARIES
In this section, we first introduce traditional software and then
deep learning systems of which the architectural features appearing
to be a step above current traditional software. We will see that
DL fundamentally changes the software development paradigm.
Precisely, we try to analogize that the programming language logic
execution to traditional software is what the connectivity strength
(weights) to a DNN. As we will see below, we are attempting to
connect these two counterparts as well as discussing the differences.
Coverage Criteria in Traditional Software
We regard traditional software as any program written in high-level
programming languages (e.g., C/C++, Java, Python). Specially, each
statement in traditional program performs some certain operation
that either transforms the outputs from the previous statement to
the next one or changes the program states (e.g., assign new values
to variables). Software defects (bugs) can be introduced by developers
due to incorrect implementation, which may cause unexpected
outputs or even fail-stop errors (e.g., program crashes).
To detect defects, software testing is one of the most widely
adopted software validation techniques in software industry— Given
a set of test data, it feeds these test data as inputs to program and
validates the correctness of the program’s run-time behavior by
comparing the actual outputs with expected ones (test oracles); and
measures test adequacy by using coverage criteria, the important,
practical measures to quantify the degree to which the software is
tested . The program with higher test coverage often suggests
that it has a lower chance of containing defects. Many software
testing standards require a software product to be thoroughly tested
with high test coverage before shipment, which is used as an indicator and confidence of the software quality. On some safety critical
systems, the requirement of some form of test coverage is even
100%. For example, ECSS-E-ST-40C standards demand 100%
statement coverage of the software under test for two critical levels.
DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems
ASE ’18, September 3–7, 2018, Montpellier, France
For traditional software, a number of coverage criteria have
already been defined at different levels, to analyze the software runtime behavior from different perspectives, i.e., code level (e.g., statement, branch, data-flow coverage and mutation testing )
or model-level (e.g., state and transition coverage ) to cater
for different testing methods and granularities. Some commonly
used test coverage criteria are listed as follows:
• Statement coverage measures whether each instruction has been
executed, and branch coverage focuses on whether each branch
of control structure (e.g., in if or switch-case statements) has
been covered, both of which are control-flow-based criteria.
• Data-flow coverage enforces the coverage of each variable
definition and its uses to detect data-flow anomalies.
• Model-based coverage criteria aim to cover more program
behaviors via abstracted behavior models. Other comprehensive
variants of test coverage could be referred to .
However, none of these criteria can be directly applied to test
DNNs due to its unique architecture, as explained below.
Deep Neural Network Architecture
In our paper, we regard a DL system as any software system that
includes one or more DNNs.1 Unlike traditional software, programmed with deterministic algorithms by developers, DNNs are
programmed by the training data, selected features, and network
structures (e.g., number of layers). Specially, a DNN consists of
multiple interconnected neurons organized on layers: the input
layer, the output layer, and one or multiple hidden layers. Each
neuron is a computing unit that computes its output by applying an
activation function to its input. In classic DNNs, each neuron is fullyconnected with all neurons on the next layer, and each edge has a
weight, which indicates the strength of the connections between
neurons. Overall, a DNN could be considered as a function that
transforms a given input to the output, and this function is decided
by the aggregated effects from its computation units (i.e., neurons),
each of which contributes to the whole computation procedure.
Figure 1(a) shows an example of a three-layer DNN.
To accomplish a task (e.g., prediction on the autonomous vehicles’ steering angle by monitored images), DNNs are trained and
programmed through a large set of labelled training data. However,
similar to traditional software, DNNs may also contain defects (e.g.,
give wrong steering angles) due to incorrect, incomplete training
data, or even the wrongly stipulated run-time programming (i.e.,
training) procedure. For example, human analyst may include erroneous and noisy data when collecting training data. In such a
case, a given input data might be wrongly handled (e.g., classified, predicted), causing losses and even severe tragedies, if the
flawed DNNs are deployed to safety-critical systems (e.g., the recent Tesla autonomous driving accident2). For the complex and
high-dimensional real-world inputs, it is almost impossible for human to ensure all possible, even corner-case data are included. To
systematically test and uncover hidden defects of DNNs, it is crucial
1In particular, a DL system may either be entirely composed of DNNs, or have DNNs as its core
with extra software encapsulation. In this paper, we mostly focus on DNNs since it is the core of
a DL system, and our methods could be extended to support general DL systems. Although the
training program of the current state-of-the-art DNNs are still written as traditional software, the
obtained DNN from the training program is fundamentally different in how the logic is encoded.
2 
(Input Layer)
(Hidden Layer)
(Output Layer)
All Behaviors
Main Behaviors
(k-multisection Coverage)
Corner-case
(Boundary Coverage)
Figure 1: (a) An example of a fully connected DNN. (b) Behaviors of DNNs and relations between defined coverage criteria
(the red points denote erroneous behaviors therein).
to define a set of suitable coverage criteria for evaluating the test
adequacy as well as gauging the internal covered states of DNNs
to gain confidence on the testing results of DNNs.
COVERAGE CRITERIA FOR TESTING DL
For traditional software testing, developers design and seek a set of
representative test data from the whole large input space, hoping
that the selected test data could detect the software defects under
limited computational resources.3
Testing coverage criteria is proposed to shatter and approximate
the software internal states. It partitions the input space and establishes the relation of an input subspace and an approximated
software internal state. In this way, compared with the test data
from a single input subspace, the same number of test data from
different input sub-spaces would have a higher chance to cover
more diverse software states, resulting in a higher possibility to
detect more diverse software defects. Over the past decades, a set of
well-designed coverage criteria (e.g., statement coverage, branch
coverage) have demonstrated their practical value and are widely
adopted in software industry to systematically guide the testing
process to unveil the software defects at different levels, e.g., (1) Unit
level: testing small snippets of functions. (2) Integration level: testing
multiple sub-modules or functions to check their interactions. (3)
System level: testing the software system as a whole.
The current state-of-the-practice DNN testing, however, is still at
its early stage and mainly relies on the prediction accuracy (similar
to black-box system level testing that only observes inputs and
its corresponding outputs), lacking systematic testing coverage
criteria for defect detection. Furthermore, traditional software and
DNNs have obvious differences, so existing coverage criteria for
traditional software could not be directly applied to DNNs.
In this section, we design a set of DNN testing coverage criteria
from multiple levels, aiming to gauge the testing adequacy of DNNs
and facilitate the detection of those erroneous behaviors from multiple portrayals. To be useful towards industry level applications,
we believe that the test criteria should be simple, scalable as well
general enough to be applied to a large range of DNNs without
confining on specific DNN structure or activation functions. Conceptually, similar to traditional software, the behaviors of DNNs
can be divided into two categories, i.e., major function behaviors
3The input space of a software could be so large that it is often impossible to enumerate and test all
the possibilities given limited computation resource.
ASE ’18, September 3–7, 2018, Montpellier, France
Ma, Xu, Zhang, Sun, Xue, Li, Chen, Su, Li, Liu, Zhao, and Wang
and corner-case behaviors, both of which may contain erroneous
behaviors (see Figure 1(b) and our evaluation results in Section 4).
We have taken these factors into consideration during the design
of coverage criteria.
Let N = {n1,n2, . . .} be a set of neurons of a DNN. Let T =
{x1, x2, . . .} be a set of test inputs. We use ϕ(x,n) to denote a function that returns the output of a neuron n ∈N under a given test
input x ∈T.4 Let the DNN have l layers and Li denote the set of
neurons on the i-th layer (1 ≤i ≤l).
Neuron-Level Coverage Criteria
At the neuron-level, we use the output values of neuron n determined from the training to characterize its behaviors. Since the
internal logic of a DNN is mostly programmed by training data,
intuitively, the functionality (i.e., neuron output) for each neuron of
a DNN should follow some statistical distribution that is largely determined by the training data. The output distribution of a neuron
obtained from training data analysis would allow to approximately
characterize the major function regions whose output values are
often triggered by input data with a similar statistical distribution to
the training data, and the corner cases whose output values rarely
occur. However, for a practical-sized DNN, obtaining an accurate
output distribution for each neuron would be computationally intensive. With the similar spirit while being scalable, we leverage
the neuron output value boundaries obtained from training data to
approximate the major function region and corner-case region.
Specially, for a neuron n, let highn and lown be its upper and
lower boundary output values, respectively, on the value range of
its activation function, where highn and lown are derived from the
training dataset analysis. We refer to [lown, highn] as the major
function region of a neuron n.
Definition 3.1. For a test input x ∈T, we say that a DNN is
located in its major function region given x iff ∀n ∈N : ϕ(x,n) ∈
[lown, highn].
To exhaustively cover the major function regions, we partition
[lown, highn] into k sections, and require each of them to be covered by the test inputs. We name this coverage as k-multisection
neuron coverage.
(i) k-multisection Neuron Coverage. Given a neuron n, the kmultisection neuron coverage measures how thoroughly the given
set of test inputs T covers the range [lown, highn]. To quantify
this, we divide the range [lown, highn] into k equal sections (i.e.,
k-multisections), for k > 0. We write Sn
i to denote the set of values
in the i-th section for 1 ≤i ≤k.
If ϕ(x,n) ∈Sn
i , we say the i-th section is covered by the test
input x. Therefore, for a given set of test inputs T and the neuron
n, its k-multisection neuron coverage is defined as the ratio of the
number of sections covered by T and the total number of sections,
i.e., k in our definition. We define the k-multisection coverage of a
neuron n as:
i | ∃x ∈T : ϕ(x,n) ∈Sn
4This paper focuses on feedforward neural networks. For recurrent neural networks (RNNs), we can
unroll a certain depth of layers of an RNN and adapt ϕ(x, n) by setting x to be an input sequence.
We further define the k-multisection neuron coverage of a DNN as:
KMNCov(T,k) =
i | ∃x ∈T : ϕ(x,n) ∈Sn
However, for a neuron n, there are also cases where ϕ(x,n) may
locate out of [lown, highn], i.e., ϕ(x,n) ∈(−∞, lown) or ϕ(x,n) ∈
(highn, +∞). We refer to (−∞, lown) ∪(highn, +∞) as the cornercase region of a neuron n.
Definition 3.2. For a test input x ∈T, we say that a DNN is
located in its corner-case region given x iff ∃n ∈N : ϕ(x,n) ∈
(−∞, lown) ∪(highn, +∞).
Note that the profiled outputs of a neuron obtained from the
training data would not locate into the corner-case region.In other
words, if test inputs follow a similar statistical distribution with
the training data, a neuron output would rarely locate in cornercase region as well. Nevertheless, it does not mean that testing the
corner cases of a neuron is not important because defects of DNNs
could also locate in the corner-case regions (see Section 4.3).
To cover these corner-case regions of DNNs, we define two
coverage criteria, i.e., neuron boundary coverage and strong neuron activation coverage. Given a test input x, if ϕ(x,n) belongs to
(−∞, lown) or (highn, +∞), we say the corresponding corner-case
region is covered. To quantify this, we first define the number of
covered corner-case regions as follows:
UpperCornerNeuron = {n ∈N | ∃x ∈T : ϕ(x,n) ∈(highn, +∞)};
LowerCornerNeuron = {n ∈N | ∃x ∈T : ϕ(x,n) ∈(−∞, lown)}.
(ii) Neuron Boundary Coverage. Neuron boundary coverage
measures how many corner-case regions (w.r.t. both of the upper
boundary and the lower boundary values) have been covered by
the given test input set T. It is defined as the ratio of the number of
covered corner cases and the total number of corner cases (2 × |N |):
NBCov(T) = |UpperCornerNeuron| + |LowerCornerNeuron|
Some recent research on DNNs interpretability empirically shows
that the hyperactive neurons might potentially deliver useful learning patterns within DNNs . Based on this intuition, the
proposed coverage criteria in the rest of this section focus more on
the hyperactive neuron cases (e.g., top-k neuron coverage in the
next subsection). Similar to neuron boundary coverage, we further
define strong neuron activation coverage to measure the coverage
status of upper-corner cases.
(iii) Strong Neuron Activation Coverage. Strong neuron activation coverage measures how many corner cases (w.r.t. the upper
boundary value highn) have been covered by the given test inputs
T. It is defined as the ratio of the number of covered upper-corner
cases and the total number of corner cases (|N |):
SNACov(T) = |UpperCornerNeuron|
Layer-Level Coverage Criteria
At layer-level, we use the top hyperactive neurons and their combinations (or the sequences) to characterize the behaviors of a DNN.
For a given test input x and neurons n1 and n2 on the same layer,
we say n1 is more active than n2 given x if ϕ(x,n1) > ϕ(x,n2).
DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems
ASE ’18, September 3–7, 2018, Montpellier, France
For the i-th layer, we use topk(x,i) to denote the neurons that
have the largest k outputs on that layer given x. For example, in
Figure 1(a), assume ϕ(x,n1) and ϕ(x,n3) are larger than ϕ(x,n2),
the top-2 neurons on layer 1 are n1 and n3 (depicted in green).
(i) Top-k Neuron Coverage. The top-k neuron coverage measures
how many neurons have once been the most active k neurons on
each layer. It is defined as the ratio of the total number of top-k
neurons on each layer and the total number of neurons in a DNN:
TKNCov(T,k) = | Ð
1≤i ≤l topk(x,i))|
The neurons from the same layer of a DNN often play similar
roles and the top active neurons from different layers are important indicators to characterize the major functionality of a DNN.
Intuitively, to more thoroughly test a DNN, a test dataset should
uncover more top active neurons.
(ii) Top-k Neuron Patterns. Given a test input x, the sequence of
the top-k neurons on each layer also forms a pattern. In Figure 1(a),
assume the neurons in green are the top-2 neurons on each layer,
the pattern can be represented as ({n1,n3}, {n5,n6}, {n8,n9}). More
formally, a pattern is an element of 2L1 × 2L2 × · · · × 2Ll , where
2Li is the set of subsets of the neurons on i-th layer, for 1 ≤i ≤l.
Given the test input set T, the number of top-k neuron patterns for
T is defined as:
TKNPat(T,k) = |{(topk(x, 1), . . . , topk(x,l)) | x ∈T }|.
Intuitively, the top-k neuron patterns denote different kinds of
activated scenarios from the top hyperactive neurons of each layer.
EXPERIMENTS
We implement DeepGauge on Keras 2.1.3 with TensorFlow 1.5.0
backend , and apply the proposed testing criteria to DNNs for
evaluation in this section.
Evaluation Subjects
Datasets and DNN Models. We select two popular publicly-available
datasets, i.e., MNIST and ImageNet (see Table 1) for evaluation. MNIST is for handwritten digits recognition, containing
70,000 input data in total, of which 60,000 are training data and
10,000 are test data. On MNIST, we use three pre-trained LeNet
family models (LeNet-1, LeNet-4, and LeNet-5) for analysis.
To further demonstrate the usefulness of our criteria towards
larger scale real-world DL systems, we also select ImageNet, a large
set of general image dataset for classification
containing more than 1.4 million training data and 50,000 test data
from 1,000 categories. The DNNs we used for ImageNet are pretrained VGG-19 and ResNet-50 models, both of which
are relatively large in size and obtain competitive records in the
ILSVRC competition , containing more than 16,000 and 94,000
neurons, and 25 and 176 layers, respectively. As a DNN testing
criterion towards future industry level application, we believe the
scalability up-to ImageNet-like or even larger data size and model
size is almost indispensable.
Adversarial Test Input Generation. Besides using original test
data accompanied in the corresponding dataset for coverage evaluation, we further explore four state-of-the-art adversarial test input
generation techniques (i.e., FGSM , BIM , JSMA , and
CW ) for comparative study. Each of the adversarial techniques
generates tests to detect DNN’s potential defects through the minor
perturbations on a given input, described as follows:
• FGSM crafts adversarial examples using loss function J(Θ, x,y)
with respect to the input feature vector, where Θ denotes the
model parameters, x is the input, andy is the output label of x, the
adversarial example is generated as: x∗= x+ϵ sign(∇xJ(Θ, x,y)).
• BIM applies adversarial noise η many times iteratively with a
small parameter ϵ, rather than one η with one ϵ at a time, which
gives a recursive formula: x∗
0 = x and x∗
i = clipx,ϵ(x∗
ϵ sign(∇x∗
i−1 J(Θ, x∗
i−1,y))), where clipx,ϵ(·) denotes a clipping
of the values of the adversarial sample such that they are within
an ϵ-neighborhood of the original input x.
• JSMA is proposed for targeted misclassification. For an input x
and a neural network F, the output of class j is denoted as Fj(x).
To achieve a target misclassification class t, Ft (x) is increased
while the probabilities Fj(x) of all other classes j , t decrease,
until t = arg maxj Fj(x).
• Carlini/Wagner (CW): Carlini and Wagner recently proposed
new optimization-based attack technique which is arguably the
most effective in terms of the adversarial success rates achieved
with minimal perturbation . In principle, the CW attack is to
approximate the solution to the following optimization problem:
λL(x, x∗) −J(Θ, x∗,y),
where L is a loss function to measure the distance between the
prediction and the ground truth, and the constant λ is to balance
the two loss contributions. In this paper, we adopt the CW∞,
where each pixel is allowed to be changed by up to a limit.
Figure 2 shows examples of the generated tests of the four adversarial techniques on the sampled data from MNIST test set. In
this example, we could see that compared with FGSM and BIM,
JSMA and CW perturb fewer pixels on the sampled test input. Furthermore, given the same input data but different DNNs, the same
technique would often generate different adversarial test results.
For example, given the input image 7, JSMA generates different results on DNNs (i.e., LeNet-1, LeNet-4 and LeNet-5). In other words,
the studied adversarial techniques are often DNN dependent.
Evaluation Setup
MNIST. On MNIST dataset, each image is single-channel of size
28 × 28 × 1. Before the evaluation starts, we first obtain the DNN’s
neuron output statistical information through runtime profiling
each of the studied DNNs (i.e., LeNet-1, LeNet-4, and LeNet-5) using
the 60,000 training data. When testing evaluation starts, for each
DNN under analysis, we run the 10,000 test data on the model
to obtain the corresponding coverage. For each studied DNN, we
further generate another four sets of adversarial test data which can
explore defects of DL,5 through FGSM , BIM , JSMA ,
and CW . We show that DeepGauge is general and easy to be
tested on the state-of-the-art adversarial test generation techniques.
After generating the four adversarial datasets, we aggregate each
of them with the original MNIST test dataset (with a total size 20,000
for each), which enables us to perform the comparative study on
5Each generated adversarial dataset is of the same size as the original test set.
ASE ’18, September 3–7, 2018, Montpellier, France
Ma, Xu, Zhang, Sun, Xue, Li, Chen, Su, Li, Liu, Zhao, and Wang
Figure 2: Examples of original sampled test data from MNIST in comparison to the ones generated by each adversarial technique on the corresponding studied DNN models.
Table 1: Breakdowns of datasets and DNN models.
Test Data Source
Description
Digit recog.
Test org.&
FGSM/BIM/JSMA/CW
General image
Test org.&
with 1000-classes
FGSM/BIM/CW
how the adversarial test data enhances the defect detection ability
from our coverage criteria measurement. Since the studied adversarial test generation techniques are model dependent, the adversarial
datasets generated by the same adversarial techniques are actually different for each model, though the same number (i.e., five)
datasets are used to evaluate on each model. For each adversarial
technique, we actually use it to generate three adversarial datasets,
one for each of LeNet-1, LeNet-4, and LeNet-5, respectively.
The detailed parameter configurations for each criterion are
shown in Table 2, where u and l are the output upper bound (maximal value) and lower bound (minimal value) obtained for each
neuron during profiling, respectively; σ is the standard deviation of
the outputs of a neuron during profiling. Although the definition of
neuron boundary coverage and strong neuron activation coverage
are based onu andl alone (i.e., neuron output UpperBound (UB) and
LowerBound (LB)), it would also be interesting to see what results
could be obtained if we further tighten corner-case regions (i.e.,
increase upper bound and decrease lower bound). Therefore, besides setting UB and LB to u and l as defined in Section 3.1, we
also evaluate another two configurations by increasing UB (resp.
decreasing LB) by 0.5 ∗σ and σ for neuron boundary coverage and
strong neuron activation coverage (see Table 2). In total, we have
3 (models)×5 (datasets)×14 (criterion settings) = 210 evaluation
configurations for MNIST.
ImageNet. ImageNet is more challenging for
evaluation due to its large data size (more than 1.4 million training
data) as well as large image size (224 × 224 × 3) for processing.
Moreover, the DNNs that achieve high accuracy are often complex. Compared with LeNet family models, the studied VGG-19 and
ResNet-50 are much more complex in terms of both neurons and
layers. Due to the computational complexity of adversarial test generation on ImageNet for analysis, we randomly sample images from
Table 2: The parameter configurations for evaluation.
DL Coverage Criteria
Parameter Configuration
k-multisection Neuron Cov. (KMNC)
Neuron Boundary Cov. (NBC)
LB=l −0.5 ∗σ
UB=u + 0.5 ∗σ
Strong Neuron Activation Cov. (SNAC)
UB=u + 0.5 ∗σ
Top-k Neuron Cov. (TKNC)
Top-k Neuron Patterns (TKNP)
each of its labeled categories in the original ImageNet test dataset,
with a total number of 5,000 images as the test data for our evaluation. We also try to use FGSM, BIM, JSMA, and CW to generate
adversarial tests for each of the studied DNNs. However, we are unable to set up JSMA to run successfully on either of the two DNNs.6
Overall, we have a total of 2 (models)×4 (datasets)×14 (criterion
settings) = 112 experimental configurations for ImageNet.
To support such large scale evaluation, we run the experiments
on a computer cluster. Each cluster node runs a GNU/Linux system
with Linux kernel 3.10.0 on a 18-core 2.3GHz Xeon 64-bit CPU with
196 GB of RAM and also an NVIDIA Tesla M40 GPU with 24G.
Experimental Results
In our experiments, we have seen useful testing feedbacks from
multiple perspectives with each testing criterion, showing some
unique portrayal of the runtime behavior of DNNs. We first describe
some obtained results and then summarize our findings.7
MNIST and ImageNet. MNIST. As shown in Table 3, the
coverage of different criteria obtained by the adversarial techniques
generally increase compared with the original MNIST test dataset.
For instance, as for LeNet-4, the JSMA increases the coverage of the
original tests from 39.7% to 52.3% by 31.7% in 10, 000-multisection
neuron coverage, from 9.1% to 16.2% by 78% in neuron boundary
coverage, from 13.5% to 27.7% by 105% in strong neuron activation
coverage, from 62.2 to 66.2 by 6.6% in top-1 neuron coverage, and
from 787 to 1,395 by 77.3% in top-1 neuron patterns.
The increase of coverage infers that the adversarial test data
overall explore new DNNs’ internal states, some of which are not
6This could be potentially caused by the massive data size and the complexity of VGG-19 and ResNet-
50. The similar issue on JSMA was also reported in a previous work .
7Due to the page limit, we put more detailed experimental result discussion, as well as data plot on
the paper’s accompanying website 
DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems
ASE ’18, September 3–7, 2018, Montpellier, France
Table 3: Coverage results of DeepGauge on MNIST, LetNet
models, and generated tests by adversarial techniques.
Eval. Config.
l-0.5*σ ,u+0.5*σ
l-0.5*σ ,u+0.5*σ
l-0.5*σ ,u+0.5*σ
UB=u+0.5*σ
UB=u+0.5*σ
UB=u+0.5*σ
covered by the original tests. As such adversarial test data reveal
defects of studied LeNet models, it indicates that generating tests
towards improving the coverage of the proposed criteria might potentially trigger more states of a DNN, incurring higher chances of
defect detection, which is consistent with the usage of test coverage
in traditional software testing.
ImageNet. The testing coverage (Table 4) on the ImageNet shares
some similarity with MNIST data while showing some differences.
VGG-19 and ResNet-50 models are much larger in size and complexity, potentially causing the obtained coverage lower than that
of LeNet in many cases. Consider the 10, 000-multisection neuron
coverage, FGSM achieves 48.6% on LeNet-1, but only 18.8% on VGG-
19. At first glance, it is tempting to draw the conclusion that a
DNN with higher complexity in terms of number of neurons and
layers is more difficult to be covered by tests. Our results show that
this might not be generally applicable. For example, the original
tests achieves 22.8% KMNC (k = 10, 000) on ResNet-50, but only
obtains 13.5% on VGG-19, although ResNet-50 has a larger number
of neurons and layers. Compared with MNIST, the generated adversarial tests on ImageNet incur even higher increase on the neuron
boundary coverage (NBC) and strong neuron activation coverage
(SNAC) (Table 4). For example, on ResNet50 under LB=l and UB=u
configuration, BIM increases these two criteria by 280% (from 4.1%
to 11.5%) and 279% (from 4.7% to 13.1%), respectively.
Table 4: Coverage results on ImageNet, VGG-19 and ResNet-
50, and generated tests by adversarial techniques.
Eval. Config.
l-0.5*σ , u+0.5*σ
l-0.5*σ , u+0.5*σ
UB=u+0.5*σ
UB=u+0.5*σ
The top-1 neuron coverage obtained by both MNIST and ImageNet (see Table 3 (TKNC) and Table 4 (TKNC)) show that many
neurons of a DNN have been triggered into a top-k (i.e., 1, 2, and 3
in our evaluated cases) hyperactive states. For example, on VGG-19,
the sampled original tests of ImageNet achieve 58.8% top-1 neuron
coverage, and 81.6% top-3 neuron coverage. Although the top-k
coverage improvement is not that obvious compared with other
criteria, the adversarial data still trigger more neurons as top-k
activated neurons in many cases, which detects the hidden defects.
For different test input datasets, it is often the case that only a
fixed subset of neurons of each layer would function as top hyperactivated neurons. This would be a hint that the top hyperactivated
neurons of each layer might describe the high-level major function
skeleton of a neuron network. In comparison with the top-k neuron
patterns (see Table 3 (TKNP) and Table 4 (TKNP)), albeit most of
the top hyperactive neurons are relatively stable for each layer,
their combination still captures the structural difference of input
data.8 These two layer-level criteria altogether provide us with the
information on which neurons matter the most within each layer;
and the top-k neuron patterns would mostly be able to differentiate
the input data when k is properly selected given a target DNN. The
findings indicate that generating tests to cover more top-k neuron
patterns would have a higher chance to find defects of a DNN.
Findings and Remarks. The overall experimental results demonstrate the usefulness of our proposed testing criteria for DNNs and
are also helpful to explain the difference of the state-of-the-practice
adversarial techniques form multiple perspectives:
• The original test data of MNIST and ImageNet cover both the
DNNs major function region (see KMNC) as well as corner-case
region (see NBC and SNAC) in Tables 3 and 4. This also happens
8Our in-depth investigation on the generated top-k neuron patterns for ImageNet show that the
relatively large pattern coverage improvement (even for the top-1 case) is relevant to the large #
of neurons and layers in VGG-19 and ResNet-50.
ASE ’18, September 3–7, 2018, Montpellier, France
Ma, Xu, Zhang, Sun, Xue, Li, Chen, Su, Li, Liu, Zhao, and Wang
to the generated adversarial datasets, showing that a defect of
DNN can occur either in a major function region or a corner-case
region, both of which should be extensively tested.
• The test data generated by four studied adversarial techniques
(combined with original test data) generally boost the coverage of
our criteria. Since an adversarial test data could potentially reveal
defects of a DL system, it means that boosting the coverage of our
testing criteria could to some extent enhance the fault detection
ability, which is consistent with the practical purpose of testing
criteria widely adopted in traditional software testing. It also
shows that our test criteria metrics could capture the DNNs’
internal behavioral difference of benign and adversarial test data.
We note that increasing the test coverage does not necessarily
imply that new defects could be detected in traditional software
testing. The same conclusion applies to our coverage criteria for
DNNs as well, though better-defined coverage criteria would be
much more pronounced in finding defects.
• Test data (including the generated test data by adversarial) evaluated on both MNIST and ImageNet mostly obtain a higher
k-multisection neuron coverage than the neuron boundary coverage and strong neuron activation coverage, revealing that the
test data cover more of the major function region than the cornercase region of a DNN. The design of future DL testing techniques
should also take account of covering corner-case regions.
• For most of the evaluated configurations, we find that a higher
strong neuron activation coverage is more achieved than its
corresponding neuron boundary coverage. This might be caused
by the unique characteristics of those activation functions in our
studied DNNs, which makes the lower region (small value) more
difficult to be covered than the upper region of the statistical
profiling distribution.9 This observation is consistent with the
models we studied, as LeNet family, VGG-19, and ResNet-50 all
use ReLU as activation functions, which could make the lower
regions of a neuron much smaller than the upper regions.10
Remark 1. In general, for neuron boundary coverage and
strong neuron activation coverage, the higher (resp. lower)
the neuron’s upper (resp. lower) bound, the less increment on
coverage we observe; for top-k neuron coverage, the larger the
value of k, the less increment on coverage; for top-k neuron
patterns, the larger the value of k, the more increment on
Remark 2. For neuron boundary coverage and strong neuron activation coverage, the 4 adversarial techniques have
sufficient diversity on the performance, which is similar to
traditional test generation which aim to cover different potential defects. Specifically, we observe that the adversarial tests
generated by CW are harder to be distinguished by the test
coverage since the CW perturbation concentrates more on
the objects with smaller magnitude, which may trigger less
internal behavior changes of DNNs.
9LeNet-1 is the only exceptional case, which might be caused by the over-simplicity of its network.
10In particular, ReLU function propagates the positive output of a neuron to the next layer while
blocking the negative output by setting it to zero, which stops influencing its following layers.
Test orig.
Test orig.+FGSM
Test orig.+BIM
Test orig.+JSMA
Test orig.+CW
(1) Threshold=0
(2) Threshold=0.2
(3) Threshold=0.5
(4) Threshold=0.75
Figure 3: The DeepXplore neuron coverage results on MNIST
dataset under different threshold configurations.
Comparison with DeepXplore’s Neuron
Coverage (DNC)
Pei et al. propose a kind of neuron activation coverage as the
measurement for testing data diversity of a DNN and argue that the
higher the activation coverage, the more states of a DNN could be
explored, with a higher chance for defects detection. A key parameter of DNC is a user-specified threshold, and if an output of a neuron
is larger than the threshold, the neuron is counted as covered. To
demonstrate the difference between our set of criteria and DNC,
we set up the DNC evaluation with the same dataset, model, as well
as adversarial data generation settings as described in Section 4.1.
For the threshold parameter, we first set thresholds to be 0 and 0.75,
as used in ; to make an even more comprehensive comparison,
we also use two other settings (i.e., 0.2 and 0.5). Figures 3 and 4
show that the results of DNC obtained on the original test dataset
and the dataset generated by adversarial techniques for MNIST
and ImageNet are almost the same for all experimental settings,
indicating that DNC is unable to differentiate the original test data
from adversarially generated ones, which trigger the correct and
incorrect behaviors of a DNN, respectively. This means that DNC
could hardly capture the difference between original test data and
corresponding test data generated by adversarial techniques. However, to detect the defects of DNNs in a more fine-grained level, it is
necessary that the coverage criteria capture such minor differences,
where the defects (adversarially triggered states) also lie in.
Our further in-depth investigation on DNC reveals that, this coverage criterion imposes several limitations: (1) DNC uses the same
threshold as the activation evaluation for all the neurons. However,
we find that the output statistical distribution of different neurons
are quite diverse. Given a test suite for analysis, the outputs of
some neurons may exhibit quite a small variance with a large mean
value, while others might have a large variance with a low mean
value. Therefore, using the same threshold for all neurons without considering the disparity in neuron’s functional distributions
would greatly diminish the accuracy. For example, given a neuron with very small mean and standard deviation, even a slightly
larger user-specified threshold would generally determine that this
neuron cannot be covered. (2) DNC normalizes the dynamic range
DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems
ASE ’18, September 3–7, 2018, Montpellier, France
(1) Threshold=0
(2) Threshold=0.2
Test orig.
Test orig.+FGSM
Test orig.+BIM
Test orig.+CW
(3) Threshold=0.5
(4) Threshold=0.75
Figure 4: The DeepXplore neuron activation coverage results on ImageNet dataset for different threshold settings.
of neuron outputs according to max and min output of neurons
on the corresponding layer for each input image under analysis.
This raises an issue that the same normalized activation value (e.g.,
0.3) means differently for different input data, as the max and min
output of each layer might change for each input, which renders
the notion of “larger than a given threshold” inconsistent among
different inputs.
Doing so will also eliminate the relativity in activation magnitude
among different inputs, which is a very important property to
support the findings of neuron activation coverage. We instead
specify the upper and lower bounds for each neuron obtained from
the analysis on the training dataset, as opposed to each individual
input. In other words, our method relies on the statistics of the
training set which is used to determine the main functionality of
the DNN system.
Threats to Validity and Discussion
The selection of evaluation subjects (i.e., dataset and DNN models) could be a threat to validity. We try to counter this by using
the commonly-studied MNIST dataset and the practical large-scale
dataset ImageNet; for each studied dataset, we use the well-known
pre-trained models of different sizes and complexity ranging from
52 neurons up to more than 90,000 neurons. Even though, some
of our results might not generalize to other datasets and DNN
models. Another threat could be caused by the configurable hyperparameters in the coverage criteria definition. As a countermeasure
while considering the limited computational resources, we evaluate
each criterion with different settings, and analyze the influence of
the parameters on criteria accuracy. Even though, it might still not
cover the best parameter use-cases. For example, our evaluation
studied k = 1, 000 and k = 10, 000 for k-multisection neuron coverage. We leave the optimized hyper-parameter selection in our future
work. Further threat could be caused by the quality of training data
used for distribution (i.e., the interval range) analysis of neuron
output. In this paper, we consider publicly available well-pretrained
DNN models accompanied by training data with good quality.
For adversarial test generation, we select four popular state-ofthe-practice techniques to simulate defects from different sources
and granularity. We either follow the authors’ suggested settings or
use their default settings. Moreover, to make comprehensive comparisons with DeepXplore’s neuron coverage (DNC), we evaluate
DNC with multiple threshold settings.
RELATED WORK
In this section, we attempt to review the most relevant work in
three aspects: testing, verification, and security of DL systems.
Testing of DL Systems
Traditional practices in measuring machine learning systems mainly
rely on probing their accuracy on test inputs which are randomly
drawn from manually labeled datasets and ad hoc simulations .
However, such black-box testing methodology may not be able to
find various kinds of corner-case behaviors that may induce unexpected errors . Wicker et al. recently proposed a Scale
Invariant Feature Transform feature guided black-box testing and
showed its competitiveness with CW and JSMA along this direction.
Pei et al. proposed a white-box differential testing algorithm
for systematically finding inputs that can trigger inconsistencies
between multiple DNNs. They introduced neuron coverage for
measuring how much of the internal logic of a DNN has been
tested.However, it still exhibits several caveats as discussed in Section 4.4. DeepTest investigates a basic set of image transformations (e.g., scaling, shearing, and rotation) from OpenCV and shows
that they are useful to detect defects in DNN-driven autonomous
cars. Along this direction, DeepRoad uses input image scene
transformation and shows its potentiality with two scenes (i.e.,
snowy and rainy) for autonomous driving testing. The scene transformation is obtained through training a generative adversarial
network (GAN) with a pair of collected training data that cover the
statistical features of the two target scenes.
Compared with traditional software, the dimension and potential
testing space of a DNN is often quite large. DeepCT adapts the
concept of combinatorial testing, and proposes a set of coverage
based on the neuron input interaction for each layer of DNNs, to
guide test generation towards achieving reasonable defect detection ability with a relatively small number of tests. Inspired by
the MC/DC test criteria in traditional software , Sun et al. 
proposed a set of adapted MC/DC test criteria for DNNs, and show
that generating tests guided by the proposed criteria on small scale
neural networks (consisting of Dense layers with no more than 5
hidden layers and 400 neurons) exhibits higher defect detection
ability than random testing. However, whether MC/DC criteria
scale to real-world-sized DL systems still needs further investigation. Instead of observing the runtime internal behaviors of DNNs,
DeepMutation proposes to mutate DNNs to evaluate the test data
quality, which could potentially be useful for test data prioritization
in respect of robustness on a given DNN.
Our work of proposing multi-granularity testing coverage for DL
systems is mostly orthogonal to the existing work. Compared with
the extensive study on traditional software testing, testing DL is
still at an early stage. Most existing work on DL testing lacks some
suitable criteria to understand and guide the test generation process.
Since test generation guided by coverage criteria (e.g., statement
coverage, branch coverage) towards the exploration of diverse software states for defect detection has become the de facto standard
in traditional software testing , the study to design
suitable testing criteria for DL is desperately demanding. This paper
makes an early attempt towards this direction by proposing a set of
testing criteria. Our criteria not only can differentiate state-of-theart adversarial test generation techniques, but also potentially be
useful for the measurement of test suite diversity by analyzing the
DNNs’ internal states from multiple portrayals. We believe that our
proposed criteria set up an important cornerstone and bring a new
opportunity to design more effective automated testing techniques
guided by testing criteria for DL systems.
Verification of DL Systems
Formal methods can provide formal guarantees about safety and
robustness of verified DL systems . The main
concern of formal methods are their scalability for real-world-sized
(e.g., 100, 000 neurons or even more) DL systems.
The early work in provided an abstraction-refinement approach to checking safety properties of multi-layer perceptrons.
Their approach has been applied to verify a network with only 6
neurons. DLV can verify local robustness of DL systems w.r.t.
a set of user specified manipulations. Reluplex is a sound and
complete SMT-based approach to verifying safety and robustness of
DL systems with ReLU activation functions. The networks verified
by Reluplex in have 8 layers and 300 ReLU nodes. DeepSafe
 uses Reluplex as its verification engine and has the same scalability problem as Reluplex. AI2 is a sound analyzer based on
abstract interpretation that can reason about safety and robustness
of DL systems. It trades precision for scalability and scales better
than Reluplex. The precision of AI2 depends on abstract domains
used in the verification, and it might fail to prove a property when
it actually holds. VERIVIS can verify safety properties of DL
systems when attackers are constrained to modify the inputs only
through given transformation functions. However, real-world transformations can be much more complex than the transformation
functions considered in the paper.
Attacks and Defenses of DL Systems
A plethora of research has shown that deep learning systems can
be fooled by applying carefully crafted adversarial perturbation
added to the original input , many of which are
based on gradient or optimization techniques. However, it still lacks
extensive study on how these adversarial techniques differentiate
in terms of DNNs’ internal states. In this study, we make an early
attempt towards such a direction based on our proposed criteria.
With the rapid development of adversarial attack techniques,
extensive studies have been performed to circumvent adversarial
attacks. Galloway et al. recently observe that low-precision
DNNs exhibit improved robustness against some adversarial attacks. This is primarily due to the stochastic quantization in neural
network weights. Ensemble adversarial training , GAN based
approaches , random resizing and random padding ,
game theory , and differentiable certificate methods are all
investigated to defend against adversarial examples. By applying
image transformations, such as total variance minimization and
image quilting, very effective defenses can be achieved when the
network is trained on the aforementioned transformed images .
For more extensive discussion on current state-of-the-art defense
techniques, we refer readers to .
Our proposed testing criteria enable the quantitative measurement of different adversarial attack techniques from the software
engineering perspective. This could be potentially helpful for understanding and interpreting DNNs’ behaviors, based on which
more effective DNN defense technique could be designed. In future
work, it would be also interesting to examine how to integrate the
proposed testing criteria into the DL development life cycle towards
building high quality DL systems.
CONCLUSION AND FUTURE WORK
The wide adoption of DL systems, especially in many safety-critical
areas, has posed a severe threat to its quality and generalization
property. To effectively measure the testing adequacy and lay down
the foundation to design effective DL testing techniques, we propose a set of testing criteria for DNNs. Our experiments on two
well-known datasets, five DNNs with diverse complexity, and four
state-of-the-art adversarial testing techniques show that the tests
generated by the adversarial techniques incur obvious increases
of the coverage in terms of the metrics defined in the paper. This
demonstrates that DeepGauge could be a useful indicator for evaluating testing adequacy of DNNs.
To the best of our knowledge, our work is among the early
studies to propose testing criteria for DL systems. We expect that
the proposed testing criteria could be particularly amenable to DL
testing in the wild. In the next step, we will continue to explore
alternative testing criteria for DNNs, such as the combination of
both hyperactive and hypoactive neurons. We also plan to study
the proposed testing criteria guided automated test generation
techniques for DNNs. We hope that our study not only provides an
avenue to illuminate the nature and mechanism of DNNs, but also
lays the foundation towards understanding and building generic
and robust DL systems.
ACKNOWLEDGMENTS
This work was partially supported by National Key R&D Program
of China 2017YFC1201200 and 2017YFC0907500, Fundamental Research Funds for Central Universities of China AUGA5710000816,
JSPS KAKENHI Grant 18H04097. We gratefully acknowledge the
support of NVIDIA AI Tech Center (NVAITC) to our research. We
also appreciate the anonymous reviewers for their insightful and
constructive comments.
DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems
ASE ’18, September 3–7, 2018, Montpellier, France