NAT: Neural Architecture Transformer for Accurate
and Compact Architectures
Yong Guo∗, Yin Zheng∗, Mingkui Tan∗†, Qi Chen,
Jian Chen†, Peilin Zhao, Junzhou Huang
South China University of Technology, Weixin Group, Tencent,
Tencent AI Lab, University of Texas at Arlington
{guo.yong, sechenqi}@mail.scut.edu.cn, {mingkuitan, ellachen}@scut.edu.cn,
{yinzheng, masonzhao}@tencent.com, 
Designing effective architectures is one of the key factors behind the success of
deep neural networks. Existing deep architectures are either manually designed
or automatically searched by some Neural Architecture Search (NAS) methods.
However, even a well-searched architecture may still contain many non-signiﬁcant
or redundant modules or operations (e.g., convolution or pooling), which may
not only incur substantial memory consumption and computation cost but also
deteriorate the performance. Thus, it is necessary to optimize the operations inside
an architecture to improve the performance without introducing extra computation
cost. Unfortunately, such a constrained optimization problem is NP-hard. To make
the problem feasible, we cast the optimization problem into a Markov decision
process (MDP) and seek to learn a Neural Architecture Transformer (NAT) to
replace the redundant operations with the more computationally efﬁcient ones
(e.g., skip connection or directly removing the connection). Based on MDP, we
learn NAT by exploiting reinforcement learning to obtain the optimization policies
w.r.t. different architectures. To verify the effectiveness of the proposed strategies,
we apply NAT on both hand-crafted architectures and NAS based architectures.
Extensive experiments on two benchmark datasets, i.e., CIFAR-10 and ImageNet,
demonstrate that the transformed architecture by NAT signiﬁcantly outperforms
both its original form and those architectures optimized by existing methods.
Introduction
Deep neural networks (DNNs) have been producing state-of-the-art results in many challenging
tasks including image classiﬁcation , face recognition ,
brain signal processing , video analysis and many other areas .
One of the key factors behind the success lies in the innovation of neural architectures, such as
VGG and ResNet . However, designing effective neural architectures is often labor-intensive
and relies heavily on substantial human expertise. Moreover, the human-designed process cannot
fully explore the whole architecture space and thus the designed architectures may not be optimal.
Hence, there is a growing interest to replace the manual process of architecture design with Neural
Architecture Search (NAS).
Recently, substantial studies have shown that the automatically discovered architectures
are able to achieve highly competitive performance compared to existing hand-crafted architectures.
∗Authors contributed equally.
†Corresponding author.
2This work is done when Yong Guo works as an intern in Tencent AI Lab.
33rd Conference on Neural Information Processing Systems , Vancouver, Canada.
 
Figure 1: Comparison between Neural Architecture Optimization (NAO) and our Neural
Architecture Transformer (NAT). Green blocks denote the two input nodes of the cell and blue blocks
denote the intermediate nodes. Red blocks denote the connections that are changed by NAT. The
accuracy and the number of parameters are evaluated on CIFAR-10 models.
However, there are some limitations in NAS based architecture design methods. In fact, since there
is an extremely large search space (e.g., billions of candidate architectures), these methods
often produce sub-optimal architectures, leading to limited representation performance or substantial
computation cost. Thus, even for a well-designed model, it is necessary yet important to optimize its
architecture (e.g., removing the redundant operations) to achieve better performance and/or reduce
the computation cost.
To optimize the architectures, Luo et al. recently proposed a neural architecture optimization (NAO)
method . Speciﬁcally, NAO ﬁrst encodes an architecture into an embedding in continuous space
and then conducts gradient descent to obtain a better embedding. After that, it uses a decoder to
map the embedding back to obtain an optimized architecture. However, NAO comes with its own
set of limitations. First, NAO often produces a totally different architecture from the input one
and may introduce extra parameters or additional computation cost. Second, similar to the NAS
based methods, NAO has a huge search space, which, however, may not be necessary for the task
of architecture optimization and may make the optimization problem very expensive to solve. An
illustrative comparison between our method and NAO can be found in Figure 1.
Unlike existing methods that design neural architectures, we seek to design an architecture optimization method, called Neural Architecture Transformer (NAT), to optimize neural architectures. Since
the optimization problem is non-trivial to solve, we cast it into a Markov decision process (MDP).
Thus, the architecture optimization process is reduced to a series of decision making problems. Based
on MDP, we seek to replace the expensive operations or redundant modules in the architecture
with more computationally efﬁcient ones. Speciﬁcally, NAT shall remove the redundant modules
or replace these modules with skip connections. In this way, the search space can be signiﬁcantly
reduced. Thus, the training complexity to learn an architecture optimizer is smaller than those NAS
based methods, e.g., NAO. Last, it is worth mentioning that our NAT model can be used as a general
architecture optimizer which takes any architecture as the input and output an optimized one. In
experiments, we apply NAT to both hand-crafted and NAS based architectures and demonstrate the
performance on two benchmark datasets, namely CIFAR-10 and ImageNet .
The main contributions of this paper are summarized as follows.
• We propose a novel architecture optimization method, called Neural Architecture Transformer
(NAT), to optimize arbitrary architectures in order to achieve better performance and/or reduce
computation cost. To this end, NAT either removes the redundant paths or replaces the original
operation with skip connection to improve the architecture design.
• We cast the architecture optimization problem into a Markov decision process (MDP), in which we
seek to solve a series of decision making problems to optimize the operations. We then solve the
MDP problem with policy gradient. To better exploit the adjacency information of operations in
an architecture, we propose to exploit graph convolution network (GCN) to build the architecture
optimization model.
• Extensive experiments demonstrate the effectiveness of our NAT on both hand-crafted and NAS
based architectures. Speciﬁcally, for hand-crafted models (e.g., VGG), our NAT automatically
introduces additional skip connections into the plain network and results in 2.75% improvement in
terms of Top-1 accuracy on ImageNet. For NAS based models (e.g., DARTS ), NAT reduces
20% parameters and achieves 0.6% improvement in terms of Top-1 accuracy on ImageNet.
skip connection
skip connection
Figure 2: An example of the graph representation of a residual block and the diagram of operation
transformations. (a) a residual block ; (b) a graph view of residual block; (c) transformations
among three kinds of operations. N denotes a null operation without any computation, S denotes a
skip connection, and O denotes some computational modules other than null and skip connections.
Related Work
Hand-crafted architecture design. Many studies focus on architecture design and propose a
series of deep neural architectures, such as Network-in-network , VGG and so on. Unlike
these plain networks that only contain a stack of convolutions, He et al. propose the residual
network (ResNet) by introducing residual shortcuts between different layers. However, the
human-designed process often requires substantial human effort and cannot fully explore the whole
architecture space, making the hand-crafted architectures often not optimal.
Neural architecture search. Recently, neural architecture search (NAS) methods have been proposed
to automate the process of architecture design . Some researchers
conduct architecture search by modeling the architecture as a graph . Unlike these methods,
DSO-NAS ﬁnds the optimal architectures by starting from a fully connected block and then
imposing sparse regularization to prune useless connections. Besides, Jin et al. propose a
Bayesian optimization approach to morph the deep architectures by inserting additional layers,
adding more ﬁlters or introducing additional skip connections. More recently, Luo et al. propose the
neural architecture optimization (NAO) method to perform the architecture search on continuous
space by exploiting the encoding-decoding technique. However, NAO is essentially designed for
architecture search and often obtains very different architectures from the input architectures and
may introduce extra parameters. Unlike these methods, our method is able to optimize architectures
without introducing extra computation cost (See the detailed comparison in Figure 1).
Architecture adaptation and model compression. Several methods have been proposed
to obtain compact architectures by learning the optimal settings of each convolution, including kernel
size, stride and the number of ﬁlters. To obtain compact models, model compression methods detect and remove the redundant channels from the original models. However, these
methods only change the settings of convolution but ignore the fact that adjusting the connections
in the architecture could be more critical. Recently, Cao et al. propose an automatic architecture
compression method . However, this method has to learn a compressed model for each given
pre-trained model and thus has limited generalization ability to different architectures. Unlike these
methods, we seek to learn a general optimizer for any arbitrary architecture.
Neural Architecture Transformer
Problem Deﬁnition
Given an architecture space Ω, we can represent an architecture α as a directed acyclic graph (DAG),
i.e., α = (V, E), where V is a set of nodes that denote the feature maps in DNNs and E is an edge
set , as shown in Figure 2. Here, the directed edge eij ∈E denotes some operation (e.g.,
convolution or max pooling) that transforms the feature map from node vi to vj. For convenience,
we divide the edges in E into three categories, namely, S, N, O, as shown in Figure 2(c). Here, S
denotes the skip connection, N denotes the null connection (i.e., no edge between two nodes), and
O denotes the operations other than skip connection or null connection (e.g., convolution or max
pooling). Note that different operations have different costs. Speciﬁcally, let c(·) be a function to
evaluate the computation cost. Obviously, we have c(O) > c(S) > c(N).
In this paper, we seek to design an architecture optimization method, called Neural Architecture
Transformer (NAT), to optimize any given architecture into a better one with the improved performance and/or less computation cost. To achieve this, an intuitive way is to make the original operation
with less computation cost, e.g., using the skip connection to replace convolution or using the null
connection to replace skip connection. Although the skip connection has slightly higher cost than
the null connection, it often can signiﬁcantly improve the performance . Thus, we enable
the transition from null connection to skip connection to increase the representation ability of deep
networks. In summary, we constrain the possible transitions among O, S, and N in Figure 2(c) in
order to reduce the computation cost.
Note that the architecture optimization on an entire network is still very computationally expensive.
Moreover, we hope to learn a general architecture optimizer. Given these two concerns, we consider
learning a computational cell as the building block of the ﬁnal architecture. To build a cell, we follow
the same settings as that in ENAS . Speciﬁcally, each cell has two input nodes, i.e., v−2 and
v−1, which denote the outputs of the second nearest and the nearest cell in front of the current one,
respectively. Each intermediate node (marked as the blue box in Figure 1) also takes two previous
nodes in this cell as inputs. Last, based on the learned cell, we are able to form any ﬁnal network.
Markov Decision Process for Architecture Optimization
In this paper, we seek to learn a general architecture optimizer α = NAT(β; θ), which transforms
any β into an optimized α and is parameterized by θ. Here, we assume β follows some distribution
p(·), e.g., multivariate uniformly discrete distribution. Let wα and wβ be the well-learned model
parameters of architectures α and β, respectively. We measure the performance of α and β by some
metric R(α, wα) and R(β, wβ), e.g., the accuracy on validation data. For convenience, we deﬁne the
performance improvement between α and β by R(α|β) = R(α, wα) −R(β, wβ).
To learn a good transformer α = NAT(β; θ) to optimize arbitrary β, we can maximize the expectation
of performance improvement R(α|β) over the distribution of β under a constraint of computation
cost c(α) ≤κ, where c(α) measures the cost of α and κ is an upper bound of the cost. Then, the
optimization problem can be written as
Eβ∼p(·) [R (α|β)] , s.t. c(α) ≤κ.
Unfortunately, it is non-trivial to directly obtain the optimal α given different β. Nevertheless,
following , given any architecture β, we instead sample α from some well learned policy,
denoted by π(·|β; θ), namely α ∼π(·|β; θ). In other words, NAT ﬁrst learns the policy and then
conducts sampling from it to obtain the optimized architecture. In this sense, the parameters to be
learned only exist in π(·|β; θ). To learn the policy, we solve the following optimization problem:
Eα∼π(·|β;θ) R (α|β)
, s.t. c(α) ≤κ, α ∼π(·|β; θ),
where Eβ∼p(·) [·] and Eα∼π(·|β;θ) [·] denote the expectation operation over β and α, respectively.
This problem, however, is still very challenging to solve. First, the computation cost of deep
networks can be evaluated by many metrics, such as the number of multiply-adds (MAdds), latency,
and energy consumption, making it hard to ﬁnd a comprehensive measure to accurately evaluate
the cost. Second, the upper bound of computation cost κ in Eqn. (1) may vary for different cases
and thereby is hard to determine. Even if there already exists a speciﬁc upper bound, dealing with
the constrained optimization problem is still a typical NP-hard problem. Third, how to compute
Eα∼π(·|β;θ) R (α|β)
remains a question.
To address the above challenges, we cast the optimization problem into an architecture transformation
problem and reformulate it as a Markov decision process (MDP). Speciﬁcally, we optimize architectures by making a series of decisions to alternate the types of different operations. Following the
transition graph in Figure 2(c), as c(O) > c(S) > c(N), we can naturally obtain more compact architectures than the given ones. In this sense, we can achieve the goal to optimize arbitrary architecture
without introducing extra cost into the architecture. Thus, for the ﬁrst two challenges, we do not have
to evaluate the cost c(α) or determine the upper bound κ. For the third challenge, we estimate the
expectation value by sampling architectures from p(·) and π(·|β; θ) (See details in Section 3.4).
MDP formulation details. A typical MDP is deﬁned by a tuple (S, A, P, R, q, γ), where S is a
ﬁnite set of states, A is a ﬁnite set of actions, P : S × A × S →R is the state transition distribution,
R : S ×A →R is the reward function, q : S → is the distribution of initial state, and γ ∈ 
is a discount factor. Here, we deﬁne an architecture as a state, a transformation mapping β →α as
an action. Here, we use the accuracy improvement on the validation set as the reward. Since the
problem is a one-step MDP, we can omit the discount factor γ. Based on the problem deﬁnition, we
transform any β into an optimized architecture α with the policy π(·|β; θ). Then, the main challenge
becomes how to learn an optimal policy π(·|β; θ). Here, we exploit reinforcement learning to
solve the problem and propose an efﬁcient policy learning algorithm.
Search space of NAT over a cell structure. For a cell structure with B nodes and 3 states for each
edge, there are 2(B−3) edges and the size of the search space w.r.t. a speciﬁc β is |Ωβ| = 32(B−3).
However, NAS methods have a large search space with the size of k2(B−3)((B −2)!)2,
where k is the number of candidate operations (e.g., k=5 in ENAS and k=8 in DARTS ).
Policy Learning by Graph Convolutional Neural Networks
To learn the optimal policy π(·|β; θ) w.r.t. an arbitrary architecture β, we propose an effective
learning method to optimize the operations inside the architecture. Speciﬁcally, we take an arbitrary
architecture graph β as the input and output the optimization policy w.r.t β. Such a policy is used to
optimize the operations of the given architecture. Since the choice of operation on an edge depends
on the adjacent nodes and edges, we have to consider the attributes of both the current edge and
its neighbors. For this reason, we employ a graph convolution networks (GCN) to exploit
the adjacency information of the operations in the architecture. Here, an architecture graph can be
represented by a data pair (A, X), where A denotes the adjacency matrix of the graph and X denotes
the attributes of the nodes together with their two input edges3. We consider a two-layer GCN and
formulate the model as:
Z = f(X, A) = Softmax
where W(0) and W(1) denote the weights of two graph convolution layers, WFC denotes the weight
of the fully-connected layer, σ is a non-linear activation function (e.g., the Rectiﬁed Linear Unit
(ReLU) ), and Z refers to the probability distribution of different candidate operations on the
edges, i.e., the learned policy π(·|β; θ). For convenience, we denote θ = {W(0), W(1), WFC} as the
parameters of the architecture transformer. To cover all possible architectures, we randomly sample
architectures from the whole architecture space and use them to train our model.
Differences with LSTM. The architecture graph can also be processed by the long short-term
memory (LSTM) , which is a common practice in NAS methods . In these methods,
LSTM ﬁrst treats the graph as a sequence of tokens and then learns the information from the sequence.
However, turning a graph into a sequence of tokens may lose some connectivity information of
the graph, leading to limited performance. On the contrary, our GCN model can better exploit the
information from the graph and yield superior performance (See results in Section 4.4).
Training and Inference of NAT
We apply the policy gradient to train our model. The overall scheme is shown in Algorithm 1,
which employs an alternating manner. Speciﬁcally, in each training epoch, we ﬁrst train the model
parameters w with ﬁxed transformer parameters θ. Then, we train the transformer parameters θ by
ﬁxing the model parameters w.
Training the model parameters w. Given any θ, we need to update the model parameters w
based on the training data. Here, to accelerate the training process, we adopt the parameter sharing
technique , i.e., we construct a large computational graph, where each subgraph represents a
neural network architecture, hence forcing all architectures to share the parameters. Thus, we can use
the shared parameters w to represent the parameters for different architectures. For any architecture
β ∼p(·), let L(β, w) be the loss function on the training data, e.g., the cross-entropy loss. Then,
given any m sampled architectures, the updating rule for w with parameter sharing can be given by
i=1 ∇wL(βi, w), where η is the learning rate.
3Due to the page limit, we put the detailed representation methods in the supplementary.
Algorithm 1 Training method for Neural Architecture Transformer (NAT).
Require: The number of sampled input architectures in an iteration m, the number of sampled optimized
architectures for each input architecture n, learning rate η, regularizer parameter λ in Eqn. (4), input
architecture distribution p(·), shared model parameters w, transformer parameters θ.
1: Initiate w and θ.
2: while not convergent do
for each iteration on training data do
// Fix θ and update w.
Sample βi ∼p(·) to construct a batch {βi}m
Update the model parameters w by descending the gradient:
i=1 ∇wL(βi, w).
for each iteration on validation data do
// Fix w and update θ.
Sample βi ∼p(·) to construct a batch {βi}m
Obtain {αj}n
j=1 according to the policy learned by GCN.
Update the transformer parameters θ by ascending the gradient:
∇θ log π(αj|βi; θ)
 R(αj, w) −R(βi, w)
 π (·|βi; θ)
16: end while
Training the transformer parameters θ. We train the transformer model with policy gradient .
To encourage exploration, we introduce an entropy regularization term into the objective to prevent
the transformer from converging to a local optimum too quickly , e.g., selecting the “original”
option for all the operations. Given the shared parameters w, the objective can be formulated as
J(θ) = Eβ∼p(·)
Eα∼π(·|β;θ) [R (α, w) −R (β, w)] + λH
 π(·|β; θ)
 R (α, w) −R (β, w)
 π(·|β; θ)
where p(β) is the probability to sample some architecture β from the distribution p(·), π(α|β; θ)
is the probability to sample some architecture α from the distribution π(·|β; θ), H(·) evaluates the
entropy of the policy, and λ controls the strength of the entropy regularization term. For each input
architecture, we sample n optimized architectures {αj}n
j=1 from the distribution π(·|β; θ) in each
iteration. Thus, the gradient of Eqn. (4) w.r.t. θ becomes4
∇θ log π(αj|βi; θ)
 R(αj, w) −R(βi, w)
 π(·|βi; θ)
The regularization term H
 π(·|βi; θ)
encourages the distribution π(·|β; θ) to have high entropy,
i.e., high diversity in the decisions on the edges. Thus, the decisions for some operations would be
encouraged to choose the “identity” or “null” operations during training. As a result, NAT is able to
sufﬁciently explore the whole search space to ﬁnd the optimal architecture.
Inferring the optimized architecture. We do not explicitly obtain the optimized architecture via
α = NAT(β; θ). Instead, we conduct sampling according to the learned probability distribution.
Speciﬁcally, we ﬁrst sample several candidate optimized architectures from the learned policy
π(·|β; θ) and then select the architecture with the highest validation accuracy. Note that we can also
obtain the optimized architecture by selecting the operation with the maximum probability, which,
however, tends to reach a local optimum and yields worse results than the sampling based method
(See comparisons in Section 4.4).
Experiments
In this section, we apply NAT on both hand-crafted and NAS based architectures, and conduct
experiments on two image classiﬁcation benchmark datasets, i.e., CIFAR-10 and ImageNet .
All implementations are based on PyTorch.5
4We put the derivations of Eqn. (5) in the supplementary.
5The source code of NAT is available at 
Table 1: Performance comparisons of the optimized architectures obtained by different methods based
on hand-crafted architectures. “/” denotes the original models that are not changed by architecture
optimization methods.
#Params (M)
#MAdds (M)
#Params (M)
#MAdds (M)
MobileNetV2
MobileNetV2
View of Graph
View of Network
NAT-ResNet
Residual Cell
Architecture
MobileNetV2 Cell
MobileNetV2
NAT-MobileNetV2
Figure 3: Architecture optimization results of hand-crafted architectures. We provide both the views
of graph (left) and network (right) to show the differences in architecture.
Implementation Details
We consider two kinds of cells in a deep network, including the normal cell and the reduction cell. The
normal cell preserves the same spatial size as inputs while the reduction cell reduces the spatial size
by 2×. Both the normal and reduction cells contain 2 input nodes and a number of intermediate nodes.
During training, we build the deep network by stacking 8 basic cells and train the transformer for 100
epochs. We set m = 1, n = 1, and λ = 0.003 in the training. We split CIFAR-10 training set into
40% and 60% slices to train the model parameters w and the transformer parameters θ, respectively.
As for the evaluation of the networks with different architectures, we replace the original cell with the
optimized one and train the model from scratch. Please see more details in the supplementary. For all
the considered architectures, we follow the same settings of the original papers. In the experiments,
we only apply cutout to the NAS based architectures on CIFAR-10.
Results on Hand-crafted Architectures
In this experiment, we apply NAT on three popular hand-crafted models, i.e., VGG , ResNet ,
and MobileNet . To make all architectures share the same graph representation method deﬁned in
Section 3.2, we add null connections into the hand-crafted architectures to ensure that each node has
Table 2: Comparisons of the optimized architectures obtained by different methods based on NAS
based architectures. “-” denotes that the results are not reported. “/” denotes the original models that
are not changed by architecture optimization methods. † denotes the models trained with cutout.
#Params (M)
#MAdds (M)
#Params (M)
#MAdds (M)
AmoebaNet† 
AmoebaNet 
PNAS† 
SNAS† 
ENAS† 
DARTS† 
DARTS 
NAONet† 
NAONet 
Normal cell
Reduction cell
Architecture
NAT-NAONet
Figure 4: Architecture optimization results on the architectures of NAS based architectures.
two input nodes (See examples in Figure 3). For a fair comparison, we build deep networks using the
original and optimized architectures while keeping the same depth and number of channels as the
original models. We compare NAT with a strong baseline method Neural Architecture Optimization
(NAO) . We show the results in Table 1 and the corresponding architectures in Figure 3. From
Table 1, although the models with NAO yield better performance than the original ones, they often
have more parameters and higher computation cost. By contrast, our NAT based models consistently
outperform the original models by a large margin with approximately the same computation cost.
Table 3: Performance comparisons of the architectures obtained by different methods on CIFAR-10.
The reported accuracy (%) is the average performance of ﬁve runs with different random seeds. “/”
denotes the original models that are not changed by architecture optimization methods. † denotes the
models trained with cutout.
MobileNetV2
Random Search
Maximum-GCN
Sampling-GCN (Ours)
Results on NAS Based Architectures
For the automatically searched architectures, we evaluate the proposed NAT on three state-of-the-art
NAS based architectures, i.e., DARTS , NAONet , and ENAS . Moreover, we also
compare our optimized architectures with other NAS based architectures, including AmoebaNet ,
PNAS , SNAS and GHN . From Table 2, all the NAT based architectures yield higher
accuracy than their baseline models and the models optimized by NAO on CIFAR-10 and ImageNet.
Compared with other NAS based architectures, our NAT-DARTS performs the best on CIFAR-10
and achieves the competitive performance compared to the best architecture (i.e., AmoebaNet)
on ImageNet with less computation cost and fewer number of parameters. We also visualize the
architectures of the original and optimized cell in Figure 4. As for DARTS and NAONet, NAT
replaces several redundant operations with the skip connections or directly removes the connection,
leading to fewer number of parameters. While optimizing ENAS, NAT removes the average pooling
operation and improves the performance without introducing extra computations.
Comparisons of Different Policy Learners
In this experiment, we compare the performance of different policy learners, including Random
Search, LSTM, and the GCN method. For the Random Search method, we perform random transitions
among O, S, and N on the input architectures. For the GCN method, we consider two variants which
infer the optimized architecture by sampling from the learned policy (denoted by Sampling-GCN)
or by selecting the operation with the maximum probability (denoted by Maximum-GCN). From
Table 3, our Sampling-GCN method outperforms all the considered policies on different architectures.
These results demonstrate the superiority of the proposed GCN method as the policy learner.
Effect of Different Graph Representations on Hand-crafted Architectures
In this experiment, we investigate the effect of different graph representations on hand-crafted
architectures. Note that an architecture may correspond to many different topological graphs,
especially for the hand-crafted architectures, e.g., VGG and ResNet, where the number of nodes is
smaller than that of our basic cell. For convenience, we study three different graphs for VGG and
ResNet20, respectively. The average accuracy of NAT-VGG is 95.83% and outperforms the baseline
VGG with the accuracy of 93.56%. Similarly, our NAT-ResNet20 yields the average accuracy of
92.48%, which is also better than the original model. We put the architecture and the performance of
each possible representation in the supplementary. In practice, the graph representation may inﬂuence
the result of NAT and how to alleviate its effect still remains an open question.
Conclusion
In this paper, we have proposed a novel Neural Architecture Transformer (NAT) for the task of
architecture optimization. To solve this problem, we cast it into a Markov decision process (MDP)
by making a series of decisions to optimize existing operations with more computationally efﬁcient
operations, including skip connection and null operation. To show the effectiveness of NAT, we
apply it to both hand-crafted architectures and Neural Architecture Search (NAS) based architectures.
Extensive experiments on CIFAR-10 and ImageNet datasets demonstrate the effectiveness of the
proposed method in improving the accuracy and the compactness of neural architectures.
Acknowledgments
This work was partially supported by Guangdong Provincial Scientiﬁc and Technological Funds
under Grants 2018B010107001, National Natural Science Foundation of China (NSFC) (No.
61602185), key project of NSFC (No. 61836003), Fundamental Research Funds for the Central
Universities (No. D2191240), Program for Guangdong Introducing Innovative and Enterpreneurial
Teams 2017ZT07X183, Tencent AI Lab Rhino-Bird Focused Research Program (No. JR201902),
Guangdong Special Branch Plans Young Talent with Scientiﬁc and Technological Innovation (No.
2016TQ03X445), Guangzhou Science and Technology Planning Project (No. 201904010197), and
Microsoft Research Asia (MSRA Collaborative Research Program). We last thank Tencent AI Lab.