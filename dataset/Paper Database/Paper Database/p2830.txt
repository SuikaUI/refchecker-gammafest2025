Normalized Cuts and Image Segmentation
Jianbo Shi and Jitendra Malik, Member, IEEE
AbstractÐWe propose a novel approach for solving the perceptual grouping problem in vision. Rather than focusing on local features
and their consistencies in the image data, our approach aims at extracting the global impression of an image. We treat image
segmentation as a graph partitioning problem and propose a novel global criterion, the normalized cut, for segmenting the graph. The
normalized cut criterion measures both the total dissimilarity between the different groups as well as the total similarity within the
groups. We show that an efficient computational technique based on a generalized eigenvalue problem can be used to optimize this
criterion. We have applied this approach to segmenting static images, as well as motion sequences, and found the results to be very
encouraging.
Index TermsÐGrouping, image segmentation, graph partitioning.
INTRODUCTION
EARLY 75 years ago, Wertheimer pointed out the
importance of perceptual grouping and organization
in vision and listed several key factors, such as similarity,
proximity, and good continuation, which lead to visual
grouping. However, even to this day, many of the
computational issues of perceptual grouping have remained unresolved. In this paper, we present a general
framework for this problem, focusing specifically on the
case of image segmentation.
Since there are many possible partitions of the domain I
of an image into subsets, how do we pick the ªrightº one?
There are two aspects to be considered here. The first is that
there may not be a single correct answer. A Bayesian view is
appropriateÐthere are several possible interpretations in
the context of prior world knowledge. The difficulty, of
course, is in specifying the prior world knowledge. Some of
it is low level, such as coherence of brightness, color,
texture, or motion, but equally important is mid- or highlevel knowledge about symmetries of objects or object
models. The second aspect is that the partitioning is
inherently hierarchical. Therefore, it is more appropriate
to think of returning a tree structure corresponding to a
hierarchical partition instead of a single ªflatº partition.
This suggests that image segmentation based on lowlevel cues cannot and should not aim to produce a complete
final ªcorrectº segmentation. The objective should instead
be to use the low-level coherence of brightness, color, texture, or
motion attributes to sequentially come up with hierarchical
partitions. Mid- and high-level knowledge can be used to
either confirm these groups or select some for further
attention. This attention could result in further repartitioning or grouping. The key point is that image partitioning is
to be done from the big picture downward, rather like a
painter first marking out the major areas and then filling in
the details.
Prior literature on the related problems of clustering,
grouping and image segmentation is huge. The clustering
community has offered us agglomerative and divisive
algorithms; in image segmentation, we have region-based
merge and split algorithms. The hierarchical divisive
approach that we advocate produces a tree, the dendrogram.
While most of these ideas go back to the 1970s (and earlier),
the 1980s brought in the use of Markov Random Fields 
and variational formulations , , . The MRF and
variational formulations also exposed two basic questions:
What is the criterion that one wants to optimize?
Is there an efficient algorithm for carrying out the
optimization?
Many an attractive criterion has been doomed by the
inability to find an effective algorithm to find its minimumÐgreedy or gradient descent type approaches fail to
find global optima for these high-dimensional, nonlinear
Our approach is most related to the graph theoretic
formulation of grouping. The set of points in an arbitrary
feature space are represented as a weighted undirected
graph GG 
VV ; EE, where the nodes of the graph are the
points in the feature space, and an edge is formed between
every pair of nodes. The weight on each edge, w
ii; jj, is a
function of the similarity between nodes ii and jj.
In grouping, we seek to partition the set of vertices into
disjoint sets V1; V2; . . . ; Vm, where by some measure the
similarity among the vertices in a set Vi is high and, across
different sets Vi, Vj is low.
To partition a graph, we need to also ask the following
questions:
What is the precise criterion for a good partition?
How can such a partition be computed efficiently?
In the image segmentation and data clustering community, there has been much previous work using variations of
the minimal spanning tree or limited neighborhood set
approaches. Although those use efficient computational
IEEE TRANSACTIONS ON PATTERN ANALYSIS AND MACHINE INTELLIGENCE,
AUGUST 2000
. J. Shi is with the Robotics Institute, Carnegie Mellon University, 5000
Forbes Ave., Pittsburgh, PA 15213. E-mail: 
. J. Malik is with the Electrical Engineering and Computer Science Division,
University of California at Berkeley, Berkeley, CA 94720.
E-mail: .
Manuscript received 4 Feb. 1998; accepted 16 Nov. 1999.
Recommended for acceptance by M. Shah.
For information on obtaining reprints of this article, please send e-mail to:
 , and reference IEEECS Log Number 107618.
0162-8828/00/$10.00 ß 2000 IEEE
methods, the segmentation criteria used in most of them are
based on local properties of the graph. Because perceptual
grouping is about extracting the global impressions of a
scene, as we saw earlier, this partitioning criterion often
falls short of this main goal.
In this paper, we propose a new graph-theoretic criterion
for measuring the goodness of an image partitionÐthe
normalized cut. We introduce and justify this criterion in
Section 2. The minimization of this criterion can be
formulated as a generalized eigenvalue problem. The
eigenvectors can be used to construct good partitions of
the image and the process can be continued recursively as
desired (Section 2.1). Section 3 gives a detailed explanation
of the steps of our grouping algorithm. In Section 4, we
show experimental results. The formulation and minimization of the normalized cut criterion draws on a body of
results from the field of spectral graph theory (Section 5).
Relationship to work in computer vision is discussed in
Section 6 and comparison with related eigenvector based
segmentation methods is represented in Section 6.1. We
conclude in Section 7.
The main results in this paper were first presented in .
GROUPING AS GRAPH PARTITIONING
A graph G 
V; E can be partitioned into two disjoint
sets, A; B, A [ B  V , A \ B  ;, by simply removing edges
connecting the two parts. The degree of dissimilarity
between these two pieces can be computed as total weight
of the edges that have been removed. In graph theoretic
language, it is called the cut:
The optimal bipartitioning of a graph is the one that
minimizes this cut value. Although there are an exponential
number of such partitions, finding the minimum cut of a
graph is a well-studied problem and there exist efficient
algorithms for solving it.
Wu and Leahy proposed a clustering method based
on this minimum cut criterion. In particular, they seek to
partition a graph into k-subgraphs such that the maximum
cut across the subgroups is minimized. This problem can be
efficiently solved by recursively finding the minimum cuts
that bisect the existing segments. As shown in Wu and
Leahy's work, this globally optimal criterion can be used to
produce good segmentation on some of the images.
However, as Wu and Leahy also noticed in their work,
the minimum cut criteria favors cutting small sets of
isolated nodes in the graph. This is not surprising since
the cut defined in (1) increases with the number of edges
going across the two partitioned parts. Fig. 1 illustrates one
such case. Assuming the edge weights are inversely
proportional to the distance between the two nodes, we
see the cut that partitions out node n1 or n2 will have a very
small value. In fact, any cut that partitions out individual
nodes on the right half will have smaller cut value than the
cut that partitions the nodes into the left and right halves.
To avoid this unnatural bias for partitioning out small
sets of points, we propose a new measure of disassociation
between two groups. Instead of looking at the value of total
edge weight connecting the two partitions, our measure
computes the cut cost as a fraction of the total edge
connections to all the nodes in the graph. We call this
disassociation measure the normalized cut (Ncut):
A; B  cut
A; V   cut
where assoc
A; V   P
u; t is the total connection
from nodes in A to all nodes in the graph and assoc
similarly defined. With this definition of the disassociation
between the groups, the cut that partitions out small
isolated points will no longer have small Ncut value, since
the cut value will almost certainly be a large percentage of
the total connection from that small set to all other nodes. In
the case illustrated in Fig. 1, we see that the cut1 value
across node n1 will be 100 percent of the total connection
from that node.
In the same spirit, we can define a measure for total
normalized association within groups for a given partition:
A; B  assoc
A; V   assoc
where assoc
A; A and assoc
B; B are total weights of
edges connecting nodes within A and B, respectively. We
see again this is an unbiased measure, which reflects how
tightly on average nodes within the group are connected to
each other.
Another important property of this definition of association and disassociation of a partition is that they are
naturally related:
A; B  cut
A; V   cut
A; V  ÿ assoc
B; V  ÿ assoc
A; V   assoc
 2 ÿ Nassoc
Hence, the two partition criteria that we seek in our
grouping algorithm, minimizing the disassociation between
the groups and maximizing the association within the
SHI AND MALIK: NORMALIZED CUTS AND IMAGE SEGMENTATION
Fig. 1. A case where minimum cut gives a bad partition.
groups, are in fact identical and can be satisfied simultaneously. In our algorithm, we will use this normalized cut
as the partition criterion.
Unfortunately, minimizing normalized cut exactly is NPcomplete, even for the special case of graphs on grids. The
proof, due to Papadimitriou, can be found in Appendix A.
However, we will show that, when we embed the normalized cut problem in the real value domain, an approximate
discrete solution can be found efficiently.
Computing the Optimal Partition
Given a partition of nodes of a graph, V, into two sets A and
B, let xx be an N  jVV j dimensional indicator vector, xi  1 if
node i is in A and ÿ1, otherwise. Let dd
i; j be the
total connection from node ii to all other nodes. With the
definitions xx and dd, we can rewrite Ncut
A; B  cut
A; V   cut
xxi>0;xxj<0 ÿwijxxixxj
xxi<0;xxj>0 ÿwijxxixxj
Let D be an N  N diagonal matrix with dd on its diagonal,
W be an N  N symmetrical matrix with W
i; j  wij,
and 1 be an N  1 vector of all ones. Using the fact 11xx
are indicator vectors for xi > 0 and xi < 0, respectively,
we can rewrite 4Ncut
1 ÿ k1TD1
D ÿ Wxx  1T
1 ÿ k1TD1
1 ÿ k1TD1
we can then further expand the above equation as:
Dropping the last constant term, which in this case equals 0,
1 ÿ 2k  2k2
Letting b 
1ÿk , and since
 0, it becomes
D ÿ Wxx  1T
1  xx ÿ b
1  xx ÿ b
Setting yy 
1  xx ÿ b
1 ÿ xx, it is easy to see that
xi<0 ddi and
ddi  b2 X
ddi  b2 X
Putting everything together we have,
xx  minyy
with the condition yy
i 2 f1; ÿbg and yyTD1  0.
Note that the above expression is the Rayleigh quotient
 . If yy is relaxed to take on real values, we can minimize
(5) by solving the generalized eigenvalue system,
D ÿ Wyy  Dyy:
However, we have two constraints on yy which come from
the condition on the corresponding indicator vector xx. First,
consider the constraint yyTD1  0. We can show this
constraint on yy is automatically satisfied by the solution of
the generalized eigensystem. We will do so by first
IEEE TRANSACTIONS ON PATTERN ANALYSIS AND MACHINE INTELLIGENCE,
AUGUST 2000
transforming (6) into a standard eigensystem and showing
the corresponding condition is satisfied there. Rewrite (6) as
2zz  zz;
where zz  D
2yy. One can easily verify that zz0  D
eigenvector of (7) with eigenvalue of 0. Furthermore,
2 is symmetric positive semidefinite since
D ÿ W, also called the Laplacian matrix, is known to be
positive semidefinite . Hence, zz0 is, in fact, the smallest
eigenvector of (7) and all eigenvectors of (7) are perpendicular to each other. In particular, zz1, the second smallest
eigenvector, is perpendicular to zz0. Translating this statement back into the general eigensystem (6), we have:
1) yy0  1 is the smallest eigenvector with eigenvalue of 0
and 2) 0  zzT
1 zz0  yyT
1 D1, where yy1 is the second smallest
eigenvector of (6).
Now, recall a simple fact about the Rayleigh quotient :
Let A be a real symmetric matrix. Under the constraint that
xx is orthogonal to the j-1 smallest eigenvectors xx1; . . . ; xxjÿ1,
the quotient
is minimized by the next smallest
eigenvector xxj and its minimum value is the corresponding
eigenvalue j.
As a result, we obtain:
zz1  arg:minzzT zz00
and, consequently,
yy1  arg:minyyT D10
Thus, the second smallest eigenvector of the generalized
eigensystem (6) is the real valued solution to our normalized cut problem. The only reason that it is not necessarily
the solution to our original problem is that the second
constraint on yy that yy
i takes on two discrete values is not
automatically satisfied. In fact, relaxing this constraint is
what makes this optimization problem tractable in the first
place. We will show in Section 3 how this real valued
solution can be transformed into a discrete form.
A similar argument can also be made to show that the
eigenvector with the third smallest eigenvalue is the real
valued solution that optimally subpartitions the first two
parts. In fact, this line of argument can be extended to show
that one can subdivide the existing graphs, each time using
the eigenvector with the next smallest eigenvalue. However, in practice, because the approximation error from the
real valued solution to the discrete valued solution
accumulates with every eigenvector taken and all eigenvectors have to satisfy a global mutual orthogonality
constraint, solutions based on higher eigenvectors become
unreliable. It is best to restart solving the partitioning
problem on each subgraph individually.
It is interesting to note that, while the second smallest
eigenvector yy of (6) only approximates the optimal normalized cut solution, it exactly minimizes the following
infyyT D10
in real-valued domain, where d
i; i. Roughly
speaking, this forces the indicator vector yy to take similar
values for nodes i and j that are tightly coupled (large wij).
In summary, we propose using the normalized cut
criterion for graph partitioning and we have shown how
this criterion can be computed efficiently by solving a
generalized eigenvalue problem.
THE GROUPING ALGORITHM
Our grouping algorithm consists of the following steps:
Given an image or image sequence, set up a
weighted graph G 
V; E and set the weight on
the edge connecting two nodes to be a measure of
the similarity between the two nodes.
D ÿ Wxx  Dxx for eigenvectors with the
smallest eigenvalues.
Use the eigenvector with the second smallest
eigenvalue to bipartition the graph.
Decide if the current partition should be subdivided
and recursively repartition the segmented parts if
necessary.
The grouping algorithm, as well as its computational
complexity, can be best illustrated by using the following
Example: Brightness Images
Fig. 2 shows an image that we would like to segment. The
steps are:
Construct a weighted graph G 
V; E by taking
each pixel as a node and connecting each pair of
pixels by an edge. The weight on that edge should
reflect the likelihood that the two pixels belong to
one object. Using just the brightness value of the
pixels and their spatial location, we can define the
graph edge weight connecting the two nodes i and j
otherwise:
Solve for the eigenvectors with the smallest eigenvalues of the system
D ÿ Wyy  Dyy:
As we saw above, the generalized eigensystem in
(12) can be transformed into a standard eigenvalue
problem of
2xx  xx:
Solving a standard eigenvalue problem for all
eigenvectors takes O
n3 operations, where n is the
number of nodes in the graph. This becomes
impractical for image segmentation applications
where n is the number of pixels in an image.
SHI AND MALIK: NORMALIZED CUTS AND IMAGE SEGMENTATION
Fortunately, our graph partitioning has the following properties: 1) The graphs are often only locally
connected and the resulting eigensystems are very
sparse, 2) only the top few eigenvectors are needed
for graph partitioning, and 3) the precision requirement for the eigenvectors is low, often only the right
sign bit is required. These special properties of our
problem can be fully exploited by an eigensolver
called the Lanczos method. The running time of a
Lanczos algorithm is O
where m is the maximum number of matrix-vector
computations required and M
n is the cost of a
matrix-vector
computation
2. Note that the sparsity structure of A is identical to that of the weight matrix W.
Since W is sparse, so is A and the matrix-vector
computation is only O
To see why this is the case, we will look at the cost
of the inner product of one row of AA with a vector x.
Let yi  AAi  x  P
j AAijxj. For a fixed i, AAij is only
nonzero if node j is in a spatial neighborhood of i.
Hence, there are only a fixed number of operations
required for each AAi  x and the total cost of
computing AAx is O
The constant factor is determined by the size of
the spatial neighborhood of a node. It turns out that
we can substantially cut down additional connections from each node to its neighbors by randomly
selecting the connections within the neighborhood
for the weighted graph. Empirically, we have found
that one can remove up to 90 percent of the total
connections with each of the neighborhoods when
the neighborhoods are large without affecting the
eigenvector solution to the system.
Putting everything together, each of the matrixvector computations cost O
n operations with a
small constant factor. The number m depends on
many factors . In our experiments on image
segmentation, we observed that m is typically less
Fig. 3 shows the smallest eigenvectors computed
for the generalized eigensystem with the weight
matrix defined above.
Once the eigenvectors are computed, we can partition the graph into two pieces using the second
smallest eigenvector. In the ideal case, the eigenvector should only take on two discrete values and the
signs of the values can tell us exactly how to
partition the graph. However, our eigenvectors can
take on continuous values and we need to choose a
splitting point to partition it into two parts. There are
many different ways of choosing such a splitting
point. One can take 0 or the median value as the
splitting point or one can search for the splitting
point such that the resulting partition has the best
A; B value. We take the latter approach in our
work. Currently, the search is done by checking l
evenly spaced possible splitting points, and computing the best Ncut among them. In our experiments,
the values in the eigenvectors are usually well
separated and this method of choosing a splitting
point is very reliable even with a small l.
After the graph is broken into two pieces, we can
recursively run our algorithm on the two partitioned
parts. Or, equivalently, we could take advantage of
the special properties of the other top eigenvectors as
explained in the previous section to subdivide the
graph based on those eigenvectors. The recursion
stops once the Ncut value exceeds certain limit.
We also impose a stability criterion on the
partition. As we saw earlier, and as we see in the
eigenvectors with the seventh to ninth smallest
eigenvalues (Fig. 3g-h), sometimes an eigenvector
can take on the shape of a continuous function,
rather that the discrete indicator function that we
seek. From the view of segmentation, such an
eigenvector is attempting to subdivide an image
region where there is no sure way of breaking it. In
fact, if we are forced to partition the image based on
this eigenvector, we will see there are many different
splitting points which have similar Ncut values.
Hence, the partition will be highly uncertain and
unstable. In our current segmentation scheme, we
simply choose to ignore all those eigenvectors which
have smoothly varying eigenvector values. We
achieve this by imposing a stability criterion which
measures the degree of smoothness in the eigenvector values. The simplest measure is based on first
computing the histogram of the eigenvector values
and then computing the ratio between the minimum
and maximum values in the bins. When the
eigenvector values are continuously varying, the
values in the histogram bins will stay relatively the
same and the ratio will be relatively high. In our
experiments, we find that simple thresholding on the
ratio described above can be used to exclude
unstable eigenvectors. We have set that value to be
0.06 in all our experiments.
Fig. 4 shows the final segmentation for the image
shown in Fig. 2.
Recursive Two-Way Ncut
In summary, our grouping algorithm consists of the
following steps:
IEEE TRANSACTIONS ON PATTERN ANALYSIS AND MACHINE INTELLIGENCE,
AUGUST 2000
Fig. 2. A gray level image of a baseball game.
Given a set of features, set up a weighted graph
V; E, compute the weight on each edge, and
summarize the information into W and D.
D ÿ Wxx  Dxx for eigenvectors with the
smallest eigenvalues.
Use the eigenvector with the second smallest
eigenvalue to bipartition the graph by finding the
splitting point such that Ncut is minimized.
Decide if the current partition should be subdivided
by checking the stability of the cut, and make sure
Ncut is below the prespecified value.
Recursively repartition the segmented parts if
necessary.
The number of groups segmented by this method is
controlled directly by the maximum allowed Ncut.
Simultanous K-Way Cut with Multiple
Eigenvectors
One drawback of the recursive 2-way cut is its treatment of
the oscillatory eigenvectors. The stability criteria keeps us
from cutting oscillatory eigenvectors, but it also prevents us
cutting the subsequent eigenvectors which might be perfect
partitioning vectors. Also, the approach is computationally
wasteful; only the second eigenvector is used, whereas the
next few small eigenvectors also contain useful partitioning
information.
Instead of finding the partition using recursive 2-way cut
as described above, one can use all of the top eigenvectors
to simultanously obtain a K-way partition. In this method,
the n top eigenvectors are used as n dimensional indicator
vectors for each pixel. In the first step, a simple clustering
algorithm, such as the k-means algorithm, is used to obtain
an oversegmentation of the image into k0 groups. No
attempt is made to identify and exclude oscillatory
eigenvectorsÐthey exacerbate the oversegmentation, but
that will be dealt with subsequently.
In the second step, one can proceed in the following two
Greedy pruning: Iteratively merge two segments at a
time until only k segments are left. At each merge
step, those two segments are merged that minimize
the k-way Ncut criterion defined as:
Ncutk  cut
A1; V ÿ A1
A2; V ÿ A2
Ak; A ÿ Ak
SHI AND MALIK: NORMALIZED CUTS AND IMAGE SEGMENTATION
Fig. 3. Subplot (a) plots the smallest eigenvectors of the generalized eigenvalue system (11). Subplots (b)-(i) show the eigenvectors corresponding
the second smallest to the ninth smallest eigenvalues of the system. The eigenvectors are reshaped to be the size of the image.
where Ai is the ith subset of whole set V.
This computation can be efficiently carried out by
iteratively updating the compacted weight matrix
Wc, with Wc
i; j  assoc
Global recursive cut. From the initial k0 segments, we
can build a condensed graph Gc 
Vc; Ec, where
each segment Ai corresponds to a node Vc
graph. The weight on each graph edge Wc
defined to be assoc
Ai; Aj, the total edge weights
from elements in Ai to elements in Aj. From this
condensed graph, we then recursively bipartition the
graph according the Ncut criterion. This can be
carried out either with the generalized eigenvalue
system, as in Section 3.2, or with exhaustive search
in the discrete domain. Exhaustive search is possible
in this case since k0 is small, typically k0  100.
We have experimented with this simultanous k-way cut
method on our recent test images. However, the results
presented in this paper are all based on the recursive 2-way
partitioning algorithm outlined in Section 3.2.
EXPERIMENTS
We have applied our grouping algorithm to image
segmentation based on brightness, color, texture, or motion
information. In the monocular case, we construct the graph
V; E by taking each pixel as a node and define the
edge weight wij between node i and j as the product of a
feature similarity term and spatial proximity term:
otherwise;
i is the spatial location of node i, and FF
feature vector based on intensity, color, or texture information at that node defined as:
i  1, in the case of segmenting point sets,
i, the intensity value, for segmenting
brightness images,
i  v; v  s  sin
h; v  s  cos
i, where h; s; v
are the HSV values, for color segmentation,
i  jII  f1j; . . . ; jII  fnj
DOOG filters at various scales and orientations as
used in , in the case of texture segmentation.
Note that the weight wij  0 for any pair of nodes i and j
that are more than r pixels apart.
We first tested our grouping algorithm on spatial point
sets. Fig. 5 shows a point set and the segmentation result.
The normalized cut criterion is indeed able to partition the
point set in a desirable way.
Figs. 4, 6, 7, and 8 show the result of our segmentation
algorithm on various brightness images. Figs. 6 and 7 are
synthetic images with added noise. Figs. 4 and 8 are natural
images. Note that the ªobjectsº in Fig. 8 have rather illdefined boundaries, which would make edge detection
perform poorly. Fig. 9 shows the segmentation on a color
image, reproduced in gray scale in these transactions. The
original image and many other examples can be found at
web site 
Note that, in all these examples, the algorithm is able to
extract the major components of scene while ignoring small
intracomponent variations. As desired, recursive partitioning can be used to further decompose each piece.
Fig. 10 shows preliminary results on texture segmentation for a natural image of a zebra against a background.
Note that the measure we have used is orientation-variant
and, therefore, parts of the zebra skin with different stripe
orientation should be marked as separate regions.
In the motion case, we will treat the image sequence as a
spatiotemporal data set. Given an image sequence, a
weighted graph is constructed by taking each pixel in the
image sequence as a node and connecting pixels that are in
the spatiotemporal neighborhood of each other. The weight
on each graph edge is defined as:
IEEE TRANSACTIONS ON PATTERN ANALYSIS AND MACHINE INTELLIGENCE,
AUGUST 2000
Fig. 4. (a) shows the original image of size 80  100. Image intensity is normalized to lie within 0 and 1. Subplots (b)-(h) show the components of the
partition with Ncut value less than 0.04. Parameter setting: I  0:1, X  4:0, r  5.
otherwise;
i; j is the ªmotion distanceº between two pixels i
and j. Note that XXi in this case represents the spatialtemporal position of pixel i.
To compute this ªmotion distance,º we will use a motion
feature called motion profile. By motion profile we seek to
estimate the probability distribution of image velocity at
each pixel. Let IIt
X denote a image window centered at
the pixel at location X 2 R2 at time t. We denote by Pi
the motion profile of an image patch at node i, IIt
Xi, at time
t corresponding to another image patch IIt1
Xi  dx at
time t  1. Pi
dx can be estimated by first computing the
similarity Si
dx between IIt
Xi and IIt1
Xi  dx and
normalizing it to get a probability distribution:
There are many ways one can compute similarity between
two image patches; we will use a measure that is based on
the sum of squared differences (SSD):
Xi  dx  w2=2
where w 2 R2 is within a local neighborhood of image
Xi. The ªmotion distanceº between two image
pixels is then defined as one minus the cross-correlation of
the motion profiles:
i; j  1 ÿ
In Fig. 11, we show results of the normalized cut algorithm
on a synthetic random dot motion sequence and a indoor
motion sequence, respectively. For more elaborate discussion
on motion segmentation using normalized cut, as well as how
to segment and track over long image sequences, readers
might want to refer to our paper .
Computation Time
As we saw from Section 3.1, the running time of the
normalized cut algorithm is O
mn, where n is the number
SHI AND MALIK: NORMALIZED CUTS AND IMAGE SEGMENTATION
Fig. 5. (a) Point set generated by two Poisson processes, with densities of 2.5 and 1.0 on the left and right clusters respectively, (b) 4 and  indicate
the partition of point set in (a). Parameter settings: X  5, r  3.
Fig. 6. (a) A synthetic image showing a noisy ªstepº image. Intensity varies from 0 to 1, and Gaussian noise with   0:2 is added. Subplot (b) shows
the eigenvector with the second smallest eigenvalue and subplot (c) shows the resulting partition.
Fig. 7. (a) A synthetic image showing three image patches forming a junction. Image intensity varies from 0 to 1 and Gaussian noise with   0:1 is
added. (b)-(d) show the top three components of the partition.
of pixels and m is the number of steps Lanczos takes to
converge. On the 100  120 test images shown here, the
normalized cut algorithm takes about 2 minutes on Intel
Pentium 200MHz machines.
A multiresolution implementation can be used to reduce
this running time further on larger images. In our current
experiments, with this implementation, the running time on
a 300  400 image can be reduced to about 20 seconds on
Intel Pentium 300MHz machines. Furthermore, the bottleneck of the computation, a
sparse matrix-vector
multiplication step, can be easily parallelized taking
advantage of future computer chip designs.
In our current implementation, the sparse eigenvalue
decomposition is computed using the LASO2 numerical
package developed by Scott.
Choice of Graph Edge Weight
In the examples shown here, we used an exponential
function of the form of w
x=2 on the weighted
graph edge with feature similarity of d
x. The value of  is
IEEE TRANSACTIONS ON PATTERN ANALYSIS AND MACHINE INTELLIGENCE,
AUGUST 2000
Fig. 8. (a) shows a 126  106 weather radar image. (b)-(g) show the components of the partition with Ncut value less than 0.08. Parameter setting:
I  0:007, x  15:0, r  10.
Fig. 9. (a) shows a 77  107 color image. (b)-(e) show the components of the partition with Ncut value less than 0.04. Parameter settings: I  0:01,
X  4:0, r  5.
Fig. 10. (a) shows an image of a zebra. The remaining images show the major components of the partition. The texture features used correspond to
convolutions with DOOG filters at six orientations and five scales.
typically set to 10 to 20 percent of the total range of the
feature distance function d
x. The exponential weighting
function is chosen here for its relative simplicity, as well as
neutrality, since the focus of this paper is on developing a
general segmentation procedure, given a feature similarity
measure. We found this choice of weight function is quite
adequate for typical image and feature spaces. Section 6.1
shows the effect of using different weighting functions and
parameters on the output of the normalized cut algorithm.
However, the general problem of defining feature
similarity incorporating a variety of cues is not a trivial
one. The grouping cues could be of different abstraction
levels and types and they could be in conflict with each
other. Furthermore, the weighting function could vary from
image region to image region, particularly in a textured
image. Some of these issues are addressed in .
RELATIONSHIP TO SPECTRAL GRAPH THEORY
The computational approach that we have developed for
image segmentation is based on concepts from spectral
graph theory. The core idea is to use matrix theory and
linear algebra to study properties of the incidence matrix,
W, and the Laplacian matrix, D ÿ W, of the graph and
relate them back to various properties of the original graph.
This is a rich area of mathematics and the idea of using
eigenvectors of the Laplacian for finding partitions of
graphs can be traced back to Cheeger , Donath and
Hoffman , and Fiedler . This area has also seen
contributions by theoretical computer scientists , ,
 , . It can be shown that our notion of normalized
cut is related by a constant factor to the concept of
conductance in .
For a tutorial introduction to spectral graph theory, we
recommend the recent monograph by Chung . In this
monograph, Chung proposes a ªnormalizedº definition of
the Laplacian, as Dÿ1
2. The eigenvectors for this
ªnormalizedº Laplacian, when multiplied by Dÿ1
exactly the generalized eigenvectors we used to compute
normalized cut. Chung points out that the eigenvalues of
this ªnormalizedº Laplacian relate well to graph invariants
for general graph in ways that eigenvalues of the standard
Laplacian have failed to do.
Spectral graph theory provides us some guidance on the
goodness of the approximation to the normalized cut
provided by the second eigenvalue of the normalized
Laplacian. One way is through bounds on the normalized
Cheeger constant which, in our terminology, can be
defined as
A; V ; assoc
The eigenvalues of (6) are related to the Cheeger constant by
the inequality :
2hG  1 > h2
Earlier work on spectral partitioning used the second
eigenvectors of the Laplacian of the graph defined as D ÿ W
to partition a graph. The second smallest eigenvalue of
D ÿ W is sometimes known as the Fiedler value. Several
results have been derived relating the ratio cut and the
Fiedler value. A ratio cut of a partition of V , P 
A; V ÿ A,
which, in fact, is the standard definition of the Cheeger
constant, is defined as
jAj;jV ÿAj . It was shown that if the
Fiedler value is small, partitioning the graph based on the
Fiedler vector will lead to good ratio cut , . Our
derivation in Section 2.1 can be adapted (by replacing the
matrix D in the denominators by the identity matrix I) to
show that the Fiedler vector is a real valued solution to the
problem of minAV
, which we can call
the average cut.
Although average cut looks similar to the normalized cut,
average cut does not have the important property of having a
SHI AND MALIK: NORMALIZED CUTS AND IMAGE SEGMENTATION
Fig. 11. Subimages (a) and (b) show two frames of an image sequence. Segmentation results on this two frame image sequence are shown in
subimages (c) to (g). Segments in (c) and (d) correspond to the person in the foreground and segments in (e) to (g) correspond to the background.
The reason that the head of the person is segmented away from the body is that, although they have similar motion, their motion profiles are
different. The head region contains 2D textures and the motion profiles are more peaked, while, in the body region, the motion profiles are more
spread out. Segment (e) is broken away from (f) and (g) for the same reason.
simple relationship to the average association, which can be
analogously defined as
V ÿA;V ÿA
. Consequently, one cannot simultaneously minimize the disassociation across the partitions while maximizing the
association within the groups. When we applied both
techniques to the image segmentation problem, we found
that the normalized cut produces better results in practice.
There are also other explanations why the normalized cut has
better behavior from graph theoretical point of view, as
pointed out by Chung .
Our work, originally presented in , represents the
first application of spectral partitioning to computer vision
or image analysis. There is, however, one application area
that has seen substantial application of spectral partitioningÐthe area of parallel scientific computing. The problem there is to balance the workload over multiple
processors taking into account communication needs. One
of the early papers is . The generalized eigenvalue
approach was first applied to graph partitioning by for
dynamically balancing computational load in a parallel
computer. Their algorithm is motivated by 's paper on
representing a hypergraph in a Euclidean space.
The normalized cut criteria is also closely related to key
properties of a Markov Random Walk. The similarity matrix
W can be normalized to define a probability transition
matrix P of a random walk on the pixels. It can be shown
that the conductance of this random walk is the
normalized cut value and the normalized cut vectors of (12)
are exactly the right eigenvectors of P.
A Physical Interpretation
As one might expect, a physical analogy can be set up for
the generalized eigenvalue system (6) that we used to
approximate the solution of normalized cut. We can
construct a spring-mass system from the weighted graph
by taking graph nodes as physical nodes and graph edges
as springs connecting each pair of nodes. Furthermore, we
will define the graph edge weight as the spring stiffness and
the total edge weights connecting to a node as its mass.
Imagine what would happen if we were to give a hard
shake to this spring-mass system, forcing the nodes to
oscillate in the direction perpendicular to the image plane.
Nodes that have stronger spring connections among them
will likely oscillate together. As the shaking becomes more
violent, weaker springs connecting to this group of node
will be overstretched. Eventually, the group will ªpopº off
from the image plane. The overall steady state behavior of
the nodes can be described by its fundamental mode of
oscillation. In fact, it can be shown that the fundamental
modes of oscillation of this spring mass system are exactly
the generalized eigenvectors of (6).
Let kij be the spring stiffness connecting nodes i and j.
Define K to be the n  n stiffness matrix, with K
i kij and K
i; j  ÿkij. Define the diagonal n  n mass
matrix M as M
i kij. Let x
t be the n  1 vector
describing the motion of each node. This spring-mass
dynamic system can be described by:
t  vkcos
!kt  , the steady state solutions of this
spring-mass system satisfy:
analogous to (6) for normalized cut.
Each solution pair
!k; vk of (21) describes a fundamental
mode of the spring-mass system. The eigenvectors vk give
the steady state displacement of the oscillation in each
mode and the eigenvalues !2
k give the energy required to
sustain each mode of oscillation. Therefore, finding graph
partitions that have small normalized cut values is, in effect,
the same as finding a way to ªpopº off image regions with
minimal effort.
RELATIONSHIP TO OTHER GRAPH THEORETIC
APPROACHES TO IMAGE SEGMENTATION
In the computer vision community, there has been some
been previous work on image segmentation formulated as a
graph partition problem. Wu and Leahy use the
minimum cut criterion for their segmentation. As mentioned
earlier, our criticism of this criterion is that it tends to favor
cutting off small regions, which is undesirable in the context
of image segmentation. In an attempt to get more balanced
partitions, Cox et al. seek to minimize the ratio
A ; A  V , where weight
A is some function of the
set A. When weight
A is taken to be the sum of the
elements in A, we see that this criterion becomes one of the
terms in the definition of average cut above. Cox et al. use an
efficient discrete algorithm to solve their optimization
problem assuming the graph is planar.
Sarkar and Boyer use the eigenvector with the
largest eigenvalue of the system Wxx  xx for finding the
most coherent region in an edge map. Using a similar
derivation as in Section 2.1, we can see that the first largest
eigenvector of their system approximates minAV
and the second largest eigenvector approximates
minAV ;BV
. However, the approximation is not tight and there is no guarantee that A  B  V .
As we will see later in the section, this situation can happen
quite often in practice. Since this algorithm is essentially
looking for clusters that have tight within-grouping
similarity, we will call this criteria average association.
Comparison with Related Eigenvector-Based
The normalized cut formulation has a certain resemblance to
the average cut, the standard spectral graph partitioning, as
well as average association formulation. All three of these
algorithms can be reduced to solving certain eigenvalue
systems. How are they related to each other?
Fig. 12 summarizes the relationship between these three
algorithms. On one hand, both the normalized cut and the
average cut algorithm are trying to find a ªbalanced
partitionº of a weighted graph, while, on the other hand,
IEEE TRANSACTIONS ON PATTERN ANALYSIS AND MACHINE INTELLIGENCE,
AUGUST 2000
the normalized association and the average association are
trying to find ªtightº clusters in the graph. Since the
normalized association is exactly 2 ÿ ncut, the normalized cut
value, the normalized cut formulation seeks a balance
between the goal of clustering and segmentation. It is,
therefore, not too surprising to see that the normalized cut
vector can be approximated with the generalized eigenvector of
D ÿ Wx  Dx, as well as that of Wx  Dx.
Judging from the discrete formulations of these three
grouping criteria, it can be seen that the average association,
, has a bias for finding tight clusters.
Therefore, it runs the risk of becoming too greedy in finding
small, but tight, clusters in the data. This might be perfect
for data that are Gaussian distributed. However, for typical
data in the real world that are more likely to be made up of
a mixture of various different types of distributions, this
bias in grouping will have undesired consequences, as we
shall illustrate in the examples below.
For average cut, cut
, the opposite problem
arisesÐone cannot ensure the two partitions computed will
have tight within-group similarity. This becomes particularly problematic if the dissimilarity among the different
groups varies from one to another, or if there are several
possible partitions all with similar average cut values.
To illustrate these points, let us first consider a set of
randomly distributed data in 1D shown in Fig. 13. The 1D
data is made up by two subsets of points, one randomly
distributed from 0 to 0.5 and the other from 0.65 to 1.0. Each
data point is taken as a node in the graph and the weighted
graph edge connecting two points is defined to be inversely
proportional to the distance between two nodes. We will
use three monotonically decreasing weighting functions,
x, defined on the distance function, d
different rate of fall-off. The three weighting functions are
plotted in Figs. 14a, 15a, and 16a.
The first function, w
0:1 2, plotted in Fig. 14a, has
the fastest decreasing rate among the three. With this
weighting function, only close-by points are connected, as
shown in the graph weight matrix W plotted in Fig. 14b. In
this case, average association fails to find the right partition.
Instead, it focuses on finding small clusters in each of the
two main subgroups.
The second function, w
x  1 ÿ d
x, plotted in Fig. 15a,
has the slowest decreasing rate among the three. With this
weighting function, most points have some nontrivial
connections to the rest. To find a cut of the graph, a number
of edges with heavy weights have to be removed. In
addition, the cluster on the right has less within-group
similarity comparing with the cluster on the left. In this
case, average cut has trouble deciding on where to cut.
The third function, w
0:2 , plotted in Fig. 16a, has a
moderate decreasing rate. With this weighting function, the
nearby point connections are balanced against far-away
point connections. In this case, all three algorithms perform
well with normalized cut, producing a clearer solution than
the two other methods.
These problems, illustrated in Figs. 14, 15, and 16, in fact
are quite typical in segmenting real natural images. This is
particularly true in the case of texture segmentation.
Different texture regions often have very different withingroup similarity or coherence. It is very difficult to
predetermine the right weighting function on each image
region. Therefore, it is important to design a grouping
algorithm that is more tolerant to a wide range of weighting
functions. The advantage of using normalized cut becomes
more evident in this case. Fig. 17 illustrates this point on a
natural texture image shown previously in Fig. 10.
SHI AND MALIK: NORMALIZED CUTS AND IMAGE SEGMENTATION
Fig. 12. Relationship between normalized cut and other eigenvector-based partitioning techniques. Compared to the average cut and average
association formulation, normalized cut seeks a balance between the goal of finding clumps and finding splits.
Fig. 13. A set of randomly distributed points in 1D. The first 20 points are
randomly distributed from 0.0 to 0.5 and the remaining 12 points are
randomly distributed from 0.65 to 1.0. Segmentation result of these
points with different weighting functions are shown in Figs. 14, 15, and
CONCLUSION
In this paper, we developed a grouping algorithm based on
the view that perceptual grouping should be a process that
aims to extract global impressions of a scene and provides a
hierarchical description of it. By treating the grouping
problem as a graph partitioning problem, we proposed the
normalized cut criteria for segmenting the graph. Normalized cut is an unbiased measure of disassociation between
subgroups of a graph and it has the nice property that
minimizing normalized cut leads directly to maximizing the
normalized association, which is an unbiased measure for
total association within the subgroups. In finding an
efficient algorithm for computing the minimum normalized
cut, we showed that a generalized eigenvalue system
provides a real valued solution to our problem.
A computational method based on this idea has been
developed and applied to segmentation of brightness, color,
and texture images. Results of experiments on real and
synthetic images are very encouraging and illustrate that
the normalized cut criterion does indeed satisfy our initial
goal of extracting the ªbig pictureº of a scene.
IEEE TRANSACTIONS ON PATTERN ANALYSIS AND MACHINE INTELLIGENCE,
AUGUST 2000
Fig. 14. A weighting function with fast rate of fall-off: w
0:1 2, shown in subplot (a) in solid line. The dotted lines show the two alternative
weighting functions used in Figs. 15 and 16. Subplot (b) shows the corresponding graph weight matrix W
W. The two columns (c) and (d) below show
the first, and second extreme eigenvectors for the Normalized cut (row 1), Average cut (row 2), and Average association (row 3). For both
normalized cut and average cut, the smallest eigenvector is a constant vector as predicted. In this case, both normalized cut and average cut
perform well, while the average association fails to do the right thing. Instead, it tries to pick out isolated small clusters.
NP-COMPLETENESS PROOF FOR NORMALIZED CUT
Proposition 1 [Papadimitrou 97]. Normalized Cut (NCUT)
for a graph on regular grids is NP-complete.
Proof. We shall reduce NCUT on regular grids from
PARTITION:
Given integers x1; x2; . . . ; xn adding to 2k, is there
a subset adding to k?
We construct a weighted graph on a regular grid that
has the property that it will have a small enough
normalized cut if and only if we can find a subset from
x1; x2; . . . ; xn adding to k. Fig. 18a shows the graph and
Fig. 18b shows the form that a partition that minimizes
the normalized cut must take.
In comparison to the integers x1; x2; . . . ; xn, M is much
larger, M > 2k2, and a is much smaller, 0 < a < 1=n. We
ask the question
SHI AND MALIK: NORMALIZED CUTS AND IMAGE SEGMENTATION
Fig. 15. A weighting function with slow rate of fall-off: w
x  1 ÿ d
x, shown in subplot (a) in solid line. The dotted lines show the two alternative
weighting functions used in Figs. 14 and 16. Subplot (b) shows the corresponding graph weight matrix W
W. The two columns (c) and (d) below show
the first, and second extreme eigenvectors for the Normalized cut (row 1), Average cut (row 2), and Average association (row 3). In this case, both
normalized cut and average association give the right partition, while the average cut has trouble deciding on where to cut.
Is there a partition with Ncut value less than
where c is half the sum of edge weights in the
graph, c  2M
n  1  k  3a n.
We shall see that a good Ncut partition of the graph must
separate the left and right columns. In particular, if and
only if there is a subset S1  fx1; . . . ; xmg adding to k, by
taking the corresponding edges in the middle column to
be in one side of the partition, as illustrated in Fig. 18b,
we achieve an Ncut value less than
cÿ1=c . For all other
partitions, the Ncut value will be bounded below by
First, let us show that the cut illustrated in Fig. 18b,
where each side has a subset of middle column edges
x1; x2; . . . ; xn that add up to k, does have Ncut value less
cÿ1=c . Let the ncut be the Ncut value for this cut. By
using the formula for Ncut (2.2), we can see that
IEEE TRANSACTIONS ON PATTERN ANALYSIS AND MACHINE INTELLIGENCE,
AUGUST 2000
Fig. 16. A weighting function with medium rate of fall-off: w
0:2 , shown in subplot (a) in solid line. The dotted lines show the two alternative
weighting functions used in Figs. 14 and 15. Subplot (b) shows the corresponding graph weight matrix W
W. The two columns (c) and (d) below show
the first and second extreme eigenvectors for the Normalized cut (row 1), Average cut (row 2), and average association (row 3). All three of these
algorithms perform satisfactorily in this case, with normalized cut producing a clearer solution than the other two cuts.
2k1 ÿ 1 
2k1 ÿ 1 ;
where c is half the total edge weights in the graph,
n  1  k  3a n, and k1n and
1 ÿ k1n are the
number of edges from the middle column on the two
sides of the graph partition, 0 < k1 < 1. The term
2k1 ÿ 1 can be interpreted as the amount of
imbalance between the denominators in the two terms
in the Ncut formula and lies between ÿ1 and 1 (since
0 < a n < 1). Simplifying, we see that
2k1 ÿ 12 < 4a n c
as was to be shown.
To complete the proof we must show that all other
partitions result in a Ncut greater than or equal to
Informally speaking, what will happen is that either the
numerators of the terms in the Ncut formulaÐthe cut
become too large, or the denominators become significantly imbalanced, again increasing the Ncut value. We
need to consider three cases:
A cut that deviates from the cut in 1(b) slightly by
reshuffling some of the xi edges so that the sums
of the xi in each subset of the graph partition are
no longer equal. For such cuts, the resulting Ncut
values are, at best, ncut1  2a n
cx  2a n
cÿx  4a n c
c2ÿx2 . But,
since x  1, we have ncut1  4a n c
c2ÿ1  4a n
A cut that goes through any of the edges with
weight M. Even with the denominators on both
sides completely balanced, the Ncut value
ncut2  2M
is going to be larger than
cÿ1=c . This
is ensured by our choice in the construction that
M > 2k2. We have to show that
c ÿ 1=c ; or
This is direct, since a n < 1 by construction,
80 (using k  1, M  2, c  9).
A cut that partitions out some of the nodes in the
middle as one group. We see that any cut that
goes through one of the xis can improve its Ncut
value by going through the edges with weight a
instead. So, we will focus on the case where the
cut only goes through the weight a edges.
Suppose that m edges of xis are grouped into
one set, with total weight adding to x, where
1 < x < 2k. The corresponding ncut value,
n  1  4k  12a n ÿ 4a m ÿ 2x
SHI AND MALIK: NORMALIZED CUTS AND IMAGE SEGMENTATION
Fig. 17. Normalized cut and average association result on the zebra image in Fig. 10. Subplot (a) shows the second largest eigenvector of
Wx  Dx, approximating the normalized cut vector. Subplots (b)-(e) show the first to fourth largest eigenvectors of Wx  x, approximating the
average association vector, using the same graph weight matrix. In this image, pixels on the zebra body have, on average, lower degree of
coherence than the pixels in the background. The average association, with its tendency to find tight clusters, partitions out only small clusters in the
background. The normalized cut algorithm, having to balance the goal of clustering and segmentation, finds the better partition in this case.
n  1  k  3a n ÿ 2a m ÿ x
n  1 ÿ k  3a n ÿ 2a m
The lower bound on ncut3
m  4a m c
m  4a m c
m  4a m c
B ÿ 2a m2 ;
where B  2M
n  1 ÿ k  3a n
ÿ 4a2 m  4a B :
One can check to see that ncutl
m is a nondecreasing function and has its minimum at
c2ÿB24a Bÿ4a2 when m  1.
In order to prove that ncutl
cÿ1=c , we
need to establish the inequality
c2 ÿ B2  4a B ÿ 4a2  4a n c
c2 ÿ B2  4a B ÿ 4a2 
c2 ÿ B2  4a B ÿ 4a2n  c2 ÿ 1 or
4c k ÿ 4k2n  4a n
c ÿ 2k ÿ a  1  c2;
using the fact that c  B  2k. To continue, note
that, since an < 1, this will be true if
4c k ÿ 4k2n  4
c ÿ 2k ÿ 4a  1  c2 or if
4c k2  4c ÿ
4k3  8k  4a ÿ 1  c2;
since n < k. Since 4k3  8k  4a ÿ 1 > 0, we only
4c k2  4c < c2 or
k2  1. This is so because c  2M
k  3a n and M > 2k2.
ACKNOWLEDGMENTS
This research was supported by (ARO) DAAH04-96-1-0341,
and a National Science Foundation Graduate Fellowship to
J. Shi. We thank Christos Papadimitriou for supplying the
proof of NP-completeness for normalized cuts on a grid. In
addition, we wish to acknowledge Umesh Vazirani and
Alistair Sinclair for discussions on graph theoretic algorithms and Inderjit Dhillon and Mark Adams for useful
pointers to numerical packages. Thomas Leung, Serge
Belongie, Yeir Weiss, and other members of the computer
vision group at UC Berkeley provided much useful feedback on our algorithm.