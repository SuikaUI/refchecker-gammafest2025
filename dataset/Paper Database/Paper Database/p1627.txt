Fang and Zhan Journal of Big Data 2:5
DOI 10.1186/s40537-015-0015-2
METHODOLOGY
Open Access
Sentiment analysis using product review data
Xing Fang* and Justin Zhan
*Correspondence:
 
Department of Computer Science,
North Carolina A&T State University,
Greensboro, NC, USA
Sentiment analysis or opinion mining is one of the major tasks of NLP (Natural
Language Processing). Sentiment analysis has gain much attention in recent years. In
this paper, we aim to tackle the problem of sentiment polarity categorization, which is
one of the fundamental problems of sentiment analysis. A general process for
sentiment polarity categorization is proposed with detailed process descriptions. Data
used in this study are online product reviews collected from Amazon.com. Experiments
for both sentence-level categorization and review-level categorization are performed
with promising outcomes. At last, we also give insight into our future work on
sentiment analysis.
Keywords: Sentiment analysis; Sentiment polarity categorization; Natural language
processing; Product reviews
Introduction
Sentiment is an attitude, thought, or judgment prompted by feeling. Sentiment analysis
 , which is also known as opinion mining, studies people’s sentiments towards certain entities. Internet is a resourceful place with respect to sentiment information. From a
user’s perspective, people are able to post their own content through various social media,
such as forums, micro-blogs, or online social networking sites. From a researcher’s perspective, many social media sites release their application programming interfaces (APIs),
prompting data collection and analysis by researchers and developers. For instance, Twitter currently has three different versions of APIs available , namely the REST API, the
Search API, and the Streaming API. With the REST API, developers are able to gather status data and user information; the Search API allows developers to query specific Twitter
content, whereas the Streaming API is able to collect Twitter content in realtime. Moreover, developers can mix those APIs to create their own applications. Hence, sentiment
analysis seems having a strong fundament with the support of massive online data.
However, those types of online data have several flaws that potentially hinder the process of sentiment analysis. The first flaw is that since people can freely post their own
content, the quality of their opinions cannot be guaranteed. For example, instead of
sharing topic-related opinions, online spammers post spam on forums. Some spam are
meaningless at all, while others have irrelevant opinions also known as fake opinions
 . The second flaw is that ground truth of such online data is not always available.
A ground truth is more like a tag of a certain opinion, indicating whether the opinion is
positive, negative, or neutral. The Stanford Sentiment 140 Tweet Corpus is one of the
© 2015 Fang and Zhan. This is an Open Access article distributed under the terms of the Creative Commons Attribution License
( which permits unrestricted use, distribution, and reproduction in any medium,
provided the original work is properly cited.
Fang and Zhan Journal of Big Data 2:5
 
Figure 1 Rating System for Amazon.com.
datasets that has ground truth and is also public available. The corpus contains 1.6 million
machine-tagged Twitter messages. Each message is tagged based on the emoticons (as
positive, as negative) discovered inside the message.
Data used in this paper is a set of product reviews collected from Amazon , between
February and April, 2014. The aforementioned flaws have been somewhat overcome in
the following two ways: First, each product review receives inspections before it can be
posted a. Second, each review must have a rating on it that can be used as the ground
truth. The rating is based on a star-scaled system, where the highest rating has 5 stars and
the lowest rating has only 1 star (Figure 1).
This paper tackles a fundamental problem of sentiment analysis, namely sentiment
polarity categorization . Figure 2 is a flowchart that depicts our proposed process for categorization as well as the outline of this paper. Our contributions mainly fall
into Phase 2 and 3. In Phase 2: 1) An algorithm is proposed and implemented for negation phrases identification; 2) A mathematical approach is proposed for sentiment score
computation; 3) A feature vector generation method is presented for sentiment polarity categorization. In Phase 3: 1) Two sentiment polarity categorization experiments are
respectively performed based on sentence level and review level; 2) Performance of three
classification models are evaluated and compared based on their experimental results.
Figure 2 Sentiment Polarity Categorization Process.
Fang and Zhan Journal of Big Data 2:5
 
The rest of this paper is organized as follows: In section ‘Background and literature
review’, we provide a brief review towards some related work on sentiment analysis.
Software package and classification models used in this study are presented in section
‘Methods’. Our detailed approaches for sentiment analysis are proposed in section
‘Background and literature review’. Experimental results are presented in section ‘Results
and discussion’. Discussion and future work is presented in section ‘Review-level
categorization’. Section ‘Conclusion’ concludes the paper.
Background and literature review
One fundamental problem in sentiment analysis is categorization of sentiment polarity
 . Given a piece of written text, the problem is to categorize the text into one specific sentiment polarity, positive or negative (or neutral). Based on the scope of the text,
there are three levels of sentiment polarity categorization, namely the document level, the
sentence level, and the entity and aspect level . The document level concerns whether
a document, as a whole, expresses negative or positive sentiment, while the sentence
level deals with each sentence’s sentiment categorization; The entity and aspect level then
targets on what exactly people like or dislike from their opinions.
Since reviews of much work on sentiment analysis have already been included in , in
this section, we will only review some previous work, upon which our research is essentially based. Hu and Liu summarized a list of positive words and a list of negative
words, respectively, based on customer reviews. The positive list contains 2006 words
and the negative list has 4783 words. Both lists also include some misspelled words that
are frequently present in social media content. Sentiment categorization is essentially a
classification problem, where features that contain opinions or sentiment information
should be identified before the classification. For feature selection, Pang and Lee suggested to remove objective sentences by extracting subjective ones. They proposed a
text-categorization technique that is able to identify subjective content using minimum
cut. Gann et al. selected 6,799 tokens based on Twitter data, where each token
is assigned a sentiment score, namely TSI(Total Sentiment Index), featuring itself as a
positive token or a negative token. Specifically, a TSI for a certain token is computed
TSI = p −tp
where p is the number of times a token appears in positive tweets and n is the number of
times a token appears in negative tweets. tp
tn is the ratio of total number of positive tweets
over total number of negative tweets.
Research design and methdology
Data collection
Data used in this paper is a set of product reviews collected from amazon.com. From
February to April 2014, we collected, in total, over 5.1 millions of product reviewsb in
which the products belong to 4 major categories: beauty, book, electronic, and home
(Figure 3(a)). Those online reviews were posted by over 3.2 millions of reviewers (customers) towards 20,062 products. Each review includes the following information: 1)
reviewer ID; 2) product ID; 3) rating; 4) time of the review; 5) helpfulness; 6) review text.
Fang and Zhan Journal of Big Data 2:5
 
Figure 3 Data collection (a) Data based on product categories (b) Data based on review categories.
Every rating is based on a 5-star scale(Figure 3(b)), resulting all the ratings to be ranged
from 1-star to 5-star with no existence of a half-star or a quarter-star.
Sentiment sentences extraction and POS tagging
It is suggested by Pang and Lee that all objective content should be removed for sentiment analysis. Instead of removing objective content, in our study, all subjective content
was extracted for future analysis. The subjective content consists of all sentiment sentences. A sentiment sentence is the one that contains, at least, one positive or negative
word. All of the sentences were firstly tokenized into separated English words.
Every word of a sentence has its syntactic role that defines how the word is used. The
syntactic roles are also known as the parts of speech. There are 8 parts of speech in
English: the verb, the noun, the pronoun, the adjective, the adverb, the preposition, the
conjunction, and the interjection. In natural language processing, part-of-speech (POS)
taggers have been developed to classify words based on their parts of speech.
For sentiment analysis, a POS tagger is very useful because of the following two reasons:
1) Words like nouns and pronouns usually do not contain any sentiment. It is able to
Fang and Zhan Journal of Big Data 2:5
 
Table 1 Part-of-Speech tags for verbs
Definition
present tense, not 3rd person singular
present tense, 3rd person singular
past tense
present participle
past participle
filter out such words with the help of a POS tagger; 2) A POS tagger can also be used to
distinguish words that can be used in different parts of speech. For instance, as a verb,
“enhanced" may conduct different amount of sentiment as being of an adjective. The
POS tagger used for this research is a max-entropy POS tagger developed for the Penn
Treebank Project . The tagger is able to provide 46 different tags indicating that it can
identify more detailed syntactic roles than only 8. As an example, Table 1 is a list of all
tags for verbs that has been included in the POS tagger.
Each sentence was then tagged using the POS tagger. Given the enormous amount of
sentences, a Python program that is able to run in parallel was written in order to improve
the speed of tagging. As a result, there are over 25 million adjectives, over 22 million
adverbs, and over 56 million verbs tagged out of all the sentiment sentences, because
adjectives, adverbs, and verbs are words that mainly convey sentiment.
Negation phrases identification
Words such as adjectives and verbs are able to convey opposite sentiment with the help
of negative prefixes. For instance, consider the following sentence that was found in
an electronic device’s review: “The built in speaker also has its uses but so far nothing
revolutionary." The word, “revolutionary" is a positive word according to the list in .
Algorithm 1 Negation Phrases Identification
Require: Tagged Sentences, Negative Prefixes
Ensure: NOA Phrases, NOV Phrases
1: for every Tagged Sentences do
for i/i + 1 as every word/tag pair do
if i + 1 is a Negative Prefix then
if there is an adjective tag or a verb tag in next pair then
NOA Phrases ←(i, i + 2)
NOV Phrases ←(i, i + 2)
if there is an adjective tag or a verb tag in the pair after next then
NOA Phrases ←(i, i + 2, i + 4)
NOV Phrases ←(i, i + 2, i + 4)
15: end for
16: return NOA Phrases, NOV Phrases
Fang and Zhan Journal of Big Data 2:5
 
Table 2 Top 10 sentiment phrases based on occurrence
Occurrence
not go wrong
not be happier
don’t like
didn’t work
didn’t like
don’t work
don’t recommend
However, the phrase “nothing revolutionary" gives more or less negative feelings. Therefore, it is crucial to identify such phrases. In this work, there are two types of phrases have
been identified, namely negation-of-adjective (NOA) and negation-of-verb (NOV).
Most common negative prefixes such as not, no, or nothing are treated as adverbs by the
POS tagger. Hence, we propose Algorithm 1 for the phrases identification. The algorithm
was able to identify 21,586 different phrases with total occurrence of over 0.68 million,
each of which has a negative prefix. Table 2 lists top 5 NOA and NOV phrases based on
occurrence, respectively.
Sentiment score computation for sentiment tokens
A sentiment token is a word or a phrase that conveys sentiment. Given those sentiment
words proposed in , a word token consists of a positive (negative) word and its partof-speech tag. In total, we selected 11,478 word tokens with each of them that occurs
at least 30 times throughout the dataset. For phrase tokens, 3,023 phrases were selected
of the 21,586 identified sentiment phrases, which each of the 3,023 phrases also has an
occurrence that is no less than 30. Given a token t, the formula for t’s sentiment score (SS)
computation is given as:
i × γ5,i × Occurrencei(t)
γ5,i × Occurrencei(t)
Occurrencei(t) is t’s number of occurrence in i-star reviews, where i = 1, ..., 5. According to Figure 3, our dataset is not balanced indicating that different number of reviews
were collected for each star level. Since 5-star reviews take a majority amount through
the entire dataset, we hereby introduce a ratio, γ5,i, which is defined as:
γ5,i = |5 −star|
In equation 3, the numerator is the number of 5-star reviews and the denominator is
the number of i-star reviews, where i = 1, ..., 5. Therefore, if the dataset were balanced,
γ5,i would be set to 1 for every i. Consequently, every sentiment score should fall into the
interval of . For positive word tokens, we expect that the median of their sentiment
scores should exceed 3, which is the point of being neutral according to Figure 1. For
negative word tokens, it is to expect that the median should be less than 3.
Fang and Zhan Journal of Big Data 2:5
 
Figure 4 Sentiment score information for word tokens (a) Positive word tokens (b) Negative word tokens.
As a result, the sentiment score information for positive word tokens is showing in
Figure 4(a). The histogram chart describes the distribution of scores while the box-plot
chart shows that the median is above 3. Similarly, the box-plot chart in Figure 4(b) shows
that the median of sentiment scores for negative word tokens is lower than 3. In fact, both
the mean and the median of positive word tokens do exceed 3, and both values are lower
than 3, for negative word tokens (Table 3).
The ground truth labels
The process of sentiment polarity categorization is twofold: sentence-level categorization
and review-level categorization. Given a sentence, the goal of sentence-level categorization is to classify it as positive or negative in terms of the sentiment that it conveys.
Training data for this categorization process require ground truth tags, indicating the
positiveness or negativeness of a given sentence. However, ground truth tagging becomes
a really challenging problem, due to the amount of data that we have. Since manually
tagging each sentence is infeasible, a machine tagging approach is then adopted as a solution. The approach implements a bag-of-word model that simply counts the appearance
of positive or negative (word) tokens for every sentence. If there are more positive tokens
than negative ones, the sentence will be tagged as positive, and vice versa. This approach
is similar to the one used for tagging the Sentiment 140 Tweet Corpus. Training data
for review-level categorization already have ground truth tags, which are the star-scaled
Table 3 Statistical information for word tokens
Token Type
Positive Word Token
Negative Word Token
Fang and Zhan Journal of Big Data 2:5
 
Feature vector formation
Sentiment tokens and sentiment scores are information extracted from the original
dataset. They are also known as features, which will be used for sentiment categorization. In order to train the classifiers, each entry of training data needs to be transformed
to a vector that contains those features, namely a feature vector. For the sentence-level
(review-level) categorization, a feature vector is formed based on a sentence (review).
One challenge is to control each vector’s dimensionality. The challenge is actually twofold:
Firstly, a vector should not contain an abundant amount (thousands or hundreds) of features or values of a feature, because of the curse of dimensionality ; secondly, every
vector should have the same number of dimensions, in order to fit the classifiers. This
challenge particularly applies to sentiment tokens: On one hand, there are 11,478 word
tokens as well as 3,023 phrase tokens; On the other hand, vectors cannot be formed by
simply including the tokens appeared in a sentence (or a review), because different sentences (or reviews) tend to have different amount of tokens, leading to the consequence
that the generated vectors are in different dimensions.
Since we only concern each sentiment token’s appearance inside a sentence or a
review,to overcome the challenge, two binary strings are used to represent each token’s
appearance. One string with 11,478 bits is used for word tokens, while the other one with
a bit-length of 3,023 is applied for phrase tokens. For instance, if the ith word (phrase)
token appears, the word (phrase) string’s ith bit will be flipped from “0" to “1". Finally,
instead of directly saving the flipped strings into a feature vector, a hash value of each
string is computed using Python’s built-in hash function and is saved. Hence, a sentencelevel feature vector totally has four elements: two hash values computed based on the
flipped binary strings, an averaged sentiment score, and a ground truth label. Comparatively, one more element is exclusively included in review-level vectors. Given a review,
if there are m positive sentences and n negative sentences, the value of the element is
computed as: −1 × m + 1 × n.
Results and discussion
Evaluation methods
Performance of each classification model is estimated base on its averaged F1-score (4):
where Pi is the precision of the ith class, Ri is the recall of the ith class, and n is the
number of classes. Pi and Ri are evaluated using 10-fold cross validation. A 10-fold cross
validation is applied as follows: A dataset is partitioned into 10 equal size subsets, each of
which consists of 10 positive class vectors and 10 negative class vectors. Of the 10 subsets, a single subset is retained as the validation data for testing the classification model,
and the remaining 9 subsets are used as training data. The cross-validation process is
then repeated 10 times, with each of the 10 subsets used exactly once as the validation
data. The 10 results from the folds are then averaged to produce a single estimation.
Since training data are labeled under two classes (positive and negative) for the sentencelevel categorization, ROC (Receiver Operating Characteristic) curves are also plotted for
a better performance comparison.
Fang and Zhan Journal of Big Data 2:5
 
Sentence-level categorization
Result on manually-labeled sentences
200 feature vectors are formed based on the 200 manually-labeled sentences. As a result,
the classification models show the same level of performance based on their F1-scores,
where the three scores all take a same value of 0.85. With the help of the ROC curves
(Figure 5), it is clear to see that all three models performed quite well for testing data that
have high posterior probability. (A posterior probability of a testing data point, A, is estimated by the classification model as the probability that A will be classified as positive,
denoted as P(+|A).) As the probability getting lower, the Naïve Bayesain classifier outperforms the SVM classifier, with a larger area under curve. In general, the Random Forest
model performs the best.
Result on machine-labeled sentences
2-million feature vectors (1 million with positive labels and 1 million with negative labels)
are generated from 2-million machine-labeled sentences, known as the complete set. Four
subsets are obtained from the complete set, with subset A contains 200 vectors, subset B
contains 2,000 vectors, subset C contains 20,000 vectors, and subset D contains 200,000
vectors, respectively. The amount of vectors with positive labels equals the amount of
vectors with negative labels for every subset. Performance of the classification models
is then evaluated based on five different vector sets (four subsets and one complete set,
Figure 6).
While the models are getting more training data, their F1 scores are all increasing. The
SVM model takes the most significant enhancement from 0.61 to 0.94 as its training data
increased from 180 to 1.8 million. The model outperforms the Naïve Bayesain model and
becomes the 2nd best classifier, on subset C and the full set. The Random Forest model
again performs the best for datasets on all scopes. Figure 7 shows the ROC curves plotted
based on the result of the full set.
Review-level categorization
3-million feature vectors are formed for the categorization. Vectors generated from
reviews that have at least 4-star ratings are labeled as positive, while vectors labeled as
Figure 5 ROC curves based on the manually labeled set.
Fang and Zhan Journal of Big Data 2:5
 
Figure 6 F1 scores of sentence-level categorization.
negative are generated from 1-star and 2-star reviews. 3-star reviews are used to prepare
neutral class vectors. As a result, this complete set of vectors are uniformly labeled into
three classes, positive, neutral, and negative. In addition, three subsets are obtained from
the complete set, with subset A contains 300 vectors, subset B contains 3,000 vectors,
subset C contains 30,000 vectors, and subset D contains 300,000 vectors, respectively.
Figure 8 shows the F1 scores obtained on different sizes of vector sets. It can be clearly
observed that both the SVM model and the Naïve Bayesain model are identical in terms
of their performances. Both models are generally superior than the Random Forest model
on all vector sets. However, neither of the models can reach the same level of performance when they are used for sentence-level categorization, due to their relative low
performances on neutral class.
The experimental result is promising, both in terms of the sentence-level categorization
and the review-level categorization. It was observed that the averaged sentiment score is a
strong feature by itself, since it is able to achieve an F1 score over 0.8 for the sentence-level
Figure 7 ROC curves based on the complete set.
Fang and Zhan Journal of Big Data 2:5
 
Figure 8 F1 scores of review-level categorization.
categorization with the complete set. For the review-level categorization with the complete set, the feature is capable of producing an F1 score that is over 0.73. However, there
are still couple of limitations to this study. The first one is that the review-level categorization becomes difficult if we want to classify reviews to their specific star-scaled ratings. In
other words, F1 scores obtained from such experiments are fairly low, with values lower
than 0.5. The second limitation is that since our sentiment analysis scheme proposed in
this study relies on the occurrence of sentiment tokens, the scheme may not work well
for those reviews that purely contain implicit sentiments. An implicit sentiment is usually
conveyed through some neutral words, making judgement of its sentiment polarity difficult. For example, sentence like “Item as described.", which frequently appears in positive
reviews, consists of only neutral words.
With those limitations in mind, our future work is to focus on solving those issues.
Specifically, more features will be extracted and grouped into feature vectors to improve
review-level categorizations. For the issue of implicit sentiment analysis, our next step
is to be able to detect the existence of such sentiment within the scope of a particular product. More future work includes testing our categorization scheme using other
Conclusion
Sentiment analysis or opinion mining is a field of study that analyzes people’s sentiments,
attitudes, or emotions towards certain entities. This paper tackles a fundamental problem
of sentiment analysis, sentiment polarity categorization. Online product reviews from
Amazon.com are selected as data used for this study. A sentiment polarity categorization
process (Figure 2) has been proposed along with detailed descriptions of each step. Experiments for both sentence-level categorization and review-level categorization have been
performed.
Software used for this study is scikit-learn , an open source machine learning software package in Python. The classification models selected for categorization are: Naïve
Bayesian, Random Forest, and Support Vector Machine .
Fang and Zhan Journal of Big Data 2:5
 
Naïve Bayesian classifier
The Naïve Bayesian classifier works as follows: Suppose that there exist a set of training data, D, in which each tuple is represented by an n-dimensional feature vector,
X = x1, x2, .., xn, indicating n measurements made on the tuple from n attributes or features. Assume that there are m classes, C1, C2, ..., Cm. Given a tuple X, the classifier will
predict that X belongs to Ci if and only if: P(Ci|X) > P(Cj|X), where i, j ∈[ 1, m] andi ̸= j.
P(Ci|X) is computed as:
Random forest
The random forest classifier was chosen due to its superior performance over a single
decision tree with respect to accuracy. It is essentially an ensemble method based on
bagging. The classifier works as follows: Given D, the classifier firstly creates k bootstrap
samples of D, with each of the samples denoting as Di. A Di has the same number of tuples
as D that are sampled with replacement from D. By sampling with replacement, it means
that some of the original tuples of D may not be included in Di, whereas others may occur
more than once. The classifier then constructs a decision tree based on each Di. As a
result, a “forest" that consists of k decision trees is formed. To classify an unknown tuple,
X, each tree returns its class prediction counting as one vote. The final decision of X’s
class is assigned to the one that has the most votes.
The decision tree algorithm implemented in scikit-learn is CART (Classification and
Regression Trees). CART uses Gini index for its tree induction. For D, the Gini index is
computed as:
Gini(D) = 1 −
where pi is the probability that a tuple in D belongs to class Ci. The Gini index measures
the impurity of D. The lower the index value is, the better D was partitioned. For the
detailed descriptions of CART, please see .
Support vector machine
Support vector machine (SVM) is a method for the classification of both linear and nonlinear data. If the data is linearly separable, the SVM searches for the linear optimal
separating hyperplane (the linear kernel), which is a decision boundary that separates
data of one class from another. Mathematically, a separating hyperplane can be written
as: W · X + b = 0, where W is a weight vector and W = w1, w2, ..., wn. X is a training
tuple. b is a scalar. In order to optimize the hyperplane, the problem essentially transforms to the minimization of ∥W∥, which is eventually computed as:
αiyixi, where αi
are numeric parameters, and yi are labels based on support vectors, Xi. That is: if yi = 1
wixi ≥1; if yi = −1 then
If the data is linearly inseparable, the SVM uses nonlinear mapping to transform the
data into a higher dimension. It then solve the problem by finding a linear hyperplane.
Fang and Zhan Journal of Big Data 2:5
 
Figure 9 A Classification Example of SVM.
Functions to perform such transformations are called kernel functions. The kernel
function selected for our experiment is the Gaussian Radial Basis Function (RBF):
K(Xi, Xj) = e−γ ∥Xi−Xj∥2/2
where Xi are support vectors, Xj are testing tuples , and γ is a free parameter that uses the
default value from scikit-learn in our experiment. Figure 9 shows a classification example
of SVM based on the linear kernel and the RBF kernel.
aEven though there are papers talking about spam on Amazon.com, we still contend
that it is a relatively spam-free website in terms of reviews because of the enforcement of
its review inspection process.
bThe product review data used for this work can be downloaded at: 
Competing interests
The authors declare that they have no competing interests.
Authors’ contributions
XF performed the primary literature review, data collection, experiments, and also drafted the manuscript. JZ worked
with XF to develop the articles framework and focus. All authors read and approved the final manuscript.
Authors’ information
Xing Fang is a Ph.D. candidate at the Department of Computer Science, North Carolina A&T State University. His research
interests include social computing, machine learning, and natural language processing. Mr. Fang holds one Master’s
degree in computer science from North Carolina A&T State University, and one Baccalaureate degree in electronic
engineering from Northwestern Polytechnical University, Xi’an, China.
Dr. Justin Zhan is an associate professor at the Department of Computer Science, North Carolina A&T State University. He
has previously been a faculty member at Carnegie Mellon University and National Center for the Protection of Financial
Infrastructure in Dakota State University. His research interests include Big Data, Information Assurance, Social
Computing, and Health Science.
Acknowledgements
This research was partially supported by the following grants: NSF No. 1137443, NSF No. 1247663, NSF No. 1238767, DoD
No. W911NF-13-0130, DoD No. W911NF-14-1-0119, and the Data Science Fellowship Award by the National Consortium
for Data Science.
Received: 12 January 2015 Accepted: 20 April 2015
itk.ilstu.edu/faculty/xfang13/amazon_data.htm.
Fang and Zhan Journal of Big Data 2:5