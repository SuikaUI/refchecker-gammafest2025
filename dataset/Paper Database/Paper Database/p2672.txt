Generative Adversarial Network in the Air: Deep
Adversarial Learning for Wireless Signal Spooﬁng
Yi Shi, Kemal Davaslioglu, and Yalin E. Sagduyu
Abstract—The spooﬁng attack is critical to bypass physicallayer signal authentication. This paper presents a deep learningbased spooﬁng attack to generate synthetic wireless signals that
cannot be statistically distinguished from intended transmissions.
The adversary is modeled as a pair of a transmitter and a receiver
that build the generator and discriminator of the generative adversarial network, respectively, by playing a minimax game over
the air. The adversary transmitter trains a deep neural network
to generate the best spooﬁng signals and fool the best defense
trained as another deep neural network at the adversary receiver.
Each node (defender or adversary) may have multiple transmitter
or receiver antennas. Signals are spoofed by jointly capturing
waveform, channel, and radio hardware effects that are inherent
to wireless signals under attack. Compared with spooﬁng attacks
using random or replayed signals, the proposed attack increases
the probability of misclassifying spooﬁng signals as intended
signals for different network topology and mobility patterns. The
adversary transmitter can increase the spooﬁng attack success
by using multiple antennas, while the attack success decreases
when the defender receiver uses multiple antennas. For practical
deployment, the attack implementation on embedded platforms
demonstrates the low latency of generating or classifying spooﬁng
Index Terms—Adversarial machine learning, deep learning,
generative adversarial network (GAN), spooﬁng attack.
I. INTRODUCTION
By exploiting the open and shared nature of wireless spectrum, an adversary can launch a spooﬁng attack by mimicking
transmissions from a legitimate user at the physical layer. The
spooﬁng attack can be used for various adversarial purposes
such as emulating primary users in cognitive radio networks
and fooling signal authentication systems to intrude protected
wireless networks. While wireless signals can be spoofed by
recording a legitimate user’s signals and replaying them later,
such replay attacks cannot necessarily capture all waveform,
Yi Shi is with Virginia Tech, Blacksburg, VA, USA; Email: .
Kemal Davaslioglu is with Intelligent Automation, Inc., Rockville, MD, USA;
Email: . Yalin Sagduyu is with Intelligent Automation,
Inc., Rockville, MD, USA; Email: .
This effort is supported by the U.S. Army Research Ofﬁce under contract
W911NF-17-C-0090. The content of the information does not necessarily
reﬂect the position or the policy of the U.S. Government, and no ofﬁcial
endorsement should be inferred.
A preliminary version of the material in this paper was partially presented at
ACM Conference on Security and Privacy in Wireless and Mobile Networks
(WiSec) Workshop on Wireless Security and Machine Learning (WiseML),
2019. .
c⃝2020 IEEE. Personal use of this material is permitted. Permission from
IEEE must be obtained for all other uses, in any current or future media,
including reprinting/republishing this material for advertising or promotional
purposes, creating new collective works, for resale or redistribution to servers
or lists, or reuse of any copyrighted component of this work in other works.
channel and device effects, and cannot provide an algorithmic
mechanism to train itself against an authentication system,
such as the one that uses a machine learning classiﬁer to
authenticate signals by analyzing the physical layer features
in wireless signals and identifying the spoofed signals.
Compared to conventional feature-based machine learning
techniques, deep learning can model and represent highdimensional spectrum dynamics by processing raw spectrum
data without handcrafted feature extraction. Deep learning has
been successfully applied to many applications in wireless
communications such as spectrum sensing and modulation
recognition . An adversary can also apply deep learning
and carefully design inputs to manipulate the behavior of a
legitimate system in test or training time. Such attacks on
machine learning have been studied under adversarial machine
learning – for various data domains such as computer
vision and natural language processing (NLP).
There is also a growing interest in applying adversarial
machine learning to the wireless domain. A deep learningbased jammer was studied in , to learn the transmit
behavior of legitimate users as an inference (exploratory)
attack and train a deep neural network to decide when to
jam data transmissions. In addition, an adversary can jam
transmissions during the sensing period to manipulate input
data to training and testing processes of a machine learning
classiﬁer in terms of poisoning (causative) and evasion attacks,
respectively – . Poisoning attack was also studied for
cooperative spectrum sensing, where some of nodes may be
malicious and provide wrong sensing results to the machine
learning classiﬁer deployed at a fusion center . On the
other hand, the manipulation of test inputs to a machine
learning-based modulation classiﬁer was considered as an
evasion attack in – . The adversary can also launch
a Trojan attack by manipulating training data to insert Trojans
(triggers) and activating them later in test time .
This paper presents a novel spooﬁng attack built upon
adversarial machine learning. This attack is based on training
a deep neural network that generates synthetic wireless signals
(namely, spooﬁng signals) that cannot be reliably distinguished
from signals that are originated from intended users (e.g.,
legitimate users or higher priority users such as primary users).
To generate such signals, the adversary uses a special kind of
generative model, namely a generative adversarial network
(GAN) , that is trained to learn to synthesize data samples
that are statistically similar to real data samples. Our goal in
this paper is to use the GAN from a wireless attack point
of view and train it by an adversary pair, consisting of a
transmitter and a receiver, collaborating over the air to spoof
wireless signals such that the GAN-generated signals cannot
be reliably discriminated from intended signals. Acting as the
defender, there is a receiver that uses a deep neural network to
classify signal sources as an intended transmitter or not, based
on spectrum sensing results. The adversary generates spooﬁng
signals to fool the classiﬁer at the receiver into incorrectly
authenticating its transmissions as intended. The preliminary
version of the GAN-based spooﬁng attack was studied in 
for the special case of single antenna systems. In this paper,
we consider the general case of multiple antenna capabilities
at the defender and the adversary. In addition, we present the
practical implementation of the GAN-based spooﬁng attack
on embedded platforms and discuss the impact of network
topology in more detail.
There are unique challenges for adversarial machine learning attacks in wireless communications. Unlike applications
in other domains such as computer vision and NLP, data in
wireless medium is received through channel effects (from
the intended transmitter or the adversary to the receiver) and
embedded with waveform and radio hardware effects that all
need to be matched by the GAN.
As each device introduces its own phase shift and each
channel has its own propagation gain and phase shift, a deep
learning-based classiﬁer is built at a receiver R by collecting
spectrum sensing results for signals from an intended transmitter T and other signals. We show that this classiﬁer is highly
successful in distinguishing signals of T from other random
signals. To establish the baseline, we start with conventional
spooﬁng attacks to fool this classiﬁer at R. We can regard
random signals from other transmitters as a naive spooﬁng
attack. The success probability (the probability that signals
from another transmitter is classiﬁed as from T ) of this naive
attack is only 7.8% for the single antenna case. Even with
multiple antennas, the success probability is still small (not
more than 14.71% that is achieved when four antennas are
used by the transmitter). Then, we consider the replay attack,
where an adversary transmitter AT ampliﬁes and forwards the
previously received signal from T , as a better spooﬁng attack,
since it keeps some pattern of T (but not the entire). We
show that the attack success probability increases to 36.2%
when the replay attack is launched in the single antenna case.
With multiple antennas used at the adversary transmitter, the
attack success probability improves (e.g., to 69.8% when all
nodes use four antennas) but it is still much less than the
success probability of the GAN-based spooﬁng attack that is
introduced in this paper.
The adversary transmitter AT seeks to generate a signal that
is statistically similar to the one received by the receiver R.
However, it is challenging to generate such a signal without
any knowledge on T ’s waveform, phase shift, and the unique
channel between T and R. To overcome this challenge, we
introduce a GAN-based approach to capture the cumulative
effects from the observed signals, learn its distribution while
training the GAN, and generate spooﬁng signals by the trained
generator of the GAN. The adversary transmitter AT and its
surrogate receiver AR (used only for training) train the GAN.
In the training process, AT adds ﬂags to its transmissions to
inform AR of the true label. Using the received signals, AR
trains a deep neural network as the discriminator of the GAN
to classify signals as from T or not, and sends the classiﬁcation
results back to AT as a feedback. Then, AT updates the
generator of the GAN to generate better synthetic data, namely
to increase the classiﬁcation error probability at AR. Thus, AT
and AR iteratively play a minimax game, which trains a GAN
to improve both the generator and the discriminator. Then,
the generator at AT is used to generate high ﬁdelity synthetic
data samples (similar to real signals) by inherently capturing
all waveform, channel, and device (radio hardware) effects
jointly. The GAN-based spooﬁng attack increases the attack
success probability to 76.2% for the single antenna case.
We consider multiple antennas for AT to introduce additional degrees of freedom when the spooﬁng signal is
optimized. We show that the success probability of the GANbased spooﬁng attack increases to 88.6% and 100% when two
and four antennas are used, respectively, at AT . Moreover,
we consider different settings of multiple-input and multipleoutput (MIMO) communications and show that more receiver
antennas (at R) increase the classiﬁcation accuracy at R while
more transmitter antennas (at T ) can decrease this accuracy.
On the other hand, the success probability of spooﬁng attacks
increases with more transmitter antennas at either T or AT
while it decreases with more antennas at receivers (R and AR).
We also show that this spooﬁng attack remains successful for
different topologies and even when AT moves after training.
To demonstrate the practicality of the proposed spooﬁng
attack, we present the implementation of the deep neural
network structures developed for the receiver classiﬁer and the
spooﬁng signal generator of the GAN on two different embedded platforms, namely an embedded graphics processing unit
(GPU) and a ﬁeld-programmable gate array (FPGA). For all
antenna conﬁgurations considered, the latency is measured to
be less than one millisecond (msec) on both platforms. The
FPGA achieves lower latency for all antenna conﬁgurations
compared to embedded GPU. In particular, the ratio of latency
improvement by FPGA over embedded GPU is up to 36 when
the generator is run at AT equipped with four antennas.
The rest of the paper is organized as follows. Section II
discusses the related work. Section III presents the system
model. Section IV describes the pre-trained classiﬁer to detect
intended transmissions. Section V presents the GAN-based
spooﬁng attack, compares it with the replay attack, and then
extends the setting to the MIMO case. Section VI presents
the implementation of the GAN-based signal spooﬁng on
embedded platforms. Section VII concludes the paper.
II. RELATED WORK
There are different ways to attack wireless communications
 . Spectrum sensing can be attacked in various forms including spectrum sensing data falsiﬁcation (SSDF) , ,
primary user emulation (PUE) , eavesdropping , and
noncooperation . On the other hand, data transmissions
can be jammed – via denial-of-service (DoS) attacks
 using different levels of prior information at the adversary
 . Separately, higher layer protocols can be also attacked,
e.g., by manipulating routing at the network layer and
inferring network ﬂows .
Deep learning has been studied to secure wireless communications, such as authenticating signals – , detecting
and classifying jammers of different types – , and
controlling communications to mitigate jamming effects ,
 . As cognitive radio capabilities are integrated into wireless
communications, adversaries such as jammers become smarter,
as well , . In particular, deep learning was used to jam
wireless communications building upon adversarial machine
learning techniques – . Using wireless sensors, deep
learning was also used to infer private information in analogy
to exploratory attacks .
Wireless attacks such as jamming and PUE attacks beneﬁt
from realistic spooﬁng signals such that the underlying attacks
cannot be easily detected. Wireless spooﬁng attacks have been
extensively studied – . Algorithms to spoof, jam, and
sniff wireless signals were developed in . The optimal
power distribution for a spooﬁng attack was derived in . As
a countermeasure to spooﬁng attacks, , used featurebased methods based on the received signal strength (RSS),
whereas trained a deep neural network.
In this paper, the adversary uses a special kind of generative
model, namely a GAN , to synthesize data samples that
are statistically similar to real data samples. While GANs
have been extensively used in computer vision and NLP
applications, the use of GANs in wireless domain is in its
early stage with emerging applications in spectrum sensing
 , jamming/anti-jamming , LTE signal generation ,
and IoT device ﬁngerprinting . In these studies, the GAN
structure was often trained ofﬂine and centralized, i.e., there is
no separate classiﬁer at the target receiver, and the generator
and the discriminator of the GAN are co-located at a single
node position without accounting for relative positions of the
transmitter-receiver pair and the adversary. This GAN setting
is useful for training data augmentation by having full control
and observation of transmitter and receiver signals, respectively. However, it does not provide the needed capability for
the adversary to capture signal characteristics observed at the
defender receiver.
We design the adversarial capability to spoof wireless
signals with the GAN that captures not only waveform and
channel effects but also device-related effects such as phase
shift and relative positions of transmitters and receivers with
respect to the adversary and the defender. For that purpose,
the generator and the discriminator of the GAN need to be
distributed to different locations. Those aspects were missing
in the past applications of GANs to model wireless communication channels, e.g., – , where the GAN is centrally
trained ofﬂine by accounting for waveform effects over a
single channel only (without distinguishing the roles of the
transmitter and the receiver, and their relative channel effects).
The defender also uses a deep neural network but the main
focus is on the use of deep neural networks at the adversary
that jointly trains the discriminator and the generator of signal
spooﬁng for its own adversarial purposes.
Similar to wireless signal spooﬁng, adversarial perturbations
can be added to wireless signals to fool signal classiﬁers such
as the modulation classiﬁer – . The spooﬁng attack
proposed in our paper has the same purpose as those evasion
attacks, but it takes into account the channel effects, hardware effects (e.g., phase shifts) and relative positions of the
adversary and defender, and does not require the adversary to
synchronize the superposition of its signals with the adversary,
which is hard to achieve in practice. In addition, adversarial
training methods such as randomized smoothing cannot
be readily applied to mitigate the proposed spooﬁng attack,
as they assume that perturbations are directly added to real
We use the replay attack as a baseline for comparison
purposes. The replay attack records the signal from an intended user transmission, and then ampliﬁes and forwards it
as a means of signal spooﬁng , . The replay attack is
simple to launch as it maintains some features in the original
signal, but it is not very effective since it cannot necessarily
match the signal characteristics expected at the receiver and
therefore it is easier to detect. In addition, the replay attack
does not provide a mechanism to train (tune or optimize) itself
against a signal classiﬁer. We refer the interested reader to
 , for bounds on replaying signals as the spooﬁng
attack and the countermeasure to detect these attacks. We will
show that the GAN-based spooﬁng attack presented in our
paper outperforms the replay attack since it jointly captures
waveform, channel, and hardware effects as expected at the
defender receiver.
III. SYSTEM MODEL
There is one transmitter T as a legitimate user and its
corresponding receiver R. There is also an adversary pair of
transmitter AT and receiver AR. The goal of the adversary
is to generate spooﬁng signals that are misclassiﬁed by R as
signals transmitted from T . A pre-trained deep learning-based
classiﬁer is used at R to determine whether a transmission is
from T or not. Since there are unique device properties (such
as the phase shift) and communication channel properties
(such as the channel gain) associated with signals from T ,
a random signal transmission by the adversary can be easily
detected as an unintended transmission, as we show in Section
IV. Therefore, the goal of the adversary is to learn the
unique pattern embedded in T ’s signals received at R and
generate spooﬁng signals following the same pattern. AT and
AR jointly train a GAN (see Fig. 1), namely AT trains the
generator of the GAN and AR trains the discriminator of
the GAN. Note that all transmissions go through wireless
channels. Once the GAN is trained, only the generator is used
to generate spooﬁng signals in test (inference) time of the
spooﬁng attack. We do not assume that the adversary has any
knowledge of T ’s coding/modulation scheme or the channel
Real data:
transmitted by
Synthetic data:
Discriminator
Fig. 1. GAN structure trained for spooﬁng attack.
Fig. 2. Network topology during the training process for spooﬁng attack.
between T and R. Instead, the adversary needs to learn their
combined effect online through the collaboration of AT and
Each node may have potentially multiple antennas. Suppose
that T has NT antennas, R has NR antennas, AT has NA
antennas, and AR has NR antennas. Note that AR needs to
collect similar data as R, and thus we assume that AR has
the same number of antennas as R. We assume additive white
Gaussian noise and normalize all powers with respect to noise
power. The transmit power of T is P = 1000. We assume that
there is a device-related phase shift for transmissions of T and
this device property is unknown to AT and AR. The channel
between any two nodes is modeled by Rayleigh distribution.
We consider three types of spooﬁng attacks.
1. Random signal attack: AT transmits random signals with
2. Replay attack: AT records signals from T , and then
ampliﬁes and forwards it to R. Since AT does not have
any knowledge on channel gain, it cannot optimally tune
its power. Thus, we assume AT uses ﬁxed power P to
amplify signals.
3. GAN-based spooﬁng attack: AT uses a GAN to generate
synthetic signals and transmits them with power up to P.
When AR is placed close to R such that the channel from
T (or AT ) to AR is similar to the channel from T (or AT ) to
R, signals received by AR are similar to signals received by
R. Hence, if AR cannot distinguish whether a signal is from
T or AT , R cannot either. In Section V-B, we will show that
the GAN-based spooﬁng attack is more successful than other
spooﬁng attacks even when AR is located far away from R.
When AT transmits a spoofed signal, its adds a ﬂag (i.e.,
the true label) to inform AR that this signal is from AT . Using
real and synthetic signals received along with labels through
ﬂags from AT , AR starts training a discriminator to classify
signals from T or AT , and informs AT of its classiﬁcation
Fig. 3. Network topology during the spooﬁng attack.
results as a feedback (see Fig. 1). We assume that this 1-bit
feedback is transmitted with a strong channel code to ensure
that the correct feedback can be decoded at the generator side.
In the meantime, AT starts training a generator to enhance
its synthetic signals and make them statistically more similar
to T ’s signals such that the classiﬁcation error at AR should
increase. AT and AR continue with this process until convergence. In this setting, AT and AR play a minimax game,
which corresponds to the GAN process (see Fig. 2), but it is
played over the air. When the GAN converges, the generator
at AT should be able to generate synthetic signals that are
statistically very similar to signals of T received by R, and
then it is used for the spooﬁng attack (see Fig. 3).
In the next two sections, we will describe in detail the
classiﬁer at receiver R and the GAN at adversary transmitter
AT and receiver AR.
IV. THE CLASSIFIER FOR SIGNAL AUTHENTICATION
Receiver R has a pre-trained classiﬁer (a deep neural
network) to distinguish whether a received signal is from T , or
not. The classiﬁer takes spectrum sensing results as input. R
senses the channel for a short period of time that corresponds
to 8 bits of data transmission. We assume that T uses QPSK
modulation for its transmissions, although the classiﬁer and
the GAN in the next section do not assume any knowledge of
modulation scheme (or other waveform characteristics) used
by the target transmitter. Under QPSK, there are four possible
modulated signals, where each signal may have a different
phase shift for 2 bits. Each antenna adds its own phase shift,
as well. Denote θT i as the phase shift of the i-th antenna at
T , which is added to the QPSK signal’s phase shift. Note
that other settings on the number of bits in sensing data
and modulation type can also be used without changing the
algorithms (classiﬁers) developed in this paper. In this setup,
each input data sample of R consists of four received signals.
Each signal is uniformly sampled 100 times. Therefore, each
input data sample of R consists of 400 I/Q features when we
consider the single antenna at R. On the other hand, when
multiple antennas are used at R, the number of data features
increases, e.g., there are 1600 I/Q features for each sample
when R has 4 antennas.
As an example of T ’s signals, QPSK determines a phase
4 for the coded signal when T transmits two bits 0 and
0. Adding θT i and a random channel phase shift θT i,Rj (from
the i-th antenna at T to j-th antenna at R) under the Rayleigh
Fig. 4. The structure of a feedforward neural network.
model, the received signal has phase shift π
4 + θT i + θT i,Rj.
The k-th sample point, 0 ≤k < 100, has phase shift π
θT i +θT i,Rj + kπ
50 . The received power is gT R P
NT , where gT R
is a random channel gain from T to R under the Rayleigh
model and NT is the number of antennas at T . Note that we
approximately assume that the channel gain is independent of
the antennas at T and R. We assume that the mean value
of channel gain is d−2, where d is the distance between a
transmitter and a receiver, although the classiﬁer and the GAN
in the next section do not assume any knowledge of channel
gain model. In this setting, the k-th sampled data at R’s j-th
antenna is given by
T,Rj = gT R
4 +θT i+θT i,Rj+ kπ
In the training process, a ﬂag is sent by T to indicate its
transmissions and it is used to label samples. This way, R
collects a number of samples with labels to build the training
data and trains its classiﬁer that is used to predict signal
labels (‘T ’ or ‘not T ’). This classiﬁer involves two types
of errors, namely misdetection (the signal of T is classiﬁed
as from other transmitters) and false alarm (the signal from
other transmitters is classiﬁed as from T ). Denote eMD and
eF A as the probabilities of misdetection and false alarm at
R, respectively. Then, the objective of R is to minimize
max{eMD, eF A}. Suppose that test data has n samples, there
are NT samples with signals from T , and in these samples
there are nMD misdetections and nF A false alarms. Then, we
have eMD = nMD
and eF A =
In this paper, we use TensorFlow to train feedforward neural
networks (see Fig. 4) as deep learning classiﬁers using crossentropy as the loss function. For each antenna conﬁguration,
hyperparameters of the deep neural network are selected
to minimize max{eMD, eF A} to balance the accuracy on
each label. The default deep neural network structure of the
classiﬁer at R is given as follows.
• Number of neurons at the input layer depends on the
antenna conﬁguration (e.g., 400 for R and 1600 for 4
antennas at R).
• There are 3 hidden layers.
• Each hidden layer has 50 neurons.
• The output layer has 2 neurons.
• The activation function at hidden layers is Rectiﬁed linear
unit (ReLU).
• The activation function at output layer is softmax.
• Batch size is 100.
• Number of training steps is 1000.
With hyperparameter tuning, the above default values may
change. For example, batch size is optimized to 150 for the
single-input and single-output (SISO) antenna case (NT =
For simulations, T is located at (0, 0), R is located at
(10, 0), AT is located at (0, 10), and AR is located at (10, 0.1)
(see Figs. 2 and 3). As training data, R collects 1000 samples,
each with 400 spectrum sensing results and label (‘T ’ or ‘not
T ’), and runs the classiﬁer on another set of 1000 samples to
evaluate the classiﬁer accuracy. There are 504 signals from T
and 496 signals from other transmitters in the test data.
When we consider the SISO case, 39 signals from other
transmitters are identiﬁed as signals from T and 37 signals
from T are identiﬁed as other signals. As a result, eF A =
39/496 = 7.86%, eMD = 37/504 = 7.34% indicating that
R can distinguish signals of T with small error. Note that
this case can be interpreted as a naive spooﬁng attack (the
adversary transmits random signals), where the attack success
probability is only 7.86%.
For the general MIMO case, we vary NT (the number
of antennas at T ) and NR (the number of antennas at R).
Results are shown in Table I where each data entry lists (eMD,
eF A). In general, larger NT means that T can generate more
complex transmit signals and thus the complexity of received
signals increases. On the other hand, larger NR means that R
can collect more copies of received signals and thus more
information can be collected. Therefore, error probabilities
of the target classiﬁer at the receiver increase with larger
NT while error probabilities decrease with larger NR. These
observed trends indicate how degrees of freedom offered by
multiple antennas drive signal classiﬁcation and provide the
basis for the results presented in the next section.
V. SPOOFING ATTACKS
The goal of adversary transmitter AT is to transmit signals
that are similar to transmitter T ’s signals and fool target
receiver R into classifying signals from AT as signals from
T . In the previous section, we considered the naive spooﬁng
attack, where AT transmits random signals. In this section,
we ﬁrst present the replay attack, where AT records T ’s
transmissions and replays them later. Then, we introduce the
GAN-based spooﬁng attack, where the adversary consists of
two nodes, transmitter AT and receiver AR. We assume the
worst case from the adversary point of view that AT and AR
do not know T ’s waveform or device-related phase shifts, or
channels between T and R.
A. Replay Attack based on Amplifying and Forwarding Signals
The replay attack is based on simply amplifying and forwarding signals, i.e., AT receives signals from T , records
them, ampliﬁes to power P, and forwards them to R. Denote
CLASSIFICATION ERRORS (MISDETECTION, FALSE ALARM) UNDER DIFFERENT MIMO SETTINGS.
(7.34%, 7.86%)
(6.24%, 7.53%)
(5.91%, 6.33%)
(5.89%, 6.31%)
(7.94%, 12.90%)
(6.75%, 10.97%)
(6.40%, 10.43%)
(6.37%, 10.38%)
(8.79%, 14.29%)
(7.47%, 12.15%)
(7.09%, 11.50%)
(7.06%, 11.50%)
(11.9%, 14.71%)
(10.12%, 12.95%)
(9.62%, 12.46%)
(9.57%, 12.42%)
SUCCESS PROBABILITY (%) OF REPLAY ATTACK UNDER DIFFERENT MIMO SETTINGS.
36.2, 47.6, 42.8, 45.8
35.6, 38.8, 42.2, 43.4
34.2, 33, 40.2, 40.2
33.2, 32.2, 32.4, 37.4
52.6, 56.6, 58, 59.4
51.8, 55, 56.4, 58
43.2, 51.2, 51, 52
42.8, 45.6, 48.4, 50.2
53.6, 57.6, 57.8, 57.8
51.8, 55.4, 56.2, 58.2
45, 55.8, 56, 58
44.8, 45.4, 48, 50
69.4, 70.8, 69.8, 71.2
66.8, 68, 69, 69.6
62.8, 63.4, 69.4, 70.2
61.4, 62.8, 67, 69.8
θAT i as the phase shift for the i-th antenna at AT , θAT i,ARj as
the phase shift from the i-th antenna at AT to the j-th antenna
at AR, and gij as the random channel gain for the Rayleigh
channel from node i to node j. We assume that none of T ’s
parameters are known to AT . As an example of replay attack,
consider two bits 0 and 0 transmitted by T that determines
the phase shift of π
4 for QPSK. The signals received by R
has the phase shift of π
4 + θT i,AT h + θAT h + θAT hRj for the
signal transmitted by the i-th antenna at T , forwarded by the
h-th antenna at AT , and received by the j-th antenna at R.
The received power is gAT R P
NA , when AT has NA antennas.
Then, the k-th sampled data at R’s j-th antenna is given by
4 +θT i+θT i,AT h+θAT h+θAT h,Rj+ kπ
If the same signal is transmitted by T , the k-th sampled data
at R’s j-th antenna is given by
T,Rj = gT R
4 +θT i+θT i,Rj+ kπ
While both received power and phase shift in (2) and (3) are
different, a simple detector based on discriminating received
power and/or phase shift cannot be applied. Classiﬁcation
needs to be done with a limited number of data samples to
detect the intruder at the physical layer. However, the received
power and the phase shift cannot be accurately estimated due
to random channel. Therefore, either misdetection or false
alarm probability is large if we set a small or large region,
respectively, around the actual value of T .
When we simulate the replay attack in the setting described
in the previous section, the success probability of spooﬁng
attack is increased from 7.86% (when AT transmits random
signals) to 36.2% for the SISO case (i.e., NT = NR = NA =
1). While some signal pattern from T at R is captured by
amplifying and forwarding the recorded signals, signals from
T and signals forwarded by AT differ even for the same data
and therefore R can still successfully classify most of signals
that are spoofed by the replay attack.
For the MIMO case, we can vary NT (the number of
antennas at T ), NR (the number of antennas at R), and NA
(the number of antennas at AT ). Note that since AR needs
to learn the received signal patterns at R, the number of
antennas at AR should be the same as the number of antennas
at R, i.e., NR. The transmit power at AT is equally divided
among antennas, since AT does not know T ’s power allocation
policy. We obtain results in Table II, where each data entry
lists a sequence of numbers when NA varies from 1 to 4.
Note that the ﬁrst entry for NT = NR = 1 corresponds to
the SISO case for the transmitter-receiver pair. We observed
the following trends for the MIMO case. The attack success
probability increases with larger NT , since the transmit signal
is more complex and thus is easy to attack. The attack success
probability also increases with larger NA, since the adversary
can generate complex spooﬁng signals. On the other hand, the
attack success probability decreases with larger NR, since the
receiver can collect more data for its classiﬁer.
B. GAN-based Spooﬁng Attack
The next attack relies on the collaboration of the adversary transmitter-receiver pair, AT and AR, to run the GAN
over wireless channels. Traditionally, a GAN is implemented
by the same processor controlling both the generator and
discriminator. Since AT needs the generator of the GAN
to generate synthetic signals, the GAN can be implemented
entirely at AT . However, this requires AR to collect features
of its received signal and transmit features to AT , which causes
high overhead, creates a communication bottleneck, and makes
the adversary easy to detect because of larger communication
footprint. For a more realistic scenario, we propose to run
the discriminator of the GAN separately at AR to avoid such
overhead such that only limited feedback is needed (AR needs
to send only one bit for the classiﬁcation decision back to AT ).
We now present design details. AR collects signal samples
from T and AT , where AT ﬂags its transmissions to inform
AR of ground truth. Then, AR trains the ﬁrst version of
discriminator D based on these data samples with the objective
of minimizing the classiﬁcation error, i.e.,
D Ez∼pz[log(1 −D(G(z)))] −Ex∼pdata[log(D(x))] ,
where z is a noise input to generator G with a random
distribution of pz, G(z) is the generator output and input data
x has distribution pdata.
In the meantime, AT collects classiﬁcation results from AR,
trains the ﬁrst version of generator G to generate synthetic
data, and then transmits spooﬁng signals to AR. The objective
of AT is to maximize AR’s classiﬁcation error, i.e.,
G Ez∼pz[log(1 −D(G(z)))] −Ex∼pdata[log(D(x))] ,
where D is the ﬁrst version of discriminator. This process
continues with updated versions of G and D trained over time
in subsequent rounds. This way, G and D improve in each
round until they converge. The entire process corresponds to
a minimax game played between AT and AR as follows.
Ez∼pz[log(1 −D(G(z)))]
−Ex∼pdata[log(D(x))] .
Although traditionally a GAN is run at one entity, we split
here G to AT and D to AR, each under different channel
effects. When G is trained with the objective in (5), the
gradients of G rapidly vanish, which makes the training of
GAN very difﬁcult. To address the vanishing gradient problem,
the objective function at G is changed to the following :
G Ez∼pz[log(1 −D(G(z)))].
Once the solution of G and D converges, AT runs G to
generate synthetic signals and transmits them to R. Then,
signals of AT received by R are statistically similar to the
received signals from T . In summary, the GAN-based spooﬁng
attack has the following steps.
1) Training process includes two interactive steps.
a) AR collects data from T and AT . AR builds the
discriminator D. AR sends classiﬁcation results to
b) AT receives classiﬁcation results from AR. AT
builds the generator G. AT generates more data
2) Once training is complete, AT uses its generator G to
generate spooﬁng signals and transmits them.
For simulations, we assume that as the ﬁrst step, AR collects
500 signal samples from T and 500 signal samples from
AT . Each sample has coded data of 8 bits under the QPSK
modulation, i.e., 4 coded signals. The sampling rate for a
signal is 100, and thus the total data (features) for a sample
Both G and D have three hidden dense layers, each with
128 neurons. The input layer of G has 100 neurons. The output
layer of G has 400 neurons per antenna at R (e.g., 400 for
NR = 1 and 1600 for NR = 4), which is also the size of
the input layer of D. The output layer of D has 2 neurons.
The rest of the hyperparameters is the same as the deep neural
network used for the classiﬁer at R (see Section IV).
We follow the simulation setting of Section IV. We assume
that the GAN converges when the maximum perturbation in
G and D loss functions over the most recent 100 epochs
of the GAN training drops below 5% of current loss value.
With this convergence criterion, we measure that the GAN is
run only for 478 epochs. The attack success probability of
the GAN-based spooﬁng attack is 76.2% for the SISO case
(NT = NR = NA = 1). In other words, the classiﬁer at
R (which works very well to discriminate signals of T from
random or replayed signals) cannot successfully discriminate
synthetic signals generated by the GAN. The complete results
of spooﬁng attack under different MIMO settings are shown
in Table III, where each data entry lists a sequence of numbers
when NA varies from 1 to 4. We observed the same trends
with the use of multiple antennas as in the case of replay
attacks, namely the attack success probability increases with
larger NT or NA, and decreases with larger NR. Comparing
Tables II and III, we can see that the GAN-based spooﬁng
attacks are much more effective than replay attacks.
The above results are obtained when AT is located at
(0, 10). We now study the impact of AT ’s locations. We set
AT ’s location as (0, 5), (0, 15) and (0, 20), respectively, and
keep all other settings unchanged. We focus on the SISO
setting in this study. The success probability of the GANbased spooﬁng attack is shown in Table IV. We can see that
if AT is close to T , i.e., AT is at (0, 5), it can generate
high-ﬁdelity synthetic signals for the spooﬁng attack. As a
result, the attack success probability is very high (98.6%).
On the other hand, if AT is far away from T , e.g., AT
is at (0, 20), there is a signiﬁcant difference between its
channel to R and T ’s channel to R. Moreover, AT ’s power
is limited, and thus AT may not be able to compensate its
channel propagation gain. Now, the attack success probability
is reduced (54.6%), but it is still much higher than the success
probability by using random signals (7.86%). If AR is located
very close to R, it can observe similar signals as R and
the spooﬁng attack is very likely to be successful. If AR is
not close to R, the attack success probability may drop. To
show this, we move AR from (10, 0.1) to (10, 10) and check
multiple locations while keeping all other settings unchanged.
The success probability of the GAN-based spooﬁng attack is
between 60.6% and 97.8%, which is always much better than
spooﬁng with random signals or replay attack. Although the
location of AR plays a signiﬁcant role regarding the success
probability, this impact is complex. The success probability
of spooﬁng attack is not monotonically decreasing when the
distance between R and AR increases.
Finally, we study how the attack success changes if the
network topology changes from training time to test time. For
that purpose, we move AT from (0, 10) to a new position after
the training process. AT can still use its current generator to
launch the attack. Table V shows results under different AT
locations, where we focus on the SISO setting and assume that
the GAN is not retrained. We observe that as AT moves away
SUCCESS PROBABILITY (%) OF GAN-BASED SPOOFING ATTACK UNDER DIFFERENT MIMO SETTINGS.
76.2, 88.6, 100, 100
64.8, 75.4, 84.8, 85
63.2, 73.2, 82.6, 82.6
62.0, 72.0, 81, 81.2
90.2, 95.6, 100, 100
76.6, 81.2, 84.6, 85
74.6, 79, 82.2, 82.4
73.4, 77.8, 81.2, 81.2
89.6, 99.6, 99.6, 100
76.2, 84.4, 84.6, 84.8
74.2, 82, 82.2, 82.2
73.8, 80.8, 80.8, 81
95.4, 99.6, 99.4, 99.4
81, 84.6, 84.2, 84.4
78.8, 82, 82, 82
77.6, 81, 80.6, 80.8
THE IMPACT OF AT ’S LOCATION ON SUCCESS PROBABILITY OF
GAN-BASED SPOOFING ATTACK.
AT location
Success probability
THE IMPACT OF AT ’S MOBILITY (AFTER TRAINING) ON SUCCESS
PROBABILITY OF GAN-BASED SPOOFING ATTACK.
AT ’s location
Success probability
from T , the distribution of the received signal changes and
the attack success probability decreases. However, the attack
success probability is still signiﬁcantly higher than the one
achieved by the replay attack when AT does not move. If AT
moves far away from its position when training, it is expected
that the attack cannot be very successful. In that case, AT
may request AR to retrain the GAN together, and then run
the retrained generator for spooﬁng attack. Other topology
changes, such as moving T or R, will provide similar results.
Thus, the GAN-based spooﬁng attack can be applied in mobile
scenarios.
VI. PRACTICAL IMPLEMENTATION
In this section, we evaluate the processing time associated
with signal spooﬁng and classiﬁcation operations. For that purpose, we have implemented each deep learning task (classiﬁer
at the receiver, generator at the adversary’s transmitter, and
discriminator at the adversary’s receiver) on two embedded
platforms, NVIDIA Jetson Nano Developer Kit and
Xilinx Zynq UltraScale+ XCZU9EG FPGA .
The trained software model of the GAN in Keras is converted to a TensorFlow graph to create an inference graph with
TensorRT , inference optimizer for NVIDIA’s embedded
GPU systems. For an efﬁcient deployment, the model is
quantized by TensorRT to a 16-bit ﬁxed point (FP16) implementation that effectively reduces the memory consumption.
The tensors at each layer are fused together to optimize the
use of embedded GPU memory and bandwidth.
INFERENCE TIME OF DEEP NEURAL NETWORKS OF THE RECEIVER AND
THE ADVERSARY ON EMBEDDED GPU.
Classiﬁer at R
Generator at AT
NR = NA = 1
NR = NA = 4
For the FPGA implementation, Vivado Design Suite 
is used to simulate, and then synthesize the FPGA code. To
export the trained Keras model to Vivado, the model is again
quantized to FP16. The weights and bias of each layer are
converted to the FPGA-readable format following the approach
in and interfaced with Vivado. For the timing analysis,
the primary clock operates with 100 MHz cycle. Static timing
analysis validates that there is enough timing margin (slack)
to make setup and hold calculations. This way, it is ensured
that there is sufﬁcient margin in placement and routing such
that the data arrives and remains valid (stored in the register
and ready to be used) before the clock transitions and held
valid for a period of time after the transition.
The inference tests are repeated 1000 times and the average
inference time (latency to process one sample) is computed.
The latency results are shown in Tables VI and VII for
embedded GPU and FPGA, respectively. Since we assume
that the classiﬁer at R and the discriminator at AR have the
same deep neural network structures, their inference times
are the same. On the other hand, the deep neural network
structure of the generator at AT is larger than others so
the corresponding latency is higher. In all cases, latency is
lower when a single antenna is used at each node, since the
underlying deep neural network is smaller compared to the
MIMO extension (multiple antennas are used at R or AT ).
Note that the number of features or the size of ﬁrst (input)
layer at R increases linearly with the number of antennas at
R while the size of generated samples by AT or the size of
last (output) layer at AT increases linearly with the number
of antennas at AT . Moreover, a larger input/output layer also
yields larger deep neural networks. Overall, FPGA achieves
order-wise (up to 36 times) smaller latency (measured at the
microsecond level) compared to embedded GPU as it operates
with faster cycle, while latency achieved by embedded GPU
is still less than a millisecond (as a time reference, note that
a typical frame in the IEEE 802.11ac standard is 5.484 msec,
which is much larger than the processing times measured).
INFERENCE TIME OF DEEP NEURAL NETWORKS OF THE RECEIVER AND
THE ADVERSARY ON FPGA.
Classiﬁer at R
Generator at AT
NR = NA = 1
NR = NA = 4
VII. CONCLUSION
We developed a GAN-based spooﬁng attack, where an
adversary generates synthetic signals that cannot be reliably
distinguished from real signals by using a deep learning-based
classiﬁer. We considered both SISO and MIMO communication systems, where each defender or adversary node may have
single or multiple antennas. First, we designed a pre-trained
deep learning-based classiﬁer to distinguish signals reliably in
case there is no spooﬁng attack. Then, we considered two baseline spooﬁng attacks, namely transmitting random signals or
replaying real signals that are captured previously. Since these
spooﬁng signals cannot keep patterns of signals received by the
intended receiver in terms of waveform, channel, or radio hardware effects, these baseline spooﬁng attacks are not successful
against a deep learning-based classiﬁer. Hence, we designed a
spooﬁng attack building upon a GAN that is trained over the
air by an adversary transmitter transmitting synthetic signals
and an adversary receiver distinguishing real and synthetic
signals. We showed that the success probability of this GANbased spooﬁng attack is very high, holds for different network
topologies and when node locations change from training to
test time, and further improves when multiple antennas are
used at the adversary transmitter. Finally, we presented the
spooﬁng attack implementation on embedded platforms and
demonstrated the low latency achieved by embedded GPU and
FPGA. As the GAN presents a practical threat against intrusion
detection mechanisms based on physical layer authentication,
future work should look at defense mechanisms to detect and
mitigate these novel spooﬁng attacks.