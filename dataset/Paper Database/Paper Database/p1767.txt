Convolutional Learning
of Spatio-temporal Features
Graham W. Taylor, Rob Fergus, Yann LeCun, and Christoph Bregler
Courant Institute of Mathematical Sciences, New York University
New York, USA
{gwtaylor,fergus,yann,bregler}@cs.nyu.edu
Abstract. We address the problem of learning good features for understanding video data. We introduce a model that learns latent representations of image sequences from pairs of successive images. The convolutional architecture of our model allows it to scale to realistic image sizes
whilst using a compact parametrization. In experiments on the NORB
dataset, we show our model extracts latent “ﬂow ﬁelds” which correspond
to the transformation between the pair of input frames. We also use our
model to extract low-level motion features in a multi-stage architecture
for action recognition, demonstrating competitive performance on both
the KTH and Hollywood2 datasets.
Keywords: unsupervised learning, restricted Boltzmann machines, convolutional nets, optical ﬂow, video analysis, activity recognition.
Introduction
While the dominant methodology for visual recognition from images and video
relies on hand-crafted features, there has been a growing interest in methods
that learn low-level and mid-level features, either in supervised , unsupervised , or semi-supervised settings . In recent years, feature-learning
methods have focused on learning multiple layers of feature hierarchies to extract increasingly abstract representations at each stage. This has been generally
done by composing modules of the same architecture such as Restricted Boltzmann Machines (RBM) , autoencoders , or various forms of encoder-decoder
networks each of which are trained unsupervised and therefore can take
advantage of large amounts of unlabeled image data. The resulting “deep architectures” are then globally trained discriminatively, with the idea that the
ﬁrst phase of unsupervised feature learning has provided an initialization that
is much more salient for high-level tasks than the usual random initialization.
Most of the above methods do not exploit the pictorial nature of the input, and
have been applied to relatively small image patches (typically less than 64 × 64
pixels), because they do not scale well with the size of the input. This can be
addressed by using a convolutional architecture , which exploits the fact that
salient motifs can appear anywhere in the image. This idea has been recently used
in the context of RBMs . By employing successive stages of weight-sharing
K. Daniilidis, P. Maragos, N. Paragios (Eds.): ECCV 2010, Part VI, LNCS 6316, pp. 140–153, 2010.
⃝Springer-Verlag Berlin Heidelberg 2010
Convolutional Learning of Spatio-temporal Features
and feature-pooling, deep convolutional architectures can achieve stable latent
representations at each layer, that preserve locality, provide invariance to small
variations of the input, and drastically reduce the number of free parameters.
To date, most of the work on unsupervised feature extraction has focused
on static images but little attention has been given to learning about the way
that images from videos change over time. The few works that address the problem (e.g. ) are trained on isolated patches (not convolutionally), and suﬀer
from the same limitations as static methods. In this paper, we propose a model
that can extract motion-sensitive features from pairs of images (i.e. neighbouring frames of video). The features can capture both static and dynamic content.
Our model is trained convolutionally which enables it to work on high-resolution
images. We ﬁrst apply it to synthetic data and show that it learns to represent
ﬂow-like features when the type of transformations are restricted. We then use it
to extract useful features for human activity recognition in a multi-stage architecture that achieves state-of-the-art performance on the KTH actions dataset.
Results are also shown on the challenging Hollywood2 action recognition dataset.
Related Work
Our work extends the Gated RBM (GRBM) model proposed by Memisevic and
Hinton . The GRBM is able to extract distributed, domain-speciﬁc representations of image patch transformations. Due to its tensor parameterization, it is
not practical to apply this model to patches larger than about (N = 32)×32 since
the number of parameters grows as O(N 4). Therefore, it has only been applied
to low-resolution synthetic images of shifting pixels or PCA-reduced samples of
low-resolution video. While the model has been shown to improve digit classi-
ﬁcation by learning the types of transformations to which the classiﬁer should
remain invariant, we are not aware of is application to a discriminative task on
real video. Memisevic and Hinton have recently proposed a factored form of the
GRBM that drastically reduces the number of free parameters by replacing the three-way weight tensor with three low-rank matrices. In the present
work, we take an alternative convolutional approach to scaling up the model,
which achieves the additional beneﬁt of translation invariance. Sutskever and
Hinton proposed a type of temporal RBM for video. Using synthetic videos
of bouncing balls, they trained a model which was then able to generate similar
videos, but did not apply their work to discriminative tasks. The signal from the
past only provides a type of “temporal bias” to the hidden variables, which is
fundamentally diﬀerent from our third-order RBM, where past inputs modulate
the interactions between the current input and the latent feature representation.
Building on the rapidly growing literature on sparse over-complete decompositions of image patches , Cadieu and Olshausen have proposed a two-layer
probabilistic model that learns complex motion features from video. In contrast
to our model, they explicitly separate static amplitude and dynamic phase at
the ﬁrst layer. The second layer then learns high-order dependencies among the
phase variables. Dean et al. have recently proposed learning spatio-temporal
G.W. Taylor et al.
descriptors by recursively applying the feature-sign sparse coding algorithm 
to 3D patches of videos extracted at detected interest points. Like our work,
their descriptors are adaptive, but their method is trained at the patch level.
State-of-the-art methods for activity recognition use engineered motion and
texture descriptors extracted around interest points detected by spatio-temporal
corner detectors. The descriptors are then vector-quantized, pooled over time and
space into a “bag”, and fed to an SVM classiﬁer. Among the best performing
methods are 1) Laptev et al.’s spatio-temporal interest points (STIP) used
in conjunction with the “HOG/HOF” descriptor that computes histograms of
spatial gradients and optic ﬂow accumulated in local space-time neighbourhoods
 ; 2) Dollar et al.’s “Cuboids” approach used in conjunction with several
diﬀerent descriptor types; and 3) Willems et al.’s approach which uses the
determinant of the Hessian as a saliency measure and computes a weighted sum
of Haar wavelet responses within local rectangular sub-volumes.
In contrast to these approaches, we perform a type of implicit, rather than
explicit interest point detection and focus on learning descriptors rather than
hand-crafting them. We also bypass the quantization step in favor of several
additional layers of feature extraction that provide a distributed representation
of each video. Jhuang et al. propose an approach similar in spirit to ours,
using multiple levels of feature detectors at increasing spatio-temporal scale.
However, like , they forgo learning until the very last stage: low and
mid-level features are engineered.
Unsupervised Learning of Spatio-temporal Features
We ﬁrst describe a related approach, the gated Restricted Boltzmann Machine,
which models image patches but does not scale to realistic-sized images or video.
We then describe our convolutional model.
The Gated Restricted Boltzmann Machine (GRBM)
The gated Restricted Boltzmann Machine diﬀers from other conditional
RBM architectures (e.g. ) in that its inputs change the eﬀective weights
of the model instead of simply adjusting the eﬀective biases of visible or latent
variables (see Figure 1(left)). This is achieved by deﬁning an energy function
that captures third-order interactions among three types of binary stochastic
variables: inputs, x, outputs, y, and latents, z:
E (y, z; x) = −
Wijkxiyjzk −
where Wijk are the components of a parameter tensor, W, which is learned. To
model aﬃne and not just linear dependencies, biases b and c are included.
When learning from video, x and y are image patches (expressed as vectors)
at identical spatial locations in sequential frames, and z is a latent representation
Convolutional Learning of Spatio-temporal Features
Y (Output)
Latent feature
Y (Output)
Fig. 1. Left: A gated RBM. Right: A convolutional gated RBM using probabilistic
max-pooling.
of the transformation between x and y. The energy of any joint conﬁguration
{y, z; x} is converted to a conditional probability by normalizing:
p(y, z|x) = exp (−E(y, z; x)) /Z(x)
where the “partition function”, Z(x) = 
y,z exp (−E(y, z; x)) is intractable to
compute exactly since it involves a sum over all possible conﬁgurations of the
output and latent variables. However, we do not need to compute this quantity
to perform either inference or learning. Given an input-output pair of image
patches, {x, y}, it follows from Eq. 1 and 2 that
p(zk = 1|x, y) = σ(
Wijkxiyj + bk)
where σ(z) = 1/(1 + exp(−z)) is the logistic.
Maximizing the marginal conditional likelihood, p(y|x), over parameters θ =
{W, b, c} is diﬃcult for all but the smallest models due to the intractability of
computing Z. Learning, however, still works well if we approximately follow the
gradient of another function called the contrastive divergence (CD) .
The Convolutional Gated Restricted Boltzmann Machine
(convGRBM)
GRBMs represent the input and output as a vector, and thus ignore the pictorial
structure of images. Weights that encode a particular local transformation must
be re-learned to detect that same transformation at multiple locations. We now
describe a form of GRBM that shares weights at all locations in an image.
Inference is performed eﬃciently through convolution, so we refer to the model as
a convolutional GRBM (convGRBM). The model is illustrated in Figure 1(right).
G.W. Taylor et al.
In our description of the GRBM, we suggested that x and y were time-adjacent
patches from video, but they could have been any arbitrary vectors. Here, we assume that x is a Nx×Nx binary image and y is a Ny ×Ny binary image. We assume
square, binary images to simplify the presentation but provide details of using realvalued images in the supplemental material. In the GRBM we had K binary latent
variables. Now we have K Nz × Nz binary latent feature maps (z = {zk}K
m and n be spatial indices to each 2D feature map, such that a single feature is described as zk
m,n. The indices m and n not only index a particular 2D feature, but
they also deﬁne 1) an N y
w local region in y from which this feature receives
input, and 2) a N x
w region of x which modulates the interaction between all K
features at location m, n and the N y
w local region in y. Alternatively, we can
think of each of the K features at index m, n as contributing a local log-linear patch
model between the N x
w pixels in x and the N y
w pixels in y where the location of these local regions is speciﬁed by m, n. The number of local autoregressive
models that can be “blended” is exponential in the number of feature maps.
For the remainder of our discussion, we will make two assumptions: 1) the
input and output images are the same dimensions, Nx = Ny (this holds true for
neighbouring frames in video); and 2) the ﬁlter dimensions in the input and the
output are the same, N x
w. These assumptions are not necessary, but they
greatly simplify bookkeeping and therefore the presentation that follows.
The convGRBM has the following energy function:
E (y, z; x) = −
r,s,m,nym+r−1,n+s−1
where we use a per-map bias, bk, for the latent variables and single output bias,
c. Eq. 4 is similar to the energy function of a convolutional RBM , except
that what was previously a ﬁlter weight with 3 indices: r, s, k has been replaced
by a conditional ﬁlter weight, γ(x)k
r,s,m,n = N x
r,s,u,vxm+u−1,n+v−1, with 5
indices. The additional indices m, n denote the local region in x which modulates
the ﬁlter. Note that while m, n index the entire feature map, u, v and r, s index
within the local regions of x and y, respectively.
As in the GRBM, the probability of jointly observing y and z given x is given
by Eq. 2. The conditional distributions for z|y, x and y|z, x naturally follow:
m,n = 1|x, y) = σ(
r,s,m,nym+r−1,n+s−1 + bk)
p(yi,j = 1|x, z) = σ(
r′,s′,i+r−1,j+s−1ˆzk
i+r−1,j+s−1 + c)
where r′ = N y
w −r + 1 and s′ = N y
w −s + 1 represent a “ﬂipping” of the
ﬁlter indices (i.e. correlation rather than convolution), and ˆz is the result of
Convolutional Learning of Spatio-temporal Features
zero-padding z such that its ﬁrst N y
w −1 rows and columns are zero. Note that
in Eq. 5 an output unit yi,j makes a bottom-up contribution to several elements
(m, n) in all K feature maps. Therefore, in top-down reconstruction (Eq. 6) we
must ensure that each output unit receives input from all feature map elements
to which it has contributed, through the same conditional ﬁlter weight that was
used bottom-up. To account for border eﬀects, it is convenient to deﬁne ˆγ(x) as
a zero-padded version of γ(x) whose dimensions are N y
w × Ny × Ny × K.
As with convolutional RBMs, we can express both inference (Eq. 5) and reconstruction (Eq. 6) in terms of convolution operations (see the supplemental
material for details). While inference in a convolutional RBM requires a single
2D convolution of the data with the ﬁlters, inference in the convGRBM requires
a 2D convolution of the output and data for each element of the conditioning window: i.e. N x
w convolutions. The same holds true for reconstruction
(replacing data with feature maps). Note, however, that a fully-connected (i.e.
non-convolutional) GRBM requires Nx × Nx more operations during inference
than a standard RBM. Restricting connections to be local clearly makes a huge
diﬀerence in eﬃciency, especially when the ratio of pixels to ﬁlter size is high.
Probabilistic Max Pooling. Most object recognition systems use a pooling
operation that combines nearby values in input or feature space through a max,
average or histogram operator. This provides the system with some invariance to
small local distortions and reduces the computational burden. Traditional pooling layers, however, are designed for feed-forward architectures like convolutional
nets and do not support generative models such as RBMs that include top-down
feedback. Lee et al. thus introduced probabilistic max-pooling in the context
of convolutional RBMs. We adopt their approach, and summarize it here.
Recall that we have K feature maps connected to the visible input and output.
We introduce a layer on top of the feature maps, called the pooling layer, which
also has K maps, each connected 1-1 to a feature map. However, the maps of
the pooling layer are reduced in spatial resolution by a constant factor C in
each dimension (e.g. 2 or 4). More precisely, each feature map zk is partitioned
into non-overlapping C ×C blocks, and each block is connected to exactly one
binary unit, pk
α, in the pooling layer (i.e. Np = Nz/C). Here, we have adopted
the notation of where α indexes the pooling units and also deﬁne a block
formally as Bα ≜{(m, n) : zm,n belongs to the block α}.
The connection between pooling unit pα and the features in block Bα is constrained such that at most one of the features in a block is on, and if any of the
features in block Bα is on, then pα must be on, otherwise pα is oﬀ. This leads
to a modiﬁed, constrained, energy function:
E (y, z; x) = −
r,s,m,nym+r−1,n+s−1
subject to:
m,n ≤1, ∀k, α.
G.W. Taylor et al.
Changing the energy function results in a change to the inference procedure.
Note that each unit in feature map k receives the following bottom-up signal
from the input and output:
r,s,m,nym+r−1,n+s−1 + bk.
Due to the factorial form of Eq. 7, we can sample each of the blocks independently
as a multinomial function of their inputs:
m,n = 1|x, y) = Ω−1exp
α = 0|x, y) = Ω−1
where the normalization constant is Ω = 1 + 
(m′,n′)∈Bα exp
Experiments on Synthetic Data: NORB
One way to evaluate third-order RBMs is by experimenting in a domain where
optical ﬂow is controlled and regular (e.g. the “shifting pixels” experiments of
 ). In this section, we describe a domain for experimentation that is of increased complexity yet still controlled. The “Small NORB” dataset has 5
object categories (humans, airplanes, cards, trucks, animals), and 5 diﬀerent object instances for each training and test. Each object instance has 18 azimuths,
9 camera-elevations, and 6 illuminations, for a total of 24300 training samples
and 24300 test samples. Traditionally NORB has been used to evaluate object
recognition. Since our goal is to extract useful “transformation” features from
pairs of images we use the dataset diﬀerently than intended.
The azimuth, elevation, and illumination changes in the NORB dataset are at
ﬁxed intervals and corresponding labels for each image are available. Therefore,
we created synthetic “videos” where an object underwent forward or reverse
transformation in one of the dimensions while the others were held ﬁxed. Before
generating the videos, we downsampled each image to 32×32 pixels, and preprocessed it using local contrast normalization (LCN) as described in . The
LCN operation involves a 9×9 smoothing ﬁlter, so each resulting image is 24×24.
We then trained a convGRBM with real-valued outputs and 20 binary feature
maps. The ﬁlter dimensions were N x
w = 9. The model trained on all
azimuth changes of ±20◦, and all camera elevation changes of ±10◦. It was
trained for 30 complete passes through the training set, using standard CD(1)
learning. Figure 2 shows the result of performing 10 “image analogies”. Each
analogy is represented by a group of six small greyscale images and one larger
“optical ﬂow’ image. To perform an analogy, the model is presented with a pair
of images each from an object instance it has never seen before, and asked to
apply the same inferred transformation to a random target image, also which it
has never seen before. We can also visualize the “ﬂow” implicit in the hidden
units and conditional on the pair, by drawing, for each input pixel, an arrow to
the output pixel to which it is most strongly connected according to the learned
Convolutional Learning of Spatio-temporal Features
Fig. 2. Analogies. Each group of six greyscale images from left to right, top to bottom represent: input image; output image; model’s reconstruction of output; random
target image; ground truth of random target (i.e. by searching for the example that
corresponds to the transformation between image and output); inferred transformation
applied to targets. Examples 1-6 show changes in azimuth; 7-10 show changes in camera
elevation. A representation of inferred “max” ﬂow ﬁelds is shown for each example.
ﬁlters, W (marginalized over the binary feature maps). Much information is
potentially lost in this representation : the transformation encoded by the
feature maps can be much richer than what is expressed by optical ﬂow alone.
Experiments on Human Activity Recognition
Recognition of human activity from video is a challenging problem that has received an increasing amount of attention from the computer vision community in
recent years. The ability to parse high-level visual information has wide-ranging
G.W. Taylor et al.
convolution
Rectification
contrast norm.
spatial pooling
Max temporal
Fig. 3. An overview of our multi-stage architecture for human activity recognition. See
text for a description of each stage.
applications that include surveillance and security, the aid of people with special
needs and the understanding and interpretation of non-verbal communication.
We approach the problem with a multi-stage architecture (see Figure 3) that
combines convolutional and fully-connected layers. At the lowest layer, a convolutional GRBM extracts features from every successive pair of frames. We
observe that most features are motion-sensitive, but others capture static information. This is particularly useful in providing context in more challenging
datasets and will aid in applying our method to other tasks, such as scene
recognition from video. A subset of the feature maps inferred from the KTH
actions dataset are shown in Figure 4. The features are extremely diverse: many
capture limb movement, others capture edge content, and one seems particularly apt at segmenting person from background (we note that the background
is generally uniformly textured in KTH).
To capture mid-level spatio-temporal cues, we apply a traditional (i.e. feedforward) convolutional layer that uses 3D spatio-temporal ﬁlters. A connectivity
table indicates which of the 3D convolutional layer output maps are connected
to each convGRBM pooling map. Our convolutional layer is a 3D extension of
the architecture advocated by Jarrett et al. : ﬁltering, followed by a tanh
nonlinearity, followed by absolute value rectiﬁcation, followed by a local contrast normalization layer, followed by average pooling and subsampling. Both
the abs(·) and tanh(·) are performed element-wise, so their extension to 3D is
straightforward. The LCN and pooling/subsampling layers each employ a ﬁltering operation, which we perform in 3D instead of 2D.
The output of the second convolutional layer is a series of 3D feature maps. To
cope with variable-length sequences, we perform an additional max pooling in
the temporal dimension. This ensures that the mid-level features can be reduced
to a vector of consistent size. This representation is followed by one or more
fully-connected layers (we use 1 or 2 in our experiments). The topmost layer is a
softmax (multinomial) layer corresponding to discrete activity labels, and intermediate layers use a tanh nonlinearity. The convGRBM is trained unsupervised
using CD, while the upper layers are trained by backpropagation. We do not
backpropagate through the ﬁrst layer following unsupervised training, though
this could be done to make the low-level features more discriminative.
KTH Actions Dataset
The KTH actions dataset is the most commonly used dataset in evaluating
human action recognition. It consists of 25 subjects performing six actions: walking, jogging, running, boxing, hand waving, and hand clapping under 4 scenarios
Convolutional Learning of Spatio-temporal Features
(outdoors, outdoors with scale variation, outdoors with diﬀerent clothes and indoors). Each sequence is further divided into shorter “clips” for a total of 2391
sequences. We use the original evaluation methodology: assigning 8 subjects to
a training set, 8 to a validation set, and the remaining 9 subjects to a test set so
that our results are directly comparable to the recent survey by Wang et al. .
Preprocessing. We maintained the original frame rate (25fps) and spatial resolution 160×120 in all of our experiments. All videos then underwent 3D local
contrast normalization (an extension of ).
Unsupervised Learning. We trained a convGRBM with Nz = 32 feature
maps and a pooling factor of C = 4. Filter sizes were N x
x = 16. We chose
16 as it was a number amenable to GPU-based computing, and it was close to
the minimal patch size (18×18) suggested by Wang et al. . We have not
tried other patch sizes. Weights were updated in “mini-batches” of 128 pairs of
subsequent frames (the order of pairs was randomly permuted as to balance the
mini-batches). We made 30 complete passes over all videos in the training set.
Supervised Learning. We trained a convolutional net with 128 9×9×9 ﬁlters
(randomly initialized) on top of the features extracted by the convGRBM. Each
feature map of the convolutional net received input from 4 randomly chosen
pooling maps from the ﬁrst layer. Architectural choices were motivated by a
desire to extract mid-level spatio-temporal features; the local connectivity used
is standard practice . The nonlinearities we used were identical to those in 
with the exception of extending contrast normalization and downsampling to 3D:
LCN was performed using a 9×9×9 smoothing ﬁlter, followed by 4×4×4 average
downsampling. We also tried a more traditional network architecture which did
not use absolute value rectiﬁcation and LCN. We found that it slightly decreased
accuracy (by about 1%; less drastic than reported in for static object recognition). The pooling layer was then subjected to a further max-pooling over time,
the output was vectorized and connected to one or two fully-connected layers.
All layers (except the convGRBM) used online backpropagation1. We made 30
complete passes through the training set.
Table 1 compares our approach to the prior art using dense sampling (i.e. no
interest-point detection) and K-means quantization. We report mean accuracy
over all six actions. Our method, to the best of our knowledge, gives the best
mean accuracy on KTH amongst methods that do not use interest-point detection. The currently best performing method uses the STIP interest-point
detector and HOG/HOF or HOF descriptors (91.8 and 92.1%, respectively). Due
to the high ratio of background pixels to subject pixels in KTH, and the limited
number of actions (that don’t require context information), interest-point methods tend to perform extremely well on KTH. Evidence already indicates that
dense-sampling outperforms interest-points on more challenging datasets .
1 The choice of using online learning here was simply a matter of convenience due to
variable sequence lengths. Since the convGRBM is trained on pairs of frames (rather
than whole sequences) it is easier to train in mini-batches.
G.W. Taylor et al.
Table 1. KTH action dataset: classiﬁcation performance using dense sampling. Integers
preceding a module indicate the number of feature maps in that module. Superscripts
indicate ﬁlter sizes or downsampling ratio (chosen by context). convGRBM is our
proposed method, trained unsupervised. FCSG is a standard convolutional layer: a
set of convolution ﬁlters (C) followed by a sigmoid/tanh nonlinearity (S), and gain
coeﬃcients (G). R/N/PA is abs rectiﬁcation, followed by local contrast normalization,
followed by average pooling. The number of fully-connected layers are either 1 which
corresponds to logistic regression (log reg) or 2, which corresponds to a multi-layer
perceptron (mlp).
Accuracy Convolutional architectures
HOG3D-KM-SVM
85.3 32convGRBM16×16-128F9×9×9
CSG -R/N/P4×4×4
HOG/HOF-KM-SVM
86.1 32convGRBM16×16-128F9×9×9
CSG -R/N/P4×4×4
HOG-KM-SVM
79.0 32F16×16×2
-R/N/P4×4×4
-128F9×9×9
CSG -R/N/P4×4×4
HOF-KM-SVM
88.0 32F16×16×2
-R/N/P4×4×4
-128F9×9×9
CSG -R/N/P4×4×4
To demonstrate the advantage of low-level feature extraction with convGRBMs,
we have replaced the ﬁrst layer with a standard 3D convolutional layer (32F16×16×2
- see Table 1). By using ﬁlters of size 16×16×2 and a 4×4×4 pooling layer, we
have matched the architecture of the convGRBM as best as possible to perform
this comparison. The entire network is trained by backpropagation. We note that
this fully feed-forward approach performs considerably worse.
Hollywood2 Dataset
Table 2. Hollywood2 dataset: average precision (AP) using dense sampling
Prior Art :
HOG3D+KM+SVM
HOG/HOF+KM+SVM 47.4
HOG+KM+SVM
HOF+KM+SVM
convGRBM+SC+SVM 46.6
The Hollywood2 dataset consists
of a collection of video clips containing 12 classes of human action
extracted from 69 movies. It totals approximately 20.1 hours of video and
contains approximately 150 samples
per action. It provides a more realistic and challenging environment for
human action recognition by containing varying spatial resolution, camera
zoom, scene cuts and compression artifacts.
Performance is evaluated as suggested by Marszalek et al. : by computing
the average precision (AP) for each of the action classes and reporting mean AP
over all actions. Following , we downsampled the spatial resolution of every
video clip (which varies between clips) by a factor of 2. Videos were then zeropadded to have a constant spatial resolution. We did no temporal downsampling.
All videos then underwent 3D local contrast normalization.
Similar to the KTH dataset, we trained a convGRBM with Nz = 32 feature
maps and a pooling factor of C = 4. Filter sizes were N x
x = 16. The
convGRBM was trained for 50 complete passes over all videos in the training
dataset and used a sparsity regularization term in the CD updates that
encouraged the hidden units to have a mean activation of 0.1.
Convolutional Learning of Spatio-temporal Features
Fig. 4. Feature maps inferred from the KTH actions dataset. A subset of 6 (4× 4
max-pooled) feature maps (of 32 total) inferred from sequences of the same subject
performing diﬀerent activities: boxing (rows 1-6), hand-clapping (rows 7-12) and walking (rows 13-18). Rows correspond to features, columns correspond to frames. We show
person 1, scenario 1 and sequence 1. We display real-valued probabilities of activation
rather than stochastic choices. We also downsample the frame rate by a factor of 4 for
display. From the hand-clapping example, we see that features 1 and 3 are sensitive
to motion in opposite directions (note how features 1 and 3 localize opposite hands),
feature 4 seems to be sensitive to edges, and feature 6 learns to segment the subject
from the background. Remaining activities are shown in the supplemental material.
G.W. Taylor et al.
Instead of applying a convolutional network to extract mid-level features, we
sampled the feature maps of the convGRBM with a stride of 8 pixels in each
direction, and formed local temporal groups of 10 frames. We then used the
method described in to learn a dictionary of 4000 basis vectors, and encode
the temporal groups as sparse linear coeﬃcients of the bases. Each video then
yielded a varying number of sparse vectors (given diﬀerent lengths) so we applied
max-pooling over the temporal dimension. A SVM (with RBF kernel) was then
trained (per-activity) on the top-level representation. Since Hollywood2 videos
may contain more than one activity, this approach allowed us to avoid training
a separate 3D convolutional net per-activity.
We achieve a mean AP of 46.6% using dense sampling, learned convGRBM
low-level features and sparse coding with 4000 elements. To the best of our
knowledge, the only superior published result is 47.4% which uses dense sampling
with HOG/HOF features and quantization . However, our result outperforms
other popular methods such as Cuboids (45.0%) and Willems et al. (38.2%)
(published in ). We also expect that an approach that combined our learned
features with HOG/HOF descriptors could perform well.
Conclusion
Gated RBMs extract latent representations that are useful for video understanding tasks. However, they do not scale well to realistic resolutions and must learn
separate feature detectors at all locations in a frame. In the spirit of recent work
exploring convolutional deep architectures, we have introduced the convolutional
gated RBM. We showed that it learned to represent optical ﬂow and performed
image analogies in a controlled, synthetic environment. In a more challenging setting, human activity recognition, it extracted useful motion-sensitive features,
as well as segmentation and edge-detection operators that allowed it to perform
competitively against the state-of-the-art as part of a multi-stage architecture.
Acknowledgments.
N000140910789, ONR
N000140910076), and
supporting