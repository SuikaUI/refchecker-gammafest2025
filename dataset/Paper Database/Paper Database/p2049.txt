Auto-DeepLab:
Hierarchical Neural Architecture Search for Semantic Image Segmentation
Chenxi Liu1∗, Liang-Chieh Chen2, Florian Schroff2, Hartwig Adam2, Wei Hua2,
Alan Yuille1, Li Fei-Fei3
1Johns Hopkins University
3Stanford University
Recently, Neural Architecture Search (NAS) has successfully identiﬁed neural network architectures that exceed human designed ones on large-scale image classiﬁcation. In
this paper, we study NAS for semantic image segmentation.
Existing works often focus on searching the repeatable cell
structure, while hand-designing the outer network structure
that controls the spatial resolution changes. This choice
simpliﬁes the search space, but becomes increasingly problematic for dense image prediction which exhibits a lot more
network level architectural variations. Therefore, we propose to search the network level structure in addition to the
cell level structure, which forms a hierarchical architecture
search space. We present a network level search space that
includes many popular designs, and develop a formulation
that allows efﬁcient gradient-based architecture search (3
P100 GPU days on Cityscapes images). We demonstrate
the effectiveness of the proposed method on the challenging Cityscapes, PASCAL VOC 2012, and ADE20K datasets.
Auto-DeepLab, our architecture searched speciﬁcally for
semantic image segmentation, attains state-of-the-art performance without any ImageNet pretraining.1
1. Introduction
Deep neural networks have been proved successful
across a large variety of artiﬁcial intelligence tasks, including image recognition , speech recognition ,
machine translation etc.
While better optimizers and better normalization techniques certainly played an important role, a lot of the progress comes
from the design of neural network architectures. In computer vision, this holds true for both image classiﬁcation
 and dense image prediction .
More recently, in the spirit of AutoML and democra-
∗Work done while an intern at Google.
1Code for Auto-DeepLab released at 
tensorflow/models/tree/master/research/deeplab.
Auto Search
ResNet 
DenseNet 
DeepLabv3+ 
NASNet 
AmoebaNet 
PNASNet 
DARTS 
Cityscapes
Auto-DeepLab
Cityscapes
Table 1: Comparing our work against other CNN architectures with two-level hierarchy. The main differences include: (1) we directly search CNN architecture for semantic
segmentation, (2) we search the network level architecture
as well as the cell level one, and (3) our efﬁcient search only
requires 3 P100 GPU days.
tizing AI, there has been signiﬁcant interest in designing
neural network architectures automatically, instead of relying heavily on expert experience and knowledge. Importantly, in the past year, Neural Architecture Search (NAS)
has successfully identiﬁed architectures that exceed humandesigned architectures on large-scale image classiﬁcation
problems .
Image classiﬁcation is a good starting point for NAS,
because it is the most fundamental and well-studied highlevel recognition task. In addition, there exists benchmark
datasets (e.g., CIFAR-10) with relatively small images, resulting in less computation and faster training. However,
image classiﬁcation should not be the end point for NAS,
and the current success shows promise to extend into more
demanding domains. In this paper, we study Neural Architecture Search for semantic image segmentation, an important computer vision task that assigns a label like “person”
or “bicycle” to each pixel in the input image.
Naively porting ideas from image classiﬁcation would
not sufﬁce for semantic segmentation. In image classiﬁcation, NAS typically applies transfer learning from low res-
 
olution images to high resolution images , whereas optimal architectures for semantic segmentation must inherently operate on high resolution imagery. This suggests the
need for: (1) a more relaxed and general search space to
capture the architectural variations brought by the higher
resolution, and (2) a more efﬁcient architecture search technique as higher resolution requires heavier computation.
We notice that modern CNN designs usually follow a two-level hierarchy, where the outer network
level controls the spatial resolution changes, and the inner
cell level governs the speciﬁc layer-wise computations. The
vast majority of current works on NAS 
follow this two-level hierarchical design, but only automatically search the inner cell level while hand-designing the
outer network level.
This limited search space becomes
problematic for dense image prediction, which is sensitive
to the spatial resolution changes. Therefore in our work,
we propose a trellis-like network level search space that
augments the commonly-used cell level search space ﬁrst
proposed in to form a hierarchical architecture search
space. Our goal is to jointly learn a good combination of
repeatable cell structure and network structure speciﬁcally
for semantic image segmentation.
In terms of the architecture search method, reinforcement learning and evolutionary algorithms 
tend to be computationally intensive even on the low resolution CIFAR-10 dataset, therefore probably not suitable for
semantic image segmentation. We draw inspiration from
the differentiable formulation of NAS , and develop a continuous relaxation of the discrete architectures
that exactly matches the hierarchical architecture search
space. The hierarchical architecture search is conducted via
stochastic gradient descent. When the search terminates,
the best cell architecture is decoded greedily, and the best
network architecture is decoded efﬁciently using the Viterbi
algorithm. We directly search architecture on 321×321 image crops from Cityscapes . The search is very efﬁcient
and only takes about 3 days on one P100 GPU.
We report experimental results on multiple semantic segmentation benchmarks, including Cityscapes , PAS-
CAL VOC 2012 , and ADE20K . Without ImageNet pretraining, our best model signiﬁcantly outperforms FRRN-B by 8.6% and GridNet by
10.9% on Cityscapes test set, and performs comparably
with other ImageNet-pretrained state-of-the-art models when also exploiting the coarse annotations
on Cityscapes. Notably, our best model (without pretraining) attains the same performance as DeepLabv3+ 
(with pretraining) while being 2.23 times faster in Multi-
Adds. Additionally, our light-weight model attains the performance only 1.2% lower than DeepLabv3+ , while
requiring 76.7% fewer parameters and being 4.65 times
faster in Multi-Adds. Finally, on PASCAL VOC 2012 and
ADE20K, our best model outperforms several state-of-theart models while using strictly less data
for pretraining.
To summarize, the contribution of our paper is four-fold:
• Ours is one of the ﬁrst attempts to extend NAS beyond
image classiﬁcation to dense image prediction.
• We propose a network level architecture search space
that augments and complements the much-studied cell
level one, and consider the more challenging joint
search of network level and cell level architectures.
• We develop a differentiable, continuous formulation
that conducts the two-level hierarchical architecture
search efﬁciently in 3 GPU days.
• Without ImageNet pretraining, our model signiﬁcantly
outperforms FRRN-B and GridNet, and attains comparable performance with other ImageNet-pretrained
state-of-the-art models on Cityscapes. On PASCAL
VOC 2012 and ADE20K, our best model also outperforms several state-of-the-art models.
2. Related Work
Semantic Image Segmentation
Convolutional neural
networks deployed in a fully convolutional manner
(FCNs ) have achieved remarkable performance
on several semantic segmentation benchmarks. Within the
state-of-the-art systems, there are two essential components: multi-scale context module and neural network design. It has been known that context information is crucial for pixel labeling tasks .
Therefore, PSPNet performs spatial pyramid pooling
 at several grid scales (including image-level
pooling ), while DeepLab applies several parallel atrous convolution with different
rates. On the other hand, the improvement of neural network design has signiﬁcantly driven the performance from
AlexNet , VGG , Inception , ResNet
 to more recent architectures, such as Wide ResNet ,
ResNeXt , DenseNet and Xception . In addition to adopting those networks as backbones for semantic
segmentation, one could employ the encoder-decoder structures which ef-
ﬁciently captures the long-range context information while
keeping the detailed object boundaries. Nevertheless, most
of the models require initialization from the ImageNet 
pretrained checkpoints except FRRN and GridNet 
for the task of semantic segmentation. Speciﬁcally, FRRN
 employs a two-stream system, where full-resolution information is carried in one stream and context information
in the other pooling stream. GridNet, building on top of a
similar idea, contains multiple streams with different resolutions. In this work, we apply neural architecture search
for network backbones speciﬁc for semantic segmentation.
We further show state-of-the-art performance without ImageNet pretraining, and signiﬁcantly outperforms FRRN
 and GridNet on Cityscapes .
Neural Architecture Search Method
Neural Architecture Search aims at automatically designing neural network
architectures, hence minimizing human hours and efforts.
While some works search RNN cells for
language tasks, more works search good CNN architectures
for image classiﬁcation.
Several papers used reinforcement learning (either policy gradients or Q-learning ) to train
a recurrent neural network that represents a policy to generate a sequence of symbols specifying the CNN architecture. An alternative to RL is to use evolutionary algorithms
(EA), that “evolves” architectures by mutating the best architectures found so far . However, these
RL and EA methods tend to require massive computation
during the search, usually thousands of GPU days. PNAS
 proposed a progressive search strategy that markedly
reduced the search cost while maintaining the quality of the
searched architecture. NAO embedded architectures
into a latent space and performed optimization before decoding. Additionally, several works utilized architectural sharing among sampled models instead of training each of them individually, thereby further reduced the
search cost. Our work follows the differentiable NAS formulation and extends it into the more general hierarchical setting.
Neural Architecture Search Space
Earlier papers, e.g.,
 , tried to directly construct the entire network. However, more recent papers have shifted to
searching the repeatable cell structure, while keeping the
outer network level structure ﬁxed by hand. First proposed
in , this strategy is likely inspired by the two-level hierarchy commonly used in modern CNNs.
Our work still uses this cell level search space to keep
consistent with previous works. Yet one of our contributions
is to propose a new, general-purpose network level search
space, since we wish to jointly search across this two-level
hierarchy. Our network level search space shares a similar
outlook as , but the important difference is that kept
the entire “fabrics” with no intention to alter the architecture, whereas we associate an explicit weight for each connection and focus on decoding a single discrete structure.
In addition, was evaluated on segmenting face images
into 3 classes , whereas our models are evaluated on
large-scale segmentation datasets such as Cityscapes ,
PASCAL VOC 2012 , and ADE20K .
The most similar work to ours is , which also studied
NAS for semantic image segmentation. However, focused on searching the much smaller Atrous Spatial Pyramid Pooling (ASPP) module using random search, whereas
we focus on searching the much more fundamental network
backbone architecture using more advanced and more efﬁcient search methods.
3. Architecture Search Space
This section describes our two-level hierarchical architecture search space. For the inner cell level (Sec. 3.1), we
reuse the one adopted in to keep consistent
with previous works. For the outer network level (Sec. 3.2),
we propose a novel search space based on observation and
summarization of many popular designs.
3.1. Cell Level Search Space
We deﬁne a cell to be a small fully convolutional module,
typically repeated multiple times to form the entire neural
network. More speciﬁcally, a cell is a directed acyclic graph
consisting of B blocks.
Each block is a two-branch structure, mapping from 2
input tensors to 1 output tensor. Block i in cell l may be
speciﬁed using a 5-tuple (I1, I2, O1, O2, C), where I1, I2 ∈
i are selections of input tensors, O1, O2 ∈O are selections
of layer types applied to the corresponding input tensor, and
C ∈C is the method used to combine the individual outputs
of the two branches to form this block’s output tensor, Hl
The cell’s output tensor Hl is simply the concatenation of
the blocks’ output tensors Hl
1, . . . , Hl
B in this order.
The set of possible input tensors, Il
i, consists of the output of the previous cell Hl−1, the output of the previousprevious cell Hl−2, and previous blocks’ output in the current cell {Hl
1, . . . , Hl
i}. Therefore, as we add more blocks
in the cell, the next block has more choices as potential
source of input.
The set of possible layer types, O, consists of the following 8 operators, all prevalent in modern CNNs:
• 3 × 3 depthwise-separable conv
• 5 × 5 depthwise-separable conv
• 3 × 3 atrous conv with rate 2
• 5 × 5 atrous conv with rate 2
• 3 × 3 average pooling
• 3 × 3 max pooling
• skip connection
• no connection (zero)
For the set of possible combination operators C, we simply let element-wise addition to be the only choice.
3.2. Network Level Search Space
In the image classiﬁcation NAS framework pioneered by
 , once a cell structure is found, the entire network is
constructed using a pre-deﬁned pattern. Therefore the network level was not part of the architecture search, hence its
search space has never been proposed nor designed.
This pre-deﬁned pattern is simple and straightforward: a
number of “normal cells” (cells that keep the spatial resolution of the feature tensor) are separated equally by inserting “reduction cells” (cells that divide the spatial resolution
Downsample\Layer
Figure 1: Left: Our network level search space with L = 12. Gray nodes represent the ﬁxed “stem” layers, and a path along
the blue nodes represents a candidate network level architecture. Right: During the search, each cell is a densely connected
structure as described in Sec. 4.1.1. Every yellow arrow is associated with the set of values αj→i. The three arrows after
concat are associated with βls
2s→s respectively, as described in Sec. 4.1.2. Best viewed in color.
Downsample\Layer
(a) Network level architecture used in DeepLabv3 .
Downsample\Layer
(b) Network level architecture used in Conv-Deconv .
Downsample\Layer
(c) Network level architecture used in Stacked Hourglass .
Figure 2: Our network level search space is general and
includes various existing designs.
by 2 and multiply the number of ﬁlters by 2). This keepdownsampling strategy is reasonable in the image classiﬁcation case, but in dense image prediction it is also important to keep high spatial resolution, and as a result there are
more network level variations .
Among the various network architectures for dense image prediction, we notice two principles that are consistent:
• The spatial resolution of the next layer is either twice
as large, or twice as small, or remains the same.
• The smallest spatial resolution is downsampled by 32.
Following these common practices, we propose the following network level search space. The beginning of the network is a two-layer “stem” structure that each reduces the
spatial resolution by a factor of 2. After that, there are a
total of L layers with unknown spatial resolutions, with the
maximum being downsampled by 4 and the minimum being
downsampled by 32. Since each layer may differ in spatial
resolution by at most 2, the ﬁrst layer after the stem could
only be either downsampled by 4 or 8. We illustrate our network level search space in Fig. 1. Our goal is then to ﬁnd a
good path in this L-layer trellis.
In Fig. 2 we show that our search space is general enough
to cover many popular designs. In the future, we have plans
to relax this search space even further to include U-net architectures , where layer l may receive input
from one more layer preceding l in addition to l −1.
We reiterate that our work searches the network level architecture in addition to the cell level architecture. Therefore our search space is strictly more challenging and
general-purpose than previous works.
4. Methods
We begin by introducing a continuous relaxation of
the (exponentially many) discrete architectures that exactly matches the hierarchical architecture search described
above. We then discuss how to perform architecture search
via optimization, and how to decode back a discrete architecture after the search terminates.
4.1. Continuous Relaxation of Architectures
Cell Architecture
We reuse the continuous relaxation described in . Every
block’s output tensor Hl
i is connected to all hidden states in
In addition, we approximate each Oj→i with its continuous
relaxation ¯Oj→i, deﬁned as:
In other words, αk
j→i are normalized scalars associated with
each operator Ok ∈O, easily implemented as softmax.
Recall from Sec. 3.1 that Hl−1 and Hl−2 are always included in Il
i, and that Hl is the concatenation of
1, . . . , Hl
B. Together with Eq. (1) and Eq. (2), the cell
level update may be summarized as:
Hl = Cell(Hl−1, Hl−2; α)
Network Architecture
Within a cell, all tensors are of the same spatial size, which
enables the (weighted) sum in Eq. (1) and Eq. (2). However, as clearly illustrated in Fig. 1, tensors may take different sizes in the network level. Therefore in order to set
up the continuous relaxation, each layer l will have at most
4 hidden states {4Hl, 8Hl, 16Hl, 32Hl}, with the upper left
superscript indicating the spatial resolution.
We design the network level continuous relaxation to exactly match the search space described in Sec. 3.2. We associated a scalar with each gray arrow in Fig. 1, and the
network level update is:
2 Hl−1, sHl−2; α)
s→sCell(sHl−1, sHl−2; α)
2s→sCell(2sHl−1, sHl−2; α)
where s = 4, 8, 16, 32 and l = 1, 2, . . . , L. The scalars β
are normalized such that
also implemented as softmax.
Eq. (6) shows how the continuous relaxations of the twolevel hierarchy are weaved together. In particular, β controls the outer network level, hence depends on the spatial
size and layer index. Each scalar in β governs an entire set
of α, yet α speciﬁes the same architecture that depends on
neither spatial size nor layer index.
As illustrated in Fig. 1, Atrous Spatial Pyramid Pooling
(ASPP) modules are attached to each spatial resolution at
the L-th layer (atrous rates are adjusted accordingly). Their
outputs are bilinear upsampled to the original resolution before summed to produce the prediction.
4.2. Optimization
The advantage of introducing this continuous relaxation
is that the scalars controlling the connection strength between different hidden states are now part of the differentiable computation graph. Therefore they can be optimized
efﬁciently using gradient descent. We adopt the ﬁrst-order
approximation in , and partition the training data into
two disjoint sets trainA and trainB. The optimization alternates between:
1. Update network weights w by ∇wLtrainA(w, α, β)
2. Update architecture α, β by ∇α,βLtrainB(w, α, β)
where the loss function L is the cross entropy calculated
on the semantic segmentation mini-batch. The disjoint set
partition is to prevent the architecture from overﬁtting the
training data.
4.3. Decoding Discrete Architectures
Cell Architecture
Following , we decode the discrete cell architecture by ﬁrst retaining the 2 strongest predecessors for each block (with the strength from hidden
state j to hidden state i being maxk,Ok̸=zero αk
j→i; recall
from Sec. 3.1 that “zero” means “no connection”), and then
choose the most likely operator by taking the argmax.
Network Architecture
Eq. (7) essentially states that the
“outgoing probability” at each of the blue nodes in Fig. 1
sums to 1.
In fact, the β values can be interpreted as
the “transition probability” between different “states” (spatial resolution) across different “time steps” (layer number).
Quite intuitively, our goal is to ﬁnd the path with the “maximum probability” from start to end. This path can be decoded efﬁciently using the classic Viterbi algorithm, as in
our implementation.
5. Experimental Results
Herein, we report our architecture search implementation details as well as the search results. We then report
semantic segmentation results on benchmark datasets with
our best found architecture.
Downsample\Layer
Figure 3: The Auto-DeepLab architecture found by our Hierarchical Neural Architecture Search on Cityscapes. Gray dashed
arrows show the connection with maximum β at each node. atr: atrous convolution. sep: depthwise-separable convolution.
5.1. Architecture Search Implementation Details
We consider a total of L = 12 layers in the network, and
B = 5 blocks in a cell. The network level search space has
2.9 × 104 unique paths, and the number of cell structures
is 5.6 × 1014. So the size of the joint, hierarchical search
space is in the order of 1019.
We follow the common practice of doubling the number
of ﬁlters when halving the height and width of feature tensor. Every blue node in Fig. 1 with downsample rate s has
4 output ﬁlters, where F is the ﬁlter multiplier
controlling the model capacity. We set F = 8 during the
architecture search. A stride 2 convolution is used for all
2 →s connections, both to reduce spatial size and double the number of ﬁlters. Bilinear upsampling followed by
1 × 1 convolution is used for all 2s →s connections, both
to increase spatial size and halve the number of ﬁlters.
The Atrous Spatial Pyramid Pooling module used in 
has 5 branches: one 1 × 1 convolution, three 3 × 3 convolution with various atrous rates, and pooled image feature.
During the search, we simplify ASPP to have 3 branches
instead of 5 by only using one 3×3 convolution with atrous
The number of ﬁlters produced by each ASPP
branch is still B × F × s
We conduct architecture search on the Cityscapes dataset
 for semantic image segmentation. More speciﬁcally,
we use 321 × 321 random image crops from half-resolution
(512 × 1024) images in the train ﬁne set. We randomly
select half of the images in train ﬁne as trainA, and the other
half as trainB (see Sec. 4.2).
The architecture search optimization is conducted for a
total of 40 epochs. The batch size is 2 due to GPU memory constraint. When learning network weights w, we use
SGD optimizer with momentum 0.9, cosine learning rate
that decays from 0.025 to 0.001, and weight decay 0.0003.
The initial values of α, β before softmax are sampled from
a standard Gaussian times 0.001. They are optimized using
Adam optimizer with learning rate 0.003 and weight
decay 0.001. We empirically found that if α, β are optimized from the beginning when w are not well trained, the
Figure 4: Validation accuracy during 40 epochs of architecture search optimization across 10 random trials.
architecture tends to fall into bad local optima. Therefore
we start optimizing α, β after 20 epochs. The entire architecture search optimization takes about 3 days on one P100
GPU. Fig. 4 shows that the validation accuracy steadily improves throughout this process. We also tried searching for
longer epochs (60, 80, 100), but did not observe beneﬁt.
Fig. 3 visualizes the best architecture found. In terms of
network level architecture, higher resolution is preferred at
both beginning (stays at downsample by 4 for longer) and
end (ends at downsample by 8). We also show the strongest
outgoing connection at each node using gray dashed arrows.
We observe a general tendency to downsample in the ﬁrst
3/4 layers and upsample in the last 1/4 layers. In terms of
cell level architecture, the conjunction of atrous convolution
and depthwise-separable convolution is often used, suggesting that the importance of context has been learned. Note
that atrous convolution is rarely found to be useful in cells
for image classiﬁcation2.
5.2. Semantic Segmentation Results
We evaluate the performance of our found best architecture (Fig. 3) on Cityscapes , PASCAL VOC 2012 ,
and ADE20K datasets.
2Among NASNet-{A, B, C}, PNASNet-{1, 2, 3, 4, 5}, AmoebaNet-
{A, B, C}, ENAS, DARTS, atrous convolution was used only once in
AmoebaNet-B reduction cell.
Multi-Adds
Auto-DeepLab-S
Auto-DeepLab-M
Auto-DeepLab-L
FRRN-A 
FRRN-B 
DeepLabv3+ 
Table 2: Cityscapes validation set results with different
Auto-DeepLab model variants. F: the ﬁlter multiplier controlling the model capacity. All our models are trained from
scratch and with single-scale input during inference.
Auto-DeepLab-S
Auto-DeepLab-S
Auto-DeepLab-S
Auto-DeepLab-S
Cityscapes validation set results.
We experiment with the effect of adopting different training iterations
(500K, 1M, and 1.5M iterations) and the Scheduled Drop
Path method (SDP). All models are trained from scratch.
We follow the same training protocol in . In brief,
during training we adopt a polynomial learning rate schedule with initial learning rate 0.05, and large crop size
 . Batch normalization parameters are ﬁne-tuned during training.
The models are trained from scratch with 1.5M iterations
on Cityscapes, 1.5M iterations on PASCAL VOC 2012, and
4M iterations on ADE20K, respectively.
We adopt the simple encoder-decoder structure similar to
DeepLabv3+ . Speciﬁcally, our encoder consists of our
found best network architecture augmented with the ASPP
module , and our decoder is the same as the one in
DeepLabv3+ which recovers the boundary information by
exploiting the low-level features that have downsample rate
4. Additionally, we redesign the “stem” structure with three
3 × 3 convolutions (with stride 2 in the ﬁrst and third convolutions). The ﬁrst two convolutions have 64 ﬁlters while
the third convolution has 128 ﬁlters. This “stem” has been
shown to be effective for segmentation in .
Cityscapes
Cityscapes contains high quality pixel-level annotations of 5000 images with size 1024 × 2048 (2975, 500,
and 1525 for the training, validation, and test sets respectively) and about 20000 coarsely annotated training images.
Following the evaluation protocol , 19 semantic labels
are used for evaluation without considering the void label.
In Tab. 2, we report the Cityscapes validation set results.
Similar to MobileNets , we adjust the model capac-
FRRN-A 
GridNet 
FRRN-B 
Auto-DeepLab-S
Auto-DeepLab-L
Auto-DeepLab-S
Auto-DeepLab-L
ResNet-38 
PSPNet 
Mapillary 
DeepLabv3+ 
DRN CRL Coarse 
Table 4: Cityscapes test set results with multi-scale inputs
during inference. ImageNet: Models pretrained on ImageNet. Coarse: Models exploit coarse annotations.
ity by changing the ﬁlter multiplier F. As shown in the
table, higher model capacity leads to better performance at
the cost of slower speed (indicated by larger Multi-Adds).
In Tab. 3, we show that increasing the training iterations
from 500K to 1.5M iterations improves the performance
by 2.8%, when employing our light-weight model variant, Auto-DeepLab-S. Additionally, adopting the Scheduled
Drop Path further improves the performance by
1.74%, reaching 79.74% on Cityscapes validation set.
We then report the test set results in Tab. 4. Without
any pretraining, our best model (Auto-DeepLab-L) significantly outperforms FRNN-B by 8.6% and GridNet
 by 10.9%. With extra coarse annotations, our model
Auto-DeepLab-L, without pretraining on ImageNet ,
achieves the test set performance of 82.1%, outperforming PSPNet and Mapillary , and attains the same
performance as DeepLabv3+ while requiring 55.2%
fewer Mutli-Adds computations. Notably, our light-weight
model variant, Auto-DeepLab-S, attains 80.9% on the test
set, comparable to PSPNet, while using merely 10.15M parameters and 333.25B Multi-Adds.
PASCAL VOC 2012
PASCAL VOC 2012 contains 20 foreground object
classes and one background class. We augment the original
dataset with the extra annotations provided by , resulting in 10582 (train aug) training images.
In Tab. 5, we report our validation set results. Our best
model, Auto-DeepLab-L, with single scale inference signiﬁcantly outperforms by 20.36%. Additionally, for
all our model variants, adopting multi-scale inference improves the performance by about 1%. Further pretraining
our models on COCO for 4M iterations improves the
DropBlock 
Auto-DeepLab-S
Auto-DeepLab-S
Auto-DeepLab-M
Auto-DeepLab-M
Auto-DeepLab-L
Auto-DeepLab-L
Auto-DeepLab-S
Auto-DeepLab-S
Auto-DeepLab-M
Auto-DeepLab-M
Auto-DeepLab-L
Auto-DeepLab-L
Table 5: PASCAL VOC 2012 validation set results. We experiment with the effect of adopting multi-scale inference
(MS) and COCO-pretrained checkpoints (COCO). Without any pretraining, our best model (Auto-DeepLab-L) outperforms DropBlock by 20.36%. All our models are not
pretrained with ImageNet images.
Auto-DeepLab-S
Auto-DeepLab-M
Auto-DeepLab-L
ReﬁneNet 
ResNet-38 
PSPNet 
DeepLabv3+ 
Table 6: PASCAL VOC 2012 test set results. Our Auto-
DeepLab-L attains comparable performance with many
state-of-the-art models which are pretrained on both ImageNet and COCO datasets. We refer readers to the ofﬁcial
leader-board for other state-of-the-art models.
performance signiﬁcantly.
Finally, we report the PASCAL VOC 2012 test set result with our COCO-pretrained model variants in Tab. 6.
As shown in the table, our best model attains the performance of 85.6% on the test set, outperforming ReﬁneNet
 and PSPNet . Our model is lagged behind the topperforming DeepLabv3+ with Xception-65 as network
backbone by 2.2%.
We think that PASCAL VOC 2012
dataset is too small to train models from scratch and pretraining on ImageNet is still beneﬁcial in this case.
Pixel-Acc (%)
Auto-DeepLab-S
Auto-DeepLab-M
Auto-DeepLab-L
CascadeNet (VGG-16) 
ReﬁneNet (ResNet-152) 
UPerNet (ResNet-101) †
PSPNet (ResNet-152) 
PSPNet (ResNet-269) 
DeepLabv3+ (Xception-65) †
Table 7: ADE20K validation set results. We employ multiscale inputs during inference. †: Results are obtained from
their up-to-date model zoo websites respectively.
ImageNet: Models pretrained on ImageNet. Avg: Average of
mIOU and Pixel-Accuracy.
ADE20K has 150 semantic classes and high quality
annotations of 20000 training images and 2000 validation
images. In our experiments, the images are all resized so
that the longer side is 513 during training.
In Tab. 7, we report our validation set results. Our models outperform some state-of-the-art models, including Re-
ﬁneNet , UPerNet , and PSPNet (ResNet-152) ;
however, without any ImageNet pretraining, our performance is lagged behind the latest work of .
6. Conclusion
In this paper, we present one of the ﬁrst attempts to extend Neural Architecture Search beyond image classiﬁcation to dense image prediction problems. Instead of ﬁxating
on the cell level, we acknowledge the importance of spatial resolution changes, and embrace the architectural variations by incorporating the network level into the search
space. We also develop a differentiable formulation that
allows efﬁcient (about 1000× faster than DPC ) architecture search over our two-level hierarchical search space.
The result of the search, Auto-DeepLab, is evaluated by
training on benchmark semantic segmentation datasets from
scratch. On Cityscapes, Auto-DeepLab signiﬁcantly outperforms the previous state-of-the-art by 8.6%, and performs comparably with ImageNet-pretrained top models
when exploiting the coarse annotations. On PASCAL VOC
2012 and ADE20K, Auto-DeepLab also outperforms several ImageNet-pretrained state-of-the-art models.
For future work, within the current framework, related
applications such as object detection should be plausible;
we could also try untying the cell architecture α across different layers (cf. ) with little computation overhead.
Beyond the current framework, a more general network
level search space should be beneﬁcial (cf. Sec. 3.2).
Acknowledgments
We thank Sergey Ioffe for valuable
feedback; Cloud AI and Mobile Vision team for support.
CL and AY acknowledge a gift from YiTu.