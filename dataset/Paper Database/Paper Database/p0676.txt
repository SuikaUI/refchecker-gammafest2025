Self-supervised GAN: Analysis and Improvement
with Multi-class Minimax Game
Ngoc-Trung Tran, Viet-Hung Tran, Ngoc-Bao Nguyen, Linxiao Yang, Ngai-Man Cheung
Singapore University of Technology and Design (SUTD)
Corresponding author: Ngai-Man Cheung < >
Self-supervised (SS) learning is a powerful approach for representation learning
using unlabeled data. Recently, it has been applied to Generative Adversarial
Networks (GAN) training. Speciﬁcally, SS tasks were proposed to address the
catastrophic forgetting issue in the GAN discriminator. In this work, we perform
an in-depth analysis to understand how SS tasks interact with learning of generator. From the analysis, we identify issues of SS tasks which allow a severely
mode-collapsed generator to excel the SS tasks. To address the issues, we propose
new SS tasks based on a multi-class minimax game. The competition between our
proposed SS tasks in the game encourages the generator to learn the data distribution and generate diverse samples. We provide both theoretical and empirical
analysis to support that our proposed SS tasks have better convergence property.
We conduct experiments to incorporate our proposed SS tasks into two different
GAN baseline models. Our approach establishes state-of-the-art FID scores on
CIFAR-10, CIFAR-100, STL-10, CelebA, Imagenet 32 × 32 and Stacked-MNIST
datasets, outperforming existing works by considerable margins in some cases. Our
unconditional GAN model approaches performance of conditional GAN without
using labeled data. Our code: 
Introduction
Generative Adversarial Networks (GAN). GAN have become one of the most important
methods to learn generative models. GAN has shown remarkable results in various tasks, such as:
image generation , image transformation , super-resolution , text to image
 , anomaly detection . The idea behind GAN is the mini-max game. It uses a binary
classiﬁer, so-called the discriminator, to distinguish the data (real) versus generated (fake) samples.
The generator of GAN is trained to confuse the discriminator to classify the generated samples as the
real ones. By having the generator and discriminator competing with each other in this adversarial
process, they are able to improve themselves. The end goal is to have the generator capturing the
data distribution. Although considerable improvement has been made for GAN under the conditional
settings , i.e., using ground-truth labels to support the learning, it is still very challenging
with unconditional setup. Fundamentally, using only a single signal (real/fake) to guide the generator
to learn the high-dimensional, complex data distribution is very challenging .
Self-supervised Learning. Self-supervised learning is an active research area .
Self-supervised learning is a paradigm of unsupervised learning. Self-supervised methods encourage
the classiﬁer to learn better feature representation with pseudo-labels. In particular, these methods
propose to learn image feature by training the model to recognize some geometric transformation
that is applied to the image which the model receives as the input. A simple-yet-powerful method
proposed in is to use image rotations by 0, 90, 180, 270 degrees as the geometric transformation.
The model is trained with the 4-way classiﬁcation task of recognizing one of the four rotations. This
33rd Conference on Neural Information Processing Systems , Vancouver, Canada.
 
task is referred as the self-supervised task. This simple method is able to close the gap between
supervised and unsupervised image classiﬁcation .
Self-supervised Learning for GAN. Recently, self-supervised learning has been applied to GAN
training . These works propose auxiliary self-supervised classiﬁcation tasks to assist the
main GAN task (Figure 1). In particular, their objective functions for learning discriminator D and
generator G are multi-task loss as shown in (1) and (2) respectively:
D,C VD(D, C, G) = V(D, G) + λdΨ(G, C)
G VG(D, C, G) = V(D, G) −λgΦ(G, C)
V(D, G) = Ex∼Pd log
+ Ex∼Pg log
Here, V(D, G) in (3) is the GAN task, which is the original value function proposed in Goodfellow
et al. . Pd is true data distribution, Pg is the distribution induced by the generator mapping.
Ψ(G, C) and Φ(G, C) are the self-supervised (SS) tasks for discriminator and generator learning,
respectively (details to be discussed). C is the classiﬁer for the self-supervised task, e.g. rotation
classiﬁer as discussed . Based on this framework, Chen et al. apply self-supervised task to
help discriminator counter catastrophic forgetting. Empirically, they have shown that self-supervised
task enables discriminator to learn more stable and improved representation. Tran et al. propose
to improve self-supervised learning with adversarial training.
Despite the encouraging empirical results, in-depth analysis of the interaction between SS tasks (Ψ(.)
and Φ(.)) and GAN task (V(D, G)) has not been done before. On one hand, the application of SS
task for discriminator learning is reasonable: the goal of discriminator is to classify real/fake image;
an additional SS classiﬁcation task Ψ(G, C) could assist feature learning and enhance the GAN task.
On the other hand, the motivation and design of SS task for generator learning is rather subtle: the
goal of generator learning is to capture the data distribution in G, and it is unclear exactly how an
additional SS classiﬁcation task Φ(G, C) could help.
In this work, we conduct in-depth empirical and theoretical analysis to understand the interaction
between self-supervised tasks (Ψ(.) and Φ(.)) and learning of generator G. Interestingly, from
our analysis, we reveal issues of existing works. Speciﬁcally, the SS tasks of existing works have
“loophole” that, during generator learning, G could exploit to maximize Φ(G, C) without truly
learning the data distribution. We show that analytically and empirically that a severely modecollapsed generator can excel Φ(G, C). To address this issue, we propose new SS tasks based on a
multi-class minimax game. Our proposed new SS tasks of discriminator and generator compete with
each other to reach the equilibrium point. Through this competition, our proposed SS tasks are able
to support the GAN task better. Speciﬁcally, our analysis shows that our proposed SS tasks enhance
matching between Pd and Pg by leveraging the transformed samples used in the SS classiﬁcation
(rotated images when is applied). In addition, our design couples GAN task and SS task. To
validate our design, we provide theoretical analysis on the convergence property of our proposed
SS tasks. Training a GAN with our proposed self-supervised tasks based on multi-class minimax
game signiﬁcantly improves baseline models. Overall, our system establishes state-of-the-art Fréchet
Inception Distance (FID) scores. In summary, our contributions are:
• We conduct in-depth empirical and theoretical analysis to understand the issues of selfsupervised tasks in existing works.
• Based on the analysis, we propose new self-supervised tasks based on a multi-class minimax
• We conduct extensive experiments to validate our proposed self-supervised tasks.
Related works
While training GAN with conditional signals (e.g., ground-truth labels of classes) has made good
progress , training GAN in the unconditional setting is still very challenging. In the original
GAN , the single signal (real or fake) of samples is provided to train discriminator and the
generator. With these signals, the generator or discriminator may fall into ill-pose settings, and they
SS task in discriminator learning
SS task in generator learning
SS task in generator learning
(a) Original SSGAN
(b) Our proposal
SS task in discriminator learning
Figure 1: The model of (a) SSGAN and (b) our approach. Here, Ψ(C) and Φ(G, C) are the
self-supervised value functions in training discriminator and generator, respectively, as proposed in
 . Ψ+(G, C) and Φ+(G, C) are the self-supervised value functions proposed in this work.
may get stuck at bad local minimums though still satisfying the signal constraints. To overcome
the problems, many regularizations have been proposed. One of the most popular approaches is to
enforce (towards) Lipschitz condition of the discriminator. These methods include weight-clipping
 , gradient penalty constraints and spectral norm . Constraining the
discriminator mitigates gradients vanishing and avoids sharp decision boundary between the real and
fake classes.
Using Lipschitz constraints improve the stability of GAN. However, the challenging optimization
problem still remains when using a single supervisory signal, similar to the original GAN . In
particular, the learning of discriminator is highly dependent on generated samples. If the generator
collapses to some particular modes of data distribution, it is only able to create samples around
these modes. There is no competition to train the discriminator around other modes. As a result, the
gradients of these modes may vanish, and it is impossible for the generator to model well the entire
data distribution. Using additional supervisory signals helps the optimization process. For example,
using self-supervised learning in the form of auto-encoder has been proposed. AAE guides the
generator towards resembling realistic samples. However, an issue with using auto-encoder is that
pixel-wise reconstruction with ℓ2-norm causes blurry artifacts. VAE/GAN , which combining
VAE and GAN, is an improved solution: while the discriminator of GAN enables the usage
of feature-wise reconstruction to overcome the blur, the VAE constrains the generator to mitigate
mode collapse. In ALI and BiGAN , they jointly train the data/latent samples in the GAN
framework. InfoGAN infers the disentangled latent representation by maximizing the mutual
information. In , they combine two different types of supervisory signals: real/fake signals
and self-supervised signal in the form of auto-encoder. In addition, Auto-encoder based methods,
including , can be considered as an approach to mitigate catastrophic forgetting because
they regularize the generator to resemble the real ones. It is similar to EWC or IS but
the regularization is achieved via the output, not the parameter itself. Although using feature-wise
distance in auto-encoder could reconstruct sharper images, it is still challenging to produce very
realistic detail of textures or shapes.
Several different types of supervisory signal have been proposed. Instead of using only one discriminator or generator, they propose ensemble models, such as multiple discriminators , mixture of
generators or applying an attacker as a new player for GAN training . Recently, training
model with auxiliary self-supervised constraints via multi pseudo-classes helps improve
stability of the optimization process. This approach is appealing: it is simple to implement and
does not require more parameters in the networks (except a small head for the classiﬁer). Recent
work applies InfoMax principle to improve GAN . Variational Autoencoder is another important
approach to learn generative models .
GAN with Auxiliary Self-Supervised tasks
In , self-supervised (SS) value function (also referred as “self-supervised task”) was proposed for
GAN via image rotation prediction . In their work, they showed that the SS task was useful
to mitigate catastrophic forgetting problem of GAN discriminator. The objectives of the discriminator
and generator in are shown in Eq. 4 and 5. Essentially, the SS task of the discriminator (denoted
by Ψ(C)) is to train the classiﬁer C that maximizes the performance of predicting the rotation applied
to the real samples. Given this classiﬁer C, the SS task of the generator (denoted by Φ(G, C))
is to train the generator G to produce fake samples for maximizing classiﬁcation performance.
The discriminator and classiﬁer are the same (shared parameters), except the last layer in order
to implement two different heads: the last fully-connected layer which returns a one-dimensional
output (real or fake) for the discriminator, and the other which returns a K-dimensional softmax of
pseudo-classes for the classiﬁer. λd and λg are constants.
D,C V(D, C, G) = V(D, G) + λd
d ETk∼T log
G V(D, C, G) = V(D, G) −λg
g ETk∼T log
Here, the GAN value function V(D, G) (also referred as “GAN task”) can be the original minimax
GAN objective or other improved versions. T is the set of transformation, Tk ∈T is the k-th
transformation. The rotation SS task proposed in is applied, and T1, T2, T3, T4 are the 0, 90, 180,
270 degree image rotation, respectively. Pd, Pg are the distributions of real and fake data samples,
respectively. P T
g are the mixture distribution of rotated real and fake data samples (by Tk ∈T ),
respectively. Let Ck(x) be the k-th softmax output of classiﬁer C, and we have PK
k=1 Ck(x) = 1, ∀x.
The models are shown in Fig. 1a. In , empirical evidence of improvements has been provided.
Note that, the goal of Φ(G, C) is to encourage the generator to produce realistic images. It is because
classiﬁer C is trained with real images and captures features that allow detection of rotation. However,
the interaction of Φ(G, C) with the GAN task V(D, G) has not been adequately analyzed.
Analysis on Auxiliary Self-supervised Tasks
We analyze the SS tasks in (Figure 1a). We assume that all networks D, G, C have enough capacity
 . Refer to the Appendix A for full derivation. Let D∗and C∗be the optimal discriminator and
optimal classiﬁer respectively at an equilibrium point. We assume that we have an optimal D∗
of the GAN task. We focus on C∗of SS task. Let pTk(x) be the probability of sample x under
transformation by Tk (Figure 2). pTk
d (x), pTk
g (x) denotes the probability pTk(x) of data sample
d ) or generated sample (x ∼P T
g ) respectively.
Proposition 1 The optimal classiﬁer C∗of Eq. 4 is:
Proof. Refer to our proof in Appendix A for optimal C∗.
Theorem 1 Given optimal classiﬁer C∗for SS task Ψ(C), at the equilibrium point, maximizing SS
task Φ(G, C∗) of Eq. 5 is equal to maximizing:
Φ(G, C∗) = 1
Figure 2: The probability distribution pTk
d (x). Here, samples from Pd are rotated by Tk. The
distribution of rotated sample is pTk(x). Some rotated samples resemble the original samples, e.g.
those on the right of x2. On the other hand, for some image, there is no rotated image resembling it,
e.g. x1 (pTj
d (x1) = 0, j ̸= 1). The generator can learn to generate these images e.g. x1 to achieve
maximum of Φ(G, C∗), without actually learning the entire Pd.
Proof. Refer to our proof in Appendix A.
Theorem 1 depicts learning of generator G given the optimal C∗: selecting G (hence Pg) to maximize
Φ(G, C∗). As C∗is trained on real data, Φ(G, C∗) encourages G to learn to generate realistic samples.
However, we argue that G can maximize Φ(G, C∗) without actually learning data distribution Pd.
In particular, it is sufﬁcient for G to maximize Φ(G, C∗) by simply learning to produce images
which rotated version is rare (near zero probability). Some example images are shown in Figure 3a.
Intuitively, for these images, rotation can be easily recognized.
The argument can be developed from Theorem 1. From (7), it can be shown that VTk
g (x) >= 0 and
d (x) ≤1). One way for G to achieve the maximum is to generate x such
d (x) ̸= 0 and pTj
d (x) = 0, j ̸= 1. For these x, the maximum VTk
Φ (x) = 0 is attained. Note that
T1 corresponds to 0 degree rotation, i.e., no rotation. Recall that pTk
d (x) is the probability distribution
of transformed data by Tk. Therefore the condition pT1
d (x) ̸= 0 and pTj
d (x) = 0, j ̸= 1 means
that there is no other rotated image resembling x, or equivalently, rotated x does not resemble any
other images (Figure 2). Therefore, the generator can exploit this “loophole” to maximize Φ(G, C∗)
without actually learning the data distribution. In particular, even a mode-collapsed generator can
achieve the maximum of Φ(G, C∗) by generating such images.
Empirical evidence. Empirically, our experiments (in Appendix B.2.1) show that the FID of the
models when using Φ(G, C) is poor except for very small λg. We further illustrate this issue by a toy
empirical example using CIFAR-10. We augment the training images x with transformation data
Tk(x) to train the classiﬁer C to predict the rotation applied to x. This is the SS task of discriminator
in Figure 1a. Given this classiﬁer C, we simulate the SS task of generator learning as follows. To
simulate the output of a good generator Ggood which generates diverse realistic samples, we choose
the full test set of CIFAR-10 (10 classes) images and compute the cross-entropy loss, i.e. −Φ(G, C),
when they are fed into C. To simulate the output of a mode-collapsed generator Gcollapsed, we select
samples from one class, e.g. “horse”, and compute the cross-entropy loss when they are fed into
C. Fig. 3b show that some Gcollapsed can outperform Ggood and achieve a smaller −Φ(G, C). E.g.
a Gcollapsed that produces only “horse” samples outperform Ggood under Φ(G, C). This example
illustrates that, while Φ(G, C) may help the generator to create more realistic samples, it does not
help the generator to prevent mode collapse. In fact, as part of the multi-task loss (see (5)), Φ(G, C)
would undermine the learning of synthesizing diverse samples in the GAN task V(D, G).
Proposed method
Auxiliary Self-Supervised Tasks with Multi-class Minimax Game
In this section, we propose improved SS tasks to address the issue (Fig. 1b). Based on a multi-class
minimax game, our classiﬁer learns to distinguish the rotated samples from real data versus those
from generated data. Our proposed SS tasks are Ψ+(G, C) and Φ+(G, C) in (8) and (9) respectively.
Gairplane Gautomobile
Gairplane Gautomobile
Figure 3: (a) Left: Example images that achieve minimal loss (or maximal Φ(G, C)). For these
images, rotation can be easily recognized: an image with a 90 degree rotated horse is likely due to
applying T2 rather than an original one. (b) Right (Top): the loss of original SS task, i.e. −Φ(G, C)
computed over a good generator (red) and collapsed generators (green, yellow). Some collapsed
generators (e.g. one that generates only “horse”) have smaller loss than the good generator under
−Φ(G, C). (c) Right (Bottom): the loss of proposed MS task, −Φ+(G, C), of a good generator (red)
and collapsed generators (green). The good generator has the smallest loss under −Φ+(G, C).
Our discriminator objective is:
D,C V(D, C, G) = V(D, G)+λd
d ETk∼T log
g ETk∼T log
Eq. 8 means that we simultaneously distinguish generated samples, as the (K + 1)-th class, from the
rotated real sample classes. Here, CK+1(x) is the (K + 1)-th output for the fake class of classiﬁer C.
While rotated real samples are ﬁxed samples that help prevent the classiﬁer (discriminator) from
forgetting, the class K + 1 serves as the connecting point between generator and classiﬁer, and
the generator can directly challenge the classiﬁer. Our technique resembles the original GAN by
Goodfellow et al. , but we generalize it for multi-class minimax game. Our generator objective
G V(D, C, G) = V(D, G)−λg
g ETk∼T log
g ETk∼T log
Ψ+(G, C) and Φ+(G, C) form a multi-class minimax game. Note that, when we mention multi-class
minimax game (or multi-class adversarial training), we refer to the SS tasks. The game for GAN task
is the original by Goodfellow et al. .
Theoretical Analysis
Proposition 2 For ﬁxed generator G, the optimal solution C∗under Eq. 8 is:
d (x) and pT
g (x) are probability of sample x in the mixture distributions P T
g respectively.
Proof. Refer to our proof in Appendix A for optimal C∗.
Theorem 2 Given optimal classiﬁer C∗obtained from multi-class minimax training Ψ+(G, C), at
the equilibrium point, maximizing Φ+(G, C∗) is equal to maximizing Eq. 11:
Φ+(G, C∗) = −1
Proof. Refer to our proof in Appendix A.
Note that proposed SS task objective (11) is different from the original SS task objective (7) with
the KL divergence term. Furthermore, note that KL(P Tk
d ) = KL(Pg||Pd), as rotation Tk is an
afﬁne transform and KL divergence is invariant under afﬁne transform (our proof in Appendix A).
Therefore, the improvement is clear: Proposed SS tasks
Ψ+(.), Φ+(.)
work together to improve the
matching of Pg and Pd by leveraging the rotated samples. For a given Pg, feedbacks are computed
from not only KL(Pg||Pd) but also KL(P Tk
d ) via the rotated samples. Therefore, G has more
feedbacks to improve Pg. We investigate the improvement of our method on toy dataset as in Section
4. The setup is the same, except that now we replace models/cost functions of −Φ(G, C) with our
proposed ones −Φ+(G, C) (the design of Ggood and Gcollapsed are the same). The loss now is shown
in Fig. 3c. Comparing Fig. 3c and Fig. 3b, the improvement using our proposed model can be
observed: Ggood has the lowest loss under our proposed model. Note that, since optimizing KL
divergence is not easy because it is asymmetric and could be biased to one direction , in our
implementation, we use a slightly modiﬁed version as described in the Appendix.
Experiments
We measure the diversity and quality of generated samples via the Fréchet Inception Distance (FID)
 . FID is computed with 10K real samples and 5K generated samples exactly as in if not
precisely mentioned. We report the best FID attained in 300K iterations as in . We
integrate our proposed techniques into two baseline models (SSGAN and Dist-GAN ). We
conduct experiments mainly on CIFAR-10 and STL-10 (resized into 48 × 48 as in ). We also
provide additional experiments of CIFAR-100, Imagenet 32 × 32 and Stacked-MNIST.
For Dist-GAN , we evaluate three versions implemented with different network architectures:
DCGAN architecture , CNN architectures of SN-GAN (referred as SN-GAN architecture)
and ResNet architecture . We recall these network architectures in Appendix C. We use ResNet
architecture for experiments of CIFAR-100, Imagenet 32 × 32, and tiny K/4, K/2 architectures
 for Stacked MNIST. We keep all parameters suggested in the original work and focus to
understand the contribution of our proposed techniques. For SSGAN , we use the ResNet
architecture as implemented in the ofﬁcial code1.
In our experiments, we use SS to denote the original self-supervised tasks proposed in , and we use
MS to denote our proposed self-supervised tasks “Multi-class mini-max game based Self-supervised
tasks". Details of the experimental setup and network parameters are discussed in Appendix B.
We have conducted extensive experiments. Setup and results are discussed in Appendix B. In this
section, we highlight the main results:
• Comparison between SS and our proposed MS using the same baseline.
• Comparison between our proposed baseline + MS and other state-of-the-art unconditional
and conditional GAN. We emphasize that our proposed baseline + MS is unconditional and
does not use any label.
Comparison between SS and our proposed MS using the same baseline
Results are shown in Fig. 4 using Dist-GAN as the baseline. For each experiment and for each
approach (SS or MS), we obtain the best λg and λd using extensive search (see Appendix B.4 for
details), and we use the best λg and λd in the comparison depicted in Fig. 4. In our experiments, we
observe that Dist-GAN has stable convergence. Therefore, we use it in these experiments. As shown
in Fig. 4, our proposed MS outperforms the original SS consistently. More details can be found in
Appendix B.4.
Comparison between our proposed method with other state-of-the-art GAN
Main results are shown in Table 1. Details of this comparison can be found in Appendix B.4. The
best λg and λd as in Figure 4 are used in this comparison. The best FID attained in 300K iterations
1 
Iterations
SN-GAN for CIFAR-10
Baseline + SS ( d = 1.0)
Baseline + MS ( d = 1.0, g = 0.01)
Iterations
ResNet for CIFAR-10
Baseline + SS ( d = 0.5)
Baseline + MS ( d = 0.5, g = 0.10)
Iterations
SN-GAN for STL-10
Baseline + SS ( d = 1.0)
Baseline + MS ( d = 0.5, g = 0.05)
Iterations
ResNet for STL-10
Baseline + SS ( d = 1.0)
Baseline + MS ( d = 1.0, d = 0.01)
Figure 4: Compare SS (original SS tasks proposed in ) and MS (our proposed Multi-class minimax game based Self-supervised tasks). The baseline is Dist-GAN , implemented with SN-GAN
networks (CNN architectures in ) and ResNet. Two datasets are used, CIFAR-10 and STL-10.
For each experiment, we use the best λd, λg for the models, obtained through extensive search
(Appendix B.4). Note that λg = 0 is the best for “Baseline + SS” in all experiments. The results
suggest consistent improvement using our proposed self-supervised tasks.
Table 1: Comparison with other state-of-the-art GAN on CIFAR-10 and STL-10 datasets. We
report the best FID of the methods. Two network architectures are used: SN-GAN networks (CNN
architectures in ) and ResNet. The FID scores are extracted from the respective papers when
available. SS denotes the original SS tasks proposed in . MS denotes our proposed self-supervised
tasks. ‘*’: FID is computed with 10K-10K samples as in . All compared GAN are unconditional,
except SAGAN and BigGAN. SSGAN+ is SS-GAN in but using the best parameters we have
obtained. In SSGAN+ + MS, we replace the original SS in author’s code with our proposed MS.
GAN-GP 
WGAN-GP 
SN-GAN 
21.70 ± .21
40.10 ± .50
SS-GAN 
Dist-GAN 
17.61 ± .30
28.50 ± .49
GN-GAN 
16.47 ± .28
SAGAN (cond.)
13.4 (best)
BigGAN (cond.)
Ours(SSGAN+ + MS)
Dist-GAN + SS
14.97 ± .29
27.98 ± .38
Ours(Dist-GAN + MS)
13.90 ± .22
27.10 ± .34
are reported as in . Note that SN-GAN method attains the best FID at about 100K
iterations with ResNet and it diverges afterward. Similar observation is also discussed in .
As shown in Table 1, our method (Dist-GAN + MS) consistently outperforms the baseline Dist-GAN
and other state-of-the-art GAN. These results conﬁrm the effectiveness of our proposed self-supervised
tasks based on multi-class minimax game.
We have also extracted the FID reported in , i.e. SSGAN with the original SS tasks proposed
there. In this case, we follow exactly their settings and compute FID using 10K real samples and
10K fake samples. Our model achieves better FID score than SSGAN with exactly the same ResNet
architecture on CIFAR-10 dataset. See results under the column CIFAR-10∗in Table 1.
Note that we have tried to reproduce the results of SSGAN using its published code, but we were
unable to achieve similar results as reported in the original paper . We have performed extensive
search and we use the obtained best parameter to report the results as SSGAN+ in Table 1 (i.e.,
SSGAN+ uses the published code and the best parameters we obtained). We use this code and
setup to compare SS and MS, i.e. we replace the SS code in the system with MS code, and obtain
“SSGAN+ + MS”. As shown in Table 1, our “SSGAN+ + MS” achieves better FID than SSGAN+.
The improvement is consistent with Figure 4 when Dist-GAN is used as the baseline. More detailed
experiments can be found in the Appendix. We have also compared SSGAN+ and our system
(SSGAN+ + MS) on CelebA (64 × 64). In this experiment, we use a small DCGAN architecture
provided in the authors’ code. Our proposed MS outperforms the original SS, with FID improved
from 35.03 to 33.47. This experiment again conﬁrms the effectiveness of our proposed MS.
Table 2: Results on CIFAR-100 and ImageNet 32×32. We use baseline model Dist-GAN with
ResNet architecture. We follow the same experiment setup as above. SS: proposed in ; MS: this
CIFAR-100 (10K-5K FID)
ImageNet 32×32 (10K-10K FID)
Table 3: Comparing to state-of-the-art methods on Stacked MNIST with tiny K/4 and K/2 architectures . We also follow the same experiment setup of . Baseline model: Dist-GAN. SS:
proposed in ; MS: this work. Our method MS achieves the best results for this dataset with both
architectures, outperforming state-of-the-art by a signiﬁcant margin.
Unrolled GAN 
WGAN-GP 
Dist-GAN 
Pro-GAN 
Ours( +MS)
372.2 ± 20.7
640.1 ± 136.3
859.5 ± 68.7
859.5 ± 36.2
906.75 ± 26.15
926.75 ± 32.65
4.66 ± 0.46
1.97 ± 0.70
1.04 ± 0.29
1.05 ± 0.09
0.90 ± 0.13
0.78 ± 0.13
817.4 ± 39.9
772.4 ± 146.5
917.9 ± 69.6
919.8 ± 35.1
957.50 ± 31.23
976.00 ± 10.04
1.43 ± 0.12
1.35 ± 0.55
1.06 ± 0.23
0.82 ± 0.13
0.61 ± 0.15
0.52 ± 0.07
We conduct additional experiments on CIFAR-100 and ImageNet 32×32 to compare SS and MS
with Dist-GAN baseline. We use the same ResNet architecture as Section B.4 on CIFAR-10 for this
study, and we use the best parameters λd and λg selected in Section B.4 for ResNet architecture.
Experimental results in Table 2 show that our MS consistently outperform SS for all benchmark
datasets. For ImageNet 32×32 we report the best FID for SS because the model suffers serious mode
collapse at the end of training. Our MS achieves the best performance at the end of training.
We also evaluate the diversity of our generator on Stacked MNIST . Each image of this dataset is
synthesized by stacking any three random MNIST digits. We follow exactly the same experiment
setup with tiny architectures K/4, K/2 and evaluation protocol of . We measure the quality
of methods by the number of covered modes (higher is better) and KL divergence (lower is better).
Refer to for more details. Table. 3 shows that our proposed MS outperforms SS for both mode
number and KL divergence. Our approach signiﬁcantly outperforms state-of-the-art . The
means and standard deviations of MS and SS are computed from eight runs (we re-train our GAN
model from the scratch for each run). The results are reported with best (λd, λg) of MS: (0.5, 0.2)
for K/4 architecture and (1.0, 1.0) for K/2 architecture. Similarly, best (λd, λg) of SS: (0.5, 0.0)
for K/4 architecture and (1.0, 0.0) for K/2 architecture.
Finally, in Table 1, we compare our FID to SAGAN (a state-of-the-art conditional GAN) and
BigGAN . We perform the experiments under the same conditions using ResNet architecture on
the CIFAR-10 dataset. We report the best FID that SAGAN can achieve. As SAGAN paper does not
have CIFAR-10 results , we run the published SAGAN code and select the best parameters to
obtain the results for CIFAR-10. For BigGAN, we extract best FID from original paper. Although our
method is unconditional, our best FID is very close to that of these state-of-the-art conditional GAN.
This validates the effectiveness of our design. Generated images using our system can be found in
Figures 5 and 6 of Appendix B.
Conclusion
We provide theoretical and empirical analysis on auxiliary self-supervised task for GAN. Our analysis
reveals the limitation of the existing work. To address the limitation, we propose multi-class minimax
game based self-supervised tasks. Our proposed self-supervised tasks leverage the rotated samples
to provide better feedback in matching the data and generator distributions. Our theoretical and
empirical analysis support improved convergence of our design. Our proposed SS tasks can be
easily incorporated into existing GAN models. Experiment results suggest that they help boost
the performance of baseline implemented with various network architectures on the CIFAR-10,
CIFAR-100, STL-10, CelebA, Imagenet 32 × 32, and Stacked-MNIST datasets. The best version of
our proposed method establishes state-of-the-art FID scores on all these benchmark datasets.
Acknowledgements
This work was supported by ST Electronics and the National Research Foundation(NRF), Prime
Minister’s Ofﬁce, Singapore under Corporate Laboratory @ University Scheme (Programme Title:
STEE Infosec - SUTD Corporate Laboratory). This research was also supported by the National
Research Foundation Singapore under its AI Singapore Programme [Award Number: AISG-100E-
2018-005]. This research was also supported in part by the Energy Market Authority (EP award no.
NRF2017EWT-EP003-061). This project was also supported by SUTD project PIE-SGP-AI-2018-01.