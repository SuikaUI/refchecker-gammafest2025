S4L: Self-Supervised Semi-Supervised Learning
Xiaohua Zhai∗, Avital Oliver∗, Alexander Kolesnikov∗, Lucas Beyer∗
Google Research, Brain Team
{xzhai, avitalo, akolesnikov, lbeyer}@google.com
This work tackles the problem of semi-supervised learning of image classiﬁers. Our main insight is that the ﬁeld of
semi-supervised learning can beneﬁt from the quickly advancing ﬁeld of self-supervised visual representation learning. Unifying these two approaches, we propose the framework of self-supervised semi-supervised learning (S4L)
and use it to derive two novel semi-supervised image classi-
ﬁcation methods. We demonstrate the effectiveness of these
methods in comparison to both carefully tuned baselines,
and existing semi-supervised learning methods. We then
show that S4L and existing semi-supervised methods can
be jointly trained, yielding a new state-of-the-art result on
semi-supervised ILSVRC-2012 with 10% of labels.
1. Introduction
Modern computer vision systems demonstrate outstanding performance on a variety of challenging computer vision benchmarks, such as image recognition , object
detection , semantic image segmentation , etc. Their
success relies on the availability of a large amount of annotated data that is time-consuming and expensive to acquire.
Moreover, applicability of such systems is typically limited
in scope deﬁned by the dataset they were trained on.
Many real-world computer vision applications are concerned with visual categories that are not present in standard
benchmark datasets, or with applications of dynamic nature where visual categories or their appearance may change
over time. Unfortunately, building large labeled datasets for
all these scenarios is not practically feasible. Therefore, it
is an important research challenge to design a learning approach that can successfully learn to recognize new concepts by leveraging only a small amount of labeled examples. The fact that humans quickly understand new concepts
after seeing only a few (labeled) examples suggests that this
goal is achievable in principle.
Notably, a large research effort is dedicated towards
∗equal contribution
Full dataset
Labelled images
A schematic illustration of one of the proposed
self-supervised semi-supervised techniques: S4L-Rotation. Our
model makes use of both labeled and unlabled images. The ﬁrst
step is to create four input images for any image by rotating it
by 0◦, 90◦, 180◦and 270◦(inspired by ). Then, we train
a single network that predicts which rotation was applied to all
these images and, additionally, predicts semantic labels of annotated images. This conceptually simple technique is competitive
with existing semi-supervised learning methods.
learning from unlabeled data that, in many realistic applications, is much less onerous to acquire than labeled
data. Within this effort, the ﬁeld of self-supervised visual
representation learning has recently demonstrated the most
promising results . Self-supervised learning techniques
deﬁne pretext tasks which can be formulated using only unlabeled data, but do require higher-level semantic understanding in order to be solved. As a result, models trained
for solving these pretext tasks learn representations that can
be used for solving other downstream tasks of interest, such
as image recognition.
Despite demonstrating encouraging results , purely
self-supervised techniques learn visual representations that
are signiﬁcantly inferior to those delivered by fullysupervised techniques. Thus, their practical applicability is
 
limited and as of yet, self-supervision alone is insufﬁcient.
We hypothesize that self-supervised learning techniques
could dramatically beneﬁt from a small amount of labeled
examples. By investigating various ways of doing so, we
bridge self-supervised and semi-supervised learning, and
propose a framework of semi-supervised losses arising from
self-supervised learning targets.
We call this framework
self-supervised semi-supervised learning or, in short, S4L.
The techniques derived in that way can be seen as new semisupervised learning techniques for natural images. Figure 1
illustrates the idea of the proposed S4L techniques. We
thus evaluate our models both in the semi-supervised setup,
as well as in the transfer setup commonly used to evaluate self-supervised representations. Moreover, we design
strong baselines for benchmarking methods which learn using only 10 % or 1 % of the labels in ILSVRC-2012.
We further experimentally investigate whether our S4L
methods could further beneﬁt from regularizations proposed by the semi-supervised literature, and discover that
they are complementary, i.e. combining them leads to improved results.
Our main contributions can be summarized as follows:
• We propose a new family of techniques for semisupervised learning with natural images that leverage recent advances in self-supervised representation
• We demonstrate that the proposed self-supervised
semi-supervised (S4L) techniques outperform carefully tuned baselines that are trained with no unlabeled
data, and achieve performance competitive with previously proposed semi-supervised learning techniques.
• We further demonstrate that by combining our best
S4L methods with existing semi-supervised techniques, we achieve new state-of-the-art performance
on the semi-supervised ILSVRC-2012 benchmark.
2. Related Work
In this work we build on top of the current state-of-theart in both ﬁelds of semi-supervised and self-supervised
learning. Therefore, in this section we review the most relevant developments in these ﬁelds.
2.1. Semi-supervised Learning
Semi-supervised learning describes a class of algorithms
that seek to learn from both unlabeled and labeled samples,
typically assumed to be sampled from the same or similar distributions. Approaches differ on what information to
gain from the structure of the unlabeled data.
Given the wide variety of semi-supervised learning techniques proposed in the literature, we refer to for an extensive survey. For more context, we focus on recent developments based on deep neural networks.
The standard protocol for evaluating semi-supervised
learning algorithms works as such: (1) Start with a standard labeled dataset; (2) Keep only a portion of the labels
(say, 10 %) on that dataset; (3) Treat the rest as unlabeled
data. While this approach may not reﬂect realistic settings
for semi-supervised learning , it remains the standard
evaluation protocol, which we follow it in this work.
Many of the initial results on semi-supervised learning
with deep neural networks were based on generative models such as denoising autoencoders , variational autoencoders and generative adversarial networks .
More recently, a line of research showed improved results
on standard baselines by adding consistency regularization
losses computed on unlabeled data. These consistency regularization losses measure discrepancy between predictions
made on perturbed unlabeled data points. Additional improvements have been shown by smoothing predictions before measuring these perturbations. Approaches of these
kind include Π-Model , Temporal Ensembling ,
Mean Teacher and Virtual Adversarial Training .
Recently, fast-SWA showed improved results by training with cyclic learning rates and measuring discrepancy
with an ensemble of predictions from multiple checkpoints.
By minimizing consistency losses, these models implicitly
push the decision boundary away from high-density parts
of the unlabeled data. This may explain their success on
typical image classiﬁcation datasets, where points in each
clusters typically share the same class.
additional
approaches
semisupervised learning, which have shown success both in the
context of deep neural networks and other types of models
are Pseudo-Labeling , where one imputes approximate
classes on unlabeled data by making predictions from a
model trained only on labeled data, and conditional entropy
minimization , where all unlabeled examples are
encouraged to make conﬁdent predictions on some class.
Semi-supervised learning algorithms are typically evaluated on small-scale datasets such as
CIFAR-10 and SVHN .
We are aware of very
few examples in the literature where semi-supervised learning algorithms are evaluated on larger, more challenging
datasets such as ILSVRC-2012 . To our knowledge,
Mean Teacher currently holds the state-of-the-art result
on ILSVRC-2012 when using only 10 % of the labels. Recent concurrent work presents competitive results
on ILSVRC-2012.
2.2. Self-supervised Learning
Self-supervised learning is a general learning framework
that relies on surrogate (pretext) tasks that can be formulated using only unsupervised data. A pretext task is de-
signed in a way that solving it requires learning of a useful image representation. Self-supervised techniques have a
variety of applications in a broad range of computer vision
topics .
In this paper we employ self-supervised learning techniques that are designed to learn useful visual representations from image databases. These techniques achieve stateof-the-art performance among approaches that learn visual
representations from unsupervised images only. Below we
provided a non-comprehensive summary of the most important developments in this direction.
Doersch et al.
propose to train a CNN model that
predicts relative location of two randomly sampled nonoverlapping image patches . Follow-up papers 
generalize this idea for predicting a permutation of multiple
randomly sampled and permuted patches.
Beside the above patch-based methods, there are selfsupervised techniques that employ image-level losses.
Among those, in the authors propose to use grayscale
image colorization as a pretext task. Another example is a
pretext task that predicts an angle of the rotation transformation that was applied to an input image.
Some techniques go beyond solving surrogate classiﬁcation tasks and enforce constraints on the representation
space. A prominent example is the exemplar loss from 
that encourages the model to learn a representation that is
invariant to heavy image augmentations. Another example
is , that enforces additivity constraint on visual representation: the sum of representations of all image patches
should be close to representation of the whole image. Finally, proposes a learning procedure that alternates between clustering images in the representation space and
learning a model that assigns images to their clusters.
3. Methods
In this section we present our self-supervised semisupervised learning (S4L) techniques. We ﬁrst provide a
general description of our approach. Afterwards, we introduce speciﬁc instantiations of our approach.
We focus on the semi-supervised image classiﬁcation
Formally, we assume an (unknown) data generating joint distribution p(X, Y ) over images and labels.
The learning algorithm has access to a labeled training set
Dl, which is sampled i.i.d. from p(X, Y ) and an unlabeled
training set Du, which is sampled i.i.d. from the marginal
distribution p(X).
The semi-supervised methods we consider in this paper
have a learning objective of the following form:
Ll(Dl, θ) + wLu(Du, θ),
where Ll is a standard cross-entropy classiﬁcation loss of
all labeled images in the dataset, Lu is a loss deﬁned on unsupervised images (we discuss its particular instances later
in this section), w is a non-negative scalar weight and θ is
the parameters for model fθ(·). Note that the learning objective can be extended to multiple unsupervised losses.
3.1. Self-supervised Semi-supervised Learning
We now describe our self-supervised semi-supervised
learning techniques.
For simplicity, we present our approach in the context of multiclass image recognition, even
though it can be easily generalized to other scenarios, such
as dense image segmentation.
It is important to note that in practice the objective 1 is
optimized using a stochastic gradient descent (or a variant)
that uses mini-batches of data to update the parameters θ.
In this case the size of a supervised mini-batch xl, yl ⊂Dl
and an unsupervised mini-batch xu ⊂Du can be arbitrary
chosen. In our experiments we always default to simplest
possible option of using minibatches of equal sizes.
We also note that we can choose whether to include the
minibatch xl into the self-supervised loss, i.e. apply Lself to
the union of xu and xl. We experimentally study the effect
of this choice in our experiments Section 4.4.
We demonstrate our framework on two prominent selfsupervised techniques: predicting image rotation and
exemplar . Note, that with our framework, more selfsupervised losses can be explored in the future.
S4L-Rotation. The key idea of rotation self-supervision is
to rotate an input image then predict which rotation degree
was applied to these rotated images. The loss is deﬁned as:
L(fθ(xr), r)
{0◦, 90◦, 180◦, 270◦}, xr is the image x rotated by r,
fθ(·) is the model with parameters θ,L is the cross-entropy
This results in a 4-class classiﬁcation problem.
We follow a recommendation from and in a single
optimization step we always apply and predict all four
rotations for every image in a minibatch.
We also apply the self-supervised loss to the labeled images in each minibatch. Since we process rotated supervised
images in this case, we suggest to also apply a classiﬁcation
loss to these images. This can be seen as an additional way
to regularize a model in a regime when a small amount of
labeled image are available. We measure the effect of this
choice later in Section 4.4.
S4L-Exemplar. The idea of exemplar self-supervision 
is to learn a visual representation that is invariant to a wide
range of image transformations. Speciﬁcally, we use “Inception” cropping , random horizontal mirroring, and
HSV-space color randomization as in to produce 8 different instances of each image in a minibatch.
Following , we implement Lu as the batch hard triplet loss 
with a soft margin. This encourages transformation of the
same image to have similar representations and, conversely,
encourages transformations of different images to have diverse representations.
Similarly to the rotation self-supervision case, Lu is applied to all eight instances of each image.
3.2. Semi-supervised Baselines
In the following section, we compare S4L to several
leading semi-supervised learning algorithms that are not
based on self-supervised objectives. We now describe the
approaches that we compare to.
Our proposed objective 1 is applicable for semi supervised learning methods as well, where the loss Lu is the
standard semi supervised loss as described below.
Virtual Adversarial Training
(VAT) : The idea is
making the predicted labels robust around input data point
against local perturbation.
It approximates the maximal
change in predictions within an ϵvat vicinity of unlabeled
data points, where ϵvat is a hyperparameter. Concretely, the
VAT loss for a model fθ is:
KL(fθ(x) ∥fθ(x + ∆x)),
∆x = arg max
δ s.t. |δ|2=ϵ
KL(fθ(x) ∥fθ(x + δ)).
While computing ∆x directly is not tractable, it can be ef-
ﬁciently approximated at the cost of an extra forward and
backwards pass for every optimization step. .
Conditional Entropy Minimization (EntMin) : This
works under the assumption that unlabeled data indeed has
one of the classes that we are training on, even when the particular class is not known during training. It adds a loss for
unlabeled data that, when minimized, encourages the model
to make conﬁdent predictions on unlabeled data. Speciﬁcally, the conditional entropy minimization loss for a model
fθ (treating fθ as a conditional distribution of labels over
images) is:
−fθ(y|x) log fθ(y|x)
Alone, the EntMin loss is not useful in the context of deep
neural networks because the model can easily become extremely conﬁdent by increasing the weights of the last layer.
One way to resolve this is to encourage the model predictions to be locally-Lipschitz, which VAT does . Therefore, we only consider VAT and EntMin combined, not just
EntMin alone, i.e. Lu = wvatLvat + wentminLentmin.
Pseudo-Label is a simple approach: Train a model
only on labeled data, then make predictions on unlabeled
Then enlarge your training set with the predicted
classes of the unlabeled data points whose predictions are
conﬁdent past some threshold of conﬁdence. Re-train your
model with this enlarged labeled dataset. While shows
that in a simple ”two moons” dataset, psuedo-label fails to
learn a good model, in many real datasets this approach does
show meaningful gains.
4. ILSVRC-2012 Experiments and Results
In this section, we present the results of our main experiments. We used the ILSVRC-2012 dataset due to its
widespread use in self-supervised learning methods, and to
see how well semi-supervised methods scale.
Since the test set of ILSVRC-2012 is not available, and
numbers from the validation set are usually reported in the
literature, we performed all hyperparameter selection for all
models that we trained on a custom train/validation split of
the public training set. This custom split contains 1 231 121
training and 50 046 validation images. We then retrain the
model using the best hyperparameters on the full training set
(1 281 167 images), possibly with fewer labels, and report
ﬁnal results obtained on the public validation set validation set for model
selection. While we use a custom validation set extracted
from the training set, using such a large validation set does
not correspond to a realistic scenario, as already discussed
by . We also want to cover more realistic cases
in our evaluation. We thus perform experiments on 1 % of
labeled examples (roughly 13 000 labeled images), while
also using a validation set of only 5000 images. We analyze
the impact of validation set size in Section 7.
We always deﬁne epochs in terms of the available labeled
data, i.e. one epoch corresponds to one full pass through the
labeled data, regardless of how many unlabeled examples
have been seen. We optimize our models using stochastic gradient descent with momentum on minibatches of size
256 unless speciﬁed otherwise. While we do tune the learning rate, we keep the momentum ﬁxed at 0.9 across all experiments. Table 1 summarizes our main results.
4.1. Plain Supervised Learning
Whenever new methods are introduced, it is crucial to
compare them against a solid baseline of existing methods.
The simplest baseline to which any semi-supervised learning method should be compared to, is training a plain supervised model on the available labeled data.
Oliver et al. discovered that reported baselines
trained on labeled examples alone are unfairly weak, perhaps given that there is not a strong community behind tuning those baselines. They provide strong supervised-only
baselines for SVHN and CIFAR-10, and show that the gap
shown by the use of unlabeled data is smaller than reported.
We observed the same in the case of ILSVRC-2012.
Thus, we aim to provide a strong baseline for future research by performing a relatively large search over training hyperparameters for training a model on only 10 % of
ILSVRC-2012. Speciﬁcally, we try weight-decay values
in {1, 3} · 10{−2,−3,−4}, learning rates in {0.3, 0.1, 0.03},
four different learning rate schedules spanning 30 to 500
epochs, and ﬁnally we explore various model architectures:
ResNet50, ResNet34, ResNet18, in both “regular” (v1) and
“pre-activation” (v2) variants, as well as half-, double-,
triple-, and quadruple-width variants of these, testing the
assumption that smaller or shallower models overﬁt less.
In total, we trained several thousand models on our custom training/validation split of the public training set of
ILSVRC-2012. In summary, it is crucial to tune both weight
decay and training duration while, perhaps surprisingly,
model architecture, depth, and width only have a small in-
ﬂuence on the ﬁnal results. We thus use a standard, unmodiﬁed ResNet50v2 as model, trained with weight decay
of 10−3 for 200 epochs, using a standard learning rate of
0.1, ramped up from 0 for the ﬁrst ﬁve epochs, and decayed
by a factor of 10 at epochs 140, 160, and 180. We train
in total for 200 epochs. The standard augmentation procedure of random cropping and horizontal ﬂipping is used during training, and predictions are made using a single central
crop keeping aspect ratio.
We perform a similar search when training our baseline on 1 % of ILSVRC-2012, but additionally include two
choices of data augmentation (whether or not to apply random color augmentation) and two minibatch sizes (256 and
1024) in the hyperparameter search.
Perhaps somewhat
surprisingly, the results here are similar, in that tuning the
weight decay and training duration is crucial, but model architecture does not matter much. Additionally, performing
color augmentation becomes important. Here too, we use
a standard, unmodiﬁed ResNet50v2 as model, trained with
weight decay of 10−2 for 1000 epochs, using a learning rate
of 0.011, ramped up from 0.0 for the ﬁrst ten epochs2, and
decayed by a factor of 10 at epochs 700, 800, and 900. We
train in total for 1000 epochs. A more detailed presentation
of the results is provided in the supplementary material.
Using this only slightly altered training procedure, our
baseline models achieve 80.43 % top5 accuracy (56.35 %
top1) on the public ILSVRC-2012 validation set when
1While the standard learning rate of 0.1 worked equally well, learning
curves seemed signiﬁcantly less stable.
2This was likely not necessary, but kept for consistency.
Table 1. Top-5 accuracy [%] obtained by individual methods when
training them on ILSVRC-2012 with a subset of labels. All methods use the same standard width ResNet50v2 architecture.
ILSVRC-2012 labels:
(i.e. images per class)
Supervised Baseline (Section 4.1)
Pseudolabels 
VAT + Entropy Minimization 
Self-sup. Rotation + Linear
Self-sup. Exemplar + Linear
Self-sup. Rotation + Fine-tune
Self-sup. Exemplar + Fine-tune
S4L-Rotation
S4L-Exemplar
trained on only 10 % of the full training set. Our 1 % baseline achieves 48.43 % top5 accuracy (25.39 % top1). These
results form a solid baseline to compare to, considering
that the same standard ResNet50v2 model achieves 92.82 %
top5 accuracy (75.89 % top1) on 100 % of the labels.
For all further experiments, we reuse the best hyperparameters discovered here, except that we try two
additional learning rates:
{0.3, 0.1, 0.03} for 10 % and
{0.03, 0.01, 0.003} for 1 %, and two additional weight decays: {10−4, 3·10−4, 10−3} for 10 % and {3·10−3, 10−2, 3·
10−2} for 1 %. We also try two different weights wu for the
additionally introduced loss Lu: wu ∈{0.5, 1.0}.
4.2. Semi-supervised Baselines
We train semi-supervised baseline models using (1)
Pseudo-Label, (2) VAT, and (3) VAT+EntMin. To the best
of our knowledge, we present the ﬁrst evaluation of these
techniques on ILSVRC-2012.
Pseudo-Label Using the plain supervised learning models from Section 4.1, we assign pseudo-labels to the full
dataset. Then, in a second step, we train a ResNet50v2
from scratch following standard practice, i.e. with learning
rate 0.1, weight decay 10−4, and 100 epochs on the full
(pseudo-labeled) dataset.
We try both using all predictions as pseudo-labels, as
well as using only those predictions with a conﬁdence above
0.5. Both perform closely on our validation set, and we
choose no ﬁltering for the ﬁnal model for simplicity.
Table 1 shows that a second step training with pseudolabels consistently improves the results on both 10 % and
the 1 % labels case. This motivates us to apply the idea
to our best semi supervised model, which is discussed in
Section 5.
VAT We ﬁrst verify our VAT implementation on CIFAR-
10. With 4000 labels, we are able to achieve 86.41 % top-1
accuracy, which is in line with the 86.13 % reported in .
Besides the previously mentioned hyperparameters common to all methods, VAT needs tuning ϵvat. Since it corresponds to a distance in pixel space, we use a simple heuristic
for deﬁning a range of values to try for ϵvat: values should
be lower than half the distance between neighbouring images in the dataset. Based on this heuristic, we try values of
ϵvat ∈{50, 50 · 2−1/3, 50 · 2−2/3, 25} and found ϵvat ≈40
to work best.
VAT+EntMin VAT is intended to be used together with
an additional entropy minimization (EntMin) loss.
Min adds a single hyperparameter to our best VAT model:
the weight of the EntMin loss, for which we try wentmin ∈
{0, 0.03, 0.1, 0.3, 1}, without re-tuning ϵvat.
The results of our best VAT and VAT+EntMin model are
shown in Table 1. As can be seen, VAT performs well in the
10 % case, and adding adding entropy minimization consistently improves its performance. In Section 5, we further
extend the co-training idea to include the self-supervised
rotation loss.
4.3. Self-supervised Baselines
Previous work has evaluated features learned via selfsupervision on the unlabeled data in a “semi-supervised”
way by either freezing the features and learning a linear
classiﬁer on top, or by using the self-supervised model as
an initialization and ﬁne-tuning, using a subset of the labels
in both cases. In order to compare our proposed way to do
self-supervised semi-supervised learning to these common
evaluations, we train a rotation and an exemplar model following the best practice from but with standard width
(“4×” in ).
Following our established protocol, we tune the weight
decay and learning rate for the logistic regression, although
interestingly the standard values from of 10−4 weight
decay and 0.1 learning rate worked best.
The results of evaluating these models with both 10 %
and 1 % are presented in Table 1 as “Self-sup. + Linear” and
“Self-sup. + Fine-tune”. Note that while our results for the
linear experiment are similar to those reported in , they
are not directly. This is due to 1) ours being evaluated on
the public validation set, while they evaluated on a custom
validation set, and 2) they used L-BFGS while we use SGD
with standard augmentations. Furthermore, ﬁne-tuning approaches or slightly surpasses the supervised baseline.
Self-supervised
Semi-supervised
For training our full self-supervised semi-supervised
models (S4L), we follow the same protocol as for our semisupervised baselines, i.e. we use the best settings of the
plain supervised baseline and only tune the learning rate,
weight decay, and weight of the newly introduced loss. We
found that for both S4L-Rotation and S4L-Exemplar, the
self-supervised loss weight w = 1 worked best (though not
by much) and the optimal weight decay and learning rate
were the same as for the supervised baseline.
As described in Section 3.1, we apply the self-supervised
loss on both labeled and unlabeled images. Furthermore,
both Rotation and Exemplar self-supervision generate augmented copies of each image, and we do apply the supervision loss on all copies of the labeled images. We performed
one case study on S4L-Rotation in order to investigate this
choice, and found that whether or not the self-supervision
loss Lself is also applied on the labeled images does not
have signiﬁcant impact. On the other hand, applying the
supervision loss Lsup on the augmented images generated
by self-supervision does indeed improve performance by
almost 1 %. Furthermore, this allows to use multiple transformed copies of an image at inference-time (e.g. four rotations) and take the average of their predictions. While this
4-rot prediction is 1 % to 2 % more accurate, the results we
report do not make use of this in order to keep comparison
The results shown in Table 1 show that our proposed way
of doing self-supervised semi-supervised learning is indeed
effective for the two self-supervision methods we tried. We
hypothesize that such approaches can be designed for other
self-supervision objectives.
We additionally veriﬁed that our proposed method is not
sensitive to the random seed, nor the split of the dataset, see
Appendix B for details.
Finally, in order to explore the limits of our proposed
models and match capacity of the architectures used in concurrent papers (e.g. ), we train the S4L-Rotation model
with a more powerful architecture, such as ResNet152v2
2×wider, and also use large computational budget to tune
hyperparameters. In this case our model achieves even better results: 86.41 % top-5 accuracy with 10 % labels and
57.50 % with 1 % labels.
5. Semi-supervised Learning is Complementary to S4L
Since we found that different types of models perform
similarly well, the natural next question is whether they are
complementary, in which case a combination would lead to
an even better model, or whether they all reach a common
“intrinsic” performance plateau.
In this section, we thus describe our Mix Of All Models (MOAM). In short: in a ﬁrst step, we combine S4L-
Rotation and VAT+EntMin to learn a 4× wider model.
We then use this model in order to generate pseudo labels
for a second training step, followed by a ﬁnal ﬁne-tuning
step. Results of the ﬁnal model, as well as the models ob-
Table 2. Comparing our MOAM to previous methods in the literature on ILSVRC-2012 with 10 % of the labels. Note that different
models use different architectures, larger than those in Table 1.
Top-5 Top-1
MOAM full (proposed)
MOAM + pseudo label (proposed)
MOAM (proposed)
ResNet50v2 (4×wider)
VAE + Bayesian SVM 
Mean Teacher 
88.52† 68.66†
†CPCv2 
84.88† 64.03†
Training with all labels:
ResNet50v2 (4×wider)
MOAM (proposed)
94.45† 79.04†
†CPCv2 
† marks concurrent work.
tained in the two intermediate steps, are reported in Table 2
along with previous results reported in the literature.
Step 1: Rotation+VAT+EntMin
In the ﬁrst step, our
model jointly optimizes the S4L-Rotation loss and the VAT
and EntMin losses. We iterated on hyperparameters for this
setup in a less structured way than in our controlled experiments above (always on our custom validation set) and only
mention the ﬁnal values here. Our model was trained with
batch size 128, learning rate 0.1, weight decay 2 · 10−4,
training for 200 epochs with linear learning rate rampup
up to epoch 10, then 10-fold decays at 100, 150, and 190
We use inception crop augmentation as well as
horizontal mirroring. We used the following relative loss
weights: wsup = 0.3, wrot = 0.7, wvat = 0.3, wentmin = 0.3.
We tried a few heuristics for setting those weights automatically, but found that manually tuning them led to better performance. We also applied Polyak averaging to the model
parameters, choosing the decay factor such that parameters
decay by 50 % over each epoch.
Joint training of these
losses consistently improve over the models with a single
objective. The model obtained after this ﬁrst step achieves
88.80% top-5 accuracy on the ILSVRC-2012 dataset.
Step 2: Retraining on Pseudo Labels Using the above
model, we assign pseudo labels to the full dataset by averaging predictions across ﬁve crops and four rotations of
each image3. We then train the same network again in the
exact same way (i.e. with all the losses) except for the fol-
3Generating pseudo-labels using 20 crops only slightly improved performance by 0.25 %, but is cheap and simple.
Epochs of Logistic Regression
Places205 Accuracy [%]
Self-supervised Rotation (short)
Self-supervised Rotation (long)
S4L Rotation (short)
S4L Rotation (long)
Figure 2. Places205 learning curves of logistic regression on top of
the features learned by pre-training a self-supervised versus S4L-
Rotation model on ILSVRC-2012. The signiﬁcantly faster convergence (“long” training schedule vs. “short” one) suggests that
more easily separable features are learned.
lowing three differences: (1) the network is initialized using
the weights obtained in the ﬁrst step (2) every example has
a label: the pseudo label (3) due to this, an epoch now corresponds to the full dataset; we thus train for 18 epochs,
decaying the learning rate after 6 and 12 epochs.
Step 3: Fine-tuning the model Finally, we ﬁne-tune the
model obtained in the second step on the original 10 % labels only. This step is trained with weight decay 3·10−3 and
learning rate 5 · 10−4 for 20 epochs, decaying the learning
rate 10-fold every 5 epochs.
Remember that all hyper-parameters described here were
selected on our custom validation set which is taken from
the training set. The ﬁnal model “MOAM (full)” achieves
91.23 % top-5 accuracy, which sets the new state-of-the-art.
We conduct additional experiments and report performance of MOAM (i.e. only Step 1) with 100 % labels in
Table 2. Interestingly, MOAM achieves promising results
even in the high-data regime with 100 % labels, outperforming the fully supervised baseline: +0.87 % for top-5 accuracy and +1.6 % for top-1 accuracy.
6. Transfer of Learned Representations
Self-supervision methods are typically evaluated in
terms of how generally useful their learned representation
is. This is done by treating the learned model as a ﬁxed feature extractor, and training a linear logistic regression model
on top the features it extracts on a different dataset, usually
Places205 . We perform such an evaluation on our S4L
models in order to gain some insight into the generality of
the learned features, and how they compare to those obtained by pure self-supervision.
Accuracy [%] on 5k val-set
Accuracy [%] on full val-set
r = 0.99; p
Accuracy [%] on 1k val-set
Accuracy [%] on full val-set
r = 0.99; p
Figure 3. Correlation between validation score on a (custom) validation set of 1000, 5000, and 50 046 images on ILSVRC-2012. Each
point corresponds to a trained model during a sweep for plain supervised baseline for the 1 % labeled case. The best model according to
the validation set of 1 000 is marked in red. As can be seen, evaluating our models even with only a single validation image per class is
robust, and in particular selecting an optimal model with this validation set works as well as with the full validation set.
We closely follow the protocol deﬁned by .
representation is extracted from the pre-logits layer. We
use stochastic gradient descent (SGD) with momentum for
training these linear evaluation models with a minibatch
size of 2048 and an initial learning rate of 0.1, warmed up
in the ﬁrst epoch.
While Kolesnikov et al. show that a very long training schedule (520 epochs) is required for the linear model
to converge using self-supervised representations, we observe dramatically different behaviour when evaluating our
self-supervised semi-supervised representations. Figure 2
shows the accuracy curve of the plain self-supervised rotation method and our proposed S4L-Rotation method
trained on 10 % of ILSVRC-2012. As can be seen, the logistic regression is able to ﬁnd a good separating hyperplane in very few epochs and then plateaus, whereas in
the self-supervised case it struggles for a very long number
of epochs. This indicates that the addition of labeled data
leads to much more separable representations, even across
We further investigate the gap between the representation
learned by a good S4L model (MOAM) and a corresponding baseline trained on 100 % of the labels (the baseline
from Table 2). Surprisingly, we found that the representation learned by “MOAM (full)” transfers slightly better
than the baseline, which used ten times more labelled data:
83.3 % accuracy vs. 83.1 % accuracy, respectively. We provide full details of this experiment in the Supplementary
7. Is a Tiny Validation Set Enough?
Current standard practice in semi-supervised learning is
to use a subset of the labels for training on a large dataset,
but still perform model selection using scores obtained on
the full validation set.4 But having a large labeled validation set at hand is at odds with the promised practicality
of semi-supervised learning, which is all about having only
few labeled examples. This fact has been acknowledged
by , but has been mostly ignored in the semi-supervised
literature. Oliver et al. questions the viability of tuning with small validation sets by comparing the estimated
model accuracy on small validation sets. They ﬁnd that the
variance of the estimated accuracy gap between two models can be larger than the actual gap between those models,
hinting that model selection with small validation sets may
not be viable. That said, they did not empirically evaluate
whether it’s possible to ﬁnd the best model with a small validation set, especially when choosing hyperparameters for a
particular semi-supervised method.
We now describe our analysis of this important question.
We look at the many models we trained for the plain supervised baseline on 1 % of ILSVRC-2012. For each model,
we compute a validation score on a validation set of 1000
labeled images (i.e. one labeled image per class), 5000 labeled images (i.e. ﬁve labeled images per class), and compare these scores to those obtained on a “full-size” validation set of 50 046 labeled images. The result is shown in
Figure 3 and it is striking: there is a very strong correlation
between performance on the tiny and the full validation set.
Especially, while in parts there is high variability, those hyperparameters which work best do so in either case. Most
notably, the best model tuned on a small validation set is
also the best model tuned on a large validation set. We thus
conclude that for selecting hyperparameters of a model, a
tiny validation set is enough.
4To make matters worse, in the case of ILSVRC-2012, this validation
set is used both to select hyperparameters as well as to report ﬁnal performance. Remember that we avoid this by creating a custom validation set
from part of the training set for all hyperparameter selections.
8. Discussion and Future Work
In this paper, we have bridged the gap between selfsupervision methods and semi-supervised learning by suggesting a framework (S4L) which can be used to turn any
self-supervision method into a semi-supervised learning algorithm.
We instantiated two such methods: S4L-Rotation and
S4L-Exemplar and have shown that they perform competitively to methods from the semi-supervised literature on
the challenging ILSVRC-2012 dataset. We further showed
that S4L methods are complementary to existing semisupervision techniques, and MOAM, our proposed combination of those, leads to state-of-the-art performance.
While all of the methods we investigated show promising results for learning with 10 % of the labels on ILSVRC-
2012, the picture is much less clear when using only 1 %.
It is possible that in this low data regime, when only 13 labeled examples per class are available, the setting fades into
the few-shot scenario, and a very different set of methods
would be required for reaching much better performance.
Nevertheless, we hope that this work inspires other researchers in the ﬁeld of self-supervision to consider extending their methods into semi-supervised methods using our
S4L framework, as well as researchers in the ﬁeld of semisupervised learning to take inspiration from the vast amount
of recently proposed self-supervision methods.
Acknowledgements. We thank the Google Brain Team in
Z¨urich, and especially Sylvain Gelly for discussions.