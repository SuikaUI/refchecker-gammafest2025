Heterogeneous Memory Enhanced Multimodal Attention Model for
Video Question Answering
Chenyou Fan1,∗, Xiaofan Zhang1, Shu Zhang1, Wensheng Wang1, Chi Zhang1, Heng Huang1,2,∗
1JD.COM, 2 JD Digits
∗ ,
∗ 
In this paper, we propose a novel end-to-end trainable
Video Question Answering (VideoQA) framework with three
major components: 1) a new heterogeneous memory which
can effectively learn global context information from appearance and motion features; 2) a redesigned question
memory which helps understand the complex semantics of
question and highlights queried subjects; and 3) a new multimodal fusion layer which performs multi-step reasoning
by attending to relevant visual and textual hints with selfupdated attention.
Our VideoQA model ﬁrstly generates
the global context-aware visual and textual features respectively by interacting current inputs with memory contents.
After that, it makes the attentional fusion of the multimodal
visual and textual representations to infer the correct answer. Multiple cycles of reasoning can be made to iteratively reﬁne attention weights of the multimodal data and
improve the ﬁnal representation of the QA pair. Experimental results demonstrate our approach achieves state-of-theart performance on four VideoQA benchmark datasets.
1. Introduction
Video Question Answering (VideoQA) is to learn a
model that can infer the correct answer for a given question in human language related to the visual content of a
video clip. VideoQA is a challenging computer vision task,
as it requires to understand a complex textual question ﬁrst,
and then to ﬁgure out the answer that can best associate the
semantics to the visual contents in an image sequence.
Recent work proposed to learn models
of encoder-decoder structure to tackle the VideoQA problem. A common practice is to use LSTM-based encoders
to encode CNN features of video frames and embeddings
of question words into encoded visual sequence and word
sequence. Proper reasoning is then performed to produce
the correct answer, by associating the relevant visual contents with the question. For example, learning soft weights
A: Our model: woman Existing model: man
Q: Who drives by a hitchhiking man who is smoking? (answer: woman)
Figure 1. VideoQA is a challenging task as it requires the model to
associate relevant visual contents in frame sequence with the real
subject queried in question sentence. For a complex question such
as “Who drives by a hitchhiking man who is smoking?”, the model
needs to understand that the driver is the queried person and then
localize the frames in which the driver is driving in the car.
of frames will help attend to events that are queried by the
questions, while learning weights of regions in every single
frame will help detect details and localize the subjects in
the query. The former one aims to ﬁnd relevant frame-level
details by applying temporal attention to encoded image sequence . The latter one aims to ﬁnd region-level
details by spatial attention .
Jang et al. applied spatiotemporal attention mechanism on both spatial and temporal dimension of video features.
They also proposed to use both appearance (e.g.,
VGG ) and motion features (e.g., C3D ) to better
represent video frames. Their practice is to make early fusion of the two features and feed the concatenated feature
to a video encoder. But such straightforward feature integration leads to suboptimal results. Gao et al. proposed
to replace the early fusion with a more sophisticated comemory attention mechanism. They used one type of feature to attend to the other and fused the ﬁnal representations
of these two feature types at the ﬁnal stage. However, this
method doesn’t synchronize the attentions detected by appearance and motion features, thus could generate incorrect
attentions. Meanwhile, this method will also miss the attention which can be inferred by the combined appearance and
 
motion features, but not individual ones. The principal reason for the existing approaches to fail to identify the correct
attention is that they separate feature integration and attention learning steps. To address this challenging problem,
we propose a new heterogeneous memory to integrate
appearance and motion features and learn spatiotemporal attention simultaneously. In our new memory model,
the heterogeneous visual features as multi-input will colearn the attention to improve the video understanding.
On the other hand, VideoQA becomes very challenging
if the question has complex semantics and requires multiple
steps of reasoning. Several recent work tried to
augment VideoQA with differently embodied memory networks . Xu et al. proposed to reﬁne the
temporal attention over video features word by word with
a conventional LSTM question encoder plus an additional
LSTM based memory unit to store and update the attention.
However, this model is easily trapped into irrelevant local
semantics, and cannot understand the question based on the
global context. Both Zeng et al. and Gao et al. 
used external memory (memory network and episodic
memory respectively) to make multiple iterations of inference by interacting the encoded question representation
with video features conditioning on current memory contents. However, similar to many other work , the
question representation used in these approaches is only a
single feature vector encoded by an LSTM (or GRU) which
lacks capability to capture complex semantics in questions
such as shown in Fig. 1. Thus, it is desired to design a new
powerful model for understanding the complex semantics
of questions in VideoQA. To tackle this problem, we design novel network architecture to integrate both question encoder and question memory which can augment
each other.
The question encoder learns meaningful
representation of question and the re-designed question
memory understands the complex semantics and highlights queried subjects by storing and updating global
Moreover, we design a multimodal fusion layer which
can attend to visual and question hints simultaneously by
aligning relevant visual contents with key question words.
After gradually reﬁning the joint attention over video and
question representations and fusing them with learned soft
modality weights, the multi-step reasoning is achieved to
infer the correct answer from the complex semantics.
Our major contributions can be summarized as follows:
1) we introduce a heterogeneous external memory module
with attentional read and write operations such that the motion and appearance features are integrated to co-learn attention; 2) we utilize the interaction of visual and question features with memory contents to learn global contextaware representations; 3) we design a multimodal fusion
layer which can effectively combine visual and question
features with softly assigned attentional weights and also
support multi-step reasoning; and 4) our proposed model
outperforms the state-of-the-art methods on four VideoQA
benchmark datasets.
2. Related Work
Visual Question Answering (VQA) is an emerging research area to reason the correct answer
of a given question which is related to the visual content
of an image. Yang et al. proposed to encode question
words into one feature vector which is used as query vector to attend to relevant image regions with stack attention
mechanism. Their method supports multi-step reasoning by
repeating the query process while reﬁning the query vector.
Anderson et al. proposed to align questions with relevant
object proposals in images generated by Faster R-CNN 
and compute the visual feature as a weighted average over
all proposals. Xiong et al. proposed to encode image
and question features as facts and attend to relevant facts
through attention mechanism to generate a contextual vector. Ma et al. proposed a co-attention model which can
attend to not only relevant image regions but also important
question words simultaneously. They also suggested to use
external memory to memorize uncommon QA pairs.
Video Question Answering (VideoQA) extends VQA
to video domain which aims to infer the correct answer
given a relevant question of the visual content of a video
clip. VideoQA is considered to be a challenging problem as
reasoning on video clip usually requires memorizing contextual information in temporal scale. Many models have
been proposed to tackle this problem .
Many work utilized both motion (i.e. C3D )
and appearance (i.e. VGG , ResNet ) features to better represent video frames. Similar to the spatial mechanism widely used in VQA methods to ﬁnd relevant image
regions, many VideoQA work applied temporal attention mechanism to attend to most relevant frames
of a video clip.
Jang utilized both appearance and
motion features as video representations and applied spatial
and temporal attention mechanism to attend to both relevant
regions of a frame and frames of a video. Xu et al. proposed to reﬁne the temporal attention over frame features at
each question encoding step word by word. Both Zeng et
al. and Gao et al. proposed to use external memory
(Memory Network and Episodic Memory respectively) to make multiple iterations of inference by interacting the encoded question feature with video features conditioning on current memory contents. Their memory designs
maintain a single hidden state feature of current step and
update it through time steps. However, this could hardly establish long-term global context as the hidden state feature
is updated at every step. Neither are their models able to
synchronize appearance and motion features.
Appearance
Appearance Encoder
Question Encoder LSTM
FC + Softmax
Visual Memory
Question Memory
Multi-modal Fusion
Please see Fig 3 for details.
Please see Fig 4 for details.
Please see Fig 5 for details.
Motion Encoder
Video Encoder LSTMs
Temporal ATT.
Figure 2. Our proposed VideoQA pipeline with highlighted visual memory, question memory, and multimodal fusion layer.
Our model differs from existing work such that 1) we design a heterogeneous external memory module with attentional read and write operations that can efﬁciently combine
motion and appearance features together; 2) we allow interaction of visual and question features with memory contents
to construct global context-aware features; and 3) we design
a multimodal fusion layer which can effectively combine
visual and question features with softly assigned attentional
weights and also support multi-step reasoning.
3. Our Approach
In this section, we illustrate our network architecture for
VideoQA. We ﬁrst introduce the LSTM encoders for video
features and question embeddings. Then we elaborate on
the design of question memory and heterogeneous video
memory. Finally, we demonstrate how our designed multimodal fusion layer can attend to relevant visual and textual
hints and combine to form the ﬁnal answer representation.
3.1. Video and text representation
Video representation. Following previous work , we sample a ﬁxed number of frames (e.g., 35 for TGIF-
QA) for all videos in that dataset.
We then apply pretrained ResNet or VGG network on video frames
to extract video appearance features, and use C3D network to extract motion features.
We denote appearance
features as f a = [f a
1 , · · · , f a
Nv], and motion features as
f m = [f m
1 , · · · , f m
Nv], in which Nv is number of frames. The
dimensions of ResNet, VGG and C3D features are 2048,
4096 and 4096. We use two separate LSTM encoders to
process motion and appearance features individually ﬁrst,
and late fuse them in the designed memory module which
will be discussed in §3.2. In Fig. 2, we highlight the appearance encoder in blue and the motion encoder in orange.
The inputs fed into the two encoders are raw CNN motion features f m and appearance features f a, and the outputs are encoded motion and appearance features denoted
as om = [om
1 , · · · , om
Nv] and oa = [oa
1, · · · , oa
Question representation. Each VideoQA dataset has
a pre-deﬁned vocabulary which is composed of the top K
most frequent words in the training set. The vocabulary
size K of each dataset is shown in Table 1.
We represent each word as a ﬁxed-length learnable word embedding and initialize with the pre-trained GloVe 300-D 
feature. We denote the question embedding as a sequence
of word embeddings f q = [f q
1 , · · · , f q
Nq], in which Nq is
number of words in the question. We use another LSTM
encoder to process question embedding f q, as highlighted
in red in Fig. 2. The outputs are the encoded text features
1, · · · , oq
3.2. Heterogeneous video memory
Both motion and appearance visual features are crucial
for recognizing the objects and events associated with the
questions. Because these two types of features are heterogeneous, the straightforward combination cannot effectively
learn the video content. Thus, we propose a new heterogeneous memory to integrate motion and appearance visual
features, learn the joint attention, and enhance the spatialtemporal inference.
memory slots M
Figure 3. Our designed heterogeneous visual memory which contains memory slots M, read and write heads α, β, and three hidden
states hm, ha and hv.
Different to the standard external memory, our new heterogeneous memory accepts multiple inputs including encoded motion features om and appearance features oa, and
uses multiple write heads to determine the content to write.
Fig. 3 illustrates the memory structure, which is composed
of memory slots M = [m1, · · · , mS] and three hidden
states hm, ha and hv. We use two hidden states hm and ha
to determine motion and appearance contents which will be
written into memory, and use a separate global hidden state
hv to store and output global context-aware feature which
integrates motion and appearance information. We denote
the number of memory slots as S, and sigmoid function as
σ. For simplicity, we combine superscript m and a for identical operations on both motion and appearance features.
Write operation. Firstly we deﬁne the motion and appearance content cm/a
to write to memory at t-th time as
non-linear mappings from input and previous hidden state
Then we deﬁne αm/a
t,1 , . . . , αm/a
t,S } as the write
weights of cm/a
to each of S memory slot given by
a tanh(Wm/a
j=1 exp(am/a
for i = 1 . . . S
satisfying αm/a
sum to 1. Uniquely, we also need to integrate motion and appearance information and make a uni-
ﬁed write operation into current memory. Thus we estimate
the weights ϵt ∈R3 of motion content αm
t , appearance
content αa
t and current memory content Mt-1 given by
e tanh(Whehv
t-1 + (Wmecm
j=1 exp(et,j)
for i = 1 . . . 3
memory slots M
write head
Figure 4. Our re-designed question memory with memory slots
M, read and write heads α, β, and hidden states hq.
The memory M can be updated at each time step by
Mt = ϵt,1αm
t + ϵt,2αa
t + ϵt,3Mt-1
in which the write weights αm/a
for memory slots determine how much attention should different slots pay to current inputs, while the modality weights ϵt determine which
of motion or appearance feature (or none of them if noninformational) from current inputs should the memory pay
more attention to.
Through this designed memory-write
mechanism, we are able to integrate motion and appearance features to learn joint attention, and memorize different spatio-temporal patterns of this video in a synchronized
and global context.
Read operation. The next step is to perform an attentional read operation from the memory M to update memory hidden states. We deﬁne the weights of reading from
memory slots as βt={βt,1, . . . , βt,S} given by
b tanh(Whbhv
t-1 + (Wmbcm
j=1 exp(bt,j)
for i = 1 . . . S
The content rt read from memory is the weighted sum of
each memory slot rt = PS
i=1 βt,i·mi in which both motion
and appearance information has been integrated.
Hidden states update. The ﬁnal step is to update all
three hidden states ha, hm and hv
rh rt + bm/a
The global memory hidden state at all time steps hv
be taken as our ﬁnal video features. In next section, we
will discuss how to generate global question features. In
Section 3.4, we will introduce how to interact video and
question features for answer inference.
3.3. External question memory
The existing deep learning based VideoQA methods often misunderstand the complex questions because they understand the questions based on local word information. For
example, for question “Who drives by a hitchhiking man
who is smoking?”, traditional methods are easily trapped
by the local words and fail to generate the right attention to
the queried person (the driver or the smoker). To address
this challenging problem, we introduce the question memory to learn context-aware text knowledge. The question
memory can store the sequential text information, learn relevance between words, and understand the question from
the global point of view.
We redesign the memory networks to persistently store previous inputs and enable interaction between current inputs and memory contents. As shown in
Fig. 4, the memory module is composed of memory slots
M = [m1, m2, · · · , mS] and memory hidden state hq. Unlike the heterogeneous memory discussed previously, one
hidden state hq is necessary for the question memory. The
inputs to the question memory are the encoded texts oq.
Write operation. We ﬁrst deﬁne the content to write to
the memory at t-th time step as cq
t which is given by
t = σ(Wocoq
as a non-linear mapping from current input oq
t and previous hidden state hq
t-1 to content vector cq
we deﬁne the weights of writing to all memory slots
αt={αt,1...αt,i...αt,S} such that
a tanh(Wcacq
j=1 exp(at,j)
for i = 1 . . . S
satisfying αt sum to 1. Then each memory slot mi is updated by mi = αt,ict + (1 −αt,i)mi for i = 1 . . . S.
Read operation.
The next step is to perform attentional read operation from the memory slots M. We deﬁne
the normalized attention weights βt={βt,1...βt,i...βt,S} of
reading from memory slots such that
b tanh(Wcbcq
j=1 exp(bt,j)
for i = 1 . . . S
The content rt read from memory is the weighted sum of
each memory slot content rt = PS
i=1 βt,i · mi.
Hidden state update. The ﬁnal step of t-th iteration is
to update the hidden state hq
t = σ(Wohoq
t + Wrhrt + Whhhq
We take the memory hidden state of all time steps hq
as the global context-aware question features which will be
used for inference in Section 3.4.
Visual features
Question features
Figure 5. Multimodal fusion layer. An LSTM controller with hidden state st attends to relevant visual and question features, and
combines them to update current state.
3.4. Multimodal fusion and reasoning
In this section, we design a dedicated multimodal fusion
and reasoning module for VideoQA, which can attend to
multiple modalities such as visual and textual features, then
make multi-step reasoning with reﬁned attention for each
modality. Our design is inspired by Hori et al. which
proposed to generate video captions by combining different
types of features such as video and audio.
Fig. 5 demonstrates our designed module. The hidden
states of video memory hv
1:Nv and question memory hq
are taken as the input features. The core part is an LSTM
controller with its hidden state denoted as s. During each iteration of reasoning, the controller attends to different parts
of the video features and question features with temporal
attention mechanism, and combines the attended features
with learned modality weights φt, and ﬁnally updates its
own hidden state st.
Temporal attention. At t-th iteration of reasoning, we
ﬁrst generate two content vectors cv
t by attending to
different parts of visual features hv
t and question features
t. The temporal attention weights γv
1:Nv and γq
computed by
st-1 + Vv/q
hv/q + bv/q
j=1 exp(gv/q
for i = 1 . . . Nv/q
and shown by the dashed lines in Fig. 5. Then the attended
content vectors cv/q
and the transformed dv/q
= ReLU(Wv/q
Multimodal fusion. The multimodal attention weights
t} are obtained by interacting the previous hid-
den state st-1 with the transformed content vectors dv/q
p tanh(Wv/q
st-1 + Vv/q
t ) + exp(pq
The fused knowledge xt is computed by the sum of dv/q
with multimodal attention weights φv/q such that
Multi-step reasoning. To complete t-th iteration of reasoning, the hidden state st of LSTM controller is updated
by st = LSTM(xt, st-1). This reasoning process is iterated
for L times and we set L = 3. The optimal choice for L
is discussed in §4.4. The hidden state sL at last iteration is
the ﬁnal representation of the distilled knowledge. We also
apply the standard temporal attention on encoded video features om and oa as in ST-VQA , and concatenate with
sL to form the ﬁnal answer representation sA.
3.5. Answer generation
We now discuss how to generate the correct answers
from answer features sA.
Multiple-choice task is to choose one correct answer out
of K candidates. We concatenate the question with each
candidate answer individually, and forward each QA pair to
obtain the ﬁnal answer feature {sA}K
i=1, on top of which we
use a linear layer to provide scores for all candidate answers
s = {sp, sn
1, · · · , sn
K−1} in which sp is the correct answer’s
score and the rest are K −1 incorrect ones. During training,
we minimize the summed pairwise hinge loss between
the positive answer and each negative answer deﬁned as
max(0, m −(sp −sn
and train the entire network end-to-end. The intuition of
Lmc is that the score of the true QA pair should be larger
than any negative pair by a margin m. During testing, we
choose the answer of highest score as the prediction. In
Table 1, we list the number of choices K for each dataset.
Open-ended task is to choose one correct word as the
answer from a pre-deﬁned answer set of size C. We apply a linear layer and softmax function upon sA to provide probabilities for all candidate answers such that p =
softmax(W⊤
p sL + bp) in which p ∈RC. The training
error is measured by cross-entropy loss such that
1{y = c} log(pc)
in which y is the ground truth label. By minimizing Lopen
we can train the entire network end-to-end. In testing phase,
the predicted answer is provided by c∗= arg maxc(p).
3.6. Implementation details
We implemented our neural networks in PyTorch 
and updated network parameters by Adam solver with
batch size 32 and ﬁxed learning rate 10−3. The video and
question encoders are two-layer LSTMs with hidden size
512. The dimension D of the memory slot and hidden state
is 256. We set the video and question memory sizes to 30
and 20 respectively, which are roughly equal to the maximum length of the videos and questions. We have released
our code for boosting further research1.
4. Experiments and Discussions
We evaluate our model on four benchmark VideoQA
datasets and compare with the state-of-the-art techniques.
4.1. Dataset descriptions
In Table 1, we show the statistics of the four VideoQA
benchmark datasets and the experimental settings from their
original paper including feature types, vocabulary size,
sampled video length, number of videos, size of QA splits,
answer set size for open-ended questions, and number of
options for multiple-choice questions.
TGIF-QA contains 165K QA pairs associated with
72K GIF images based on the TGIF dataset . TGIF-QA
includes four types of questions: 1) counting the number of
occurrences of a given action; 2) recognizing a repeated action given its count; 3) identifying the action happened before or after a given action, and 4) answering image-based
questions. MSVD-QA and MSRVTT-QA were proposed
by Xu et al. based on MSVD and MSVTT 
video sets respectively. Five different question types exist in both datasets, including what, who, how, when and
where. The questions are open-ended with pre-deﬁned answer sets of size 1000. YouTube2Text-QA collected
three types of questions (what, who and other) from the
YouTube2Text video description corpus.
source is also MSVD . Both open-ended and multiplechoice tasks exist.
4.2. Result analysis
TGIF-QA result. Table 2 summarizes the experiment results of all four tasks (Count,Action,Trans.,FrameQA) on
TGIF-QA dataset. We compare with state-of-the-art methods ST-VQA and Co-Mem and list the reported accuracy in the original paper. For repetition counting task
(column 1), our method achieves the lowest average L2 loss
compared with ST-VQA and Co-Mem (4.02 v.s. 4.28 and
4.10). For Action and Trans. tasks (column 2,3), our method
signiﬁcantly outperforms the other two by increasing accuracy from prior best 0.682 and 0.743 to 0.739 and 0.778 respectively. For FrameQA task (column 4), our method also
1 
Vocab size
Question num
TGIF-QA 
ResNet+C3D
MSVD-QA 
MSRVTT-QA 
Youtube2Text-QA 
ResNet+C3D
Table 1. Dataset statistics of four VideoQA benchmark datasets. The columns from left to right indicate dataset name, feature types,
vocabulary size, sampled video length, number of videos, size of QA splits, answer set size (Ans size) for open-ended questions, and
number of options for multiple-choice questions (MC num).
Question type
Count (loss)
ST-VQA 
Co-Mem 
Table 2. Experiment results on TGIF-QA dataset.
achieves the best accuracy of 0.538 among all three methods, outperforming the Co-Mem by 4.7%.
Question type and # instances
ST-VQA 
Co-Mem 
Table 3. Experiment results on MSVD-QA dataset.
MSVD-QA result. Table 3 summarizes the experiment results on MSVD-QA. It’s worth mentioning that there is high
class imbalance in both training and test sets, as more than
95% questions are what and who while less than 5% are
how, when and where. We list the numbers of their test instances in the table for reference. We compare our model
with the ST-VQA , Co-Mem and current state-ofthe-art AMU on MSVD-QA. We show the reported accuracy of AMU in , while we accommodate the source
code of ST-VQA and implement Co-Mem from scratch to
obtain their numbers. Our method outperforms all the others on both what and who tasks, and achieves best overall accuracy of 0.337 which is 5.3% better than prior best
(0.320). Even though our method slightly underperforms
on the How, When and Where questions, the difference are
minimal (40,2 and 3) regarding the absolute number of instances due to class imbalance.
Question type
ST-VQA 
Co-Mem 
Table 4. Experiment results on MSRVTT-QA dataset.
MSRVTT-QA result. In Table 4, we compare our model
with the ST-VQA , Co-Mem and AMU on
MSRVTT-QA. Similar to the trend on MSVD-QA, our
method outperforms the other models on three major question types (what, who, how), and achieves the best overall
accuracy of 0.330.
Question type and # instances
Avg. Per-class
Multi-choice
r-ANL 
Open-ended
r-ANL 
Table 5. Experiment results on YouTube2Text-QA dataset.
YouTube2Text-QA result.
In Table 5, we compare
our methods with the state-of-the-art r-ANL on
YouTube2Text-QA dataset. It’s worth mentioning that r-
ANL utilized frame-level attributes as additional supervision to augment learning while our method does not. For
multiple-choice questions, our method signiﬁcantly outperforms r-ANL on all three types of questions (What, Who,
Other) and achieves a better overall accuracy (0.808 v.s.
0.520). For open-ended questions, our method outperforms
r-ANL on what queries and slightly underperforms on the
other two types. Still, our method achieves a better overall accuracy (0.301 v.s. 0.262). We also report the perclass accuracy to make direct comparison with , and
our method is better than r-ANL in this evaluation method.
4.3. Attention visualization and analysis
In Figs. 1 and 6, we demonstrate three QA examples with
highlighted key frames and words which are recognized by
our designed attention mechanism. For visualization purpose, we extract the visual and textual attention weights
from our model (Eq. 12) and plot them with bar charts.
Darker color stands for larger weights, showing that the corresponding frame or word is relatively important.
Fig. 1 shows the effectiveness of understanding complex
question with our proposed question memory. This question
intends to query the female driver though it uses another
relative clause to describe the man. Our model focuses on
the correct frames in which the female driver is driving in
the car and also focuses on the words which describe the
woman but not the man. In contrast, ST-VQA fails to
A: Our model: onion Existing model: potato
A: Our model: exercise Existing model: barbell
Q: What does a man cut into thin slivers with a cleaver? (answer: onion)
Q: What does a woman demonstrate while a man narrates? (answer: exercise)
Figure 6. Visualization of multimodal attentions learned by our
model on two QA exemplars. Highly attended frames and words
are highlighted.
identify the queried person as its simple temporal attention
is not able to gather semantic information in the context of
a long sentence.
In Fig. 6(a), we provide an example showing that our
video memory is learning the most salient frames for the
given question while ignoring others. In the ﬁrst half of
the video, it’s difﬁcult to know whether the vegetable is
onion or potato, due to the lighting condition and camera
view. However, our model smartly pays attention to frames
in which the onion is cut into pieces by combining both
question words “a man cut” and the motion features, and
thus determines the correct object type by onion pieces (but
not potato slices) from appearance hint.
Fig. 6(b) shows a typical example illustrating that jointly
learning motion and appearance features as our heterogeneous memory design is superior to attending to them separately such as Co-Mem . In this video, a woman is doing
yoga in a gym, and there is a barbell rack at the background.
Our method successfully associated the woman with the action of exercising, while Co-Mem incorrectly pays attention to the barbell and fails to utilize motion information
as they separately learn motion and appearance attentions.
4.4. Ablation study
We perform two ablation studies to investigate the effectiveness of each component of our model. We ﬁrst study
how many iterations of reasoning is sufﬁcient in the designed multimodal fusion layer. After that, we make a comparison of variants of our model to evaluate the contribution
of each component.
Reasoning iterations. To understand how many iterations
of reasoning are sufﬁcient for our VideoQA tasks, we test
different numbers and report their accuracy. The validation accuracy on MSVD-QA dataset increases from 0.298
to 0.306 when the number of reasoning iteration L increases
from 1 to 3, and seems to saturate at L = 5 (0.307), while
drops to 0.304 at L = 7. To balance performance and speed,
we choose L = 3 for our experiments throughout the paper.
Table 6. Ablation study of different architectures.
Different architectures. To understand the effectiveness of
our designed memory module, we compare several variants
of our models and evaluate on MSVD-QA and MSRVTT-
QA, as shown in Table 6. Early Fusion (EF) is indeed ST-
VQA which concatenates raw video appearance and
motion features at an early stage, before feeding into the
LSTM encoder. Late Fusion (LF) model uses two separate
LSTM encoders to encode video appearance and motion
features and then fuses them by concatenation. Episodic
Memory (E-M) is a simpliﬁed memory network embodiment and we use it as the visual memory to compare
against our design. Visual Memory (V-M) model uses our
designed heterogeneous visual memory (M v in Fig. 2) to
fuse appearance and motion features and generate global
context-aware video features.
Question Memory (Q-M)
model uses our redesigned question memory only (M q in
Fig. 2) to better capture complex question semantics. Finally, Visual and Question Memory (V+Q M) is our full
model which has both visual and question memory.
In Table 6, we observe consistent trend that using memory networks (e.g., E-M,V-M,V+Q) to align and integrate
multimodal visual features is generally better than simply
concatenating them (e.g., EF,LF). In addition, our designed
visual memory (V-M) has shown its strengths over episodic
memory (E-M) and other memory types (Table 3-5). Furthermore, using both visual memory and question memory
(V+Q) increases the performance by 2-7%.
5. Conclusion
In this paper, we proposed a novel end-to-end deep learning framework for VideoQA, with designing new external
memory modules to better capture global contexts in video
frames, complex semantics in questions, and their interactions. A new multimodal fusion layer was designed to fuse
visual and textual modalities and perform multi-step reasoning with gradually reﬁned attention. In empirical studies,
we visualized the attentions generated by our model to verify its capability of understanding complex questions and
attending to salient visual hints. Experimental results on
four benchmark VideoQA datasets show that our new approach consistently outperforms state-of-the-art methods.