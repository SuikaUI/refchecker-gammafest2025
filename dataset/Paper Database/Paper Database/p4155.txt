Proceedings of NAACL-HLT 2016, pages 681–691,
San Diego, California, June 12-17, 2016. c⃝2016 Association for Computational Linguistics
Visualizing and Understanding Neural Models in NLP
Jiwei Li1, Xinlei Chen2, Eduard Hovy2 and Dan Jurafsky1
1Computer Science Department, Stanford University, Stanford, CA 94305, USA
2Language Technology Institute, Carnegie Mellon University, Pittsburgh, PA 15213, USA
{jiweil,jurafsky}@stanford.edu
{xinleic,ehovy}@andrew.cmu.edu
While neural networks have been successfully
applied to many NLP tasks the resulting vectorbased models are very difﬁcult to interpret.
For example it’s not clear how they achieve
compositionality, building sentence meaning
from the meanings of words and phrases. In
this paper we describe strategies for visualizing compositionality in neural models for
NLP, inspired by similar work in computer
vision. We ﬁrst plot unit values to visualize
compositionality of negation, intensiﬁcation,
and concessive clauses, allowing us to see wellknown markedness asymmetries in negation.
We then introduce methods for visualizing a
unit’s salience, the amount that it contributes
to the ﬁnal composed meaning from ﬁrst-order
derivatives. Our general-purpose methods may
have wide applications for understanding compositionality and other semantic properties of
deep networks.
Introduction
Neural models match or outperform the performance
of other state-of-the-art systems on a variety of NLP
tasks. Yet unlike traditional feature-based classiﬁers
that assign and optimize weights to varieties of human interpretable features (parts-of-speech, named
entities, word shapes, syntactic parse features etc) the
behavior of deep learning models is much less easily
interpreted. Deep learning models mainly operate
on word embeddings (low-dimensional, continuous,
real-valued vectors) through multi-layer neural architectures, each layer of which is characterized as
an array of hidden neuron units. It is unclear how
deep learning models deal with composition, implementing functions like negation or intensiﬁcation, or
combining meaning from different parts of the sentence, ﬁltering away the informational chaff from the
wheat, to build sentence meaning.
In this paper, we explore multiple strategies to interpret meaning composition in neural models. We
employ traditional methods like representation plotting, and introduce simple strategies for measuring how much a neural unit contributes to meaning
composition, its ‘salience’ or importance using ﬁrst
derivatives.
Visualization techniques/models represented in
this work shed important light on how neural models work: For example, we illustrate that LSTM’s
success is due to its ability in maintaining a much
sharper focus on the important key words than other
models; Composition in multiple clauses works competitively, and that the models are able to capture negative asymmetry, an important property of semantic
compositionally in natural language understanding;
there is sharp dimensional locality, with certain dimensions marking negation and quantiﬁcation in a
manner that was surprisingly localist. Though our
attempts only touch superﬁcial points in neural models, and each method has its pros and cons, together
they may offer some insights into the behaviors of
neural models in language based tasks, marking one
initial step toward understanding how they achieve
meaning composition in natural language processing.
The next section describes some visualization models in vision and NLP that have inspired this work.
We describe datasets and the adopted neural models in Section 3. Different visualization strategies
and correspondent analytical results are presented
separately in Section 4,5,6, followed by a brief conclusion.
A Brief Review of Neural Visualization
Similarity is commonly visualized graphically, generally by projecting the embedding space into two
dimensions and observing that similar words tend
to be clustered together , Ji and
Eisenstein , Faruqui and Dyer ). attempts to interpret recurrent neural
models from a statical point of view and does deeply
touch compositionally of meanings. Other relevant
attempts include ,
multi-layer neural networks in which the original matrix of image pixels is convolved and pooled as it is
passed on to hidden layers. ConvNet visualizing techniques consist mainly in mapping the different layers
of the network and HOG ) back to
the initial image input, thus capturing the humaninterpretable information they represent in the input,
and how units in these layers contribute to any ﬁnal
decisions .
Such methods include:
(1) Inversion: Inverting the representations by
training an additional model to project outputs from
different neural levels back to the initial input images
 . The intuition behind reconstruction is that the pixels that are reconstructable
from the current representations are the content of the
representation. The inverting algorithms allow the
current representation to align with corresponding
parts of the original images.
(2) Back-propagation and Deconvolutional Networks
 : Errors are back propagated from output layers to each intermediate layer
and ﬁnally to the original image inputs. Deconvolutional Networks work in a similar way by projecting
outputs back to initial inputs layer by layer, each layer
associated with one supervised model for projecting
upper ones to lower ones These strategies make it
possible to spot active regions or ones that contribute
the most to the ﬁnal classiﬁcation decision.
(3) Generation: This group of work generates images in a speciﬁc class from a sketch guided by already trained neural models . Models begin with an image
whose pixels are randomly initialized and mutated
at each step. The speciﬁc layers that are activated
at different stages of image construction can help in
interpretation.
While the above strategies inspire the work we
present in this paper, there are fundamental differences between vision and NLP. In NLP words function as basic units, and hence (word) vectors rather
than single pixels are the basic units. Sequences of
words (e.g., phrases and sentences) are also presented
in a more structured way than arrangements of pixels.
In parallel to our research, independent researches
 have been conducted to explore similar direction from an error-analysis point of
view, by analyzing predictions and errors from a recurrent neural models. Other distantly relevant works
include: Murphy et al. used
an manual task to quantify the interpretability of semantic dimensions by presetting human users with a
list of words and ask them to choose the one that does
not belong to the list. Faruqui et al. . Similar
strategy is adopted in by extracting top-ranked words in each vector dimension.
Datasets and Neural Models
We explored two datasets on which neural models
are trained, one of which is of relatively small scale
and the other of large scale.
Stanford Sentiment Treebank
Stanford Sentiment Treebank is a benchmark dataset
widely used for neural model evaluations.
dataset contains gold-standard sentiment labels for
every parse tree constituent, from sentences to
phrases to individual words, for 215,154 phrases in
11,855 sentences. The task is to perform both ﬁnegrained (very positive, positive, neutral, negative and
very negative) and coarse-grained (positive vs negative) classiﬁcation at both the phrase and sentence
level. For more details about the dataset, please refer
to Socher et al. .
While many studies on this dataset use recursive
parse-tree models, in this work we employ only standard sequence models (RNNs and LSTMs) since
these are the most widely used current neural models,
and sequential visualization is more straightforward.
We therefore ﬁrst transform each parse tree node to
a sequence of tokens. The sequence is ﬁrst mapped
to a phrase/sentence representation and fed into a
softmax classiﬁer. Phrase/sentence representations
are built with the following three models: Standard
Recurrent Sequence with TANH activation functions,
LSTMs and Bidirectional LSTMs. For details about
the three models, please refer to Appendix.
AdaGrad with mini-batch was used for
training, with parameters (L2 penalty, learning rate,
mini batch size) tuned on the development set. The
number of iterations is treated as a variable to tune
and parameters are harvested based on the best performance on the dev set. The number of dimensions
for the word and hidden layer are set to 60 with 0.1
dropout rate. Parameters are tuned on the dev set.
The standard recurrent model achieves 0.429 (ﬁne
grained) and 0.850 (coarse grained) accuracy at the
sentence level; LSTM achieves 0.469 and 0.870, and
Bidirectional LSTM 0.488 and 0.878, respectively.
Sequence-to-Sequence Models
SEQ2SEQ are neural models aiming at generating
a sequence of output texts given inputs. Theoretically, SEQ2SEQ models can be adapted to NLP tasks
that can be formalized as predicting outputs given inputs and serve for different purposes due to different
inputs and outputs, e.g., machine translation where
inputs correspond to source sentences and outputs to
target sentences ; conversational response generation if inputs
correspond to messages and outputs correspond to
responses .
SEQ2SEQ need to be trained on massive amount of
data for implicitly semantic and syntactic relations
between pairs to be learned.
SEQ2SEQ models map an input sequence to a vector representation using LSTM models and then sequentially predicts tokens based on the pre-obtained
representation. The model deﬁnes a distribution over
outputs (Y) and sequentially predicts tokens given
inputs (X) using a softmax function.
p(yt|x1, x2, ..., xt, y1, y2, ..., yt−1)
exp(f(ht−1, eyt))
y′ exp(f(ht−1, ey′))
where f(ht−1, eyt) denotes the activation function between ht−1 and eyt, where ht−1 is the representation
output from the LSTM at time t −1. For each time
step in word prediction, SEQ2SEQ models combine
the current token with previously built embeddings
for next-step word prediction.
For easy visualization purposes, we turn to the
most straightforward task—autoencoder— where inputs and outputs are identical. The goal of an autoencoder is to reconstruct inputs from the pre-obtained
representation. We would like to see how individual
input tokens affect the overall sentence representation and each of the tokens to predict in outputs. We
trained the auto-encoder on a subset of WMT’14 corpus containing 4 million english sentences with an
average length of 22.5 words. We followed training
protocols described in .
Representation Plotting
We begin with simple plots of representations to shed
light on local compositions using Stanford Sentiment
Local Composition
Figure 1 shows a 60d heatmap vector for the representation of selected
words/phrases/sentences, with an emphasis on extent
modiﬁcations (adverbial and adjectival) and negation.
Embeddings for phrases or sentences are attained by
composing word representations from the pretrained
The intensiﬁcation part of Figure 1 shows suggestive patterns where values for a few dimensions are
strengthened by modiﬁers like “a lot” (the red bar
in the ﬁrst example) “so much” (the red bar in the
second example), and “incredibly”. Though the patterns for negations are not as clear, there is still a
consistent reversal for some dimensions, visible as a
shift between blue and red for dimensions boxed on
We then visualize words and phrases using t-sne
 in Figure 2, de-
Intensiﬁcation
Figure 1: Visualizing intensiﬁcation and negation. Each
vertical bar shows the value of one dimension in the ﬁnal
sentence/phrase representation after compositions. Embeddings for phrases or sentences are attained by composing word representations from the pretrained model.
liberately adding in some random words for comparative purposes. As can be seen, neural models
nicely learn the properties of local compositionally,
clustering negation+positive words (‘not nice’, ’not
good’) together with negative words. Note also the
asymmetry of negation: “not bad” is clustered more
with the negative than the positive words (as shown
both in Figure 1 and 2). This asymmetry has been
widely discussed in linguistics, for example as arising from markedness, since ‘good’ is the unmarked
direction of the scale . This suggests that although the model
does seem to focus on certain units for negation in
Figure 1, the neural model is not just learning to apply a ﬁxed transform for ‘not’ but is able to capture
the subtle differences in the composition of different
Concessive Sentences
In concessive sentences,
two clauses have opposite polarities, usually related
by a contrary-to-expectation implicature. We plot
evolving representations over time for two concessives in Figure 3. The plots suggest:
1. For tasks like sentiment analysis whose goal is
to predict a speciﬁc semantic dimension (as opposed
to general tasks like language model word prediction), too large a dimensionality leads to many dimensions non-functional (with values close to 0), causing
two sentences of opposite sentiment to differ only in a
few dimensions. This may explain why more dimensions don’t necessarily lead to better performance on
such tasks , optimal performance is achieved when word
dimensionality is set to between 25 and 35).
2. Both sentences contain two clauses connected
by the conjunction “though”. Such two-clause sentences might either work collaboratively— models
would remember the word “though” and make the
second clause share the same sentiment orientation
as ﬁrst—or competitively, with the stronger one dominating. The region within dotted line in Figure 3(a)
favors the second assumption: the difference between
the two sentences is diluted when the ﬁnal words (“interesting” and “boring”) appear.
Clause Composition
In Figure 4 we explore this
clause composition in more detail. Representations
move closer to the negative sentiment region by
adding negative clauses like “although it had bad
acting” or “but it is too long” to the end of a simply
positive “I like the movie”. By contrast, adding a
concessive clause to a negative clause does not move
toward the positive; “I hate X but ...” is still very
negative, not that different than “I hate X”. This difference again suggests the model is able to capture
negative asymmetry .
First-Derivative Saliency
In this section, we describe another strategy which
is is inspired by the back-propagation strategy in
vision . It
measures how much each input unit contributes to
Figure 2: t-SNE Visualization on latent representations for modiﬁcations and negations.
the ﬁnal decision, which can be approximated by ﬁrst
derivatives.
More formally, for a classiﬁcation model, an input
E is associated with a gold-standard class label c.
(Depending on the NLP task, an input could be the
embedding for a word or a sequence of words, while
labels could be POS tags, sentiment labels, the next
word index to predict etc.) Given embeddings E for
input words with the associated gold class label c, the
trained model associates the pair (E, c) with a score
Sc(E). The goal is to decide which units of E make
the most signiﬁcant contribution to Sc(e), and thus
the decision, the choice of class label c.
In the case of deep neural models, the class score
Sc(e) is a highly non-linear function. We approximate Sc(e) with a linear function of e by computing
the ﬁrst-order Taylor expansion
Sc(e) ≈w(e)T e + b
where w(e) is the derivative of Sc with respect to the
embedding e.
w(e) = ∂(Sc)
The magnitude (absolute value) of the derivative indicates the sensitiveness of the ﬁnal decision to the
change in one particular dimension, telling us how
much one speciﬁc dimension of the word embedding
contributes to the ﬁnal decision. The saliency score
is given by
S(e) = |w(e)|
Results on Stanford Sentiment Treebank
We ﬁrst illustrate results on Stanford Treebank. We
plot in Figures 5, 6 and 7 the saliency scores (the
absolute value of the derivative of the loss function
with respect to each dimension of all word inputs) for
three sentences, applying the trained model to each
sentence. Each row corresponds to saliency score
for the correspondent word representation with each
grid representing each dimension. The examples are
based on the clear sentiment indicator “hate” that
lends them all negative sentiment.
“I hate the movie”
All three models assign high
saliency to “hate” and dampen the inﬂuence of other
tokens. LSTM offers a clearer focus on “hate” than
the standard recurrent model, but the bi-directional
LSTM shows the clearest focus, attaching almost
zero emphasis on words other than “hate”. This is
presumably due to the gates structures in LSTMs and
Bi-LSTMs that controls information ﬂow, making
these architectures better at ﬁltering out less relevant
information.
“I hate the movie that I saw last night”
models assign the correct sentiment. The simple
recurrent models again do poorly at ﬁltering out irrelevant information, assigning too much salience to
words unrelated to sentiment. However none of the
models suffer from the gradient vanishing problems
despite this sentence being longer; the salience of
“hate” still stands out after 7-8 following convolutional operations.
Figure 3: Representations over time from LSTMs. Each
column corresponds to outputs from LSTM at each timestep (representations obtained after combining current
word embedding with previous build embeddings). Each
grid from the column corresponds to each dimension of
current time-step representation. The last rows correspond
to absolute differences for each time step between two
sequences.
“I hate the movie though the plot is interesting”
The simple recurrent model emphasizes only the second clause “the plot is interesting”, assigning no
credit to the ﬁrst clause “I hate the movie”. This
might seem to be caused by a vanishing gradient, yet
the model correctly classiﬁes the sentence as very
negative, suggesting that it is successfully incorporating information from the ﬁrst negative clause. We
separately tested the individual clause “though the
plot is interesting”. The standard recurrent model
conﬁdently labels it as positive. Thus despite the
lower saliency scores for words in the ﬁrst clause,
the simple recurrent system manages to rely on that
clause and downplay the information from the latter
positive clause—despite the higher saliency scores
of the later words. This illustrates a limitation of
saliency visualization. ﬁrst-order derivatives don’t
capture all the information we would like to visualize,
perhaps because they are only a rough approximate
to individual contributions and might not sufﬁce to
deal with highly non-linear cases. By contrast, the
LSTM emphasizes the ﬁrst clause, sharply dampening the inﬂuence from the second clause, while the
Bi-LSTM focuses on both “hate the movie” and “plot
is interesting”.
Results on Sequence-to-Sequence
Autoencoder
Figure 9 represents saliency heatmap for autoencoder in terms of predicting correspondent token
at each time step. We compute ﬁrst-derivatives for
each preceding word through back-propagation as decoding goes on. Each grid corresponds to magnitude
of average saliency value for each 1000-dimensional
word vector. The heatmaps give clear overview about
the behavior of neural models during decoding. Observations can be summarized as follows:
1. For each time step of word prediction, SEQ2SEQ
models manage to link word to predict back to correspondent region at the inputs (automatically learn
alignments), e.g., input region centering around token “hate” exerts more impact when token “hate” is
to be predicted, similar cases with tokens “movie”,
“plot” and “boring”.
2. Neural decoding combines the previously built
representation with the word predicted at the current step. As decoding proceeds, the inﬂuence of
the initial input on decoding (i.e., tokens in source
sentences) gradually diminishes as more previouslypredicted words are encoded in the vector representations. Meanwhile, the inﬂuence of language model
gradually dominates: when word “boring” is to be
predicted, models attach more weight to earlier predicted tokens “plot” and “is” but less to correspondent regions in the inputs, i.e., the word “boring” in
Average and Variance
For settings where word embeddings are treated as
parameters to optimize from scratch (as opposed to
using pre-trained embeddings), we propose a second,
Figure 4: t-SNE Visualization for clause composition.
Figure 5: Saliency heatmap for for “I hate the movie .” Each row corresponds to saliency scores for the correspondent
word representation with each grid representing each dimension.
Figure 6: Saliency heatmap for “I hate the movie I saw last night .” .
surprisingly easy and direct way to visualize important indicators. We ﬁrst compute the average of the
word embeddings for all the words within the sentences. The measure of salience or inﬂuence for a
word is its deviation from this average. The idea is
that during training, models would learn to render
indicators different from non-indicator words, enabling them to stand out even after many layers of
computation.
Figure 8 shows a map of variance; each grid corresponds to the value of ||ei,j −
i′∈NS ei′j||2
where ei,j denotes the value for j th dimension of
word i and N denotes the number of token within the
sentences.
Figure 7: Saliency heatmap for “I hate the movie though the plot is interesting .” .
Figure 8: Variance visualization.
As the ﬁgure shows, the variance-based salience
measure also does a good job of emphasizing the relevant sentiment words. The model does have shortcomings: (1) it can only be used in to scenarios where
word embeddings are parameters to learn (2) it’s clear
how well the model is able to visualize local compositionality.
Conclusion
In this paper, we offer several methods to help visualize and interpret neural models, to understand
how neural models are able to compose meanings,
demonstrating asymmetries of negation and explain
some aspects of the strong performance of LSTMs at
these tasks.
Though our attempts only touch superﬁcial points
in neural models, and each method has its pros and
cons, together they may offer some insights into the
behaviors of neural models in language based tasks,
marking one initial step toward understanding how
they achieve meaning composition in natural language processing. Our future work includes using
results of the visualization be used to perform error
analysis, and understanding strengths limitations of
Figure 9: Saliency heatmap for SEQ2SEQ auto-encoder in
terms of predicting correspondent token at each time step.
different neural models.
Acknowledgement
The authors want to thank Sam Bowman, Percy
Liang, Will Monroe, Sida Wang, Chris Manning and
other members of the Stanford NLP group, as well
as anonymous reviewers for their helpful advice on
various aspects of this work. This work partially supported by NSF Award IIS-1514268. Jiwei Li is supported by Facebook fellowship, which we gratefully
acknowledge. Any opinions, ﬁndings, and conclusions or recommendations expressed in this material
are those of the authors and do not necessarily reﬂect
the views of NSF or Facebook.