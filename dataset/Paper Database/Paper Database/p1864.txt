Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 2383–2392,
Austin, Texas, November 1-5, 2016. c⃝2016 Association for Computational Linguistics
SQuAD: 100,000+ Questions for Machine Comprehension of Text
Pranav Rajpurkar and Jian Zhang and Konstantin Lopyrev and Percy Liang
{pranavsr,zjian,klopyrev,pliang}@cs.stanford.edu
Computer Science Department
Stanford University
We present the Stanford Question Answering Dataset (SQuAD), a new reading comprehension dataset consisting of 100,000+ questions posed by crowdworkers on a set of
Wikipedia articles, where the answer to each
question is a segment of text from the corresponding reading passage. We analyze the
dataset to understand the types of reasoning required to answer the questions, leaning heavily on dependency and constituency
We build a strong logistic regression
model, which achieves an F1 score of 51.0%,
a signiﬁcant improvement over a simple baseline (20%).
However, human performance
(86.8%) is much higher, indicating that the
dataset presents a good challenge problem for
future research. The dataset is freely available
at 
Introduction
Reading Comprehension (RC), or the ability to read
text and then answer questions about it, is a challenging task for machines, requiring both understanding of natural language and knowledge about
the world. Consider the question “what causes precipitation to fall?” posed on the passage in Figure 1.
In order to answer the question, one might ﬁrst locate the relevant part of the passage “precipitation ...
falls under gravity”, then reason that “under” refers
to a cause (not location), and thus determine the correct answer: “gravity”.
How can we get a machine to make progress
on the challenging task of reading comprehension?
Historically, large, realistic datasets have played
In meteorology, precipitation is any product
of the condensation of atmospheric water vapor
that falls under gravity. The main forms of precipitation include drizzle, rain, sleet, snow, graupel and hail...
Precipitation forms as smaller
droplets coalesce via collision with other rain
drops or ice crystals within a cloud. Short, intense periods of rain in scattered locations are
called “showers”.
What causes precipitation to fall?
What is another main form of precipitation besides drizzle, rain, snow, sleet and hail?
Where do water droplets collide with ice crystals
to form precipitation?
within a cloud
Figure 1: Question-answer pairs for a sample passage in the
SQuAD dataset. Each of the answers is a segment of text from
the passage.
a critical role for driving ﬁelds forward—famous
examples include ImageNet for object recognition
 and the Penn Treebank for
syntactic parsing .
datasets for RC have one of two shortcomings: (i)
those that are high in quality are too small for training
modern data-intensive models, while (ii) those that
are large are
semi-synthetic and do not share the same characteristics as explicit reading comprehension questions.
To address the need for a large and high-quality
reading comprehension dataset, we present the Stan-
ford Question Answering Dataset v1.0 (SQuAD),
freely available at consisting of questions posed by crowdworkers on a
set of Wikipedia articles, where the answer to every question is a segment of text, or span, from the
corresponding reading passage.
SQuAD contains
107,785 question-answer pairs on 536 articles, and
is almost two orders of magnitude larger than previous manually labeled RC datasets such as MCTest
 .
In contrast to prior datasets, SQuAD does not
provide a list of answer choices for each question.
Rather, systems must select the answer from all possible spans in the passage, thus needing to cope with
a fairly large number of candidates. While questions with span-based answers are more constrained
than the more interpretative questions found in more
advanced standardized tests, we still ﬁnd a rich diversity of questions and answer types in SQuAD.
We develop automatic techniques based on distances
in dependency trees to quantify this diversity and
stratify the questions by difﬁculty. The span constraint also comes with the important beneﬁt that
span-based answers are easier to evaluate than freeform answers.
To assess the difﬁculty of SQuAD, we implemented a logistic regression model with a range of
features. We ﬁnd that lexicalized and dependency
tree path features are important to the performance
of the model. We also ﬁnd that the model performance worsens with increasing complexity of (i) answer types and (ii) syntactic divergence between the
question and the sentence containing the answer; interestingly, there is no such degradation for humans.
Our best model achieves an F1 score of 51.0%,1
which is much better than the sliding window baseline (20%). Over the last four months , we have witnessed signiﬁcant improvements
from more sophisticated neural network-based models. For example, Wang and Jiang obtained
70.3% F1 on SQuAD v1.1 (results on v1.0 are similar).
These results are still well behind human
performance, which is 86.8% F1 based on interannotator agreement.
This suggests that there is
plenty of room for advancement in modeling and
learning on the SQuAD dataset.
1All experimental results in this paper are on SQuAD v1.0.
Formulation
crowdsourced
in passage
 
crowdsourced
RC, multiple
 
standardized
computation
 
standardized
reasoning,
 
query logs
IR, sentence
 
query logs +
human editor
IR, free form
 
single entity
 
single word
Table 1: A survey of several reading comprehension and question answering datasets. SQuAD is much larger than all datasets
except the semi-synthetic cloze-style datasets, and it is similar
to TREC-QA in the open-endedness of the answers.
Existing Datasets
We begin with a survey of existing reading comprehension and question answering (QA) datasets,
highlighting a variety of task formulation and creation strategies (see Table 1 for an overview).
Reading comprehension.
A data-driven approach
to reading comprehension goes back to Hirschman
et al. , who curated a dataset of 600 real 3rd–
6th grade reading comprehension questions. Their
pattern matching baseline was subsequently improved by a rule-based system and a logistic regression model . More recently, Richardson et al. curated MCTest, which contains 660 stories created
by crowdworkers, with 4 questions per story and
4 answer choices per question. Because many of
the questions require commonsense reasoning and
reasoning across multiple sentences, the dataset remains quite challenging, though there has been noticeable progress . Both curated
datasets, although real and difﬁcult, are too small to
support very expressive statistical models.
Some datasets focus on deeper reasoning abilities. Algebra word problems require understanding
a story well enough to turn it into a system of equa-
tions, which can be easily solved to produce the answer .
BAbI , a fully synthetic RC
dataset, is stratiﬁed by different types of reasoning
required to solve each task. Clark and Etzioni 
describe the task of solving 4th grade science exams,
and stress the need to reason with world knowledge.
Open-domain question answering.
The goal of
open-domain QA is to answer a question from a
large collection of documents.
The annual evaluations at the Text REtreival Conference (TREC)
 led to many advances
in open-domain QA, many of which were used in
IBM Watson for Jeopardy! .
Recently, Yang et al. created the WikiQA
dataset, which, like SQuAD, use Wikipedia passages as a source of answers, but their task is sentence selection, while ours requires selecting a speciﬁc span in the sentence.
Selecting the span of text that answers a question
is similar to answer extraction, the ﬁnal step in the
open-domain QA pipeline, methods for which include bootstrapping surface patterns , using dependency trees , and using a factor graph over multiple sentences . One key difference between our RC setting and answer extraction
is that answer extraction typically exploits the fact
that the answer occurs in multiple documents , which is more lenient than in our setting, where a system only has access to a single reading passage.
Cloze datasets.
Recently, researchers have constructed cloze datasets, in which the goal is to predict the missing word (often a named entity) in a
passage. Since these datasets can be automatically
generated from naturally occurring data, they can be
extremely large. The Children’s Book Test (CBT)
 , for example, involves predicting
a blanked-out word of a sentence given the 20 previous sentences. Hermann et al. constructed a
corpus of cloze style questions by blanking out entities in abstractive summaries of CNN / Daily News
articles; the goal is to ﬁll in the entity based on the
original article. While the size of this dataset is impressive, Chen et al. showed that the dataset
requires less reasoning than previously thought, and
Figure 2: The crowd-facing web interface used to collect the
dataset encourages crowdworkers to use their own words while
asking questions.
concluded that performance is almost saturated.
One difference between SQuAD questions and
cloze-style queries is that answers to cloze queries
are single words or entities, while answers in
SQuAD often include non-entities and can be much
longer phrases. Another difference is that SQuAD
focuses on questions whose answers are entailed
by the passage, whereas the answers to cloze-style
queries are merely suggested by the passage.
Dataset Collection
We collect our dataset in three stages:
passages, crowdsourcing question-answers on those
passages, and obtaining additional answers.
Passage curation.
To retrieve high-quality articles, we used Project Nayuki’s Wikipedia’s internal
PageRanks to obtain the top 10000 articles of English Wikipedia, from which we sampled 536 articles uniformly at random. From each of these articles, we extracted individual paragraphs, stripping
away images, ﬁgures, tables, and discarding paragraphs shorter than 500 characters. The result was
23,215 paragraphs for the 536 articles covering a
wide range of topics, from musical celebrities to abstract concepts. We partitioned the articles randomly
into a training set (80%), a development set (10%),
and a test set (10%).
Question-answer collection.
Next, we employed
crowdworkers to create questions.
We used the
Daemo platform , with Amazon Mechanical Turk as its backend. Crowdworkers
were required to have a 97% HIT acceptance rate, a
minimum of 1000 HITs, and be located in the United
States or Canada. Workers were asked to spend 4
minutes on every paragraph, and paid $9 per hour for
the number of hours required to complete the article.
The task was reviewed favorably by crowdworkers,
receiving positive comments on Turkopticon.
On each paragraph, crowdworkers were tasked
with asking and answering up to 5 questions on the
content of that paragraph. The questions had to be
entered in a text ﬁeld, and the answers had to be
highlighted in the paragraph. To guide the workers, tasks contained a sample paragraph, and examples of good and bad questions and answers on that
paragraph along with the reasons they were categorized as such. Additionally, crowdworkers were
encouraged to ask questions in their own words,
without copying word phrases from the paragraph.
On the interface, this was reinforced by a reminder
prompt at the beginning of every paragraph, and by
disabling copy-paste functionality on the paragraph
Additional answers collection.
To get an indication of human performance on SQuAD and to make
our evaluation more robust, we obtained at least 2
additional answers for each question in the development and test sets. In the secondary answer generation task, each crowdworker was shown only the
questions along with the paragraphs of an article,
and asked to select the shortest span in the paragraph that answered the question. If a question was
not answerable by a span in the paragraph, workers
were asked to submit the question without marking
an answer. Workers were recommended a speed of 5
questions for 2 minutes, and paid at the same rate of
$9 per hour for the number of hours required for the
entire article. Over the development and test sets,
2.6% of questions were marked unanswerable by at
least one of the additional crowdworkers.
Answer type
Percentage
19 October 1512
Other Numeric
Thomas Coke
Other Entity
ABC Sports
Common Noun Phrase
property damage
Adjective Phrase
second-largest
Verb Phrase
returned to Earth
to avoid trivialization
Table 2: We automatically partition our answers into the following categories. Our dataset consists of large number of answers beyond proper noun entities.
Dataset Analysis
To understand the properties of SQuAD, we analyze
the questions and answers in the development set.
Speciﬁcally, we explore the (i) diversity of answer
types, (ii) the difﬁculty of questions in terms of type
of reasoning required to answer them, and (iii) the
degree of syntactic divergence between the question
and answer sentences.
Diversity in answers.
We automatically categorize the answers as follows:
We ﬁrst separate
the numerical and non-numerical answers.
non-numerical answers are categorized using constituency parses and POS tags generated by Stanford CoreNLP. The proper noun phrases are further
split into person, location and other entities using
NER tags. In Table 2, we can see dates and other
numbers make up 19.8% of the data; 32.6% of the
answers are proper nouns of three different types;
31.8% are common noun phrases answers; and the
remaining 15.8% are made up of adjective phrases,
verb phrases, clauses and other types.
Reasoning required to answer questions.
a better understanding of the reasoning required to
answer the questions, we sampled 4 questions from
each of the 48 articles in the development set, and
then manually labeled the examples with the categories shown in
The results show that
all examples have some sort of lexical or syntactic
divergence between the question and the answer in
the passage. Note that some examples fall into more
than one category.
Description
Percentage
Lexical variation
(synonymy)
correspondences
the question and the answer sentence are synonyms.
Q: What is the Rankine cycle sometimes called?
The Rankine cycle is sometimes referred to as a practical Carnot cycle.
Lexical variation
(world knowledge)
correspondences
the question and the answer sentence require world knowledge to
Q: Which governing bodies have veto power?
Sen.: The European Parliament and the Council of
the European Union have powers of amendment
and veto during the legislative process.
Syntactic variation
After the question is paraphrased
into declarative form, its syntactic dependency structure does not
match that of the answer sentence
even after local modiﬁcations.
Q: What Shakespeare scholar is currently on the
Current faculty include the anthropologist Marshall Sahlins, ..., Shakespeare scholar
David Bevington.
Multiple sentence
There is anaphora, or higher-level
fusion of multiple sentences is required.
Q: What collection does the V&A Theatre & Performance galleries hold?
Sen.: The V&A Theatre & Performance galleries opened in March 2009.
hold the UK’s biggest national collection of
material about live performance.
We don’t agree with the crowdworkers’ answer, or the question
does not have a unique answer.
Q: What is the main goal of criminal punishment?
Sen.: Achieving crime control via incapacitation
and deterrence is a major goal of criminal punishment.
Table 3: We manually labeled 192 examples into one or more of the above categories. Words relevant to the corresponding
reasoning type are bolded, and the crowdsourced answer is underlined.
Q: What department store is thought to be the ﬁrst in the world?
S: Bainbridge’s is often cited as the world’s ﬁrst department store.
←−−−−thought
⇓substitute
←−−−store nmod
−−−−−→Bainbridge’s
Edit cost:
Figure 3: An example walking through the computation of the
syntactic divergence between the question Q and answer sentence S.
Stratiﬁcation by syntactic divergence.
develop an automatic method to quantify the syntactic divergence between a question and the sentence
containing the answer. This provides another way to
measure the difﬁculty of a question and to stratify
the dataset, which we return to in Section 6.3.
We illustrate how we measure the divergence with
the example in Figure 3.
We ﬁrst detect anchors
(word-lemma pairs common to both the question
and answer sentences); in the example, the anchor
is “ﬁrst”. The two unlexicalized paths, one from
the anchor “ﬁrst” in the question to the wh-word
“what”, and the other from the anchor in the answer
sentence and to the answer span “Bainbridge’s”, are
then extracted from the dependency parse trees. We
measure the edit distance between these two paths,
which we deﬁne as the minimum number of deletions or insertions to transform one path into the
other. The syntactic divergence is then deﬁned as
the minimum edit distance over all possible anchors.
The histogram in Figure 4a shows that there is a
wide range of syntactic divergence in our dataset.
We also show a concrete example where the edit distance is 0 and another where it is 6. Note that our
syntactic divergence ignores lexical variation. Also,
small divergence does not mean that a question is
easy since there could be other candidates with similarly small divergence.
We developed a logistic regression model and compare its accuracy with that of three baseline methods.
Syntactic divergence
Percentage
(a) Histogram of syntactic divergence.
Q: Who went to Wittenberg to hear Luther speak?
S: Students thronged to Wittenberg to hear Luther
Wittenberg
Wittenberg
(b) An example of a question-answer pair with edit distance 0 between the dependency paths (note that lexical variation is ignored
in the computation of edit distance).
Q: What impact did the high school education movement have on the presence of skilled workers?
S: During the mass high school education movement from 1910 – 1940 , there was an increase in skilled workers.
(c) An example of a question-answer pair with edit distance 6.
Figure 4: We use the edit distance between the unlexicalized dependency paths in the question and the sentence containing the
answer to measure syntactic divergence.
Candidate answer generation.
For all four methods, rather than considering all O(L2) spans as candidate answers, where L is the number of words
in the sentence, we only use spans which are constituents in the constituency parse generated by
Stanford CoreNLP. Ignoring punctuation and articles, we ﬁnd that 77.3% of the correct answers in the
development set are constituents. This places an effective ceiling on the accuracy of our methods. During training, when the correct answer of an example
is not a constituent, we use the shortest constituent
containing the correct answer as the target.
Sliding Window Baseline
For each candidate answer, we compute the unigram/bigram overlap between the sentence containing it (excluding the candidate itself) and the question. We keep all the candidates that have the maximal overlap.
Among these, we select the best
one using the sliding-window approach proposed
in Richardson et al. .
In addition to the basic sliding window approach, we also implemented the distance-based extension . Whereas Richardson et al. used the entire passage as the context of an answer, we used only the sentence containing the candidate answer for efﬁciency.
Logistic Regression
In our logistic regression model, we extract several
types of features for each candidate answer.
discretize each continuous feature into 10 equallysized buckets, building a total of 180 million features, most of which are lexicalized features or dependency tree path features. The descriptions and
examples of the features are summarized in Table 4.
The matching word and bigram frequencies as
well as the root match features help the model pick
the correct sentences.
Length features bias the
model towards picking common lengths and positions for answer spans, while span word frequencies
bias the model against uninformative words. Constituent label and span POS tag features guide the
model towards the correct answer types. In addition to these basic features, we resolve lexical variation using lexicalized features, and syntactic variation using dependency tree path features.
The multiclass log-likelihood loss is optimized
using AdaGrad with an initial learning rate of 0.1.
Each update is performed on the batch of all questions in a paragraph for efﬁciency, since they share
the same candidates. L2 regularization is used, with
a coefﬁcient of 0.1 divided by the number of batches.
The model is trained with three passes over the train-
Feature Groups
Description
Frequencies
Sum of the TF-IDF of the words that occur in both the question and the
sentence containing the candidate answer. Separate features are used
for the words to the left, to the right, inside the span, and in the whole
Span: [0 ≤sum < 0.01]
Left: [7.9 ≤sum < 10.7]
Matching Bigram
Frequencies
Same as above, but using bigrams. We use the generalization of the
TF-IDF described in Shirakawa et al. .
Span: [0 ≤sum < 2.4]
Left: [0 ≤sum < 2.7]
Root Match
Whether the dependency parse tree roots of the question and sentence
match, whether the sentence contains the root of the dependency parse
tree of the question, and whether the question contains the root of the
dependency parse tree of the sentence.
Root Match = False
Number of words to the left, to the right, inside the span, and in the
whole sentence.
Span: [1 <= num < 2]
Left: [15 ≤num < 19]
Frequencies
Sum of the TF-IDF of the words in the span, regardless of whether they
appear in the question.
Span: [5.2 ≤sum < 6.9]
Constituent Label
Constituency parse tree label of the span, optionally combined with the
wh-word in the question.
Span: NP, wh-word: “what”
Span POS Tags
Sequence of the part-of-speech tags in the span, optionally combined
with the wh-word in the question.
Span: [NN]
Span: [NN], wh-word: “what”
Lexicalized
Lemmas of question words combined with the lemmas of words within
distance 2 to the span in the sentence based on the dependency parse
trees. Separately, question word lemmas combined with answer word
Q: “cause”, S: “under”
Q: “fall”, A: “gravity”
Dependency Tree
For each word that occurs in both the question and sentence, the path
in the dependency parse tree from that word in the sentence to the span,
optionally combined with the path from the wh-word to the word in the
question. POS tags are included in the paths.
Table 4: Features used in the logistic regression model with examples for the question “What causes precipitation to fall?”, sentence
“In meteorology, precipitation is any product of the condensation of atmospheric water vapor that falls under gravity.” and answer
“gravity”. Q denotes question, A denotes candidate answer, and S denotes sentence containing the candidate answer.
Experiments
Model Evaluation
We use two different metrics to evaluate model accuracy. Both metrics ignore punctuations and articles
(a, an, the).
Exact match.
This metric measures the percentage of predictions that match any one of the ground
truth answers exactly.
(Macro-averaged) F1 score.
This metric measures the average overlap between the prediction and
ground truth answer. We treat the prediction and
ground truth as bags of tokens, and compute their
F1. We take the maximum F1 over all of the ground
truth answers for a given question, and then average
over all of the questions.
Human Performance
We assess human performance on SQuAD’s development and test sets. Recall that each of the questions in these sets has at least three answers. To evaluate human performance, we treat the second answer to each question as the human prediction, and
keep the other answers as ground truth answers. The
resulting human performance score on the test set is
77.0% for the exact match metric, and 86.8% for F1.
Mismatch occurs mostly due to inclusion/exclusion
of non-essential phrases (e.g., monsoon trough versus movement of the monsoon trough) rather than
fundamental disagreements about the answer.
Model Performance
Table 5 shows the performance of our models alongside human performance on the v1.0 of development
and test sets. The logistic regression model signiﬁcantly outperforms the baselines, but underperforms
Exact Match
Random Guess
Sliding Window
Sliding Win. + Dist. 13.3%
Logistic Regression 40.0%
Table 5: Performance of various methods and humans. Logistic regression outperforms the baselines, while there is still a
signiﬁcant gap between humans.
Logistic Regression
– Lex., – Dep. Paths
– Lexicalized
– Dep. Paths
– Match. Word Freq.
– Span POS Tags
– Match. Bigram Freq. 91.7%
– Constituent Label
– Span Word Freq.
– Root Match
Table 6: Performance with feature ablations. We ﬁnd that lexicalized and dependency tree path features are most important.
humans. We note that the model is able to select
the sentence containing the answer correctly with
79.3% accuracy; hence, the bulk of the difﬁculty lies
in ﬁnding the exact span within the sentence.
Feature ablations.
In order to understand the features that are responsible for the performance of the
logistic regression model, we perform a feature ablation where we remove one group of features from
our model at a time. The results, shown in Table 6,
indicate that lexicalized and dependency tree path
features are most important. Comparing our analysis to the one in Chen et al. , we note that the
dependency tree path features play a much bigger
role in our dataset. Additionally, we note that with
lexicalized features, the model signiﬁcantly overﬁts
the training set; however, we found that increasing
L2 regularization hurts performance on the development set.
Performance stratiﬁed by answer type.
more insight into the performance of our logistic regression model, we report its performance across
Logistic Regression
Other Numeric
Other Entity
Common Noun Phrase
Adjective Phrase
Verb Phrase
Table 7: Performance stratiﬁed by answer types. Logistic regression performs better on certain types of answers, namely
numbers and entities. On the other hand, human performance is
more uniform.
Syntactic divergence
Preformance (%)
Logistic Regression Dev F1
Human Dev F1
Figure 5: Performance stratiﬁed by syntactic divergence of
questions and sentences. The performance of logistic regression degrades with increasing divergence. In contrast, human
performance is stable across the full range of divergence.
the answer types explored in Table 2.
The results (shown in Table 7) show that the model performs best on dates and other numbers, categories
for which there are usually only a few plausible candidates, and most answers are single tokens. The
model is challenged more on other named entities
(i.e., location, person and other entities) because
there are many more plausible candidates.
However, named entities are still relatively easy to identify by their POS tag features. The model performs
worst on other answer types, which together form
47.6% of the dataset. Humans have exceptional performance on dates, numbers and all named entities.
Their performance on other answer types degrades
only slightly.
Performance stratiﬁed by syntactic divergence.
As discussed in Section 4, another challenging aspect of the dataset is the syntactic divergence between the question and answer sentence. Figure 5
shows that the more divergence there is, the lower
the performance of the logistic regression model.
Interestingly, humans do not seem to be sensitive
to syntactic divergence, suggesting that deep understanding is not distracted by superﬁcial differences.
Measuring the degree of degradation could therefore
be useful in determining the extent to which a model
is generalizing in the right way.
Conclusion
Towards the end goal of natural language understanding, we introduce the Stanford Question Answering Dataset, a large reading comprehension
dataset on Wikipedia articles with crowdsourced
question-answer pairs. SQuAD features a diverse
range of question and answer types.
The performance of our logistic regression model, with 51.0%
F1, against the human F1 of 86.8% suggests ample
opportunity for improvement. We have made our
dataset freely available to encourage exploration of
more expressive models. Since the release of our
dataset, we have already seen considerable interest
in building models on this dataset, and the gap between our logistic regression model and human performance has more than halved . We expect that the remaining gap will be
harder to close, but that such efforts will result in
signiﬁcant advances in reading comprehension.
Reproducibility
All code, data, and experiments for this paper are
available on the CodaLab platform:
 
0xd53d03a48ef64b329c16b9baf0f99b0c/ .
Acknowledgments
We would like to thank Durim Morina and Professor
Michael Bernstein for their help in crowdsourcing
the collection of our dataset, both in terms of funding and technical support of the Daemo platform.