MIT Open Access Articles
HAQ: Hardware-Aware Automated
Quantization With Mixed Precision
The MIT Faculty has made this article openly available. Please share
how this access benefits you. Your story matters.
Citation: Wang, Kuan et al. “HAQ: Hardware-Aware Automated Quantization With Mixed
Precision.” Paper in the Proceedings of the 2019 IEEE/CVF Conference on Computer Vision and
Pattern Recognition, Long Beach CA, 16-20 June 2019, IEEE © 2019 The Author(s)
As Published: 10.1109/CVPR.2019.00881
Publisher: Institute of Electrical and Electronics Engineers (IEEE)
Persistent URL: 
Version: Original manuscript: author's manuscript prior to formal peer review
Terms of use: Creative Commons Attribution-Noncommercial-Share Alike
HAQ: Hardware-Aware Automated Quantization with Mixed Precision
Kuan Wang∗, Zhijian Liu∗, Yujun Lin∗, Ji Lin, and Song Han
{kuanwang, zhijian, yujunlin, jilin, songhan}@mit.edu
Massachusetts Institute of Technology
Model quantization is a widely used technique to compress and accelerate deep neural network (DNN) inference.
Emergent DNN hardware accelerators begin to support
mixed precision (1-8 bits) to further improve the computation efﬁciency, which raises a great challenge to ﬁnd the
optimal bitwidth for each layer: it requires domain experts
to explore the vast design space trading off among accuracy, latency, energy, and model size, which is both timeconsuming and sub-optimal. There are plenty of specialized
hardware for neural networks, but little research has been
done for specialized neural network optimization for a particular hardware architecture. Conventional quantization
algorithm ignores the different hardware architectures and
quantizes all the layers in a uniform way. In this paper,
we introduce the Hardware-Aware Automated Quantization
(HAQ) framework which leverages the reinforcement learning to automatically determine the quantization policy, and
we take the hardware accelerator’s feedback in the design
loop. Rather than relying on proxy signals such as FLOPs
and model size, we employ a hardware simulator to generate direct feedback signals (latency and energy) to the RL
agent. Compared with conventional methods, our framework
is fully automated and can specialize the quantization policy
for different neural network architectures and hardware architectures. Our framework effectively reduced the latency
by 1.4-1.95× and the energy consumption by 1.9× with negligible loss of accuracy compared with the ﬁxed bitwidth (8
bits) quantization. Our framework reveals that the optimal
policies on different hardware architectures (i.e., edge and
cloud architectures) under different resource constraints (i.e.,
latency, energy and model size) are drastically different. We
interpreted the implication of different quantization policies,
which offer insights for both neural network architecture
design and hardware architecture design.
∗indicates equal contributions.
MobileNets (fixed 8-bit quantization)
MobileNets (our flexible-bit quantization)
Latency (ms)
Top-1 Accuracy (%)
1MB 2MB 3MB
Model Size:
Figure 1: We need mixed precision for different layers. We
quantize MobileNets to different number of bits (both
weights and activations), and it lies on a better pareto curve
(yellow) than ﬁxed bit quantization (blue). The reason is that
different layers have different redundancy and have different arithmetic intensity (OPs/byte) on the hardware, which
advocates for using mixed precision for different layers.
1. Introduction
In many real-time machine learning applications (such
as robotics, autonomous driving, and mobile VR/AR), deep
neural networks is strictly constrained by the latency, energy,
and model size. In order to improve the hardware efﬁciency,
many researchers have proposed to quantize the weights and
activations to low precision .
Conventional quantization methods use the same number
of bits for all layers , but as different layers have different redundancy and behave differently on the hardware
(computation bounded or memory bounded), it is necessary
to use mixed precision for different layers (as shown in Figure 1). This ﬂexibility was originally not supported by chip
vendors until recently the hardware manufacturers started
to implement this feature: Apple released the A12 Bionic
chip that supports mixed precision for the neural network
inference ; NVIDIA recently introduced the Turing GPU
architecture that supports 1-bit, 4-bit, 8-bit and 16-bit arithmetic operations ; Imagination launched a ﬂexible neural
network IP that supports per-layer bitwidth adjustment for
 
Inference latency on
Best Q. policy for HW1
Best Q. policy for HW2
Best Q. policy for HW3
Table 1: Inference latency of MobileNet-V1 on three
hardware architectures under different quantization policies.
The quantization policy that is optimized for one hardware
is not optimal for the other. This suggests we need a specialized quantization solution for different hardware architectures. (HW1: BitFusion , HW2: BISMO edge
accelerator, HW3: BISMO cloud accelerator, batch = 16).
both weights and activations . Besides industry, recently
academia also works on the bit-level ﬂexible hardware design: BISMO proposed the bit-serial multiplier to support multiplications of 1 to 8 bits; BitFusion supports
multiplications of 2, 4, 8 and 16 bits in a spatial manner.
However, a very missing part is how to determine the
bitwidth of both weights and activations for each layer
on different hardware accelerators. This is a vast design
space: with M different neural network models, each with N
layers, on H different hardware platforms, there are in total
O(H × M × 82N)∗possible solutions. For a widely used
ResNet-50 model, the size of the search space is about
8100, which is even larger than the number of particles in
the universe. Conventional methods require domain experts
(with knowledge of both machine learning and hardware
architecture) to explore the huge design space smartly with
rule-based heuristics, such as: we should retain more bits
in the ﬁrst layer which extracts low level features and in the
last layer which computes the ﬁnal outputs; also, we should
use more bits in the convolution layers than in the fullyconnected layers because empirically, the convolution layers
are more sensitive. As the neural network becomes deeper,
the search space increases exponentially, which makes it
infeasible to rely on hand-crafted strategies. Therefore, these
rule-based quantization policies are usually sub-optimal, and
they cannot generalize from one model to another. In this
paper, we would like to automate this exploration process by
a learning-based framework.
Another challenge is how to optimize the latency and
the energy consumption of a given model on the hardware.
A widely adopted approach is to rely on some proxy signals (e.g., FLOPs, number of memory references) .
However, as different hardware behaves very differently, the
performance of a model on the hardware cannot always be
accurately reﬂected by these proxy signals. Therefore, it
is important to directly involve the hardware architecture’s
∗Assuming the bitwidth is 1 to 8 for both weights and activations.
performance feedback into the design loop. Also, as demonstrated in Table 1, the quantization solution optimized on
one hardware might not be optimal on the other, which raises
the demand for specialized policies for different hardware
architectures.
To this end, we propose the Hardware-Aware Automated
Quantization (HAQ) framework that leverages reinforcement learning to automatically predict the quantization policy given the hardware’s feedback. The RL agent decides the
bitwidth of a given neural network in a layer-wise manner.
For each layer, the agent receives the layer conﬁguration and
statistics as observation, and it then outputs the action which
is the bitwidth of weights and activations. We then leverage
the hardware accelerator as the environment to obtain the
direct feedback from hardware to guide the RL agent to satisfy the resource constraints. After all layers are quantized,
we ﬁnetune the quantized model for one more epoch, and
feed the validation accuracy after short-term retraining as the
reward signal to our RL agent. During the exploration, we
leverage the deep deterministic policy gradient (DDPG) 
to supervise our RL agent. We also studied the quantization
policy on multiple hardware architectures: both cloud and
edge neural network accelerators, with spatial or temporal
multi-precision design.
The contribution of this paper has four aspects:
1. Automation: We propose an automated framework for
quantization, which does not require domain experts
and rule-based heuristics. It frees the human labor from
exploring the vast search space of choosing bitwidths.
2. Hardware-Aware: Our framework involves the hardware architecture into the loop so that it can directly
reduce the latency, energy and storage on the target
hardware instead of relying on proxy signals.
3. Specialization: For different hardware architectures,
our framework can offer a specialized quantization policy that’s exactly tailored for the target hardware architecture to optimize latency and energy.
4. Design Insights: We interpreted the different quantization polices learned for different hardware architectures.
Taking both computation and memory access into account, the interpretation offers insights on both neural
network architecture and hardware architecture design.
2. Related Work
Quantization.
There have been extensive explorations on
compressing and accelerating deep neural networks using
quantization. Han et al. quantized the network weights
to reduce the model size by rule-based strategies: e.g., they
used human heuristics to determine the bitwidths for convolution and fully-connected layers. Courbariaux et al. 
BitFusion (On the Edge)
BISMO (On the Cloud)
Agent: DDPG
3 bit weight
5 bit activation
1 0 1 0 0 0 1 0
1 1 1 0 1 0 1 0 0 1 0 1 0
1 1 1 0 1 0 1 0 0 1
1 1 1 0 1 0 1 0 0 1 0
Quantized Model
3bit / 5bit
6bit / 7bit
4bit / 6bit
5bit / 6bit
Hardware Accelerator
BISMO (On the Edge)
Figure 2: An overview of our Hardware-Aware Automated Quantization (HAQ) framework. We leverage the reinforcement
learning to automatically search over the huge quantization design space with hardware in the loop. The agent propose an
optimal bitwidth allocation policy given the amount of computation resources (i.e., latency, power, and model size). Our RL
agent integrates the hardware accelerator into the exploration loop so that it can obtain the direct feedback from the hardware,
instead of relying on indirect proxy signals.
binarized the network weights into {−1, +1}; Rastegari et
al. and Zhou et al. binarized each convolution ﬁlter
into {−w, +w}; Zhu et al. mapped the network weights
into {−wN, 0, +wP} using two bits; Zhou et al. used
one bit for network weights and two bits for activations; Jacob et al. made use of 8-bit integers for both weights and
activations. We refer the reader to the survey paper by Krishnamoorthi et al. for a more detailed overview. These
conventional quantization methods either simply assign the
same number of bits to all layers or require domain experts to
determine the bitwidths for different layers, while our framework automates this design process, and our learning-based
policy outperforms rule-based strategies.
Many researchers aimed to improve the performance of deep neural networks by searching the network
architectures: Zoph et al. proposed the Neural Architecture Search (NAS) to explore and design the transformable
network building blocks, and their network architecture outperforms several human designed networks; Liu et al. 
introduced the Progressive NAS to accelerate the architecture
search by 5× using sequential model-based optimization;
Pham et al. introduced the Efﬁcient NAS to speed up
the exploration by 1000× using parameter sharing; Cai et
al. introduced the path-level network transformation to
effectively search the tree-structured architecture space. Motivated by these AutoML frameworks, He et al. leveraged the reinforcement learning to automatically prune the
convolution channels. Our framework further explores the
automated quantization for network weights and activations,
and it takes the hardware architectures into consideration.
Efﬁcient Models.
To facilitate the efﬁcient deployment,
researchers designed hardware-friendly approaches to slim
neural network models. For instance, the coarse-grained
channel pruning methods prune away the entire
channel of convolution kernels to achieve speedup. Recently,
researchers have explicitly optimized for various aspects of
hardware properties, including the inference latency and energy: Yang et al. proposed the energy-aware pruning
to directly optimize the energy consumption of neural networks; Yang et al. reduced the inference time of neural
networks on the mobile devices through a lookup table. Nevertheless, these methods are still rule-based and mostly focus
on pruning. Our framework automates the quantization process by taking hardware-speciﬁc metric as direct rewards
using a learning based method.
3. Approach
We model the quantization task as a reinforcement learning problem (Figure 2). We use the actor-critic model with
DDPG agent to give the action: bits for each layer. We
collect hardware counters as constraints, together with accuracy as rewards to search the optimal quantization policy.
We have three hardware environments that covers edge and
cloud, spatial and temporal architectures for mixed-precision
accelerator. Below describes the details of the RL formulation.
3.1. Observation (State Space)
Our agent processes the neural network in a layer-wise
manner. For each layer, our agent takes two steps: one for
weights, and one for activations. In this paper, we introduce
a ten-dimensional feature vector Ok as our observation:
If the kth layer is a convolution layer, the state Ok is
Ok = (k, cin, cout, skernel, sstride, sfeat, nparams, idw, iw/a, ak−1),
where k is the layer index, cin is #input channels, cout is
#output channels, skernel is kernel size, sstride is the stride,
sfeat is the input feature map size, nparams is #parameters,
idw is a binary indicator for depthwise convolution, iw/a is a
binary indicator for weight/activation, and ak−1 is the action
from the last time step.
If the kth layer is a fully-connected layer, the state Ok is
Ok = (k, hin, hout, 1, 0, sfeat, nparams, 0, iw/a, ak−1),
where k is the layer index, hin is #input hidden units, hout is
#output hidden units, sfeat is the size of input feature vector,
nparams is #parameters, iw/a is a binary indicator for weight/
activation, and ak−1 is the action from the last step.
For each dimension in the observation vector Ok, we
normalize it into to make them in the same scale.
3.2. Action Space
We use a continuous action space to determine the
bitwidth. The reason that we do not use a discrete action
space is because it loses the relative order: e.g., 2-bit quantization is more aggressive than 4-bit and even more than
8-bit. At the kth time step, we take the continuous action ak
(which is in the range of ), and round it into the discrete
bitwidth value bk:
bk = round(bmin −0.5 + ak × (bmax −bmin + 1)),
where bmin and bmax denote the min and max bitwidth (in our
experiments, we set bmin to 2 and bmax to 8).
Resource Constraints.
In real-world applications, we
have limited computation budgets (i.e., latency, energy, and
model size). We would like to ﬁnd the quantization policy
with the best performance given the constraint.
We encourage our agent to meet the computation budget
by limiting the action space. After our RL agent gives actions
{ak} to all layers, we measure the amount of resources
that will be used by the quantized model. The feedback is
directly obtained from the hardware accelerator, which we
will discuss in Section 3.3. If the current policy exceeds
our resource budget (on latency, energy or model size), we
will sequentially decrease the bitwidth of each layer until the
constraint is ﬁnally satisﬁed.
3.3. Direct Feedback from Hardware Accelerators
An intuitive feedback to our RL agent can be FLOPs or
the model size. However, as these proxy signals are indirect,
they are not equal to the performance (i.e., latency, energy
consumption) on the hardware. Cache locality, number of
kernel calls, memory bandwidth all matters. Proxy feedback can not model these hardware functionality to ﬁnd the
specialized strategies (see Table 1).
Instead, we use direct latency and energy feedback from
the hardware accelerator as resource constraints, which enables our RL agent to determine the bitwidth allocation policy from the subtle differences between different layers: e.g.,
vanilla convolution has more data reuse and better locality,
while depthwise convolution has less reuse and worse
locality, which makes it memory bounded. Such difference
impacts the optimal quantization policy.
3.4. Quantization
We linearly quantize the weights and activations of each
layer using the action ak given by our agent, as linearly
quantized model only needs ﬁxed point arithmetic unit which
is more efﬁcient to implement on the hardware.
Speciﬁcally, for each weight value w in the kth layer, we
ﬁrst truncate it into the range of [−c, c], and we then quantize
it linearly into ak bits:
quantize(w, ak, c) = round(clamp(w, c)/s) × s,
where clamp(·, x) is to truncate the values into [−x, x], and
the scaling factor s is deﬁned as s = c/(2ak−1 −1). In this
paper, we choose the value of c by ﬁnding the optimal value
x that minimizes the KL-divergence between the original
weight distribution Wk and the quantized weight distribution
quantize(Wk, ak, x):
c = arg min
DKL(Wk || quantize(Wk, ak, x)),
where DKL(· || ·) is the KL-divergence that characterizes the
distance between two distributions. As for activations, we
quantize the values similarly except that we truncate them
into the range of [0, c], not [−c, c] since the activation values
(which are the outputs of the ReLU layers) are non-negative.
3.5. Reward Function
After quantization, we retrain the quantized model for
one more epoch to recover the performance. As we have
already imposed the resource constraints (latency, energy) by
limiting the action space (Section 3.2), we deﬁne our reward
function R to be only related to the accuracy:
R = λ × (accquant −accorigin),
where accorigin is the top-1 classiﬁcation accuracy of the fullprecision model on the training set, accquant is the accuracy
of the quantized model after ﬁnetuning, and λ is a scaling
factor which is set to 0.1 in our experiments.
3.6. Agent
For the RL agent, we leverage the deep deterministic
policy gradient (DDPG) , which is an off-policy actorcritic algorithm for continuous control problem. In our environment, one step means that our agent makes an action
to decide the number of bits assigned to the weights or
activations of a speciﬁc layer, while one episode is composed of multiple steps, where our RL agent makes actions
to all layers. We apply a variant form of the Bellman’s
Equation, where each transition in an episode is deﬁned
as Tk = (Ok, ak, R, Ok+1). During exploration, the Qfunction is computed as
ˆQk = Rk −B + γ × Q(Ok+1, w(Ok+1) | θQ),
and the loss function can be approximated by
( ˆQk −Q(Ok, ak | θQ))2,
where Ns denotes the number of steps in this episode, and
the baseline B is deﬁned as an exponential moving average
of all previous rewards in order to reduce the variance of the
gradient estimation. The discount factor γ is set to 1 since we
assume that the action made for each layer should contribute
equally to the ﬁnal result. Moreover, as the number of steps
is always ﬁnite (bounded by the number of layers), the sum
of the rewards will not explode.
3.7. Implementation Details
In this section, we present the implementation details
about RL exploration and ﬁnetuning quantized models.
The DDPG agent consists of an actor network and
a critic network. Both using the same network architecture: they take the state vector and the action from the last
time step as inputs and feed them into two separate fullyconnected layers with hidden sizes of 400. After that, we
add the two hidden vectors together and go through another
two fully-connected layers with hidden sizes of {300, 1}. As
for the actor network, we use an additional sigmoid function
to project the output into the range of .
Exploration.
Optimization of the DDPG agent is carried
out using ADAM with β1 = 0.9 and β2 = 0.999. We
use a ﬁxed learning rate of 10−4 for the actor network and
10−3 for the critic network. During exploration, we employ
the following stochastic process of the noise:
w′(Ok) ∼Ntrunc(w(Ok | θw
k ), σ2, 0, 1),
where Ntrunc(µ, σ, a, b) is the truncated normal distribution,
and w is the model weights. The noise σ is initialized as 0.5,
and after each episode, the noise is decayed exponentially
with a decay rate of 0.99.
Table 2: The conﬁgurations of edge and cloud accelerators.
Finetuning.
During exploration, we ﬁnetune the quantized
model for one epoch to help recover the performance (using
SGD with a ﬁxed learning rate of 10−3 and momentum of
0.9). We randomly select 100 categories from ImageNet 
to accelerate the model ﬁnetuning during exploration. After
exploration, we quantize the model with our best policy and
ﬁnetune it on the full dataset.
4. Experiments
We conduct extensive experiments to demonstrate the
consistent effectiveness of our framework for multiple objectives: latency, energy, and model size.
Datasets and Models.
Our experiments are performed on
the ImageNet dataset. As our focus is on more efﬁcient
models, we extensively study the quantization of MobileNet-
V1 and MobileNet-V2 . Both MobileNets are inspired from the depthwise separable convolutions and replace the regular convolutions with the pointwise and depthwise convolutions: MobileNet-V1 stacks multiple “depthwise – pointwise” blocks repeatedly; while MobileNet-V2
uses the “pointwise – depthwise – pointwise” blocks as its
basic building primitives.
4.1. Latency-Constrained Quantization
We ﬁrst evaluate our framework under latency constraints
on two representative hardware architectures: spatial and
temporal architectures for multi-precision CNN. We show
that it’s beneﬁcial to have specialized quantization policies
for different hardware architectures. We systematically interpret the policy given by AI to guide future human designs.
Temporal Architecture.
Bit-Serial Matrix Multiplication
Overlay (BISMO) proposed by Yaman et al. is a classic
temporal design of neural network accelerator on FPGA. It
introduces bit-serial multipliers which are fed with one-bit
digits from 256 weights and corresponding activations in
parallel at one time and accumulates their partial products
by shifting over time.
Spatial Architecture.
BitFusion architecture proposed by
Hardik et al. is a state-of-the-art spatial ASIC design for
neural network accelerator. It employs a 2D systolic array of
Fusion Units which spatially sum the shifted partial products
of two-bit elements from weights and activations.
Edge Accelerator
Cloud Accelerator
MobileNet-V1
MobileNet-V2
MobileNet-V1
MobileNet-V2
Bitwidths Acc.-1 Acc.-5
Acc.-1 Acc.-5
Acc.-1 Acc.-5
Acc.-1 Acc.-5
Table 3: Latency-constrained quantization on BISMO (edge accelerator and cloud accelerator) on ImageNet. Our framework
can reduce the latency by 1.4× to 1.95× with negligible loss of accuracy compared with the ﬁxed bitwidth (8 bits) quantization.
#weight bit (pointwise)
#weight bit (depthwise)
#activation bit (pointwise)
#activation bit (depthwise)
# OPs per Byte (pointwise)
# OPs per Byte (depthwise)
depthwise: fewer bits
pointwise:more bits
depthwise:more bits
pointwise:fewer bits
Figure 3: Quantization policy under latency constraints for
MobileNet-V1. On edge accelerator, our RL agent allocates
less activation bits to the depthwise convolutions, which
echos that the depthwise convolutions are memory bounded
and the activations dominates the memory access. On cloud
accelerator, our agent allocates more bits to the depthwise
convolutions and allocates less bits to the pointwise convolutions, as cloud device has more memory bandwidth and high
parallelism, the network appears to be computation bounded.
Quantization policy for BISMO Architecture
Inferencing neural networks on edge devices and cloud
severs can be quite different: batch size, memory bandwidth,
peak FLOPs, etc. We use Xilinx Zynq-7020 FPGA as
our edge device and Xilinx VU9P as our cloud device.
Table 2 shows our experiment conﬁgurations on these two
platforms along with their available resources.
As for comparison, we adopt the PACT as our baseline,
which uses the same number of bits for all layers except for
the ﬁrst layer which extracts the low level features, they
use 8 bits for both weights and activations as it has fewer
parameters and is very sensitive to errors. We follow a
similar setup for the ﬁrst layer (8 bits), and explore the
bitwidth allocation policy for all the other layers. Under the
same latency, HAQ consistently achieved better accuracy
than the baseline on both the cloud and the edge (Table 3).
With similar accuracy, HAQ can reduce the latency by 1.4×
to 1.95× compared with the baseline.
Interpreting the quantization policy.
Our agent gave
quite different quantization policy for edge and cloud accelerators (Figure 3). For the activations, the depthwise convolution layers are assigned less bitwidth than the pointwise
layers on the edge; while on the cloud device, the bitwidth
of these two types of layers are similar. For weights, the
bitwidth of these types of layers are nearly the same on the
edge; while on the cloud, the depthwise convolution layers
got more bitwidth than the pointwise convolution layers.
We explain the difference of quantization policy between
edge and cloud by the rooﬂine model . Many previous
works use FLOPs or BitOPs as metrics to measure computation complexity. However, they are not able to directly
reﬂect the latency, since there are many other factors inﬂuencing the hardware performance, such as memory access
cost and degree of parallelism . Taking computation
and memory access into account, the rooﬂine model assumes
that applications are either computation-bound or memory
bandwidth-bound, if not ﬁtting in on-chip caches, depending
on their operation intensity. Operation intensity is measured
as operations (MACs in neural networks) per byte accessed.
A lower operation intensity indicates suffering more from
the memory access.
#weight bit (pointwise)
#weight bit (depthwise)
#activation bit (pointwise)
#activation bit (depthwise)
depthwise:more bits
pointwise:fewer bits
depthwise:fewer bits at first few layers
depthwise:more bits at last few layers
depthwise:fewer bits
pointwise:more bits
Figure 4: Quantization policy under latency constraints for MobileNet-V2 on BISMO. Similar to Figure 3, depthwise layer is
assigned with fewer bits on the edge accelerator, and pointwise layer is assigned with fewer bits on the cloud accelerator.
Activations
Table 4: Latency-constrained quantization on BitFusion
(MobileNet-V1 on ImageNet). Our framework can reduce
the latency by 2× with almost no loss of accuracy compared
with the ﬁxed bitwidth (8 bits) quantization.
The bottom of Figure 3 shows the operation intensities
(OPs per Byte) of convolution layers in the MobileNet-V1.
Depthwise convolution is memory bounded, and the pointwise convolution is computation bounded. Our experiments
show that when running MobileNet-V1 on the edge devices
with small batch size, its latency is dominated by the depthwise convolution layers. Since the feature maps take a major
proportion in the memory of depthwise convolution layers,
our agent gives the activations less bits. In contrast, when
running MobileNet-V1 on the cloud with large batch size,
our agent increases the bitwidth of depthwise convolution to
preserve the accuracy at low memory overhead since depthwise convolution only takes a small proportion of the total
weights. A similar phenomenon can be observed in Figure 4
on MobileNet-V2. Moreover, as the activation size in deeper
layers gets smaller, they get assigned more bits.
Quantization policy for BitFusion Architecture
In order to demonstrate the effectiveness of our framework on different hardware architectures, we further compare
Activations
Table 5: Energy-constrained quantization on BitFusion
(MobileNet-V1 on ImageNet). Our framework reduces the
power consumption by 2× with nearly no loss of accuracy
compared with the ﬁxed bitwidth quantization.
our framework with PACT under the latency constraints
on the BitFusion architecture (Table 4). Our framework performs much better than the hand-craft policy with
the same latency. It can achieve almost no degradation of
accuracy with only half of the latency used by the original
MobileNet-V1 model (from 20.08 to 11.09 ms). Therefore,
our framework is ﬂexible to provide specialized quantization
policy for different hardware platforms.
4.2. Energy-Constrained Quantization
We then evaluate our framework under the energy constraints. Similar to the latency-constrained experiments, we
compare our framework with PACT that uses ﬁxed number of bits without hardware feedback. From Table 5, we can
clearly see that our framework outperforms the rule-based
baseline: it achieves much better performance while consuming similar amount of energy. In particular, our framework is
able to achieve almost no loss of accuracy with nearly half of
the energy consumption of the original MobileNet-V1 model
(from 31.03 to 16.57 mJ), which suggests that mixed preci-
MobileNet-V1
MobileNet-V2
Model Size
Model Size
Model Size
Han et al. 
Han et al. 
Han et al. 
Table 6: Model size-constrained quantization on ImageNet. Compared with Deep Compression , our framework achieves
higher accuracy under similar model size (especially under high compression ratio).
log# #bits
#params (pointwise)
#params (depthwise)
#weight bits (pointwise)
#weight bits (depthwise)
depthwise:more bits
pointwise:fewer bits
more params, fewer bits
Figure 5: Quantization policy under model size constraints for MobileNet-V2. Our RL agent allocates more bits to the
depthwise convolutions, since depthwise convolutions have fewer number of parameters.
sion with hardware-aware, specialized quantization policy
can indeed help reduce the energy consumption.
4.3. Model Size-Constrained Quantization
Finally, we evaluate our framework under the model size
constraints. Following Han et al. , we employ the k-means
algorithm to quantize the values into k different centroids
instead of using the linear quantization for compression,
since k-means quantization can be more effective reducing
the model size.
We compare our framework with Deep Compression 
on MobileNets and ResNet-50. From Table 6, we can see
that our framework performs much better than Deep Compression: it achieves higher accuracy with the same model
size. For compact models like MobileNets, Deep Compression signiﬁcantly degrades the performance especially under
aggressive quantization, while our framework can preserve
the accuracy much better. For instance, when Deep Compression quantizes the weights of MobileNet-V1 to 2 bits,
the accuracy drops signiﬁcantly from 70.90 to 37.62; while
our framework can still achieve 57.14 of accuracy with the
same model size. The reason is our framework makes full
use of the mixed precision by systematically searching the
optimal quantization policy.
Discussions.
In Figure 5, we visualize the bitwidth allocation strategy for MobileNet-V2. From this ﬁgure, we
can observe that our framework assigns more bitwidths to
the weights in depthwise convolution layers than pointwise
convolution layers. Intuitively, this is because the number
of parameters in the former is much smaller than the latter.
Comparing Figure 4 and Figure 5, the policies are drastically different under different optimization objectives (fewer
bitwiths for depthwise convolutions under latency optimization, more bitwidths for depthwise convolutions under model
size optimization). Our framework succeeds in learning to
adjust its bitwidth policy under different constraints.
5. Conclusion
In this paper, we propose Hardware-Aware Automated
Quantization (HAQ), an automated framework for quantization which does not require any domain experts and rulebased heuristics. We provide a learning based method that
can search the quantization policy with hardware feedback.
Compared with indirect proxy signals, our framework can
offer a specialized quantization solution for different hardware platforms. Extensive experiments demonstrate that our
framework performs better than conventional rule-based approaches for multiple objectives: latency, energy and model
size. Our framework reveals that the optimal policies on
different hardware architectures are drastically different, and
we interpreted the implication of those policies. We believe
the insights will inspire the future software and hardware
co-design for efﬁcient deployment of deep neural networks.
Acknowledgements.
We thank MIT Quest for Intelligence, MIT-IBM Watson AI Lab, Xilinx, Samsung, Intel,
ARM, Qualcomm, and SONY for supporting this research.
We thank Google Cloud and AWS Machine Learning Research Awards for providing the computation resource.