Incorporating Discrete Translation Lexicons
into Neural Machine Translation
Philip Arthur∗, Graham Neubig∗†, Satoshi Nakamura∗
∗Graduate School of Information Science, Nara Institute of Science and Technology
† Language Technologies Institute, Carnegie Mellon University
 
Neural machine translation (NMT) often
makes mistakes in translating low-frequency
content words that are essential to understanding the meaning of the sentence. We propose
a method to alleviate this problem by augmenting NMT systems with discrete translation lexicons that efﬁciently encode translations of these low-frequency words. We describe a method to calculate the lexicon probability of the next word in the translation candidate by using the attention vector of the NMT
model to select which source word lexical
probabilities the model should focus on. We
test two methods to combine this probability
with the standard NMT probability: (1) using
it as a bias, and (2) linear interpolation. Experiments on two corpora show an improvement
of 2.0-2.3 BLEU and 0.13-0.44 NIST score,
and faster convergence time.1
Introduction
Neural machine translation , Sutskever et al. )
is a variant of statistical machine translation ), using neural networks. NMT
has recently gained popularity due to its ability to
model the translation process end-to-end using a single probabilistic model, and for its state-of-the-art
performance on several language pairs .
One feature of NMT systems is that they treat
each word in the vocabulary as a vector of
1Tools to replicate our experiments can be found at
 
I come from Tunisia.
Reference:
チュニジアの出身です。
Chunisia no shusshindesu.
(I’m from Tunisia.)
ノルウェーの出身です。
Noruue- no shusshindesu.
(I’m from Norway.)
Figure 1: An example of a mistake made by NMT
on low-frequency content words.
continuous-valued numbers. This is in contrast to
more traditional SMT methods such as phrase-based
machine translation ),
which represent translations as discrete pairs of
word strings in the source and target languages. The
use of continuous representations is a major advantage, allowing NMT to share statistical power between similar words (e.g. “dog” and “cat”) or contexts (e.g. “this is” and “that is”). However, this
property also has a drawback in that NMT systems
often mistranslate into words that seem natural in the
context, but do not reﬂect the content of the source
sentence. For example, Figure 1 is a sentence from
our data where the NMT system mistakenly translated “Tunisia” into the word for “Norway.” This
variety of error is particularly serious because the
content words that are often mistranslated by NMT
are also the words that play a key role in determining
the whole meaning of the sentence.
In contrast, PBMT and other traditional SMT
methods tend to rarely make this kind of mistake.
This is because they base their translations on discrete phrase mappings, which ensure that source
words will be translated into a target word that has
been observed as a translation at least once in the
training data. In addition, because the discrete mappings are memorized explicitly, they can be learned
efﬁciently from as little as a single instance (barring
errors in word alignments). Thus we hypothesize
that if we can incorporate a similar variety of information into NMT, this has the potential to alleviate
problems with the previously mentioned fatal errors
on low-frequency words.
In this paper, we propose a simple, yet effective
method to incorporate discrete, probabilistic lexicons as an additional information source in NMT
(§3). First we demonstrate how to transform lexical translation probabilities (§3.1) into a predictive
probability for the next word by utilizing attention
vectors from attentional NMT models . We then describe methods to incorporate
this probability into NMT, either through linear interpolation with the NMT probabilities (§3.2.2) or as
the bias to the NMT predictive distribution (§3.2.1).
We construct these lexicon probabilities by using
traditional word alignment methods on the training
data (§4.1), other external parallel data resources
such as a handmade dictionary (§4.2), or using a hybrid between the two (§4.3).
We perform experiments (§5) on two English-
translation
method’s utility in improving translation accuracy
and reducing the time required for training.
Neural Machine Translation
The goal of machine translation is to translate a sequence of source words F = f |F |
into a sequence of
target words E = e|E|
1 . These words belong to the
source vocabulary Vf, and the target vocabulary Ve
respectively. NMT performs this translation by calculating the conditional probability pm(ei|F, ei−1
of the ith target word ei based on the source F and
the preceding target words ei−1
. This is done by encoding the context ⟨F, ei−1
⟩a ﬁxed-width vector ηi,
and calculating the probability as follows:
pm(ei|F, ei−1
) = softmax(Wsηi + bs),
where Ws and bs are respectively weight matrix and
bias vector parameters.
The exact variety of the NMT model depends on
how we calculate ηi used as input.
While there
are many methods to perform this modeling, we opt
to use attentional models ,
which focus on particular words in the source sentence when calculating the probability of ei. These
models represent the current state of the art in NMT,
and are also convenient for use in our proposed
method. Speciﬁcally, we use the method of Luong et
al. , which we describe brieﬂy here and refer
readers to the original paper for details.
First, an encoder converts the source sentence F
into a matrix R where each column represents a single word in the input sentence as a continuous vector. This representation is generated using a bidirectional encoder
−→r j = enc(embed(fj), −→r j−1)
←−r j = enc(embed(fj), ←−r j+1)
rj = [←−r j; −→r j].
Here the embed(·) function maps the words into a
representation , and enc(·) is
a stacking long short term memory (LSTM) neural
network . Finally we concatenate the two vectors −→r j and ←−r j into a bidirectional representation rj. These vectors are further
concatenated into the matrix R where the jth column corresponds to rj.
Next, we generate the output one word at a time
while referencing this encoded input sentence and
tracking progress with a decoder LSTM. The decoder’s hidden state hi is a ﬁxed-length continuous
vector representing the previous target words ei−1
initialized as h0 = 0. Based on this hi, we calculate
a similarity vector αi, with each element equal to
αi,j = sim(hi, rj).
sim(·) can be an arbitrary similarity function, which
we set to the dot product, following Luong et al.
 . We then normalize this into an attention
vector, which weights the amount of focus that we
put on each word in the source sentence
ai = softmax(αi).
This attention vector is then used to weight the encoded representation R to create a context vector ci
for the current time step
Finally, we create ηi by concatenating the previous
hidden state hi−1 with the context vector, and performing an afﬁne transform
ηi = Wη[hi−1; ci] + bη,
Once we have this representation of the current
state, we can calculate pm(ei|F, ei−1
) according to
Equation (1). The next word ei is chosen according
to this probability, and we update the hidden state by
inputting the chosen word into the decoder LSTM
hi = enc(embed(ei), hi−1).
If we deﬁne all the parameters in this model as
θ, we can then train the model by minimizing the
negative log-likelihood of the training data
ˆθ = argmin
−log(pm(ei|F, ei−1
Integrating Lexicons into NMT
In §2 we described how traditional NMT models
calculate the probability of the next target word
pm(ei|ei−1
, F). Our goal in this paper is to improve
the accuracy of this probability estimate by incorporating information from discrete probabilistic lexicons. We assume that we have a lexicon that, given
a source word f, assigns a probability pl(e|f) to target word e. For a source word f, this probability will
generally be non-zero for a small number of translation candidates, and zero for the majority of words
in VE. In this section, we ﬁrst describe how we incorporate these probabilities into NMT, and explain
how we actually obtain the pl(e|f) probabilities in
Converting Lexicon Probabilities into
Conditioned Predictive Proabilities
First, we need to convert lexical probabilities pl(e|f)
for the individual words in the source sentence
to a form that can be used together with
pm(ei|ei−1
Given input sentence F, we can
construct a matrix in which each column corresponds to a word in the input sentence, each row
corresponds to a word in the VE, and the entry corresponds to the appropriate lexical probability:
pl(e = 1|f1)
pl(e = 1|f|F |)
pl(e = |Ve||f1) · · · pl(e = |Ve||f|F |)
This matrix can be precomputed during the encoding
stage because it only requires information about the
source sentence F.
Next we convert this matrix into a predictive probability over the next word: pl(ei|F, ei−1
). To do so
we use the alignment probability a from Equation
(3) to weight each column of the LF matrix:
pl(ei|F, ei−1
) = LFai =
pl(e = 1|f1) · · · plex(e = 1|f|F |)
pl(e = Ve|f1) · · · plex(e = Ve|f|F |)
This calculation is similar to the way how attentional
models calculate the context vector ci, but over a
vector representing the probabilities of the target vocabulary, instead of the distributed representations
of the source words. The process of involving ai
is important because at every time step i, the lexical probability pl(ei|ei−1
, F) will be inﬂuenced by
different source words.
Combining Predictive Probabilities
After calculating the lexicon predictive probability pl(ei|ei−1
, F), next we need to integrate
this probability with the NMT model probability
pm(ei|ei−1
, F). To do so, we examine two methods:
(1) adding it as a bias, and (2) linear interpolation.
Model Bias
In our ﬁrst bias method, we use pl(·) to bias
the probability distribution calculated by the vanilla
NMT model. Speciﬁcally, we add a small constant ǫ
to pl(·), take the logarithm, and add this adjusted log
probability to the input of the softmax as follows:
pb(ei|F, ei−1
) = softmax(Wsηi + bs+
log(pl(ei|F, ei−1
We take the logarithm of pl(·) so that the values will
still be in the probability domain after the softmax is
calculated, and add the hyper-parameter ǫ to prevent
zero probabilities from becoming −∞after taking
the log. When ǫ is small, the model will be more
heavily biased towards using the lexicon, and when
ǫ is larger the lexicon probabilities will be given less
weight. We use ǫ = 0.001 for this paper.
Linear Interpolation
We also attempt to incorporate the two probabilities through linear interpolation between the standard NMT probability model probability pm(·) and
the lexicon probability pl(·). We will call this the
linear method, and deﬁne it as follows:
po(ei|F, ei−1
pl(ei = 1|F, ei−1
pm(e = 1|F, ei−1
pl(ei = |Ve||F, ei−1
) pm(e = |Ve||F, ei−1
where λ is an interpolation coefﬁcient that is the result of the sigmoid function λ = sig(x) =
x is a learnable parameter, and the sigmoid function ensures that the ﬁnal interpolation level falls between 0 and 1. We choose x = 0 (λ = 0.5) at the
beginning of training.
This notation is partly inspired by Allamanis et
al. and Gu et al. who use linear interpolation to merge a standard attentional model with
a “copy” operator that copies a source word as-is
into the target sentence. The main difference is that
they use this to copy words into the output while our
method uses it to inﬂuence the probabilities of all
target words.
Constructing Lexicon Probabilities
In the previous section, we have deﬁned some ways
to use predictive probabilities pl(ei|F, ei−1
on word-to-word lexical probabilities pl(e|f). Next,
we deﬁne three ways to construct these lexical probabilities using automatically learned lexicons, handmade lexicons, or a combination of both.
Automatically Learned Lexicons
In traditional SMT systems, lexical translation probabilities are generally learned directly from parallel
data in an unsupervised fashion using a model such
as the IBM models . These models can be used to estimate
the alignments and lexical translation probabilities
pl(e|f) between the tokens of the two languages using the expectation maximization (EM) algorithm.
First in the expectation step, the algorithm estimates the expected count c(e|f). In the maximization step, lexical probabilities are calculated by dividing the expected count by all possible counts:
pl,a(e|f) =
˜e c(f, ˜e),
The IBM models vary in level of reﬁnement, with
Model 1 relying solely on these lexical probabilities, and latter IBM models (Models 2, 3, 4, 5)
introducing more sophisticated models of fertility
and relative alignment. Even though IBM models
also occasionally have problems when dealing with
the rare words ), traditional SMT systems generally achieve better translation accuracies of lowfrequency words than NMT systems , indicating that these problems are less
prominent than they are in NMT.
Note that in many cases, NMT limits the target
vocabulary for training speed or
memory constraints, resulting in rare words not being covered by the NMT vocabulary VE. Accordingly, we allocate the remaining probability assigned
by the lexicon to the unknown word symbol ⟨unk⟩:
pl,a(e = ⟨unk⟩|f) = 1 −
pl,a(e = i|f).
Manual Lexicons
In addition,
for many language pairs,
broadcoverage handmade dictionaries exist, and it is desirable that we be able to use the information included
in them as well. Unlike automatically learned lexicons, however, handmade dictionaries generally do
not contain translation probabilities.
To construct
the probability pl(e|f), we deﬁne the set of translations Kf existing in the dictionary for particular
source word f, and assume a uniform distribution
over these words:
pl,m(e|f) =
Following Equation (5), unknown source words will
assign their probability mass to the ⟨unk⟩tag.
Hybrid Lexicons
Handmade lexicons have broad coverage of words
but their probabilities might not be as accurate as the
Table 1: Corpus details.
learned ones, particularly if the automatic lexicon is
constructed on in-domain data. Thus, we also test a
hybrid method where we use the handmade lexicons to complement the automatically learned lexicon.2 3 Speciﬁcally, inspired by phrase table ﬁll-up
used in PBMT systems , we
use the probability of the automatically learned lexicons pl,a by default, and fall back to the handmade
lexicons pl,m only for uncovered words:
pl,h(e|f) =
if f is covered
Experiment & Result
In this section, we describe experiments we use to
evaluate our proposed methods.
Dataset: We perform experiments on two widelyused tasks for the English-to-Japanese language
pair: KFTT and BTEC . KFTT is a collection of Wikipedia article
about city of Kyoto and BTEC is a travel conversation corpus. BTEC is an easier translation task than
KFTT, because KFTT covers a broader domain, has
a larger vocabulary of rare words, and has relatively
long sentences. The details of each corpus are depicted in Table 1.
We tokenize English according to the Penn Treebank standard and lowercase,
2Alternatively, we could imagine a method where we combined the training data and dictionary before training the word
alignments to create the lexicon. We attempted this, and results
were comparable to or worse than the ﬁll-up method, so we use
the ﬁll-up method for the remainder of the paper.
3While most words in the Vf will be covered by the learned
lexicon, many words (13% in experiments) are still left uncovered due to alignment failures or other factors.
and tokenize Japanese using KyTea . We limit training sentence length up to 50
in both experiments and keep the test data at the
original length. We replace words of frequency less
than a threshold u in both languages with the ⟨unk⟩
symbol and exclude them from our vocabulary. We
choose u = 1 for BTEC and u = 3 for KFTT, resulting in |Vf| = 17.8k, |Ve| = 21.8k for BTEC and
|Vf| = 48.2k, |Ve| = 49.1k for KFTT.
NMT Systems: We build the described models using the Chainer4 toolkit. The depth of the stacking
LSTM is d = 4 and hidden node size h = 800.
We concatenate the forward and backward encodings (resulting in a 1600 dimension vector) and then
perform a linear transformation to 800 dimensions.
We train the system using the Adam optimization method with the default settings: α = 1e−3, β1 = 0.9, β2 = 0.999, ǫ =
1e−8. Additionally, we add dropout with drop rate r = 0.2 at the last layer of
each stacking LSTM unit to prevent overﬁtting. We
use a batch size of B = 64 and we run a total of
N = 14 iterations for all data sets. All of the experiments are conducted on a single GeForce GTX
TITAN X GPU with a 12 GB memory cache.
At test time, we use beam search with beam size
b = 5. We follow Luong et al. in replacing every unknown token at position i with the target token that maximizes the probability pl,a(ei|fj).
We choose source word fj according to the highest alignment score in Equation (3). This unknown
word replacement is applied to both baseline and
proposed systems. Finally, because NMT models
tend to give higher probabilities to shorter sentences
 , we discount the probability of
⟨EOS⟩token by 10% to correct for this bias.
Traditional SMT Systems: We also prepare two
traditional SMT systems for comparison: a PBMT
system using Moses5 , and a hierarchical phrase-based MT system using Travatar6 ,
Systems are built using the default settings, with
models trained on the training data, and weights
tuned on the development data.
We use a total of 3 lexicons for the
4 
5 
6 
Table 2: Accuracies for the baseline attentional NMT (attn) and the proposed bias-based method using
the automatic (auto-bias) or hybrid (hyb-bias) dictionaries. Bold indicates a gain over the attn
baseline, † indicates a signiﬁcant increase at p < 0.05, and ∗indicates p < 0.10. Traditional phrase-based
(pbmt) and hierarchical phrase based (hiero) systems are shown for reference.
proposed method, and apply bias and linear
method for all of them, totaling 6 experiments. The
ﬁrst lexicon (auto) is built on the training data
using the automatically learned lexicon method of
§4.1 separately for both the BTEC and KFTT experiments. Automatic alignment is performed using
GIZA++ . The second lexicon
(man) is built using the popular English-Japanese
dictionary Eijiro7 with the manual lexicon method
of §4.2. Eijiro contains 104K distinct word-to-word
translation entries. The third lexicon (hyb) is built
by combining the ﬁrst and second lexicon with the
hybrid method of §4.3.
Evaluation:
We use standard single reference
BLEU-4 to evaluate the translation performance. Additionally, we also use NIST
 , which is a measure that puts a
particular focus on low-frequency word strings, and
thus is sensitive to the low-frequency words we are
focusing on in this paper. We measure the statistical
signiﬁcant differences between systems using paired
bootstrap resampling with 10,000 iterations and measure statistical signiﬁcance at the
p < 0.05 and p < 0.10 levels.
Additionally, we also calculate the recall of rare
words from the references. We deﬁne “rare words”
as words that appear less than eight times in the target training corpus or references, and measure the
percentage of time they are recovered by each translation system.
Effect of Integrating Lexicons
In this section, we ﬁrst a detailed examination of
the utility of the proposed bias method when used
7 
time (minutes)
Figure 2: Training curves for the baseline attn and
the proposed bias method.
with the auto or hyb lexicons, which empirically
gave the best results, and perform a comparison
among the other lexicon integration methods in the
following section. Table 2 shows the results of these
methods, along with the corresponding baselines.
First, compared to the baseline attn, our bias
method achieved consistently higher scores on both
test sets. In particular, the gains on the more difﬁcult KFTT set are large, up to 2.3 BLEU, 0.44 NIST,
and 30% Recall, demonstrating the utility of the proposed method in the face of more diverse content
and fewer high-frequency words.
Compared to the traditional
pbmt systems
hiero, particularly on KFTT we can see that the
proposed method allows the NMT system to exceed
the traditional SMT methods in BLEU. This is despite the fact that we are not performing ensembling,
which has proven to be essential to exceed traditional systems in several previous works (Sutskever
Do you have an opinion regarding extramarital affairs?
不倫に関して意見がありますか。
Furin ni kanshite iken ga arimasu ka.
サッカーに関する意見はありますか。
Sakk¯a ni kansuru iken wa arimasu ka. (Do you have an opinion about soccer?)
不倫に関して意見がありますか。
Furin ni kanshite iken ga arimasu ka. (Do you have an opinion about affairs?)
Could you put these fragile things in a safe place?
この壊れ物を安全な場所に置いてもらえませんか。
Kono kowaremono o anzen’na basho ni oite moraemasen ka.
貴重品を安全に出したいのですが。
Kich¯o-hin o anzen ni dashitai nodesuga. (I’d like to safely put out these valuables.)
この壊れ物を安全な場所に置いてもらえませんか。
Kono kowaremono o anzen’na basho ni oite moraemasen ka.
(Could you put these fragile things in a safe place?)
Table 3: Examples where the proposed auto-bias improved over the baseline system attn. Underlines
indicate words were mistaken in the baseline output but correct in the proposed model’s output.
et al., 2014; Luong et al., 2015a; Sennrich et al.,
Interestingly, despite gains in BLEU, the
NMT methods still fall behind in NIST score on
the KFTT data set, demonstrating that traditional
SMT systems still tend to have a small advantage in
translating lower-frequency words, despite the gains
made by the proposed method.
In Table 3, we show some illustrative examples
where the proposed method (auto-bias) was able
to obtain a correct translation while the normal attentional model was not.
The ﬁrst example is a
mistake in translating “extramarital affairs” into the
Japanese equivalent of “soccer,” entirely changing
the main topic of the sentence. This is typical of the
errors that we have observed NMT systems make
(the mistake from Figure 1 is also from attn, and
was ﬁxed by our proposed method). The second example demonstrates how these mistakes can then affect the process of choosing the remaining words,
propagating the error through the whole sentence.
Next, we examine the effect of the proposed
method on the training time for each neural MT
method, drawing training curves for the KFTT data
in Figure 2. Here we can see that the proposed bias
training methods achieve reasonable BLEU scores
in the upper 10s even after the ﬁrst iteration. In contrast, the baseline attn method has a BLEU score
of around 5 after the ﬁrst iteration, and takes signiﬁcantly longer to approach values close to its maximal
Figure 3: Attention matrices for baseline attn and
proposed bias methods.
Lighter colors indicate
stronger attention between the words, and boxes surrounding words indicate the correct alignments.
accuracy. This shows that by incorporating lexical
probabilities, we can effectively bootstrap the learning of the NMT system, allowing it to approach an
appropriate answer in a more timely fashion.8
It is also interesting to examine the alignment vec-
8Note that these gains are despite the fact that one iteration
of the proposed method takes a longer (167 minutes for attn
vs. 275 minutes for auto-bias) due to the necessity to calculate and use the lexical probability matrix for each sentence.
It also takes an additional 297 minutes to train the lexicon with
GIZA++, but this can be greatly reduced with more efﬁcient
training methods .
Table 4: A comparison of the bias and linear
lexicon integration methods on the automatic, manual, and hybrid lexicons. The ﬁrst line without lexicon is the traditional attentional NMT.
tors produced by the baseline and proposed methods, a visualization of which we show in Figure
For this sentence, the outputs of both methods were both identical and correct, but we can
see that the proposed method (right) placed sharper
attention on the actual source word corresponding to content words in the target sentence.
trend of peakier attention distributions in the proposed method held throughout the corpus, with
the per-word entropy of the attention vectors being
3.23 bits for auto-bias, compared with 3.81 bits
for attn, indicating that the auto-bias method
places more certainty in its attention decisions.
Comparison of Integration Methods
Finally, we perform a full comparison between the
various methods for integrating lexicons into the
translation process, with results shown in Table 4.
In general the bias method improves accuracy for
the auto and hyb lexicon, but is less effective for
the man lexicon. This is likely due to the fact that
the manual lexicon, despite having broad coverage,
did not sufﬁciently cover target-domain words (coverage of unique words in the source vocabulary was
35.3% and 9.7% for BTEC and KFTT respectively).
Interestingly,
is reversed
linear method, with it improving man systems,
but causing decreases when using the auto and
hyb lexicons.
This indicates that the linear
method is more suited for cases where the lexicon does not closely match the target domain, and
plays a more complementary role.
Compared to
the log-linear modeling of bias, which strictly enforces constraints imposed by the lexicon distribution , linear interpolation is intuitively more appropriate for integrating this type of
complimentary information.
On the other hand, the performance of linear interpolation was generally lower than that of the bias
method. One potential reason for this is the fact that
we use a constant interpolation coefﬁcient that was
set ﬁxed in every context. Gu et al. have recently developed methods to use the context information from the decoder to calculate the different interpolation coefﬁcients for every decoding step, and
it is possible that introducing these methods would
improve our results.
Additional Experiments
To test whether the proposed method is useful on
larger data sets, we also performed follow-up experiments on the larger Japanese-English ASPEC
dataset that consist of 2
million training examples, 63 million tokens, and
81,000 vocabulary size. We gained an improvement
in BLEU score from 20.82 using the attn baseline
to 22.66 using the auto-bias proposed method.
This experiment shows that our method scales to
larger datasets.
Related Work
From the beginning of work on NMT, unknown
words that do not exist in the system vocabulary
have been focused on as a weakness of these systems. Early methods to handle these unknown words
replaced them with appropriate words in the target
vocabulary 
according to a lexicon similar to the one used in this
work. In contrast to our work, these only handle
unknown words and do not incorporate information
from the lexicon in the learning procedure.
There have also been other approaches that incorporate models that learn when to copy words as-is
into the target language . These models
are similar to the linear approach of §3.2.2, but
are only applicable to words that can be copied asis into the target language. In fact, these models can
be thought of as a subclass of the proposed approach
that use a lexicon that assigns a all its probability to
target words that are the same as the source. On the
other hand, while we are simply using a static interpolation coefﬁcient λ, these works generally have
a more sophisticated method for choosing the interpolation between the standard and “copy” models.
Incorporating these into our linear method is a
promising avenue for future work.
In addition Mi et al. have also recently proposed a similar approach by limiting the number of
vocabulary being predicted by each batch or sentence. This vocabulary is made by considering the
original HMM alignments gathered from the training corpus. Basically, this method is a speciﬁc version of our bias method that gives some of the vocabulary a bias of negative inﬁnity and all other vocabulary a uniform distribution. Our method improves
over this by considering actual translation probabilities, and also considering the attention vector when
deciding how to combine these probabilities.
Finally, there have been a number of recent works
that improve accuracy of low-frequency words using character-based translation models . However, Luong and Manning 
have found that even when using character-based
models, incorporating information about words allows for gains in translation accuracy, and it is likely
that our lexicon-based method could result in improvements in these hybrid systems as well.
Conclusion & Future Work
In this paper, we have proposed a method to incorporate discrete probabilistic lexicons into NMT
systems to solve the difﬁculties that NMT systems
have demonstrated with low-frequency words. As
a result, we achieved substantial increases in BLEU
(2.0-2.3) and NIST (0.13-0.44) scores, and observed
qualitative improvements in the translations of content words.
For future work, we are interested in conducting
the experiments on larger-scale translation tasks. We
also plan to do subjective evaluation, as we expect
that improvements in content word translation are
critical to subjective impressions of translation results.
Finally, we are also interested in improvements to the linear method where λ is calculated
based on the context, instead of using a ﬁxed value.
Acknowledgment
We thank Makoto Morishita and Yusuke Oda for
their help in this project. We also thank the faculty
members of AHC lab for their supports and suggestions.
This work was supported by grants from the Ministry of Education, Culture, Sport, Science, and
Technology of Japan and in part by JSPS KAKENHI
Grant Number 16H05873.