Pixel-Level Domain Transfer
Donggeun Yoo1, Namil Kim1, Sunggyun Park1, Anthony S. Paek2, In So Kweon1
1KAIST, Daejeon, South Korea.
2Lunit Inc., Seoul, South Korea.
{dgyoo,nikim}@rcv.kaist.ac.kr
{sunggyun,iskweon}@kaist.ac.kr
 
Abstract. We present an image-conditional image generation model.
The model transfers an input domain to a target domain in semantic
level, and generates the target image in pixel level. To generate realistic
target images, we employ the real/fake-discriminator as in Generative
Adversarial Nets , but also introduce a novel domain-discriminator to
make the generated image relevant to the input image. We verify our
model through a challenging task of generating a piece of clothing from
an input image of a dressed person. We present a high quality clothing
dataset containing the two domains, and succeed in demonstrating decent
Keywords: Domain transfer, Generative Adversarial Nets.
Introduction
Every morning, we agonize in front of the closet over what to wear, how to
dress up, and imagine ourselves with diﬀerent clothes on. To generate mental
images of ourselves wearing clothes on a hanger is an eﬀortless work for our
brain. In our daily lives, we ceaselessly perceive visual scene or objects, and often
transfer them to diﬀerent forms by the mental imagery. Our focus of this paper
lies on the problem; to enable a machine to transfer a visual input into diﬀerent
forms and to visualize the various forms by generating a pixel-level image.
Image generation has been attempted by a long line of works but
generating realistic images has been challenging since an image itself is high
dimensional and has complex relations between pixels. However, several recent
works have succeeded in generating realistic images , with the drastic
advances of deep learning. Although these works are similar to ours in terms of
image generation, ours is distinct in terms of image-conditioned image generation. We take an image as a conditioned input lying in a domain, and re-draw a
target image lying on another.
In this work, we deﬁne two domains; a source domain and a target domain.
The two domains are connected by a semantic meaning. For instance, if we deﬁne
an image of a dressed person as a source domain, a piece of the person’s clothing
is deﬁned as the target domain. Transferring an image domain into a diﬀerent
 
Yoo et al.
A source image.
Possible target images.
Fig. 1. A real example showing non-deterministic property of target image in the pixellevel domain transfer problem.
image domain has been proposed in computer vision , but all
these adaptations take place in the feature space, i.e. the model parameters are
adapted. However, our method directly produces target images.
We transfer a knowledge in a source domain to a pixel-level target image
while overcoming the semantic gap between the two domains. Transferred image
should look realistic yet preserving the semantic meaning. To do so, we present a
pixel-level domain converter composed of an encoder for semantic embedding of a
source and a decoder to produce a target image. However, training the converter
is not straightforward because the target is not deterministic . Given a source
image, the number of possible targets is unlimited as the examples in Fig. 1 show.
To challenge this problem, we introduce two strategies as follows.
To train our converter, we ﬁrst place a separate network named domain
discriminator on top of the converter. The domain discriminator takes a pair
of a source image and a target image, and is trained to make a binary decision
whether the input pair is associated or not. The domain discriminator then
supervises the converter to produce associated images. Both of the networks
are jointly optimized by the adversarial training method, which Goodfellow et
al. propose for generating realistic images. Such binary supervision solves
the problem of non-deterministic property of the target domain and enables
us to train the semantic relation between the domains. Secondly, in addition
to the domain discriminator, we also employ the discriminator of , which is
supervised by the labels of “real” or “fake”, to produce realistic images.
Our framework deals with the three networks that play distinct roles. Labels
are given to the two discriminators, and they supervise the converter to produce
images that are realistic yet keeping the semantic meaning. Those two discriminators become unnecessary after the training stage and the converter is our
ultimate goal. We verify our method by quite challenging settings; the source
domain is a natural human image and the target domain is a product image
of the person’s top. To do so, we have made a large dataset named LookBook,
which contains in total of 84k images, where 75k human images are associated
with 10k top product images. With this dataset, our model succeeds in generating decent target images, and the evaluation result veriﬁes the eﬀectiveness of
our domain discriminator to train the converter.
Pixel-Level Domain Transfer
Contributions In summary, our contributions are,
1. Proposing the ﬁrst framework for semantically transferring a source domain
to a target domain in pixel-level.
2. Proposing a novel discriminator that enables us to train the semantic relation
between the domains.
3. Building a large clothing dataset containing two domains, which is expected
to contribute to a wide range of domain adaptation researches.
Related Work
Our work is highly related with the image-generative models since our ﬁnal result from an input image is also an image. The image-generative models can
be grouped into two families; generative parametric approaches and
adversarial approaches . The generative parametric approaches often
have troubles in training complexities, which results in a low rate of success in
generating realistic natural images. The adversarial approaches originate from
Generative Adversarial Nets (GAN) proposed by Goodfellow et al. . GAN
framework introduces a generator (i.e. a decoder), which generates images, and
a discriminator, which distinguishes between generated samples and real images.
The two networks are optimized to go against each other; the discriminator
is trained to distinguish between real and fake samples while the generator is
trained to confuse the discriminator. Mirza and Osindero extend GAN to
a class conditional version, and Denton et al. improve the image resolution
in a coarse-to-ﬁne fashion. However, GAN is known to be unstable due to the
adversarial training, often resulting in incomprehensible or noisy images. Quite
recently, Radford et al. have proposed architectures named Deep Convolutional GANs, which is relatively more stable to be trained, and have succeeded in
generating high quality images. As approaches focusing on diﬀerent network architectures, a recurrent network based model and a deconvolutional network
based model have also been proposed.
The recent improvements of GAN framework and its successful results motivate us to adopt the networks. We replace the generator with our converter
which is an image-conditioned model, while is class-conditional and is
attribute-conditional. The generator of Mathieu et al. is similar to ours in
that it is conditioned with video frames to produce next frames. They add a
mean square loss to the generator to strongly relate the input frames to the next
frames. However, we cannot use such loss due to the non-deterministic property of the target domain. We therefore introduce a novel discriminator named
domain discriminator.
Our work is also related with the transfer learning, also called as the domain adaptation. This aims to transfer the model parameter trained on a source
domain to a diﬀerent domain. For visual recognition, many methods to adapt
domains have been proposed. Especially for the recent use of the deep
convolutional neural network , it has been common to pre-train a large
Yoo et al.
network over ImageNet and transfer the parameters to a target domain . Similar to our clothing domains, Chen et al. and Huang et
al. address a gap between fashion shopping mall images and unconstrained
human images for the clothing attribute recognition and the product retrieval . Ganin and Lempitsky also learns domain-invariant features by
the adversarial training method. However, all these methods are diﬀerent from
ours in respect of cross-domain image generation. The adaptation of these works
takes place in the feature space, while we directly produce target images from
the source images.
Review of Generative Adversarial Nets
Generative Adversarial Nets (GAN) is a generalized framework for generative
models which and we utilize for visual data. In this section, we brieﬂy
review GAN in the context of image data. GAN is formed by an adversarial
setting of two networks; a generator and a discriminator. The eventual goal of
the generator is to map a small dimensional space Z to a pixel-level image space,
i.e., to enable the generator to produce a realistic image from an input random
vector z ∈Z.
To train such a generator, a discriminator is introduced. The discriminator takes either a real image or a fake image drawn by the generator, and
distinguishes whether its input is real or fake. The training procedure can be
intuitively described as follows. Given an initialized generator G0, an initial discriminator D0
R is ﬁrstly trained with real training images {Ii} and fake images
{ˆIj = G0(zj)} drawn by the generator. After that, we freeze the updated discriminator D1
R and train the generator G0 to produce better images, which would
lead the discriminator D1
R to misjudge as real images. These two procedures are
repeated until they converge. The objective function can be represented as a
minimax objective as,
EI∼pdata(I)[log(DR(I))] + Ez∼pnoise(z)[log(1 −DR(ˆI))],
where ΘG and ΘD
R indicate the model parameters of the generator and the
discriminator respectively. Here, the discriminator produces a scalar probability
that is high when the input I is real but otherwise low. The discriminator loss
function LD
R is deﬁned as the binary cross entropy,
R (I) = −t · log[DR(I)] + (t −1) · log[1 −DR(I)],
if I ∈{Ii}
if I ∈{ˆIj}.
One interesting fact in the GAN framework is that the model is trained under
the lowest level of supervision; real or fake. Without strong and ﬁne supervisions
(e.g. mean square error between images), this framework succeeds in generating
realistic images. This motivates us to raise the following question. Under such a
Pixel-Level Domain Transfer
low-level supervision, would it be possible to train a connection between distinct
image domains? If so, could we transform an image lying in a domain to a realistic
image lying on another? Through this study, we have succeeded in doing so, and
the method is to be presented in Sec. 4.
Pixel-Level Domain Transfer
In this section, we introduce the pixel-level domain transfer problem. Let us
deﬁne a source image domain S ⊂RW ×H×3 and a target image domain T ⊂
RW ×H×3. Given a transfer function named a converter C, our task is to transfer
a source image IS ∈S to a target image ˆIT ∈T such as
ˆIT = C(IS|ΘC),
where ΘC is the model parameter of the converter. Note that the inference ˆIT
is not a feature vector but itself a target image of W × H × 3 size. To do so,
we employ a convolutional network model for the converter C, and adopt a
supervised learning to optimize the model parameter ΘC. In the training data,
each source image IS should be associated with a ground-truth target image IT .
Converter Network
Our target output is a pixel-level image. Furthermore, the two domains are
connected by a semantic meaning. Pixel-level generation itself is challenging but
the semantic transfer makes the problem even more diﬃcult. A converter should
selectively summarize the semantic attributes from a source image and then
produce a transformed pixel-level image.
The top network in Fig. 2 shows the architecture of the converter we propose.
The converter is a uniﬁed network that is end-to-end trainable but we can divide
it into the two parts; an encoder and a decoder. The encoder part is composed of
ﬁve convolutional layers to abstract the source into a semantic 64-dimensional
code. This abstraction procedure is signiﬁcant since our source domain (e.g.
natural fashion image) and target domain (e.g. product image) are paired in a
semantic content (e.g. the product). The 64-dimensional code should capture the
semantic attributes (e.g. category, color, etc.) of a source to be well decoded into
a target. The code is then fed by the decoder, which constructs a relevant target
through the ﬁve decoding layers. Each decoding layer conducts the fractionalstrided convolutions, where the convolution operates in the opposite direction.
The reader is referred to Table 1 for more details about the architectures of the
encoder and the decoder.
Discriminator Networks
Given the converter, a simple choice of a loss function to train it is the meansquare error (MSE) such as ||ˆIT −IT ||2
2. However, MSE may not be a proper
Yoo et al.
Source domain.
Associated.
Unassociated.
Channel-concatenation.
𝐼𝑇or 𝐼𝑇or 𝐼𝑇
Converter 𝐶.
Real/fake-discriminator 𝐷𝑅.
Domain-discriminator 𝐷𝐴.
Target domain.
𝐼𝑇or 𝐼𝑇or 𝐼𝑇
Fig. 2. Whole architecture for pixel-level domain transfer.
choice due to critical mismatches between MSE and our problem. Firstly, MSE is
not suitable for pixel-level supervision for natural images. It has been well known
that MSE is prone to produce blurry images because it inherently assumes that
the pixels are drawn from Gaussian distribution . Pixels in natural images
are actually drawn from complex multi-modal distributions. Besides its intrinsic
limitation, it causes another critical problem especially for the pixel-level domain
transfer as follows.
Given a source image, the target is actually not unique in our problem. Our
target domain is the lowest pixel-level image space, not the high-level semantic
feature space. Thus, the number of possible targets from a source is inﬁnite.
Fig. 1 is a typical example showing that the target is not unique. The clothing
in the target domain is captured in various shapes, and all of the targets are true.
Besides the shapes, the target image can be captured from various viewpoints,
which results in geometric transformations. However, minimizing MSE always
forces the converter to ﬁt into one of them. Image-to-image training with MSE
never allows a small geometric miss-alignment as well as various shapes. Thus,
training the converter with MSE is not a proper use for this problem. It would
Pixel-Level Domain Transfer
Filter size
Stride Pad
Activation
5×5×{3, 3, 6}
Conv. 5 {64, 1, 1}
{#, ×, ×} {L-ReLU, sigmoid, sigmoid}
(a) Details of the {encoder, real/fake discriminator, domain discriminator}.
Filter size
(w×h×ch) Stride Pad Batch
Activation
(b) Details of the decoder.
Table 1. Details of each network. In (a), each entry in {·} corresponds to each network.
L-ReLU is leaky-ReLU. In (b), F denotes fractional-stride. The activation from the ﬁrst
layer is reshaped into 4×4×1,024 size before being fed to the second layer.
be better to introduce a new loss function which is tolerant to the diversity of
the pixel-level target domain.
In this paper, on top of the converter, we place a discriminator network
which plays a role as a loss function. As in , the discriminator network
guides the converter to produce realistic target under the supervision of real/fake.
However, this is not the only role that our discriminator plays. If we simply use
the original discriminator replacing MSE, a produced target could look realistic
but its contents may not be relevant to the source. This is because there is no
pairwise supervision such as MSE. Only real/fake supervision exists.
Given arbitrary image triplets (I+
S ) in the source domain S, where
S are about the same object while I−
S is not, a converter transfers them
into the images (ˆI+
T ) in the target domain T. Let us assume that these
transferred images look realistic due to the real/fake discriminator. Beyond the
realistic results, the best converter C should satisfy the following condition,
where s(·) is a semantic similarity function. This condition means that an estimated target should be semantically associated with the source. One supervision
candidate to let the converter C meet the condition is the combined use of MSE
with the real/fake loss. However, again, it is not the best option for our problem because the ground-truth IT is not unique. Thus, we propose a novel discriminator, named domain discriminator, to take the pairwise supervision into
consideration.
Yoo et al.
The domain discriminator DA is the lowest network illustrated in Fig. 2.
To enable pairwise supervision while being tolerant to the target diversity, we
signiﬁcantly loosen the level of supervision compared to MSE. The network DA
takes a pair of source and target as input, and produces a scalar probability
of whether the input pair is associated or not. Let us assume that we have a
source IS, its ground truth target IT and an irrelevant target I−
T . We also have
an inference ˆIT from the converter C. We then deﬁne the loss LD
A of the domain
discriminator DA as,
A(IS, I) = −t · log[DA(IS, I)] + (t −1) · log[1 −DA(IS, I)],
if I = ˆIT
The source IS is always fed by the network as one of the input pair while the
other I is chosen among (I−
T , ˆIT , IT ) with equal probability. Only when the
source IS and its ground-truth IT is paired as input, the domain discriminator
is trained to produce high probability whereas it minimizes the probability in
other cases. Here, let us pay more attention to the input case of (IS, ˆIT ).
The produced target ˆIT comes from the source but we regard it as an unassociated pair (t=0) when we train the domain discriminator. Our intention of doing
so is for adversarial training of the converter and the domain discriminator. The
domain discriminator loss is minimized for training the domain discriminator
while it is maximized for training the converter. The better the domain discriminator distinguishes a ground-truth IT and an inference ˆIT , the better the
converter transfers the source into a relevant target.
In summary, we employ both of the real/fake discriminator and the domain
discriminator for adversarial training. These two networks play a role as a loss to
optimize the converter, but have diﬀerent objectives. The real/fake discriminator
penalizes an unrealistic target while the domain discriminator penalizes a target
being irrelevant to a source. The architecture of the real/fake discriminator is
identical to that of as illustrated in Fig. 2. The domain discriminator also
has the same architecture except for the input ﬁlter size since our input pair is
stacked across the channel axis. Several architecture families have been proposed
to feed a pair of images to compare them but a simple stack across the channel
axis has shown the best performance as studied in . The reader is referred to
Table 1 for more details about the discriminator architectures.
Adversarial Training
In this section, we present the method for training the converter C, the real/fake
discriminator DR and the domain discriminator DA. Because we have the two
discriminators, the two loss functions have been deﬁned. The real/fake discriminator loss LD
R is Eq. (2), and the domain discriminator loss LD
A is Eq. (5). With
the two loss functions, we follow the adversarial training procedure of .
Pixel-Level Domain Transfer
Algorithm 1: Adversarial training for the pixel-level domain transfer.
Set the learning rate η and the batch size B.
Initialize each network parameters ΘC, ΘD
Data: Paired image set {In
while not converged do
Get a source batch
i=1 and a target batch
where Ii is a target sample randomly chosen from (Ii
Update the real/fake discriminator DR:
Update the domain discriminator DA:
Update the converter C:
ΘC ←ΘC −η · 1
Given a paired image set for training, let us assume that we get a source batch
S} and a target batch {Ii} where a target sample Ii is stochastically chosen
T ) with an equal probability. At ﬁrst, we train the discriminators.
We train the real/fake discriminator DR with the target batch to reduce the loss
of Eq. (2). The domain discriminator DA is trained with both of source and
target batches to reduce the loss of Eq. (5). After that, we freeze the updated
discriminator parameters { ˆΘD
A }, and optimize the converter parameters ΘC
to increase the losses of both discriminators. The loss function of the converter
can be represented as,
LC(IS, I) = −1
A(IS, I), s.t. I = sel
{IT , ˆIT , I−
where sel(·) is a random selection function with equal probability. The reader is
referred to Algorithm 1 for more details of the training procedures.
Evaluation
In this section, we verify our pixel-level domain transfer by a challenging task;
a natural human image belongs to the source domain, and a product image of
that person’s top belongs to the target domain. We ﬁrst give a description on
the dataset in Sec. 5.1. We then provide details on the experimental setting in
Sec. 5.2, and we demonstrate and discuss the results in Sec. 5.3∼5.5.
LookBook Dataset
We make a dataset named LookBook that covers two fashion domains. Images
of one domain contain fashion models, and those of the other domain contain
Yoo et al.
Fig. 3. Example images of LookBook. A product image is associated with multiple
fashion model images.
top products with a clean background. Real examples are shown in Fig. 3. We
manually associate each product image with corresponding images of a fashion
model ﬁtting the product, so each pair is accurately connected with the same
product. LookBook contains 84,748 images where 9,732 top product images are
associated with 75,016 fashion model images. It means that a product has around
8 fashion model images in average. We collect the images from ﬁve on-line fashion shopping malls1 where a product image and its fashion model images are
provided. Although we utilize LookBook for the pixel-level domain transfer, we
believe that it can contribute to a wide range of domain adaptation researches.
Chen et al. also has presented a similar fashion dataset dealing with two
domains. However, it is not suitable for our task since the domains are diﬀerently
deﬁned in details. They separate the domain into user taken images and on-line
shopping mall images so that both domains include humans.
Experiment Details
Before training, we rescale all images in LookBook to have 64 pixels at a longer
side while keeping the aspect ratio, and ﬁll the margins of both ends with 255s.
Pixels are normalized to a range of [−1, 1] according to the tanh activation layer
of the converter. We then randomly select 5% images to deﬁne a validation set,
and also 5% images for a test set. Since LookBook has 9,732 products, each of
the validation set and the test set is composed of 487 product images and their
fashion model images. The remaining images compose a training set.
The ﬁlters of the three networks are randomly initialized from a zero mean
Gaussian distribution with a standard deviation of 0.02. The leak slope of the
LeakyReLU in Table 1-(a) is 0.2. All models were trained with Stochastic Gradient Descent with mini-batch of 128 size. We also follow the learning rate of
0.0002 and the momentum of 0.5 suggested by . After 25 epochs, we lessen
the learning rate to 0.00002 for 5 more epochs.
Table 2 shows the notations and the descriptions of the 4 baselines and our
method. The training details of all the baselines are identical to those of ours.
1 {bongjashop, jogunshop, stylenanda}.com, {smallman, wonderplace}.co.kr
Pixel-Level Domain Transfer
Descriptions
A converter trained only with the real/fake discriminator.
A converter trained only with the mean square loss.
C+RF+DD−Neg
A converter trained with both of the discriminators.
Negative pairs are not used. Only positive pairs are used.
Retrieval by DD-score
Retrieving the nearest product image in the training set.
The queries are the human images in the test set.
The retrieval scores come from the domain discriminator.
C+RF+DD (Ours)
A converter trained with both of the discriminators.
Table 2. Notations and descriptions of baselines and our method.
User study score
Pixel-level (dis)similarity
Cat Methods
RMSE C-SSIM
0.40 0.21 0.06 C+RF
0.28 0.60 0.60 C+MSE
C+RF+DD (Ours) 0.82 0.67 0.77 C+RF+DD−Neg
Retrieval by DD-score
C+RF+DD (Ours)
Table 3. Quantitative evaluations. All the values are normalized to a range of .
Qualitative evaluation
First, we show qualitative results in Fig. 5, where the examples are chosen from
the test set. Our results look more relevant to the source image and more realistic
compared to those of baselines. Boundaries of products are sharp, and small
details such as stripes, patterns are well described in general. The results of
“C+RF” look realistic but irrelevant to the source image, and those of “C+MSE”
are quite blurry.
Fig. 4 veriﬁes how well the encoder of the converter encodes clothing attributes under the various conditions of source images. The source images signiﬁcantly vary in terms of backgrounds, viewpoints, human poses and selfocclusions. Despite these variations, our converter generates less varying targets
while reﬂecting the clothing attributes and categories of the source images. These
results imply that the encoder robustly summarizes the source information in a
semantic level.
Quantitative evaluation by user study
Since the target domain is not deterministic, it is diﬃcult to quantitatively
analyze the performance. Thus, we conduct a user study on our generation results
as a primary evaluation. We compare our method with the top two baselines in
Table 2. For this study, we created a sub-test set composed of 100 source images
randomly chosen from the test set. For each source image, we showed users three
Yoo et al.
target images generated by the two baselines and our method. Users were asked
to rate them three times in accordance with three diﬀerent evaluation criteria
as follows. A total of 25 users participated in this study.
1. How realistic is each result? Give a score from 0 to 2.
2. How well does each result capture the attributes (color, texture, logos, etc.)
of the source image? Give a score from 0 to 2.
3. Is the category of each result identical to that of the source image? Give a
binary score of 0 or 1.
The left part of Table 3 shows the user study results. In the “Realistic” criteria, it is not surprising that “C+MSE” shows the worst performance due to the
intrinsic limitation of the mean square loss for image generation. Its assumption
of Gaussian distribution results in blurry images as shown in Fig. 5. However,
the strong pairwise supervision of the mean square loss relatively succeeds in
representing the category and attributes of a product.
When the converter is supervised with the real/fake discriminator only, the
generated images are more realistic than those of “C+MSE”. However, it fails to
produce targets relevant to inputs and yields low attribute and category scores.
The user study results demonstrate the eﬀectiveness of the proposed method.
For all valuation criteria, our method outperforms the baselines. Especially, the
ability to capture attributes and categories is better than that of “C+MSE”.
This result veriﬁes the eﬀectiveness of our domain discriminator.
Another interesting observation is that our score of “Realistic” criteria is
higher than that of “C+RF”. Both of the methods include the real/fake discriminator but demonstrate distinct results. The diﬀerence may be caused by the
domain discriminator which is added to the adversarial training in our method.
When we train the domain discriminator, we regard all produced targets as
“unassociated”. This setting makes the the converter better transfer a source
image into a more realistic and relevant target image.
Quantitative evaluation by pixel-level (dis)similarity
For each method, we measure a pixel-level dissimilarity by Root Mean Square
Error (RMSE) between a generated image and a target image over the test set.
We also measure a pixel-level similarity by Structural Similarity (SSIM), since
SSIM is known to be more consistent with human perception than RMSE. We
use a color version of SSIM by averaging SSIMs for each channel.
The right part of Table 3 shows the results. As we can expect, “C+MSE”
shows the lowest RMSE value because the converter is trained by minimizing
the mean square loss. However, in case of SSIM, our method outperforms all the
baselines.
To verify the eﬀectiveness of the “associated/unassociated” supervision when
we train the domain discriminator, we compare ours with “C+RF+DD−Neg”.
In Table 3, our method outperforms this method. Without the irrelevant input
pairs, the generation results could look realistic, but relatively fail to describe
Pixel-Level Domain Transfer
Fig. 4. Generation results under varying input conditions. The odd rows are inputs,
and the even rows are generation results. Each image is in 64×64×3 dimensions.
the attributes of items. This is why we added the irrelevant input pairs into
supervision to encourage our model to capture discriminative attributes.
To verify the generalization capability of our model, we also compare ours
with “Retrieval by DD-score”. If our model fails in generalization (i.e. just memorizes and copies training items which are similar to query), our generation results
could not be better than the retrieved items which are real. However, our method
outperforms the retrieval method. It veriﬁes the capability of our model to draw
unseen items.
Fig. 6 shows the results of “product to human” setting. Since generating
human is a more complex task, 65 epochs for initial training and 5 more epochs
for ﬁne-tuning are required for these results. All the other details are identical
to those of the original setting.
Conclusion
We have presented pixel-level domain transfer based on Generative Adversarial Nets framework. The proposed domain discriminator enables us to train the
semantic relation between the domains, and the converter has succeeded in generating decent target images. Also, we have presented a large dataset that could
contribute to domain adaptation researches. Since our framework is not constrained to speciﬁc problems, we expect to extend it to other types of pixel-level
domain transfer problems from low-level image processing to high-level synthesis.
Yoo et al.
Fig. 5. Qualitative comparisons. Each image from the left to the right respectively
corresponds to a source image, a “C+RF” result, a “C+MSE” result and our result.
Each image is in 64×64×3 dimensions.
Pixel-Level Domain Transfer
Source Ours Source Ours Source Ours Source Ours Source Ours Source Ours
Fig. 6. 100 chosen results of “product to human”. Each image is shown in 64×64×3
dimensions.
Yoo et al.