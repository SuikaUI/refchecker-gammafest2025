Transfer Learning from Deep Features for Remote Sensing and Poverty Mapping
Michael Xie and Neal Jean and Marshall Burke and David Lobell and Stefano Ermon
Department of Computer Science, Stanford University
{xie, nealjean, ermon}@cs.stanford.edu
Department of Earth System Science, Stanford University
{mburke,dlobell}@stanford.edu
The lack of reliable data in developing countries is a
major obstacle to sustainable development, food security, and disaster relief. Poverty data, for example, is
typically scarce, sparse in coverage, and labor-intensive
to obtain. Remote sensing data such as high-resolution
satellite imagery, on the other hand, is becoming increasingly available and inexpensive. Unfortunately,
such data is highly unstructured and currently no techniques exist to automatically extract useful insights to
inform policy decisions and help direct humanitarian efforts. We propose a novel machine learning approach to
extract large-scale socioeconomic indicators from highresolution satellite imagery. The main challenge is that
training data is very scarce, making it difﬁcult to apply
modern techniques such as Convolutional Neural Networks (CNN). We therefore propose a transfer learning approach where nighttime light intensities are used
as a data-rich proxy. We train a fully convolutional
CNN model to predict nighttime lights from daytime
imagery, simultaneously learning features that are useful for poverty prediction. The model learns ﬁlters identifying different terrains and man-made structures, including roads, buildings, and farmlands, without any supervision beyond nighttime lights. We demonstrate that
these learned features are highly informative for poverty
mapping, even approaching the predictive performance
of survey data collected in the ﬁeld.
Introduction
New technologies fueling the Big Data revolution are creating unprecedented opportunities for designing, monitoring, and evaluating policy decisions and for directing humanitarian efforts
 . However, while rich countries are
being ﬂooded with data, developing countries are suffering from data drought. A new data divide is emerging, with
huge differences in the quantity and quality of data available. For example, some countries have not taken a census in
decades, and in the past ﬁve years an estimated 230 million
births have gone unrecorded . Even high-proﬁle initiatives such
as the Millennium Development Goals (MDGs) are affected
Copyright c⃝2016, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.
 . Progress based on poverty and infant
mortality rate targets can be difﬁcult to track. Often, poverty
measures must be inferred from small-scale and expensive
household surveys, effectively rendering many of the poorest people invisible.
Remote sensing, particularly satellite imagery, is perhaps
the only cost-effective technology able to provide data at a
global scale. Within ten years, commercial services are expected to provide sub-meter resolution images everywhere
at a fraction of current costs . This level
of temporal and spatial resolution could provide a wealth
of data towards sustainable development. Unfortunately, this
raw data is also highly unstructured, making it difﬁcult to
extract actionable insights at scale.
In this paper, we propose a machine learning approach
for extracting socioeconomic indicators from raw satellite
imagery. In the past ﬁve years, deep learning approaches
applied to large-scale datasets such as ImageNet have revolutionized the ﬁeld of computer vision, leading to dramatic
improvements in fundamental tasks such as object recognition . However, the use of contemporary techniques for the analysis of remote sensing imagery is still largely unexplored. Modern approaches such
as Convolutional Neural Networks (CNN) can, in principle,
be directly applied to extract socioeconomic factors, but the
primary challenge is a lack of training data. While such data
is readily available in the United States and other developed
nations, it is extremely scarce in Africa where these techniques would be most useful.
We overcome this lack of training data by using a sequence of transfer learning steps and a convolutional neural network model. The idea is to leverage available datasets
such as ImageNet to extract features and high-level representations that are useful for the task of interest, i.e., extracting socioeconomic data for poverty mapping. Similar
strategies have proven quite successful in the past. For example, image features from the Overfeat network trained
on ImageNet for object classiﬁcation achieved state-of-theart results on tasks such as ﬁne-grained recognition, image
retrieval, and attribute detection .
Pre-training on ImageNet is useful for learning low-level
features such as edges. However, ImageNet consists only
of object-centric images, while satellite imagery is captured
from an aerial, bird’s-eye view. We therefore employ a secarXiv:1510.00098v2 [cs.CV] 27 Feb 2016
ond transfer learning step, where nighttime light intensities
are used as a proxy for economic activity. Speciﬁcally, we
start with a CNN model pre-trained for object classiﬁcation on ImageNet and learn a modiﬁed network that predicts nighttime light intensities from daytime imagery. To
address the trade-off between ﬁxed image size and information loss from image scaling, we use a fully convolutional
model that takes advantage of the full satellite image. We
show that transfer learning succeeds in learning features relevant not only for nighttime light prediction but also for
poverty mapping. For instance, the model learns ﬁlters identifying man-made structures such as roads, urban areas, and
ﬁelds without any supervision beyond nighttime lights, i.e.,
without any labeled examples of roads or urban areas (Figure 2). We demonstrate that these features are highly informative for poverty mapping and capable of approaching the
predictive performance of survey data collected in the ﬁeld.
Problem Setup
We begin by reviewing transfer learning and convolutional
neural networks, the building blocks of our approach.
Transfer Learning
We formalize transfer learning as in : A
domain D = {X, P(X)} consists of a feature space X and
a marginal probability distribution P(X). Given a domain,
a task T = {Y, f(·)} consists of a label space Y and a predictive function f(·) which models P(y|x) for y ∈Y and
x ∈X. Given a source domain DS and learning task TS, and
a target domain DT and learning task TT , transfer learning
aims to improve the learning of the target predictive function
fT (·) in TT using the knowledge from DS and TS, where
DS ̸= DT , TS ̸= TT , or both. Transfer learning is particularly relevant when, given labeled source domain data DS
and target domain data DT , we ﬁnd that |DT | ≪|DS|.
In our setting, we are interested in more than two related learning tasks. We generalize the formalism by representing the multiple source-target relationships as a transfer
learning graph. First, we deﬁne a transfer learning problem P = (D, T ) as a domain-task pair. The transfer learning graph is then deﬁned as follows: A transfer learning
graph G = (V, E) is a directed acyclic graph where vertices V = {P1, · · · , Pv} are transfer learning problems and
E = {(Pi1, Pj1), · · · , (Pie, Pje)} is an edge set. For each
transfer learning problem Pi = (Di, Ti) ∈V, the aim is to
improve the learning of the target predictive function fi(·)
in Ti using the knowledge in ∪(j,i)∈EPj.
Convolutional Neural Networks
Deep learning approaches are based on automatically learning nested, hierarchical representations of data. Deep feedforward neural networks are the typical example of deep
learning models. Convolutional Neural Networks (CNN) include convolutional operations over the input and are designed speciﬁcally for vision tasks. Convolutional ﬁlters are
useful for encoding translation invariance, a key concept for
discovering useful features in images .
A CNN is a general function approximator deﬁned by a
set of convolutional and fully connected layers ordered such
that the output of one layer is the input of the next. For image
data, the ﬁrst layers of the network typically learn low-level
features such as edges and corners, and further layers learn
high-level features such as textures and objects . Taken as a whole, a CNN is a mapping from
tensors to feature vectors, which become the input for a ﬁnal
classiﬁer. A typical convolutional layer maps a tensor x ∈
Rh×w×d to gi ∈Rˆh× ˆ
w× ˆd such that
gi = pi(fi(Wi ∗x + bi)),
where for the i-th convolutional layer, Wi ∈Rl×l× ˆd is a
tensor of ˆd convolutional ﬁlter weights of size l × l, (∗) is
the 2-dimensional convolution operator over the last two dimensions of the inputs, bi is a bias term, fi is an elementwise nonlinearity function (e.g., a rectiﬁed linear unit or
ReLU), and pi is a pooling function. The output dimensions
ˆh and ˆw depend on the stride and zero-padding parameters
of the layer, which control how the convolutional ﬁlters slide
across the input. For the ﬁrst convolutional layer, the input
dimensions h, w, and d can be interpreted as height, width,
and number of color channels of an input image, respectively.
In addition to convolutional layers, most CNN models
have fully connected layers in the ﬁnal layers of the network. Fully connected layers map an unrolled version of the
input ˆx ∈Rhwd, which is a one-dimensional vector of the
elements of a tensor x ∈Rh×w×d, to an output gi ∈Rk
gi = fi(Wiˆx + bi),
where Wi ∈Rk×hwd is a weight matrix, bi is a bias term,
and fi is typically a ReLU nonlinearity function. The fully
connected layers encode the input examples as feature vectors, which are used as inputs to a ﬁnal classiﬁer. Since the
fully connected layer looks at the entire input at once, these
feature vectors “summarize” the input into a feature vector for classiﬁcation. The model is trained end-to-end using
minibatch gradient descent and backpropagation.
After training, the output of the ﬁnal fully connected layer
can be interpreted as an encoding of the input as a feature
vector that facilitates classiﬁcation. These features often represent complex compositions of the lower-level features extracted by the previous layers (e.g., edges and corners) and
can range from grid patterns to animal faces .
Combining Transfer Learning and Deep Learning
The low-level and high-level features learned by a CNN on a
source domain can often be transferred to augment learning
in a different but related target domain. For target problems
with abundant data, we can transfer low-level features, such
as edges and corners, and learn new high-level features speciﬁc to the target problem. For target problems with limited
amounts of data, learning new high-level features is difﬁcult.
However, if the source and target domain are sufﬁciently
similar, the feature representation learned by the CNN on
the source task can also be used for the target problem. Deep
features extracted from CNNs trained on large annotated
datasets of images have been used as generic features very
effectively for a wide range of vision tasks .
Transfer Learning for Poverty Mapping
In our approach to poverty mapping using satellite imagery,
we construct a linear chain transfer learning graph with
V = {P1, P2, P3} and E = {(P1, P2), (P2, P3)}. The ﬁrst
transfer learning problem P1 is object recognition on ImageNet ; the second problem P2
is predicting nighttime light intensity from daytime satellite
imagery; the third problem P3 is predicting poverty from
daytime satellite imagery. Recognizing the differences between ImageNet data and satellite imagery, we use the intermediate problem P2 to learn about the bird’s-eye viewpoint
of satellite imagery and extract features relevant to socioeconomic development.
ImageNet to Nighttime Lights
ImageNet is an object classiﬁcation image dataset of over
14 million images with 1000 class labels that, along with
CNN models, have fueled major breakthroughs in many vision tasks . CNN models trained
on the ImageNet dataset are recognized as good generic feature extractors, with low-level and mid-level features such
as edges and corners that are able to generalize to many new
tasks . Our goal is
to transfer knowledge from the ImageNet object recognition
challenge (P1) to the target problem of predicting nighttime
light intensity from daytime satellite imagery (P2).
In P1, we have an object classiﬁcation problem with
source domain data D1 = {(x1i, y1i)} from ImageNet that
consists of natural images x1i ∈X1 and object class labels.
In P2, we have a nighttime light intensity prediction problem with target domain data D2 = {(x2i, y2i}) that consists
of daytime satellite images x2i ∈X2 and nighttime light
intensity labels. Although satellite data is still in the space
of image data, satellite imagery presents information from a
bird’s-eye view and at a much different scale than the objectcentric ImageNet dataset (P(X1) ̸= P(X2)). Previous work
in domains with images fundamentally different from normal “human-eye view” images typically resort to curating a
new, speciﬁc dataset such as Places205 .
In contrast, our transfer learning approach does not require
human annotation and is much more scalable. Additionally,
unsupervised approaches such as autoencoders may waste
representational capacity on irrelevant features, while the
nighttime light labels guide learning towards features relevant to wealth and economic development.
The National Oceanic and Atmospheric Administration
(NOAA) provides annual nighttime images of the world
with 30 arc-second resolution, or about 1 square kilometer
 . The light
intensity values are averaged and denoised for each year to
ensure that ephemeral light sources do not affect the data.
The nighttime light dataset D2 is constructed as follows:
The Demographic Health Survey (DHS) Program conducts
Figure 1: Locations (in white) of 330,000 sampled daytime
images near DHS survey locations for the nighttime light
intensity prediction problem.
nationally representative surveys in Africa that focus mainly
on health outcomes . Predicting
health outcomes is beyond the scope of this paper; however, the DHS surveys offer the most comprehensive data
available for Africa. Thus, we use DHS survey locations as
guidelines for sampling training images (see Figure 1). Images in D2 are daytime satellite images randomly sampled
near DHS survey locations in Africa. Satellite images are
downloaded using the Google Static Maps API, each with
400 × 400 pixels at zoom level 16, resulting in images similar in size to pixels in the NOAA nighttime lights data. The
aggregate dataset D2 consists of over 330,000 images, each
labeled with an integer nighttime light intensity value ranging from 0 to 631. We further subsample and bin the data
using a Gaussian mixture model, as detailed in the companion technical report .
Nighttime Lights to Poverty Estimation
The ﬁnal and most important learning task P3 is that of predicting poverty from satellite imagery, for which we have
very limited training data. Our goal is to transfer knowledge
from P2, a data-rich problem, to P3.
The target domain data D3 = {(x3i, y3i)} consists of
satellite images x3i ∈X3 from the feature space of satellite
images of Uganda and a limited number of poverty labels
y3i ∈Y3, detailed below. The source data is D2, the nighttime lights data. Here, the input feature space of images is
similar in both the source and target domains, drawn from
a similar distribution of images (satellite images) from related areas (Africa and Uganda), implying that X2 = X3,
P(X2) ≈P(X3). The source (lights) and target (poverty)
tasks both have economic elements, but are quite different.
The poverty training data D3 relies on the Living Standards Measurement Study (LSMS) survey conducted in
Uganda by the Uganda Bureau of Statistics between 2011
1Nighttime light intensities are from 2013, while the daytime
satellite images are from 2015. We assume that the areas under
study have not changed signiﬁcantly in this two-year period, but
this temporal mismatch is a potential source of error.
and 2012 . The LSMS
survey consists of data from 2,716 households in Uganda,
which are grouped into 643 unique location groups. The
average latitude and longitude location of the households
within each group is given, with added noise of up to 5km
in each direction. Individual household locations are withheld to preserve anonymity. In addition, each household has
a binary poverty label based on expenditure data from the
survey. We use the majority poverty classiﬁcation of households in each group as the overall location group poverty
label. For a given group, we sample approximately 100
1km×1km images tiling a 10km × 10km area centered at
the average household location as input. This deﬁnes the
probability distribution P(X3) of the input images for the
poverty classiﬁcation problem P3.
Predicting Nighttime Light Intensity
Our ﬁrst goal is to transfer knowledge from the ImageNet
object recognition task to the nighttime light intensity prediction problem. We start with a CNN model with parameters trained on ImageNet, then modify the network to adapt it
to the new task (i.e., change the classiﬁer on the last layer to
reﬂect the new nighttime light prediction task). We train on
the new task using SGD with momentum, using ImageNet
parameters as initialization to achieve knowledge transfer.
We choose the VGG F model trained on ImageNet as the
starting CNN model . The VGG F
model has 8 convolutional and fully connected layers. Like
many other ImageNet models, the VGG F model accepts a
ﬁxed input image size of 224 × 224 pixels. Input images
in D2, however, are 400 × 400 pixels, corresponding to the
resolution of the nighttime lights data.
We consider two ways of adapting the original VGG F
network. The ﬁrst approach is to keep the structure of the
network (except for the ﬁnal classiﬁer) and crop the input
to 224 × 224 pixels (random cropping). This is a reasonable approach, as the original model was trained by cropping
224 × 224 images from a larger 256 × 256 image . Ideally, we would evaluate the network at multiple crops of the 400 × 400 input and average the predictions
to leverage the context of the entire input image. However,
doing this explicitly with one forward pass for each crop
would be too costly. Alternatively, if we allow the multiple
crops of the image to overlap, we can use a convolution to
compute scores for each crop simultaneously, gaining speed
by reusing ﬁlter outputs at all layers. We therefore propose
a fully convolutional architecture (fully convolutional).
Fully Convolutional Model
Fully convolutional models have been used successfully for
spatial analysis of arbitrary size inputs . We construct the fully
convolutional model by converting the fully connected layers of the VGG F network to convolutional layers. This allows the network to efﬁciently “slide” across a larger input
image and make multiple evaluations of different parts of the
image, incorporating all available contextual information.
Given an unrolled h×w×d-dimensional input x ∈Rhwd,
fully connected layers perform a matrix-vector product
ˆx = f(Wx + b)
where W ∈Rk×hwd is a weight matrix, b is a bias term,
f is a nonlinearity function, and ˆx ∈Rk is the output. In
the fully connected layer, we take k inner products with the
unrolled x vector. Thus, given a differently sized input, it is
unclear how to evaluate the dot products.
We replace a fully connected layer by a convolutional
layer with k convolutional ﬁlters of size h × w, the same
size as the input. The ﬁlter weights are shared across all
channels, which means that the convolutional layer actually
uses fewer parameters than the fully connected layer. Since
the ﬁlter size is matched with the input size, we can take
an element-wise product and add, which is equivalent to an
inner product. This results in a scalar output for each ﬁlter, creating an output ˆx ∈R1×1×k. Further fully connected
layers are converted to convolutional layers with ﬁlter size
1×1, matching the new input ˆx ∈R1×1×k. Fully connected
layers are usually the last layers of the network, while all
previous layers are typically convolutional. After converting
fully connected layers to convolutional layers, the entire network becomes convolutional, allowing the outputs of each
layer to be reused as the convolution slides the network over
a larger input. Instead of a scalar output, the new output is a
2-dimensional map of ﬁlter activations.
In our fully convolutional model, the 400×400 input produces an output of size 2 × 2 × 4096, which represents the
scores of four (overlapping) quadrants of the image for 4096
features. The regional scores are then averaged to obtain a
4096-dimensional feature vector that becomes the ﬁnal input to the classiﬁer predicting nighttime light intensity.
Training and Performance Evaluation
Both CNN models are trained using minibatched gradient
descent with momentum. Random mirroring is used for data
augmentation, along with 50% dropout on convolutional
layers replacing fully connected layers. The learning rate begins at 1e-6, a hundredth of the ending learning rate of the
VGG model. All other hyperparameters are the same as in the
VGG model as described in . The VGG
model parameters are obtained from the Caffe Model Zoo,
and all networks are trained with Caffe . The
fully convolutional model is ﬁne-tuned from the pre-trained
parameters of the VGG F model, but it randomly initializes
the convolutional layers that replace fully connected layers.
In the process of cropping, the random cropping model
throws away over 68% of the input image when predicting the class scores, losing much of the spatial context. The
random cropping model achieved a validation accuracy of
70.04% after 400,200 SGD iterations. In comparison, the
fully convolutional model achieved 71.58% validation accuracy after only 223,500 iterations. Both models were trained
in roughly three days. Despite reinitializing the ﬁnal convolutional layers from scratch, the fully convolutional model
exhibits faster learning and better performance. The ﬁnal
fully convolutional model achieves a validation accuracy of
71.71%, trained over 345,000 iterations.
Figure 2: Left: Each row shows ﬁve maximally activating images for a different ﬁlter in the ﬁfth convolutional layer of the
CNN trained on the nighttime light intensity prediction problem. The ﬁrst ﬁlter (ﬁrst row) activates for urban areas. The second
ﬁlter activates for farmland and grid-like patterns. The third ﬁlter activates for roads. The fourth ﬁlter activates for water, plains,
and forests, terrains contributing similarly to nighttime light intensity. The only supervision used is nighttime light intensity,
i.e., no labeled examples of roads or farmlands are provided. Right: Filter activations for the corresponding images on the left.
Filters mostly activate on the relevant portions of the image. For example, in the third row, the strongest activations coincide
with the road segments. Best seen in color. See the companion technical report for more visualizations . Images
from Google Static Maps.
Visualizing the Extracted Features
Nighttime lights are used as a data-rich proxy, so absolute
performance on this task is not directly relevant for poverty
mapping. The goal is to learn high-level features that are
indicative of economic development and can be used for
poverty mapping in the spirit of transfer learning.
We visualize the ﬁlters learned by the fully convolutional
network by inspecting the 25 maximally activating images
for each ﬁlter ). Activation
levels for ﬁlters in the middle of the network are obtained by
passing the images forward through the ﬁlter, applying the
ReLU nonlinearity, and then averaging the map of activation
values. We ﬁnd that many ﬁlters learn to identify semantically meaningful features such as urban areas, water, roads,
barren land, forests, and farmland. Amazingly, these features are learned without direct supervision, in contrast
to previous efforts to extract features from aerial imagery,
which have relied heavily on large amounts of expert-labeled
data, e.g., labeled examples of roads
 . To conﬁrm the semantics of the ﬁlters, we visualize their activations for the same set of images (Figure 2,
right). These maps conﬁrm our interpretation by identifying
the image parts that are most responsible for activating the
ﬁlter. For example, the ﬁlter in the third row mostly activates on road segments. These features are extremely useful
socioeconomic indicators and suggest that transfer learning
to the poverty task is possible.
Poverty Estimation and Mapping
The ﬁrst target task we consider is to predict whether the majority of households are above or below the poverty threshold for 643 groups of households in Uganda.
Given the limited amount of training data, we do not attempt to learn new feature representations for the target task.
Instead, we directly use the feature representation learned by
the CNN on the nighttime lights task (P2). Speciﬁcally, we
evaluate the CNN model on new input images and feed the
feature vector produced in the last layer as input to a logistic regression classiﬁer, which is trained on the poverty task
(transfer model). Approximately 100 images in a 10km ×
10km area around the average household location of each
group are used as input. We compare against the performance of a classiﬁer with features from the VGG F model
trained on ImageNet only (ImageNet model), i.e., without
transfer learning from nighttime lights. In both the ImageNet
model and the transfer model, the feature vectors are averaged over the input images for each group.
The Uganda LSMS survey also includes householdspeciﬁc data. We extract the features that could feasibly be
detected with remote sensing techniques, including roof material, number of rooms, house type, distances to various infrastructure points, urban or rural classiﬁcation, annual temperature, and annual precipitation. These survey features are
then averaged over each household group. The performance
of the classiﬁer trained with survey features (survey model)
represents the gold standard for remote sensing techniques.
We also compare with a classiﬁer trained using the nighttime
light intensities themselves as features (lights model). The
nighttime light features consist of the average light intensity,
summary statistics, and histogram-based features for each
area. Finally, we compare with a classiﬁer trained using a
concatenation of ImageNet features and nighttime light features (ImageNet + lights model), an explicit way of combining information from both source problems.
All models are trained using a logistic regression classiﬁer
with L1 regularization using a nested 10-fold cross validation (CV) scheme, where the inner CV is used to tune a new
regularization parameter for each outer CV iteration. The
regularization parameter is found by a two-stage approach:
Figure 3: Left: Predicted poverty probabilities at a ﬁne-grained 10km × 10km block level. Middle: Predicted poverty probabilities aggregated at the district-level. Right: 2005 survey results for comparison .
Table 1: Cross validation test performance for predicting
aggregate-level poverty measures. Survey is trained on survey data collected in the ﬁeld. All other models are based
on satellite imagery. Our transfer learning approach outperforms all non-survey classiﬁers signiﬁcantly in every measure except recall, and approaches the survey model.
a coarse linearly spaced search is followed by a ﬁner linearly spaced search around the best value found in the coarse
search. The tuned regularization parameter is then validated
on the test set of the outer CV loop, which remained unseen
as the parameter was tuned. All performance metrics are averaged over the outer 10 folds and reported in Table 1.
Our transfer model signiﬁcantly outperforms every model
except the survey model in every measure except recall. Notably, the transfer model outperforms all combinations of
features from the source problems, implying that transfer
learning was successful in learning novel and useful features. Remarkably, our transfer model based on remotely
sensed data approaches the performance of the survey model
based on data expensively collected in the ﬁeld. As a sanity
check, we ﬁnd that using simple traditional computer vision
features such as HOG and color histograms only achieves
slightly better performance than random guessing. This further afﬁrms that the transfer learning features are nontrivial
and contain information more complex than just edges and
To understand the high recall of the lights model, we
analyze the conditional probability of predicting “poverty”
given that the average light intensity is zero: The lights
model predicts “poverty” almost 100% of the time, though
only 51% of groups with zero average intensity are actually below the poverty line. Furthermore, only 6% of groups
with nonzero average light intensity are below the poverty
line, explaining the high recall of the lights model. In contrast, the transfer model predicts “poverty” in 52% of groups
where the average nighttime light intensity is 0, more accurately reﬂecting the actual probability. The transfer model
features (visualized in Figure 2) clearly contain additional,
meaningful information beyond what nighttime lights can
provide. The fact that the transfer model outperforms the
lights model indicates that transfer learning has succeeded.
Mapping Poverty Distribution
Using our transfer model, we can scalably and inexpensively construct ﬁne-grained poverty maps at the country
or even continent level. We evaluate this capability by estimating a country-level poverty map for Uganda. We download over 370,000 satellite images covering Uganda and estimate poverty probabilities at 1km × 1km resolution with the
transfer model. Areas where the model assigns a low probability of being impoverished are colored green, while areas
assigned a high risk of poverty are colored red. A 10km ×
10km resolution map is shown in Figure 3 (left), smoothed at
a 0.5 degree radius for easy identiﬁcation of dominant spatial patterns. Notably, poverty reduction in northern Uganda
is lagging . Figure 3 (middle)
shows poverty estimates aggregated at the district level. As a
validity check, we qualitatively compare this map against the
most recent map of poverty rates available (Figure 3, right),
which is based on 2005 survey data . This data is now a decade old, but it loosely
corroborates the major patterns in our predicted distribution.
Whereas current maps are coarse and outdated, our method
offers much ﬁner temporal and spatial resolution and an inexpensive way to evaluate poverty at a global scale.
Conclusion
We introduce a new transfer learning approach for analyzing satellite imagery that leverages recent deep learning advances and multiple data-rich proxy tasks to learn high-level
feature representations of satellite images. This knowledge
is then transferred to data-poor tasks of interest in the spirit
of transfer learning. We demonstrate an application of this
idea in the context of poverty mapping and introduce a fully
convolutional CNN model that, without explicit supervision,
learns to identify complex features such as roads, urban areas, and various terrains. Using these features, we are able
to approach the performance of data collected in the ﬁeld for
poverty estimation. Remarkably, our approach outperforms
models based directly on the data-rich proxies used in our
transfer learning pipeline. Our approach can easily be generalized to other remote sensing tasks and has great potential
to help solve global sustainability challenges.
Acknowledgements
We acknowledge the support of the Department of Defense through the National Defense Science and Engineering
Graduate Fellowship Program. We would also like to thank
NVIDIA Corporation for their contribution to this project
through an NVIDIA Academic Hardware Grant.