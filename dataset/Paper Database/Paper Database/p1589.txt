LIDS-P-1369
Reprinted from INFORMATION
AND CONTROL
Vol. 53, No. 3. June 1982
All Rights Reserved by Academic Press, New York and London
Printed in Belgium
On the Complexity of Designing
Distributed Protocols
CHRISTOS H. PAPADIMITRIOU 1 AND JOHN TSITSIKLIS
Department of EECS, M.I.T., Cambridge, Massachusetts 02139
The complexity of two problems of distributed computation and decision-making
is studied. It is shown that deciding whether two distant agents can arrive at
compatible decisions without any communication can be done in polynomial time if
there are two possible decisions for each agent, but is NP-complete if one agent has
three or more alternatives. It is also shown that minimizing the amount of
communication necessary for the distributed computation of a function, when two
distant computers receive each a part of the input, is NP-complete. This proves a
conjecture due to A. Yao.
1. INTRODUCTION
Recently there has been some interest in modeling problems of distributed
computation and distributed decision-making as computational problems,
their complexity
1979; Kanellakis,
Kanellakis and Papadimitriou, 1981; Garey et al., 1982; Yao, 1979). The
goal of this line of research is to capture the apparent intricacy inherent in
distributed computation in terms of the computational complexity of the
corresponding problem. This paper is a contribution to this research.
Suppose that two distant agents I and II must arrive at a decision based
on local observations, and perhaps on some information communicated
between them. Agent I's observation, say Yt, comes from a finite set Y, of
possible observations. Similarly y,] E Y,,. I's decision is an element u, of the
finite set U. of possible decisions, and likewise for II. Not all combinations
of decisions are acceptable, however; the overall decision (ul, u,,) must
belong to a particular subset S(y,, y,,) of U1 X U,,. The question is, given
the function S, can we design a protocol whereby the two agents arrive each
at their own decision, based only on the respective local information (i.e.,
without any communication), so that the specifications in S are always
observed? We call this the distributed satisficing problem, after the term
introduced by Simon . Notice that this problem can be considered as a
simple (finite) special case of the classical team decision making problem
 .
' Current address: Departments of Operations Research and Computer Science, Stanford
University.
0019-9958/82 $2.00
Copyright Â© 1982 by Academic Press, Inc.
All rights of reproduction in any form reserved.
PAPADIMITRIOU AND TSITSIKLIS
We show that the complexity of the distributed satisficing problem
depends explicitly on the cardinalities of the decision sets U, and U,,. If
either set is empty or a singleton, then of course the problem is trivial. If
both sets are of cardinality two, then we show that the problem can be
solved in polynomial time (Theorem 2). In all other cases, distributed
satisficing is NP-complete (Theorem 1). For definitions related to NPcompleteness, the reader is referred to Garey and Johnson ,
Papadimitriou and Steiglitz .
Suppose that the cardinalities of both U1 and U,1 are two, say U. = U,1 =
J0, 1 }, and that communication is indeed necessary; by the discussion above,
this is easy to check. How can we minimize the amount of communication
that is required in order for the two agents to arrive at satisficing decisions?
An important special case of this problem is that of distributed function
evaluation, which has been recently studied in the computer science
literature, in connection with both distributed computation and VLSI
 . Suppose that we wish to compute a function f: Y X Y1, -a
{0, 1 }, when part of the input (namely, y,) is available to computer I, and the
rest (y,,) is available to computer II. It is easy to see that this is a special
case of the distributed satisficing problem with U1 = U = {0, 1} and
S(yl,y 1 ) = {(0, 0)} or {(1, 1)} for all y, and y,,. Obviously, most interesting
functions f cannot be computed without any communication, and there has
been some interesting recent work concerning lower bounds on the amount
of communication (number of bits exchanged) that is required for specific
functions f . In fact, Yao asked in 1979 whether the
problem of minimizing the amount of communication necessary for the
distributed computation of a given functionf is an NP-complete problem. We
show that it is (Theorem 3).
2. DISTRIBUTED SATISFICING
The distributed satisficing problem can be formalized as follows:
Distributed Satisficing
Given finite sets Y., U., Y,1, U1
U, and a function S: Y. X Y, -- 2
are there functions y,: Y --* U1 and y,,: Y,1 - U,, such that for all y, E Y.,
Y, E Y,, (y,(Y,), yl(y,,)) E S(y,,y,,)?
In order to study the complexity of the distributed satisficing problem, we
shall first point out the close connection between this problem and a family
of restricted versions of the satisfiability problem for propositional calculus,
DISTRIBUTED PROTOCOLS
which we call k-RSAT (k > 1 is an integer). A formula of k-RSAT has the
following set of variables, for some m, n > 0
I...., k}.
The clauses are the following:
One clause for each i between 1 and m, stating that exactly one of
the variables Yi ,--,Yik is true, and
An arbitrary number of clauses of the form (--,y
(--Yi: V _xq).
is equivalent to
distributed satisficing with
U, ={0, 1} and U, = 1, 2,..., k}.
Proof: Think of x i as stating that, if agent I observes the ith element of
Y., then she decides 1 (thus -- x, states that she decides 0); and think of Y1
as stating that, if agent II observes the ith element of Y,,, then she decidesj.
By using the clauses in (b), we can express the combinations of decisions
that are incompatible according to S.
Our first two results follow now from Lemma 1:
THEOREM 1.
3-RSAT is NP-complete. Consequently, the distributed
satisficing problem with decision sets of cardinality greater than or equal to
two and three, respectively, is NP-complete.
Proof We shall reduce to 3-RSAT the NP-complete problem of
satisfiability of propositional formulae with three literals per clause . Given such a propositional formula, we shall
construct an equivalent 3-RSAT formula F. For each variable of the original
formula we have in F a new x-variable. For each pair of variables a and b of
the original formula, we add to F two triples of y-variables Yabj and Y'bj,
j = 1, 2, 3, and the corresponding "exactly one is true" clauses. Also, we add
to F the x-variable zab, and the following 10 clauses:
(-'YabI V a),
(-Yabl V b),
(-Yab2 V a),
(-Yab2 V -b),
('-"y', V b),
(-"Y,2 V -a),
(--yab3 V Zab),
(-'Yab3 V -Zab).
It is left as an exercise to the reader to verify that these ten clauses force
the variables Yabl,,yab,
yabl, Yab2 to always take the same values as the
expressions (a A b), (a A -- b), (--,a A b), (-,a A -- b), respectively. Using this
observation, we can rewrite any three-literal clause of our original formula as
a two-literal clause of F. I
PAPADIMITRIOU AND TSITSIKLIS
THEOREM 2.
2-RSAT is solvable in time O(n). Consequently, the
distributed satisficing problem with decision sets both of cardinality two is
linear-time solvable.
Proof Simply notice that 2-RSAT can be reduced to the linear-time
solvable special case of satisfiability, in which the clauses are restricted to
have only two literals . To
do this, we replace the only clauses that do not conform to the format of
2SAT, namely, the "exactly one true" ones, as follows: "exactly one of Yil,
Yi2 is true" becomes (yei V Yi 2) A (-yil V -yi2).
3. DISTRIBUTED EVALUATION OF BOOLEAN FUNCTIONS
If I and II wish to cooperate in order to compute in a distributed fashion a
function f: Yl X Y11 -+ {0, 1}, they must design a protocol for information
transfer. How can we model mathematically such protocols, as well as the
amount of information transfer that they require? Think of the function f as
a table with I Yj I rows, I Y,l columns, and 0 - 1 entries. Let B > O0. We say
that f can be computed with B bits of communication if either the table is all
zeroes or all ones (in which case no communication is required), or the table
can be partitioned horizontally or vertically into subtables, by splitting the
set of rows or the set of columns off, both of which can be computed with
B- 1 bits of communication. This recursive definition also suggests a
protocol for achieving this computation. Iff can be computed with B bits,
and the appropriate partition is a horizontal (resp. vertical) one, then I (resp.
II) sends a bit signalling which of the two sets of the partition the current
row (resp. column) happens to belong to; after this, the two go on recursively to compute the appropriate restriction of f
in one less bit of
communication, until a trivial (i.e., constant) function has resulted. This
definition of communication protocol is the most natural and liberal one
used in the literature, and it corresponds to the prefix-freeness property of
messages insisted upon in Papadimitriou and Sipser (i.e., no message
of one computer to the other can be a prefix of another message, and thus
the two computers know when a message ends). For a discussion of the
desirability of this property see Papadimitriou and Sipser . Yao in fact
used a slightly different definition, in which the two agents must alternate
sending one-bit messages . NP-completeness can be similarly
proved in Yao's model as well.
The problem we are interested in is
Distributed Function Evaluation
Given a function f: Yl X Yl, -* {0, 1 } and an integer B, is there a protocol
DISTRIBUTED PROTOCOLS
for computing this function, which uses a total number of bits less than or
equal to B?
The following theorem proves a conjecture due to Yao .
THEOREM 3.
Distributedfunction evaluation is NP-complete.
In order to prove this result, we shall first need a lemma concerning the
following problem:
Exact Cover
Given a family F={S,,...,Sm} of subsets of U= {u,,... u,u}, is there a
subset C of F containing mutually disjoint sets, whose union is U?
EXACT COVER is NP-complete even if the following
conditions are true:
(a) All sets in F have cardinality one or three.
m is a power of 2, and any exact cover must contain exactly half
of the sets in F.
U can be divided into three subsets V, W, and Y such that:
(c ) Each element of V is contained in exactly two sets, both of
cardinality three. These sets have two elements from V and
one from W.
All-singletons in F are subsets of W.
All other sets in F (besides those in (cl) and (c2)) consist of.
two elements in Y and one in W.
(c4) I VI+lWI=m.
Proof. The construction is a variation of the reduction given in Garey
and Johnson from 3SAT to THREE-DIMENSIONAL MATCHING.
We start from the version of one-in-three satisfiability, in which we are given
m disjunctive clauses with three literals each from the variables xl,..., x,, and
we are asked whether there is a truth assignment which satisfies exactly one
literal in each clause. This problem is NP-complete . In fact, we can assume that no literal appears more than
twice in the formula.
Given such an instance, we shall construct an instance {S. ,..., Sm} of
EXACT COVER. For each variable x we have four elements v,(x),..., V4(X),
and four more wl(x), w2(x), w ,(-x), w2(-,x), and the sets St(x)= {vl(x),
v2(X), WI(x)}, S 1(-x) = v2(x), V3(X), WI(-X)}, S2(X) = {v3(X), v,(x), W2(x)},
S 2(-,x)= {v 4(x), v1(x), w2(-,x)}. These are the only sets which involve the.
vi(x) nodes, and so any exact cover will have to include either both S,(x)
and S 2(x), or both S,(-,x) and S 2(-x) for each variable x (and thus it will
PAPADIMITRIOU AND TSITSIKLIS
imply a truth assignment for the variables). Now we turn to the clauses. For
each clause Ci we have two elements y,(Cj) and y 2(Ci), and the sets {y,(Cj),
y 2(Ci), wi(A)}, whenever the ith occurrence of the literal A is in the clause Cj.
If w2(A) does not occur in any such set (because A occurs only once in the
formula), then we add the singleton {w2(A)}. This completes the construction.
We argue that the resulting instance of EXACT COVER has a solution iff
the given formula has a satisfying truth assignment. If there is a solution,
then it must define a truth assignment by picking both sets corresponding to
either x or -,x for each variable. Among the remaining w,(A) elements, those
which correspond to "unused" occurrences of literals must be picked up by
the singletons, whereas the remaining ones are picked up by the clauses in
which they occur. It follows that the literals left out by the Sj(l) sets define a
truth assignment which satisfies exactly one literal in each clause. Thus, if
this instance of EXACT COVER has a solution, then there is a satisfying
truth assignment for the given formula which satisfies one literal in each
clause, as required. The converse follows easily.
It remains to check that the conditions of the lemma are all satisfied.
Condition (a) is already satisfied. For (c), just take V, W, and Y to be the
sets of the v, w, and )y-elements in our construction. (cl)-(c3) are easily
checked, and (c4) follows by arithmetic: If there are n variables, then
I VI = I WI = m/2 = 4n. The second part of (b) now follows immediately (an
exact cover has always (IWl + lVl)/2 sets), and the first part can be
guaranteed by a variety of padding arguments.
Proof of Theorem 3.
We shall reduce to this problem the EXACT
COVER problem. Given an instance of EXACT COVER as described in the
instance of DISTRIBUTED
EVALUATION, as follows: Y. is the set FU {U}, and Y,1
is the set U. The
function f is defined as follows: f(y 1 , y,,) is 1 if y,, E y,. Otherwise, f(ly,
y ,,) = 0. The bound on the number of bits that can be exchanged is
B = log2 m + 1.
We claim thatf can be computed within this bound of communication iff
the given instance of EXACT COVER has a solution. Suppose that there is
a protocol for computingf, which involves at most B bits of communication.
Thus, the protocol succeeds in finally dividing the table off into 2B = 2m
disjoint smaller tables that are either all zeroes or all ones (we call these
tables the boxes). Let us considerf with its rows restricted to the sets referred
to in (c3) and (c2) of the lemma; it is easy to see that the corresponding
table is an identity matrix (the columns are in the set W) followed by several
other columns. Each one in the identity matrix must be by itself in a separate
box. Furthermore, since both dimensions of the box are 1, for each such box
we can find a box with zeroes from the same row or the same column. It
follows then that the optimum way to partition an identity matrix into boxes
DISTRIBUTED PROTOCOLS
takes twice as many boxes as rows, and thus 2.
WI distinct boxes are
required for this part. In fact, because of the presence of the other columns,
this bound can be achieved only if the boxes are partitions of the individual
rows into their parts that contain zeros and ones. Also, if we look at the
remaining I VI rows off, except for the U row, we notice that we have a
block diagonal matrix with blocks consisting of the adjacency matrices of
cycles; this is, followed by other columns, such that each row contains three
ones. It can be argued similarly that 2 . I VI boxes are required for this part
off: In fact this can be achieved simultaneously with the previous bound
only if all these boxes are the rows of the table, each split into its zero and
one parts. Adding up, we conclude that 2 . ( VI+ I WI)= 28 boxes are
absolutely necessary for computing f, and in fact that this bound is
achievable only if these boxes are simply partitions of the rows into their
zero and one parts.
Let us now consider the U row. How can its ones be covered exactly (i.e.,
without overlaps) together with some of the already considered boxes which
contain ones (so that 28 boxes are also sufficient)? It is not hard to see that
the only way is to choose an exact cover among the rows, and merge the
corresponding boxes of ones with the corresponding ones of the U row.
Hence, F must have an exact cover.
Conversely, if F has an exact cover, then we can computef with B bits as
follows: First I sends a bit to II, telling her whether the row which I sees is a
set not belonging to the cover. If this is the case, I uses all but one of the
remaining bits to completely describe the row (there are m/2 = 2B-2 such
rows), and then II tells I with the last bit whether the column II sees has a
one in the describe row or not. Otherwise, if the row is in the cover, then II
uses all but the last bit to tell I to which of the sets in the exact cover the
element corresponding to II's column belongs. Then I tells II whether the
row she sees is the U row or the set described by II, in which cases the
answer is one. In all other cases, the answer is 0.
ACKNOWLEDGMENTS
This research was supported in part by the Office of Naval Research under Grant
ONR/N00014-77-C-0532(NR041-519), and by a grant from the National Science Foundation.