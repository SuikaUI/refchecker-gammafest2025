Correcting Sample Selection Bias by Unlabeled Data
Jiayuan Huang
School of Computer Science
Univ. of Waterloo, Canada
 
Alexander J. Smola
NICTA, ANU
Canberra, Australia
 
Arthur Gretton
MPI for Biological Cybernetics
T¨ubingen, Germany
 
Karsten M. Borgwardt
Ludwig-Maximilians-University
Munich, Germany
 
Bernhard Sch¨olkopf
MPI for Biological Cybernetics
T¨ubingen, Germany
 
We consider the scenario where training and test data are drawn from different
distributions, commonly referred to as sample selection bias. Most algorithms
for this setting try to ﬁrst recover sampling distributions and then make appropriate corrections based on the distribution estimate. We present a nonparametric
method which directly produces resampling weights without distribution estimation. Our method works by matching distributions between training and testing
sets in feature space. Experimental results demonstrate that our method works
well in practice.
Introduction
The default assumption in many learning scenarios is that training and test data are independently
and identically (iid) drawn from the same distribution. When the distributions on training and test
set do not match, we are facing sample selection bias or covariate shift. Speciﬁcally, given a domain
of patterns X and labels Y, we obtain training samples Z = {(x1, y1), . . . , (xm, ym)} ⊆X×Y from
a Borel probability distribution Pr(x, y), and test samples Z′ = {(x′
1), . . . , (x′
drawn from another such distribution Pr′(x, y).
Although there exists previous work addressing this problem , sample selection
bias is typically ignored in standard estimation algorithms. Nonetheless, in reality the problem
occurs rather frequently : While the available data have been collected in a biased manner, the test is
usually performed over a more general target population. Below, we give two examples; but similar
situations occur in many other domains.
1. Suppose we wish to generate a model to diagnose breast cancer. Suppose, moreover, that most
women who participate in the breast screening test are middle-aged and likely to have attended the
screening in the preceding 3 years. Consequently our sample includes mostly older women and
those who have low risk of breast cancer because they have been tested before. The examples do not
reﬂect the general population with respect to age (which amounts to a bias in Pr(x)) and they only
contain very few diseased cases (i.e. a bias in Pr(y|x)).
2. Gene expression proﬁle studies using DNA microarrays are used in tumor diagnosis. A common
problem is that the samples are obtained using certain protocols, microarray platforms and analysis
techniques. In addition, they typically have small sample sizes. The test cases are recorded under
different conditions, resulting in a different distribution of gene expression values.
In this paper, we utilize the availability of unlabeled data to direct a sample selection de-biasing
procedure for various learning methods. Unlike previous work we infer the resampling weight directly by distribution matching between training and testing sets in feature space in a non-parametric
manner. We do not require the estimation of biased densities or selection probabilities , or
the assumption that probabilities of the different classes are known . Rather, we account for the
difference between Pr(x, y) and Pr′(x, y) by reweighting the training points such that the means
of the training and test points in a reproducing kernel Hilbert space (RKHS) are close. We call this
reweighting process kernel mean matching (KMM). When the RKHS is universal , the population solution to this miminisation is exactly the ratio Pr′(x, y)/ Pr(x, y); however, we also derive a
cautionary result, which states that even granted this ideal population reweighting, the convergence
of the empirical means in the RKHS depends on an upper bound on the ratio of distributions (but
not on the dimension of the space), and will be extremely slow if this ratio is large.
The required optimisation is a simple QP problem, and the reweighted sample can be incorporated straightforwardly into several different regression and classiﬁcation algorithms. We apply our
method to a variety of regression and classiﬁcation benchmarks from UCI and elsewhere, as well as
to classiﬁcation of microarrays from prostate and breast cancer patients. These experiments demonstrate that KMM greatly improves learning performance compared with training on unweighted data,
and that our reweighting scheme can in some cases outperform reweighting using the true sample
bias distribution.
Key Assumption 1: In general, the estimation problem with two different distributions Pr(x, y)
and Pr′(x, y) is unsolvable, as the two terms could be arbitrarily far apart. In particular, for arbitrary Pr(y|x) and Pr′(y|x), there is no way we could infer a good estimator based on the training
sample. Hence we make the simplifying assumption that Pr(x, y) and Pr′(x, y) only differ via
Pr(x, y) = Pr(y|x) Pr(x) and Pr(y|x) Pr′(x). In other words, the conditional probabilities of y|x
remain unchanged (this particular case of sample selection bias has been termed covariate shift
 ). However, we will see experimentally that even in situations where our key assumption is not
valid, our method can nonetheless perform well (see Section 4).
Sample Reweighting
We begin by stating the problem of regularized risk minimization. In general a learning method
minimizes the expected risk
R[Pr, θ, l(x, y, θ)] = E(x,y)∼Pr [l(x, y, θ)]
of a loss function l(x, y, θ) that depends on a parameter θ. For instance, the loss function could
be the negative log-likelihood −log Pr(y|x, θ), a misclassiﬁcation loss, or some form of regression
loss. However, since typically we only observe examples (x, y) drawn from Pr(x, y) rather than
Pr′(x, y), we resort to computing the empirical average
Remp[Z, θ, l(x, y, θ)] = 1
l(xi, yi, θ).
To avoid overﬁtting, instead of minimizing Remp directly we often minimize a regularized variant
Rreg[Z, θ, l(x, y, θ)] := Remp[Z, θ, l(x, y, θ)] + λΩ[θ], where Ω[θ] is a regularizer.
Sample Correction
The problem is more involved if Pr(x, y) and Pr′(x, y) are different. The training set is drawn from
Pr, however what we would really like is to minimize R[Pr′, θ, l] as we wish to generalize to test
examples drawn from Pr′. An observation from the ﬁeld of importance sampling is that
R[Pr ′, θ, l(x, y, θ)] = E(x,y)∼Pr′ [l(x, y, θ)] = E(x,y)∼Pr
l(x, y, θ)
= R[Pr, θ, β(x, y)l(x, y, θ)],
provided that the support of Pr′ is contained in the support of Pr. Given β(x, y), we can thus
compute the risk with respect to Pr′ using Pr. Similarly, we can estimate the risk with respect to
Pr′ by computing Remp[Z, θ, β(x, y)l(x, y, θ)].
The key problem is that the coefﬁcients β(x, y) are usually unknown, and we need to estimate them
from the data. When Pr and Pr′ differ only in Pr(x) and Pr′(x), we have β(x, y) = Pr′(x)/Pr(x),
where β is a reweighting factor for the training examples. We thus reweight every observation
(x, y) such that observations that are under-represented in Pr obtain a higher weight, whereas overrepresented cases are downweighted.
Now we could estimate Pr and Pr′ and subsequently compute β based on those estimates. This is
closely related to the methods in , as they have to either estimate the selection probabilities
or have prior knowledge of the class distributions. Although intuitive, this approach has two major
problems: ﬁrst, it only works whenever the density estimates for Pr and Pr′(or potentially, the selection probabilities or class distributions) are good. In particular, small errors in estimating Pr can
lead to large coefﬁcients β and consequently to a serious overweighting of the corresponding observations. Second, estimating both densities just for the purpose of computing reweighting coefﬁcients
may be overkill: we may be able to directly estimate the coefﬁcients βi := β(xi, yi) without having
to estimate the two distributions. Furthermore, we can regularize βi directly with more ﬂexibility,
taking prior knowledge into account similar to learning methods for other problems.
Using the sample reweighting in learning algorithms
Before we describe how we will estimate the reweighting coefﬁcients βi, let us brieﬂy discuss how
to minimize the reweighted regularized risk
Rreg[Z, β, l(x, y, θ)] := 1
βil(xi, yi, θ) + λΩ[θ],
in the classiﬁcation and regression settings (an additional classiﬁcation method is discussed in the
accompanying technical report ).
Support Vector Classiﬁcation: Utilizing the setting of we can have the following minimization
problem (the original SVMs can be formulated in the same way):
2 ∥θ∥2 + C
subject to ⟨φ(xi, yi) −φ(xi, y), θ⟩≥1 −ξi/∆(yi, y) for all y ∈Y, and ξi ≥0.
Here, φ(x, y) is a feature map from X × Y into a feature space F, where θ ∈F and ∆(y, y′) denotes
a discrepancy function between y and y′. The dual of (6) is given by
i,j=1;y,y′∈Y
αiyαjy′k(xi, y, xj, y′) −
subject to αiy ≥0 for all i, y and
αiy/∆(yi, y) ≤βiC.
Here k(x, y, x′, y′) := ⟨φ(x, y), φ(x′, y′)⟩denotes the inner product between the feature maps. This
generalizes the observation-dependent binary SV classiﬁcation described in . Modiﬁcations of
existing solvers, such as SVMStruct , are straightforward.
Penalized LMS Regression: Assume l(x, y, θ) = (y −⟨φ(x), θ⟩)2 and Ω[θ] = ∥θ∥2. Here we
βi(yi −⟨φ(xi), θ⟩)2 + λ ∥θ∥2 .
Denote by ¯β the diagonal matrix with diagonal (β1, . . . , βm) and let K ∈Rm×m be the kernel
matrix Kij = k(xi, xj). In this case minimizing (8) is equivalent to minimizing (y −Kα)⊤¯β(y −
Kα) + λα⊤Kα with respect to α. Assuming that K and ¯β have full rank, the minimization yields
α = (λ¯β−1 + K)−1y. The advantage of this formulation is that it can be solved as easily as solving
the standard penalized regression problem. Essentially, we rescale the regularizer depending on the
pattern weights: the higher the weight of an observation, the less we regularize.
Distribution Matching
Kernel Mean Matching and its relation to importance sampling
Let Φ : X →F be a map into a feature space F and denote by µ : P →F the expectation operator
µ(Pr) := Ex∼Pr(x) [Φ(x)] .
Clearly µ is a linear operator mapping the space of all probability distributions P into feature space.
Denote by M(Φ) := {µ(Pr) where Pr ∈P} the image of P under µ. This set is also often referred
to as the marginal polytope. We have the following theorem (proved in ):
Theorem 1 The operator µ is bijective if F is an RKHS with a universal kernel k(x, x′) =
⟨Φ(x), Φ(x′)⟩in the sense of Steinwart .
The use of feature space means to compare distributions is further explored in . The practical
consequence of this (rather abstract) result is that if we know µ(Pr′), we can infer a suitable β by
solving the following minimization problem:
µ(Pr ′) −Ex∼Pr(x) [β(x)Φ(x)]
subject to β(x) ≥0 and Ex∼Pr(x) [β(x)] = 1. (10)
This is the kernel mean matching (KMM) procedure. For a proof of the following (and further
results in the paper) see .
Lemma 2 The problem (10) is convex. Moreover, assume that Pr′ is absolutely continuous with
respect to Pr (so Pr(A) = 0 implies Pr′(A) = 0). Finally assume that k is universal. Then the
solution β(x) of (10) is Pr′(x) = β(x)Pr(x).
Convergence of reweighted means in feature space
Lemma 2 shows that in principle, if we knew Pr and µ[Pr′], we could fully recover Pr′ by solving
a simple quadratic program. In practice, however, neither µ(Pr′) nor Pr is known. Instead, we only
have samples X and X′ of size m and m′, drawn iid from Pr and Pr′ respectively.
Naively we could just replace the expectations in (10) by empirical averages and hope that the
resulting optimization problem provides us with a good estimate of β. However, it is to be expected
that empirical averages will differ from each other due to ﬁnite sample size effects. In this section,
we explore two such effects. First, we demonstrate that in the ﬁnite sample case, for a ﬁxed β, the
empirical estimate of the expectation of β is normally distributed: this provides a natural limit on
the precision with which we should enforce the constraint
β(x)d Pr(x) = 1 when using empirical
expectations (we will return to this point in the next section).
Lemma 3 If β(x) ∈[0, B] is some ﬁxed function of x ∈X, then given xi ∼Pr iid such that β(xi)
has ﬁnite mean and non-zero variance, the sample mean 1
i β(xi) converges in distribution to a
Gaussian with mean
β(x)d Pr(x) and standard deviation bounded by
This lemma is a direct consequence of the central limit theorem [1, Theorem 5.5.15]. Alternatively,
it is straightforward to get a large deviation bound that likewise converges as 1/√m .
Our second result demonstrates the deviation between the empirical means of Pr′ and β(x) Pr in
feature space, given β(x) is chosen perfectly in the population sense. In particular, this result shows
that convergence of these two means will be slow if there is a large difference in the probability mass
of Pr′ and Pr (and thus the bound B on the ratio of probability masses is large).
Lemma 4 In addition to the Lemma 3 conditions, assume that we draw X′ := {x′
1, . . . , x′
from X using Pr′ = β(x) Pr, and ∥Φ(x)∥≤R for all x ∈X. Then with probability at least 1 −δ
β(xi)Φ(xi) −1
−2 log δ/2
B2/m + 1/m′
Note that this lemma shows that for a given β(x), which is correct in the population sense, we can
bound the deviation between the feature space mean of Pr′ and the reweighted feature space mean
of Pr. It is not a guarantee that we will ﬁnd coefﬁcients βi that are close to β(xi), but it gives us a
useful upper bound on the outcome of the optimization.
Lemma 4 implies that we have O(B
1/m + 1/m′B2) convergence in m, m′ and B. This means
that, for very different distributions we need a large equivalent sample size to get reasonable convergence. Our result also implies that it is unrealistic to assume that the empirical means (reweighted
or not) should match exactly.
Empirical KMM optimization
To ﬁnd suitable values of β ∈Rm we want to minimize the discrepancy between means subject
to constraints βi ∈[0, B] and | 1
i=1 βi −1| ≤ǫ. The former limits the scope of discrepancy
between Pr and Pr′ whereas the latter ensures that the measure β(x) Pr(x) is close to a probability
distribution. The objective function is given by the discrepancy term between the two empirical
means. Using Kij := k(xi, xj) and κi := m
j=1 k(xi, x′
j) one may check that
βiΦ(xi) −1
m2 β⊤Kβ −2
m2 κ⊤β + const.
We now have all necessary ingredients to formulate a quadratic problem to ﬁnd suitable β via
2β⊤Kβ −κ⊤β subject to βi ∈[0, B] and
In accordance with Lemma 3, we conclude that a good choice of ǫ should be O(B/√m). Note
that (12) is a quadratic program which can be solved efﬁciently using interior point methods or any
other successive optimization procedure. We also point out that (12) resembles Single Class SVM
 using the ν-trick. Besides the approximate equality constraint, the main difference is the linear
correction term by means of κ. Large values of κi correspond to particularly important observations
xi and are likely to lead to large βi.
Experiments
Toy regression example
Our ﬁrst experiment is on toy data, and is intended mainly to provide a comparison with the approach
of . This method uses an information criterion to optimise the weights, under certain restrictions
on Pr and Pr′ (namely, Pr′ must be known, while Pr can be either known exactly, Gaussian with
unknown parameters, or approximated via kernel density estimation).
Our data is generated according to the polynomial regression example from [12, Section 2], for
which Pr ∼N(0.5, 0.52) and Pr′ ∼N(0, 0.32) are two normal distributions. The observations are
generated according to y = −x + x3, and are observed in Gaussian noise with standard deviation
0.3 (see Figure 1(a); the blue curve is the noise-free signal).
We sampled 100 training (blue circles) and testing (red circles) points from Pr and Pr′ respectively.
We attempted to model the observations with a degree 1 polynomial. The black dashed line is a
best-case scenario, which is shown for reference purposes: it represents the model ﬁt using ordinary
least squared (OLS) on the labeled test points. The red line is a second reference result, derived
only from the training data via OLS, and predicts the test data very poorly. The other three dashed
lines are ﬁt with weighted ordinary least square (WOLS), using one of three weighting schemes: the
ratio of the underlying training and test densities, KMM, and the information criterion of . A
summary of the performance over 100 trials is shown in Figure 1(b). Our method outperforms the
two other reweighting methods.
true fitting model
OLS fitting xq0
OLS fitting xq1
WOLS by ratio
WOLS by KMM
WOLS by min IC
Sum of square loss
Figure 1: (a) Polynomial models of degree 1 ﬁt with OLS and WOLS;(b) Average performances of three
WOLS methods and OLS on the test data in (a). Labels are Ratio for ratio of test to training density; KMM for
our approach; min IC for the approach of ; and OLS for the model trained on the labeled test points.
Real world datasets
We next test our approach on real world data sets, from which we select training examples using a
deliberately biased procedure (as in ). To describe our biased selection scheme, we need to
deﬁne an additional random variable si for each point in the pool of possible training samples, where
si = 1 means the ith sample is included, and si = 0 indicates an excluded sample. Two situations
are considered: the selection bias corresponds to our assumption regarding the relation between
the training and test distributions, and P(si = 1|xi, yi) = P(si|xi); or si is dependent only on
yi, i.e. P(si|xi, yi) = P(si|yi), which potentially creates a greater challenge since it violates our
key assumption 1. In the following, we compare our method (labeled KMM) against two others: a
baseline unweighted method (unweighted), in which no modiﬁcation is made, and a weighting by
the inverse of the true sampling distribution (importance sampling), as in . We emphasise,
however, that our method does not require any prior knowledge of the true sampling probabilities.
In our experiments, we used a Gaussian kernel exp(−σ∥xi −xj∥2) in our kernel classiﬁcation and
regression algorithms, and parameters ǫ = (√m −1)/√m and B = 1000 in the optimization (12).
biased feature
test error
unweighted
importance sampling
(a) Simple bias on features
training set proportion
test error
unweighted
importance sampling
(b) Joint bias on features
training set proportion
test error
unweighted
importance sampling
(c) Bias on labels
optimal weights
inverse of true sampling
probabilites
(d) β vs inverse sampling prob.
Figure 2: Classiﬁcation performance analysis on breast cancer dataset from UCI.
Breast Cancer Dataset
This dataset is from the UCI Archive, and is a binary classiﬁcation task. It includes 699 examples
from 2 classes: benign (positive label) and malignant (negative label). The data are randomly split
into training and test sets, where the proportion of examples used for training varies from 10% to
50%. Test results are averaged over 30 trials, and were obtained using a support vector classiﬁer with
kernel size σ = 0.1. First, we consider a biased sampling scheme based on the input features, of
which there are nine, with integer values from 0 to 9. Since smaller feature values predominate in the
unbiased data, we sample according to P(s = 1|x ≤5) = 0.2 and P(s = 1|x > 5) = 0.8, repeating
the experiment for each of the features in turn. Results are an average over 30 random training/test
splits, with 1/4 of the data used for training and 3/4 for testing. Performance is shown in Figure 2(a):
we consistently outperform the unweighted method, and match or exceed the performance obtained
using the known distribution ratio. Next, we consider a sampling bias that operates jointly across
multiple features. We select samples less often when they are further from the sample mean x over
the training data, i.e. P(si|xi) ∝exp(−σ∥xi −x∥2) where σ = 1/20. Performance of our method
in 2(b) is again better than the unweighted case, and as good as or better than reweighting using the
sampling model. Finally, we consider a simple biased sampling scheme which depends only on the
label y: P(s = 1|y = 1) = 0.1 and P(s = 1|y = −1) = 0.9 (the data has on average twice as
many positive as negative examples when uniformly sampled). Average performance for different
training/testing split proportions is in Figure 2(c); remarkably, despite our assumption regarding the
difference between the training and test distributions being violated, our method still improves the
test performance, and outperforms the reweighting by density ratio for large training set sizes. Figure 2(d) shows the weights β are proportional to the inverse of true sampling probabilities: positive
examples have higher weights and negative ones have lower weights.
Further Benchmark Datasets
We next compare the performance on further benchmark datasets1 by selecting training data via
various biased sampling schemes. Speciﬁcally, for the sampling distribution bias on labels, we
use P(s = 1|y) = exp(a + by)/(1 + exp(a + by)) (datasets 1 to 5), or the simple step distribution P(s = 1|y = 1) = a, P(s = 1|y = −1) = b (datasets 6 and 7). For the remaining
datasets, we generate biased sampling schemes over their features. We ﬁrst do PCA, selecting the
ﬁrst principal component of the training data and the corresponding projection values. Denoting
the minimum value of the projection as m and the mean as m, we apply a normal distribution with
mean m + (m −m)/a and variance (m −m)/b as the biased sampling scheme. Please refer to
 for detailed parameter settings. We use penalized LMS for regression problems and SVM for
classiﬁcation problems. To evaluate generalization performance, we utilize the normalized mean
square error (NMSE) given by 1
for regression problems, and the average test error
for classiﬁcation problems. In 13 out of 23 experiments, our reweighting approach is the most accurate (see Table 1), despite having no prior information about the bias of the test sample (and, in some
cases, despite the additional fact that the data reweighting does not conform to our key assumption
1). In addition, the KMM always improves test performance compared with the unweighted case.
Two additional points should be borne in mind: ﬁrst, we use the same σ for the kernel mean matching and the SVM, as listed in Table 1. Performance might be improved by decoupling these kernel
sizes: indeed, we employ kernels that are somewhat large, suggesting that the KMM procedure is
helpful in the case of relatively smooth classiﬁcation/regresssion functions. Second, we did not ﬁnd
a performance improvement in the case of data sets with smaller sample sizes. This is not surprising,
since a reweighting would further reduce the effective number of points used for training, resulting
in insufﬁcient data for learning.
Test results for three methods on 18 datasets with different sampling schemes. The results are
averages over 10 trials for regression problems (marked *) and 30 trials for classiﬁcation problems. We used a
Gaussian kernel of size σ for both the kernel mean matching and the SVM/LMS regression, and set B = 1000.
NMSE / Test err.
unweighted
importance samp.
1. Abalone*
1.00 ± 0.08
2. CA Housing*
2.29 ± 0.01
1.72 ± 0.04
1.24 ± 0.09
3. Delta Ailerons(1)*
0.51 ± 0.01
0.51 ± 0.01
0.401 ± 0.007
4. Ailerons*
1.50 ± 0.06
5. haberman(1)
0.50 ± 0.09
0.37 ± 0.03
0.30 ± 0.05
6. USPS(6vs8)(1)
0.13 ± 0.18
7. USPS(3vs9)(1)
0.016 ± 0.006
0.012 ± 0.005
0.013 ± 0.005
8. Bank8FM*
0.45 ± 0.06
0.47 ± 0.05
9. Bank32nh*
10. cpu-act*
11. cpu-small*
12. Delta Ailerons(2)*
13. Boston house*
0.74 ± 0.09
0.76 ± 0.07
14. kin8nm*
0.85 ± 0.2
0.81 ± 0.1
0.81 ± 0.2
15. puma8nh*
0.77 ± 0.05
0.83 ± 0.03
16. haberman(2)
0.27 ± 0.01
0.39 ± 0.04
0.25 ± 0.2
17. USPS(6vs8) (2)
0.23 ± 0.2
0.23 ± 0.2
0.16 ± 0.08
18. USPS(6vs8) (3)
0.54 ± 0.0002
0.16 ± 0.04
19. USPS(3vs9)(2)
0.46 ± 0.09
20. Breast Cancer
0.05 ± 0.01
0.036 ± 0.005
0.033 ± 0.004
21. India diabetes
0.32 ± 0.02
0.30 ± 0.02
0.30 ± 0.02
22. ionosphere
0.32 ± 0.06
0.31 ± 0.07
0.28 ± 0.06
23. German credit
0.283 ± 0.004
0.282 ± 0.004
0.280 ± 0.004
Tumor Diagnosis using Microarrays
Our next benchmark is a dataset of 102 microarrays from prostate cancer patients . Each of these
microarrays measures the expression levels of 12,600 genes. The dataset comprises 50 samples
from normal tissues (positive label) and 52 from tumor tissues (negative label). We simulate the
realisitc scenario that two sets of microarrays A and B are given with dissimilar proportions of tumor
samples, and we want to perform cancer diagnosis via classiﬁcation, training on A and predicting
1Regression data from 
classiﬁcation data from UCI. Sets with numbers in brackets are examined by different sampling schemes.
on B. We select training examples via the biased selection scheme P(s = 1|y = 1) = 0.85 and
P(s = 1|y = −1) = 0.15. The remaining data points form the test set. We then perform SVM
classiﬁcation for the unweighted, KMM, and importance sampling approaches. The experiment
was repeated over 500 independent draws from the dataset according to our biased scheme; the 500
resulting test errors are plotted in . The KMM achieves much higher accuracy levels than the
unweighted approach, and is very close to the importance sampling approach.
We study a very similar scenario on two breast cancer microarray datasets from and , measuring the expression levels of 2,166 common genes for normal and cancer patients . We train
an SVM on one of them and test on the other. Our reweighting method achieves signiﬁcant improvement in classiﬁcation accuracy over the unweighted SVM (see ). Hence our method promises to
be a valuable tool for cross-platform microarray classiﬁcation.
Acknowledgements: The authors thank Patrick Warnat (DKFZ, Heidelberg) for providing the microarray datasets, and Olivier Chapelle and Matthias Hein for helpful discussions. The work is
partially supported by by the BMBF under grant 031U112F within the BFAM project, which is part
of the German Genome Analysis Network. NICTA is funded through the Australian Government’s
Backing Australia’s Ability initiative, in part through the ARC. This work was supported in part by
the IST Programme of the EC, under the PASCAL Network of Excellence, IST-2002-506778.