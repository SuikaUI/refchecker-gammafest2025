Shuﬄe and Learn: Unsupervised Learning using
Temporal Order Veriﬁcation
Ishan Misra1
C. Lawrence Zitnick2
Martial Hebert1
1 The Robotics Institute, Carnegie Mellon University
2 Facebook AI Research
{imisra, hebert}@cs.cmu.edu, 
Abstract. In this paper, we present an approach for learning a visual
representation from the raw spatiotemporal signals in videos. Our representation is learned without supervision from semantic labels. We formulate our method as an unsupervised sequential veriﬁcation task, i.e.,
we determine whether a sequence of frames from a video is in the correct temporal order. With this simple task and no semantic labels, we
learn a powerful visual representation using a Convolutional Neural Network (CNN). The representation contains complementary information to
that learned from supervised image datasets like ImageNet. Qualitative
results show that our method captures information that is temporally
varying, such as human pose. When used as pre-training for action recognition, our method gives signiﬁcant gains over learning without external
data on benchmark datasets like UCF101 and HMDB51. To demonstrate
its sensitivity to human pose, we show results for pose estimation on the
FLIC and MPII datasets that are competitive, or better than approaches
using signiﬁcantly more supervision. Our method can be combined with
supervised representations to provide an additional boost in accuracy.
Keywords: Unsupervised learning; Videos; Sequence Veriﬁcation; Action Recognition; Pose Estimation; Convolutional Neural Networks
Introduction
Sequential data provides an abundant source of information in the form of auditory and visual percepts. Learning from the observation of sequential data is a
natural and implicit process for humans . It informs both low level cognitive
tasks and high level abilities like decision making and problem solving . For
instance, answering the question “Where would the moving ball go?”, requires
the development of basic cognitive abilities like prediction from sequential data
like video .
In this paper, we explore the power of spatiotemporal signals, i.e., videos, in
the context of computer vision. To study the information available in a video
signal in isolation, we ask the question: How does an agent learn from the spatiotemporal structure present in video without using supervised semantic labels?
 
Ishan Misra, C. Lawrence Zitnick and Martial Hebert
Are the representations learned using the unsupervised spatiotemporal information present in videos meaningful? And ﬁnally, are these representations complementary to those learned from strongly supervised image data? In this paper,
we explore such questions by using a sequential learning approach.
Sequential learning is used in a variety of areas such as speech recognition,
robotic path planning, adaptive control algorithms, etc. These approaches can be
broadly categorized into two classes: prediction and veriﬁcation. In sequential
prediction, the goal is to predict the signal given an input sequence. A popular application of this in Natural Language Processing (NLP) is ‘word2vec’ by
Mikolov et al. that learns distributional representations . Using the continuous bag-of-words (CBOW) task, the model learns to predict a missing word
given a sequence of surrounding words. The representation that results from
this task has been shown to be semantically meaningful . Unfortunately, extending the same technique to predict video frames is challenging. Unlike words
that can be represented using limited-sized vocabularies, the space of possible
video frames is extremely large , eg., predicting pixels in a small 256 × 256
image leads to 2562×3×256 hypotheses! To avoid this complex task of predicting
high-dimensional video frames, we use sequential veriﬁcation.
In sequential veriﬁcation, one predicts the ‘validity’ of the sequence, rather
than individual items in the sequence. In this paper, we explore the task of determining whether a given sequence is ‘temporally valid’, i.e., whether a sequence
of video frames are in the correct temporal order, Figure 1. We demonstrate
that this binary classiﬁcation problem is capable of learning useful visual representations from videos. Speciﬁcally, we explore their use in the well understood
tasks of human action recognition and pose estimation. But why are these simple sequential veriﬁcation tasks useful for learning? Determining the validity
of a sequence requires reasoning about object transformations and relative locations through time. This in turn forces the representation to capture object
appearances and deformations.
We use a Convolutional Neural Network (CNN) for our underlying feature representation. The CNN is applied to each frame in the sequence and
trained “end-to-end” from random initialization. The sequence veriﬁcation task
encourages the CNN features to be both visually and temporally grounded. We
demonstrate the eﬀectiveness of our unsupervised method on benchmark action
recognition datasets UCF101 and HMDB51 , and the FLIC and
MPII pose estimation datasets. Using our simple unsupervised learning approach for pre-training, we show a signiﬁcant boost in accuracy over learning
CNNs from scratch with random initialization. In fact, our unsupervised approach even outperforms pre-training with some supervised training datasets. In
action recognition, improved performance can be found by combining existing
supervised image-based representations with our unsupervised representation.
By training on action videos with humans, our approach learns a representation sensitive to human pose. Remarkably, when applied to pose estimation, our
representation is competitive with pre-training on signiﬁcantly larger supervised
training datasets .
Shuﬄe and Learn: Unsupervised Learning using Temporal Order Veriﬁcation
Positive Tuples
Negative Tuples
Original video
Temporally Correct order
Temporally Incorrect order
Fig. 1: (a) A video imposes a natural temporal structure for visual data. In many
cases, one can easily verify whether frames are in the correct temporal order (shuﬄed
or not). Such a simple sequential veriﬁcation task captures important spatiotemporal
signals in videos. We use this task for unsupervised pre-training of a Convolutional
Neural Network (CNN). (b) Some examples of the automatically extracted positive
and negative tuples used to formulate a classiﬁcation task for a CNN.
Related Work
Our work uses unlabeled video sequences for learning representations. Since this
source of supervision is ‘free’, our work can be viewed as a form of unsupervised
learning. Unsupervised representation learning from single images is a popular
area of research in computer vision. A signiﬁcant body of unsupervised learning
literature uses hand-crafted features and clustering based approaches to discover
objects , or mid-level elements . Deep learning methods like autoencoders , Deep Boltzmann Machines , variational methods ,
stacked auto-encoders , and others learn representations directly
from images. These methods learn a representation by estimating latent parameters that help reconstruct the data, and may regularize the learning process by
priors such as sparsity . Techniques in scale unsupervised learning
to large image datasets showing its usefulness for tasks such as pedestrian detection and object detection . In terms of using ‘context’ for learning,
our work is most similar to which uses the spatial context in images. While
these approaches are unsupervised, they do not use videos and cannot exploit
the temporal structure in them. Our work is most related to work in unsupervised learning from videos . Traditional methods in this domain utilize
the spatiotemporal continuity as regularization for the learning process. Since
visual appearance changes smoothly in videos, a common constraint is enforcing temporal smoothness of features . Zhang et al. , in particular,
show how such constraints are useful for action recognition. Moving beyond just
temporal smoothness, enforces additional ‘steadiness’ constraints on the features so that the change of features across frames is meaningful. Our work, in
contrast, does not explicitly impose any regularizations on the features. Other
reconstruction-based learning approaches include that of Goroshin et al. who
use a generative model to predict video frames and Srivastava et al. who use
Ishan Misra, C. Lawrence Zitnick and Martial Hebert
concatenation
Shared parameters
Input Tuple
(b) Triplet Siamese network for sequence
verification
classification
AlexNet architecture
(a) Data Sampling
Frame Motion
Positive Tuples
Negative Tuples
Fig. 2: (a) We sample tuples of frames from high motion windows in a video. We form
positive and negative tuples based on whether the three input frames are in the correct
temporal order. (b) Our triplet Siamese network architecture has three parallel network
stacks with shared weights upto the fc7 layer. Each stack takes a frame as input, and
produces a representation at the fc7 layer. The concatenated fc7 representations are
used to predict whether the input tuple is in the correct temporal order.
LSTMs . Unlike our method, these works explicitly predict
individual frames, but do not explore large image sizes or datasets. also
consider the task of predicting the future from videos, but consider it as their
end task and do not use it for unsupervised pre-training.
Several recent papers use egomotion constraints from video to
further constrain the learning. Jayaraman et al. show how they can learn
equivariant transforms from such constraints. Similar to our work, they use full
video frames for learning with little pre-processing. Owens et al. use audio
signals from videos to learn visual representations. Another line of work 
uses video data to mine patches which belong to the same object to learn representations useful for distinguishing objects. Typically, these approaches require
signiﬁcant pre-processing to create this task. While our work also uses videos, we
explore them in the spirit of sequence veriﬁcation for action recognition which
learns from the raw video with very little pre-processing.
We demonstrate the eﬀectiveness of our unsupervised pre-training using two
extensively studied vision tasks - action recognition and pose estimation. These
tasks have well established benchmark datasets . As it is beyond the scope
of this paper, we refer the reader to for a survey on action recognition,
and for a survey on pose estimation.
Our Approach
Our goal is to learn a feature representation using only the raw spatiotemporal
signal naturally available in videos. We learn this representation using a sequential veriﬁcation task and focus on videos with human actions. Speciﬁcally, as
Shuﬄe and Learn: Unsupervised Learning using Temporal Order Veriﬁcation
shown in Figure 1, we extract a tuple of frames from a video, and ask whether
the frames are in the correct temporal order. In this section, we begin by motivating our use of sequential tasks and how they use the temporal structure
of videos. We then describe how positive and negative tuples are sampled from
videos, and describe our model.
Task motivation
When using only raw videos as input, sequential veriﬁcation tasks oﬀer a promising approach to unsupervised learning. In addition to our approach described
below, several alternative tasks are explored in Section 5.2. The goal of these
tasks is to encourage the model to reason about the motion and appearance
of the objects, and thus learn the temporal structure of videos. Example tasks
may include reasoning about the ordering of frames, or determining the relative
temporal proximity of frames. For tasks that ask for the veriﬁcation of temporal order, how many frames are needed to determine a correct answer? If we
want to determine the correct order from just two frames, the question may be
ambiguous in cases where cyclical motion is present. For example, consider a
short video sequence of a person picking up a coﬀee cup. Given two frames the
temporal order is ambiguous; the person may be picking the coﬀee cup up, or
placing it down.
To reduce such ambiguity, we propose sampling a three frame tuple, and
ask whether the tuple’s frames are correctly ordered. While theoretically, three
frames are not suﬃcient to resolve cyclical ambiguity , we found that combining this with smart sampling (Section 3.2) removes a signiﬁcant portion of
ambiguous cases. We now formalize this problem into a classiﬁcation task. Consider the set of frames {f1, . . . , fn} from an unlabeled video V. We consider the
tuple (fb, fc, fd) to be in the correct temporal order (class 1, positive tuple) if
the frames obey either ordering b < c < d or d < c < b, to account for the
directional ambiguity in video clips. Otherwise, if b < d < c or c < b < d, we say
that the frames are not in the correct temporal order (class 0, negative tuple).
Tuple sampling
A critical challenge when training a network on the three-tuple ordering task
is how to sample positive and negative training instances. A naive method may
sample the tuples uniformly from a video. However, in temporal windows with
very little motion it is hard to distinguish between a positive and a negative tuple,
resulting in many ambiguous training examples. Instead, we only sample tuples
from temporal windows with high motion. As Figure 2 shows, we use coarse
frame level optical ﬂow as a proxy to measure the motion between frames.
We treat the average ﬂow magnitude per-frame as a weight for that frame, and
use it to bias our sampling towards high motion windows. This ensures that the
classiﬁcation of the tuples is not ambiguous. Figure 1 (b) shows examples of such
Ishan Misra, C. Lawrence Zitnick and Martial Hebert
To create positive and negative tuples, we sample ﬁve frames (fa, fb, fc, fd, fe)
from a temporal window such that a < b < c < d < e (see Figure 2 (a)). Positive instances are created using (fb, fc, fd), while negative instances are created
using (fb, fa, fd) and (fb, fe, fd). Additional training examples are also created
by inverting the order of all training instances, eg., (fd, fc, fb) is positive. During
training it is critical to use the same beginning frame fb and ending frame fd
while only changing the middle frame for both positive and negative examples.
Since only the middle frame changes between training examples, the network is
encouraged to focus on this signal to learn the subtle diﬀerence between positives
and negatives, rather than irrelevant features.
To avoid sampling ambiguous negative frames fa and fe, we enforce that the
appearance of the positive fc frame is not too similar (measured by SSD on RGB
pixel values) to fa or fe. These simple conditions eliminated most ambiguous
examples. We provide further analysis of sampling data in Section 4.1.
Model Parametrization and Learning
To learn a feature representation from the tuple ordering task, we use a simple
triplet Siamese network. This network has three parallel stacks of layers with
shared parameters (Figure 2). Every network stack follows the standard CaﬀeNet
 (a slight modiﬁcation of AlexNet ) architecture from the conv1 to the fc7
layer. Each stack takes as input one of the frames from the tuple and produces
a representation at the fc7 layer. The three fc7 outputs are concatenated as
input to a linear classiﬁcation layer. The classiﬁcation layer can reason about
all three frames at once and predict whether they are in order or not (two
class classiﬁcation). Since the layers from conv1 to fc7 are shared across the
network stacks, the Siamese architecture has the same number of parameters as
AlexNet barring the ﬁnal fc8 layer. We update the parameters of the network
by minimizing the regularized cross-entropy loss of the predictions on each tuple.
While this network takes three inputs at training time, during testing we can
obtain the conv1 to fc7 representations of a single input frame by using just
one stack, as the parameters across the three stacks are shared.
Empirical ablation analysis
In this section (and in the Appendix), we present experiments to analyze the
various design decisions for training our network. In Sections 5 and 6, we provide
results on both action recognition and pose estimation.
Dataset: We report all our results using split 1 of the benchmark UCF101 
dataset. This dataset contains videos for 101 action categories with ∼9.5k videos
for training and ∼3.5k videos for testing. Each video has an associated action
category label. The standard performance metric for action recognition on this
dataset is classiﬁcation accuracy.
Details for unsupervised pre-training: For unsupervised pre-training, we
do not use the semantic action labels. We sample about 900k tuples from the
Shuﬄe and Learn: Unsupervised Learning using Temporal Order Veriﬁcation
Table 1: We study the eﬀect of our design choices such as temporal sampling parameters, and varying class ratios for unsupervised pre-training. We measure the tuple
prediction accuracy on a held out set from UCF101. We also show action classiﬁcation
results after ﬁnetuning the models on the UCF101 action recognition task (split 1).
(a) Varying temporal sampling
τmax τmin Tuple Pred. Action Recog.
(b) Varying class ratios
Class Ratio Tuple Pred. Action Recog.
UCF101 training videos. We randomly initialize our network, and train for 100k
iterations with a ﬁxed learning rate of 10−3 and mini-batch size of 128 tuples.
Each tuple consists of 3 frames. Using more (4, 5) frames per tuple did not show
signiﬁcant improvement. We use batch normalization .
Details for Action Recognition: The spatial network from is a wellestablished method of action recognition that uses only RGB appearance information. The parameters of the spatial network are initialized with our unsupervised pre-trained network. We use the provided action labels per video and
follow the training and testing protocol as suggested in . Brieﬂy, for training we form mini-batches by sampling random frames from videos. At test time,
25 frames are uniformly sampled from each video. Each frame is used to generate
10 inputs after ﬁxed cropping and ﬂipping (5 crops × 2 ﬂips), and the prediction
for the video is an average of the predictions across these 25×10 inputs. We use
the CaﬀeNet architecture for its speed and eﬃciency. We initialize the network
parameters up to the fc7 layer using the parameters from the unsupervised pretrained network, and initialize a new fc8 layer for the action recognition task.
We ﬁnetune the network following for 20k iterations with a batch size of
256, and learning rate of 10−2 decaying by 10 after 14k iterations, using SGD
with momentum of 0.9, and dropout of 0.5. While used the wider VGG-
M-2048 architecture, we found that their parameters transfer to CaﬀeNet
because of the similarities in their architectures.
Sampling of data
In this section we study the impact of sampling parameters described in Section 3.2 on the unsupervised pre-training task. We denote the maximum distance
between frames of positive tuples by τmax = |b −d|. This parameter controls the
‘diﬃculty’ of positives: a very high value makes it diﬃcult to see correspondence
across the positive tuple, and a very low value gives almost identical frames
and thus very easy positives. Similarly, we compute the minimum distance between the frames fa and fe used for negative tuples to the other frames by
Ishan Misra, C. Lawrence Zitnick and Martial Hebert
Same Videos
Nearest Neighbors
Different Videos
Same Videos
Same Videos
Different Videos
Different Videos
Fig. 3: We compute nearest neighbors using fc7 features on the UCF101 dataset. We
compare these results across three networks: pre-trained on ImageNet, pre-trained on
our unsupervised task and a randomly initialized network. We choose a input query
frame from a clip and retrieve results from other clips in the dataset. Since the dataset
contains multiple clips from the same video we get near duplicate retrievals (ﬁrst row).
We remove these duplicates, and display results in the second row. While ImageNet
focuses on the high level semantics, our network captures the human pose.
τmin = min(|a −b|, |d −e|). This parameter controls the diﬃculty of negatives
with a low value making them harder, and a high value making them easier.
We compute the training and testing accuracy of these networks on the tuple
prediction task on held out videos. This held out set is a union of samples using
all the temporal sampling parameters. We show results in Table 1 (a). We also
use these networks for ﬁnetuning on the UCF101 action recognition task. Our
results show that the tuple prediction accuracy and the performance on the
action recognition task are correlated. A large temporal window for positive
sampling improves over a smaller temporal window (Rows 1 and 2), while a
large window for negative sampling hurts performance (Rows 2 and 3).
Class ratios in mini-batch
Another important factor when training the model is the class ratios in each
mini-batch. As has been observed empirically , a good class ratio per
mini-batch ensures that the model does not overﬁt to one particular class, and
helps the learning process. For these experiments, we choose a single temporal
window for sampling and vary only the ratio of positive and negative tuples per
mini-batch. We compare the accuracy of these networks on the tuple prediction
Shuﬄe and Learn: Unsupervised Learning using Temporal Order Veriﬁcation
task on held out videos in Table 1 (b). Additionally, we report the accuracy of
these networks after ﬁnetuning on the action recognition task. These results show
that the class ratio used for unsupervised pre-training can signiﬁcantly impact
learning. It is important to have a larger percentage of negative examples.
What does the temporal ordering task capture?
Nearest Neighbor retrieval We retrieve nearest neighbors using our unsupervised features on the UCF101 dataset and compare them in Figure 3 to retrievals
by the pre-trained ImageNet features, and a randomly initialized network. Additional examples are shown in the supplementary materials. We pick an input
query frame from a clip and retrieve neighbors from other clips in the UCF101
dataset. Since the UCF101 dataset has clips from the same video, the ﬁrst set of
retrievals (after removing frames from the same input clip) are near duplicates
which are not very informative (notice the random network’s results). We remove
these near-duplicates by computing the sum of squared distances (SSD) between
the frames, and display the top results in the second row of each query. These
results make two things clear: 1) the ImageNet pre-trained network focuses on
scene semantics 2) Our unsupervised pre-trained network focuses on the pose of
the person. This would seem to indicate that the information captured by our
unsupervised pre-training is complementary to that of ImageNet. Such behavior
is not surprising, if we consider our network was trained without semantic labels,
and must reason about spatiotemporal signals for the tuple veriﬁcation task.
Visualizing pool5 unit responses We analyze the feature representation of
the unsupervised network trained using the tuple prediction task on UCF101.
Following the procedure of we show the top regions for pool5 units alongwith
their receptive ﬁeld in Figure 4. This gives us insight into the network’s internal
feature representation and shows that many units show preference for human
body parts and pose. This is not surprising given that our network is trained on
videos of human action recognition, and must reason about human movements
for the tuple ordering task.
Additional Experiments on Action Recognition
The previous experiments show that the unsupervised task learns a meaningful
representation. In this section we compare our unsupervised method against
existing baseline methods and present more quantitative results. We organize our
experiments as follows: 1) Comparing our unsupervised method to learning from
random initialization. 2) Exploring other unsupervised baselines and comparing
our method with them. 3) Combining our unsupervised representation learning
method with a supervised image representation. Additional experiments are in
the supplementary material. We now describe the common experimental setup.
Datasets and Evaluation: We use the UCF101 dataset which was also
used for our ablation analysis in Section 4 and measure accuracy on the 101
Ishan Misra, C. Lawrence Zitnick and Martial Hebert
Fig. 4: In each row we display the top image regions for a unit from the pool5
layer. We follow the method in and display the receptive ﬁelds (marked in
red boxes) for these units. As our network is trained on human action recognition
videos, many units show preference for human body parts and pose.
action classiﬁcation task. Additionally, we use the HMDB51 dataset for action recognition. This dataset contains 3 splits for train/test, each with about
3.4k videos for train and 1.4k videos for testing. Each video belongs to one of 51
action categories, and performance is evaluated by measuring classiﬁcation accuracy. We follow the same train/test protocols for both UCF101 and HMDB51
as described in Section 4. Note that the UCF101 dataset is about 2.5× larger
than the HMDB51 dataset.
Implementation details for pre-training: We use tuples sampled using
τmax = 60 and τmin = 15 as described in Section 4. The class ratio of positive
examples per mini-batch is 25%. The other parameters for training/ﬁnetuning
are kept unchanged from Section 4.
Action recognition details: As in Section 4, we use the CaﬀeNet architecture
and the parameters from for both training from scratch and ﬁnetuning.
We described the ﬁnetuning parameters in Section 4. For training from random
initialization (or ‘scratch’), we train for 80k iterations with an initial learning
rate of 10−2, decaying by a factor of 10 at steps 50k and 70k. The other training
Shuﬄe and Learn: Unsupervised Learning using Temporal Order Veriﬁcation
Table 2: Mean classiﬁcation accuracies over the 3 splits of UCF101 and HMDB51
datasets. We compare diﬀerent initializations and ﬁnetune them for action recognition.
Initialization
Mean Accuracy
(Ours) Tuple veriﬁcation
UCF Supervised
(Ours) Tuple veriﬁcation
parameters (momentum, batch size etc.) are kept the same as in ﬁnetuning. We
use the improved data augmentation scheme (diﬀerent aspect-ratio, ﬁxed crops)
from for all our methods and baselines. Note that we train or ﬁnetune all
the layers of the network for all methods, including ours.
Unsupervised pre-training or random initialization?
In these experiments we study the advantage of unsupervised pre-training for
action recognition in comparison to learning without any pre-training. We use
our tuple prediction task to train a network starting from random initialization
on the train split of UCF101. The unsupervised pre-trained network is ﬁnetuned on both the UCF101 and HMDB51 datasets for action recognition and
compared against learning from scratch (without pre-training). We report the
performance in Table 2. Our unsupervised pre-training shows a dramatic improvement of +12.4% over training from scratch in UCF101 and a signiﬁcant
gain of +4.7% in HMDB51. This impressive gain demonstrates the informativeness of the unsupervised tuple veriﬁcation task. On HMDB51, we additionally
ﬁnetune a network which was trained from scratch on UCF101 and report its
performance in Table 2 indicated by ‘UCF supervised’. We see that this network performs worse than our unsupervised pre-trained network. The UCF101
and HMDB51 have only 23 action classes in common and we hypothesize
that the poor performance is due to the scratch UCF101 network being unable
to generalize to actions from HMDB51. For reference, a model pre-trained on
the supervised ImageNet dataset and ﬁnetuned on UCF101 gives 67.1%
accuracy, and ImageNet ﬁnetuned on HMDB51 gives an accuracy of 28.5%.
Unsupervised Baselines
In this section, we enumerate a variety of alternative veriﬁcation tasks that use
only video frames and their temporal ordering. For each task, we use a similar
frame sampling procedure to the one described in Section 4.1. We compare their
performance after ﬁnetuning them on the task of action recognition. A more
informative task should serve as a better task for pre-training.
Two Close: In this task two frames (fb, fd) (with high motion) are considered
to be temporally close if |b −d| < τ for a ﬁxed temporal window τ = 30.
Ishan Misra, C. Lawrence Zitnick and Martial Hebert
Table 3: We compare the unsupervised methods deﬁned in Section 5.2 by ﬁnetuning
on the UCF101 and HMDB51 Action recognition (split 1 for both). Method with *
was not pre-trained on action data.
Unsup Method →
Obj. Patch*
Order (Ours)
Acc. UCF101
Acc. HMDB51
Two Order: Two frames (fb, fd) are considered to be correct if b < d. Otherwise
they are considered incorrect. |b −d| < 30.
Three Order: This is the original temporal ordering task we proposed in Section 3.1. We consider the 3-tuple (fb, fc, fd) to be correct only if the frames obey
either ordering b < c < d or b > c > d.
We also compare against standard baselines for unsupervised learning from
DrLim : As Equation 1 shows, this method enforces temporal smoothness
over the learned features by minimizing the l2 distance d between representations
(fc7) of nearby frames fb, fd (positive class or c = 1), while requiring frames
that are not close (negative class or c = 0) to be separated by a margin δ. We
use the same samples as in the ‘Two Close’ baseline, and set δ = 1.0 .
L(fb, fd) = 1(c = 1)d(fb, fd) + 1(c = 0) max(δ −d(fb, fd), 0)
TempCoh : Similar to the DrLim method, temporal coherence learns representations from video by using the l1 distance for pairs of frames rather than
the l2 distance of DrLim.
Obj. Patch : We use their publicly available model which was unsupervised
pre-trained on videos of objects. As their patch-mining code is not available, we
do not do unsupervised pre-training on UCF101 for their model.
All these methods (except ) are pre-trained on training split 1 of UCF101
without action labels, and then ﬁnetuned on test split 1 of UCF101 actions and
HMDB51 actions. We compare them in Table 3. Scratch performance for test
split 1 of UCF101 and HMDB51 is 39.1% and 14.8% respectively. The tuple
veriﬁcation task outperforms other sequential ordering tasks, and the standard
baselines by a signiﬁcant margin. We attribute the low number of to the fact
that they focus on object detection on a very diﬀerent set of videos, and thus do
not perform well on action recognition.
Combining unsupervised and supervised pre-training
We have thus far seen that unsupervised pre-training gives a signiﬁcant performance boost over training from random initialization. We now see if our
pre-training can help improve existing image representations. Speciﬁcally, we
initialize our model using the weights from the ImageNet pre-trained model and
Shuﬄe and Learn: Unsupervised Learning using Temporal Order Veriﬁcation
Table 4: Results of using our unsupervised pre-training to adapt existing image representations trained on ImageNet. We use unsupervised data from training split 1 of
UCF101, and show the mean accuracy (3 splits) by ﬁnetuning on HMDB51.
Initialization
Mean Accuracy
(Ours) Tuple veriﬁcation
(Ours) ImageNet + Tuple veriﬁcation
ImageNet + UCF sup.
use it for the tuple-prediction task on UCF101 by ﬁnetuning for 10k iterations.
We hypothesize this may add complementary information to the ImageNet representation. To test this, we ﬁnetune this model on the HMDB51 action
recognition task. We compare this performance to ﬁnetuning on HMDB51 without the tuple-prediction task. Table 4 shows these results.
Our results show that combining our pre-training with ImageNet helps improve the accuracy of the model (rows 3, 4). Finally, we compare against using
multiple sources of supervised data: initialized using the ImageNet weights, ﬁnetuned on UCF101 action recognition and then ﬁnetuned on HMDB51 (row 5).
The accuracy using all sources of supervised data is only slightly better than the
performance of our model (rows 4, 5). This demonstrates the eﬀectiveness of our
simple yet powerful unsupervised pre-training.
Pose Estimation Experiments
The qualitative results from Sec 4.3 suggest that our network captures information about human pose. To evaluate this quantitatively, we conduct experiments
on the task of pose estimation using keypoint prediction.
Datasets and Metrics: We use the FLIC (full) and the MPII datasets.
For FLIC, we consider 7 keypoints on the torso: head, 2× (shoulders, elbows,
wrists). We compute the keypoint for the head as an average of the keypoints
for the eyes and nose. We evaluate the Probability of Correct Keypoints (PCK)
measure for the keypoints. For MPII, we use all the keypoints on the full
body and report the metric as is standard for this dataset.
Model training: We use the CaﬀeNet architecture to regress to the keypoints.
We follow the training procedure in 3. For FLIC, we use a train/test split
of 17k and 3k images respectively and ﬁnetune models for 100k iterations. For
MPII, we use a train/test split of 18k and 2k images. We use a batch size of 32,
learning rate of 5 × 10−4 with AdaGrad and minimize the Euclidean loss
3 Public re-implementation from 
Ishan Misra, C. Lawrence Zitnick and Martial Hebert
Table 5: Pose estimation results on the FLIC and MPII datasets.
PCK for FLIC
 for MPII
sho head Mean AUC Upper Full
Random Init.
53.0 75.2 86.7 91.7
Tuple Verif.
69.6 85.5 92.8 97.4
Obj. Patch 
58.2 77.8 88.4 94.8
37.8 68.4 80.4 83.4
61.0 78.8 89.1 93.8
69.6 86.7 93.6 97.9
ImageNet + Tuple 69.7 87.1 93.8 98.1
(l2 distance between ground truth and predicted keypoints). For training from
scratch (Random Init.), we use a learning rate of 5 × 10−4 for 1.3M iterations.
Methods: Following the setup in Sec 5.1, we compare against various initializations of the network. We consider two supervised initalizations - from pretraining on ImageNet and UCF101. We consider three unsupervised initializations - our tuple based method, DrLim on UCF101, and the method of .
We also combine our unsupervised initialization with ImageNet pre-training.
Our results for pose estimation are summarized in Table 5. Our unsupervised
pre-training method outperforms the fully supervised UCF network (Sec 5.1) by
+7.6% on FLIC and +2.1% on MPII. Our method is also competitive with
ImageNet pre-training on both these datasets. Our unsupervised pre-training is
complementary to ImageNet pre-training, and can improve results after being
combined with it. This supports the qualitative results from Sec 4.3 that show
our method can learn human pose information from unsupervised videos.
Discussion
In this paper, we studied unsupervised learning from the raw spatiotemporal
signal in videos. Our proposed method outperforms other existing unsupervised
methods and is competitive with supervised methods. A next step to our work is
to explore diﬀerent types of videos and use other ‘free’ signals such as optical ﬂow.
Another direction is to use a combination of CNNs and RNNs, and to extend
our tuple veriﬁcation task to much longer sequences. We believe combining this
with semi-supervised methods is a promising future direction.
Acknowledgments: The authors thank Pushmeet Kohli, Ross Girshick, Abhinav
Shrivastava and Saurabh Gupta for helpful discussions. Ed Walter for his timely help
with the systems. This work was supported in part by ONR MURI N000141612007
and the US Army Research Laboratory (ARL) under the CTA program (Agreement
W911NF-10-2-0016). We gratefully acknowledge the hardware donation by NVIDIA.