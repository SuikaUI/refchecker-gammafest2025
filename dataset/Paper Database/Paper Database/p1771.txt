Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 633–644,
October 25-29, 2014, Doha, Qatar. c⃝2014 Association for Computational Linguistics
A Neural Network for Factoid Question Answering over
Paragraphs
Mohit Iyyer1, Jordan Boyd-Graber2, Leonardo Claudino1,
Richard Socher3, Hal Daum´e III1
1University of Maryland, Department of Computer Science and umiacs
2University of Colorado, Department of Computer Science
3Stanford University, Department of Computer Science
{miyyer,claudino,hal}@umiacs.umd.edu,
 , 
Text classiﬁcation methods for tasks
like factoid question answering typically use manually deﬁned string matching rules or bag of words representations.
These methods are ineﬀective
when question text contains very few
individual words (e.g., named entities)
that are indicative of the answer. We
introduce a recursive neural network
(rnn) model that can reason over such
input by modeling textual compositionality. We apply our model, qanta, to
a dataset of questions from a trivia
competition called quiz bowl. Unlike
previous rnn models, qanta learns
word and phrase-level representations
that combine across sentences to reason
about entities. The model outperforms
multiple baselines and, when combined
with information retrieval methods, rivals the best human players.
Introduction
Deep neural networks have seen widespread
use in natural language processing tasks such
as parsing, language modeling, and sentiment
analysis . The vector spaces
learned by these models cluster words and
phrases together based on similarity. For example, a neural network trained for a sentiment
analysis task such as restaurant review classiﬁcation might learn that “tasty” and “delicious”
should have similar representations since they
are synonymous adjectives.
These models have so far only seen success in
a limited range of text-based prediction tasks,
Later in its existence, this polity’s leader was chosen
by a group that included three bishops and six laymen,
up from the seven who traditionally made the decision.
Free imperial cities in this polity included Basel and
Speyer. Dissolved in 1806, its key events included the
Investiture Controversy and the Golden Bull of 1356.
Led by Charles V, Frederick Barbarossa, and Otto I,
for 10 points, name this polity, which ruled most of
what is now Germany through the Middle Ages and
rarely ruled its titular city.
Figure 1: An example quiz bowl question about
the Holy Roman Empire. The ﬁrst sentence
contains no words or named entities that by
themselves are indicative of the answer, while
subsequent sentences contain more and more
obvious clues.
where inputs are typically a single sentence and
outputs are either continuous or a limited discrete set. Neural networks have not yet shown
to be useful for tasks that require mapping
paragraph-length inputs to rich output spaces.
Consider factoid question answering: given
a description of an entity, identify the person, place, or thing discussed. We describe a
task with high-quality mappings from natural
language text to entities in Section 2. This
task—quiz bowl—is a challenging natural language problem with large amounts of diverse
and compositional data.
To answer quiz bowl questions, we develop
a dependency tree recursive neural network
in Section 3 and extend it to combine predictions across sentences to produce a question
answering neural network with trans-sentential
averaging (qanta). We evaluate our model
against strong computer and human baselines
in Section 4 and conclude by examining the
latent space and model mistakes.
Matching Text to Entities: Quiz
Every weekend, hundreds of high school and
college students play a game where they map
raw text to well-known entities. This is a trivia
competition called quiz bowl. Quiz bowl questions consist of four to six sentences and are
associated with factoid answers (e.g., history
questions ask players to identify speciﬁc battles,
presidents, or events). Every sentence in a quiz
bowl question is guaranteed to contain clues
that uniquely identify its answer, even without
the context of previous sentences. Players answer at any time—ideally more quickly than
the opponent—and are rewarded for correct
Automatic approaches to quiz bowl based on
existing nlp techniques are doomed to failure.
Quiz bowl questions have a property called
pyramidality, which means that sentences early
in a question contain harder, more obscure
clues, while later sentences are “giveaways”.
This design rewards players with deep knowledge of a particular subject and thwarts bag
of words methods. Sometimes the ﬁrst sentence contains no named entities—answering
the question correctly requires an actual understanding of the sentence (Figure 1). Later
sentences, however, progressively reveal more
well-known and uniquely identifying terms.
Previous work answers quiz bowl questions using a bag of words (na¨ıve Bayes) approach . These models fail on sentences like the ﬁrst one in Figure 1,
a typical hard, initial clue. Recursive neural
networks (rnns), in contrast to simpler models,
can capture the compositional aspect of such
sentences .
rnns require many redundant training examples to learn meaningful representations, which
in the quiz bowl setting means we need multiple
questions about the same answer. Fortunately,
hundreds of questions are produced during the
school year for quiz bowl competitions, yielding many diﬀerent examples of questions asking about any entity of note (see Section 4.1
for more details). Thus, we have built-in redundancy (the number of “askable” entities is
limited), but also built-in diversity, as diﬃcult
clues cannot appear in every question without
becoming well-known.
Dependency-Tree Recursive
Neural Networks
To compute distributed representations for the
individual sentences within quiz bowl questions, we use a dependency-tree rnn (dt-rnn).
These representations are then aggregated and
fed into a multinomial logistic regression classiﬁer, where class labels are the answers associated with each question instance.
In previous work, Socher et al. use
dt-rnns to map text descriptions to images.
dt-rnns are robust to similar sentences with
slightly diﬀerent syntax, which is ideal for our
problem since answers are often described by
many sentences that are similar in meaning
but diﬀerent in structure. Our model improves
upon the existing dt-rnn model by jointly
learning answer and question representations
in the same vector space rather than learning
them separately.
Model Description
As in other rnn models, we begin by associating each word w in our vocabulary with a
vector representation xw ∈Rd. These vectors
are stored as the columns of a d × V dimensional word embedding matrix We, where V is
the size of the vocabulary. Our model takes
dependency parse trees of question sentences
 and their corresponding answers as input.
Each node n in the parse tree for a particular sentence is associated with a word w, a
word vector xw, and a hidden vector hn ∈Rd
of the same dimension as the word vectors. For
internal nodes, this vector is a phrase-level representation, while at leaf nodes it is the word
vector xw mapped into the hidden space. Unlike in constituency trees where all words reside
at the leaf level, internal nodes of dependency
trees are associated with words. Thus, the dtrnn has to combine the current node’s word
vector with its children’s hidden vectors to form
hn. This process continues recursively up to
the root, which represents the entire sentence.
We associate a separate d×d matrix Wr with
each dependency relation r in our dataset and
learn these matrices during training.1 Syntactically untying these matrices improves com-
1We had 46 unique dependency relations in our quiz
bowl dataset.
subjugated
POSSESSIVE
Figure 2: Dependency parse of a sentence from a question about Sparta.
positionality over the standard rnn model by
taking into account relation identity along with
tree structure. We include an additional d × d
matrix, Wv, to incorporate the word vector xw
at a node into the node vector hn.
Given a parse tree (Figure 2), we ﬁrst compute leaf representations. For example, the
hidden representation hhelots is
hhelots = f(Wv · xhelots + b),
where f is a non-linear activation function such
as tanh and b is a bias term. Once all leaves
are ﬁnished, we move to interior nodes with
already processed children. Continuing from
“helots” to its parent, “called”, we compute
hcalled =f(WDOBJ · hhelots + Wv · xcalled
We repeat this process up to the root, which is
hdepended =f(WNSUBJ · heconomy + WPREP · hon
+ Wv · xdepended + b).
The composition equation for any node n with
children K(n) and word vector xw is hn =
f(Wv · xw + b +
WR(n,k) · hk),
where R(n, k) is the dependency relation between node n and child node k.
Our goal is to map questions to their corresponding answer entities. Because there are
a limited number of possible answers, we can
view this as a multi-class classiﬁcation task.
While a softmax layer over every node in the
tree could predict answers , this method overlooks that
most answers are themselves words (features)
in other questions (e.g., a question on World
War II might mention the Battle of the Bulge
and vice versa). Thus, word vectors associated
with such answers can be trained in the same
vector space as question text,2 enabling us to
model relationships between answers instead
of assuming incorrectly that all answers are
independent.
To take advantage of this observation, we
depart from Socher et al. by training
both the answers and questions jointly in a
single model, rather than training each separately and holding embeddings ﬁxed during
dt-rnn training. This method cannot be applied to the multimodal text-to-image mapping
problem because text captions by deﬁnition are
made up of words and thus cannot include images; in our case, however, question text can
and frequently does include answer text.
Intuitively, we want to encourage the vectors
of question sentences to be near their correct
answers and far away from incorrect answers.
We accomplish this goal by using a contrastive
max-margin objective function described below. While we are not interested in obtaining a
ranked list of answers,3 we observe better performance by adding the weighted approximaterank pairwise (warp) loss proposed in Weston
et al. to our objective function.
Given a sentence paired with its correct answer c, we randomly select j incorrect answers
from the set of all incorrect answers and denote
this subset as Z. Since c is part of the vocabulary, it has a vector xc ∈We. An incorrect
answer z ∈Z is also associated with a vector
xz ∈We. We deﬁne S to be the set of all nodes
in the sentence’s dependency tree, where an
individual node s ∈S is associated with the
2Of course, questions never contain their own answer
as part of the text.
3In quiz bowl, all wrong guesses are equally detrimental to a team’s score, no matter how “close” a guess
is to the correct answer.
hidden vector hs. The error for the sentence is
L(rank(c, s, Z))max(0,
1 −xc · hs + xz · hs),
where the function rank(c, s, Z) provides the
rank of correct answer c with respect to the
incorrect answers Z. We transform this rank
into a loss function4 shown by Usunier et al.
 to optimize the top of the ranked list,
Since rank(c, s, Z) is expensive to compute,
we approximate it by randomly sampling K
incorrect answers until a violation is observed
(xc · hs < 1 + xz · hs) and set rank(c, s, Z) =
(|Z|−1)/K, as in previous work . The model minimizes the sum of the error over all sentences T
normalized by the number of nodes N in the
training set,
The parameters θ = (Wr∈R, Wv, We, b), where
R represents all dependency relations in the
data, are optimized using AdaGrad .5 In Section 4 we compare performance to an identical model (fixed-qanta)
that excludes answer vectors from We and show
that training them as part of θ produces significantly better results.
The gradient of the objective function,
is computed using backpropagation through
structure .
From Sentences to Questions
The model we have just described considers
each sentence in a quiz bowl question independently. However, previously-heard sentences
within the same question contain useful information that we do not want our model to ignore.
4Our experiments show that adding this loss term to
the objective function not only increases performance
but also speeds up convergence
5We set the initial learning rate η = 0.05 and reset
the squared gradient sum to zero every ﬁve epochs.
While past work on rnn models have been restricted to the sentential and sub-sentential
levels, we show that sentence-level representations can be easily combined to generate useful
representations at the larger paragraph level.
The simplest and best6 aggregation method
is just to average the representations of each
sentence seen so far in a particular question.
As we show in Section 4, this method is very
powerful and performs better than most of our
baselines. We call this averaged dt-rnn model
qanta: a question answering neural network
with trans-sentential averaging.
Experiments
We compare the performance of qanta against
multiple strong baselines on two datasets.
qanta outperforms all baselines trained only
on question text and improves an information
retrieval model trained on all of Wikipedia.
qanta requires that an input sentence describes an entity without mentioning that
entity, a constraint that is not followed by
Wikipedia sentences.7 While ir methods can
operate over Wikipedia text with no issues,
we show that the representations learned by
qanta over just a dataset of question-answer
pairs can signiﬁcantly improve the performance
of ir systems.
We evaluate our algorithms on a corpus of over
100,000 question/answer pairs from two diﬀerent sources. First, we expand the dataset used
in Boyd-Graber et al. with publicallyavailable questions from quiz bowl tournaments
held after that work was published. This gives
us 46,842 questions in fourteen diﬀerent categories. To this dataset we add 65,212 questions
from naqt, an organization that runs quiz
bowl tournaments and generously shared with
us all of their questions from 1998–2013.
6We experimented with weighting earlier sentences
less than later ones in the average as well as learning an
additional RNN on top of the sentence-level representations. In the former case, we observed no improvements
over a uniform average, while in the latter case the
model overﬁt even with strong regularization.
7We tried transforming Wikipedia sentences into
quiz bowl sentences by replacing answer mentions with
appropriate descriptors (e.g., “Joseph Heller” with “this
author”), but the resulting sentences suﬀered from a
variety of grammatical issues and did not help the ﬁnal
Because some categories contain substantially fewer questions than others (e.g., astronomy has only 331 questions), we consider only
literature and history questions, as these two
categories account for more than 40% of the
corpus. This leaves us with 21,041 history questions and 22,956 literature questions.
Data Preparation
To make this problem feasible, we only consider
a limited set of the most popular quiz bowl answers. Before we ﬁlter out uncommon answers,
we ﬁrst need to map all raw answer strings to
a canonical set to get around formatting and
redundancy issues. Most quiz bowl answers are
written to provide as much information about
the entity as possible. For example, the following is the raw answer text of a question on the
Chinese leader Sun Yat-sen: Sun Yat-sen; or
Sun Yixian; or Sun Wen; or Sun Deming; or
Nakayama Sho; or Nagao Takano. Quiz bowl
writers vary in how many alternate acceptable
answers they provide, which makes it tricky to
strip superﬂuous information from the answers
using rule-based approaches.
Instead, we use Whoosh,8 an information retrieval library, to generate features in an active
learning classiﬁer that matches existing answer
strings to Wikipedia titles. If we are unable
to ﬁnd a match with a high enough conﬁdence
score, we throw the question out of our dataset.
After this standardization process and manual
vetting of the resulting output, we can use the
Wikipedia page titles as training labels for the
dt-rnn and baseline models.9
65.6% of answers only occur once or twice
in the corpus. We ﬁlter out all answers that
do not occur at least six times, which leaves
us with 451 history answers and 595 literature
answers that occur on average twelve times
in the corpus. These pruning steps result in
4,460 usable history questions and 5,685 literature questions. While ideally we would have
used all answers, our model beneﬁts from many
training examples per answer to learn meaningful representations; this issue can possibly
be addressed with techniques from zero shot
learning , which we leave to future work.
8 
9Code and non-naqt data available at 
umd.edu/~miyyer/qblearn.
We apply basic named entity recognition (ner) by replacing all occurrences of
answers in the question text with single
entities (e.g., Ernest Hemingway becomes
Ernest Hemingway). While we experimented
with more advanced ner systems to detect
non-answer entities, they could not handle
multi-word named entities like the book Love
in the Time of Cholera (title case) or battle
names (e.g., Battle of Midway).
search/replace on all answers in our corpus
works better for multi-word entities.
The preprocessed data are split into folds
by tournament. We choose the past two national tournaments10 as our test set as well
as questions previously answered by players in
Boyd-Graber et al. and assign all other
questions to train and dev sets. History results
are reported on a training set of 3,761 questions with 14,217 sentences and a test set of
699 questions with 2,768 sentences. Literature
results are reported on a training set of 4,777
questions with 17,972 sentences and a test set
of 908 questions with 3,577 sentences.
Finally, we initialize the word embedding
matrix We with word2vec 
trained on the preprocessed question text in
our training set.11 We use the hierarchical skipgram model setting with a window size of ﬁve
We pit qanta against two types of baselines:
bag of words models, which enable comparison
to a standard NLP baseline, and information
retrieval models, which allow us to compare
against traditional question answering techniques.
The bow baseline is a logistic regression classiﬁer trained on binary unigram indicators.12 This simple discriminative model is
an improvement over the generative quiz bowl
answering model of Boyd-Graber et al. .
10The tournaments were selected because naqt does
not reuse any questions or clues within these tournaments.
11Out-of-vocabulary words from the test set are initialized randomly.
frequencies,
weighted features did not increase performance, nor
did adding bigrams to the feature set (possibly because
multi-word named entities are already collapsed into
single words).
The bow-dt baseline is identical
to bow except we augment the feature set with
dependency relation indicators. We include
this baseline to isolate the eﬀects of the dependency tree structure from our compositional
The ir-qb baseline maps questions to
answers using the state-of-the-art Whoosh ir
engine. The knowledge base for ir-qb consists
of “pages” associated with each answer, where
each page is the union of training question text
for that answer. Given a partial question, the
text is ﬁrst preprocessed using a query language similar to that of Apache Lucene. This
processed query is then matched to pages uses
bm-25 term weighting, and the top-ranked page
is considered to be the model’s guess. We also
incorporate fuzzy queries to catch misspellings
and plurals and use Whoosh’s built-in query expansion functionality to add related keywords
to our queries. IR-WIKI
The ir-wiki model
is identical to the ir-qb model except that each
“page” in its knowledge base also includes all
text from the associated answer’s Wikipedia
article. Since all other baselines and dt-rnn
models operate only on the question text, this
is not a valid comparison, but we oﬀer it to
show that we can improve even this strong
model using qanta.
DT-RNN Conﬁgurations
For all dt-rnn models the vector dimension d
and the number of wrong answers per node j
is set to 100. All model parameters other than
We are randomly initialized. The non-linearity
f is the normalized tanh function,13
∥tanh(v)∥.
qanta is our dt-rnn model with feature
averaging across previously-seen sentences in a
question. To obtain the ﬁnal answer prediction
given a partial question, we ﬁrst generate a
feature representation for each sentence within
that partial question. This representation is
computed by concatenating together the word
embeddings and hidden representations averaged over all nodes in the tree as well as the
13The standard tanh function produced heavy saturation at higher levels of the trees, and corrective
weighting as in Socher et al. hurt our model
because named entities that occur as leaves are often
more important than non-terminal phrases.
root node’s hidden vector. Finally, we send
the average of all of the individual sentence features14 as input to a logistic regression classiﬁer
for answer prediction.
fixed-qanta uses the same dt-rnn conﬁguration as qanta except the answer vectors are
kept constant as in the text-to-image model.
Human Comparison
Previous work provides human answers for quiz bowl questions.
We use human records for 1,201 history guesses
and 1,715 literature guesses from twenty-two of
the quiz bowl players who answered the most
questions.15
The standard scoring system for quiz bowl is
10 points for a correct guess and -5 points for
an incorrect guess. We use this metric to compute a total score for each human. To obtain
the corresponding score for our model, we force
it to imitate each human’s guessing policy. For
example, Figure 3 shows a human answering
in the middle of the second sentence. Since our
model only considers sentence-level increments,
we compare the model’s prediction after the
ﬁrst sentence to the human prediction, which
means our model is privy to less information
than humans.
The resulting distributions are shown in Figure 4—our model does better than the average
player on history questions, tying or defeating sixteen of the twenty-two players, but it
does worse on literature questions, where it
only ties or defeats eight players. The ﬁgure
indicates that literature questions are harder
than history questions for our model, which is
corroborated by the experimental results discussed in the next section.
Discussion
In this section, we examine why qanta improves over our baselines by giving examples
of questions that are incorrectly classiﬁed by
all baselines but correctly classiﬁed by qanta.
We also take a close look at some sentences that
all models fail to answer correctly. Finally, we
visualize the answer space learned by qanta.
14Initial experiments with L2 regularization hurt performance on a validation set.
15Participants were skilled quiz bowl players and are
not representative of the general population.
Literature
fixed-qanta
qanta+ir-wiki
Table 1: Accuracy for history and literature at the ﬁrst two sentence positions of each question
and the full question. The top half of the table compares models trained on questions only, while
the IR models in the bottom half have access to Wikipedia. qanta outperforms all baselines
that are restricted to just the question data, and it substantially improves an IR model with
access to Wikipedia despite being trained on much less data.
Score Difference
History: Model vs. Human
Model loses
Model wins
Score Difference
Literature: Model vs. Human
Model loses
Model wins
Figure 4: Comparisons of qanta+ir-wiki to human quiz bowl players. Each bar represents an
individual human, and the bar height corresponds to the diﬀerence between the model score and
the human score. Bars are ordered by human skill. Red bars indicate that the human is winning,
while blue bars indicate that the model is winning. qanta+ir-wiki outperforms most humans
on history questions but fails to defeat the “average” human on literature questions.
A minor character in this play can be summoned
by a bell that does not always work; that character
also doesn’t have eyelids. Near the end, a woman
who drowned her illegitimate child attempts to stab
another woman in the Second Empire-style 3 room
in which the entire play takes place. For 10 points,
Estelle and Ines are characters in which existentialist
play in which Garcin claims “Hell is other people”,
written by Jean-Paul Sartre?
Figure 3: A question on the play “No Exit”
with human buzz position marked as 3. Since
the buzz occurs in the middle of the second
sentence, our model is only allowed to see the
ﬁrst sentence.
Experimental Results
Table 1 shows that when bag of words and
information retrieval methods are restricted to
question data, they perform signiﬁcantly worse
than qanta on early sentence positions. The
performance of bow-dt indicates that while
the dependency tree structure helps by itself,
the compositional distributed representations
learned by qanta are more useful. The significant improvement when we train answers as
part of our vocabulary (see Section 3.2) indicates that our model uses answer occurrences
within question text to learn a more informative vector space.
The disparity between ir-qb and ir-wiki
indicates that the information retrieval models
need lots of external data to work well at all
sentence positions. ir-wiki performs better
than other models because Wikipedia contains
many more sentences that partially match speciﬁc words or phrases found in early clues than
the question training set. In particular, it is
impossible for all other models to answer clues
in the test set that have no semantically similar
or equivalent analogues in the training question data. With that said, ir methods can
also operate over data that does not follow the
special constraints of quiz bowl questions (e.g.,
every sentence uniquely identiﬁes the answer,
answers don’t appear in their corresponding
questions), which qanta cannot handle. By
combining qanta and ir-wiki, we are able to
leverage access to huge knowledge bases along
with deep compositional representations, giving us the best of both worlds.
Where the Attribute Space Helps
Answer Questions
We look closely at the ﬁrst sentence from a
literature question about the author Thomas
Mann: “He left unﬁnished a novel whose title
character forges his father’s signature to get
out of school and avoids the draft by feigning
desire to join”.
All baselines, including ir-wiki, are unable
to predict the correct answer given only this
sentence. However, qanta makes the correct
prediction. The sentence contains no named
entities, which makes it almost impossible for
bag of words or string matching algorithms to
predict correctly. Figure 6 shows that the plot
description associated with the “novel” node
is strongly indicative of the answer. The ﬁve
highest-scored answers are all male authors,16
which shows that our model is able to learn the
answer type without any hand-crafted rules.
Our next example, the ﬁrst sentence in Table 2, is from the ﬁrst position of a question
on John Quincy Adams, which is correctly answered by only qanta.
The bag of words
model guesses Henry Clay, who was also a Secretary of State in the nineteenth century and
helped John Quincy Adams get elected to the
presidency in a “corrupt bargain”. However,
the model can reason that while Henry Clay
was active at the same time and involved in
the same political problems of the era, he did
not represent the Amistad slaves, nor did he
negotiate the Treaty of Ghent.
Where all Models Struggle
Quiz bowl questions are intentionally written to
make players work to get the answer, especially
at early sentence positions. Our model fails to
16three of whom who also have well-known unﬁnished
answer correctly more than half the time after
hearing only the ﬁrst sentence. We examine
some examples to see if there are any patterns
to what makes a question “hard” for machine
learning models.
Consider this question about the Italian explorer John Cabot: “As a young man, this
native of Genoa disguised himself as a Muslim
to make a pilgrimage to Mecca”.
While it is obvious to human readers that
the man described in this sentence is not actually a Muslim, qanta has to accurately model
the verb disguised to make that inference. We
show the score plot of this sentence in Figure 7.
The model, after presumably seeing many instances of muslim and mecca associated with
Mughal emperors, is unable to prevent this
information from propagating up to the root
node. On the bright side, our model is able to
learn that the question is expecting a human
answer rather than non-human entities like the
Umayyad Caliphate.
More examples of impressive answers by
qanta as well as incorrect guesses by all systems are shown in Table 2.
Examining the Attribute Space
Figure 5 shows a t-SNE visualization of the 451 answers
in our history dataset. The vector space is
divided into six general clusters, and we focus
in particular on the us presidents. Zooming
in on this section reveals temporal clustering:
presidents who were in oﬃce during the same
timeframe occur closer together. This observation shows that qanta is capable of learning
attributes of entities during training.
Related Work
There are two threads of related work relevant
to this paper. First, we discuss previous applications of compositional vector models to
related NLP tasks. Then, we examine existing
work on factoid question-answering and review
the similarities and diﬀerences between these
tasks and the game of quiz bowl.
Recursive Neural Networks for
The principle of semantic composition states
that the meaning of a phrase can be derived
Wars, rebellions, and battles
U.S. presidents
Prime ministers
Explorers & emperors
tammany_hall
calvin_coolidge
fourth_crusade
songhai_empire
peace_of_westphalia
inca_empire
charles_sumner
john_paul_jones
wounded_knee_massacre
huldrych_zwingli
battle_of_ayacucho
john_cabot
ulysses_s._grant
hartford_convention
civilian_conservation_corps
roger_williams_(theologian)
george_h._pendleton
william_mckinley
victoria_woodhull
credit_mobilier_of_america_scandal
henry_cabot_lodge,_jr.
mughal_empire
john_marshall
cultural_revolution
guadalcanal
louisiana_purchase
night_of_the_long_knives
chandragupta_maurya
samuel_de_champlain
thirty_years'_war
compromise_of_1850
battle_of_hastings
battle_of_salamis
lewis_cass
dawes_plan
hernando_de_soto
joseph_mccarthy
salvador_allende
battle_of_gettysburg
mikhail_gorbachev
aaron_burr
equal_rights_amendment
war_of_the_spanish_succession
coxey's_army
george_meade
fourteen_points
mapp_v._ohio
sam_houston
ming_dynasty
boxer_rebellion
anti-masonic_party
porfirio_diaz
treaty_of_portsmouth
thebes,_greece
golden_horde
francisco_i._madero
james_g._blaine
schenck_v._united_states
william_walker_(filibuster)
henry_vii_of_england
konrad_adenauer
kellogg-briand_pact
battle_of_culloden
treaty_of_brest-litovsk
william_penn
a._philip_randolph
henry_l._stimson
whig_party_(united_states)
caroline_affair
clarence_darrow
whiskey_rebellion
battle_of_midway
battle_of_lepanto
adolf_eichmann
georges_clemenceau
battle_of_the_little_bighorn
pontiac_(person)
black_hawk_war
battle_of_tannenberg
clayton_antitrust_act
provisions_of_oxford
battle_of_actium
suez_crisis
dorr_rebellion
jay_treaty
triangle_shirtwaist_factory_fire
kamakura_shogunate
julius_nyerere
frederick_douglass
pierre_trudeau
suleiman_the_magnificent
falklands_war
war_of_devolution
charlemagne
daniel_boone
edict_of_nantes
harry_s._truman
pedro_alvares_cabral
thomas_hart_benton_(politician)
battle_of_the_coral_sea
peterloo_massacre
battle_of_bosworth_field
roger_b._taney
bernardo_o'higgins
neville_chamberlain
henry_hudson
cyrus_the_great
jane_addams
rough_riders
james_a._garfield
napoleon_iii
missouri_compromise
battle_of_leyte_gulf
ambrose_burnside
trent_affair
maria_theresa
william_ewart_gladstone
walter_mondale
barry_goldwater
louis_riel
hideki_tojo
marco_polo
brian_mulroney
truman_doctrine
roald_amundsen
tokugawa_shogunate
eleanor_of_aquitaine
louis_brandeis
battle_of_trenton
khmer_empire
benito_juarez
battle_of_antietam
whiskey_ring
otto_von_bismarck
booker_t._washington
battle_of_bannockburn
eugene_v._debs
erie_canal
jameson_raid
green_mountain_boys
haymarket_affair
fashoda_incident
battle_of_shiloh
easter_rising
brook_farm
umayyad_caliphate
francis_drake
clara_barton
shays'_rebellion
vyacheslav_molotov
oda_nobunaga
samuel_gompers
battle_of_bunker_hill
battle_of_plassey
david_livingstone
tang_dynasty
teutonic_knights
second_vatican_council
alfred_dreyfus
henry_the_navigator
nelson_mandela
peasants'_revolt
gaius_marius
getulio_vargas
horatio_gates
john_t._scopes
league_of_nations
first_battle_of_bull_run
alfred_the_great
leonid_brezhnev
long_march
emiliano_zapata
james_monroe
woodrow_wilson
william_henry_harrison
battle_of_puebla
battle_of_zama
justinian_i
thaddeus_stevens
cecil_rhodes
kwame_nkrumah
diet_of_worms
george_armstrong_custer
battle_of_agincourt
seminole_wars
shah_jahan
amerigo_vespucci
john_foster_dulles
lester_b._pearson
oregon_trail
lateran_treaty
chester_a._arthur
opium_wars
treaty_of_utrecht
knights_of_labor
alexander_hamilton
plessy_v._ferguson
horace_greeley
mary_baker_eddy
alexander_kerensky
treaty_of_ghent
bay_of_pigs_invasion
antonio_lopez_de_santa_anna
great_northern_war
henry_i_of_england
council_of_trent
chiang_kai-shek
samuel_j._tilden
fidel_castro
wilmot_proviso
yuan_dynasty
benjamin_harrison
war_of_the_austrian_succession
crimean_war
john_brown_(abolitionist)
teapot_dome_scandal
albert_b._fall
marcus_licinius_crassus
earl_warren
warren_g._harding
gunpowder_plot
homestead_strike
samuel_adams
john_peter_zenger
thomas_paine
free_soil_party
st._bartholomew's_day_massacre
arthur_wellesley,_1st_duke_of_wellington
charles_de_gaulle
leon_trotsky
hugh_capet
alexander_h._stephens
haile_selassie
william_h._seward
rutherford_b._hayes
safavid_dynasty
muhammad_ali_jinnah
kulturkampf
maximilien_de_robespierre
hubert_humphrey
hull_house
philip_ii_of_macedon
guelphs_and_ghibellines
byzantine_empire
albigensian_crusade
diocletian
fort_ticonderoga
parthian_empire
charles_martel
william_jennings_bryan
alexander_ii_of_russia
ferdinand_magellan
state_of_franklin
ivan_the_terrible
martin_luther_(1953_film)
millard_fillmore
francisco_franco
aethelred_the_unready
ronald_reagan
benito_mussolini
henry_clay
kitchen_cabinet
black_hole_of_calcutta
ancient_corinth
john_wilkes_booth
john_tyler
robert_walpole
tokugawa_ieyasu
thomas_nast
nikita_khrushchev
andrew_jackson
labour_party_(uk)
monroe_doctrine
john_quincy_adams
congress_of_berlin
jacques_cartier
battle_of_the_thames
spanish_civil_war
fugitive_slave_laws
john_a._macdonald
council_of_chalcedon
pancho_villa
war_of_the_pacific
george_wallace
susan_b._anthony
marcus_garvey
grover_cleveland
george_b._mcclellan
october_manifesto
vitus_bering
john_hancock
william_lloyd_garrison
platt_amendment
mary,_queen_of_scots
first_triumvirate
francisco_vasquez_de_coronado
margaret_thatcher
sherman_antitrust_act
hanseatic_league
henry_morton_stanley
july_revolution
stephen_a._douglas
xyz_affair
jimmy_carter
francisco_pizarro
kublai_khan
vasco_da_gama
battle_of_caporetto
ostend_manifesto
mustafa_kemal_ataturk
peter_the_great
gang_of_four
battle_of_chancellorsville
david_lloyd_george
cardinal_mazarin
embargo_act_of_1807
brigham_young
charles_lindbergh
hudson's_bay_company
paris_commune
jefferson_davis
amelia_earhart
mali_empire
adolf_hitler
benedict_arnold
camillo_benso,_count_of_cavour
meiji_restoration
black_panther_party
mark_antony
franklin_pierce
molly_maguires
zachary_taylor
han_dynasty
adlai_stevenson_ii
james_k._polk
douglas_macarthur
boston_massacre
toyotomi_hideyoshi
greenback_party
second_boer_war
third_crusade
james_buchanan
john_sherman
george_washington
wars_of_the_roses
atlantic_charter
eleanor_roosevelt
congress_of_vienna
john_wycliffe
winston_churchill
emilio_aguinaldo
miguel_hidalgo_y_costilla
second_bank_of_the_united_states
council_of_constance
seneca_falls_convention
first_crusade
spiro_agnew
taiping_rebellion
mao_zedong
paul_von_hindenburg
albany_congress
jawaharlal_nehru
battle_of_blenheim
ethan_allen
antonio_de_oliveira_salazar
herbert_hoover
pepin_the_short
indira_gandhi
william_howard_taft
thomas_jefferson
gamal_abdel_nasser
oliver_cromwell
salmon_p._chase
battle_of_austerlitz
benjamin_disraeli
gadsden_purchase
girolamo_savonarola
treaty_of_tordesillas
battle_of_marathon
elizabeth_cady_stanton
battle_of_kings_mountain
christopher_columbus
william_the_conqueror
battle_of_trafalgar
charles_evans_hughes
cleisthenes
william_tecumseh_sherman
mobutu_sese_seko
prague_spring
peloponnesian_war
jacques_marquette
martin_van_buren
bonus_army
charles_stewart_parnell
edward_the_confessor
bartolomeu_dias
salem_witch_trials
battle_of_the_bulge
john_adams
maginot_line
henry_cabot_lodge
giuseppe_garibaldi
daniel_webster
john_c._calhoun
treaty_of_waitangi
zebulon_pike
genghis_khan
calvin_coolidge
william_mckinley
james_monroe
woodrow_wilson
william_henry_harrison
benjamin_harrison
millard_fillmore
ronald_reagan
john_tyler
andrew_jackson
john_quincy_adams
grover_cleveland
jimmy_carter
franklin_pierce
zachary_taylor
james_buchanan
george_washington
herbert_hoover
william_howard_taft
thomas_jefferson
martin_van_buren
john_adams
Figure 5: t-SNE 2-D projections of 451 answer
vectors divided into six major clusters. The
blue cluster is predominantly populated by U.S.
presidents. The zoomed plot reveals temporal
clustering among the presidents based on the
years they spent in oﬃce.
from the meaning of the words that it contains as well as the syntax that glues those
words together. Many computational models
of compositionality focus on learning vector
spaces . Recent approaches towards modeling
compositional vector spaces with neural networks have been successful, although simpler
functions have been proposed for short phrases
 .
Recursive neural networks have achieved
state-of-the-art performance in sentiment analysis and parsing . rnns
have not been previously used for learning attribute spaces as we do here, although recursive
tensor networks were unsuccessfully applied to
a knowledge base completion task . More relevant to this work are the
dialogue analysis model proposed by Kalchbrenner & Blunsom and the paragraph vector model described in Le and Mikolov ,
both of which are able to generate distributed
representations of paragraphs. Here we present
a simpler approach where a single model is able
to learn complex sentence representations and
average them across paragraphs.
Factoid Question-Answering
Factoid question answering is often functionally
equivalent to information retrieval. Given a
knowledge base and a query, the goal is to
Thomas Mann
Joseph Conrad
Henrik Ibsen
Franz Kafka
Henry James
Figure 6: A question on the German novelist
Thomas Mann that contains no named entities,
along with the ﬁve top answers as scored by
qanta. Each cell in the heatmap corresponds
to the score (inner product) between a node
in the parse tree and the given answer, and
the dependency parse of the sentence is shown
on the left. All of our baselines, including irwiki, are wrong, while qanta uses the plot
description to make a correct guess.
return the answer. Many approaches to this
problem rely on hand-crafted pattern matching
and answer-type classiﬁcation to narrow down
the search space . More recent factoid qa
systems incorporate the web and social media
into their retrieval systems .
In contrast to these approaches, we place the
burden of learning answer types and patterns
on the model.
Future Work
While we have shown that dt-rnns are eﬀective models for quiz bowl question answering,
other factoid qa tasks are more challenging.
Questions like what does the aarp stand for?
from trec qa data require additional infrastructure. A more apt comparison would be to
IBM’s proprietary Watson system for Jeopardy, which is limited to single
sentences, or to models trained on Yago .
We would also like to fairly compare qanta
Shah Jahan
Figure 7: An extremely misleading question
about John Cabot, at least to computer models.
The words muslim and mecca lead to three
Mughal emperors in the top ﬁve guesses from
qanta; other models are similarly led awry.
with ir-wiki. A promising avenue for future
work would be to incorporate Wikipedia data
into qanta by transforming sentences to look
like quiz bowl questions and
to select relevant sentences, as not every sentence in a Wikipedia article directly describes
its subject. Syntax-speciﬁc annotation may help in this regard.
Finally, we could adapt the attribute space
learned by the dt-rnn to use information from
knowledge bases and to aid in knowledge base
completion. Having learned many facts about
entities that occur in question text, a dt-rnn
could add new facts to a knowledge base or
check existing relationships.
Conclusion
We present qanta, a dependency-tree recursive
neural network for factoid question answering
that outperforms bag of words and information retrieval baselines. Our model improves
upon a contrastive max-margin objective function from previous work to dynamically update
answer vectors during training with a single
model. Finally, we show that sentence-level
representations can be easily and eﬀectively
combined to generate paragraph-level represen-
he also successfully represented the amistad
slaves and negotiated the treaty of ghent and
the annexation of ﬂorida from spain during his
stint as secretary of state under james monroe
john quincy adams, henry clay, andrew jackson
this work refers to people who fell on their
knees in hopeless cathedrals and who jumped
oﬀthe brooklyn bridge
howl, the tempest, paradise lost
despite the fact that twenty six martyrs were
cruciﬁed here in the late sixteenth century it
remained the center of christianity in its country
nagasaki, guadalcanal, ethiopia
this novel parodies freudianism in a chapter
about the protagonist ’s dream of holding a
live ﬁsh in his hands
billy budd, the ambassadors, all my sons
a contemporary of elizabeth i he came to power
two years before her and died two years later
grover cleveland, benjamin harrison, henry
cabot lodge
Table 2: Five example sentences occuring at
the ﬁrst sentence position along with their top
three answers as scored by qanta; correct answers are marked with blue and wrong answers
are marked with red.
qanta gets the ﬁrst
three correct, unlike all other baselines. The
last two questions are too diﬃcult for all of
our models, requiring external knowledge (e.g.,
Freudianism) and temporal reasoning.
tations with more predictive power than those
of the individual sentences.
Acknowledgments
We thank the anonymous reviewers, Stephanie
Hwa, Bert Huang, and He He for their insightful comments. We thank Sharad Vikram, R.
Hentzel, and the members of naqt for providing our data. This work was supported by
nsf Grant IIS-1320538. Boyd-Graber is also
supported by nsf Grant CCF-1018625. Any
opinions, ﬁndings, conclusions, or recommendations expressed here are those of the authors
and do not necessarily reﬂect the view of the