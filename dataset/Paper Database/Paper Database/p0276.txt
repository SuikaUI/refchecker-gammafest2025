Learned in Translation: Contextualized Word Vectors
Bryan McCann
 
James Bradbury
 
Caiming Xiong
 
Richard Socher
 
Computer vision has beneﬁted from initializing multiple deep layers with weights
pretrained on large supervised training sets like ImageNet. Natural language processing (NLP) typically sees initialization of only the lowest layer of deep models
with pretrained word vectors. In this paper, we use a deep LSTM encoder from
an attentional sequence-to-sequence model trained for machine translation (MT)
to contextualize word vectors. We show that adding these context vectors (CoVe)
improves performance over using only unsupervised word and character vectors on
a wide variety of common NLP tasks: sentiment analysis (SST, IMDb), question
classiﬁcation (TREC), entailment (SNLI), and question answering (SQuAD). For
ﬁne-grained sentiment analysis and entailment, CoVe improves performance of our
baseline models to the state of the art.
Introduction
Signiﬁcant gains have been made through transfer and multi-task learning between synergistic tasks.
In many cases, these synergies can be exploited by architectures that rely on similar components. In
computer vision, convolutional neural networks (CNNs) pretrained on ImageNet [Krizhevsky et al.,
2012, Deng et al., 2009] have become the de facto initialization for more complex and deeper models.
This initialization improves accuracy on other related tasks such as visual question answering [Xiong
et al., 2016] or image captioning [Lu et al., 2016, Socher et al., 2014].
In NLP, distributed representations pretrained with models like Word2Vec [Mikolov et al., 2013]
and GloVe [Pennington et al., 2014] have become common initializations for the word vectors of
deep learning models. Transferring information from large amounts of unlabeled training data in
the form of word vectors has shown to improve performance over random word vector initialization
on a variety of downstream tasks, e.g. part-of-speech tagging [Collobert et al., 2011], named entity
recognition [Pennington et al., 2014], and question answering [Xiong et al., 2017]; however, words
rarely appear in isolation. The ability to share a common representation of words in the context of
sentences that include them could further improve transfer learning in NLP.
Inspired by the successful transfer of CNNs trained on ImageNet to other tasks in computer vision,
we focus on training an encoder for a large NLP task and transferring that encoder to other tasks
in NLP. Machine translation (MT) requires a model to encode words in context so as to decode
them into another language, and attentional sequence-to-sequence models for MT often contain an
LSTM-based encoder, which is a common component in other NLP models. We hypothesize that MT
data in general holds potential comparable to that of ImageNet as a cornerstone for reusable models.
This makes an MT-LSTM pairing in NLP a natural candidate for mirroring the ImageNet-CNN
pairing of computer vision.
As depicted in Figure 1, we begin by training LSTM encoders on several machine translation datasets,
and we show that these encoders can be used to improve performance of models trained for other
31st Conference on Neural Information Processing Systems , Long Beach, CA, USA.
 
E n c o d e r
E n c o d e r
E n c o d e r
V e c t o r s
V e c t o r s
T a s k - s p e c i f i c M o d e l
D e c o d e r
T r a n s l a t i o n
V e c t o r s
Figure 1: We a) train a two-layer, bidirectional LSTM as the encoder of an attentional sequence-tosequence model for machine translation and b) use it to provide context for other NLP models.
tasks in NLP. In order to test the transferability of these encoders, we develop a common architecture
for a variety of classiﬁcation tasks, and we modify the Dynamic Coattention Network for question
answering [Xiong et al., 2017]. We append the outputs of the MT-LSTMs, which we call context
vectors (CoVe), to the word vectors typically used as inputs to these models. This approach improved
the performance of models for downstream tasks over that of baseline models using pretrained
word vectors alone. For the Stanford Sentiment Treebank (SST) and the Stanford Natural Language
Inference Corpus (SNLI), CoVe pushes performance of our baseline model to the state of the art.
Experiments reveal that the quantity of training data used to train the MT-LSTM is positively
correlated with performance on downstream tasks. This is yet another advantage of relying on MT,
as data for MT is more abundant than for most other supervised NLP tasks, and it suggests that
higher quality MT-LSTMs carry over more useful information. This reinforces the idea that machine
translation is a good candidate task for further research into models that possess a stronger sense of
natural language understanding.
Related Work
Transfer Learning.
Transfer learning, or domain adaptation, has been applied in a variety
of areas where researchers identiﬁed synergistic relationships between independently collected
datasets. Saenko et al. adapt object recognition models developed for one visual domain to
new imaging conditions by learning a transformation that minimizes domain-induced changes in
the feature distribution. Zhu et al. use matrix factorization to incorporate textual information
into tagged images to enhance image classiﬁcation. In natural language processing (NLP), Collobert
et al. leverage representations learned from unsupervised learning to improve performance on
supervised tasks like named entity recognition, part-of-speech tagging, and chunking. Recent work in
NLP has continued in this direction by using pretrained word representations to improve models for
entailment [Bowman et al., 2014], sentiment analysis [Socher et al., 2013], summarization [Nallapati
et al., 2016], and question answering [Seo et al., 2017, Xiong et al., 2017]. Ramachandran et al. 
propose initializing sequence-to-sequence models with pretrained language models and ﬁne-tuning
for a speciﬁc task. Kiros et al. propose an unsupervised method for training an encoder that
outputs sentence vectors that are predictive of surrounding sentences. We also propose a method of
transferring higher-level representations than word vectors, but we use a supervised method to train
our sentence encoder and show that it improves models for text classiﬁcation and question answering
without ﬁne-tuning.
Neural Machine Translation. Our source domain of transfer learning is machine translation,
a task that has seen marked improvements in recent years with the advance of neural machine
translation (NMT) models. Sutskever et al. investigate sequence-to-sequence models that
consist of a neural network encoder and decoder for machine translation. Bahdanau et al. 
propose the augmenting sequence to sequence models with an attention mechanism that gives
the decoder access to the encoder representations of the input sequence at each step of sequence
generation. Luong et al. further study the effectiveness of various attention mechanisms
with respect to machine translation. Attention mechanisms have also been successfully applied to
NLP tasks like entailment [Conneau et al., 2017], summarization [Nallapati et al., 2016], question
answering [Seo et al., 2017, Xiong et al., 2017, Min et al., 2017], and semantic parsing [Dong and
Lapata, 2016]. We show that attentional encoders trained for NMT transfer well to other NLP tasks.
Transfer Learning and Machine Translation. Machine translation is a suitable source domain for
transfer learning because the task, by nature, requires the model to faithfully reproduce a sentence in
the target language without losing information in the source language sentence. Moreover, there is an
abundance of machine translation data that can be used for transfer learning. Hill et al. study
the effect of transferring from a variety of source domains to the semantic similarity tasks in Agirre
et al. . Hill et al. further demonstrate that ﬁxed-length representations obtained from
NMT encoders outperform those obtained from monolingual (e.g. language modeling) encoders on
semantic similarity tasks. Unlike previous work, we do not transfer from ﬁxed length representations
produced by NMT encoders. Instead, we transfer representations for each token in the input sequence.
Our approach makes the transfer of the trained encoder more directly compatible with subsequent
LSTMs, attention mechanisms, and, in general, layers that expect input sequences. This additionally
facilitates the transfer of sequential dependencies between encoder states.
Transfer Learning in Computer Vision. Since the success of CNNs on the ImageNet challenge, a
number of approaches to computer vision tasks have relied on pretrained CNNs as off-the-shelf feature
extractors. Girshick et al. show that using a pretrained CNN to extract features from region
proposals improves object detection and semantic segmentation models. Qi et al. propose
a CNN-based object tracking framework, which uses hierarchical features from a pretrained CNN
(VGG-19 by Simonyan and Zisserman ). For image captioning, Lu et al. train a visual
sentinel with a pretrained CNN and ﬁne-tune the model with a smaller learning rate. For VQA, Fukui
et al. propose to combine text representations with visual representations extracted by a
pretrained residual network [He et al., 2016]. Although model transfer has seen widespread success
in computer vision, transfer learning beyond pretrained word vectors is far less pervasive in NLP.
Machine Translation Model
We begin by training an attentional sequence-to-sequence model for English-to-German translation
based on Klein et al. with the goal of transferring the encoder to other tasks.
For training, we are given a sequence of words in the source language wx = [wx
1, . . . , wx
sequence of words in the target language wz = [wz
1, . . . , wz
m]. Let GloVe(wx) be a sequence of
GloVe vectors corresponding to the words in wx, and let z be a sequence of randomly initialized
word vectors corresponding to the words in wz.
We feed GloVe(wx) to a standard, two-layer, bidirectional, long short-term memory network 1 [Graves
and Schmidhuber, 2005] that we refer to as an MT-LSTM to indicate that it is this same two-layer
BiLSTM that we later transfer as a pretrained encoder. The MT-LSTM is used to compute a sequence
of hidden states
h = MT-LSTM(GloVe(wx)).
For machine translation, the MT-LSTM supplies the context for an attentional decoder that produces
a distribution over output words p( ˆwz
1, . . . , wz
t−1) at each time-step.
At time-step t, the decoder ﬁrst uses a two-layer, unidirectional LSTM to produce a hidden state hdec
based on the previous target embedding zt−1 and a context-adjusted hidden state ˜ht−1:
[zt−1; ˜ht−1], hdec
The decoder then computes a vector of attention weights α representing the relevance of each
encoding time-step to the current decoder state.
αt = softmax
where H refers to the elements of h stacked along the time dimension.
1 Since there are several biLSTM variants, we deﬁne ours as follows. Let h = [h1, . . . , hn] = biLSTM (x)
represent the output sequence of our biLSTM operating on an input sequence x. Then a forward LSTM computes
= LSTM (xt, h→
t−1) for each time step, and a backward LSTM computes h←
= LSTM (xt, h←
ﬁnal outputs of the biLSTM for each time step are ht = [h→
The decoder then uses these weights as coefﬁcients in an attentional sum that is concatenated with
the decoder state and passed through a tanh layer to form the context-adjusted hidden state ˜h:
˜ht = tanh
H⊤αt; hdec
The distribution over output words is generated by a ﬁnal transformation of the context-adjusted
hidden state: p( ˆwz
1, . . . , wz
t−1) = softmax
Wout˜ht + bout
Context Vectors (CoVe)
We transfer what is learned by the MT-LSTM to downstream tasks by treating the outputs of the
MT-LSTM as context vectors. If w is a sequence of words and GloVe(w) the corresponding sequence
of word vectors produced by the GloVe model, then
CoVe(w) = MT-LSTM(GloVe(w))
is the sequence of context vectors produced by the MT-LSTM. For classiﬁcation and question
answering, for an input sequence w, we concatenate each vector in GloVe(w) with its corresponding
vector in CoVe(w)
˜w = [GloVe(w); CoVe(w)]
as depicted in Figure 1b.
Classiﬁcation with CoVe
We now describe a general biattentive classiﬁcation network (BCN) we use to test how well CoVe
transfer to other tasks. This model, shown in Figure 2, is designed to handle both single-sentence
and two-sentence classiﬁcation tasks. In the case of single-sentence tasks, the input sequence is
duplicated to form two sequences, so we will assume two input sequences for the rest of this section.
E n c o d e r
E n c o d e r
B i a t t e n t i o n
M a x o u t N e t w o r k
I n t e g r a t e
I n t e g r a t e
R e L U N e t w o r k
R e L U N e t w o r k
Figure 2: Our BCN uses a feedforward network with ReLU activation and biLSTM encoder to create task-speciﬁc representations of
each input sequence. Biattention conditions
each representation on the other, a biLSTM
integrates the conditional information, and a
maxout network uses pooled features to compute a distribution over possible classes.
Input sequences wx and wy are converted to sequences of vectors, ˜wx and ˜wy, as described in Eq. 6
before being fed to the task-speciﬁc portion of the
model (Figure 1b).
A function f applies a feedforward network with
ReLU activation [Nair and Hinton, 2010] to each
element of ˜wx and ˜wy, and a bidirectional LSTM
processes the resulting sequences to obtain task speciﬁc representations,
x = biLSTM (f( ˜wx))
y = biLSTM (f( ˜wy))
These sequences are each stacked along the time axis
to get matrices X and Y .
In order to compute representations that are interdependent, we use a biattention mechanism [Seo et al.,
2017, Xiong et al., 2017]. The biattention ﬁrst computes an afﬁnity matrix A = XY ⊤. It then extracts
attention weights with column-wise normalization:
Ax = softmax (A)
Ay = softmax
which amounts to a novel form of self-attention when
x = y. Next, it uses context summaries
to condition each sequence on the other.
We integrate the conditioning information into our representations for each sequence with two separate
one-layer, bidirectional LSTMs that operate on the concatenation of the original representations
(to ensure no information is lost in conditioning), their differences from the context summaries (to
explicitly capture the difference from the original signals), and the element-wise products between
originals and context summaries (to amplify or dampen the original signals).
X|y = biLSTM ([X; X −Cy; X ⊙Cy])
Y|x = biLSTM ([Y ; Y −Cx; Y ⊙Cx])
The outputs of the bidirectional LSTMs are aggregated by pooling along the time dimension. Max and
mean pooling have been used in other models to extract features, but we have found that adding both
min pooling and self-attentive pooling can aid in some tasks. Each captures a different perspective on
the conditioned sequences.
The self-attentive pooling computes weights for each time step of the sequence
βx = softmax
 X|yv1 + d1
βy = softmax
 Y|xv2 + d2
and uses these weights to get weighted summations of each sequence:
xself = X⊤
yself = Y ⊤
The pooled representations are combined to get one joined representation for all inputs.
max(X|y); mean(X|y); min(X|y); xself
max(Y|x); mean(Y|x); min(Y|x); yself
We feed this joined representation through a three-layer, batch-normalized [Ioffe and Szegedy, 2015]
maxout network [Goodfellow et al., 2013] to produce a probability distribution over possible classes.
Question Answering with CoVe
For question answering, we obtain sequences x and y just as we do in Eq. 7 and Eq. 8 for classiﬁcation,
except that the function f is replaced with a function g that uses a tanh activation instead of a ReLU
activation. In this case, one of the sequences is the document and the other the question in the
question-document pair. These sequences are then fed through the coattention and dynamic decoder
implemented as in the original Dynamic Coattention Network (DCN) [Xiong et al., 2016].
Machine Translation. We use three different English-German machine translation datasets to train
three separate MT-LSTMs. Each is tokenized using the Moses Toolkit [Koehn et al., 2007].
Our smallest MT dataset comes from the WMT 2016 multi-modal translation shared task [Specia
et al., 2016]. The training set consists of 30,000 sentence pairs that brieﬂy describe Flickr captions
and is often referred to as Multi30k. Due to the nature of image captions, this dataset contains
sentences that are, on average, shorter and simpler than those from larger counterparts.
Our medium-sized MT dataset is the 2016 version of the machine translation task prepared for the
International Workshop on Spoken Language Translation [Cettolo et al., 2015]. The training set
consists of 209,772 sentence pairs from transcribed TED presentations that cover a wide variety of
topics with more conversational language than in the other two machine translation datasets.
Our largest MT dataset comes from the news translation shared task from WMT 2017. The training set
consists of roughly 7 million sentence pairs that comes from web crawl data, a news and commentary
corpus, European Parliament proceedings, and European Union press releases.
We refer to the three MT datasets as MT-Small, MT-Medium, and MT-Large, respectively, and we
refer to context vectors from encoders trained on each in turn as CoVe-S, CoVe-M, and CoVe-L.
Sentiment Classiﬁcation
2 classes, single sentences
Sentiment Classiﬁcation
5 classes, single sentences
Sentiment Classiﬁcation
2 classes, multiple sentences
Question Classiﬁcation
Question Classiﬁcation
50 classes
Entailment Classiﬁcation
Question Answering
open-ended (answer-spans)
Table 1: Datasets, tasks, details, and number of training examples.
Sentiment Analysis. We train our model separately on two sentiment analysis datasets: the Stanford
Sentiment Treebank (SST) [Socher et al., 2013] and the IMDb dataset [Maas et al., 2011]. Both of
these datasets comprise movie reviews and their sentiment. We use the binary version of each dataset
as well as the ﬁve-class version of SST. For training on SST, we use all sub-trees with length greater
than 3. SST-2 contains roughly 56, 400 reviews after removing “neutral” examples. SST-5 contains
roughly 94, 200 reviews and does include “neutral” examples. IMDb contains 25, 000 multi-sentence
reviews, which we truncate to the ﬁrst 200 words. 2, 500 reviews are held out for validation.
Question Classiﬁcation. For question classiﬁcation, we use the small TREC dataset [Voorhees and
Tice, 1999] dataset of open-domain, fact-based questions divided into broad semantic categories. We
experiment with both the six-class and ﬁfty-class versions of TREC, which which refer to as TREC-6
and TREC-50, respectively. We hold out 452 examples for validation and leave 5, 000 for training.
Entailment. For entailment, we use the Stanford Natural Language Inference Corpus (SNLI) [Bowman et al., 2015], which has 550,152 training, 10,000 validation, and 10,000 testing examples. Each
example consists of a premise, a hypothesis, and a label specifying whether the premise entails,
contradicts, or is neutral with respect to the hypothesis.
Question Answering. The Stanford Question Answering Dataset (SQuAD) [Rajpurkar et al., 2016]
is a large-scale question answering dataset with 87,599 training examples, 10,570 development
examples, and a test set that is not released to the public. Examples consist of question-answer pairs
associated with a paragraph from the English Wikipedia. SQuAD examples assume that the question
is answerable and that the answer is contained verbatim somewhere in the paragraph.
Experiments
Machine Translation
The MT-LSTM trained on MT-Small obtains an uncased, tokenized BLEU score of 38.5 on the
Multi30k test set from 2016. The model trained on MT-Medium obtains an uncased, tokenized BLEU
score of 25.54 on the IWSLT test set from 2014. The MT-LSTM trained on MT-Large obtains an
uncased, tokenized BLEU score of 28.96 on the WMT 2016 test set. These results represent strong
baseline machine translation models for their respective datasets. Note that, while the smallest dataset
has the highest BLEU score, it is also a much simpler dataset with a restricted domain.
Training Details. When training an MT-LSTM, we used ﬁxed 300-dimensional word vectors. We
used the CommonCrawl-840B GloVe model for English word vectors, which were completely ﬁxed
during training, so that the MT-LSTM had to learn how to use the pretrained vectors for translation.
The hidden size of the LSTMs in all MT-LSTMs is 300. Because all MT-LSTMs are bidirectional,
they output 600-dimensional vectors. The model was trained with stochastic gradient descent with a
learning rate that began at 1 and decayed by half each epoch after the validation perplexity increased
for the ﬁrst time. Dropout with ratio 0.2 was applied to the inputs and outputs of all layers of the
encoder and decoder.
Classiﬁcation and Question Answering
For classiﬁcation and question answering, we explore how varying the input representations affects
ﬁnal performance. Table 2 contains validation performances for experiments comparing the use of
GloVe, character n-grams, CoVe, and combinations of the three.
% improvement over randomly
initialized word vectors
GloVe+CoVe
(a) CoVe and GloVe
% improvement over randomly
initialized word vectors
GloVe+Char
GloVe+CoVe
GloVe+CoVe+Char
(b) CoVe and Characters
Figure 3: The Beneﬁts of CoVe
Char+CoVe-L
Table 2: CoVe improves validation performance. CoVe has an advantage over character
n-gram embeddings, but using both improves performance further. Models beneﬁt most by
using an MT-LSTM trained with MT-Large (CoVe-L). Accuracy is reported for classiﬁcation
tasks, and F1 is reported for SQuAD.
Training Details. Unsupervised vectors and MT-LSTMs remain ﬁxed in this set of experiments.
LSTMs have hidden size 300. Models were trained using Adam with α = 0.001. Dropout was
applied before all feedforward layers with dropout ratio 0.1, 0.2, or 0.3. Maxout networks pool over 4
channels, reduce dimensionality by 2, 4, or 8, reduce again by 2, and project to the output dimension.
The Beneﬁts of CoVe. Figure 3a shows that models that use CoVe alongside GloVe achieve higher
validation performance than models that use only GloVe. Figure 3b shows that using CoVe in Eq. 6
brings larger improvements than using character n-gram embeddings [Hashimoto et al., 2016]. It
also shows that altering Eq. 6 by additionally appending character n-gram embeddings can boost
performance even further for some tasks. This suggests that the information provided by CoVe is
complementary to both the word-level information provided by GloVe as well as the character-level
information provided by character n-gram embeddings.
% improvement over randomly
initialized word vectors
Figure 4: The Effects of MT Training Data
The Effects of MT Training Data.
We experimented with different
training datasets for the MT-LSTMs
to see how varying the MT training data affects the beneﬁts of using
CoVe in downstream tasks. Figure 4
shows an important trend we can extract from Table 2. There appears to
be a positive correlation between the
larger MT datasets, which contain
more complex, varied language, and
the improvement that using CoVe
brings to downstream tasks. This is
evidence for our hypothesis that MT
data has potential as a large resource
for transfer learning in NLP.
P-LSTM [Wieting et al., 2016]
SVM [da Silva et al., 2011]
CT-LSTM [Looks et al., 2017]
SVM [Van-Tu and Anh-Cuong, 2016]
TE-LSTM [Huang et al., 2017]
DSCNN-P [Zhang et al., 2016]
NSE [Munkhdalai and Yu, 2016a]
BCN+Char+CoVe [Ours]
BCN+Char+CoVe [Ours]
TBCNN [Mou et al., 2015]
bmLSTM [Radford et al., 2017]
LSTM-CNN [Zhou et al., 2016]
MVN [Guo et al., 2017]
SVM [Loni et al., 2011]
DMN [Kumar et al., 2016]
SNoW [Li and Roth, 2006]
LSTM-CNN [Zhou et al., 2016]
BCN+Char+CoVe [Ours]
TE-LSTM [Huang et al., 2017]
RulesUHC [da Silva et al., 2011]
NTI [Munkhdalai and Yu, 2016b]
SVM [Van-Tu and Anh-Cuong, 2016]
BCN+Char+CoVe [Ours]
Rules [Madabushi and Lee, 2016]
BCN+Char+CoVe [Ours]
DecAtt+Intra [Parikh et al., 2016]
SA-LSTM [Dai and Le, 2015]
NTI [Munkhdalai and Yu, 2016b]
bmLSTM [Radford et al., 2017]
re-read LSTM [Sha et al., 2016]
TRNN [Dieng et al., 2016]
btree-LSTM [Paria et al., 2016]
oh-LSTM [Johnson and Zhang, 2016] 94.1
600D ESIM [Chen et al., 2016]
Virtual [Miyato et al., 2017]
BCN+Char+CoVe [Ours]
Table 4: Single model test accuracies for classiﬁcation tasks.
Test Performance. Table 4 shows the ﬁnal test accuracies of our best classiﬁcation models, each of
which achieved the highest validation accuracy on its task using GloVe, CoVe, and character n-gram
embeddings. Final test performances on SST-5 and SNLI reached a new state of the art.
LR [Rajpurkar et al., 2016]
DCR [Yu et al., 2017]
hM-LSTM+AP [Wang and Jiang, 2017]
DCN+Char [Xiong et al., 2017]
BiDAF [Seo et al., 2017]
R-NET [Wang et al., 2017]
DCN+Char+CoVe [Ours]
Table 3: Exact match and F1 validation scores for singlemodel question answering.
Table 3 shows how the validation exact
match and F1 scores of our best SQuAD
model compare to the scores of the most
recent top models in the literature. We
did not submit the SQuAD model for testing, but the addition of CoVe was enough
to push the validation performance of
the original DCN, which already used
character n-gram embeddings, above the
validation performance of the published
version of the R-NET. Test performances
are tracked by the SQuAD leaderboard 2.
GloVe+Char+
Skip-Thought
Table 5: Classiﬁcation validation accuracies with skip-thought and CoVe.
Comparison to Skip-Thought Vectors.
Kiros et al.
 show how to encode a sentence into a single
skip-thought vector that transfers well to a variety of
tasks. Both skip-thought and CoVe pretrain encoders
to capture information at a higher level than words.
However, skip-thought encoders are trained with an
unsupervised method that relies on the ﬁnal output of
the encoder. MT-LSTMs are trained with a supervised
method that instead relies on intermediate outputs associated with each input word. Additionally, the 4800
dimensional skip-thought vectors make training more
unstable than using the 600 dimensional CoVe. Table 5
shows that these differences make CoVe more suitable
for transfer learning in our classiﬁcation experiments.
2 
Conclusion
We introduce an approach for transferring knowledge from an encoder pretrained on machine
translation to a variety of downstream NLP tasks. In all cases, models that used CoVe from our best,
pretrained MT-LSTM performed better than baselines that used random word vector initialization,
baselines that used pretrained word vectors from a GloVe model, and baselines that used word vectors
from a GloVe model together with character n-gram embeddings. We hope this is a step towards the
goal of building uniﬁed NLP models that rely on increasingly more general reusable weights.
The PyTorch code at includes an example of how to
generate CoVe from the MT-LSTM we used in all of our best models. We hope that making our best
MT-LSTM available will encourage further research into shared representations for NLP models.