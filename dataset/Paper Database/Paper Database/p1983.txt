Heterogeneous Defect Prediction
Jaechang Nam and Sunghun Kim
Department of Computer Science and Engineering
The Hong Kong University of Science and Technology
Hong Kong, China
{jcnam,hunkim}@cse.ust.hk
Software defect prediction is one of the most active research
areas in software engineering.
We can build a prediction
model with defect data collected from a software project
and predict defects in the same project, i.e. within-project
defect prediction (WPDP). Researchers also proposed crossproject defect prediction (CPDP) to predict defects for new
projects lacking in defect data by using prediction models
built by other projects. In recent studies, CPDP is proved
to be feasible. However, CPDP requires projects that have
the same metric set, meaning the metric sets should be identical between projects. As a result, current techniques for
CPDP are diﬃcult to apply across projects with heterogeneous metric sets.
To address the limitation, we propose heterogeneous defect prediction (HDP) to predict defects across projects with
heterogeneous metric sets.
Our HDP approach conducts
metric selection and metric matching to build a prediction
model between projects with heterogeneous metric sets. Our
empirical study on 28 subjects shows that about 68% of predictions using our approach outperform or are comparable
to WPDP with statistical signiﬁcance.
Categories and Subject Descriptors
D.2.9 [Software Engineering]: Management—software quality assurance
General Terms
Algorithm, Experimentation
Defect prediction, quality assurance, heterogeneous metrics
INTRODUCTION
Software defect prediction is one of the most active research areas in software engineering . If software quality assurance teams can
predict defects before releasing a software product, they can
eﬀectively allocate limited resources for quality control . For example, Ostrand et al. applied defect prediction in two large software systems of AT&T for eﬀective
and eﬃcient testing activities .
Most defect prediction models are based on machine learning, therefore it is a must to collect defect datasets to train a
prediction model . The defect datasets consist of various software metrics and labels. Commonly used software
metrics for defect prediction are complexity metrics (such as
lines of code, Halstead metrics, McCabe’s cyclometic complexity, and CK metrics) and process metrics .
Labels indicate whether the source code is buggy or clean
for binary classiﬁcation .
Most proposed defect prediction models have been evaluated on within-project defect prediction (WPDP) settings . In Figure 1a, each instance representing a source
code ﬁle or function consists of software metric values and is
labeled as buggy or clean. In the WPDP setting, a prediction model is trained using the labeled instances in Project
A and predict unlabeled (‘?’) instances in the same project
as buggy or clean.
However, it is diﬃcult to build a prediction model for new
software projects or projects with little historical information since they do not have enough training instances.
Various process metrics and label information can be extracted from the historical data of software repositories such
as version control and issue tracking systems . Thus, it
is diﬃcult to collect process metrics and instance labels in
new projects or projects that have little historical data . For example, without instances being labeled using past defect data it is not possible to build a prediction
To address this issue, researchers have proposed crossproject defect prediction (CPDP) .
CPDP approaches predict defects even for new projects lacking in historical data by reusing prediction models built by
other project datasets. As shown in Figure 1b, a prediction
model is trained by labeled instances in Project A (source)
and predicts defects in Project B (target).
However, most CPDP approaches have a serious limitation: CPDP is only feasible for projects which have exactly
the same metric set as shown in Figure 1b. Finding other
projects with exactly the same metric set can be challenging.
Publicly available defect datasets that are widely used in defect prediction literature usually have heterogeneous metric
sets . For example, many NASA datasets in the
: Metric value
: Buggy-labeled instance
: Clean-labeled instance
?": Unlabeled instance
(a) Within-Project Defect Prediction (WPDP)
Same metric set
(b) Cross-Project Defect Prediction (CPDP)
Heterogeneous!metric sets
(c) Heterogeneous Defect Prediction (HDP)
Figure 1: Various Defect Prediction Scenarios
PROMISE repository have 37 metrics but AEEEM datasets
used by D’Ambroas et al.
have 61 metrics .
only common metric between NASA and AEEEM datasets
is lines of code (LOC). CPDP between NASA and AEEEM
datasets with all metric sets is not feasible since they have
completely diﬀerent metrics .
Some CPDP studies use only common metrics when source
and target datasets have heterogeneous metric sets .
For example, Turhan et al. use the only 17 common metrics
between the NASA and SOFTLAB datasets that have heterogeneous metric sets . However, ﬁnding other projects
with multiple common metrics can be challenging. As mentioned, there is only one common metric between NASA and
AEEEM. Also, only using common metrics may degrade the
performance of CPDP models.
That is because some informative metrics necessary for building a good prediction
model may not be in the common metrics across datasets.
For example, in the study of Turhan et al., the performance
of CPDP (0.35) by their approach did not outperform that
of WPDP (0.39) in terms of the average f-measure .
In this paper, we propose the heterogeneous defect prediction (HDP) approach to predict defects across projects even
with heterogeneous metric sets. If the proposed approach is
feasible as in Figure 1c, we could reuse any existing defect
datasets to build a prediction model. For example, many
PROMISE defect datasets even if they have heterogeneous
metric sets could be used as training datasets to predict
defects in any project.
The key idea of our HDP approach is matching metrics
that have similar distributions between source and target
datasets. In addition, we also used metric selection to remove less informative metrics of a source dataset for a prediction model before metric matching.
Our empirical study shows that HDP models are feasible
and their prediction performance is promising. About 68%
of HDP predictions outperform or are comparable to WPDP
predictions with statistical signiﬁcance.
Our contributions are as follows:
• Propose the heterogeneous defect prediction models.
• Conduct an extensive and large-scale empirical study to
evaluate the heterogeneous defect prediction models.
BACKGROUND AND RELATED WORK
The CPDP approaches have been studied by many researchers of late . Since the performance
of CPDP is usually very poor , researchers have proposed
various techniques to improve CPDP .
Watanabe et al. proposed the metric compensation approach for CPDP . The metric compensation transforms
a target dataset similar to a source dataset by using the average metric values . To evaluate the performance of the
metric compensation, Watanabe et al. collected two defect
datasets with the same metric set (8 object-oriented metrics)
from two software projects and then conducted CPDP .
Rahman et al. evaluated the CPDP performance in terms
of cost-eﬀectiveness and conﬁrmed that the prediction performance of CPDP is comparable to WPDP . For the
empirical study, Rahman et al. collected 9 datasets with the
same process metric set .
Fukushima et al. conducted an empirical study of just-intime defect prediction in the CPDP setting . They used
16 datasets with the same metric set . The 11 datasets
were provided by Kamei et al. but 5 projects were newly
collected with the same metric set of the 11 datasets .
However, collecting datasets with the same metric set
might limit CPDP. For example, if existing defect datasets
contain object-oriented metrics such as CK metrics , collecting the same object-oriented metrics is impossible for
projects that are written in non-object-oriented languages.
Turhan et al. proposed the nearest-neighbour (NN) ﬁlter
to improve the performance of CPDP . The basic idea of
the NN ﬁlter is that prediction models are built by source instances that are nearest-neighbours of target instances .
To conduct CPDP, Turhan et al. used 10 NASA and SOFT-
LAB datasets in the PROMISE repository .
proposed Transfer Naive Bayes (TNB) .
The TNB builds a prediction model by weighting source
instances similar to target instances . Using the same
datasets used by Turhan et al., Ma et al.
evaluated the
TNB models for CPDP .
Since the datasets used in the empirical studies of Turhan
et al. and Ma et al. have heterogeneous metric sets, they
conducted CPDP using the common metrics . There
is another CPDP study with the top-K common metric subset . However, as explained in Section 1, CPDP using
common metrics is worse than WPDP .
Nam et al.
adapted a state-of-the-art transfer learning
technique called Transfer Component Analysis (TCA) and
proposed TCA+ . They used 8 datasets in two groups,
ReLink and AEEEM, with 26 and 61 metrics respectively .
However, Nam et al. could not conduct CPDP between
ReLink and AEEEM because they have heterogeneous metric sets. Since the project pool with the same metric set is
very limited, conducting CPDP using a project group with
the same metric set can be limited as well. For example,
at most 18% of defect datasets in the PROMISE repository
have the same metric set . In other words, we cannot directly conduct CPDP for the 18% of the defect datasets by
using the remaining (82%) datasets in the PROMISE repository . CPDP studies conducted by Canfora et al. and
Panichella et al. use 10 Java projects only with the same
metric set from the PROMISE repository 
Zhang et al. proposed the universal model for CPDP .
The universal model is built using 1398 projects from Source-
Forge and Google code and leads to comparable prediction
results to WPDP in their experimental setting .
However, the universal defect prediction model may be
diﬃcult to apply for the projects with heterogeneous metric sets since the universal model uses 26 metrics including
code metrics, object-oriented metrics, and process metrics.
In other words, the model can only be applicable for target
datasets with the same 26 metrics. In the case where the
target project has not been developed in object-oriented languages, a universal model built using object-oriented metrics
cannot be used for the target dataset.
He et al. addressed the limitations due to heterogeneous
metric sets in CPDP studies listed above .
Their approach, CPDP-IFS, used distribution characteristic vectors
of an instance as metrics.
The prediction performance of
their best approach is comparable to or helpful in improving regular CPDP models .
However, the approach by He et al. is not compared with
WPDP . Although their best approach is helpful to improve regular CPDP models, the evaluation might be weak
since the prediction performance of a regular CPDP is usually very poor . In addition, He et al. conducted experiments on only 11 projects in 3 dataset groups .
We propose HDP to address the above limitations caused
by projects with heterogeneous metric sets. Contrary to the
study by He et al. , we compare HDP to WPDP, and
HDP achieved better or comparable prediction performance
to WPDP in about 68% of predictions.
In addition, we
conducted extensive experiments on 28 projects in 5 dataset
groups. In Section 3, we explain our approach in detail.
Figure 2 shows the overview of HDP based on metric selection and metric matching.
In the ﬁgure, we have two
datasets, Source and Target, with heterogeneous metric sets.
Each row and column of a dataset represents an instance
and a metric, respectively, and the last column represents
instance labels. As shown in the ﬁgure, the metric sets in
the source and target datasets are not identical (X1 to X4
and Y1 to Y7 respectively).
When given source and target datasets with heterogeneous
metric sets, for metric selection we ﬁrst apply a feature selection technique to the source. Feature selection is a common
approach used in machine learning for selecting a subset of
features by removing redundant and irrelevant features .
We apply widely used feature selection techniques for metric
selection of a source dataset as in Section 3.1 .
After that, metrics based on their similarity such as distribution or correlation between the source and target met-
X1#X2#X3#X4#Label#
1" 1" 3" 10"Buggy
8" 0" 1" 0" Clean"
" " " "
9" 0" 1" 1" Clean"
Source: Project A
Target: Project B
Prediction
(training)
Y1# Y2# Y3# Y4# Y5# Y6# Y7# Label#
3" 1" 1" 0" 2" 1" 9"
1" 1" 9" 0" 2" 3" 8"
" " " " " " "
0" 1" 1" 1" 2" 1" 1"
1" 3"10"Buggy
8" 1" 0" Clean"
9" 1" 1" Clean"
1" 3"10"Buggy
8" 1" 0" Clean"
9" 1" 1" Clean"
Figure 2: Heterogeneous defect prediction
rics are matched up. In Figure 2, three target metrics are
matched with the same number of source metrics.
After these processes, we ﬁnally arrive at a matched source
and target metric set. With the ﬁnal source dataset, HDP
builds a model and predicts labels of target instances.
In the following subsections, we explain the metric selection and matching in detail.
Metric Selection in Source Datasets
For metric selection, we used various feature selection approaches widely used in defect prediction such as gain ratio, chi-square, relief-F, and signiﬁcance attribute evaluation . According to benchmark studies about various
feature selection approaches, a single best feature selection
approach for all prediction models does not exist .
For this reason, we conduct experiments under diﬀerent feature selection approaches. When applying feature selection
approaches, we select top 15% of metrics as suggested by
Gao et al. . In addition, we compare the prediction results with or without metric selection in the experiments.
Matching Source and Target Metrics
To match source and target metrics, we measure the similarity of each source and target metric pair by using several
existing methods such as percentiles, Kolmogorov-Smirnov
Test, and Spearman’s correlation coeﬃcient . We de-
ﬁne the following three analyzers for metric matching:
• Percentile based matching (PAnalyzer)
• Kolmogorov-Smirnov Test based matching (KSAnalyzer)
• Spearman’s correlation based matching (SCoAnalyzer)
The key idea of these analyzers is computing matching
scores for all pairs between the source and target metrics.
Figure 3 shows a sample matching. There are two source
metrics (X1 and X2) and two target metrics (Y1 and Y2).
Thus, there are four possible matching pairs, (X1,Y1), (X1,Y2),
(X2,Y1), and (X2,Y2). The numbers in rectangles between
Source Metrics
Target Metrics
Figure 3: An example of metric matching between
source and target datasets.
matched source and target metrics in Figure 3 represent
matching scores computed by an analyzer.
For example,
the matching score between the metrics, X1 and Y1, is 0.8.
From all pairs between the source and target metrics, we
remove poorly matched metrics whose matching score is not
greater than a speciﬁc cutoﬀthreshold. For example, if the
matching score cutoﬀthreshold is 0.3, we include only the
matched metrics whose matching score is greater than 0.3.
In Figure 3, the edge (X1,Y2) in matched metrics will be
excluded when the cutoﬀthreshold is 0.3.
Thus, all the
candidate matching pairs we can consider include the edges
(X1,Y1), (X2,Y2), and (X2,Y1) in this example. In Section 4,
we design our empirical study under diﬀerent matching score
cutoﬀthresholds to investigate their impact on prediction.
We may not have any matched metrics based on the cutoﬀ
threshold. In this case, we cannot conduct defect prediction.
In Figure 3, if the cutoﬀthreshold is 0.9, none of the matched
metrics are considered for HDP so we cannot build a prediction model for the target dataset.
For this reason, we
investigate target prediction coverage (i.e. what percentage
of target datasets could be predicted?) in our experiments.
After applying the cutoﬀthreshold, we used the maximum
weighted bipartite matching technique to select a group
of matched metrics, whose sum of matching scores is highest,
without duplicated metrics. In Figure 3, after applying the
cutoﬀthreshold of 0.30, we can form two groups of matched
metrics without duplicated metrics.
The ﬁrst group consists of the edges, (X1,Y1) and (X2,Y2), and another group
consists of the edge (X2,Y1). In each group, there are no
duplicated metrics. The sum of matching scores in the ﬁrst
group is 1.3 (=0.8+0.5) and that of the second group is 0.4.
The ﬁrst group has a greater sum (1.3) of matching scores
than the second one (0.4). Thus, we select the ﬁrst matching group as the set of matched metrics for the given source
and target metrics with the cutoﬀthreshold of 0.30 in this
Each analyzer for the metric matching scores is described
PAnalyzer simply compares 9 percentiles (10th, 20th,. . . ,
90th) of ordered values between source and target metrics.
First, we compute the diﬀerence of n-th percentiles in
source and target metric values by the following equation:
Pij(n) = spij(n)
, where Pij(n) is the comparison function for n-th percentiles
of i-th source and j-th target metrics, and spij(n) and bpij(n)
are smaller and bigger percentile values respectively at n-th
percentiles of i-th source and j-th target metrics. For example, if the 10th percentile of the source metric values is 20
and that of target metric values is 15, the diﬀerence is 0.75
(Pij(10) = 15/20 = 0.75).
Using this percentile comparison function, a matching score
between source and target metrics is calculated by the following equation:
Pij(10 × k)
, where Mij is a matching score between i-th source and j-th
target metrics. The best matching score of this equation is
1.0 when the values of the source and target metrics of all 9
percentiles are the same.
KSAnalyzer
KSAnalyzer uses a p-value from the Kolmogorov-Smirnov
Test (KS-test) as a matching score between source and target metrics. The KS-test is a non-parametric two sample
test that can be applicable when we cannot be sure about
the normality of two samples and/or the same variance . Since metrics in some defect datasets used in our empirical study have exponential distributions and metrics
in other datasets have unknown distributions and variances,
the KS-test is a suitable statistical test to compute p-values
for these datasets. In statistical testing, a p-value shows the
probability of whether two samples are signiﬁcantly diﬀerent
or not. We used the KolmogorovSmirnovTest implemented
in the Apache commons math library.
The matching score is:
, where pij is a p-value from the KS-test of i-th source and
j-th target metrics. A p-value tends to be zero when two
metrics are signiﬁcantly diﬀerent.
SCoAnalyzer
In SCoAnalyzer, we used the Spearman’s rank correlation coeﬃcient as a matching score for source and target
metrics .
Spearman’s rank correlation measures how
two samples are correlated . To compute the coeﬃcient,
we used the SpearmansCorrelation in the Apache commons
math library. Since the size of metric vectors should be the
same to compute the coeﬃcient, we randomly select metric
values from a metric vector that is of a greater size than another metric vector. For example, if the sizes of the source
and target metric vectors are 110 and 100 respectively, we
randomly select 100 metric values from the source metric to
agree to the size between the source and target metrics. All
metric values are sorted before computing the coeﬃcient.
The matching score is as follows:
, where cij is a Spearman’s rank correlation coeﬃcient between i-th source and j-th target metrics.
Building Prediction Models
After applying metric selection and matching, we can ﬁnally build a prediction model using a source dataset with
selected and matched metrics.
Then, as a regular defect
prediction model, we can predict defects on a target dataset
with metrics matched to selected source metrics.
Table 1: The 28 defect datasets from ﬁve groups.
# of instances
Prediction
Granularity
129(39.69%)
206(20.66%)
1862 245(13.16%)
1492 209(14.01%)
98(50.52%)
22(39.29%)
118(29.57%)
20(16.00%)
27(11.54%)
141(59.49%)
27(15.34%)
velocity-1.4 196
147(75.00%)
110(15.21%)
xerces-1.2
71(16.14%)
42(12.84%)
27(10.67%)
1077 134(12.44%)
1458 178(12.21%)
20(18.69%)
15(14.85%)
EXPERIMENTAL SETUP
Research Questions
To systematically evaluate heterogeneous defect prediction (HDP) models, we set three research questions.
• RQ1: Is heterogeneous defect prediction comparable to
WPDP (Baseline1)?
• RQ2: Is heterogeneous defect prediction comparable to
CPDP using common metrics (CPDP-CM, Baseline2)?
• RQ3: Is heterogeneous defect prediction comparable to
CPDP-IFS (Baseline3)?
RQ1, RQ2, and RQ3 lead us to investigate whether our HDP
is comparable to WPDP (Baseline1), CPDP-CM (Baseline2),
and CDDP-IFS (Baseline3) .
Benchmark Datasets
We collected publicly available datasets from previous studies . Table 1 lists all dataset groups used in
our experiments. Each dataset group has a heterogeneous
metric set as shown in the table. Prediction Granularity in
the last column of the table means the prediction granularity
of instances. Since we focus on the distribution or correlation of metric values when matching metrics, it is beneﬁcial
to be able to apply the HDP approach on datasets even in
diﬀerent granularity levels.
We used ﬁve groups with 28 defect datasets: AEEEM,
ReLink, MORPH, NASA, and SOFTLAB.
AEEEM was used to benchmark diﬀerent defect prediction models and to evaluate CPDP techniques .
Each AEEEM dataset consists of 61 metrics including objectoriented (OO) metrics, previous-defect metrics, entropy metrics of change and code, and churn-of-source-code metrics .
Datasets in ReLink were used by Wu et al. to improve
the defect prediction performance by increasing the quality
of the defect data and have 26 code complexity metrics extracted by the Understand tool .
The MORPH group contains defect datasets of several
open source projects used in the study about the dataset
privacy issue for defect prediction . The 20 metrics used
in MORPH are McCabe’s cyclomatic metrics, CK metrics,
and other OO metrics .
NASA and SOFTLAB contain proprietary datasets from
NASA and a Turkish software company, respectively .
We used ﬁve NASA datasets, which share the same metric
set in the PROMISE repository . We used cleaned
NASA datasets (DS′ version) . For the SOFTLAB group,
we used all SOFTLAB datasets in the PROMISE repository . The metrics used in both NASA and SOFTLAB
groups are Halstead and McCabe’s cyclomatic metrics but
NASA has additional complexity metrics such as parameter
count and percentage of comments .
Predicting defects is conducted across diﬀerent dataset
groups. For example, we build a prediction model by Apache
in ReLink and tested the model on velocity-1.4 in MORPH
(Apache⇒velocity-1.4).1
We did not conduct defect prediction across projects in the
same group where datasets have the same metric set since
the focus of our study is on prediction across datasets with
heterogeneous metric sets. In total, we have 600 possible
prediction combinations from these 28 datasets.
Matching Score Cutoff Thresholds
To build HDP models, we apply various cutoﬀthresholds
for matching scores to observe how prediction performance
varies according to diﬀerent cutoﬀvalues. Matched metrics
by analyzers have their own matching scores as explained in
Section 3. We apply diﬀerent cutoﬀvalues (0.05 and 0.10,
0.20,. . . ,0.90) for the HDP models. If a matching score cutoﬀis 0.50, we remove matched metrics with the matching
score ≤0.50 and build a prediction model with matched
metrics with the score > 0.50. The number of matched metrics varies by each prediction combination.
For example,
when using KSAnalyzer with the cutoﬀof 0.05, the number
of matched metrics is four in cm1⇒ar5 while that is one
in ar6⇒pc3. The average number of matched metrics also
varies by analyzers and cutoﬀvalues; 4 (PAnalyzer), 2 (KS-
Analyzer), and 5 (SCoAnalyzer) in the cutoﬀof 0.05 but 1
(PAnalyzer), 1 (KSAnalyzer), and 4 (SCoAnalyzer) in the
cutoﬀof 0.90 on average.
We compare HDP to three baselines: WPDP (Baseline1),
CPDP using common metrics (CPDP-CM) between source
and target datasets (Baseline2), and CPDP-IFS (Baseline3).
We ﬁrst compare HDP to WPDP. Comparing HDP to
WPDP will provide empirical evidence of whether our HDP
models are applicable in practice.
We conduct CPDP using only common metrics (CPDP-
CM) between source and target datasets as in previous CPDP
studies .
For example, AEEEM and MORPH
have OO metrics as common metrics so we use them to
build prediction models for datasets between AEEEM and
MORPH. Since using common metrics has been adopted to
address the limitation on heterogeneous metric sets in previous CPDP studies , we set CPDP-CM as a baseline to evaluate our HDP models. The number of matched
metrics varies across the dataset group. Between AEEEM
1Hereafter a rightward arrow (⇒) denotes a prediction combination.
and ReLink, only one common metric exists, LOC. NASA
and SOFTLAB have 28 common metrics. On average, the
number of common metrics in our datasets are about ﬁve.
We include CPDP-IFS proposed by He et al. as a baseline . CPDP-IFS enables defect prediction on projects
with heterogeneous metric sets (Imbalanced Feature Sets)
by using the 16 distribution characteristics of values of each
instance such as mode, median, mean, harmonic mean, minimum, maximum, range, variation ratio, ﬁrst quartile, third
quartile, interquartile range, variance, standard deviation,
coeﬃcient of variance, skewness, and kurtosis . The 16
distribution characteristics are used as features to build a
prediction model.
Experimental Design
For the machine learning algorithm, we use Logistic regression, which is widely used for both WPDP and CPDP
studies . We use Logistic regression implemented in Weka with default options .
For WPDP, it is necessary to split datasets into training
and test sets. We use 50:50 random splits, which are widely
used in the evaluation of defect prediction models [22, 37,
For the 50:50 random splits, we use one half of the
instances for training a model and the rest for test (round
1). In addition, we use the two splits in a reverse way, where
we use the previous test set for training and the previous
training set for test (round 2). We repeat these two rounds
500 times, i.e. 1000 tests, since there is a randomness in
selecting instances for each split . Simply speaking, we
repeat the two-fold cross validation 500 times.
For CPDP-CM, CPDP-IFS, and HDP, we build a prediction model by using a source dataset and test the model on
the same test splits used in WPDP. Since there are 1000 different test splits for a within-project prediction, the CPDP-
CM, CPDP-IFS, and HDP models are tested on 1000 diﬀerent test splits as well.
To evaluate the prediction performance, we use the area
under the receiver operating characteristic curve (AUC).
The AUC is known as a useful measure for comparing different models and is widely used because AUC is unaﬀected
by class imbalance as well as being independent from the
cutoﬀprobability (prediction threshold) that is used to decide whether an instance should be classiﬁed as positive or
negative . Mende conﬁrmed that it is diﬃcult
to compare the defect prediction performance reported in
the defect prediction literature since prediction results come
from the diﬀerent cutoﬀs of prediction thresholds . However, the receiver operating characteristic curve is drawn by
both the true positive rate (recall) and the false positive rate
on various prediction threshold values. The higher AUC represents better prediction performance and the AUC of 0.5
means the performance of a random predictor .
To compare HDP by our approach to baselines, we also use
the Win/Tie/Loss evaluation, which is used for performance
comparison between diﬀerent experimental settings in many
studies .
As we repeat the experiments 1000
times for a target project dataset, we conduct the Wilcoxon
signed-rank test (p<0.05) for all AUC values in baselines
and HDP . If an HDP model for the target dataset outperforms a corresponding baseline result after the statistical
test, we mark this HDP model as a ‘Win’. In a similar way,
Table 2: Comparison results among WPDP, CPDP-
CM, CPDP-IFS, and HDP by KSAnalyzer with the
cutoﬀof 0.05 in a median AUC.
(Baseline1)
(Baseline2)
(Baseline3)
KSAnalyzer
cutoﬀ=0.05
velocity-1.4
xerces-1.2
we mark an HDP model as a ‘Loss’ when the results of a
baseline outperforms that of our HDP approach with statistical signiﬁcance. If there is no diﬀerence between a baseline
and HDP with statistical signiﬁcance, we mark this case as
a ‘Tie’. Then, we count the number of wins, ties, and losses
for HDP models. By using the Win/Tie/Loss evaluation,
we can investigate how many HDP predictions it will take
to improve baseline approaches.
In this section, we report the experimental results of the
HDP approach by signiﬁcance attribute selection for metric
selection and KSAnalyzer with the cutoﬀthreshold of 0.05.
Among diﬀerent metric selections, signiﬁcance attribute
selection led to the best prediction performance overall. In
terms of analyzers, KSAnalyzer led to the best prediction
performance. Since the KSAnalyzer is based on the p-value
of a statistical test, we chose a cutoﬀof 0.05 which is a commonly accepted signiﬁcance level in the statistical test .
Comparison Result with Baselines
Table 2 shows the prediction performance (a median AUC)
of baselines and HDP by KSAnalyzer with the cutoﬀof 0.05,
for each target as well as all targets (the last row in the
Baseline1 represents the WPDP results of a target project and Baseline2 shows the CPDP results using
common metrics (CPDP-CM) between source and target
projects. Baseline3 shows the results of CPDP-IFS proposed
by He et al. . The last column shows the HDP results
by KSAnalyzer with the cutoﬀof 0.05. If there are better
results between Baseline1 and our approach with statistical
Median AUCs of baselines and HDP in
KSAnalyzer (cutoﬀ=0.05) by each source group.
(Baseline1)
(Baseline2)
(Baseline3)
signiﬁcance (Wilcoxon signed-rank test , p<0.05), the
better AUC values are in bold font as shown in Table 2. Between Baseline2 and our approach, better AUC values with
statistical signiﬁcance are underlined in the table. Between
Baseline3 and our approach, better AUC values with statistical signiﬁcance are shown with an asterisk (*).
We observed the following results about RQ1:
• In 25 out of 28 targets, HDP by KSAnalyzer with the cutoﬀof 0.05 leads to better or comparable results against
WPDP with statistical signiﬁcance. (The WPDP results
in only ML, pc3, and pc4 are in bold font.)
• HDP by KSAnalyzer with the cutoﬀof 0.05 outperforms
WPDP with statistical signiﬁcance when considering results from all targets (All in the last row in the table)
together in our experimental settings.
The following results are related to RQ2:
• HDP by KSAnalyzer with the cutoﬀof 0.05 leads to better or comparable results to CPDP-CM with statistical
signiﬁcance. (no underlines in CPDP-CM of Table 2)
• HDP by KSAnalyzer with the cutoﬀof 0.05 outperforms
CPDP-CM with statistical signiﬁcance when considering
results from All targets in our experimental settings.
In terms of RQ3, we observed the following results:
• HDP by KSAnalyzer with the cutoﬀof 0.05 leads to better or comparable results to CPDP-IFS with statistical
signiﬁcance. (no asterisks in CPDP-IFS of Table 2)
• HDP by KSAnalyzer with the cutoﬀof 0.05 outperforms
CPDP-IFS with statistical signiﬁcance when considering
results from All targets in our experimental settings.
Target Prediction Coverage
Target prediction coverage shows how many target projects
can be predicted by the HDP models. If there are no feasible
prediction combinations for a target because of there being
no matched metrics between source and target datasets, it
might be diﬃcult to use an HDP model in practice.
For target prediction coverage, we analysed our HDP results by KSAnalyzer with the cutoﬀof 0.05 by each source
For example, after applying metric selection and
matching, we can build a prediction model by using EQ in
AEEEM and predict each of 23 target projects in four other
dataset groups. However, because of the cutoﬀvalue, some
predictions may not be feasible. For example, EQ⇒Apache
was not feasible because there are no matched metrics whose
matching scores are greater than 0.05.
Instead, another
source dataset, JDT, in AEEEM has matched metrics to
Apache. In this case, we consider the source group, AEEEM,
covered Apache. In other words, if any dataset in a source
group can be used to build an HDP model for a target, we
count the target prediction is as covered.
Table 3 shows the median AUCs and prediction target
coverage. The median AUCs were computed by the AUC
values of the feasible HDP predictions and their corresponding predictions of WPDP, CPDP-CM, and CPDP-IFS. We
conducted the Wilcoxon signed-rank test on results between
WPDP and baselines . Like Table 2, better results between baselines and our approach with statistical signiﬁcance are in bold font, underlined, and/or with asterisks.
First of all, in each source group, we could observe HDP
outperforms or is comparable to WPDP with statistical signiﬁcance. For example, target projects were predicted by
some projects in ReLink and the median AUC for HDP by
KSAnalyzer is 0.702 while that of WPDP is 0.654. In addition, HDP by KSAnalyzer also outperforms or had a comparable prediction performance against CPDP-CM. There are
no better results in CPDP-CM than those in HDP by KSAnalyzer with statistical signiﬁcance (no underlined results in
third column in Table 3). In addition, HDP by KSAbalyzer
outperforms CPDP-IFS in all source groups.
The target prediction coverage in the MORPH and SOFT-
LAB groups yielded 100% as shown in Table 3. This implies our HDP models may conduct defect prediction with
high target coverage even using datasets which only appear
in one source group. AEEEM, ReLink, and NASA groups
have 48%, 88%, and 52% respectively since some prediction combinations do not have matched metrics because of
low matching scores (≤0.05). Thus, some prediction combinations using matched metrics with low matching scores
can be automatically excluded. In this sense, our HDP approach follows a similar concept to the two-phase prediction model : (1) checking prediction feasibility between
source and target datasets, and (2) predicting defects.
Win/Tie/Loss Results
To investigate our performance evaluation in detail, we report the Win/Tie/Loss results of HDP by KSAnalyzer with
the cutoﬀof 0.05 against WPDP (Baseline1), CPDP-CM
(Baseline2), and CPDP-IFS (Baseline3) in Table 4.
KSAnalyzer with the cutoﬀof 0.05 conducted 222 out of
600 prediction combinations since 378 combinations do not
have any matched metrics because of the cutoﬀthreshold.
In Table 4, the target dataset, EQ, was predicted in four
prediction combinations and our approach, HDP, outperforms Baseline1 and Baseline3 in the four combinations (i.e.
4 Wins). However, HDP outperforms Baseline2 in only two
combinations of the target, EQ (2 Wins).
Against Baseline1, the six targets such as EQ, Zxing, skarbonka, tomcat, ar3, and ar4 have only Win results. In other
words, defects in those six targets could be predicted better
by other source projects using HDP models by KSAnalyzer
compared to WPDP models.
However, the eight targets such as JDT, ML, redaktor,
velocity-1.4, xalan-2.4, xerces-1.2, pc3, and pc4 have no
Wins at all against Baseline1.
In addition, other targets
still have Losses even though they have Win or Tie results.
Overall, the numbers of Win and Tie results are 147 and
3 respectively out of all of the 222 prediction combinations.
This means that about 67.6% of prediction combinations by
our HDP models achieve better or comparable prediction
performance than those in WPDP.
The Win/Tie/Loss results against Baseline2 and Baseline3 show a similar trend.
The HDP results in the 161
(72.5%) out of 222 prediction combinations show HDP out-
Win/Tie/Loss results of HDP by KS-
Analyzer (cutoﬀ=0.05) against WPDP (Baseline1),
CPDP-CM (Baseline2), and CPDP-IFS (Baseline3).
(Baseline1)
(Baseline2)
(Baseline3)
velocity-1.4
xerces-1.2
performs and is comparable to CPDP-CM. Against Baseline3, 185 (83.3%) predction combinations are Win or Tie
The Win/Tie/Loss results show that with our HDP model
by KSAnalyzer there is a higher possibility of getting a better prediction performance.
However, there are still about 32% Loss results against
WPDP. In Section 6, we discuss and analyze why Loss results happen.
DISCUSSION
Why Matched Metric Works?
In Figure 4, we use box plots to represent distributions
of matched metrics. The gray, black, and white box plots
shows distributions of matched metrics in all, buggy, and
clean instances respectively. The three box plots on the lefthand side represent distributions of a source metric while
the three box plots on the right-hand side represent those
of a target metric. The bottom and top of the boxes represent the ﬁrst and third quartiles respectively. The solid
horizontal line in a box represents the median value in each
distribution. Black points in the ﬁgure are outliers.
Figure 4 explains how the prediction combination of ant-
1.3⇒ar5 can have a high AUC, 0.946. Suppose that a simple
model predicts that an instance is buggy when the metric
value of the instance is more than 40 in the case of Figure 4. In both datasets, approximately 75% or more buggy
and clean instances will be predicted correctly. In Figure 4,
Source: ant-1.3 (RFC)
Target: ar5 (unique_operands)
Distribution
Metric values
Distribution
score=0.91) from ant-1.3⇒ar5 (AUC=0.946).
Source: Safe (CountLineCode)
Target: velocity-1.4 (loc)
Distribution
Metric values
Distribution
score=0.45) from Safe⇒velocity-1.4 (AUC=0.391).
the matched metrics in ant-1.3⇒ar5 are the response for
class (RFC: number of methods invoked by a class) and
the number of unique operands (unique operands) , respectively. The RFC and unique operands are not the same
metric so it might look like an arbitrary matching. However, they are matched based on their similar distributions
as shown in Figure 4. Typical defect prediction metrics have
tendencies in which higher complexity causes more bugproneness .
In Figure 4, instances with higher
values of RFC and unique operands have the tendency to
be more bug-prone. For this reason, the model using the
matched metrics could achieve such a high AUC (0.938).
We could observe this bug-prone tendency in other Win results. Since matching metrics is based on similarity of source
and target metric distributions, HDP also addresses several
issues related to a dataset shift such as the covariate shift
and domain shift discussed by Turhan .
Some prediction combinations have Loss results in Table 4. We investigated matched metrics in these prediction
combinations. In velocity-1.4 of Table 4, all results are Loss.
Thus, as a representative loss result, we discuss the prediction combination, Safe⇒velocity-1.4, whose AUC is 0.391.
As observed, Loss results were usually caused by diﬀerent tendencies of bug-proneness between source and target
metrics. Figure 5 shows how the bug-prone tendencies of
source and target metrics are diﬀerent.
Interestingly, the
matched source and target metric by the KSAnalyzer is the
same as LOC (CountLineCode and loc) in both. As we observe in the ﬁgure, the median of buggy instance values of
the source metric is higher than that of clean instances in
Prediction performance (a median AUC
and % of Win) in diﬀerent metric selections.
Gain Ratio
0.657 63.7%
0.645 63.2%
0.536 80.2%
Chi-Square
0.657 64.7%
0.651 66.4%
0.556 82.3%
Signiﬁcance
0.657 66.2%
0.636 66.2%
0.553 82.0%
0.670 57.0%
0.657 63.1%
0.543 80.5%
0.657 47.3%
0.624 50.3%
0.536 66.3%
that the more LOC implies the higher bug-proneness in the
case of Safe. However, the median of buggy instance values
in a target metric is lower than that of clean instance values in that the less LOC implies the higher bug-proneness
in velocity-1.4. This inconsistent tendency of bug-proneness
between the source and target metrics could degrade the
prediction performance although they are the same metric.
We regard the matching that has an inconsistent bugprone tendency between source and target metrics as a noisy
metric matching. We could observe this kind of noisy metric
matching in prediction combinations in other Loss results.
However, it is very challenging to ﬁlter out the noisy metric matching since we cannot know labels of target instances
in advance. If we could design a ﬁlter for the noisy metric matching, the Loss results would be minimized. Thus,
designing a new ﬁlter to mitigate these Loss results is an
interesting problem to address. Investigating this new ﬁlter
for the noisy metric matching will remain as future work.
Figure 5 also explains why CPDP-CM did not show reasonable prediction performance. Although the matched metrics are same as LOC, its bug-prone tendency is inconsistent.
Thus, this matching using the common metric was noisy and
was not helpful for building a prediction model.
We also investigated whether the performance of HDP can
be aﬀected by the size of a target dataset. If the size of a
target dataset gets smaller, it might be diﬃcult to precisely
compute distribution similarity between source and target
metrics. As in Table 1, the sizes of datasets vary from 36
(ar5) and 1862 (ML), and the results of HDP in Table 4 also
vary. We could not ﬁnd any relation between the size of a
target and the prediction performance. In ar5 of Table 4,
14 out of 18 predictions led to Win results, while in ML, all
six predictions led to Loss results. In velocity-1.4 that has a
relatively small number (196) of instances compared to other
datasets, all three predictions had Loss results. However,
tomcat that is of a bigger size (858) than velocity-1.4 had
only Win results. As discussed, the prediction performance
of HDP is dependent on the bug-prone tendencies of the
matched metrics. If the matched metrics are consistent in
terms of the bug-prone tendency, HDP can lead to promising
results regardless of the size of the target dataset.
Performance in Different Metric Selections
Table 5 shows prediction results on various metric selection approaches including with no metric selection (‘None’).
We compare the median AUCs of the HDP results by KSAnalyzer with the cutoﬀof 0.05 to those of WPDP, CPDP-CM,
or CPDP-IFS, and report % of Win results.
Overall, we could observe metric selection to be helpful
in improving prediction models in terms of AUC. When applying metric selection, the Win results account for more
than about 63% in most cases against WPDP and CPDP-
Prediction performance in other analyzers with the matching score cutoﬀs, 0.05 and 0.90.
(Anz=Analyzer, TgtCov=Target coverage)
AUCWin% AUC Win% AUC Win%
0.05 0.684 30.3% 0.640
0.617* 100%
0.90 0.657 54.2% 0.622
0.692* 96%
KS 0.05 0.657 66.2% 0.636
0.724* 100%
KS 0.90 0.657 100%
0.624 100.0% 0.852* 21%
SCo 0.05 0.684 28.5% 0.640
0.542* 100%
SCo 0.90 0.684 29.0% 0.639
0.547 100%
CM. Against CPDP-IFS, the Win results of HDP account
for more than 80% after appying the metric selection approaches. This implies that the metric selection approaches
can remove irrelevant metrics to build a better prediction
model. In addition, this result conﬁrms the previous studies
that we can build prediction models better than or comparable to WPDP models with even a few key metrics . However, the percentages of Win results in ‘None’ were
lower than those in applying metric selection. Among metric
selection approaches, ‘Chi-Square’ and ‘Signiﬁcance’ based
approaches lead to the best performance in terms of the percentage of the Win results (64.7%-66.2%) against WPDP.
Performance in Various Analyzers
In Table 6, we compare the prediction performance in
other analyzers with the matching score cutoﬀthresholds,
0.05 and 0.90. HDP’s prediction results by PAnalyzer, with
a cutoﬀof 0.90, are comparable to WPDP. This implies that
comparing 9 percentiles between source and target metrics
can evaluate the similarity of them well with a threshold of
0.90. However, PAnalyzer with the cutoﬀof 0.90 did not
achieve 100% target coverage and is too simple an approach
to lead to better prediction performance than KSAnalyzer.
In KSAnalyzer with a cutoﬀof 0.05, the AUC (0.724) outperforms it (0.657) in WPDP with statistical signiﬁcance.
HDP by KSAnalyzer with a cutoﬀof 0.90 could lead to
signiﬁcant improvement in the AUC value (0.852) compared
to that (0.724) with the cutoﬀof 0.05. However, the target
coverage is just 21%. This is because some prediction combinations are automatically ﬁltered out since poorly matched
metrics, whose matching score is not greater than the cutoﬀ, are ignored. In other words, defect prediction for 79%
of targets was not conducted since the matching scores of
matched metrics in prediction combinations for the targets
are not greater than 0.90 so that all matched metrics in the
combinations were ignored.
An interesting observation in PAnalyzer and KSAnalyzer
is that AUC values of HDP by those analyzers improved
when a cutoﬀthreshold increased.
As the cutoﬀthreshold increased as 0.05, 0.10, 0.20,. . . , and 0.90, we observed
prediction results by PAnalyzer and KSAnalyzer gradually
improved from 0.617 to 0.692 and 0.724 to 0.852 in AUC,
respectively. This means these two analyzers can ﬁlter out
negative prediction combinations well. As a result, the percentage of Win results are also signiﬁcantly increased.
Results by SCoAnalyzer were worse than WPDP results.
In addition, prediction performance rarely changed regardless of cutoﬀthresholds; results by SCoAnalyzer in diﬀerent
cutoﬀs from 0.05 to 0.90 did not vary as well. A possible
Table 7: Win/Tie percentages of HDP by KSAnalyzer (cutoﬀ=0.05) against WPDP, CPDP-CM, and
CPDP-IFS by diﬀerent machine learners.
RandomForest
SimpleLogistic
reason is that SCoAnalyzer does not directly compare the
distribution between source and target metrics. This result
implies that the similarity of distribution between source
and target metrics is a very important factor for building a
better prediction model.
Performance in Various Learners
To investigate if HDP works with other machine learners, we built HDP models (KSAnalyzer and the cutoﬀof
0.05) with various learners used in defect prediction literature such as Random Forest, BayesNet, SVM, J48 Decision
Tree, Simple Logistic, and Logistic Model Trees (LMT) . Table 7 shows Win/Tie results.
Logistic regression (Logistic) led to the best results among
various learners. The Logistic regression models works well
when there is a linear relationship between a predictor variable (a metric) and the logit transformation of the outcome
variable (bug-proneness) . In our study, this linear relationship is related to the bug-prone tendency of a metric,
that is, a higher complexity causes more bug-proneness . As the consistent bug-prone tendency of matched
metrics is important in HDP, the HDP models built by Logistic regression can lead to the best prediction performance.
HDP models built by other learners such as Simple logistic and LMT led to comparable results to Logistic regression
against CPDP-CM and CPDP-IFS. Against Baseline2, Win
results (69.4% and 64.4%) in Simple Logistic and LMT are
comparable to Win results (66.2%) in Logistic. Simple logistic also uses the logit function and LMT adopts Logistic
regression at the leaves of decision tree . In other words,
both learners consider the linear relationship like Logistic
regression . In our experimental settings, HDP tends to
work well with the learners based on the linear relationship
between a metric and a label (bug-proneness).
Practical Guidelines for HDP
We proposed the HDP models to enable defect prediction
on software projects by using training datasets from other
projects even with heterogeneous metric sets. When we have
training datasets in the same project or in other projects
with the same metric set, we can simply conduct WPDP
or CPDP using recently proposed CPDP techniques respectively . However, in practice, it might be
that no training datasets for both WPDP and CPDP exist.
In this case, we can apply the HDP approach.
In Section 5 and Table 6, we conﬁrm that the overall result
from HDP by KSAnalyzer with the cutoﬀof 0.05 outperforms the WPDP and shows 100% target coverage. Since
KSAnalyzer can match similar source and target metrics,
we guide the use of KSAnalyzer for HDP. In terms of the
matching score cutoﬀthreshold, there is a trade-oﬀbetween
prediction performance and target coverage. Since a cutoﬀ
of 0.05 that is the widely used level of statistical signiﬁcance , we can conduct HDP using KSAnalyzer with the
cutoﬀof 0.05. However, we observe some Loss results in our
empirical study. To minimize the percentage of Loss results,
we can sacriﬁce the target coverage by increasing the cutoﬀ
as Table 6 shows KSAnalyzer with the cutoﬀof 0.90 led to
100% Win results in feasible predictions against WPDP.
Threats to Validity
We cannot generalize our conclusions since 28 datasets for
the experiments may not be representative.
However, we
tried to select various datasets used in papers published in
top software engineering venues . In addition, we used datasets from both open-source (AEEEM , ReLink , and MORPH ) and proprietary projects
(NASA and SOFTLAB ).
We evaluated our HDP models in AUC. AUC is known
as a good measure for comparing diﬀerent prediction models . However, validating prediction models in
terms of both precision and recall is also required in practice.
To fairly compare WPDP and HDP models in precision and
recall, we need to identify a proper threshold of prediction
probability. Identifying the proper threshold is a challenging
issue and remains as future work.
We computed matching scores using all source and target
instances for each prediction combination. However, with
the matching scores, we tested prediction models on a test
set from the 50:50 random splits because of the WPDP models as explained in Section 4.5. To conduct WPDP with all
instances of a project dataset as a test set, we need a training
dataset from the previous release of the same project. However, the training dataset is not available for our subjects.
Instead of using the 50:50 random splits, we additionally
conducted experiments about HDP against CPDP-CM and
CPDP-IFS by testing a prediction model on a test set using
all instances of a target dataset in each prediction combination. In this setting, the median AUC of HDP was 0.723 and
the median AUCs of the corresponding results in CPDP-CM
and CPDP-IFS were 0.636 and 0.555 respectively.
results are similar to those from the 50:50 random splits in
Section 5. In other words, as long as the bug-prone tendency
of matched metrics is consistent, HDP yields promising results.
CONCLUSION
Cross-project defect prediction cannot be conducted across
projects with heterogeneous metric sets. To address this limitation, we proposed heterogeneous defect prediction (HDP)
based on metric matching using statistical analysis . Our
empirical evaluation showed the proposed HDP models are
feasible and yield promising results.
HDP is very promising as it permits potentially all heterogeneous datasets of software projects to be used for defect
prediction on new projects or projects lacking in defect data.
In addition, it may not be limited to defect prediction. This
technique can potentially be applicable to all prediction and
recommendation based approaches for software engineering
As future work, we will explore the feasibility
of building various prediction and recommendation models
using heterogeneous datasets.