Published as a conference paper at ICLR 2018
BREAKING THE SOFTMAX BOTTLENECK:
A HIGH-RANK RNN LANGUAGE MODEL
Zhilin Yang∗, Zihang Dai∗, Ruslan Salakhutdinov, William W. Cohen
School of Computer Science
Carnegie Mellon University
{zhiliny,dzihang,rsalakhu,wcohen}@cs.cmu.edu
We formulate language modeling as a matrix factorization problem, and show
that the expressiveness of Softmax-based models (including the majority of neural language models) is limited by a Softmax bottleneck. Given that natural language is highly context-dependent, this further implies that in practice Softmax
with distributed word embeddings does not have enough capacity to model natural language. We propose a simple and effective method to address this issue,
and improve the state-of-the-art perplexities on Penn Treebank and WikiText-2 to
47.69 and 40.68 respectively. The proposed method also excels on the large-scale
1B Word dataset, outperforming the baseline by over 5.6 points in perplexity.1
INTRODUCTION
As a fundamental task in natural language processing, statistical language modeling has gone
through signiﬁcant development from traditional Ngram language models to neural language models in the last decade . Despite
the huge variety of models, as a density estimation problem, language modeling mostly relies on a
universal auto-regressive factorization of the joint probability and then models each conditional factor using different approaches. Speciﬁcally, given a corpus of tokens X = (X1, . . . , XT ), the joint
probability P(X) factorizes as P(X) = Q
t P(Xt | X<t) = Q
t P(Xt | Ct), where Ct = X<t is
referred to as the context of the conditional probability hereafter.
Based on the factorization, recurrent neural networks (RNN) based language models achieve stateof-the-art results on various benchmarks .
A standard approach is to use a recurrent network to encode the context into a ﬁxed size vector,
which is then multiplied by the word embeddings using dot
product to obtain the logits. The logits are consumed by the Softmax function to give a categorical
probability distribution over the next token. In spite of the expressiveness of RNNs as universal
approximators , an unclear question is whether the combination
of dot product and Softmax is capable of modeling the conditional probability, which can vary
dramatically with the change of the context.
In this work, we study the expressiveness of the aforementioned Softmax-based recurrent language
models from a perspective of matrix factorization. We show that learning a Softmax-based recurrent
language model with the standard formulation is essentially equivalent to solving a matrix factorization problem. More importantly, due to the fact that natural language is highly context-dependent,
the matrix to be factorized can be high-rank. This further implies that standard Softmax-based language models with distributed (output) word embeddings do not have enough capacity to model
natural language. We call this the Softmax bottleneck.
We propose a simple and effective method to address the Softmax bottleneck. Speciﬁcally, we
introduce discrete latent variables into a recurrent language model, and formulate the next-token
probability distribution as a Mixture of Softmaxes (MoS). Mixture of Softmaxes is more expressive
than Softmax and other surrogates considered in prior work. Moreover, we show that MoS learns
∗Equal contribution. Ordering determined by dice rolling.
1Code is available at 
 
Published as a conference paper at ICLR 2018
matrices that have much larger normalized singular values and thus much higher rank than Softmax
and other baselines on real-world datasets.
We evaluate our proposed approach on standard language modeling benchmarks. MoS substantially
improves over the current state-of-the-art results on benchmarks, by up to 3.6 points in terms of
perplexity, reaching perplexities 47.69 on Penn Treebank and 40.68 on WikiText-2. We further
apply MoS to a dialog dataset and show improved performance over Softmax and other baselines.
Our contribution is two-fold. First, we identify the Softmax bottleneck by formulating language
modeling as a matrix factorization problem. Second, we propose a simple and effective method that
substantially improves over the current state-of-the-art results.
LANGUAGE MODELING AS MATRIX FACTORIZATION
As discussed in Section 1, with the autoregressive factorization, language modeling can be reduced
to modeling the conditional distribution of the next token x given the context c. Though one might argue that a natural language allows an inﬁnite number of contexts due to its compositionality , we proceed with our analysis by considering a ﬁnite set of possible contexts. The unboundedness of natural language does not affect our conclusions, which will be discussed later.
We consider a natural language as a ﬁnite set of pairs of a context and its conditional next-token
distribution2 L = {(c1, P ∗(X|c1)), · · · , (cN, P ∗(X|cN))}, where N is the number of possible
contexts. We assume P ∗> 0 everywhere to account for errors and ﬂexibility in natural language.
Let {x1, x2, · · · , xM} denote a set of M possible tokens in the language L. The objective of a
language model is to learn a model distribution Pθ(X|C) parameterized by θ to match the true data
distribution P ∗(X|C).
In this work, we study the expressiveness of the parametric model class Pθ(X|C). In other words,
we are asking the following question: given a natural language L, does there exist a parameter θ
such that Pθ(X|c) = P ∗(X|c) for all c in L?
We start by looking at a Softmax-based model class since it is widely used.
The majority of parametric language models use a Softmax function operating on a context vector
(or hidden state) hc and a word embedding wx to deﬁne the conditional distribution Pθ(x|c). More
speciﬁcally, the model distribution is usually written as
where hc is a function of c, and wx is a function of x. Both functions are parameterized by θ. Both
the context vector hc and the word embedding wx have the same dimension d. The dot product
c wx is called a logit.
To help discuss the expressiveness of Softmax, we deﬁne three matrices:
log P ∗(x1|c1),
log P ∗(x2|c1)
log P ∗(xM|c1)
log P ∗(x1|c2),
log P ∗(x2|c2)
log P ∗(xM|c2)
log P ∗(x1|cN),
log P ∗(x2|cN)
log P ∗(xM|cN)
where Hθ ∈RN×d, Wθ ∈RM×d, A ∈RN×M, and the rows of Hθ, Wθ, and A correspond to
context vectors, word embeddings, and log probabilities of the true data distribution respectively.
We use the subscript θ because (Hθ, Wθ) is effectively a function indexed by the parameter θ, from
the joint function family U. Concretely, Hθ is implemented as deep neural networks, such as a
recurrent network, while Wθ is instantiated as an embedding lookup.
We further specify a set of matrices formed by applying row-wise shift to A
F(A) = {A + ΛJN,M|Λ is diagonal and Λ ∈RN×N},
2We use capital letters for variables and small letters for constants.
Published as a conference paper at ICLR 2018
where JN,M is an all-ones matrix with size N × M. Essentially, the row-wise shift operation adds
an arbitrary real number to each row of A. Thus, F(A) is an inﬁnite set. Notably, the set F(A) has
two important properties (see Appendix A for the proof), which are key to our analysis.
Property 1. For any matrix A′, A′ ∈F(A) if and only if Softmax(A′) = P ∗. In other words,
F(A) deﬁnes the set of all possible logits that correspond to the true data distribution.
Property 2. For any A1 ̸= A2 ∈F(A), |rank(A1) −rank(A2)| ≤1. In other words, all matrices
in F(A) have similar ranks, with the maximum rank difference being 1.
Based on the Property 1 of F(A), we immediately have the following Lemma.
Lemma 1. Given a model parameter θ, HθW⊤
θ ∈F(A) if and only if Pθ(X|c) = P ∗(X|c) for all
Now the expressiveness question becomes: does there exist a parameter θ and A′ ∈F(A) such that
This is essentially a matrix factorization problem. We want the model to learn matrices Hθ and Wθ
that are able to factorize some matrix A′ ∈F(A). First, note that for a valid factorization to exist,
the rank of HθW⊤
θ has to be at least as large as the rank of A′. Further, since Hθ ∈RN×d and
Wθ ∈RM×d, the rank of HθW⊤
θ is strictly upper bounded by the embedding size d. As a result,
if d ≥rank(A′), a universal approximator can theoretically recover A′. However, if d < rank(A′),
no matter how expressive the function family U is, no (Hθ, Wθ) can even theoretically recover A′.
We summarize the reasoning above as follows (see Appendix A for the proof).
Proposition 1. Given that the function family U is a universal approximator, there exists a parameter θ such that Pθ(X|c) = P ∗(X|c) for all c in L if and only if d ≥minA′∈F (A) rank(A′).
Combining Proposition 1 with the Property 2 of F(A), we are now able to state the Softmax Bottleneck problem formally.
Corollary 1. (Softmax Bottleneck) If d < rank(A) −1, for any function family U and any model
parameter θ, there exists a context c in L such that Pθ(X|c) ̸= P ∗(X|c).
The above corollary indicates that when the dimension d is too small, Softmax does not have the
capacity to express the true data distribution. Clearly, this conclusion is not restricted to a ﬁnite
language L. When L is inﬁnite, one can always take a ﬁnite subset and the Softmax bottleneck still
exists. Next, we discuss why the Softmax bottleneck is an issue by presenting our hypothesis that
A is high-rank for natural language.
HYPOTHESIS: NATURAL LANGUAGE IS HIGH-RANK
We hypothesize that for a natural language L, the log probability matrix A is a high-rank matrix. It
is difﬁcult (if possible) to rigorously prove this hypothesis since we do not have access to the true
data distribution of a natural language. However, it is suggested by the following intuitive reasoning
and empirical observations:
• Natural language is highly context-dependent . For example, the token
“north” is likely to be followed by “korea” or “korean” in a news article on international politics,
which however is unlikely in a textbook on U.S. domestic history. We hypothesize that such
subtle context dependency should result in a high-rank matrix A.
• If A is low-rank, it means humans only need a limited number (e.g. a few hundred) of bases,
and all semantic meanings can be created by (potentially) negating and (weighted) averaging
these bases. However, it is hard to ﬁnd a natural concept in linguistics and cognitive science that
corresponds to such bases, which questions the existence of such bases. For example, semantic
meanings might not be those bases since a few hundred meanings may not be enough to cover
everyday meanings, not to mention niche meanings in specialized domains.
• Empirically, our high-rank language model outperforms conventional low-rank language models
on several benchmarks, as shown in Section 3. We also provide evidences in Section 3.3 to
support our hypothesis that learning a high-rank language model is important.
Published as a conference paper at ICLR 2018
Given the hypothesis that natural language is high-rank, it is clear that the Softmax bottleneck limits
the expressiveness of the models. In practice, the embedding dimension d is usually set at the scale
of 102, while the rank of A can possibly be as high as M (at the scale of 105), which is orders of
magnitude larger than d. Softmax is effectively learning a low-rank approximation to A, and our
experiments suggest that such approximation loses the ability to model context dependency, both
qualitatively and quantitatively (Cf. Section 3).
EASY FIXES?
Identifying the Softmax bottleneck immediately suggests some possible “easy ﬁxes”. First, as considered by a lot of prior work, one can employ a non-parametric model, namely an Ngram model
 . Ngram models are not constrained by any parametric forms so it can universally approximate any natural language, given enough parameters. Second, it is possible to increase
the dimension d (e.g., to match M) so that the model can express a high-rank matrix A.
However, these two methods increase the number of parameters dramatically, compared to using
a low-dimensional Softmax. More speciﬁcally, an Ngram needs (N × M) parameters in order to
express A, where N is potentially unbounded. Similarly, a high-dimensional Softmax requires (M×
M) parameters for the word embeddings. Increasing the number of model parameters easily leads
to overﬁtting. In past work, Kneser & Ney used back-off to alleviate overﬁtting. Moreover,
as deep learning models were tuned by extensive hyper-parameter search, increasing the dimension
d beyond several hundred is not helpful3 .
Clearly there is a tradeoff between expressiveness and generalization on language modeling. Naively
increasing the expressiveness hurts generalization. Below, we introduce an alternative approach that
increases the expressiveness without exploding the parametric space.
MIXTURE OF SOFTMAXES: A HIGH-RANK LANGUAGE MODEL
We propose a high-rank language model called Mixture of Softmaxes (MoS) to alleviate the Softmax
bottleneck issue. MoS formulates the conditional distribution as
c,kwx′ ; s.t.
where πc,k is the prior or mixture weight of the k-th component, and hc,k is the k-th context vector associated with context c. In other words, MoS computes K Softmax distributions and uses a
weighted average of them as the next-token probability distribution. Similar to prior work on recurrent language modeling , we ﬁrst
apply a stack of recurrent layers on top of X to obtain a sequence of hidden states (g1, · · · , gT ).
The prior and the context vector for context ct are parameterized as πct,k =
k′=1 exp w⊤
π,k′gt and
hct,k = tanh(Wh,kgt) where wπ,k and Wh,k are model parameters.
Our method is simple and easy to implement, and has the following advantages:
• Improved expressiveness (compared to Softmax). MoS is theoretically more (or at least equally)
expressive compared to Softmax given the same dimension d. This can be seen by the fact that
MoS with K = 1 is reduced to Softmax. More importantly, MoS effectively approximates A by
ˆAMoS = log
Πk exp(Hθ,kW⊤
where Πk is an (N × N) diagonal matrix with elements being the prior πc,k. Because ˆAMoS is
a nonlinear function (log_sum_exp) of the context vectors and the word embeddings, ˆAMoS can
be arbitrarily high-rank. As a result, MoS does not suffer from the rank limitation, compared to
3This is also conﬁrmed by our preliminary experiments.
Published as a conference paper at ICLR 2018
• Improved generalization (compared to Ngram). Ngram models and high-dimensional Softmax
(Cf. Section 2.3) improve the expressiveness but do not generalize well. In contrast, MoS does
not have a generalization issue due to the following reasons. First, MoS deﬁnes the following
generative process: a discrete latent variable k is ﬁrst sampled from {1, · · · , K}, and then the
next token is sampled based on the k-th Softmax component. By doing so we introduce an
inductive bias that the next token is generated based on a latent discrete decision (e.g., a topic),
which is often safe in language modeling . Second, since ˆAMoS is deﬁned by
a nonlinear function and not restricted by the rank bottleneck, in practice it is possible to reduce
d to compensate for the increase of model parameters brought by the mixture structure. As a
result, MoS has a similar model size compared to Softmax and thus is not prone to overﬁtting.
MIXTURE OF CONTEXTS: A LOW-RANK BASELINE
Another possible approach is to directly mix the context vectors (or logits) before taking the Softmax, rather than mixing the probabilities afterwards as in MoS. Speciﬁcally, the conditional distribution is parameterized as
k=1 πc,khc,k
k=1 πc,khc,k
k=1 πc,kh⊤
k=1 πc,kh⊤
where hc,k and πc,k share the same parameterization as in MoS. Despite its superﬁcial similarity to
MoS, this model, which we refer to as mixture of contexts (MoC), actually suffers from the same
rank limitation problem as Softmax. This can be easily seen by deﬁning h′c = PK
k=1 πc,khc,k,
which turns the MoC parameterization (2) into Pθ(x|c) =
x′ exp h′⊤
c wx′ . Note that this is equivalent to the Softmax parameterization (1). Thus, performing mixture in the feature space can only
make the function family U more expressive, but does not change the fact that the rank of HθW⊤
is upper bounded by the embedding dimension d. In our experiments, we implement MoC as a
baseline and compare it experimentally to MoS.
EXPERIMENTS
MAIN RESULTS
We conduct a series of experiments with the following settings:
• Following previous work , we evaluate the proposed MoS model on two widely used language modeling datasets, namely Penn
Treebank (PTB) and WikiText-2 (WT2) based on perplexity. For fair comparison, we closely follow the regularization and optimization techniques
introduced by Merity et al. . We heuristically and manually search hyper-parameters for
MoS based on the validation performance while limiting the model size (see Appendix B.1 for
our hyper-parameters).
• To investigate whether the effectiveness of MoS can be extended to even larger datasets, we
conduct an additional language modeling experiment on the 1B Word dataset . Speciﬁcally, we lower-case the text and choose the top 100K tokens as the vocabulary. A
standard neural language model with 2 layers of LSTMs followed by a Softmax output layer is
used as the baseline. Again, the network size of MoS is adjusted to ensure a comparable number
of parameters. Notably, dropout was not used, since we found it not helpful to either model (see
Appendix B.2 for more details).
• To show that the MoS is a generic structure that can be used to model other context-dependent
distributions, we additionally conduct experiments in the dialog domain. We use the Switchboard dataset preprocessed by Zhao et al. 4 to train a
Seq2Seq model with MoS added to the decoder RNN. Then, a Seq2Seq
model using Softmax and another one augmented by MoC with comparable parameter sizes
4 
Published as a conference paper at ICLR 2018
Validation
Mikolov & Zweig – RNN-LDA + KN-5 + cache
Zaremba et al. – LSTM
Gal & Ghahramani – Variational LSTM (MC)
Kim et al. – CharCNN
Merity et al. – Pointer Sentinel-LSTM
Grave et al. – LSTM + continuous cache pointer†
Inan et al. – Tied Variational LSTM + augmented loss
Zilly et al. – Variational RHN
Zoph & Le – NAS Cell
Melis et al. – 2-layer skip connection LSTM
Merity et al. – AWD-LSTM w/o ﬁnetune
Merity et al. – AWD-LSTM
Ours – AWD-LSTM-MoS w/o ﬁnetune
Ours – AWD-LSTM-MoS
Merity et al. – AWD-LSTM + continuous cache pointer†
Krause et al. – AWD-LSTM + dynamic evaluation†
Ours – AWD-LSTM-MoS + dynamic evaluation†
Table 1: Single model perplexity on validation and test sets on Penn Treebank. Baseline results are obtained
from Merity et al. and Krause et al. . † indicates using dynamic evaluation.
Validation
Inan et al. – Variational LSTM + augmented loss
Grave et al. – LSTM + continuous cache pointer†
Melis et al. – 2-layer skip connection LSTM
Merity et al. – AWD-LSTM w/o ﬁnetune
Merity et al. – AWD-LSTM
Ours – AWD-LSTM-MoS w/o ﬁnetune
Ours – AWD-LSTM-MoS
Merity et al. – AWD-LSTM + continuous cache pointer †
Krause et al. – AWD-LSTM + dynamic evaluation†
Ours – AWD-LSTM-MoS + dynamical evaluation†
Table 2: Single model perplexity over WikiText-2. Baseline results are obtained from Merity et al. and
Krause et al. . † indicates using dynamic evaluation.
are used as baselines. For evaluation, we include both the perplexity and the precision/recall
of Smoothed Sentence-level BLEU, as suggested by Zhao et al. . When generating responses, we use beam search with beam size 10, restrict the maximum length to 30, and retain
the top-5 responses.
The language modeling results on PTB and WT2 are presented in Table 1 and Table 2 respectively.
With a comparable number of parameters, MoS outperforms all baselines with or without dynamic
evaluation, and substantially improves over the current state of the art, by up to 3.6 points in perplexity.
Validation
Table 3: Perplexity comparison on 1B word dataset. Train perplexity is the average of the last 4,000 updates.
The improvement on the large-scale dataset is even more signiﬁcant. As shown in Table 3, MoS
outperforms Softmax by over 5.6 points in perplexity. It suggests the effectiveness of MoS is not
limited to small datasets where many regularization techniques are used. Note that with limited
computational resources, we didn’t tune the hyper-parameters for MoS.
Published as a conference paper at ICLR 2018
Perplexity
Seq2Seq-Softmax
Seq2Seq-MoC
Seq2Seq-MoS
Table 4: Evaluation scores on Switchboard.
Further, the experimental results on Switchboard are summarized in Table 45. Clearly, on all metrics,
MoS outperforms MoC and Softmax, showing its general effectiveness.
ABLATION STUDY
To further verify the improvement shown above does come from the MoS structure rather than
adding another hidden layer or ﬁnding a particular set of hyper-parameters, we conduct an ablation
study on both PTB and WT2. Firstly, we compare MoS with an MoC architecture with the same
number of layers, hidden sizes, and embedding sizes, which thus has the same number of parameters. In addition, we adopt the hyper-parameters used to obtain the best MoS model (denoted as MoS
hyper-parameters), and train a baseline AWD-LSTM. To avoid distractive factors and save computational resources, all ablative experiments excluded the use of ﬁnetuing and dynamic evaluation.
The results are shown in Table 5. Compared to the vanilla AWD-LSTM, though being more expressive, MoC performs only better on PTB, but worse on WT2. It suggests that simply adding another
hidden layer or employing a mixture structure in the feature space does not guarantee a better performance. On the other hand, training AWD-LSTM using MoS hyper-parameters severely hurts the
performance, which rules out hyper-parameters as the main source of improvement.
Validation
Validation
AWD-LSTM-MoS
AWD-LSTM-MoC
AWD-LSTM hyper-parameters)
AWD-LSTM (MoS hyper-parameters)
Table 5: Ablation study on Penn Treebank and WikiText-2 without ﬁnetuning or dynamical evaluation.
VERIFY THE ROLE OF RANK
While the study above veriﬁes that MoS is the key to achieving the state-of-the-art performance, it
is still not clear whether the superiority of MoS comes from its potential high rank, as suggested by
our theoretical analysis in Section 2. In the sequel, we take steps to verify this hypothesis.
• Firstly, we verify that MoS does induce a high-rank log-probability matrix empirically, while
MoC and Softmax fail. On the validation or test set of PTB with tokens X = {X1, . . . , XT }, we
compute the log probabilities {log P(Xi | X<i) ∈RM}T
t=1 for each token using all three models.
Then, for each model, we stack all T log-probability vectors into a T × M matrix, resulting in
ˆAMoS, ˆAMoC and ˆASoftmax. Theoretically, the number of non-zero singular values of a matrix is
equal to its rank. However, performing singular value decomposition of real valued matrices using
numerical approaches often encounter roundoff errors. Hence, we adopt the expected roundoff
error suggested by Press when estimating the ranks of ˆAMoS, ˆAMoC and ˆASoftmax.
The estimated ranks are shown in Table 6. As predicted by our theoretical analysis, the matrix
ranks induced by Softmax and MoC are both limited by the corresponding embedding sizes. By
contrast, the matrix rank obtained from MoS does not suffer from this constraint, almost reaching
full rank (M = 10000). In appendix C.1, we give additional evidences for the higher rank of
5The numbers are not directly comparable to Zhao et al. since their Seq2Seq implementation and
evaluation scripts are not publicly available.
Published as a conference paper at ICLR 2018
Validation
Table 6: Rank comparison on PTB. To ensure comparable model sizes, the embedding sizes of Softmax,
MoC and MoS are 400, 280, 280 respectively. The
vocabulary size, i.e., M, is 10,000 for all models.
Perplexity
Table 7: Empirical rank and test perplexity on
PTB with different number of Softmaxes.
• Secondly, we show that, before reaching full rank, increasing the number of mixture components
in MoS also increases the rank of the log-probability matrix, which in turn leads to improved
performance (lower perplexity). Speciﬁcally, on PTB, with other hyper-parameters ﬁxed as used
in section 3.1, we vary the number of mixtures used in MoS and compare the corresponding empirical rank and test perplexity without ﬁnetuning. Table 7 summarizes the results. This clear
positive correlation between rank and performance strongly supports the our theoretical analysis
in section 2. Moreover, note that after reaching almost full rank (i.e., using 15 mixture components), further increasing the number of components degrades the performance due to overﬁtting
(as we inspected the training and test perplexities).
• In addition, as performance improvement can often come from better regularization, we investigate whether MoS has a better, though unexpected, regularization effect compared to Softmax.
We consider the 1B word dataset where overﬁtting is unlikely and no explicit regularization technique (e.g., dropout) is employed. As we can see from the left part of Table 3, MoS and Softmax
achieve a similar generalization gap, i.e., the performance gap between the test set and the training set. It suggests both models have similar regularization effects. Meanwhile, MoS has a lower
training perplexity compared to Softmax, indicating that the improvement of MoS results from
improved expressiveness.
• The last evidence we provide is based on an inverse experiment. Empirically, we ﬁnd that when
Softmax does not suffer from a rank limitation, e.g., in character-level language modeling, using
MoS will not improve the performance. Due to lack of space, we refer readers to Appendix C.2
for details.
ADDITIONAL ANALYSIS
MoS computational time
The expressiveness of MoS does come with a computational cost—
computing a K-times larger Softmax. To give readers a concrete idea of the inﬂuence on training
time, we perform detailed analysis in Appendix C.3. As we will see, computational wall time of
MoS is actually sub-linear w.r.t. the number of Softmaxes K. In most settings, we observe a two to
three times slowdown when using MoS with up to 15 mixture components.
Qualitative analysis
Finally, we conduct a case study on PTB to see how MoS improves the
next-token prediction in detail. Due to lack of space, we refer readers to Appendix C.4 for details.
The key insight from the case study is that MoS is better at making context-dependent predictions.
Speciﬁcally, given the same immediate preceding word, MoS will produce distinct next-step prediction based on long-term context in history. By contrast, the baseline often yields similar next-step
prediction, independent of the long-term context.
RELATED WORK
In language modeling, Hutchinson et al. have previously considered the problem from
a matrix rank perspective. However, their focus was to improve the generalization of Ngram language models via a sparse plus low-rank approximation. By contrast, as neural language models
already generalize well, we focus on a high-rank neural language model that improves expressiveness without sacriﬁcing generalization. Neubig & Dyer proposed to mix Ngram and neural
language models to unify and beneﬁt from both. However, this mixture might not generalize well
since an Ngram model, which has poor generalization, is included. Moreover, the fact that the
Published as a conference paper at ICLR 2018
two components are separately trained can limit its expressiveness. Levy & Goldberg also
considered the matrix factorization perspective, but in the context of learning word embeddings.
In a general sense, Mixture of Softmaxes proposed in this work can be seen as a particular instantiation of the long-existing idea called Mixture of Experts (MoE) . However,
there are two core differences. Firstly, MoE has usually been instantiated as mixture of Gaussians
to model data in continuous domains . More
importantly, the motivation of using the mixture structure is distinct. For Gaussian mixture models,
the mixture structure is employed to allow for a parameterized multi-modal distribution. By contrast, Softmax by itself can parameterize a multi-modal distribution, and MoS is introduced to break
the Softmax bottleneck as discussed in Section 2.
There has been previous work proposing architectures that
can be categorized as instantiations of MoC, since the mixture structure is employed in the feature
space.6 The target of Eigen et al. is to create a more expressive feed-forward layer through
the mixture structure. In comparison, Shazeer et al. focuses on a sparse gating mechanism
also on the feature level, which enables efﬁcient conditional computation and allows the training of
a very large neural architecture. In addition to having different motivations from our work, all these
MoC variants suffer from the same rank limitation problem as discussed in Section 2.
Finally, several previous works have tried to introduce latent variables into sequence modeling . Except for , these structures all deﬁne
a continuous latent variable for each step of the RNN computation, and rely on the SGVB estimator to optimize a variational lower bound of the log-likelihood. Since
exact integration is infeasible, these models cannot estimate the likelihood (perplexity) exactly at test
time. Moreover, for discrete data, the variational lower bound is usually too loose to yield a competitive approximation compared to standard auto-regressive models. As an exception, Chung et al.
 utilizes Bernoulli latent variables to model the hierarchical structure in language, where the
Bernoulli sampling is replaced by a thresholding operation at test time to give perplexity estimation.
CONCLUSIONS
Under the matrix factorization framework, the expressiveness of Softmax-based language models is
limited by the dimension of the word embeddings, which is termed as the Softmax bottleneck. Our
proposed MoS model improves the expressiveness over Softmax, and at the same time avoids over-
ﬁtting compared to non-parametric models and naively increasing the word embedding dimensions.
Our method improves the current state-of-the-art results on standard benchmarks by a large margin,
which in turn justiﬁes our theoretical reasoning: it is important to have a high-rank model for natural
ACKNOWLEDGMENTS
This work was supported by the DARPA award D17AP00001, the Google focused award, and the
Nvidia NVAIL award.
6Although Shazeer et al. name their architecture as MoE, it is not a standard MoE and should be classiﬁed as MoC under our terminology.
Published as a conference paper at ICLR 2018