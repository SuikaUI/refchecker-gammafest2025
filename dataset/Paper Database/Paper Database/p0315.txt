You Only Look Once:
Uniﬁed, Real-Time Object Detection
Joseph Redmon∗, Santosh Divvala∗†, Ross Girshick¶, Ali Farhadi∗†
University of Washington∗, Allen Institute for AI†, Facebook AI Research¶
 
We present YOLO, a new approach to object detection.
Prior work on object detection repurposes classiﬁers to perform detection. Instead, we frame object detection as a regression problem to spatially separated bounding boxes and
associated class probabilities. A single neural network predicts bounding boxes and class probabilities directly from
full images in one evaluation. Since the whole detection
pipeline is a single network, it can be optimized end-to-end
directly on detection performance.
Our uniﬁed architecture is extremely fast.
YOLO model processes images in real-time at 45 frames
per second. A smaller version of the network, Fast YOLO,
processes an astounding 155 frames per second while
still achieving double the mAP of other real-time detectors. Compared to state-of-the-art detection systems, YOLO
makes more localization errors but is less likely to predict
false positives on background. Finally, YOLO learns very
general representations of objects. It outperforms other detection methods, including DPM and R-CNN, when generalizing from natural images to other domains like artwork.
1. Introduction
Humans glance at an image and instantly know what objects are in the image, where they are, and how they interact. The human visual system is fast and accurate, allowing us to perform complex tasks like driving with little conscious thought. Fast, accurate algorithms for object detection would allow computers to drive cars without specialized sensors, enable assistive devices to convey real-time
scene information to human users, and unlock the potential
for general purpose, responsive robotic systems.
Current detection systems repurpose classiﬁers to perform detection. To detect an object, these systems take a
classiﬁer for that object and evaluate it at various locations
and scales in a test image. Systems like deformable parts
models (DPM) use a sliding window approach where the
classiﬁer is run at evenly spaced locations over the entire
image .
More recent approaches like R-CNN use region proposal
1. Resize image.
2. Run convolutional network.
3. Non-max suppression.
Person: 0.64
Horse: 0.28
Figure 1: The YOLO Detection System. Processing images
with YOLO is simple and straightforward. Our system (1) resizes
the input image to 448 × 448, (2) runs a single convolutional network on the image, and (3) thresholds the resulting detections by
the model’s conﬁdence.
methods to ﬁrst generate potential bounding boxes in an image and then run a classiﬁer on these proposed boxes. After
classiﬁcation, post-processing is used to reﬁne the bounding boxes, eliminate duplicate detections, and rescore the
boxes based on other objects in the scene . These complex pipelines are slow and hard to optimize because each
individual component must be trained separately.
We reframe object detection as a single regression problem, straight from image pixels to bounding box coordinates and class probabilities. Using our system, you only
look once (YOLO) at an image to predict what objects are
present and where they are.
YOLO is refreshingly simple: see Figure 1.
A single convolutional network simultaneously predicts multiple bounding boxes and class probabilities for those boxes.
YOLO trains on full images and directly optimizes detection performance. This uniﬁed model has several beneﬁts
over traditional methods of object detection.
First, YOLO is extremely fast. Since we frame detection
as a regression problem we don’t need a complex pipeline.
We simply run our neural network on a new image at test
time to predict detections. Our base network runs at 45
frames per second with no batch processing on a Titan X
GPU and a fast version runs at more than 150 fps. This
means we can process streaming video in real-time with
less than 25 milliseconds of latency. Furthermore, YOLO
achieves more than twice the mean average precision of
other real-time systems. For a demo of our system running
in real-time on a webcam please see our project webpage:
 
Second, YOLO reasons globally about the image when
 
making predictions.
Unlike sliding window and region
proposal-based techniques, YOLO sees the entire image
during training and test time so it implicitly encodes contextual information about classes as well as their appearance.
Fast R-CNN, a top detection method , mistakes background patches in an image for objects because it can’t see
the larger context. YOLO makes less than half the number
of background errors compared to Fast R-CNN.
Third, YOLO learns generalizable representations of objects. When trained on natural images and tested on artwork, YOLO outperforms top detection methods like DPM
and R-CNN by a wide margin. Since YOLO is highly generalizable it is less likely to break down when applied to
new domains or unexpected inputs.
YOLO still lags behind state-of-the-art detection systems
in accuracy. While it can quickly identify objects in images it struggles to precisely localize some objects, especially small ones. We examine these tradeoffs further in our
experiments.
All of our training and testing code is open source. A
variety of pretrained models are also available to download.
2. Uniﬁed Detection
We unify the separate components of object detection
into a single neural network. Our network uses features
from the entire image to predict each bounding box. It also
predicts all bounding boxes across all classes for an image simultaneously. This means our network reasons globally about the full image and all the objects in the image.
The YOLO design enables end-to-end training and realtime speeds while maintaining high average precision.
Our system divides the input image into an S × S grid.
If the center of an object falls into a grid cell, that grid cell
is responsible for detecting that object.
Each grid cell predicts B bounding boxes and conﬁdence
scores for those boxes. These conﬁdence scores reﬂect how
conﬁdent the model is that the box contains an object and
also how accurate it thinks the box is that it predicts. Formally we deﬁne conﬁdence as Pr(Object) ∗IOUtruth
pred. If no
object exists in that cell, the conﬁdence scores should be
zero. Otherwise we want the conﬁdence score to equal the
intersection over union (IOU) between the predicted box
and the ground truth.
Each bounding box consists of 5 predictions: x, y, w, h,
and conﬁdence. The (x, y) coordinates represent the center
of the box relative to the bounds of the grid cell. The width
and height are predicted relative to the whole image. Finally
the conﬁdence prediction represents the IOU between the
predicted box and any ground truth box.
Each grid cell also predicts C conditional class probabilities, Pr(Classi|Object). These probabilities are conditioned on the grid cell containing an object. We only predict
one set of class probabilities per grid cell, regardless of the
number of boxes B.
At test time we multiply the conditional class probabilities and the individual box conﬁdence predictions,
Pr(Classi|Object) ∗Pr(Object) ∗IOUtruth
pred = Pr(Classi) ∗IOUtruth
which gives us class-speciﬁc conﬁdence scores for each
box. These scores encode both the probability of that class
appearing in the box and how well the predicted box ﬁts the
S × S grid on input
Bounding boxes + confidence
Class probability map
Final detections
Figure 2: The Model. Our system models detection as a regression problem. It divides the image into an S × S grid and for each
grid cell predicts B bounding boxes, conﬁdence for those boxes,
and C class probabilities. These predictions are encoded as an
S × S × (B ∗5 + C) tensor.
For evaluating YOLO on PASCAL VOC, we use S = 7,
B = 2. PASCAL VOC has 20 labelled classes so C = 20.
Our ﬁnal prediction is a 7 × 7 × 30 tensor.
2.1. Network Design
We implement this model as a convolutional neural network and evaluate it on the PASCAL VOC detection dataset
 . The initial convolutional layers of the network extract
features from the image while the fully connected layers
predict the output probabilities and coordinates.
Our network architecture is inspired by the GoogLeNet
model for image classiﬁcation . Our network has 24
convolutional layers followed by 2 fully connected layers.
Instead of the inception modules used by GoogLeNet, we
simply use 1 × 1 reduction layers followed by 3 × 3 convolutional layers, similar to Lin et al . The full network is
shown in Figure 3.
We also train a fast version of YOLO designed to push
the boundaries of fast object detection. Fast YOLO uses a
neural network with fewer convolutional layers (9 instead
of 24) and fewer ﬁlters in those layers. Other than the size
of the network, all training and testing parameters are the
same between YOLO and Fast YOLO.
Conv. Layer
7x7x64-s-2
Maxpool Layer
Conn. Layer
Conn. Layer
Conv. Layer
Maxpool Layer
Conv. Layers
Maxpool Layer
Conv. Layers
Maxpool Layer
Conv. Layers
3x3x1024-s-2
Conv. Layers
Figure 3: The Architecture. Our detection network has 24 convolutional layers followed by 2 fully connected layers. Alternating 1 × 1
convolutional layers reduce the features space from preceding layers. We pretrain the convolutional layers on the ImageNet classiﬁcation
task at half the resolution (224 × 224 input image) and then double the resolution for detection.
The ﬁnal output of our network is the 7 × 7 × 30 tensor
of predictions.
2.2. Training
We pretrain our convolutional layers on the ImageNet
1000-class competition dataset . For pretraining we use
the ﬁrst 20 convolutional layers from Figure 3 followed by a
average-pooling layer and a fully connected layer. We train
this network for approximately a week and achieve a single
crop top-5 accuracy of 88% on the ImageNet 2012 validation set, comparable to the GoogLeNet models in Caffe’s
Model Zoo . We use the Darknet framework for all
training and inference .
We then convert the model to perform detection. Ren et
al. show that adding both convolutional and connected layers to pretrained networks can improve performance .
Following their example, we add four convolutional layers and two fully connected layers with randomly initialized
weights. Detection often requires ﬁne-grained visual information so we increase the input resolution of the network
from 224 × 224 to 448 × 448.
Our ﬁnal layer predicts both class probabilities and
bounding box coordinates. We normalize the bounding box
width and height by the image width and height so that they
fall between 0 and 1. We parametrize the bounding box x
and y coordinates to be offsets of a particular grid cell location so they are also bounded between 0 and 1.
We use a linear activation function for the ﬁnal layer and
all other layers use the following leaky rectiﬁed linear activation:
We optimize for sum-squared error in the output of our
model. We use sum-squared error because it is easy to optimize, however it does not perfectly align with our goal of
maximizing average precision. It weights localization error equally with classiﬁcation error which may not be ideal.
Also, in every image many grid cells do not contain any
object. This pushes the “conﬁdence” scores of those cells
towards zero, often overpowering the gradient from cells
that do contain objects. This can lead to model instability,
causing training to diverge early on.
To remedy this, we increase the loss from bounding box
coordinate predictions and decrease the loss from conﬁdence predictions for boxes that don’t contain objects. We
use two parameters, λcoord and λnoobj to accomplish this. We
set λcoord = 5 and λnoobj = .5.
Sum-squared error also equally weights errors in large
boxes and small boxes. Our error metric should reﬂect that
small deviations in large boxes matter less than in small
boxes. To partially address this we predict the square root
of the bounding box width and height instead of the width
and height directly.
YOLO predicts multiple bounding boxes per grid cell.
At training time we only want one bounding box predictor
to be responsible for each object. We assign one predictor
to be “responsible” for predicting an object based on which
prediction has the highest current IOU with the ground
truth. This leads to specialization between the bounding box
predictors. Each predictor gets better at predicting certain
sizes, aspect ratios, or classes of object, improving overall
During training we optimize the following, multi-part
loss function:
(xi −ˆxi)2 + (yi −ˆyi)2i
(pi(c) −ˆpi(c))2
where 1obj
denotes if object appears in cell i and 1obj
ij denotes that the jth bounding box predictor in cell i is “responsible” for that prediction.
Note that the loss function only penalizes classiﬁcation
error if an object is present in that grid cell (hence the conditional class probability discussed earlier). It also only penalizes bounding box coordinate error if that predictor is
“responsible” for the ground truth box (i.e. has the highest
IOU of any predictor in that grid cell).
We train the network for about 135 epochs on the training and validation data sets from PASCAL VOC 2007 and
2012. When testing on 2012 we also include the VOC 2007
test data for training. Throughout training we use a batch
size of 64, a momentum of 0.9 and a decay of 0.0005.
Our learning rate schedule is as follows: For the ﬁrst
epochs we slowly raise the learning rate from 10−3 to 10−2.
If we start at a high learning rate our model often diverges
due to unstable gradients. We continue training with 10−2
for 75 epochs, then 10−3 for 30 epochs, and ﬁnally 10−4
for 30 epochs.
To avoid overﬁtting we use dropout and extensive data
augmentation. A dropout layer with rate = .5 after the ﬁrst
connected layer prevents co-adaptation between layers .
For data augmentation we introduce random scaling and
translations of up to 20% of the original image size. We
also randomly adjust the exposure and saturation of the image by up to a factor of 1.5 in the HSV color space.
2.3. Inference
Just like in training, predicting detections for a test image
only requires one network evaluation. On PASCAL VOC the
network predicts 98 bounding boxes per image and class
probabilities for each box. YOLO is extremely fast at test
time since it only requires a single network evaluation, unlike classiﬁer-based methods.
The grid design enforces spatial diversity in the bounding box predictions. Often it is clear which grid cell an
object falls in to and the network only predicts one box for
each object. However, some large objects or objects near
the border of multiple cells can be well localized by multiple cells. Non-maximal suppression can be used to ﬁx these
multiple detections. While not critical to performance as it
is for R-CNN or DPM, non-maximal suppression adds 2-
3% in mAP.
2.4. Limitations of YOLO
YOLO imposes strong spatial constraints on bounding
box predictions since each grid cell only predicts two boxes
and can only have one class. This spatial constraint limits the number of nearby objects that our model can predict. Our model struggles with small objects that appear in
groups, such as ﬂocks of birds.
Since our model learns to predict bounding boxes from
data, it struggles to generalize to objects in new or unusual
aspect ratios or conﬁgurations. Our model also uses relatively coarse features for predicting bounding boxes since
our architecture has multiple downsampling layers from the
input image.
Finally, while we train on a loss function that approximates detection performance, our loss function treats errors
the same in small bounding boxes versus large bounding
boxes. A small error in a large box is generally benign but a
small error in a small box has a much greater effect on IOU.
Our main source of error is incorrect localizations.
3. Comparison to Other Detection Systems
Object detection is a core problem in computer vision.
Detection pipelines generally start by extracting a set of
robust features from input images (Haar , SIFT ,
HOG , convolutional features ).
Then, classiﬁers
 or localizers are used to identify
objects in the feature space. These classiﬁers or localizers
are run either in sliding window fashion over the whole image or on some subset of regions in the image .
We compare the YOLO detection system to several top detection frameworks, highlighting key similarities and differences.
Deformable parts models. Deformable parts models
(DPM) use a sliding window approach to object detection
 . DPM uses a disjoint pipeline to extract static features,
classify regions, predict bounding boxes for high scoring
regions, etc. Our system replaces all of these disparate parts
with a single convolutional neural network. The network
performs feature extraction, bounding box prediction, nonmaximal suppression, and contextual reasoning all concurrently. Instead of static features, the network trains the features in-line and optimizes them for the detection task. Our
uniﬁed architecture leads to a faster, more accurate model
R-CNN. R-CNN and its variants use region proposals instead of sliding windows to ﬁnd objects in images. Selective
Search generates potential bounding boxes, a convolutional network extracts features, an SVM scores the boxes, a
linear model adjusts the bounding boxes, and non-max suppression eliminates duplicate detections. Each stage of this
complex pipeline must be precisely tuned independently
and the resulting system is very slow, taking more than 40
seconds per image at test time .
YOLO shares some similarities with R-CNN. Each grid
cell proposes potential bounding boxes and scores those
boxes using convolutional features. However, our system
puts spatial constraints on the grid cell proposals which
helps mitigate multiple detections of the same object. Our
system also proposes far fewer bounding boxes, only 98
per image compared to about 2000 from Selective Search.
Finally, our system combines these individual components
into a single, jointly optimized model.
Other Fast Detectors Fast and Faster R-CNN focus on
speeding up the R-CNN framework by sharing computation and using neural networks to propose regions instead
of Selective Search . While they offer speed and
accuracy improvements over R-CNN, both still fall short of
real-time performance.
Many research efforts focus on speeding up the DPM
pipeline . They speed up HOG computation,
use cascades, and push computation to GPUs. However,
only 30Hz DPM actually runs in real-time.
Instead of trying to optimize individual components of
a large detection pipeline, YOLO throws out the pipeline
entirely and is fast by design.
Detectors for single classes like faces or people can be
highly optimized since they have to deal with much less
variation . YOLO is a general purpose detector that
learns to detect a variety of objects simultaneously.
Deep MultiBox. Unlike R-CNN, Szegedy et al. train a
convolutional neural network to predict regions of interest
 instead of using Selective Search. MultiBox can also
perform single object detection by replacing the conﬁdence
prediction with a single class prediction. However, Multi-
Box cannot perform general object detection and is still just
a piece in a larger detection pipeline, requiring further image patch classiﬁcation. Both YOLO and MultiBox use a
convolutional network to predict bounding boxes in an image but YOLO is a complete detection system.
OverFeat. Sermanet et al. train a convolutional neural
network to perform localization and adapt that localizer to
perform detection . OverFeat efﬁciently performs sliding window detection but it is still a disjoint system. Over-
Feat optimizes for localization, not detection performance.
Like DPM, the localizer only sees local information when
making a prediction. OverFeat cannot reason about global
context and thus requires signiﬁcant post-processing to produce coherent detections.
MultiGrasp. Our work is similar in design to work on
grasp detection by Redmon et al . Our grid approach to
bounding box prediction is based on the MultiGrasp system
for regression to grasps. However, grasp detection is a much
simpler task than object detection. MultiGrasp only needs
to predict a single graspable region for an image containing
one object. It doesn’t have to estimate the size, location,
or boundaries of the object or predict it’s class, only ﬁnd a
region suitable for grasping. YOLO predicts both bounding
boxes and class probabilities for multiple objects of multiple classes in an image.
4. Experiments
First we compare YOLO with other real-time detection
systems on PASCAL VOC 2007. To understand the differences between YOLO and R-CNN variants we explore the
errors on VOC 2007 made by YOLO and Fast R-CNN, one
of the highest performing versions of R-CNN . Based
on the different error proﬁles we show that YOLO can be
used to rescore Fast R-CNN detections and reduce the errors from background false positives, giving a signiﬁcant
performance boost. We also present VOC 2012 results and
compare mAP to current state-of-the-art methods. Finally,
we show that YOLO generalizes to new domains better than
other detectors on two artwork datasets.
4.1. Comparison to Other Real-Time Systems
Many research efforts in object detection focus on making standard detection pipelines fast. 
 However, only Sadeghi et al. actually produce a detection system that runs in real-time (30 frames per second
or better) . We compare YOLO to their GPU implementation of DPM which runs either at 30Hz or 100Hz.
While the other efforts don’t reach the real-time milestone
we also compare their relative mAP and speed to examine
the accuracy-performance tradeoffs available in object detection systems.
Fast YOLO is the fastest object detection method on
PASCAL; as far as we know, it is the fastest extant object
detector. With 52.7% mAP, it is more than twice as accurate
as prior work on real-time detection. YOLO pushes mAP to
63.4% while still maintaining real-time performance.
We also train YOLO using VGG-16. This model is more
accurate but also signiﬁcantly slower than YOLO. It is useful for comparison to other detection systems that rely on
VGG-16 but since it is slower than real-time the rest of the
paper focuses on our faster models.
Fastest DPM effectively speeds up DPM without sacri-
ﬁcing much mAP but it still misses real-time performance
by a factor of 2 . It also is limited by DPM’s relatively
low accuracy on detection compared to neural network approaches.
R-CNN minus R replaces Selective Search with static
bounding box proposals . While it is much faster than
Real-Time Detectors
100Hz DPM 
30Hz DPM 
Less Than Real-Time
Fastest DPM 
R-CNN Minus R 
Fast R-CNN 
Faster R-CNN VGG-16 
Faster R-CNN ZF 
YOLO VGG-16
Table 1: Real-Time Systems on PASCAL VOC 2007. Comparing the performance and speed of fast detectors. Fast YOLO is
the fastest detector on record for PASCAL VOC detection and is
still twice as accurate as any other real-time detector. YOLO is
10 mAP more accurate than the fast version while still well above
real-time in speed.
R-CNN, it still falls short of real-time and takes a signiﬁcant
accuracy hit from not having good proposals.
Fast R-CNN speeds up the classiﬁcation stage of R-CNN
but it still relies on selective search which can take around
2 seconds per image to generate bounding box proposals.
Thus it has high mAP but at 0.5 fps it is still far from realtime.
The recent Faster R-CNN replaces selective search with
a neural network to propose bounding boxes, similar to
Szegedy et al. In our tests, their most accurate model
achieves 7 fps while a smaller, less accurate one runs at
18 fps. The VGG-16 version of Faster R-CNN is 10 mAP
higher but is also 6 times slower than YOLO. The Zeiler-
Fergus Faster R-CNN is only 2.5 times slower than YOLO
but is also less accurate.
4.2. VOC 2007 Error Analysis
To further examine the differences between YOLO and
state-of-the-art detectors, we look at a detailed breakdown
of results on VOC 2007. We compare YOLO to Fast R-
CNN since Fast R-CNN is one of the highest performing
detectors on PASCAL and it’s detections are publicly available.
We use the methodology and tools of Hoiem et al. 
For each category at test time we look at the top N predictions for that category. Each prediction is either correct or
it is classiﬁed based on the type of error:
• Correct: correct class and IOU > .5
• Localization: correct class, .1 < IOU < .5
• Similar: class is similar, IOU > .1
Correct: 71.6%
Correct: 65.5%
Other: 1.9%
Background: 13.6%
Loc: 19.0%
Sim: 6.75%
Other: 4.0%
Background: 4.75%
Fast R-CNN
Figure 4: Error Analysis: Fast R-CNN vs.
YOLO These
charts show the percentage of localization and background errors
in the top N detections for various categories (N = # objects in that
category).
• Other: class is wrong, IOU > .1
• Background: IOU < .1 for any object
Figure 4 shows the breakdown of each error type averaged across all 20 classes.
YOLO struggles to localize objects correctly. Localization errors account for more of YOLO’s errors than all other
sources combined. Fast R-CNN makes much fewer localization errors but far more background errors. 13.6% of
it’s top detections are false positives that don’t contain any
objects. Fast R-CNN is almost 3x more likely to predict
background detections than YOLO.
4.3. Combining Fast R-CNN and YOLO
YOLO makes far fewer background mistakes than Fast
R-CNN. By using YOLO to eliminate background detections from Fast R-CNN we get a signiﬁcant boost in performance. For every bounding box that R-CNN predicts we
check to see if YOLO predicts a similar box. If it does, we
give that prediction a boost based on the probability predicted by YOLO and the overlap between the two boxes.
The best Fast R-CNN model achieves a mAP of 71.8%
on the VOC 2007 test set. When combined with YOLO, its
Fast R-CNN
Fast R-CNN 
Fast R-CNN (VGG-M)
Fast R-CNN (CaffeNet)
Table 2: Model combination experiments on VOC 2007. We
examine the effect of combining various models with the best version of Fast R-CNN. Other versions of Fast R-CNN provide only
a small beneﬁt while YOLO provides a signiﬁcant performance
VOC 2012 test
bottle bus
horse mbike personplant sheep sofa
MR CNN MORE DATA 
HyperNet VGG
HyperNet SP
Fast R-CNN + YOLO
MR CNN S CNN 
Faster R-CNN 
DEEP ENS COCO
Fast R-CNN 
UMICH FGS STRUCT
NUS NIN C2000 
BabyLearning 
R-CNN VGG BB 
R-CNN VGG 
Feature Edit 
R-CNN BB 
R-CNN 
Table 3: PASCAL VOC 2012 Leaderboard. YOLO compared with the full comp4 (outside data allowed) public leaderboard as of
November 6th, 2015. Mean average precision and per-class average precision are shown for a variety of detection methods. YOLO is the
only real-time detector. Fast R-CNN + YOLO is the forth highest scoring method, with a 2.3% boost over Fast R-CNN.
mAP increases by 3.2% to 75.0%. We also tried combining
the top Fast R-CNN model with several other versions of
Fast R-CNN. Those ensembles produced small increases in
mAP between .3 and .6%, see Table 2 for details.
The boost from YOLO is not simply a byproduct of
model ensembling since there is little beneﬁt from combining different versions of Fast R-CNN. Rather, it is precisely
because YOLO makes different kinds of mistakes at test
time that it is so effective at boosting Fast R-CNN’s performance.
Unfortunately, this combination doesn’t beneﬁt from the
speed of YOLO since we run each model seperately and
then combine the results. However, since YOLO is so fast
it doesn’t add any signiﬁcant computational time compared
to Fast R-CNN.
4.4. VOC 2012 Results
On the VOC 2012 test set, YOLO scores 57.9% mAP.
This is lower than the current state of the art, closer to
the original R-CNN using VGG-16, see Table 3. Our system struggles with small objects compared to its closest
competitors.
On categories like bottle, sheep, and
tv/monitor YOLO scores 8-10% lower than R-CNN or
Feature Edit. However, on other categories like cat and
train YOLO achieves higher performance.
Our combined Fast R-CNN + YOLO model is one of the
highest performing detection methods. Fast R-CNN gets
a 2.3% improvement from the combination with YOLO,
boosting it 5 spots up on the public leaderboard.
4.5. Generalizability: Person Detection in Artwork
Academic datasets for object detection draw the training
and testing data from the same distribution. In real-world
applications it is hard to predict all possible use cases and
the test data can diverge from what the system has seen before . We compare YOLO to other detection systems on
the Picasso Dataset and the People-Art Dataset , two
datasets for testing person detection on artwork.
Figure 5 shows comparative performance between
YOLO and other detection methods. For reference, we give
VOC 2007 detection AP on person where all models are
trained only on VOC 2007 data. On Picasso models are
trained on VOC 2012 while on People-Art they are trained
on VOC 2010.
R-CNN has high AP on VOC 2007. However, R-CNN
drops off considerably when applied to artwork. R-CNN
uses Selective Search for bounding box proposals which is
tuned for natural images. The classiﬁer step in R-CNN only
sees small regions and needs good proposals.
DPM maintains its AP well when applied to artwork.
Prior work theorizes that DPM performs well because it has
strong spatial models of the shape and layout of objects.
Though DPM doesn’t degrade as much as R-CNN, it starts
from a lower AP.
YOLO has good performance on VOC 2007 and its AP
degrades less than other methods when applied to artwork.
Like DPM, YOLO models the size and shape of objects,
as well as relationships between objects and where objects
commonly appear. Artwork and natural images are very
different on a pixel level but they are similar in terms of
the size and shape of objects, thus YOLO can still predict
good bounding boxes and detections.
5. Real-Time Detection In The Wild
YOLO is a fast, accurate object detector, making it ideal
for computer vision applications. We connect YOLO to a
webcam and verify that it maintains real-time performance,
(a) Picasso Dataset precision-recall curves.
People-Art
Poselets 
(b) Quantitative results on the VOC 2007, Picasso, and People-Art Datasets.
The Picasso Dataset evaluates on both AP and best F1 score.
Figure 5: Generalization results on Picasso and People-Art datasets.
Figure 6: Qualitative Results. YOLO running on sample artwork and natural images from the internet. It is mostly accurate although it
does think one person is an airplane.
including the time to fetch images from the camera and display the detections.
The resulting system is interactive and engaging. While
YOLO processes images individually, when attached to a
webcam it functions like a tracking system, detecting objects as they move around and change in appearance. A
demo of the system and the source code can be found on
our project website: 
6. Conclusion
We introduce YOLO, a uniﬁed model for object detection. Our model is simple to construct and can be trained
directly on full images. Unlike classiﬁer-based approaches,
YOLO is trained on a loss function that directly corresponds
to detection performance and the entire model is trained
Fast YOLO is the fastest general-purpose object detector in the literature and YOLO pushes the state-of-the-art in
real-time object detection. YOLO also generalizes well to
new domains making it ideal for applications that rely on
fast, robust object detection.
Acknowledgements: This work is partially supported by
ONR N00014-13-1-0720, NSF IIS-1338054, and The Allen
Distinguished Investigator Award.