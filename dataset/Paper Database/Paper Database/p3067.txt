StackGAN++: Realistic Image Synthesis
with Stacked Generative Adversarial Networks
Han Zhang, Tao Xu, Hongsheng Li, Shaoting Zhang, Senior Member, IEEE,
Xiaogang Wang, Member, IEEE, Xiaolei Huang, Member, IEEE, Dimitris N. Metaxas∗, Fellow, IEEE
Abstract—Although Generative Adversarial Networks (GANs) have shown remarkable success in various tasks, they still face
challenges in generating high quality images. In this paper, we propose Stacked Generative Adversarial Networks (StackGANs)
aimed at generating high-resolution photo-realistic images. First, we propose a two-stage generative adversarial network architecture,
StackGAN-v1, for text-to-image synthesis. The Stage-I GAN sketches the primitive shape and colors of a scene based on a given text
description, yielding low-resolution images. The Stage-II GAN takes Stage-I results and the text description as inputs, and generates
high-resolution images with photo-realistic details. Second, an advanced multi-stage generative adversarial network architecture,
StackGAN-v2, is proposed for both conditional and unconditional generative tasks. Our StackGAN-v2 consists of multiple generators
and multiple discriminators arranged in a tree-like structure; images at multiple scales corresponding to the same scene are generated
from different branches of the tree. StackGAN-v2 shows more stable training behavior than StackGAN-v1 by jointly approximating
multiple distributions. Extensive experiments demonstrate that the proposed stacked generative adversarial networks signiﬁcantly
outperform other state-of-the-art methods in generating photo-realistic images.
Index Terms—Generative models, Generative Adversarial Networks (GANs), multi-stage GANs, multi-distribution approximation,
photo-realistic image generation, text-to-image synthesis.
INTRODUCTION
Generative Adversarial Networks (GANs) were proposed by
Goodfellow et al. . In the original setting, GANs are composed of a generator and a discriminator that are trained with
competing goals. The generator is trained to generate samples
towards the true data distribution to fool the discriminator,
while the discriminator is optimized to distinguish between
real samples from the true data distribution and fake samples
produced by the generator. Recently, GANs have shown great
potential in simulating complex data distributions, such as
those of texts , images and videos .
Despite the success, GANs are known to be difﬁcult to
train. The training process is usually unstable and sensitive
to the choices of hyper-parameters. Several papers argued that
the instability is partially due to the disjoint supports of the
data distribution and the implied model distribution , .
• H. Zhang is with the Department of Computer Science, Rutgers University,
Piscataway, NJ, 08854. E-mail: 
• T. Xu is with the Department of Computer Science and Engineering, Lehigh
University, Bethlehem, PA, 18015. E-mail: 
• H. Li is with the Department of Electronic Engineering, The Chinese University of Hong Kong, Shatin, N. T., Hong Kong. E-mail:
 
• S. Zhang is with the Department of Computer Science, University of North
Carolina at Charlotte, Charlotte, NC 28223. E-mail: 
• X. Wang is with the Department of Electronic Engineering, The Chinese University of Hong Kong, Shatin, N. T., Hong Kong. E-mail: 
• X. Huang is with the Department of Computer Science and Engineering,
Lehigh University, Bethlehem, PA, 18015. E-mail: 
• D. N. Metaxas is with the Department of Computer Science, Rutgers
University, Piscataway, NJ, 08854. E-mail: 
The ﬁrst two authors contributed equally to this work. Asterisk indicates the
corresponding author.
This problem is more severe when training GANs to generate
high-resolution (e.g., 256×256) images because the chance is
very low for the image distribution and the model distribution
to share supports in a high-dimensional space. Moreover,
a common failure phenomenon for GANs training is mode
collapse, where many of the generated samples contain the
same color or texture pattern.
In order to stabilize the GANs’ training process and
improve sample diversity, several methods tried to address
the challenges by proposing new network architectures ,
introducing heuristic tricks or modifying the learning
objectives , , . But most of the previous methods
are designed to approximate the image distribution at a single
scale. Due to the difﬁculty in directly approximating the highresolution image data distribution, most previous methods are
limited to generating low-resolution images. To circumvent
this difﬁculty, we observe that, real world data, especially
natural images, can be modeled at different scales . One
can view multi-resolution digitized images as samples from
the same continuous image signal with different sampling
rates. Henceforth, the distributions of images at multiple
discrete scales are related. Apart from multiple distributions
of different scales, images coupled with or without auxiliary
conditioning variables (e.g., class labels or text descriptions)
can be viewed as conditional distributions or unconditional
distributions, which are also related distributions. Motivated by
these observations, we argue that GANs can be stably trained
to generate high resolution images by breaking the difﬁcult
generative task into sub-problems with progressive goals.
Thus, we propose Stacked Generative Adversarial Networks
(StackGANs) to model a series of low-to-high-dimensional
data distributions.
 
First, we propose a two-stage generative adversarial network, StackGAN-v1, to generate images from text descriptions through a sketch-reﬁnement process . Low-resolution
images are ﬁrst generated by our Stage-I GAN. On top of
the Stage-I GAN, we stack Stage-II GAN to generate highresolution (e.g., 256×256) images. By conditioning on the
Stage-I result and the text again, Stage-II GAN learns to capture the text information that is omitted by Stage-I GAN and
draws more details. Further, we propose a novel Conditioning
Augmentation (CA) technique to encourage smoothness in
the latent conditioning manifold . It allows small random
perturbations in the conditioning manifold and increases the
diversity of synthesized images.
Second, we propose an advanced multi-stage generative
adversarial network architecture, StackGAN-v2, for both conditional and unconditional generative tasks. StackGAN-v2 has
multiple generators that share most of their parameters in
a tree-like structure. As shown in Fig. 2, the input to the
network can be viewed as the root of the tree, and multiscale images are generated from different branches of the
tree. The generator at the deepest branch has the ﬁnal goal of
generating photo-realistic high-resolution images. Generators
at intermediate branches have progressive goals of generating
small to large images to help accomplish the ﬁnal goal. The
whole network is jointly trained to approximate different but
highly related image distributions at different branches. The
positive feedback from modeling one distribution can improve
the learning of others. For conditional image generation tasks,
our proposed StackGAN-v2 simultaneously approximates the
unconditional image-only distribution and the image distribution conditioned on text descriptions. Those two types of
distributions are complementary to each other. Moreover, we
propose a color-consistency regularization term to guide our
generators to generate more coherent samples across different
scales. The regularization provides additional constraints to
facilitate multi-distribution approximation, which is especially
useful in the unconditional setting where there is no instancewise supervision between the image and the input noise
In summary, the proposed Stacked Generative Adversarial
Networks have three major contributions. (i) Our StackGANv1 for the ﬁrst time generates images of 256×256 resolution with photo-realistic details from text descriptions.
(ii) A new Conditioning Augmentation technique is proposed to stabilize the conditional GANs’ training and also
improve the diversity of the generated samples. (iii) Our
StackGAN-v2 further improves the quality of generated
images and stabilizes the GANs’ training by jointly approximating multiple distributions. In the remainder of this
paper, we ﬁrst discuss related work and preliminaries in
section 2 and section 3, respectively. We then introduce
our StackGAN-v1 in section 4 and StackGAN-v2 in
section 5. In section 6, extensive experiments are conducted to evaluate the proposed methods. Finally, we make
conclusions in section 7. The source code for StackGANv1 is available at 
and the source code for StackGAN-v2 is available at
 
RELATED WORK
Generative image modeling is a fundamental problem in
computer vision. There has been remarkable progress in this
direction with the emergence of deep learning techniques.
Variational Autoencoders (VAEs) , formulate the
problem with probabilistic graphical models with the goal of
maximizing the lower bound of data likelihood. Autoregressive
models (e.g., PixelRNN) that utilize neural networks to
model the conditional distribution of the pixel space have also
generated appealing synthetic images. Recently, Generative
Adversarial Networks (GANs) have shown promising
performance for generating sharper images. But the training
instability makes it hard for GANs to generate high-resolution
(e.g., 256×256) images. A lot of works have been proposed
to stabilize the training and improve the image qualities ,
 , , , , .
Built upon these generative models, conditional image
generation has also been studied. Most methods utilize simple
conditioning variables such as attributes or class labels ,
 , , . There are also works conditioned on images to generate images, including photo editing , ,
domain transfer , and super-resolution , .
However, super-resolution methods , can only add
limited details to low-resolution images and can not correct
large defects. In contrast, the latter stages in our proposed
StackGANs can not only add details to low-resolution images
generated by earlier stages but also correct defects in them.
Recently, several methods have been developed to generate
images from unstructured text. Mansimov et al. built
an AlignDRAW model by learning to estimate alignment
between text and the generating canvas. Reed et al. 
used conditional PixelCNN to generate images using text
descriptions and object location constraints. Nguyen et al. 
used an approximate Langevin sampling approach to generate
images conditioned on text. However, their sampling approach
requires an inefﬁcient iterative optimization process. With
conditional GANs, Reed et al. successfully generated
plausible 64×64 images for birds and ﬂowers based on text
descriptions. Their follow-up work was able to generate
128×128 images by utilizing additional annotations on object
part locations.
Given the difﬁculties in modeling details of natural images,
many works have been proposed to use multiple GANs to
improve sample quality. Wang et al. utilized a structure
GAN and a style GAN to synthesize images of indoor scenes.
Yang et al. factorized image generation into foreground
and background generation with layered recursive GANs.
Huang et al. added several GANs to reconstruct the multilevel representations of a pre-trained discriminative model.
But they were unable to generate high resolution images
with photo-realistic details. Durugkar et al. used multiple
discriminators along with one generator to increase the chance
of the generator receiving effective feedback. However, all
discriminators in their framework are trained to approximate
the image distribution at a single scale. Some methods , 
follow the same intuition as our work. We all agree that it is
beneﬁcial to break the high-resolution image generation task
into several easier subtasks to be accomplished in multiple
stages. Denton et al. built a series of GANs within a
Laplacian pyramid framework (LAPGANs). At each level
of the pyramid, a residual image conditioned on the image
of the previous stage is generated and then added back to
the input image to produce the input for the next stage.
Instead of producing a residual image, our StackGANs directly
generate high resolution images that are conditioned on their
low-resolution inputs. Concurrent to our work, Kerras et
al. incrementally add more layers in the generator and
discriminator for high resolution image generation. The main
difference in terms of experimental setting is that they used
a more restrained upsampling rule: starting from 4×4 pixels,
their image resolution is increased by a factor of 2 between
consecutive image generation stages. Furthermore, although
StackGANs, LAPGANs and Progressive GANs all
put emphasis on adding ﬁner details in higher resolution
images, our StackGANs can also correct incoherent artifacts
or defects in low resolution results by utilizing an encoderdecoder network before the upsampling layers.
PRELIMINARIES
Generative Adversarial Networks (GANs) are composed
of two models that are alternatively trained to compete with
each other. The generator G is optimized to reproduce the
true data distribution pdata by generating images that are
difﬁcult for the discriminator D to differentiate from real
images. Meanwhile, D is optimized to distinguish real images
and synthetic images generated by G. Overall, the training
procedure is a minmax two-player game with the following
objective function,
D V (D, G) = Ex∼pdata[log D(x)] +
Ez∼pz[log(1 −D(G(z)))],
where x is a real image from the true data distribution pdata,
and z is a noise vector sampled from the prior distribution
pz (e.g., uniform or Gaussian distribution). In practice, the
generator G is modiﬁed to maximize log(D(G(z))) instead
of minimizing log(1 −D(G(z))) to mitigate the problem of
gradient vanishing . We use this modiﬁed non-saturating
objective in all our experiments.
Conditional GANs , are extension of GANs where
both the generator and discriminator receive additional conditioning variables c, yielding G(z, c) and D(x, c). This formulation allows G to generate images conditioned on variables
STACKGAN-V1: TWO-STAGE GENERATIVE
ADVERSARIAL NETWORK
To generate high-resolution images with photo-realistic details, we propose a simple yet effective two-stage generative
adversarial network, StackGAN-v1. As shown in Fig. 1, it decomposes the text-to-image generative process into two stages.
Stage-I GAN sketches the primitive shape and basic colors of
the object conditioned on the given text description, and draws
the background layout from a random noise vector, yielding
a low-resolution image. Stage-II GAN corrects defects in the
low-resolution image from Stage-I and completes details of
the object by reading the text description again, producing a
high-resolution photo-realistic image.
Conditioning Augmentation
As shown in Fig. 1, the text description t is ﬁrst encoded by an
encoder, yielding a text embedding ϕt. In previous works ,
 , the text embedding is nonlinearly transformed to generate
conditioning latent variables as the input of the generator.
However, latent space for the text embedding is usually high
dimensional (> 100 dimensions). With limited amount of data,
it usually causes discontinuity in the latent data manifold,
which is not desirable for learning the generator. To mitigate
this problem, we introduce a Conditioning Augmentation
technique to produce additional conditioning variables ˆc. In
contrast to the ﬁxed conditioning text variable c in , ,
we randomly sample the latent variables ˆc from an independent
Gaussian distribution N(µ(ϕt), Σ(ϕt)), where the mean µ(ϕt)
and diagonal covariance matrix Σ(ϕt) are functions of the
text embedding ϕt. The proposed Conditioning Augmentation
yields more training pairs given a small number of imagetext pairs, and thus encourages robustness to small perturbations along the conditioning manifold. To further enforce
the smoothness over the conditioning manifold and avoid
overﬁtting , , we add the following regularization term
to the objective of the generator during training,
DKL (N(µ(ϕt), Σ(ϕt)) || N(0, I)) ,
which is the Kullback-Leibler divergence (KL divergence)
between the standard Gaussian distribution and the conditioning Gaussian distribution. The randomness introduced in the
Conditioning Augmentation is beneﬁcial for modeling text to
image translation as the same sentence usually corresponds to
objects with various poses and appearances.
Stage-I GAN
Instead of directly generating a high-resolution image conditioned on the text description, we simplify the task to ﬁrst
generate a low-resolution image with our Stage-I GAN, which
focuses on drawing only rough shape and correct colors for
the object.
Let ϕt be the text embedding of the given description. The
Gaussian conditioning variables ˆc0 for text embedding are
sampled from N(µ0(ϕt), Σ0(ϕt)) to capture the meaning of
ϕt with variations. Conditioned on ˆc0 and random variable z,
Stage-I GAN trains the discriminator D0 and the generator G0
by alternatively maximizing LD0 in Eq. (3) and minimizing
LG0 in Eq. (4),
LD0 = E(I0,t)∼pdata[log D0(I0, ϕt)] +
Ez∼pz,t∼pdata[log(1 −D0(G0(z, ˆc0), ϕt))],
LG0 = Ez∼pz,t∼pdata[−log D0(G0(z, ˆc0), ϕt)] +
λDKL(N(µ0(ϕt), Σ0(ϕt)) || N(0, I)),
where the real image I0 and the text description t are from
the true data distribution pdata. z is a noise vector randomly
Conditioning
Augmentation (CA)
Stage-I Generator G0
for sketch
Stage-II Generator G for refinement
ε ~ N(0, I)
z ~ N(0, I)
Upsampling
Conditioning
Augmentation
Upsampling
Compression and
Spatial Replication
Compression and
Spatial Replication
Embedding ϕt
Text description t
real images
Stage-I Discriminator D0
Downsampling
Stage-II Discriminator D
Downsampling
This bird is grey with
white on its chest and
has a very short beak
Downsampling
real images
real images
Stage-I results
Stage-I results
Embedding ϕt
Embedding ϕt
Fig. 1: The architecture of the proposed StackGAN-v1. The Stage-I generator draws a low-resolution image by sketching rough shape and
basic colors of the object from the given text and painting the background from a random noise vector. Conditioned on Stage-I results, the
Stage-II generator corrects defects and adds compelling details into Stage-I results, yielding a more realistic high-resolution image.
sampled from a given distribution pz (Gaussian distribution in
this paper). λ is a regularization parameter that balances the
two terms in Eq. (4). We set λ = 1 for all our experiments.
Using the reparameterization trick introduced in , both
µ0(ϕt) and Σ0(ϕt) are learned jointly with the rest of the
network. To extract a visually-discriminative text embedding
of the given description, we follow the approach of Reed et
al. to pre-train a text encoder. It is a character level
CNN-RNN model that maps text descriptions to the common
feature space of images by learning a correspondence function
between texts with images .
Model Architecture. For the generator G0, to obtain text
conditioning variable ˆc0, the text embedding ϕt is ﬁrst fed
into a fully connected layer to generate µ0 and σ0 (σ0 are
the values in the diagonal of Σ0) for the Gaussian distribution
N(µ0(ϕt), Σ0(ϕt)). ˆc0 are then sampled from the Gaussian
distribution. Our Ng dimensional conditioning vector ˆc0 is
computed by ˆc0 = µ0 + σ0 ⊙ϵ (where ⊙is the elementwise multiplication, ϵ ∼N(0, I)). Then, ˆc0 is concatenated
with a Nz dimensional noise vector to generate a W0 × H0
image by a series of up-sampling blocks.
For the discriminator D0, the text embedding ϕt is ﬁrst
compressed to Nd dimensions using a fully-connected layer
and then spatially replicated to form a Md × Md × Nd
tensor. Meanwhile, the image is fed through a series of downsampling blocks until it has Md × Md spatial dimension.
Then, the image ﬁlter map is concatenated along the channel
dimension with the text tensor. The resulting tensor is further
fed to a 1×1 convolutional layer to jointly learn features across
the image and the text. Finally, a fully-connected layer with
one node is used to produce the decision score.
Stage-II GAN
Low-resolution images generated by Stage-I GAN usually lack
vivid object parts and might contain shape distortions. Some
details in the text might also be omitted in the ﬁrst stage,
which is vital for generating photo-realistic images. Our Stage-
II GAN is built upon Stage-I GAN results to generate highresolution images. It is conditioned on low-resolution images
and also the text embedding again to correct defects in Stage-I
results. The Stage-II GAN completes previously ignored text
information to generate more photo-realistic details.
Conditioning on the low-resolution result s0 = G0(z, ˆc0)
and Gaussian latent variables ˆc, the discriminator D and
generator G in Stage-II GAN are trained by alternatively
maximizing LD in Eq. (5) and minimizing LG in Eq. (6),
LD = E(I,t)∼pdata[log D(I, ϕt)] +
Es0∼pG0,t∼pdata[log(1 −D(G(s0, ˆc), ϕt))],
LG = Es0∼pG0,t∼pdata [−log D(G(s0, ˆc), ϕt)] +
λDKL (N(µ(ϕt), Σ(ϕt)) || N(0, I)) ,
Different from the original formulation of GANs, the random
noise z is not used in this stage with the assumption that
the randomness has already been preserved by s0. Gaussian
conditioning variables ˆc used in this stage and ˆc0 used
in Stage-I GAN share the same pre-trained text encoder,
generating the same text embedding ϕt. However, Stage-I
and Stage-II Conditioning Augmentation have different fully
connected layers for generating different means and standard
deviations. In this way, Stage-II GAN learns to capture useful
information in the text embedding that is omitted by Stage-I
Model Architecture. We design Stage-II generator as an
encoder-decoder network with residual blocks . Similar
to the previous stage, the text embedding ϕt is used to
generate the Ng dimensional text conditioning vector ˆc, which
is spatially replicated to form a Mg × Mg × Ng tensor.
Meanwhile, the Stage-I result s0 generated by Stage-I GAN
is fed into several down-sampling blocks (i.e., encoder) until
it has a spatial size of Mg × Mg. The image features and the
text features are concatenated along the channel dimension.
The encoded image features coupled with text features are
fed into several residual blocks, which are designed to learn
multi-modal representations across image and text features.
Finally, a series of up-sampling layers (i.e., decoder) are used
to generate a W × H high-resolution image. Such a generator
is able to help rectify defects in the input image while add
more details to generate the realistic high-resolution image.
For the discriminator, its structure is similar to that of Stage-
I discriminator with only extra down-sampling blocks since
the image size is larger in this stage. To explicitly enforce
GANs to learn better alignment between the image and the
conditioning text, rather than using the vanilla discriminator,
we adopt the matching-aware discriminator proposed by Reed
et al. for both stages. During training, the discriminator
takes real images and their corresponding text descriptions as
positive sample pairs, whereas negative sample pairs consist
of two groups. The ﬁrst is real images with mismatched text
embeddings, while the second is synthetic images with their
corresponding text embeddings.
Implementation details
The up-sampling blocks consist of the nearest-neighbor upsampling followed by a 3×3 stride 1 convolution. Batch
normalization and ReLU activation are applied after
every convolution except the last one. The residual blocks
consist of 3×3 stride 1 convolutions, Batch normalization and
ReLU. Two residual blocks are used in 128×128 StackGANv1 models while four are used in 256×256 models. The downsampling blocks consist of 4×4 stride 2 convolutions, Batch
normalization and LeakyReLU, except that the ﬁrst one does
not have Batch normalization.
By default, Ng = 128, Nz = 100, Mg = 16, Md = 4, Nd =
128, W0 = H0 = 64 and W = H = 256. For training, we ﬁrst
iteratively train D0 and G0 of Stage-I GAN for 600 epochs
by ﬁxing Stage-II GAN. Then we iteratively train D and G
of Stage-II GAN for another 600 epochs by ﬁxing Stage-I
GAN. All networks are trained using ADAM solver with
beta1 = 0.5. The batch size is 64, and the learning rate is
initialized to be 0.0002 and decayed to 1/2 of its previous
value every 100 epochs. The source code for StackGAN-v1
is available at for
more implementation details.
STACKGAN-V2:
MULTI-DISTRIBUTION
GENERATIVE ADVERSARIAL NETWORK
As discussed above, our StackGAN-v1 has two separate
networks, Stage-I GAN and Stage-II GAN, to model low-tohigh resolution image distributions. To make the framework
more general, in this paper, we propose a new end-to-end
network, StackGAN-v2, to model a series of multi-scale image
distributions. As shown in Fig. 2, StackGAN-v2 consists of
multiple generators (Gs) and discriminators (Ds) in a tree-like
structure. Images from low-resolution to high-resolution are
generated from different branches of the tree. At each branch,
the generator captures the image distribution at that scale and
the discriminator estimates the probability that a sample came
from training images of that scale rather than the generator.
The generators are jointly trained to approximate the multiple
distributions, and the generators and discriminators are trained
in an alternating fashion. In this section, we explore two types
of multi-distributions: (1) multi-scale image distributions; and
(2) joint conditional and unconditional image distributions.
Multi-scale image distributions approximation
Our StackGAN-v2 framework has a tree-like structure, which
takes a noise vector z ∼pnoise as the input and has multiple
generators to produce images of different scales. The pnoise
is a prior distribution, which is usually chosen as the standard
normal distribution. The latent variables z are transformed to
hidden features layer by layer. We compute the hidden features
hi for each generator Gi by a non-linear transformation,
h0 = F0(z);
hi = Fi(hi−1, z), i = 1, 2, ..., m −1,
where hi represents hidden features for the ith branch, m is
the total number of branches, and Fi are modeled as neural
networks (see Fig. 2 for illustration). In order to capture
information omitted in preceding branches, the noise vector z
is concatenated to the hidden features hi−1 as the inputs of Fi
for calculating hi. Based on hidden features at different layers
(h0, h1, ..., hm−1), generators produce samples of small-tolarge scales (s0, s1, ..., sm−1),
si = Gi(hi), i = 0, 1, ..., m −1,
where Gi is the generator for the ith branch.
Following each generator Gi, a discriminator Di, which
takes a real image xi or a fake sample si as input, is trained
to classify inputs into two classes (real or fake) by minimizing
the following cross-entropy loss,
LDi = −Exi∼pdatai [log Di(xi)] −Esi∼pGi [log(1 −Di(si)], (9)
where xi is from the true image distribution pdatai at the ith
scale, and si is from the model distribution pGi at the same
scale. The multiple discriminators are trained in parallel, and
each of them focuses on a single image scale.
Guided by the trained discriminators, the generators are optimized to jointly approximate multi-scale image distributions
(pdata0, pdata1, ..., pdatam−1) by minimizing the following loss
LGi = −Esi∼pGi [log Di(si)] ,
where LGi is the loss function for approximating the image
distribution at the ith scale (i.e., pdatai). During the training
process, the discriminators Di and the generators Gi are
alternately optimized till convergence.
The motivation of the proposed StackGAN-v2 is that, by
modeling data distributions at multiple scales, if any one of
those model distributions shares support with the real data
distribution at that scale, the overlap could provide good
gradient signal to expedite or stabilize training of the whole
network at multiple scales. For instance, approximating the
low-resolution image distribution at the ﬁrst branch results in
images with basic color and structures. Then the generators at
the subsequent branches can focus on completing details for
generating higher resolution images.
Generators in a tree-like structure
Upsampling
Upsampling
FC with reshape
FC with reshape
JCU Discriminator
Conditional
Unconditional
Downsampling
Fig. 2: The overall framework of our proposed StackGAN-v2 for the conditional image synthesis task. c is the vector of conditioning variables
which can be computed from the class label, the text description, etc.. Ng and Nd are the numbers of channels of a tensor.
Joint conditional and unconditional distribution
approximation
unconditional
generation,
discriminators
StackGAN-v2 are trained to distinguish real images from fake
ones. To handle conditional image generation, conventionally,
images and their corresponding conditioning variables are
input into the discriminator to determine whether an imagecondition pair matches or not, which guides the generator to
approximate the conditional image distribution. We propose
conditional StackGAN-v2 that jointly approximates conditional and unconditional image distributions.
For the generator of our conditional StackGAN-v2, F0 and
Fi are converted to take the conditioning vector c as input,
such that h0 = F0(c, z) and hi = Fi(hi−1, c). For Fi, the
conditioning vector c replaces the noise vector z to encourage
the generators to draw images with more details according to
the conditioning variables. Consequently, multi-scale samples
are now generated by si = Gi(hi). The objective function
of training the discriminator Di for conditional StackGANv2 now consists of two terms, the unconditional loss and the
conditional loss,
LDi = −Exi∼pdatai [log Di(xi)] −Esi∼pGi [log(1 −Di(si)]
unconditional loss
−Exi∼pdatai [log Di(xi, c)] −Esi∼pGi [log(1 −Di(si, c)]
conditional loss
The unconditional loss determines whether the image is
real or fake while the conditional one determines whether the
image and the condition match or not. Accordingly, the loss
function for each generator Gi is converted to
LGi = −Esi∼pGi [log Di(si)]
unconditional loss
+ −Esi∼pGi [log Di(si, c)]
conditional loss
The generator Gi at each scale therefore jointly approximates
unconditional and conditional image distributions. The ﬁnal
loss for jointly training generators of conditional StackGANv2 is computed by substituting Eq. (12) into Eq. (10).
Color-consistency regularization
As we increase the image resolution at different generators,
the generated images at different scales should share similar
basic structure and colors. A color-consistency regularization
term is introduced to keep samples generated from the same
input at different generators more consistent in color and thus
to improve the quality of the generated images.
Let xk = (R, G, B)T represent a pixel in a generated
image, then the mean and covariance of pixels of the given
image can be deﬁned by µ = P
k xk/N and Σ = P
µ)(xk −µ)T /N, where N is the number of pixels in
the image. The color-consistency regularization term aims at
minimizing the differences of µ and σ between different scales
to encourage the consistency, which is deﬁned as
2 + λ2∥Σsj
where n is the batch size, µsj
i are mean and
covariance for the jth sample generated by the ith generator.
Empirically, we set λ1 = 1 and λ2 = 5 by default. For
the jth input vector, multi-scale samples sj
2, ..., sj
generated from m generators of StackGAN-v2. LCi can be
added to the loss function of the ith generator deﬁned in
Eq. (10) or Eq. (12), where i = 2, 3, ..., m. Therefore,
the ﬁnal loss for training the ith generator is deﬁned as
Gi = LGi + α ∗LCi. Experimental results indicate that
the color-consistency regularization is very important (e.g.,
α = 50.0 in this paper) for the unconditional task, while
it is not needed (α = 0.0) for the text-to-image synthesis
task which has a stronger constraint, i.e., the instance-wise
correspondence between images and text descriptions.
Implementation details
As shown in Fig. 2, our StackGAN-v2 models are designed to generate 256×256 images. The input vector (i.e.,
z for unconditional StackGAN-v2, or the concatenated z
Oxford-102 
ImageNet 
TABLE 1: Statistics of datasets. We do not split LSUN or ImageNet because they are utilized for the unconditional tasks.
GAN-INT-CLS
Our StackGAN-v1
GAN-INT-CLS
Our StackGAN-v1
GAN-INT-CLS
Our StackGAN-v1
2.88 ± .04
3.62 ± .07
3.70 ± .04
2.66 ± .03
3.20 ± .01
7.88 ± .07
8.45 ± .03
2.88 ± .04
3.10 ± .03
3.02 ± .03
2.66 ± .03
2.73 ± .03
7.88 ± .07
8.35 ± .11
2.76 ± .01
1.95 ± .02
1.29 ± .02
1.84 ± .02
1.16 ± .02
1.82 ± .03
1.18 ± .03
TABLE 2: Inception scores (IS), fr´echet inception distance (FID) and average human ranks (HR) of GAN-INT-CLS , GAWWN 
and our StackGAN-v1 on CUB, Oxford-102, and COCO. (* means that images are re-sized to 64×64 before computing IS* and FID*)
Oxford-102
LSUN-bedroom
LSUN-church
ImageNet-dog
ImageNet-cat
StackGAN-v1
StackGAN-v2
StackGAN-v1
3.70 ± .04
3.20 ± .01
8.45 ± .03
3.59 ± .05
2.87 ± .05
8.84 ± .08
4.77 ± .06
StackGAN-v2
4.04 ± .05
3.26 ± .01
8.30 ± .10
3.02 ± .04
2.38 ± .03
9.55 ± .11
4.23 ± .05
StackGAN-v1
1.81 ± .02
1.70 ± .03
1.45 ± .04
1.95 ± .01
1.86 ± .02
1.90 ± .01
1.88 ± .02
StackGAN-v2
1.19 ± .02
1.30 ± .03
1.55 ± .05
1.05 ± .01
1.14 ± .02
1.10 ± .01
1.12 ± .02
TABLE 3: Comparison of StackGAN-v1 and StackGAN-v2 on different datasets by inception scores (IS), fr´echet inception distance (FID)
and average human ranks (HR).
and c1 for conditional StackGAN-v2) is ﬁrst transformed
to a 4×4×64Ng feature tensor, where Ng is the number
of channels in the tensor. Then, this 4×4×64Ng tensor
is gradually transformed to 64×64×4Ng, 128×128×2Ng,
and eventually 256×256×1Ng tensors at different layers of
the network by six up-sampling blocks. The intermediate
64×64×4Ng, 128×128×2Ng, and 256×256×1Ng features
are used to generate images of corresponding scales with
3×3 convolutions. Conditioning variables c or unconditional
variables z are also directly fed into intermediate layers of the
network to ensure encoded information in c or z is not omitted.
All the discriminators Di have down-sampling blocks and 3×3
convolutions to transform the input image to a 4×4×8Nd tensor, and eventually the sigmoid function is used for outputting
probabilities. For all datasets, we set Ng = 32, Nd = 64
and use two residual blocks between every two generators.
ADAM solver with beta1 = 0.5 and a learning rate of
0.0002 is used for all models. The source code for StackGANv2 is available at for more implementation details.
EXPERIMENTS
We conduct extensive experiments to evaluate the proposed
methods. In section 6.1, several state-of-the-art methods on
text-to-image synthesis and on unconditional image synthesis
are compared with the proposed methods. We ﬁrst evaluate the
effectiveness of our StackGAN-v1 for text-to-image synthesis
by comparing it with GAWWN and GAN-INT-CLS .
And then, StackGAN-v2 is compared with StackGAN-v1 on
different datasets to show its advantages and limitations. Moreover, StackGAN-v2 as a more general framework also works
well on unconditional image synthesis tasks, and on such
1. The conditioning variable c for StackGAN-v2 is also generated by
Conditioning Augmentation
tasks, it is compared with several state-of-the-art methods ,
 , , , . In section 6.2, several baseline models
are designed to investigate the overall design and important
components of our StackGAN-v1. For the ﬁrst baseline, we
directly train Stage-I GAN for generating 64×64 and 256×256
images to investigate whether the proposed two-stage stacked
structure and the Conditioning Augmentation are beneﬁcial.
Then we modify our StackGAN-v1 to generate 128×128 and
256×256 images to investigate whether larger images by our
method can result in higher image quality. We also investigate
whether inputting text at both stages of StackGAN-v1 is
useful. In section 6.3, experiments are designed to validate
important components of our StackGAN-v2, including designs
with fewer multi-scale image distributions, the effect of jointly
approximating conditional and unconditional distributions, and
the effectiveness of the proposed color-consistency regularization.
We evaluate our conditional StackGAN for textto-image synthesis on the CUB , Oxford-102 and
COCO datasets. CUB contains 200 bird species
with 11,788 images. Since 80% of birds in this dataset have
object-image size ratios of less than 0.5 , as a preprocessing step, we crop all images to ensure that bounding
boxes of birds have greater-than-0.75 object-image size ratios.
Oxford-102 contains 8,189 images of ﬂowers from 102
different categories. To show the generalization capability
of our approach, a more challenging dataset, COCO 
is also utilized for evaluation. Different from CUB and
Oxford-102, the COCO dataset contains images with multiple
objects and various backgrounds. Each image in COCO has
5 descriptions, while 10 descriptions are provided by for
every image in CUB and Oxford-102 datasets. Following the
experimental setup in , we directly use the training and
validation sets provided by COCO, meanwhile we split CUB
and Oxford-102 into class-disjoint training and test sets. Our
Fig. 3: Example results by our StackGANs, GAWWN , and GAN-INT-CLS conditioned on text descriptions from CUB test set.
unconditional StackGAN utilizes bedroom and church subsets of LSUN , a dog-breed 2 and a cat-breed 3 sub-sets
of ImageNet to synthesize different types of images. The
statistics of datasets are presented in TABLE 1.
Evaluation metrics.
It is difﬁcult to evaluate the performance of generative models (e.g., GANs). In this paper,
we choose inception score (IS) and fr´echet inception
distance (FID) for quantitative evaluation. Inception score
(IS) is the ﬁrst well-known metric for evaluating GANs.
IS = exp (ExDKL (p (y|x) || p (y))) , where x denotes one
generated sample, and y is the label predicted by the inception
model 4. The intuition behind this metric is that good
models should generate diverse but meaningful images. Therefore, the KL divergence between the marginal distribution p(y)
and the conditional distribution p(y|x) should be large. As
suggested in , we compute the inception score on a large
number of samples (i.e., 30k samples randomly generated for
the test set) for each model5.
Fr´echet inception distance (FID) was recently proposed
2. Using the wordNet IDs provided by Vinyals et al., 
’n02121808’,
’n02124075’,
’n02123394’,
’n02122298’,
’n02123159’,’n02123478’,
’n02122725’,
’n02123597’,
’n02124484’,
’n02124157’,
’n02122878’,
’n02123917’,
’n02122510’, ’n02124313’, ’n02123045’, ’n02123242’, ’n02122430’.
4. In our experiments, for ﬁne-grained datasets, CUB and Oxford-102, we
ﬁne-tune an inception model for each of them. For other datasets, we directly
use the pre-trained inception model.
5. The mean and standard derivation inception scores of ten splits are
as a metric that considers not only the synthetic data distribution but also how it compares to the real data distribution.
It directly measures the distance between the synthetic data
distribution p(.) and the real data distribution pr(.). In practice,
images are encoded with visual features by the inception
model. Assuming the feature embeddings follow a multidimensional Gaussian distribution, the synthetic data’s Gaussian
with mean and covariance (m, C) is obtained from p(.) and
the real data’s Gaussian with mean and covariance (mr, Cr)
is obtained from pr(.). The difference between the synthetic
and real Gaussians is measured by the Fr´echet distance, i.e.,
FID = ||m−mr||2
 C + Cr −2(CCr)1/2
. Lower FID
values mean closer distances between synthetic and real data
distributions. To compute the FID score for a unconditional
model, 30k samples are randomly generated. To compute the
FID score for a text-to-image model, all sentences in the
corresponding test set are utilized to generate samples.
To better evaluate the proposed methods, especially to
see whether the generated images are well conditioned on
the given text descriptions, we also conduct user studies.
We randomly select 50 text descriptions for each class of
CUB and Oxford-102 test sets. For COCO dataset, 4k text
descriptions are randomly selected from its validation set. For
each sentence, 5 images are generated by each model. Given
the same text descriptions, 30 users (not including any of the
authors) are asked to rank the results by different methods.
The average ranks by human users are calculated to evaluate
Fig. 4: Example results by our StackGANs and GAN-INT-CLS conditioned on text descriptions from Oxford-102 test set (leftmost four
columns) and COCO validation set (rightmost four columns).
all compared methods.
In addition, we use t-SNE embedding method to
visualize a large number (e.g., 30k on the CUB test set)
of high-dimensional images in a two-dimensional map. We
observe that t-SNE is a good tool to examine the distribution
of synthesized images and identify collapsed modes.
Comparison with state-of-the-art GAN models
To demonstrate the effectiveness of the proposed method, we
compare it with state-of-the-art GAN models on text-to-image
synthesis , and unconditional image synthesis ,
 , , , .
Text-to-image synthesis. We compare our StackGAN models with several state-of-the-art text-to-image methods ,
 on CUB, Oxford-102 and COCO datasets. The inception
scores, fr´echet inception distances and average human ranks
for the proposed StackGAN models and compared methods are
reported in TABLE 2. Representative examples are compared
in Fig. 3, Fig. 4. For meaningful and fair comparisons with
previous methods, the inception scores (IS/IS*) and fr´echet
inception distances (FID/FID*) are computed in two settings.
In the ﬁrst setting, 256×256 images produced by StackGAN,
128×128 images generated by GAWWN and 64×64
images yielded by GAN-INT-CLS are used directly to
compute IS and FID. Thus, in this setting, the different
models are compared directly using their generated images,
which have different resolutions. In the second setting, before
computing IS* and FID*, all generated images are re-sized to
the same resolution of 64×64 for fair comparison.
Compared with previous GAN models , , on
the text-to-image synthesis task, our StackGAN-v1 model
achieves the best FID*, IS and average human rank on all
three datasets. As shown in TABLE 2, compared with GAN-
INT-CLS , StackGAN-v1 achieves 28.47% improvement
in terms of inception score (IS) on CUB dataset (from 2.88
to 3.70), and 20.30% improvement on Oxford-102 (from 2.66
to 3.20). When we compare images of different models at the
same resolution of 64×64, our StackGAN-v1 still achieves
higher inception scores (IS*) than GAN-INT-CLS, but produces a slightly worse inception score (IS*) than GAAWN 
because GAWWN uses additional supervision. Meanwhile, the
FID* of StackGAN-v1 is nearly one half of the FID* of GAN-
INT-CLS on each dataset. It means that the StackGAN-v1 can
better model and estimate the 64×64 image distribution. As
comparison, the FID of StackGAN-v1 is higher than that of
GAN-INT-CLS on COCO. The reason is that the FID
of GAN-INT-CLS is the distance between two 64×64 image
distributions while the FID of StackGAN-v1 is the distance
between two 256×256 image distributions. It is clear that
estimating the 64×64 image distribution is much easier than
estimating the 256×256 image distribution. It is also the reason why the FID is higher than the FID* for the same model.
Finally, the better average human rank of our StackGAN-v1
also indicates our proposed method is able to generate more
realistic samples conditioned on text descriptions. On the other
hand, representative examples are shown in Fig. 3 and Fig. 4
for visualization comparison. As shown in Fig. 3, the 64×64
samples generated by GAN-INT-CLS can only reﬂect the
general shape and color of the birds. Their results lack vivid
parts (e.g., beak and legs) and convincing details in most cases,
which make them neither realistic enough nor have sufﬁciently
high resolution. By using additional conditioning variables on
location constraints, GAWWN obtains a better inception
score on CUB dataset, which is still slightly lower than ours.
It generates higher resolution images with more details than
GAN-INT-CLS, as shown in Fig. 3. However, as mentioned
by its authors, GAWWN fails to generate any plausible images
when it is only conditioned on text descriptions . In
comparison, our StackGAN-v1 for the ﬁrst time generates
(a) StackGAN-v1 has two collapsed modes (in red rectangles). (b) StackGAN-v2 contains no collapsed nonsensical mode.
Fig. 5: Utilizing t-SNE to embed images generated by our StackGAN-v1 and StackGAN-v2 on the CUB test set.
64×64 samples by DCGAN (Reported in )
64×64 samples by WGAN (Reported in )
64×64 samples by EBGAN-PT (Reported in )
112×112 samples by LSGAN (Reported in )
128×128 samples by WGAN-GP (Reported in )
256×256 samples by our StackGAN-v1
256×256 samples by our StackGAN-v2
Fig. 6: Comparison of samples generated by models trained on LSUN bedroom dataset (Zoom in for better comparison).
images of 256×256 resolution with photo-realistic details from
only text descriptions.
Comparison between StackGAN-v1 and StackGAN-v2.
The comparison between StackGAN-v1 and StackGAN-v2 by
different quantitative metrics as well as human evaluations
are reported in TABLE 3. For unconditional generation, the
samples generated by StackGAN-v2 are consistently better
than those by StackGAN-v1 (last four columns in TABLE 3)
from a human perspective. The end-to-end training scheme
together with the color-consistency regularization enables
StackGAN-v2 to produce more feedback and regularization
for each branch so that consistency is better maintained during
the multi-step generation process. This is especially useful for
unconditional generation as no extra conditions (e.g., text) are
applied. On the text-to-image datasets, the scores are mixed
for StackGAN-v1 and StackGAN-v2. The reason is partially
due to the fact that the text information, which is a strong
constraint, is added in all the stages to keep coherence. The
comparison results of FIDs are consistent with the comparison
results of human ranks on all datasets. On the other hand,
the inception score draws different conclusions on LSUNbedroom, LSUN-church, and ImageNet-cat. We think that
the reason is because the inception model is pre-trained on
ImageNet with 1000 classes, which makes it less suitable for
256×256 samples by EBGAN-PT (Reported in )
256×256 samples by our StackGAN-v1
256×256 samples by our StackGAN-v2
Fig. 7: Comparison of samples generated by models trained on ImageNet dog dataset.
Fig. 8: 256×256 samples generated by our StackGAN-v1 (top) and StackGAN-v2 (bottom) on ImageNet cat (left) and LSUN church (right).
Fig. 9: Examples of failure cases of StackGAN-v1 (top) and StackGAN-v2 (bottom) on different datasets.
class-speciﬁc datasets. Compared with ImageNet-cat which
has 17 classes, the inception score for ImageNet-dog correlates
better with human ranks because ImageNet-dog covers more
(i.e. 118) classes from ImageNet. Hence we believe that, using
class-speciﬁc datasets, it is more reasonable to use FID to
directly compare feature distances between generated samples
with that of the real world samples .
For visual comparison of the results by the two models,
we utilize the t-SNE algorithm. For each model, a large
number of images are generated and embedded into the 2D
plane. We ﬁrst extract a 2048d CNN feature from each
generated image using a pre-trained Inception model. Then,
t-SNE algorithm is applied to embed the CNN features into a
2D plane, resulting a location for each image in the 2D plane.
Due to page limits, Fig. 5 only shows a 50×50 grid with
compressed images for each dataset, where each generated
image is mapped to its nearest grid location. By visualizing a
large number of images, the t-SNE is a good tool to examine
the synthesized distribution and evaluate its diversity. We also
follow to use the multiscale structural similarity (MS-
SSIM) as a metric to measure the variability of samples.
We observe that the MS-SSIM is useful to ﬁnd large-scale
mode collapses but often fails to detect small-scale mode collapses or fails to measure the loss of variation in the generated
samples’ color or texture. This observation is consistent with
the one found in
 . For example, in Fig 5, StackGANv1 has two small collapsed modes (nonsensical images) while
StackGAN-v2 does not have any collapsed nonsensical mode.
However, the MS-SSIM score of StackGAN-v1 (0.0945) is
better than that of StackGAN-v2 (0.1311) and even better
than that of the real data (0.1007). Thus, we argue that the
MS-SSIM is not a good metric to capture small-scale mode
collapses. On the contrary, the t-SNE visualization of the
generated samples can easily help us identify any collapsed
modes in the samples as well as evaluate sample variability in
texture, color and viewpoint.
More visual comparison of StackGAN-v1 and StackGANv2 on different datasets can be found in Fig 3, Fig 4, Fig 6,
Fig 7, Fig 8, and Fig. 9. Specially, Fig. 9 illustrates failure
cases of StackGAN-v1 and StackGAN-v2. We categorize the
failures in these cases into three groups: mild, moderate, and
severe. The “mild” group means that the generated images
have smooth and coherent appearance but lack vivid objects.
The “moderate” group means that the generated images have
obvious artifacts, which usually are signs of mode collapse.
The “severe” group indicates that the generated images fall
Text twice
Inception score
64×64 Stage-I GAN
2.66 ± .03
2.95 ± .02
256×256 Stage-I GAN
2.48 ± .00
3.02 ± .01
128×128 StackGAN-v1
3.13 ± .03
3.20 ± .03
3.35 ± .02
256×256 StackGAN-v1
3.45 ± .02
3.31 ± .03
3.70 ± .04
TABLE 4: Inception scores calculated with 30,000 samples generated
on CUB by different baseline models of our StackGAN-v1.
into collapsed modes. Based on such criterion, on the simple
dataset, Oxford-102, all failure cases of StackGAN-v1 belong
to the “mild” group, while on other datasets all three groups
of failure cases are observed. As comparison, we observe that
all failure cases of StackGAN-v2 belong to the “mild” group,
meaning StackGAN-v2-generated images have no collapsed
nonsensical mode (see Fig. 5). By jointly optimizing multiple
distributions (objectives), StackGAN-v2 shows more stable
training behavior and results in better FID and inception
scores on most datasets (see TABLE 3). However, because of
the same reason, compared with StackGAN-v1, it is harder
for StackGAN-v2 to converge on more complex datasets,
such as COCO. In contrast, StackGAN-v1 optimizes subtasks separately by training stage by stage. It produces slightly
more appealing images on COCO than StackGAN-v2 based
on human rank results, but also generates more images that
are moderate or severe failure cases. Consequently, while
StackGAN-v2 is more advanced than StackGAN-v1 in many
aspects (such as end-to-end training and more stable training
behavior), StackGAN-v1 has the advantage of stage-by-stage
training, which converges faster and requires less GPU memory.
Unconditional image synthesis. We evaluate the effectiveness of StackGAN-v2 for the unconditional image generation
task by comparing it with DCGAN , WGAN , EBGAN-
PT , LSGAN , and WGAN-GP on the LSUN
bedroom dataset. As shown in Fig. 6, our StackGAN-v2 is
able to generate 256×256 images with more photo-realistic
details. In Fig. 7, we also compare the 256×256 samples
generated by StackGAN-v2 and EBGAN-PT. As shown in the
ﬁgure, the samples generated by the two methods have the
same resolution, but StackGAN-v2 generates more realistic
ones (e.g., more recognizable dog faces with eyes and noses).
While on LSUN bedroom dataset, only qualitative results are
reported in , , , , , a DCGAN model is
trained for quantitative comparison using the public available
source code 6 on the ImageNet Dog dataset. The inception
score of DCGAN is 8.19 ± 0.11 which is much lower than the
inception achieved by our StackGAN-v2 (9.55 ± 0.11). These
experiments demonstrate that our StackGAN-v2 outperforms
the state-of-the-art methods for unconditional image generation. Example images generated by StackGAN on LSUN
church and ImageNet cat datasets are presented in Fig. 8.
6. 
The component analysis of StackGAN-v1
components
StackGAN-v1 on CUB dataset with baseline models.
The design of StackGAN-v1.
As shown in the ﬁrst
four rows of TABLE 4, if Stage-I GAN is directly used to
generate images, the inception scores decrease signiﬁcantly.
Such performance drop can be well illustrated by results in
Fig. 11. As shown in the ﬁrst row of Fig. 11, Stage-I GAN
fails to generate any plausible 256×256 samples without using
Conditioning Augmentation (CA). Although Stage-I GAN
with CA is able to generate more diverse 256×256 samples,
those samples are not as realistic as samples generated by
StackGAN-v1. It demonstrates the necessity of the proposed
stacked structure. In addition, by decreasing the output resolution from 256×256 to 128×128, the inception score decreases
from 3.70 to 3.35. Note that all images are scaled to 299
× 299 before calculating the inception score. Thus, if our
StackGAN-v1 just increases the image size without adding
more information, the inception score would remain the same
for samples of different resolutions. Therefore, the decrease
in inception score by 128×128 StackGAN-v1 demonstrates
that our 256×256 StackGAN-v1 does add more details into
the larger images. For the 256×256 StackGAN-v1, if the
text is only input to Stage-I (denoted as “no Text twice”),
the inception score decreases from 3.70 to 3.45. It indicates
that processing text descriptions again at Stage-II helps reﬁne
Stage-I results. The same conclusion can be drawn from the
results of 128×128 StackGAN-v1 models.
Fig. 10 illustrates some examples of the Stage-I and Stage-II
images generated by our StackGAN-v1. As shown in the ﬁrst
row of Fig. 10, in most cases, Stage-I GAN is able to draw
rough shapes and colors of objects given text descriptions.
However, Stage-I images are usually blurry with various
defects and missing details, especially for foreground objects.
As shown in the second row, Stage-II GAN generates 4×
higher resolution images with more convincing details to better
reﬂect corresponding text descriptions. For cases where Stage-
I GAN has generated plausible shapes and colors, Stage-II
GAN completes the details. For instance, in the 1st column
of Fig. 10, with a satisfactory Stage-I result, Stage-II GAN
focuses on drawing the short beak and white color described
in the text as well as details for the tail and legs. In all other
examples, different degrees of details are added to Stage-
II images. In many other cases, Stage-II GAN is able to
correct the defects of Stage-I results by processing the text
description again. For example, while the Stage-I image in the
5th column has a blue crown rather than the reddish brown
crown described in the text, the defect is corrected by Stage-II
GAN. In some extreme cases (e.g., the 7th column of Fig. 10),
even when Stage-I GAN fails to draw a plausible shape, Stage-
II GAN is able to generate reasonable objects. We also observe
that StackGAN-v1 has the ability to transfer background from
Stage-I images and ﬁne-tune them to be more realistic with
higher resolution at Stage-II.
Importantly, the StackGAN-v1 does not achieve good results
by simply memorizing training samples but by capturing the
complex underlying language-image relations. By feeding our
description
This bird is
blue with white
and has a very
short beak
This bird has
wings that are
brown and has
a yellow belly
This bird is
white, black,
and brown in
color, with a
brown beak
A white bird
with a black
yellow beak
This is a small,
black bird with
a white breast
and white on
the wingbars.
The bird has
small beak,
with reddish
brown crown
and gray belly
This bird is
white black and
yellow in color,
with a short
black beak
Fig. 10: Samples generated by our StackGAN-v1 from unseen texts in CUB test set. Each column lists the text description, images generated
from the text by Stage-I and Stage-II of StackGAN-v1.
A small bird with a black head and
wings and features grey wings
Stage-I GAN
without CA
Stage-I GAN
Text twice
This bird is completely red with black
wings and pointy beak
Fig. 11: Conditioning Augmentation (CA) helps stabilize the training
of conditional GAN and improves the diversity of the generated
samples. (Row 1) without CA, Stage-I GAN fails to generate
plausible 256×256 samples. Although different noise vector z is used
for each column, the generated samples collapse to be the same for
each input text description. (Row 2-3) with CA but ﬁxing the noise
vectors z, methods are still able to generate birds with different poses
and viewpoints.
Five nearest neighbors from training sets
generated from
text in test sets
Fig. 12: For generated images (column 1), retrieving their nearest
training images (columns 2-6) by utilizing Stage-II discriminator of
StackGAN-v1 to extract visual features. The L2 distances between
features are calculated for nearest-neighbor retrieval.
generated images and all training images to the Stage-II
discriminator D of our StackGAN-v1, their visual features are
extracted from the last Conv. layer of D. And then, we can
compute the similarity between two images, based on their
visual features. Finally, for each generated image, its nearest
neighbors from the training set can be retrieved. By visually
inspecting the retrieved images (see Fig. 12), we conclude that
The bird is completely red → The bird is completely yellow
This bird is completely red with black wings and pointy beak →
this small blue bird has a short pointy beak and brown on its wings
Fig. 13: (Left to right) Images generated by interpolating two sentence
embeddings. Gradual appearance changes from the ﬁrst sentence’s
meaning to that of the second sentence can be observed. The noise
vector z is ﬁxed to be zeros for each row.
the generated images have some similar characteristics with
the training samples but are essentially different.
Conditioning Augmentation.
We also investigate the
efﬁcacy of the proposed Conditioning Augmentation (CA).
By removing it from StackGAN-v1 256×256 (denoted as
“no CA” in TABLE 4), the inception score decreases from
3.70 to 3.31. Fig. 11 also shows that 256×256 Stage-I GAN
(and StackGAN-v1) with CA can generate birds with different
poses and viewpoints from the same text embedding. In
contrast, without using CA, samples generated by 256×256
Stage-I GAN collapse to nonsensical images due to the unstable training dynamics of GANs. Consequently, the proposed
Conditioning Augmentation helps stabilize the conditional
GAN training and improves the diversity of the generated
samples because of its ability to encourage robustness to small
perturbations along the latent manifold.
Sentence embedding interpolation.
To further demonstrate that our StackGAN-v1 learns a smooth latent data manifold, we use it to generate images from linearly interpolated
sentence embeddings, as shown in Fig. 13. We ﬁx the noise
vector z, so the generated image is inferred from the given
text description only. Images in the ﬁrst row are generated
by simple sentences made up by us. Those sentences contain
only simple color descriptions. The results show that the
generated images from interpolated embeddings can accurately
reﬂect color changes and generate plausible bird shapes. The
second row illustrates samples generated from more complex
sentences, which contain more details on bird appearances.
The generated images change their primary color from red to
blue, and change the wing color from black to brown.
The component analysis of StackGAN-v2
In this section, we analyze important components of the
proposed StackGAN-v2. TABLE 5 lists models with different
settings and their inception scores on the CUB test set. Fig. 14
shows example images generated by different baseline models.
Our baseline models are built by removing or changing a
certain component of the StackGAN-v2 model. By approximating the image distribution directly at the 256×256 scale
without intermediate branches, the inception scores on CUB
dramatically decrease from 4.04 to 3.49 for “StackGAN-v2-
G3” and to 2.89 for “StackGAN-v2-all256” (See TABLE 5
and Figures 14 (e-f)). This demonstrates the importance
of the multi-scale, multi-stage architecture in StackGAN-v2.
Inspired by , we also build a baseline model with multiple
discriminators at the 256×256 scale, namely “StackGANv2-3G3”. Those discriminators have the same structure but
different initializations. However, the results do not show
improvement over “StackGAN-v2-G3”. Similar comparisons
have also been done for the unconditional task on the LSUN
bedroom dataset. As shown in Figures 14(a-c), those baseline
models fail to generate realistic images because they suffer
from severe mode collapses.
To further demonstrate the effectiveness of jointly approximating
conditional
unconditional
distributions,
“StackGAN-v2-no-JCU” replaces the jointly conditional and
unconditional discriminators with the conventional ones, resulting in much lower inception score than that of “StackGANv2”.
colorconsistency regularization term. Results on various datasets
(see Fig. 15) show that the color-consistency regularization
has signiﬁcant positive effects for the unconditional image
synthesis task. Quantitatively, removing the color-consistency
regularization decreases the inception score from 9.55 ± 0.11
to 9.02 ± 0.14 on the ImageNet dog dataset. It demonstrates
that the additional constraint provided by the color-consistency
regularization is able to facilitate multi-distribution approximation and help generators at different branches produce more
coherent samples. It is worth mentioning that there is no need
to utilize the color-consistency regularization for the text-toimage synthesis task because the text conditioning appears
to provide sufﬁcient constraints. Experimentally, adding the
color-consistency regularization did not improve the inception
score on CUB dataset.
CONCLUSIONS
In this paper, Stacked Generative Adversarial Networks,
StackGAN-v1 and StackGAN-v2, are proposed to decompose
the difﬁcult problem of generating realistic high-resolution
images into more manageable sub-problems. The StackGANv1 with Conditioning Augmentation is ﬁrst proposed for textto-image synthesis through a novel sketch-reﬁnement process.
It succeeds in generating images of 256×256 resolution
with photo-realistic details from text descriptions. To further
improve the quality of generated samples and stabilize GANs’
training, the StackGAN-v2 jointly approximates multiple related distributions, including (1) multi-scale image distributions and (2) jointly conditional and unconditional image
distributions. In addition, a color-consistency regularization is
proposed to facilitate multi-distribution approximation. Extensive quantitative and qualitative results demonstrate that our
proposed methods signiﬁcantly improve the state of the art in
both conditional and unconditional image generation tasks.