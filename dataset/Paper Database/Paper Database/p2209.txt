Sequential Deep Learning
for Human Action Recognition
Moez Baccouche1,2, Franck Mamalet1,
Christian Wolf2, Christophe Garcia2, and Atilla Baskurt2
1 Orange Labs, 4 rue du Clos Courtel, 35510 Cesson-S´evign´e, France
 
2 LIRIS, UMR 5205 CNRS, INSA-Lyon, F-69621, France
 
Abstract. We propose in this paper a fully automated deep model,
which learns to classify human actions without using any prior knowledge. The ﬁrst step of our scheme, based on the extension of Convolutional Neural Networks to 3D, automatically learns spatio-temporal
features. A Recurrent Neural Network is then trained to classify each
sequence considering the temporal evolution of the learned features for
each timestep. Experimental results on the KTH dataset show that the
proposed approach outperforms existing deep models, and gives comparable results with the best related works.
Keywords: Human action recognition, deep models, 3D convolutional
neural networks, long short-term memory, KTH human actions dataset.
Introduction and Related Work
Automatic understanding of human behaviour and its interaction with his environment have been an active research area in the last years due to its potential
application in a variety of domains. To achieve such a challenging task, several research ﬁelds focus on modeling human behaviour under its multiple facets
(emotions, relational attitudes, actions, etc.). In this context, recognizing the
behaviour of a person appears to be crucial when interpreting complex actions.
Thus, a great interest has been granted to human action recognition, especially
in real-world environments.
Among the most popular state-of-the-art methods for human action recognition, we can mention those proposed by Laptev et al. , Dollar et al. and
others , which all use engineered motion and texture descriptors calculated around spatio-temporal interest points, which are manually engineered.
The Harris-3D detector and the Cuboid detector are likely the most used
space-time salient points detectors in the literature. Nevertheless, even if their
extraction process is fully automated, these so-called hand-crafted features are
especially designed to be optimal for a speciﬁc task. Thus, despite their high
performances, these approaches main drawback is that they are highly problem
dependent.
A.A. Salah and B. Lepri (Eds.): HBU 2011, LNCS 7065, pp. 29–39, 2011.
⃝Springer-Verlag Berlin Heidelberg 2011
M. Baccouche et al.
In last years, there has been a growing interest in approaches, so-called deep
models, that can learn multiple layers of feature hierarchies and automatically
build high-level representations of the raw input. They are thereby more generic
since the feature construction process is fully automated. One of the most used
deep models is the Convolutional Neural Network architecture , hereafter
ConvNets, which is a bioinspired hierarchical multilayered neural network able to
learn visual patterns directly from the image pixels without any pre-processing
step. If ConvNets were shown to yield very competitive performances in many
image processing tasks, their extension to the video case is still an open issue,
and, so far, the few attempts either make no use of the motion information ,
or operate on hand-crafted inputs (spatio-temporal outer boundaries volume in
 or hand-wired combination of multiple input channels in ). In addition,
since these models take as input a small number of consecutive frames (typically
less than 15), they are trained to assign a vector of features (and a label) to
short sub-sequences and not to the entire sequence. Thus, even if the learned
features, taken individually, contains temporal information, their evolution over
time is completely ignored. Though, we have shown in our previous work that
such information does help discriminating between actions, and is particularly
usable by a category of learning machines, adapted to sequential data, namely
Long Short-Term Memory recurrent neural networks (LSTM) .
In this paper, we propose a two-steps neural-based deep model for human
action recognition. The ﬁrst part of the model, based on the extension of Conv-
Nets to 3D case, automatically learns spatio-temporal features. Then, the second
step consists in using these learned features to train a recurrent neural network
model in order to classify the entire sequence. We evaluate the performances on
the KTH dataset , taking particular care to follow the evaluation protocol
recommendations discussed in . We show that, without using the LSTM classiﬁer, we obtain comparable results with other deep models based approaches
 . We also demonstrate that the introduction of the LSTM classiﬁcation leads to signiﬁcant performance improvement, reaching average accuracies
among the best related results.
The rest of the paper is organized as follows. Section 2 outlines some Conv-
Nets fundamentals and the feature learning process. We present in Section 3
the recurrent neural scheme for entire sequence labelling. Finally, experimental
results, carried out on the KTH dataset, will be presented in Section 4.
Deep Learning of Spatio-Temporal Features
In this section, we describe the ﬁrst part of our neural recognition scheme. We
ﬁrst present some fundamentals of 2D-ConvNets, and then discuss their extension in 3D and describe the proposed architecture.
Convolutional Neural Networks (ConvNets)
Despite their generic nature, deep models were not used in many applications
until the late nineties because of their inability to treat “real world” data.
Sequential Deep Learning for Human Action Recognition
Indeed, early deep architectures dealt only with 1-D data or small 2D-patches.
The main problem was that the input was “fully connected” to the model, and
thus the number of free parameters was directly related to the input dimension,
making these approaches inappropriate to handle “pictoral” inputs (natural images, videos. . . ).
Therefore, the convolutional architecture was introduced by LeCun et al.
 to alleviate this problem. ConvNets are the adaptation of multilayered
neural deep architectures to deal with real world data. This is done by the use of
local receptive ﬁelds whose parameters are forced to be identical for all its possible locations, a principle called weight sharing. Schematically, LeCun’s ConvNet
architecture is a succession of layers alternating 2D-convolutions (to capture salient information) and sub-samplings (to reduce dimension), both with
trainable weights. Jarret et al. have recommended the use of rectiﬁcation layers (which simply apply absolute value to its input) after each convolution, which
was shown to signiﬁcantly improve performances, when input data is normalized.
In the next sub-section, we examine the adaptation of ConvNets to video
processing, and describe the 3D-ConvNets architecture that we used in our experiments on the KTH dataset.
Automated Space-Time Feature Construction with
3D-ConvNets
The extension from 2D to 3D in terms of architecture is straightforward since
2D convolutions are simply replaced by 3D ones, to handle video inputs. Our
proposed architecture, illustrated in Figure 1, also uses 3D convolutions, but is
diﬀerent from and in the fact that it uses only raw inputs.
Fig. 1. Our 3D-ConvNet architecture for spatio-temporal features construction
M. Baccouche et al.
This architecture consists of 10 layers including the input. There are two
alternating convolutional, rectiﬁcation and sub-sampling layers C1, R1, S1 and
C2, R2, S2 followed by a third convolution layer C3 and two neuron layers
N1 and N2. The size of the 3D input layer is 34 × 54 × 9, corresponding to
9 successive frames of 34 × 54 pixels each. Layer C1 is composed of 7 feature
maps of size 28 × 48 × 5 pixels. Each unit in each feature map is connected to
a 3D 7 × 7 × 5 neighborhood into the input retina. Layer R1 is composed of
7 feature maps, each connected to one feature map in C1, and simply applies
absolute value to its input. Layer S1 is composed of 7 feature maps of size
14 ×24 ×5, each connected to one feature map in R1. S1 performs sub-sampling
at a factor of 2 in spatial domain, aiming to build robustness to small spatial
distortions. The connection scheme between layers S1 and C2 follows the same
principle described in , so that, C2 layer has 35 feature maps performing
5 × 5 × 3 convolutions. Layers R2 and S2 follow the same principle described
above for R1 and S1. Finally, layer C3 consists of 5 feature maps fully-connected
to S2 and performing 3 × 3 × 3 convolutions. At this stage, each C3 feature
map contains 3 × 8 × 1 values, and thus, the input information is encoded in a
vector of size 120. This vector can be interpreted as a descriptor of the salient
spatio-temporal information extracted from the input. Finally, layers N1 and N2
contain a classical multilayer perceptron with one neuron per action in the output
layer. This architecture corresponds to a total of 17, 169 trainable parameters
(which is about 15 times less than the architecture used in ). To train this
model, we used the algorithm proposed in , which is the standard online
Backpropagation with momentum algorithm, adapted to weight sharing.
Fig. 2. A subset of 3 automatically constructed C1 feature maps (of 7 total), each
one corresponding, from left to right, to the actions walking, boxing, hand-claping and
hand-waving from the KTH dataset
Once the 3D-ConvNet is trained on KTH actions, and since the spatiotemporal feature construction process is fully automated, it’s interesting to examine if the learned features are visually interpretable. We report in Figure 2
a subset of learned C1 feature maps, corresponding each to some actions from
the KTH dataset. Even if ﬁnding a direct link with engineered features is not
straightforward (and not necessarily required) the learned feature maps seem to
capture visually relevant information (person/background segmentation, limbs
involved during the action, edge information. . . ).
Sequential Deep Learning for Human Action Recognition
Fig. 3. An overview of our two-steps neural recognition scheme
In the next section, we describe how these features are used to feed a recurrent
neural network classiﬁer, which is trained to recognize the actions based on the
temporal evolution of features.
Sequence Labelling Considering the Temporal
Evolution of Learned Features
Once the features are automatically constructed with the 3D-ConvNet architecture as described in Section 2, we propose to learn to label the entire sequence
based on the accumulation of several individual decisions corresponding each to
a small temporal neighbourhood which was involved during the 3D-ConvNets
learning process (see Figure 3). This allows to take advantage of the temporal
evolution of the features, in comparison with the majority voting process on the
individual decisions.
Among state of the art learning machines, Recurrent Neural Networks (RNN)
are one of the most used for temporal analysis of data, because of their ability to
take into account the context using recurrent connections in the hidden layers.
It has been demonstrated in that if RNN are able to learn tasks which involve
short time lags between inputs and corresponding teacher signals, this short-term
memory becomes insuﬃcient when dealing with “real world” sequence processing, e.g video sequences. In order to alleviate this problem, Schmidhuber et al. 
have proposed a speciﬁc recurrent architecture, namely Long Short-Term Memory (LSTM). These networks use a special node called Constant Error Carousel
(CEC), that allows for constant error signal propagation through time. The second key idea in LSTM is the use of multiplicative gates to control the access to
the CEC. We have shown in our previous work that LSTM are eﬃcient to
label sequences of descriptors corresponding to hand-crafted features.
In order to classify the action sequences, we propose to use a Recurrent Neural
Network architecture with one hidden layer of LSTM cells. The input layer of
this RNN consists in 120 C3 output values per time step. LSTM cells are fully
connected to these inputs and have also recurrent connexions with all the LSTM
cells. Output layer consists in neurons connected to LSTM outputs at each time
step. We have tested several network conﬁguration, varying the number of hidden
LSTM. A conﬁguration of 50 LSTM was found to be a good compromise for
M. Baccouche et al.
Fig. 4. A sample of actions/scenarios from the KTH dataset 
this classiﬁcation task. This architecture corresponds to about 25, 000 trainable
parameters. The network was trained with online backpropagation through time
with momentum .
Experiments on KTH Dataset
The KTH dataset was provided by Schuldt et al. in 2004 and is the most
commonly used public human actions dataset. It contains 6 types of actions
(walking, jogging, running,boxing, hand-waving and hand-clapping) performed
by 25 subjects in 4 diﬀerent scenarios including indoor, outdoor, changes in
clothing and variations in scale (see Figure 4). The image size is of 160 × 120
pixels, and temporal resolution is of 25 frames per second. There are considerable
variations in duration and viewpoint. All sequences were taken over homogeneous
backgrounds, but hard shadows are present.
As in , we rename the KTH dataset in two ways: the ﬁrst one (the original
one) where each person performs the same action 3 or 4 times in the same video,
is named KTH1 and contains 599 long sequences (with a length between 8 and
59 seconds) with several “empty” frames between action iterations. The second,
named KTH2, is obtained by splitting videos in smaller ones where a person does
an action only one time, and contains 2391 sequences (with a length between 1
and 14 seconds).
Evaluation Protocol
In , Gao et al. presented a comprehensive study on the inﬂuence of the
evaluation protocol on the ﬁnal results. It was shown that the use of diﬀerent experimental conﬁgurations can lead to performance diﬀerences up to 9%.
Sequential Deep Learning for Human Action Recognition
Furthermore, authors demonstrated that the same method, when evaluated on
KTH1 or KTH2 can have over 5.85% performance deviations. Action recognition methods are usually directly compared although they use diﬀerent testing
protocols or/and datasets (KTH1 or KTH2), which distorts the conclusions. In
this paper, we choose to evaluate our method using cross-validation, in which
16 randomly-selected persons are used for training, and the other 9 for testing.
Recognition performance corresponds to the average across 5 trials. Evaluations
are performed on both KTH1 and KTH2.
Experimental Results
The two-steps model was trained as described above. Original videos underwent the following steps: spatial down-sampling by a factor of 2 horizontally
and vertically to reduce the memory requirement, extracting the person-centred
bounding box as in , and applying 3D Local Contrast Normalization on
a 7 × 7 × 7 neighbourhood, as recommended in . Note that we do not use
any complex pre-processing (optical ﬂow, gradients, motion history. . . ). We also
generated vertically ﬂipped and mirrored versions of each training sample to
increase the number of examples. In our experiments, we observed that, both
for 3D-ConvNets and LSTM, no overtraining is observed without any validation sequence and stopping when performances on training set no longer rise.
Obtained results, corresponding to 5 randomly selected training/test conﬁgurations are reported on Table 1.
Table 1. Summary of experimental results using 5 randomly selected conﬁgurations
from KTH1 and KTH2
Conﬁg.1 Conﬁg.2 Conﬁg.3 Conﬁg.4 Conﬁg.5 Average
KTH1 3D-ConvNet + Voting
3D-ConvNet + LSTM
3D-ConvNet + Voting
KTH2 3D-ConvNet + LSTM
Harris-3D + LSTM
The 3D-ConvNet, combined to majority voting on short sub-sequences, gives
comparable results (91.04%) to other deep model based approaches . We
especially note that results with this simple non-sequential approach are almost
the same than those obtained in , with a 15 times smaller 3D-ConvNet model,
and without using neither gradients nor optical ﬂow as input. We also notice that
the ﬁrst step of our model gives relatively stable results on the 5 conﬁgurations,
compared to the ﬂuctuations generally observed for the other methods . The
LSTM contribution is quite important, increasing performances of about 3%.
KTH1 improvement (+3, 35%) is higher than KTH2, which conﬁrms that LSTM
are more suited for long sequences.
M. Baccouche et al.
In order to point out the beneﬁt of using automatically learned features, we
also evaluated the combination of the LSTM classiﬁer with common engineered
space-time salient points. This was done by applying the Harris-3D detector
to each video sequence, and calculating the HOF descriptor (as recommended in
 for KTH) around each detected point. We used the original implementation
available on-line1 and standard parameter settings. A LSTM classiﬁer was then
trained taking as input a temporally-ordered succession of descriptors. Obtained
results, reported on Table 1, show that our learned 3D-ConvNet features, in
addition to their generic nature, perform better on KTH2 than hand-crafted
ones, with performances improvement of 4.39%.
To conclude, our two-steps sequence labelling scheme achieves an overall accuracy of 94.39% on KTH1 and 92.17% on KTH2. These results, and others
among the best performing of related work on KTH dataset, are reported on
Table 2. Obtained results and comparison with state-of-the-art on KTH dataset: methods reported in bold corresponds to deep models approaches, and the others to those
using hand-crafted features
Dataset Evaluation Protocol
Our method
Cross validation
Jhuang et al. 
with 5 runs
Gao et al. 
Schindler and Gool 
Gao et al. 
Chen and Hauptmann 
Leave-one-out
Liu and Shah 
Sun et al. 
Niebles et al. 
Our method
validation
Ji et al. 
with 5 runs
Gao et al. 
Taylor et al. 
Kim et al. 
Other protocols
Ikizler et al. 
Laptev et al. 
Dollar et al. 
Table 2 shows that our approach outperforms all related deep model works
 , both on KTH1 and KTH2. One can notice that our recognition scheme
outperforms the HMAX model, proposed by Jhaung et al. although it is of
hybrid nature, since low and mid level features are engineered and learned ones
are constructed automatically at the very last stage.
1 Available at 
Sequential Deep Learning for Human Action Recognition
For each dataset, Table 2 is divided into two groups: the ﬁrst group consists of
the methods which can be directly compared with ours, i.e those using the same
evaluation protocol (which is cross validation with 5 randomly selected splits of
the dataset into training and test). The second one includes the methods that
use diﬀerent protocols, and therefore those for whom the comparison is only
indicative. Among the methods of the ﬁrst group, to our knowledge, our method
obtained the second best accuracy, both on KTH1 and KTH2, the best score
being obtained by Gao et al. . Note that the results in corresponds to
the average on the 5 best runs over 30 total, and that these classiﬁcation rates
decreases to 90.93% for KTH1 and 88.49% for KTH2 if averaging on the 5 worst
More generally, our method gives comparable results with the best related
work on KTH dataset, even with methods relying on engineered features, and
those evaluated using protocols which was shown to outstandingly increase performances (e.g leave-one-out). This is a very promising result considering the
fact that all the steps of our scheme are based on automatic learning, without
the use of any prior knowledge.
Conclusion and Discussion
In this paper, we have presented a neural-based deep model to classify sequences
of human actions, without a priori modeling, but only relying on automatic learning from training examples. Our two-steps scheme automatically learns spatiotemporal features and uses them to classify the entire sequences. Despite its
fully automated nature, experimental results on the KTH dataset show that the
proposed model gives competitive results, among the best of related work, both
on KTH1 (94.39%) and KTH2 (92.17%).
As future work, we will investigate the possibility of using a single-step model,
in which the 3D-ConvNet architecture described in this paper is directly connected to the LSTM sequence classiﬁer. This could considerably reduce computation time, since the complete model is trained once. The main diﬃculty
will be the adaptation of the training algorithm, especially when calculating the
retro-propagated error.
Furthermore, even if KTH remains the most widely used dataset for human
action recognition, recent works are increasingly interested by other more challenging datasets, which contains complex actions and realistic scenarios. Therefore, we plan to verify the genericity of our approach by testing it on recent
challenging datasets, e.g Hollywood-2 dataset , UCF sports action dataset
 , YouTube action dataset , UT-Interaction dataset or LIRIS human
activities dataset2. This will allow us to conﬁrm the beneﬁt of the learningbased feature extraction process, since we expect to obtain stable performances
on these datasets despite their high diversity, which is not the case of the approaches based on hand-crafted features.
2 Available at 
M. Baccouche et al.