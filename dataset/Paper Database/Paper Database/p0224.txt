Robust Online Time Series Prediction with
Recurrent Neural Networks
Tian Guo∗, Zhao Xu†, Xin Yao‡, Haifeng Chen §, Karl Aberer∗and Koichi Funaya†
∗EPFL, Lausanne, Switzerland
{tian.guo, karl.aberer }@epﬂ.ch
†NEC Laboratories Europe, Heidelberg, Germany
{zhao.xu, koichi.funaya}@neclab.eu
‡The University of Birmingham, Birmingham, United Kingdom
 
§NEC Laboratories America, Princeton, USA
 
Abstract—Time series forecasting for streaming data plays an
important role in many real applications, ranging from IoT
systems, cyber-networks, to industrial systems and healthcare.
However the real data is often complicated with anomalies and
change points, which can lead the learned models deviating from
the underlying patterns of the time series, especially in the context
of online learning mode. In this paper we present an adaptive
gradient learning method for recurrent neural networks (RNN)
to forecast streaming time series in the presence of anomalies
and change points. We explore the local features of time series
to automatically weight the gradients of the loss of the newly
available observations with distributional properties of the data
in real time. We perform extensive experimental analysis on both
synthetic and real datasets to evaluate the performance of the
proposed method.
I. INTRODUCTION
Time series forecasting , , is an important task
in machine learning with a variety of applications, such as
cyber-network trafﬁc prediction, web user access estimation,
and pedestrian ﬂow prediction. Forecasting a time series is
useful in e.g. reliability monitoring, predictive maintenance
and intrusion detection, and can effectively improve availability, security, and the overall service experience. On the other
hand, with the rapid growth of various tracking and monitoring
technologies, time series data in many real-world systems
arrives in a streaming fashion. Online learning methods are
expected to extract the underlying patterns from the observed
time series for real-time learning and prediction.
Due to its practical importance and technical challenges,
some online forecasting methods have been investigated in
the literature, including linear methods , , ensemble
methods , kernel based methods , and Gaussian processes . Recurrent neural networks (RNNs), a class of deep
learning methods particularly designed to model sequential
data, currently receive increasing attention due to the capacity
on learning insightful representations of sequences , ,
 , and have been successfully applied to time series forecasting , , . However in real-world applications, the
time series is usually contaminated by anomalies or outliers
that are abrupt observations deviating from the behaviour of
the majority. A typical example might be cyber-attacks, which
are often shown as anomalies in time series monitoring some
measurements of network trafﬁc. In addition, the underlying
patterns of time series generally keep changing over time. For
example, a newly released online service or functionality of a
website can change the probabilistic distribution of time series
of user access trafﬁc in terms of mean, variance, correlation
and period. With these challenges, the learning methods are
expected to capture the true pattern and trend of time series,
namely being robust against outliers, and enabling to quickly
ﬁt new patterns with potential change points.
In this paper, we present an adaptive gradient learning
method for long short-term memory (LSTM) recurrent networks , , , to make the streaming time series
forecasting robust to outliers and change points. We model
time series with LSTM networks, and use a stochastic gradient
descent (SGD) based method to learn the model from the
streaming time series. As novel observations arrive, the model
parameters are updated in an online mode according to the
gradients of the loss of the newly available data. With the
standard SGD method, outlier observations will make the
updated model deviate from the normal patterns and produce
oscillated incorrect predictions until the adverse effect is
gradually corrected by the following normal observations. To
solve the problem, we explore the local features of time series
to weight the gradients of the learning method with distributional properties of the local data. In particular, if a newly
available observation is a potential outlier behaving differently
from the regular patterns, the corresponding gradient will be
downweighted, so as to avoid leading the online model to
abruptly drift from the underlying normal patterns. Notice
that the newly observed unusual point can also be a change
point. Although it behaves differently from the majority like an
anomaly, it indicates emerging patterns of time series required
to learn quickly. In this case, the corresponding gradient will
be retained by a high weight and lead the model to ﬁt the
new data in real time. Technically we introduce a weight
function based on distributional characteristics of the local data
to adapt the gradients of the online SGD to the complicated
2016 IEEE International Conference on Data Science and Advanced Analytics
978-1-5090-5206-6/16 $31.00 © 2016 IEEE
DOI 10.1109/DSAA.2016.92
streaming time series automatically. The weight function is
composed of two components: suspicion ratio and difference
value drift formulating the statistical properties of the local
data, which make the learning procedure robust to outliers
and change points. The experimental analysis on synthetic and
real datasets demonstrates the performance of the proposed
learning method for streaming time series forecasting in the
presence of anomalies and change points.
The rest of the paper is organized as follows. Section II
presents related work, while Section III deﬁnes the problem
to be solved and introduces the notations. In Section IV, we
present the proposed robust online learning method for RNN.
Section V demonstrates the performance of our method on
synthetic and real datasets. Finally, the paper is concluded in
Section VI.
II. RELATED WORK
A. Modeling Time Series in the Presence of Outliers and
Change Points
Many of the existing machine learning models for time
series analysis focus exclusively on either change point or
outlier detection. Our paper aims to provide a recurrent neural
network based approach to handle both change points and
outliers simultaneously for online learning of time series.
 introduced the Bayesian change point detection framework and extended it by using the Gaussian process as the
underlying predictive model. In a Gaussian process based
nonparametric time series prediction model was proposed
speciﬁcally for periodic time series. detected changes
by utilizing relatively density ratio estimation in a batch
mode, i.e., they require the entire time series to be present.
 employed an online discounting learning algorithm to
incrementally learn mixture and regression models. , 
put forward scalable anomaly/outlier detection frameworks
integrating various predictive models. and provided
detailed surveys on change and outlier detection.
Another line of research is to build robust models over noisy
and non-stationary time series. proposed a new sequential
algorithm for making robust predictions based on Gaussian
Process in the presence of change points. extended traditional autoregressive moving average (ARMA) models to the
case that less strict assumptions are on the noise term for the
purpose of online time-series modeling. developed timedependent loss function to include the information about the
distribution change in time series directly in the SVM learning
B. Recurrent Neural Networks for Time Series Analysis
Recurrent neural networks have recently shown promising
results in a variety of applications, especially when there exist
sequential dependencies in data , , . proposed
a robust learning algorithm for recurrent neural networks on
time series. This algorithm is based on ﬁltering outliers from
the data ﬁrst and then training the neural network on the
ﬁltered data. Such a ﬁltering-then-learning scheme focuses on
dealing with outliers and is not suitable for online training and
prediction.
Long short-term memory (LSTM) , , , a class of
recurrent neural networks with sophisticated recurrent hidden
and gated units, are particularly successful and popular due to
its ability to learn hidden long-term sequential dependencies
and to allow online training of sequence data of indeﬁnite
duration. Some recent work , , explored the performance of LSTM in time series modeling. used LSTMs
to recognize patterns in multivariate time series, especially
multi-label classiﬁcation of diagnoses. , evaluated the
ability of LSTMs to detect anomalies in ECG time series. In
this paper we present an LSTM online learning method for
time series forecasting in presence of both outliers and change
III. PROBLEM FORMULATION
In this section, we discuss the properties and challenges
of time series containing outliers and change points, and
formulate the problem to be resolved.
Time series, a sequence of data points consisting of successive measurements made over time, often arises when
monitoring dynamic processes in a variety of applications, e.g.,
Internet of Things, sensor networks, and mobile computing.
We denote a univariate time series by {x1, . . . , xT }, where
the subscript represents the time instant and each data point
xt is a real value. In this paper, we focus on univariate time
series. The proposed method can be naturally generalized to
multivariate time series as well.
Since many time series are generated from observations
and measurements of physical entities and events, the data
is inevitably anomaly-contaminated and non-stationary in the
sense that it contains both outliers and change points. An
outlier in time series is a data point, which is signiﬁcantly
different from the behaviour of the majority of the timeseries. A change point indicates that the behaviour and hidden
data distribution of the time-series are signiﬁcantly different
before and after this point. For instance, a time series might
undergo a sudden shift in its mean at a certain time. The major
difference between change points and outliers is that change
points correspond to more sustained, long-term changes in
time series compared to volatile and abrupt outliers. The
presence of outliers and change points can adversely affect
the time series analysis and complicate the learning process
 , , , .
In many cases, time series are continuously observed, and
often need to be analyzed in real time. The online learning
methods are thus required, which learn and update models
incrementally as new data arrives, in order to better capture
the timely trend and the underlying patterns in the time series
 , , .
In this paper we focus on online time series prediction in
the presence of both change points and outliers. The work
aims to incrementally learn the time series and provide robust
predictions in real time. Given the observed time series of
length t −1, the predicted new data point ˆxt at the next time
t can be computed as:
ˆxt = g(xt−1, xt−2, . . . , x1; θ∗
g(·) is a continuous function which captures the dynamic
patterns of the time series. In this paper g(·) is modeled
according to the recurrent neural network that can approximate
any function with sufﬁcient hidden layers and nonlinear units
to arbitrary precision. θ∗
t−1 denotes the parameters of the recurrent network learned with the t−1 sequential observations.
As the new data point xt arrives, we update the model by
minimizing the loss function, e.g., the squared error:
t = arg max
(xt −g(xt−1, xt−2, . . . , x1; θt))2
Recursivly, the new parameters θ∗
t will be used to predict the
next data ˆxt+1. The online learning process is to continuously
minimize the loss function over the newly available data.
We notice that, in the learning process, an outlier at time t
can lead the model to deviate from the normal patterns. Given
the current model θ∗
t−1, the loss of the outlier will be high. For
reducing the loss (2), θ∗
t will deviate from the normal ones to
best ﬁt the outlier, and produces oscillated predictions untile
the adverse effect of the outlier is gradually corrected by the
following observations , , . On the other hand,
since a change point often leads to a shift in data distribution
and makes the current model unﬁt to the new data, high loss
is also expected , . In this case, the high loss will take
positive effect and lead the model to quickly ﬁt to the new
To meet these challenges, the online learning method is
supposed to react to outliers and change points differently. On
the ﬁrst hand, the online learning model should be robust to
outliers by mitigating the model deviation caused by outliers.
On the other hand, it should be able to promptly adapt to the
new changed data by updating the model using the latest data,
so as to provide timely and precise predictions.
TABLE I: Notations
the data point at time t of the time series
the predicted value of xt by the neural network
p-value of xt
signiﬁcance level
the size of the sliding window for feature extraction
the output of a LSTM layer at time t
the output gate of a LSTM layer at time t
the memory unit of a LSTM layer at time t
the forget gate of a LSTM neuron j at time t
the input gate of a LSTM neuron j at time t
the set of parameters of all layers in the
neural network at time t
gradient weight for updating the model at time t
difference value drift
suspicious ratio
IV. WEIGHTED GRADIENT ONLINE LEARNING FOR LSTM
NEURAL NETWORKS
In this section, we present the proposed online learning
method for Long Short Term Memory (LSTM) neural networks, a widely used variant of Recurrent Neural Networks
(RNN). The method is capable of performing robust predictions over time series in the presence of both outliers and
change points.
A. Online learning of time series
In the online process at each time instant, e.g. t, a desirable model should be able to automatically retain useful
past information in {x1, . . . , xt−1}, discover dependences for
making prediction ˆxt and then update itself using xt. Recurrent
neural networks (RNNs) are rising as a powerful tool to model
sequence data , . They are suitable for dealing with
sequential problems due to the internal hidden states and short
term memory realized by recurrent feedback connections.
Among the variants of RNNs, it is well established that
the Long Short-Term Memory (LSTM) based networks work
well on sequence-based tasks with long-term dependencies
 , by using specialized gates and memory cells in the
neuron structure. The LSTM achieves state-of-the-art results
for problems spanning natural language processing, image
captioning, handwriting recognition, and genomic analysis
 , , , .
We present the formal deﬁnition of a neuron of a LSTM
layer as follows , . Each j-th neuron in the LSTM
layer maintains a memory cj
t at time t. The output hj
activation of this neuron is then expressed as:
t is an output gate that modulates the amount of
memory content exposure. The output gate is calculated by
t = σ(Woxt + Uoht−1 + Voct)j
where σ is a logistic sigmoid function. ht−1 and ct are respectively the vectorization of hj
t−1 and cj
t, i.e. ht−1 = {hj
t}. Vo is a diagonal matrix. Then, the memory cell cj
is updated through partially forgetting the existing memory
and adding a new memory content ˜cj
where the new memory content at time t is expressed as:
t = tanh(Wcxt + Ucht−1)j
The extent to which the existing memory (i.e., at time t −1)
is forgotten is modulated by a forget gate f j
t , and the degree
to which the new memory content (i.e., at time t) is added to
the memory cell is modulated by an input gate ij
t. Then, such
gates are computed by
t = σ(Wfxt + Ufht−1 + Vfct−1)j
t = σ(Wixt + Uiht−1 + Vict−1)j
Note that Vf and Vi are diagonal matrices.
Unlike the traditional recurrent neuron which overwrites its
content at each time instant , , a LSTM neuron is
able to decide whether to keep the existing memory via the
introduced gates. Intuitively, if it detects an important feature
from an input sequence at early stage, it easily carries this
information (the existence of the feature) over a long period,
thereby capturing the hidden long-term dependencies ,
In our model for online learning of time series, a dense layer
is built to connect the LSTM layer so as to map the outputs
of LSTM neurons to the target prediction. Denote by Wd and
bd the weights and biases of the dense layer. The output of
the neural network is formulated as:
y = g(Wdht + bd)
where g(·) is the activation function of the dense layer,
e.g., tanh, sigmoid, linear, etc. ht
is the vector of
the outputs of LSTM neurons, i.e., ht
t}. Online learning of a neural network is to continuously update the set of parameters in each layer, i.e., Wt
⟨Wo, Uo, Vo, Wc, Uc, Wf, Uf, Wi, Ui, Wd, bd⟩at each time instant to minimize a loss function. Then, the prediction at time
t of the time series by the LSTM neural network can be
expressed as:
ˆxt = g(xt−1, . . . , x1; Wt−1)
LSTM neural network employs gradient decent based iterative
approaches to update the network parameters at each time
instant , , . The general update process can be
expressed as:
Wt = Wt−1 −η ▽Et(Wt−1)
where Wt and Wt−1 represent the set of parameters W at
different time instants. η is the learning rate, Et(Wt−1) is the
loss function, i.e. squared-error function, and ▽Et(Wt−1) is
the gradient of the loss function at Wt−1. There are many
variants of gradient descent based methods for updating the
network , , ,
Since online learning aims to continuously update the model
using new arrived data, the loss function is speciﬁed as the
squared-error of one training instance without accumulating
the errors , :
Et(Wt−1) = e2
t = (xt −ˆxt)2
Our proposed framework below could be extended to situations where data comes on mini-batches of data points as
Then, the gradient is derived as:
▽Et(Wt−1) = −2(xt −ˆxt) ▽g(xt−1, . . . , x1; Wt−1) (13)
where the detailed derivation of ▽g(xt−1, . . . , x1; Wt−1) is
referred to , . Such a gradient descent scheme to
incrementally update parameters enables the LSTM neural
network to naturally evolve with time series in the error-driven
way and to adapt to changing time series without explicit
detection of change points .
B. Effect of Outliers and Change Points on LSTM neural
In this part, we ﬁrst deﬁne two basic concepts. Based on
statistical time series modeling theory , , , , the
set of errors {et} can be ﬁtted to a parametric distribution,
referred to as the error reference distribution and maintained
online by moving average style methods , , . During
our experiments, we observe that it is reasonable to ﬁt the errors to a Gaussian distribution, though alternative distributions
can be chosen based on applications. The associated mean and
variance are respectively denoted by μt and vt.
Deﬁnition 4.1 (p-value): The p-value of data point xt,
denoted by pt, is deﬁned as the probability of obtaining a
value less or equal to et under the error reference distribution
N(μt, vt), where et = xt −ˆxt. Formally, pt = Φ( et−μt
where Φ(·) is the cumulative distribution function of the
standard normal distribution.
For the predictive model based time series analysis , ,
 , , p-value is a fundamental indicator for outliers or
changes. Then, we further deﬁne:
Deﬁnition 4.2 (Suspicious and Normal Points): In the online
learning process of LSTM neural network over time series,
if the p-value of a data point, e.g., xt, is lower than α or
higher than 1 −α ( α ∈(0, 1) ), xt is a suspicious data
point indicating that it could be an outlier or a change point.
Otherwise, we call xt as a normal point. α is the conﬁdence
Straightforward solutions help little:
Given the neural network learnt over time series, outliers
could lead to dramatical large prediction errors. Consequently
using such outliers to update the neural network could drag
away the gradient from the previous direction and derail the
so-far trained neural network, thereby incurring unreliable
prediction .
For instance, we use an example experiment to illustrate the
effect of outliers on the LSTM neural network. We perform
the conventional online learning of LSTM neural network
 on a real time series from Yahoo S5 dataset1. We adopt
the interleaved test-then-train framework , which means
that at each time instant a prediction for the next data point
is performed using the current neural network and then the
network is updated when the next data point arrives. The
experiment is run at the learning rate (0.005), which achieves
the least prediction error (i.e., RMSE). For the details of the
experiment setup, refer to Section V.
We can observe in Figure 1(b) that outliers incur oscillated
prediction around them. One possible solution might be to skip
the neural network update when a new coming data point
is considered as a suspicious point by Deﬁnition 4.2. However,
such an approach would not necessarily help for the reasons
Recall that we focus on modeling time series with both
outliers and change points. Both an outlier and a change
1 
Fig. 1: Effect of outliers on the LSTM neural network. (a) the
original time series (b) online prediction results. (best viewed
in colour)
point could lead to the identiﬁcation of suspicious points. For
instance, Figure 2 shows the p-values at each time instant
during the learning process of LSTM neural network in the
experiment as Figure 1. It is observed that outliers, change
points and some regular points are ﬂagged as suspicious points.
It is difﬁcult to distinguish them from each other in such a
noisy and non-stationary environment , .

Fig. 2: The observed time series (top) and p-values of data
points in the time series modeled by conventional online
learning of LSTM neural network (bottom) (best viewed in
colour). The vertical dotted line in the top ﬁgure indicates
the possible change point. Red points in the bottom ﬁgure
represent the time instants identiﬁed as suspicious points.
Meanwhile, when a real change point is misclassiﬁed as
an outlier and removed from the neural network update, the
data points immediately following the change point would then
likely be regarded as outliers as well, since they follow the new
distribution after the change point , . Simply skipping
such data points results in important information being lost to
the LSTM updating. It could delay the learning towards the
new data distribution after the change point and signiﬁcantly
degrade the performance of LSTM neural network afterwards.
Integrating change point detection into LSTM will hardly
help as well. Most of change point detection techniques are
the instances of the following framework: at time instant t
statistical tests , , , are performed over two data
subsets, the intermediate past data points {xi}i=t−m1,...,t−1
and the intermediate future data points {xk}k=t+1,...,t+m2 to
measure the dissimilarity, so as to determine whether t is
a change point. Therefore, it requires to accumulate data to
locate a change point in the history. In this paper, we consider
the setting where the learning process of LSTM neural network
is supposed to response to individual data points online, so
as to adapt to data changes promptly and provide timely
prediction.
C. Weighted Gradient Online learning of LSTM for time series
In this part, we present a novel online learning algorithm
for LSTM neural network to be capable of making robust
prediction over time series in the presence of both outliers
and change points.
Overview: We propose the weighted gradient online learning
algorithm, referred to as WG-Learning. The key idea is to
leverage local features, which are extracted from a sliding window over time series, to dynamically weight the gradient, i.e.
Eq. (13), at each time instant for updating the current neural
network. Intuitively, if a suspicious point is highly possible
to be an outlier based on local features, the corresponding
gradient is down-weighted, so as to avoid deviating the so-far
trained LSTM neural network from the current underlying data
distribution. Otherwise, if it is believed to be a change point,
the associated gradient is retained by a high weight, such that
the LSTM model can quickly adapt to the new data.
A common characteristic of time series analysis is that
temporal continuity plays a key role , , , . In
this sense, time forms the contextual variable with respect to
which all analysis is performed. Therefore, our WG-Learning
maintains a sliding window over the time series and associated
p-values for the data points in the sliding window.
Fig. 3: Work-ﬂow of WG-Learning based LSTM neural network in online learning of time series
As is shown in Figure 3 which outlines the work-ﬂow of
our WG-Learning, if the data point at the current time instant
is a suspicious point based on Deﬁnition 4.2, two features
presented below are extracted from the sliding window and
took into account to weight the gradient used in updating the
LSTM neural network at this time instant. For instance, at
time t, the local features w.r.t. data point xt are discovered
in {xt−w, xt−w+1, . . . , xt−1} and {pt−w, pt−w+1, . . . , pt−1}.
w is the length of the sliding window (for the extension of
adaptive windows, please refer to Section IV-D).
Then, in WG-Learning formally the neural network is
updated by the following formula:
Wt = Wt−1 −η · {βt ▽E(Wt−1)}
where βt is the time-varying gradient weight based on the
features extracted from data, which will be deﬁned below.
Previous adaptive learning rate approaches , fail to
take into account the data characteristics in updating parameters of the neural network. Before presenting the details, we
ﬁrst summarize the beneﬁts of our approach for learning noisy
and non-stationary time series as follows:
• Reduced impact of outliers as a sudden increase of the
prediction error - our WG-Learning provides reliable and
smooth prediction robust to outliers as well as avoiding
volatile huge prediction errors.
• Adaptability to changing data - the dynamic gradient
weighting mechanism in WG-Learning enables to retain
useful information in updating the neural network for
converging to changed data.
• Reduction of the overall prediction errors.
Next, we will ﬁrst present the features and then how to
leverage them to weight the gradient.
Suspicion Ratio.
The suspicion ratio is formulated based on the following
observation: outliers are rare events in time series , ,
 and would lead to the limited appearance of suspicious
points in the sliding window; however, when change point
happens, the neural network needs to consume some data after
the change point for adapting to the new hidden distribution
and therefore may yield high proportion of suspicious points
in the beginning. Therefore, the ratio of suspicious points in
the sliding window can be a factor in weighting the gradient.
Now we give the formal deﬁnition. In the sliding window
w.r.t. time t, {xt−w, xt−w+1, . . . , xt−1}, the suspicion ratio is
deﬁned as:
I{pi>1−α or pi<α}
where I{·} is the indicator function.
Suspicion ratio is positively correlated with the gradient
weight. On the ﬁrst hand, the less the suspicion ratio in
the sliding window, the more likely the suspicious point xt
is to be an outlier. Even if it is a change point in reality,
the subsequent data points after this change point are highly
possible to be suspicious points and thus lead to increased
gradient weight in updating the model. It will not signiﬁcantly
delay the convergence of our neural network on changed data.
On the other hand, when the suspicion ratio is high, i.e.,
the suspicious points appear frequently in the sliding window,
further investigation is required. This is because it is possible
that some outliers just occur in the sliding window or such
suspicious points are due to a real change point. In such a
case, additional features should be considered for weighting
the gradient weight.
Difference Value Drift.
In this part, we introduce the second feature, difference value
drift. This novel feature helps to “amplify” the difference
between outliers and change points from the perspective of
the value domain of time series, thereby providing enhanced
information to adjust the gradient weight.
First, we extract the normal and suspicious points from
the sliding window at time t, i.e, {xt−w, . . . , xt−1} and
respectively denote them by a set Nt = {xk|k ∈{t −
w, . . . , t −1}, α ≤pk ≤1 −α} and a set St = {xk|k ∈
{t −w, . . . , t −1}, pk > 1 −α or pk < α}. |Nt| and |St|
represent the numbers of data points in the sets.
Then, we deﬁne the neighbours of a normal point in the
sliding window as:
Deﬁnition 4.3 (Neighbours of a Normal Point): The left and
right neighbours of a normal point xi are the most recent two
normal data points before and after xi in the sliding window:
fl(xi) = xmax{k:k<i,xk∈Nt} and fr(xi) = xmin{k:k>i,xk∈Nt}.
Now we are ready to introduce the proposed difference
value, which is novel in the sense that it is derived by a bidirectional differencing process and has two forms respectively
speciﬁc for normal and suspicious points as follows:
• For a suspicious point (e.g., xk) in the sliding window,
the difference value is the average of absolute changes
between xt and its intermediate preceding and succeeding
data points, i.e. xk−1 and xk+1, no matter whether they
are normal points or not. (if any of the two points are out
of the sliding window, only one-side change is taken as
the difference value).
• For a normal points (e.g., xi) in the sliding window, the
difference value is evaluated as the average difference
between xi and its two neighbours, which are deﬁned in
Deﬁnition 4.3, such that it captures the normal pattern
of time series without the effect of potential outliers and
change points.
The motivation behind the difference value is as follows.
Differencing is an important tool in time series analysis ,
which helps to stabilize the mean of a time series by removing
changes in the level of a time series. On the ﬁrst hand, outliers
are often abrupt and violate changes w.r.t. the intermediate
preceding and succeeding normal points, thereby yielding
high difference values , . Even if outliers occur
consecutively, their difference values could present abnormal
ﬂuctuating patterns compared with the normal data points.
On the other hand, for the suspicious points resulting from
a change point, they are under the new data distribution and
expected to adhere to the property of normal time series as
well, i.e., having reasonable magnitudes in difference values.
Based on above analysis, we give the formal deﬁnition of
the difference value drift. At time instant t, difference value
drift dt between suspicious and normal points in the sliding
window is deﬁned as:
(xt −xt−1) +
(|xk −xk−1| + |xk −xk+1|)
(|xi −fl(xi)| + |xi −fr(xi)|)
This is a relative metric to evaluate the discrepancy between
the average difference values of normal and suspicious points
in the sliding window. The higher the value of the difference
value drift, the more probable the suspicious points are to be
The proposed two features above are complementary by
providing different views to weight the gradient in updating
the neural network. Now we can deﬁne the gradient weight βt
in (14) integrating the suspicion ratio and the difference value
βt = λ · e−dtI{dt≥γ} + (1 −λ) · st
where λ ∈ is the parameter to control the importance of
the two features in the weight. The term e−dtI{dt≥γ} models
the difference value drift in a bounded range . Parameter
γ represents the prior belief about the normal difference value
drift. e−dtI{dt≥γ} gives full weight, i.e., 1 when dt is below
γ. Otherwise, the more the value of dt, the more probable it
is that outliers occur and thus the decreasing weight is given
to the gradient, as dt increases.
As for online prediction, a particular feature of time series
modeling is that a target data point at a certain time instant
will become the predictor of future data points. For instance,
at time t, predictors (xt−1, xt−2, . . . , x1) are used to make
prediction on t and update the model together with xt. Then,
xt will be used to predict values on time t + 1, . . . and so on.
The problem with such a procedure is that if xt is an outlier
and thus ﬂagged as a suspicious point, the prediction based
on xt is biased, though the model is maintained properly in
WG-Learning.
Therefore, we propose to use the forecasting from the learnt
neural network to replace suspicious points for the subsequent
prediction based on the idea of sequence modeling with RNN
 . Formally, the prediction process is now expressed as:
ˆxt = g(˜xt−1, ˜xt−2, . . . , ˜x1; Wt−1)
where ∀k ∈{1, . . . , t −1},
 ˆxk as (10)
xk is a suspicous point
D. Discussion
Our proposed WG-Learning can be extended to perform
outlier and change point detection with ease. Since our WG-
Learning is able to provide robust prediction, we can integrate
additional sub-windows into the sliding window to model the
error distributions of normal behaviours in time series .
Then, the statistics extracted from sub-windows is leveraged
to perform various statistical test , , to locate the
occurrences of change points. For the suspicious points not
identiﬁed as change points, they are reported as outliers.
As for the size of the sliding window, we can adapt timevarying windowing techniques , to our WG-Learning,
so as to dynamically adjust the window size sufﬁcient for summarizing the error distribution of the current neural network.
V. EXPERIMENTAL ANALYSIS
In this section, we conduct extensive experiments to demonstrate the prediction performance of the proposed method WG-
A. Experiment Setup
Datasets: we use both synthetic and real datasets for the
evaluation.
Synthetic: this synthetic dataset is produced based on a
time series generator . It generates segments of time series
by randomly sampling the mean μi, variance vi, trend slop
ui and length li speciﬁc for each segment i from the prior,
μi ∈ , vi ∈ , ui ∈[−0.5, 0.5] and length
li ∈ . The data points in each segment are then the
samples from the Gaussian distribution with the corresponding
mean and variance plus the trend component. The number
of points in each segment is the sampled length. In this
way, we obtain time series with change points, which are the
boundaries between segments. Outliers are injected into each
segment based on a Bernoulli distribution speciﬁed by β and
thus li · β is the expected number of outliers in the segment
of time series. β is chosen as 0.01. The magnitude of outliers
is deﬁned as the times of the variance of the segment. By
default, the magnitude is 10, which means that the value of
an outlier data point is sampled from a Gaussian distribution
with 10 times larger mean than the mean of the corresponding
YSyn: the synthetic time series is from Yahoo’s S5 dataset2.
The dataset consists of both real and synthetic time-series.
We use the time series in A4Benchmark containing synthetic
outliers and change-points. The synthetic time-series have
varying noise and trends with pre-speciﬁed seasonalities.
YReal: the real time series is from the A1Benchmark data
in Yahoo’s S5 dataset. The time series representing the metrics
of various Yahoo services contains both outliers and change
Baselines: We compare the proposed method with three baselines.
RLSTM: this refers to the conventional real-time current
learning (RTRL) of LSTM neural networks . It updates
the network directly using the newly available data without
considering the effect of outliers and change points.
SR-LSTM: it stands for the online learning of LSTM with
suspicious point removal based on the idea of . Specifically, once a suspicious point is detected, SR-LSTM skips
2 

 
 
 
(a) Synthetic dataset
 
 
 
(b) YSyn dataset
 
(c) YReal dataset
Fig. 4: Online one-step ahead prediction (best viewed in colour). The ﬁgures in each column respectively visualize the observed
time series, and the predicted ones with the baselines and the WG-Learning. The proposed method provides a smooth prediction
resistant to outliers and change points.
the model update on this point. This method may circumvent
the adverse effect of outliers, but could lead to loss of useful
information for changing patterns.
ELSTM: this baseline is based on to integrate both
outlier and change point detection into LSTM. It uses the
statistical control chart (e.g., EWMA) , to monitor
the distribution of prediction errors. Based on the monitored
statistics, for a suspicious outlier, the model is updated by
using a recent normal point, while it is trained as usual when
the point is identiﬁed as a change point.
SR-LSTM and ELSTM have the conﬁdence level parameter
in common with WG-Learning, and they are all set to 0.05 as
usual in typical statistical tests , . Additionally, ELSTM
has a parameter, the moving average weight with the usual
recommendation range [0.1, 0.3] . In the experiments below,
we set it to 0.2. The size of sliding window in WG-Learning
is set as 20. λ and γ are respectively set to 0.8 and 5
We use the same LSTM model for the baselines and the
proposed method in the experiments. In particular, the number
of layers is 3, and the number of nodes (neurons in LSTM
layer) is 400. The mean squared error is chosen as the loss
function. The L2 regularization with 0.0001 penalty is used.
Nesterov momentum is adopted as the optimizer. Our WG-
Learning and baselines are implemented based on Theano3.
Evaluation Metric: We evaluate the predictive performance
of WG-Learning and baselines in terms of root mean square
error (RMSE) excluding the outliers. Lower values of RMSE
are considered better. At each time instant, we perform onestep ahead prediction using the online model and then update
the model when the new data point arrives.
B. Experiment Results
Table II shows the prediction results on each dataset. WG-
Learning outperforms the baselines in all datasets by tracking
the variation of time series and resisting to outliers. We observe that for the datasets with large outliers e.g., YReal, WG-
Learning signiﬁcantly outperforms RLSTM. For the datasets
(Synthetic and YSyn) having medium outliers, WG-Learning
still achieves better results. SR-LSTM and ELSTM occasionally get better than RLSTM depending on datasets. For
the very dynamic dataset, e.g., YSyn and YReal, SR-LSTM
has higher errors than RLSTM, this could be because the
aggressive update skipping mechanism of SR-LSTM leads to
missing useful information.
TABLE II: Prediction accuracy on synthetic and real datasets
``````````
WG-Learning
Figure 4 visualizes the predictive performance of the online
model for the time period with complex outliers and change
points in each dataset. The top plots of Figure 4 visualize
the observed time series of the datasets Synthetic, YSyn
and YReal. The red points represent the outliers and the
vertical dotted lines indicate change points. YReal has no
explicit change points and thus no vertical line is shown in
the corresponding ﬁgure. The other plots of Figure 4 show
the predicted time series using the three baselines and WG-
From Figure 4, we can observe that in dataset Synthetic,
our WG-Learning is able to catch the details of time series
as well as promptly adapting to the data after change points.
Meanwhile, WG-Learning can circumvent the adverse effect
of outliers by sticking to the underlying patterns of the time
series. It indicates that the weighted gradients of WG-Learning
are indeed effective. On the contrary, RLSTM suffers from the
outliers by presenting predictions having oscillations around
outliers as is shown in the second row of Figure 4. Compared
with WG-Learning, the prediction of SR-LSTM and ELSTM
resembles a sliding average and may loss details of the time
series, though they present robust prediction compared with
RLSTM. Meanwhile, SR-LSTM and ELSTM are lagged on
3 
change points. In ELSTM, a change point is detected when the
data points following it incur sufﬁcient change in prediction
errors , , . This means in the online learning, there is
a delay in change point detection, and thus ELSTM may miss
the update of changing data points. With similar tendency, our
WG-Learning provides consistent robustness and adaptiveness
on datasets YSyn and YReal.
In addition, we investigate the weighted gradients of WG-
Learning. We record the gradient weight at each data point
(i.e., βt in Eq. (14)) during the online learning process and
visualize them associated with the observed time series in
Figure 5. We can observe that: most of the gradient weights
are close to one at the regular points, and in turn the model can
be normally updated in an online fashion. However gradient
weights are much less than one at the detected outliers, which
avoid deviating the model from the underlying patterns of the
time series. On the other hand, gradient weights at the detected
change points are mostly retained close to one, such that WG-
Learning is able to adapt to the new patterns in real time.
VI. CONCLUSION
In this paper we propose an adaptive gradient learning
method for recurrent neural networks (RNN) in the context of online learning problem. The WG-Learning aims to
incrementally learn the streaming time series and provide
robust predictions adapting to the changing patterns as well
as resisting to outliers. In the WG-Learning, we introduce the
weighted gradient to the online SGD for the RNN models,
based on the local features of time series. The method enables
to update the RNN models with downweighted gradients for
outliers while full gradients for change points. The predictive
performance of the WG-Learning in the extensive experiments
on both synthetic and real datasets veriﬁes the superiority of
the WG-Learning over the baselines.
Acknowledgments This work was partly supported by
Nano-Tera.ch through the OpenSense2 project and the EU FP7
Project SMARTIE (contract no. 609062).