Continual Retraining of Keystroke Dynamics
Based Authenticator
Pilsung Kang, Seong-seob Hwang, and Sungzoon Cho⋆
Seoul National University, San 56-1, Shillim-dong, Kwanak-gu, 151-744, Seoul, Korea
{xfeel80,hss9414,zoon}@snu.ac.kr
Abstract. Keystroke dynamics based authentication (KDA) veriﬁes a
user based on the typing pattern. During enroll, a few typing patterns
are provided, which are then used to train a classiﬁer. The typing style
of a user is not expected to change. However, sometimes it does change,
resulting in a high false reject. In order to achieve a better authentication
performance, we propose to continually retrain classiﬁers with recent
login typing patterns by updating the training data set. There are two
ways to update it. The moving window uses a ﬁxed number of most
recent patterns while the growing window uses all the new patterns as
well as the original enroll patterns. We applied the proposed method to
the real data set involving 21 users. The experimental results show that
both the moving window and the growing window approach outperform
the ﬁxed window approach, which does not retrain a classiﬁer.
Introduction
Password based user authentication has been widely used in security systems
where a keyboard or a keypad is the main input device. When a user exposes his
password or a third-party acquires the password, however, the authentication
system becomes vulnerable to improper access trials. In order to cope with the
vulnerability of password based user authentication, keystroke dynamics based
authentication (KDA) has been proposed . KDA considers keystroke dynamics together with password characters when authenticating an access attempt,
i.e., it utilize a user’s behavior as well as knowledge.
KDA involves three main processes as shown in Fig. 1. The enrollment process involves a user enrolling a certain number of keystroke typing patterns. The
classiﬁer building process involves constructing a classiﬁer with the typing patterns collected in the enrollment process. The authentication process evaluates
an access attempt with the classiﬁer and takes an appropriate action: grant or
deny access.
Recently, a number of methods for building high performance classiﬁers have
been reported . According to Peacock et al. , however, high performance
classiﬁers reported in the literature were built with a large number of typing patterns. Most classiﬁers that they reviewed used more than 100 typing patterns
⋆Corresponding author.
S.-W. Lee and S.Z. Li (Eds.): ICB 2007, LNCS 4642, pp. 1203–1211, 2007.
⃝Springer-Verlag Berlin Heidelberg 2007
P. Kang, S.-s. Hwang, and S. Cho
Authentication
Authentication
Enrollment
Register a password
Enroll keystroke patterns
Classifier Building
Classifier
Fig. 1. Keystroke dynamics based authentication process
from each user to build the classiﬁers. Some even used more than 1,000 typing
patterns. In practice, however, the number of patterns collected in the enrollment process should be no more than 10. Otherwise, a user may not choose to
use the system at all. With such a small number of typing patterns, it is essential
that the typing style of a user will not change in the future. It is often the case,
however, that the typing style of a user changes. In this case, the performance
of the classiﬁer may degenerate. Fig. 2 shows the distances between the login
patterns and the mean vector of the enroll patterns of three users involved in
our experiment. The x-axis represents the index of login typing patterns. The
larger the index is, the more recent the pattern is. The y-axis represents the
Euclidian distance of the login pattern to the mean vector. The mean vector was
calculated using 10 enroll patterns. User 9’s typing style did not change over
time since it shows little ﬂuctuation (Fig. 2(a)). User 1 (Fig. 2(b)) is a typical
user whose typing style changed gradually over time. The distance of the login
patterns to the mean vector increased steadily. User 16 (Fig. 2(c)), on the other
hand, surely changed his typing style, but no trend can be extracted since the
(a) User 9
(b) User 1
(c) User 16
Fig. 2. Distance between login pattern and mean enroll pattern
Continually Retraining of Keystroke Dynamics Based Authenticator
distance neither increased nor decreased. The ﬂuctuation is larger than the other
users and many spikes are presented.
A remedy for changing typing style is to keep retraining the classiﬁer. In this
paper, we propose to update the training pattern set dynamically in order to
accommodate the change of a user’s typing behavior. In particular, we add “successful” login patterns to the training set and retrain the classiﬁer. We propose
two diﬀerent ways of updating the training pattern set. The ﬁrst is “Moving
window”, where the number of training patterns is ﬁxed. A recent pattern is
added to the training set, while the least recent training pattern is removed.
The second is “Growing window”, where a recent pattern keeps being added
without any training pattern removed. Thus, the number of training patterns
keeps increasing.
The rest of this paper is structured as follows. In section 2, we explain moving
window and growing window followed by the experimental settings including
authentication algorithm and data description in section 3. In section 4, we
compare the performance of the classiﬁers based on two proposed methods and
the “Fixed window”.1 In section 5, with a conclusion, we discuss future work.
Updating Training Set
When KDA is employed in real systems, only a few number of typing patterns
can be collected in the enrollment process. A small number of training patterns
have a limitation that they can only represent a user’s typing behavior at a
particular time. If a user’s typing style changes over time, newly available login
patterns need to become a part of the training data set to retrain the classiﬁer.
We propose two ways of updating the training pattern set as follows.
Moving Window
In moving window method, the number of training patterns is ﬁxed. When a new
pattern is added to the training set, the oldest training pattern is removed. Let
T Di = {xm+1, xm+2, ..., xm+n} denote the training set at time period i, where
n is the size of the training set. xm+1 is the oldest training pattern while xm+n
is the newest training pattern. With a new typing pattern x′ available, T Di+1
is updated as follows:
T Di+1 = T Di −{xm+1} ∪{x′}
T Di+1 = T Di
If x′ is granted access, it is added to T Di+1 while the oldest training pattern
is removed. Otherwise, it is not added to T Di+1 so that the training data set
1 “Fixed window” refers to the invariant training set consisting of the typing patterns
collected in the enrollment process.
P. Kang, S.-s. Hwang, and S. Cho
remains the same as T Di. When a user’s typing style changes, moving window
can accommodate the change immediately. If the change between successive
typing patterns is large but has no direction, however, moving window becomes
Growing Window
In growing window method, the number of training patterns is not ﬁxed but
increases. Ever when a new pattern is added to the training set, the oldest
training pattern stays so that the growing window stores all the typing patterns
that have been granted access as well as the original enroll patterns. The number
of training patterns increases by one every time a new typing pattern is added.
Let T Di = {x1, x2, ..., xn} denote the training set at time i, where n is the size of
the current training set. x1 is the oldest training pattern, while xn is the newest
training pattern. With a new typing pattern x′ available, T Di+1 is updated as
T Di+1 = T Di ∪{x′}
T Di+1 = T Di
If x′ is granted access, it is added to T Di+1 while the oldest training pattern
is not removed. So the number of training patterns becomes n + 1. If x′ is not
granted access, on the other hand, it is not added to T Di+1 so that the training
data set remains the same as T Di. Since growing window method stores all
possible training patterns, it reﬂects the change less than moving window when
a user changes his typing style. If the change of typing patterns is not progressive
and the scope of change is large, it can be more stable than moving window.
Experimental Settings
The data set used in our experiment originally appeared in Cho et al . The data
set consists of 21 users, each of whom has diﬀerent number of training patterns
from 76 to 388 as shown in Table 1. We used two types of features: duration (time
between a key press and release) and interval (time between a key release and
another key press). If a user uses a password with n characters, the length of the
features becomes 2n −1: n durations and n −1 intervals. Each user has 75 typing
patterns of the valid user and 75 typing patterns of impostors. It is not easy to
collect impostors’ patterns in practice, thus, the subjects changed their roles such
that a user tried to log in with other users’ passwords. Initially, the earliest 10
patterns in the training set were used to build a classiﬁer for all methods.
We employed K-Means algorithm based on Euclidian distance as the authentication classiﬁer. The authentication algorithm is demonstrated in Fig. 3. First,
K-means algorithm is performed using the training patterns so that the cluster membership of each training pattern is determined. Second, when the test
Continually Retraining of Keystroke Dynamics Based Authenticator
Table 1. Data description
User ID Password
c.s.93/ksy
Step 1: Perform K-Means clustering with the training patterns
[C1, ..., CK] = K-Means(X,K)
(CK: the members belonging to K-th cluster)
(X: training patterns, K: the number of clusters)
Step 2: Find the closest cluster prototype of the test pattern yj
k = argi∈1,...,K min dist(yj, Pi)
(Pi: the prototype of the cluster Ci)
Step 3: Authentication
If dist(yj, Pi) < M ×
xi∈Ck dist(xi, Pk)
(Nk: the number of patterns in k-th cluster, M: Threshold coeﬃcient)
grant access(yj is considered as a valid user’s typing pattern)
deny access(yj is considered as an impostor’s typing pattern)
Fig. 3. KDA authentication process
pattern is given, the nearest prototype to the test pattern is determined. Third,
the average distance between training patterns belonging to their nearest prototype is calculated to estimate the threshold. If the distance between the test
pattern and the nearest prototype is smaller than the threshold, the test pattern
is granted access. Otherwise, it is denied access. In our experiment, we set the
number of clusters (K) to 3.
P. Kang, S.-s. Hwang, and S. Cho
There are two types of errors: false rejection rate (FRR) and false acceptance
rate (FAR). FRR is the ratio of the valid user’s attempts classiﬁed as impostors’.
A high FRR indicates that the valid user’s attempt is often rejected. A user may
feel irritated if FRR is high. FAR is the ratio of impostors’ attempts classiﬁed as
the valid user’s. The system is not secure when FAR is high. Since the purpose
of KDA is to minimize both FRR and FAR, and one can be reduced at the cost
of the other, we adopted equal error rate (EER, the value where FRR and FAR
are equal ) for the performance measure.
Experimental Results
The EERs of all users using ﬁxed window, moving window, and growing window
are shown in Table 2. The average EER of ﬁxed window is 4.8%. Both moving
window and growing window, however, achieved average EER of 3.8%, which
is 1.0% lower than that of ﬁxed window. Since the variation of the users was
fairly large, we investigated the eﬀect of moving window and growing window
on each user separately. First, we constructed a win-draw-lose table in order to
estimate the relative dominance of moving window and growing window over
ﬁxed window (see Table 4). The EERs of moving window and growing window
were compared for each user. If the diﬀerence was larger than 0.01, “win” or
“lose” resulted. Otherwise, “draw” resulted. Five users lowered their EER with
moving window while only one user resulted in a higher EER. Similarly, six
users lowered their EER with growing window while none of the users resulted
in a higher EER. Thus, we can conclude that both moving window and growing
window improved EER over ﬁxed window.
We also plotted the EER over time (Fig. 4) for three methods as the training
data set is updated. The x-axis represents the index of typing patterns. A newer
Table 2. The average EER of ﬁxed window, moving window, and growing window
Continually Retraining of Keystroke Dynamics Based Authenticator
Table 3. Win-draw-lose table of moving window and growing window over ﬁxed window
Fixed Window
Moving Window
Total Number
1,5,6,11,15
Growing Window
Total Number
1,6,11,13,14,15
Moving Window
Growing Window
Fixed Window
(a) User 1
Moving Window
Growing Window
Fixed Window
(b) User 15
Moving Window
Growing Window
Fixed Window
(c) User 6
Moving Window
Growing Window
Fixed Window
(d) User 5
Moving Window
Growing Window
Fixed Window
(e) User 13
Moving Window
Growing Window
Fixed Window
(f) User 16
Fig. 4. EER for a sequence of login attempts of some users
pattern has a larger index. The y-axis represents the EER. The users plotted
in Fig. 4(a,b,c) had better authentication performance with both moving window and growing window than ﬁxed window. User 1 and User 15 are typical users
P. Kang, S.-s. Hwang, and S. Cho
whose typing style has changed over time. The EERs continuously decreased
as the training patterns were updated. Lower EER was achieved by adjusting
training patterns so as to accommodate the user’s typing behavior change. Since
moving window is more sensitive to typing change than growing window, its
EER decreased more rapidly. User 6 has a diﬀerent change pattern. The training
patterns changed irregularly. Moving window accommodated the change as soon
as a new pattern was added so that the ﬂuctuation of the EER was rather large.
Growing window, on the other hand, did not show much ﬂuctuation of the EER
since it used a large number of training patterns. Fig. 4(d) shows User 5 whose
EER decreased with moving window but did not with growing window. Note
that the training patterns numbered from 10 to 25 seem signiﬁcantly diﬀerent
from the initial 10 training patterns. Since moving window used newly available
patterns only, the EER decreased rapidly. In growing window, on the other hand,
the change was accommodated in the retrained classiﬁer with some delay. Fig.
4(e) shows User 13 whose EER decreased with growing window but did not
with moving window. The typing style of the user has changed, but it is neither
consistent nor has a direction. In this case, moving window “chased” after every
single change so that it resulted in the unstable EER. Growing window, on the
other hand, had enough number of training patterns to absorb the negative eﬀect
of a few spurious patterns so that a little ﬂuctuation with low EER resulted. Fig.
4(f) shows User 16 whose EER was larger with moving window than with ﬁxed
window. At the beginning, neither moving window nor growing window could
catch the change. After 20 patterns, however, both moving window and growing
window became stable and the EER decreased. For some reason, moving window
could not reﬂect the typing behavior change between the 35th typing pattern
and the 65th typing pattern while growing window could. Therefore, the average
EER of moving window became larger than than that of ﬁxed window.
Conclusion
In this paper, we proposed to update the training set dynamically so that the
classiﬁer can accommodate the change of typing behavior. Based on the experiments involving 21 users, updating training sets by moving window or growing
window improved the authentication accuracy over ﬁxed window. There are a
couple of limitations in the current work. We ﬁxed the window size to 10 in moving window. The eﬀect of the window size on authentication performance needs
to be investigated. In addition, since the typing patterns used in our experiment
were collected in a rather short period, data collection with longer period such
as 6 months or 1 year should be investigated.
Acknowledgement
This work was supported by grant No. R01-2005-000-103900-0 from the Basic
Research Program of the Korea Science and Engineering Foundation, the Brain
Continually Retraining of Keystroke Dynamics Based Authenticator
Korea 21 program in 2006 and 2007, and partially supported by Engineering
Research Institute of SNU.