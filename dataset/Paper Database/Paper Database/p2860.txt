SPECIAL SECTION ON BIG DATA SERVICES AND COMPUTATIONAL INTELLIGENCE
FOR INDUSTRIAL SYSTEMS
Received October 28, 2015, accepted December 2, 2015, date of publication December 17, 2015,
date of current version December 23, 2015.
Digital Object Identifier 10.1109/ACCESS.2015.2508940
A Multi-Objective Optimization Scheduling
Method Based on the Ant Colony
Algorithm in Cloud Computing
LIYUN ZUO1,2, LEI SHU1, (Member, IEEE), SHOUBIN DONG2,
CHUNSHENG ZHU3, (Student Member, IEEE), AND
TAKAHIRO HARA4, (Senior Member, IEEE)
1Guangdong Provincial Key Laboratory of Petrochemical Equipment Fault Diagnosis, Guangdong University of Petrochemical Technology,
Maoming 525000, China
2School of Computer Science and Engineering, South China University of Technology, Guangzhou 510006, China
3Department of Electrical and Computer Engineering, The University of British Columbia, Vancouver, BC V6T 1Z4, Canada
4Department of Multimedia Engineering, Osaka University, Suita 565-0871, Japan
Corresponding authors: L. Shu ( ) and S. Dong ( ).
This work was supported in part by the Educational Commission of Guangdong Province, China, under Grant 2013KJCX0131, in part by
the Guangdong University of Petrochemical Technology’s Internal Project under Grant 2012RC0106, in part by the Natural Science
Foundation of Guangdong Province, China, under Grant 2014A030313729, in part by the 2013 Top Level Talents Project Sailing
Plan of Guangdong Province, in part by the 2014 Guangdong Province Outstanding Young Professor Project, in part by the
Science and Technology Key Project of Guangdong under Grant 2014B010112006, and in part by the Natural Science
Fund of Guangdong under Grant 2015A030308017.
ABSTRACT For task-scheduling problems in cloud computing, a multi-objective optimization method
is proposed here. First, with an aim toward the biodiversity of resources and tasks in cloud computing,
we propose a resource cost model that deﬁnes the demand of tasks on resources with more details. This
model reﬂects the relationship between the user’s resource costs and the budget costs. A multi-objective
optimization scheduling method has been proposed based on this resource cost model. This method considers
the makespan and the user’s budget costs as constraints of the optimization problem, achieving multiobjective optimization of both performance and cost. An improved ant colony algorithm has been proposed
to solve this problem. Two constraint functions were used to evaluate and provide feedback regarding the
performance and budget cost. These two constraint functions made the algorithm adjust the quality of the
solution in a timely manner based on feedback in order to achieve the optimal solution. Some simulation
experiments were designed to evaluate this method’s performance using four metrics: 1) the makespan;
2) cost; 3) deadline violation rate; and 4) resource utilization. Experimental results show that based on these
four metrics, a multi-objective optimization method is better than other similar methods, especially as it
increased 56.6% in the best case scenario.
INDEX TERMS Cloud computing, ant colony, task scheduling, deadline, cost constraint.
I. INTRODUCTION
Task scheduling is important in cloud computing 
because it directly affects a systems load and performance.
An effective task scheduling method requires not only
meeting the users needs but also improving the efﬁciency
of the whole system. Task scheduling problems are a typical
NP-hard problem. At present, many researchers have solved
this problem using the ant colony algorithm. The ant colony
algorithm is a probabilistic and uncertain global optimization
algorithm; therefore, it is easy to obtain a global optimal
solution. Additionally, it is robust and does not rely on the
strict mathematical optimization and structural features of the
problem itself.
The ant colony algorithm has been used for all kinds of
scheduling problems, achieving promising results – .
However, the existing studies did not provide a detailed
deﬁnition of the demands of these tasks for various resources.
In cloud computing, resources and tasks are all diverse. For
example, some tasks have a high demand for the CPU, while
some require more storage. The costs of different resources
vary. Accordingly, the costs of tasks are also different.
Therefore, it is helpful to reﬂect task costs if we consider
VOLUME 3, 2015
2015 IEEE. Translations and content mining are permitted for academic research only.
Personal use is also permitted, but republication/redistribution requires IEEE permission.
See for more information.
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
the demand difference of the tasks for the resources in detail.
In order to solve this problem, we propose a resource cost
model. This model can reﬂect the demands of the tasks
for the resources in detail. In addition, this paper proposes
a multi-objective optimization-scheduling model that takes
into account the two constraints of performance and budget cost. Lastly, it solves the multi-objective optimizationscheduling problem using the ant colony algorithm, which
has a great advantage in addressing this combinatorial optimization problem. However, when using the ant colony
algorithm, it is easy to fall into a local optimum. Therefore,
this paper proposes an improved ant colony algorithm that
can evaluate and adjust the quality of the solution in order
to avoid falling into that local optimum. The primary targets
of this scheduling method are performance and budget cost;
because it is based on the ant colony optimization algorithm,
it is named PBACO.
The contributions of this paper are summarized as follows.
• First, we propose a resource cost model that deﬁnes the
demands of the task for resources in detail, and reﬂects
the relationship between resource costs and user budget
costs more clearly.
• Secondly,
multi-objective
optimization-scheduling model. This model regards
scheduling performance and cost as the budget constraints of the optimization problem. This model
achieves the multi-objective optimization for the optimal
span, deadline, resource utilization and user costs.
• Finally, this paper proposes an improved ant colony
optimization algorithm to solve the multi-objective
optimization-scheduling problem. The improved ant
colony optimization algorithm can evaluate and adjust
the quality of the solution in a timely manner by
using two functions of performance and budget cost
constraints. Thus the improved ant colony algorithm
solves the problem that the original ant colony algorithm
always falls into the local optimum.
The rest of the paper is organized as follows. The related
work is introduced in Section II. The problem description, the deﬁnitions of tasks and resources are shown
in Section III. The resource cost model and scheduling optimization model are presented in Section IV. The advanced
ant colony optimization method is performed in Section V.
Experiments are shown in Section VI, and the paper is
concluded in Section VII.
II. RELATED WORK
Related research on task scheduling is usually related to the
following three aspects: First, research focuses on scheduling performance, including response time, the best span and
completion time. Secondly, there are many multi-objective
optimization scheduling researches, which include the completion time, the economic cost, QoS, and energy consumption and so on. Thirdly, some scheduling methods use the ant
colony algorithm.
A. FOCUS ON SCHEDULING PERFORMANCE
This type of research regards scheduling time as the main target. Researchers primarily use heuristics, or intelligent optimization algorithms to optimize task scheduling at the algorithm level. The focus is on reducing the time associated with
scheduling performance, such as the response time, optimal
span and completion time – . For example, reference 
proposes a super heuristic algorithm the main target of which
is the optimum span. Reference proposes an adaptive
scheduling algorithm on the Hadoop platform to reduce the
completion time. However, proposes two scheduling algorithms for three artiﬁcial neural networks (ANN) and an RBF
neural network combined with a neural network. These two
algorithms are based on the direct search algorithm (DSO),
which has been proposed in their research early days. The
primary target is to achieve the optimum span.
B. THE MULTI-OBJECTIVE OPTIMIZATION
SCHEDULING METHODS
More and more researches focus on multi-objective optimization. For example, the multi-objective optimization includes
the completion time, the constraints of QoS – ,
consumption
 – ,
cost , , , and the system performance – .
The researches , take into account the deadline
guarantees. Where the paper proposes a task scheduling
to guarantee deadline by improving resource utilization, and
the paper proposes a method by dividing resources and
budget to minimize the completion time of tasks and improve
resource utilization. This method takes into account the status of those resources. Many other studies only optimize
the task without considering the status of the resource ,
also focusing on energy by evaluating the resources. The
paper consolidates VMs to save energy by the ant
colony system. A multi-input multi-output feedback control
of dynamic resource scheduling algorithm was proposed 
to guarantee optimal effectiveness under time constraints.
This algorithm considers the task execution time, cost, and
utilization of resources (CPU, Memory).
Additionally, some researchers consider all of the above
targets – , – , where researches task
scheduling through a successive cooperative game approach
in a hybrid cloud. The paper proposes a multi-objective
optimization algorithm of communications and storageaware whose main targets are execution time, economic costs
and system performance, while at the same time meeting
the network bandwidth and storage constraints. The work
in proposes a multi-objective task scheduling method
by minimizing makespan and costs in a heterogeneous multicloud environment. This work also considers the utilization
with the exception of makespan and cost. However, it does not
consider the deadline. Van den Bossche et al. propose a
model to minimize cost from a cloud users perspective.
The research is very similar to PBACO. It proposes a
muti-objective optimization method to maximize the proﬁt
VOLUME 3, 2015
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
of IaaS providers. It also considers the runtime, deadline and
resource utilization. There are some experiments to compare
PBACO with the research .
C. THE SCHEDULING METHODS BASED
ON ACO ALGORITHM
There are many studies on scheduling tasks using the ant
colony algorithm in cloud computing. These studies have
been divided into three categories according to the focus of
their targets.
First, there is a focus on scheduling efﬁciency, such as the
completion time. For example, the paper schedules tasks
combined with the ant colony and bee colony algorithms.
It takes SLA (Service-Level Agreement) into account and
sorts tasks according to the priority of SLA. The paper 
focuses on optimizing the total execution time of tasks (that
is, the makespan), reducing the execution time by combining
a multi-stage decision process and an ant colony optimization
algorithm using the approximation method. The paper 
proposes a scheduling strategy based on ant colony optimization and a two-way mechanism. That work sets a pheromone
threshold to avoid premature convergence and avoids the
local optimum through the two-tier search strategy and by
using the pre-execution time. The work in optimizes the
scheduling using the ant colony algorithm and reducing the
amount of candidate resources.
Secondly, some researches consider the system performance, such as load balancing. For example, the work in 
proposes a scheduling method based on the ant colony algorithm. This work not only minimizes makespan, but also
achieves load balancing by minimizing the idle time of virtual machines in order to balance the load of the virtual
machines. The work done in proposes an improved ant
colony algorithm based on the shortest delay time of tasks,
taking into consideration both equity and efﬁciency. The
paper proposes an enhanced ant colony algorithm. This
work regards one assignment of the task to a virtual machine
as the searching object of the ants, taking into account the
shortest completion time and load balancing.
Thirdly, the research methods consider the cost. For example the work in proposes an ant colony optimization
algorithm to solve the problem of big workﬂow scheduling
and multiple QoS parameters. This research allows users to
specify their own preferences for service and QoS threshold.
It also takes into consideration budget price constraints.
However, this method is used for workﬂow scheduling in grid
computing. The work in proposes a scheduling algorithm
based on QoS constraints combined with GA and integration,
taking into account both time and cost. However, time and
cost are regarded as ﬁtness functions instead of optimization
constraints.
There are several problems in the existing research work
using the above analysis. First, when considering the cost
of the tasks, these researches do not deﬁne the demands of
tasks for resources in detail. Costs are different for different
resources because of the diversity in those resources and tasks
in cloud computing. Correspondingly, task costs are also
different. Therefore, it is necessary to consider the differences
in the demand of tasks for resources, which can reﬂect the
task costs in detail. Secondly, many scheduling methods do
not consider the quality of the solution or evaluate feedback.
It will cause local optima because of the shortcoming of ant
algorithm itself. This paper will evaluate the quality of the
solution and the feedback from both the performance and
cost, and then adjust itself according to feedback results.
III. THE DEFINITION AND DESCRIPTION OF PROBLEM
This section describes the deﬁnitions of tasks and resources,
and the system framework in this paper. The primary parameters and their meanings are listed in Table 1.
TABLE 1. Main notation definitions.
A. THE DEFINITION OF TASKS AND RESOURCES
First, it is assumed that there are K tasks T = {T1,
T2, . . . , Ti, . . . , TK} and N resources R
{R1, R2, . . . ,
Rj, . . . , RN} in the current system of cloud computing. Here,
cloud resources refer to the virtual resources.
Deﬁnition 1 (Tasks): Ti = (Ci, Mi, Di, Li). The ﬁrst two
parameters are CPU usage and memory usage, which the
user has applied. Di is the deadline of the task, and Bi is the
budget cost of the user. These parameters come from the task
manager and are submitted by users.
Deﬁnition 2 (Resources): Each virtual resource cloud is
deﬁned by the main parameters of its CPU and memory.
That is to say, Rj = (Cj, Mj). These two parameters are
representative of CPU utilization and memory usage.
Assumption 1: In order for the research to proceed,
it is necessary to provide an assumption related to the above
deﬁnitions. We have assumed that the information submitted
by the user is trusted. In other words, the information of
resource demand, submitted by the user, is accurate.
In cloud computing, virtualization technology can monitor
resource usage. If the user-accessed resources, such as CPU
and memory, exceed the number of users applying during
VOLUME 3, 2015
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
the process of actual implementation, the system will cut off
task performance, in which case the task fails. Therefore,
assumption 1 is reasonable.
FIGURE 1. The system framework model.
B. THE SYSTEM MODEL
In this paper, the system framework model is shown in Fig. 1;
here, the task manager accepts and manages task requests that
the user submits, and then submits this information to the
scheduler.
The local resource manager monitors and manages
local resource nodes, periodically monitoring local virtual
resources to obtain their CPU and memory load information,
and then to submit the information to the global resource
manager. The global resource manager periodically collects and updates information from local resource managers.
Additionally, the local resource manager monitors the duration time of tasks running on resources and then submits that
time to the global manager. The global manager calculates
the resource cost using this information from the resource
The scheduler is the core component and is responsible for
allocating tasks to resources using the optimization scheduling method, which this paper proposes, and schedules tasks
to resources according to this information. First, it collects
this task and resource information from the task manager
and the global resource manager. Second, it judges whether
the resource Rj meets the requirement of the task Ti. The
requirements include deadline, cost and include the actual
requirements.
Finally, the scheduler allocates the resource Rj to the
IV. MODELS OF RESOURCE COST
AND TASK SCHEDULING
This section ﬁrst presents a resource cost model to reﬂect the
relationship between resource costs and user budget. It also
proposes a multi-objective optimization scheduling model
based on the resource cost model to achieve multi-objective
optimization scheduling in cloud computing.
A. THE RESOURCE COST MODEL
In cloud computing, resources and tasks are diverse. For
example, some tasks demand many CPU resources, while
others require more storage. Furthermore, the costs for different resources are different; correspondingly, task costs are
also different. Therefore, if we consider the differences in the
task demand for resources, it will be conducive to reﬂect the
costs of those tasks in more detail and reﬂect the relationship
between resource costs and user budget costs. To address this
problem, this paper presents a resource cost model, which
divides the resource cost into two parts of CPU and memory.
The resource cost includes two parts of the CPU and memory according to the deﬁnition of resources. The cost of CPU
is deﬁned as formula 1.
Ccost(j) = Cbase × Cj × tij + CTrans
Here, Cbase is the base cost when a resource is used by
the lowest utilization. tij is the duration time the task Ti runs
in resource Rj. CTrans is the cost associated with the CPU
transmission.
The cost of memory is deﬁned as formula 2.
Mcost(j) = Mbase × Mj × tij + MTrans
Similarly, Mbase is the base cost when memory is 1 GB.
tij is the duration time of the task Ti running in resource Rj.
MTrans is the cost associated with the memory transmission.
The cost functions can be obtained as formulas 3 and 4
based on the above cost models of CPU and memory.
B. THE SCHEDULING OPTIMIZATION MODEL BASED
ON PERFORMANCE AND BUDGET CONSTRAINTS
In cloud computing, scheduling efﬁciency is decided by not
only scheduling performance but also by the cost of the user
budget. Therefore, in this paper, a scheduling optimization
model is presented based on the resource cost model and the
deﬁnition of tasks and resources.
First, we have assumed that there are K tasks T
{T1, T2, . . . , Ti, . . . , TK} and N
resources R
R2, . . . , Rj, . . . , RN} in the cloud computing system. Here,
the scheduling problem is an optimization problem: the
matter of scheduling these K tasks to N resources and
achieve optimal span. At the same time, it is necessary to
meet constraints of deadlines and budget costs. This is a
multi-objective optimization problem and is described as
VOLUME 3, 2015
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
formulas 5-8.
H(x) = F(x), B(x)
s.t. B(x) = C(x) + M(x)
Here x is a feasible solution. F(x) is a function of the
performance objectives that refer to makespan. B(x) is the
objective function of the user budget costs which consist
of the task demand costs for the CPU and memory that
correspond to the cost functions in the resource cost model.
This is a multi-objective optimization problem that is dif-
ﬁcult to solve; in particular, it is difﬁcult to obtain the optimal solution. Consequently, this paper uses the ant colony
algorithm to solve this problem.
V. THE MULTI-OBJECTIVE OPTIMIZATION SCHEDULING
METHOD BASED ON ANT COLONY ALGORITHM
This optimization-scheduling problem includes several targets of performance and cost. It also has two additional
constraints of deadline and budget cost. It is difﬁcult to solve
this type of combinatorial optimization problem, and it is
especially difﬁcult to obtain the optimal solution. The ant
colony algorithm has an advantage when it comes to solving a combinatorial optimization problem. The ant colony
algorithm has been used for a variety of scheduling problems and has achieved good results. However, the ant colony
algorithm has a shortcoming that it is easy to fall into local
optimal solution. Therefore, this paper presents an improved
ant colony optimization algorithm. It evaluates the quality of
the solution and provides feedback for the evaluation results
using a suitable function. It can thus avoid the local optima.
A. THE ANT COLONY OPTIMIZATION
SCHEDULING METHOD
The ant colony optimization algorithm is a distributed
algorithm that is used to solve combinatorial optimization
problems. The algorithm completes the scheduling process by
simulating the foraging process of ants. At ﬁrst, ants choose
a path randomly. When the ants reach their desired targets,
they calculate the path of ﬁtness, at which point the ants set
pheromone on the path according to ﬁtness. Lastly, in order
to focus the ants on the high ﬁtness path and to achieve the
optimal solution as frequently as possible, it is necessary to
update the pheromone and behavior choices.
1) THE TRANSITION PROBABILITIES OF BEHAVIOR CHOICE
When tasks are scheduled through the ant colony algorithm,
the steps are as follows. First, input the number of tasks,
the task deadline and budget costs, the number of resources,
their ability, and other relevant parameters. Secondly, each
task is assigned an ant. When the task Ti is successfully
allocated to resource Rj task Ti will be recorded through
the taboo table. Third, the above steps are repeated for the
next task, which is not in the taboo table until all tasks
are scheduled completely. This process of assigning tasks
to resources mimics the process of the ant forming a path.
The choice process of assigning tasks to resources has an
important relationship with pheromone and heuristic information. Therefore, in order to achieve the optimal solution,
the following method was used to achieve behavioral choices:
We assumed that gk(Ti, Rj) is the resource set that meets the
deadline and the budget constraints of task Ti in the k −th
iteration. Consequently, the probability of task Ti scheduled
to resource Rj is as formula 9 in the k −th iteration.
Pk(Ti, Rj)
[τ(Ti, Rj)]α[η(Ti, Rj)]β
h∈gk(Ti,Rj) [τ(Ti, h)]α[η(Ti, h)]β ,
Rj ∈gk(Ti, Rj)
Here τ(Ti, Rj) is the pheromone of the task Ti assigned to
the resource Rj in the path. η(Ti, Rj) is the heuristic information, which is set to the reciprocal of start time of task Ti.
The parameters α and β are the weight factors of the heuristic information and pheromone. They represent the relative
important degree of the heuristic information and pheromone.
2) THE FITNESS FUNCTION
When an ant traverses all tasks, this forms a path. This path
is a feasible solution to the problem. In order to ensure the
quality of the solution, avoid falling into local optimum and
instead achieve the optimal solution as much as possible;
a ﬁtness function is used to evaluate the quality of feasible
solutions. The ﬁtness function needs to be set based on the
optimization model problems. According to the scheduling
optimization model in this paper, there are two scheduling
targets of makespan and costs minimized. Therefore, the ﬁtness function of the formula 10 is as the evaluation function:
Fit(x) = γ e(−F(x)) + δe−B(x)
Here, γ and δ are the weight factors of the performance
and cost, γ > δ, and γ, δ ∈(0, 1). F(x) and B(x) are the
performance and cost objective functions, respectively. Their
values are smaller, and the values of makespan and cost are
smaller, which means the ﬁtness of the method is higher.
3) UPDATING PHEROMONE
If the ﬁtness of a path is high, the pheromone of the path
should strengthen to allow more ants to ﬁnd this path.
As such, it is necessary to update the pheromone for each side
of the path. The updating rule is shown as formula 11.
τ(Ti, Rj) = (1 −ρ) · τ(Ti, Rj) + 1τ(Ti, Rj)
evaporation
1τ(Ti, Rj) is the incremental amount of the pheromone.
VOLUME 3, 2015
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
The ﬁtness of the path is higher, and the incremental amount
is bigger.
1τ(Ti, Rj) =
Q(γ e(−f (x)) + δe(−b(x))),
(Ti, Rj) ∈Pathl
wherein Q is the constant and its value is taken as 100.
F(x) and B(x) are smaller, and the incremental amount of
pheromone is higher. The good solution will be enhanced and
the poor solution will be reduced by the pheromone update.
After several iterations, more and more ants will tend toward
the optimal path. The pheromone evaporation factor ρ is used
to prevent the local optimum.
implementation
optimization – scheduling algorithm is shown as the pseudocode of Algorithm 1.
Algorithm 1 Multi-Objective Ant Colony Optimization
Scheduling Method
T1, T2, . . . , Ti, . . . , TK, R1, R2, . . . , Rj, . . . , RN, itermax
map (Ti, Rj)
Initialize ants distribution among Rj;
FOR each ant do
FOR each Ti do
Select next route;;
Evaluate ﬁtness of individual path by formula 10;
IF rj meets the optimization problem Then
Output the map (Ti, Rj);
Update pheromone along its path by formula 11
UNTIL itermax
Where itermax is the maximum number of iterations, which
has been set to 100 in this paper.
B. COMPLEXITY ANALYSIS OF ANT COLONY
OPTIMIZATION SCHEDULING METHOD
The method‘s time complexity has been divided into
two parts. The ﬁrst is to ﬁnd the optimal path. The algorithm complexity is O(K). The second part is the optimization judgment to meet the cost and performance constraints.
The complexity is O(KN). So the overall complexity of the
algorithm is O(KN).
For space complexity, it is clear that the number of tasks,
the number of resources and the number of ants are all constants. At the same time, the method does not involve dynamic
variables, or recursive operations. Therefore, it does not need
extra space and the space complexity is O(1).
VI. SIMULATION EXPERIMENTS
There are two kinds of experiments. One is simulation
experiments, the other is the real application instance
experiments. Some simulation experiments were designed
performance
A. EXPERIMENTS AND PARAMETERS SETUP
The experiments compared the scheduling policy of this
paper with the original colony algorithm, the classical
heuristic algorithm Min-Min algorithm , and FCFS
scheduling. The original ant colony algorithm was only
used to schedule without considering budget constraints. The
Min-Min algorithm has an advantage on scheduling time and
focuses on optimizing completion times.
experiments
Cloudsim 3.0. There were 100 hosts and 10 virtual machines
on each host. The parameter setup of VMs in the data center
is shown in Table 2. The parameter setup of tasks is shown
in Table 3.
TABLE 2. The parameter setup of VMs in data center.
TABLE 3. The parameter setup of task in data center.
Additionally, the number of ants in the ant colony algorithm and in the original ant colony algorithm is 10 in the
experiments. The number of iterations is 100. Our experiments tested and compared the performance of 10 groups of
different α, β and ρ parameters. We then selected the best
set of parameters as the parameters in experiments. α, β were
taken 3 and 2, respectively. ρ has been set to 0.01.
B. EXPERIMENT METRICS
experiments
performance-evaluation
indicators: makespan, which is the total time of all tasks
and is used to evaluate scheduling performance; cost of user,
which was different because of different scheduling methods
and resources; deadline violation rate, which is the feedback
effect of QoS because a perfect stable system requires feedback to verify its performance; the fourth indicator is resource
utilization.
VOLUME 3, 2015
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
The cost was calculated using resource cost and the completion of tasks, and the price refers to Amazon cloud service
charges price. Cbase = 0.17/hour, Mbase = 0.05/GB/hour.
Additionally, transmission costs for CPU and memory have
been set as follows: CTrans = 0.005, MTrans = 0.50 .
The deadline violation rate is also shown as the scheduling
performance, which was obtained using this form. If the
running time (response time + completion time) of task Ti is
greater than the deadline Di, the task is considered to violate
the deadline constraints. The deadline violation rate Dv is
calculated as formula 13:
where nd is the number violating the deadline time in
C. MAKESPAN
100-600 tasks were submitted 10 times repeatedly. The
results output the execution time of each task, after which
point makespan was calculated to get the mean value. There
are two different arrival rates of 10 and 80 per second. The
results are shown in Figs. 2 and 3.
FIGURE 2. Makespan, the arrival rate = 10.
Figs. 2 and 3 show the makespan of four methods with
different arrival rates. First, the different arrival rates affect
the makespan results. When the arrival rate is bigger, the
response time is greater. Therefore, the makespan is higher
when the arrival rate is 80 per second.
Secondly, the makespan is different for different methods.
It is clear that the performance of PBACO is the best. When
the number of tasks is lower, the makespan for PBACO is
similar to the Min-Min method. However, as the number of
tasks increase, the PBACO method shows a great advantage.
At its worst, PBACO is approximately equal to the Min-Min
algorithm, which has advantages regarding completion time.
At its best, PBACO increases nearly 56.6% relative to the
FCFS algorithm. Because this method uses the evaluation
FIGURE 3. Makespan, the arrival rate = 80.
function of the performance to assess the quality of the solution, it is easier to ﬁnd the optimal solution than the original
colony algorithm. This method is also superior to the original
colony algorithm.
The second experiment veriﬁes the costs of the four methods,
200 and 600 tasks at different deadlines. PBACO used the
resource cost model and cost constraints in this paper, while
the other three methods only considered the deadline, without
considering the budget cost constraints. The results are shown
in Figs. 4 and 5.
FIGURE 4. Costs with different deadline, K = 200.
Figs. 4 and 5 show the costs of 200 and 600 tasks. When
the number of tasks is less, the costs of various methods are
not very different. PBACO is the best. The reducing range is
VOLUME 3, 2015
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
FIGURE 5. Costs with different deadline, K = 600.
from 7% to 23% compared to other methods. However, as the
number of tasks increased, the differences of the four methods
likewise increased. PBACO had more obvious advantages;
it reduced by 38% relative to the Min-Min algorithm at its
best. This is because PBACO increases the cost constraints
relative to other methods and uses the cost function to evaluate and adjust the quality of the solution.
Figs. 4 and 5 also reﬂect the relationship between resource
costs and deadlines. In a tight deadline, the task requires
better and more performance resources for completion.
Therefore, the corresponding costs will be higher, which is
consistent with the resource cost model.
E. THE VIOLATION RATE OF DEADLINE
The third experiment veriﬁed scheduling QoS through the
deadline violation rates. It selected 200 and 600 tasks and
set some of the larger tasks beyond the deadline. The deadline violation rates for different task deadline are shown
in Figs. 6 and 7.
Figs. 6 and 7 show the deadline violation rates for different
task deadlines. It is obvious that the deadline violation rates
have been lower with a lower number of tasks. Fewer tasks
have more resources to select. At the same time, the deadline
violation rates relating to tight deadlines are high for all four
methods, and decline when the deadlines loosen.
PBACO is still the best of the four methods and reduces by
34% compared to FCFS algorithm at its best. The PBACO
method takes into account the deadline constraints; at the
same time it evaluates and adjusts the quality of the solutions
through the evaluation function of the performance target.
F. THE RESOURCE UTILIZATION
Ten resources were selected and scheduled 100 times by
the four methods. Each resources instance was used as the
FIGURE 6. The violation rate of deadline, K = 200.
FIGURE 7. The violation rate of deadline, K = 600.
resource utilization for each scheduling. The results are
shown in Figs. 8 and 9.
Figs. 8 and 9 shows the performance of resource utilization and load balancing with different deadlines. When the
deadline is tight, the tasks tend to schedule several resources
R1, R4, and R9. Therefore, the resource utilization and load
balancing performance are worse. The reason of the tasks
tending to schedule R1, R4, and R9 is as follows. The CPU
computing ability for these three resources is all 2660 MIPs,
and the remaining resources are 1860 MIPs. The original load
of these three resources is lower than the others.
However, PBACO is still the best of the four methods. The
difference for the resource utilization of PBACO is less than
VOLUME 3, 2015
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
FIGURE 8. The resource utilization, the deadline ≥100.
FIGURE 9. The resource utilization, the deadline <100.
the other methods. This means PBACO achieve load balancing as often as possible because the PBACO performance
evaluation function evaluates and adjusts the quality of the
solution in a timely manner and avoids falling into the local
optimal solution. Thus it prevents the task and always tends
to select good resource performance, which makes these
good resources overload, consequently impacting efﬁcient
task execution. At the same time, PBACO prevents some light
resource load very light so that it does not waste resources.
VII. APPLICATION INSTANCE EXPERIMENTS
In order to further verify the performance of PBACO,
some application instance experiments were designed.
These application instances were used as IaaS applications in
three papers , , . Zuo et al. also used bionic
intelligence (PSO) algorithm for multi-objective optimization
scheduling whose research goal and method are very similar to PBACO. Therefore, PBACO were compared with the
methods of SLPSO-SA(SLPSO-based scheduling approach)
and SPSO-SA(standard PSO-based scheduling approach) in
paper .
The application instance 1 (termed app 1 in the following tables and ﬁgures) includes eight small applications,
parameters are as shown in table 4. And the application
instance 2 and 3 (termed app 2 and 3 in the following
tables and ﬁgures) includes ﬁve and eight larger applications,
respectively. There parameters are as shown in table 5. All
the deadline and runtime of each application are integer, and
are uniformly distribution because PBACO, SLPSO-SA and
SPSO-SA need restrict the search space.
TABLE 4. The parameter setup of application instances.
TABLE 5. The parameter setup of cloud resources.
The experiments still used these four performanceevaluation indicators: makespan, cost, deadline violation rate
and resource utilization. Resource utilization is the average
CPU and memory utilization, respectively, which are calculated as formula 14 and 15.
totalMemory
where K is the number of tasks. totalCPU and totalMemory are
the the total number of CPU and memory.
A. MAKESPAN
First, the experiment obtained the makespans of three application instances. The results are shown in Figs. 10 and 11. The
values of application instance 1, 2 and 3 are very different.
Therefore, in order to show clearly, two ﬁgures are used to
show the results.
Figs. 10 and 11 show the makespan of three methods.
PBACO is the best of three methods. This is because the main
optimization goal of PBACO is to minimize the makespan,
while SLPSO-SA regards the proﬁt as the main optimization
goal. Therefore, the results are reasonable and show the effectiveness of PBACO.
VOLUME 3, 2015
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
FIGURE 10. Makespan of Application instance 1.
FIGURE 11. Makespan of Application instance 2 and 3.
Second, the calculation method of cost and the parameters are
slightly different between PBACO and SLPSO-SA. So here,
this experiment used the price and standards of Amazon cloud
service charges price. The main goal SLPSO-SA is proﬁt.
In order to facilitate comparison, SLPSO-SA and SPSO-SA
also use cost, which is the cost to pay for completing application instances 1, 2 and. The results are shown
in ﬁgs. 12 and 13.
From ﬁgs. 12 and 13, it is very clear that the cost of
PBACO is worse than SLPSO-SA and SPSO-SA. Especially,
SLPSO-SA has very good performance in the instance 2 and 3.
This is because the main optimization goal of SLPSO-SA is
proﬁt, accordingly, it also have a good advantage on cost.
C. THE AVERAGE VIOLATION RATE OF DEADLINE
Third, the deadline violate of SLPSO - SA was obtained
according to the paper , and PBACO was obtained
FIGURE 12. Cost of Application instance 1.
FIGURE 13. Cost of Application instance 2 and 3.
FIGURE 14. The average violation rate of deadline.
according to the formula 13. Here, the experiment used the
average deadline violate of three application instances. The
results are shown in ﬁg. 14.
VOLUME 3, 2015
L. Zuo et al.: Multi-Objective Optimization Scheduling Method Based on the Ant Colony Algorithm
Fig. 14 shows that the deadline violate of PBACO and
SLPSO-SA both are very good. And they are similar. PBACO
only has a little advantage. Both of them are far better than
SPAO-SA. This is because both of them were considered
the deadline constraints so that they are greatly superior
to SPAO-SA.
D. THE RESOURCE UTILIZATION
Finally, the experiment obtained the average CPU and memory utilization of three application instances. The results are
shown in ﬁgs. 15 and 16.
FIGURE 15. The average CPU utilization.
FIGURE 16. The average memory utilization.
From ﬁgs. 15 and 16, it is very clear that the average CPU
utilization of PBACO is the highest in three methods. What
is more, PBACO has more and more obvious advantages on
application instance 3. However, for the average memory utilization, three methods are similar, PBACO only has slightly
advantages on application instance 3.
VIII. CONCLUSIONS
A multi-objective optimization scheduling method (PBACO)
was proposed based on the ant colony algorithm. First, the
PBACO resource cost model can be used to deﬁne the task
demand for resources in detail. This model reﬂects the relationship between resource costs and task costs. Secondly,
a multi-objective optimization model was proposed, based on
the model. Its main objective was to optimize the scheduling
of performance and user costs. Thirdly, an improved ant
colony algorithm was proposed to solve the optimization
problem. In order to prevent the ant colony algorithm from
falling into a local optimal solution, this method used the
performance and budget constraint functions to evaluate the
costs and provide feedback on the quality of the solution.
It then adjusted the quality of the solution according to the
results of the evaluation and feedback. Experimental results
show that the PBACO method has a great advantage in terms
of makespan. Even in the worst case, PBACO is approximately equal to Min-Min algorithm, which has advantages
regarding completion time. At its best, PBACO increases
nearly 56.6% relative to the FCFS algorithm. The PBACO
methods are still better than other similar methods regarding
other metrics, such as cost, the violation rate of deadline and
resource utilization, proving the effectiveness of PBACO.