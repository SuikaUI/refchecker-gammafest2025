Abstractive Text Summarization using Sequence-to-sequence RNNs and
Ramesh Nallapati
IBM Watson
 
Bowen Zhou
IBM Watson
 
Cicero dos Santos
IBM Watson
 
Ça˘glar G˙ulçehre
Université de Montréal
 
Bing Xiang
IBM Watson
 
In this work, we model abstractive text
summarization using Attentional Encoder-
Decoder Recurrent Neural Networks, and
show that they achieve state-of-the-art performance on two different corpora.
propose several novel models that address
critical problems in summarization that
are not adequately modeled by the basic
architecture, such as modeling key-words,
capturing the hierarchy of sentence-toword structure, and emitting words that
are rare or unseen at training time. Our
work shows that many of our proposed
models contribute to further improvement
in performance. We also propose a new
dataset consisting of multi-sentence summaries, and establish performance benchmarks for further research.
Introduction
Abstractive text summarization is the task of generating a headline or a short summary consisting
of a few sentences that captures the salient ideas of
an article or a passage. We use the adjective ‘abstractive’ to denote a summary that is not a mere
selection of a few existing passages or sentences
extracted from the source, but a compressed paraphrasing of the main contents of the document,
potentially using vocabulary unseen in the source
This task can also be naturally cast as mapping an input sequence of words in a source document to a target sequence of words called summary. In the recent past, deep-learning based models that map an input sequence into another output sequence, called sequence-to-sequence models, have been successful in many problems such
as machine translation ,
speech recognition and
video captioning . In
the framework of sequence-to-sequence models,
a very relevant model to our task is the attentional Recurrent Neural Network (RNN) encoderdecoder model proposed in Bahdanau et al.
 , which has produced state-of-the-art performance in machine translation (MT), which is
also a natural language task.
Despite the similarities, abstractive summarization is a very different problem from MT. Unlike
in MT, the target (summary) is typically very short
and does not depend very much on the length of
the source (document) in summarization. Additionally, a key challenge in summarization is to optimally compress the original document in a lossy
manner such that the key concepts in the original
document are preserved, whereas in MT, the translation is expected to be loss-less. In translation,
there is a strong notion of almost one-to-one wordlevel alignment between source and target, but in
summarization, it is less obvious.
We make the following main contributions in
this work: (i) We apply the off-the-shelf attentional encoder-decoder RNN that was originally
developed for machine translation to summarization, and show that it already outperforms stateof-the-art systems on two different English corpora. (ii) Motivated by concrete problems in summarization that are not sufﬁciently addressed by
the machine translation based model, we propose
novel models and show that they provide additional improvement in performance. (iii) We propose a new dataset for the task of abstractive summarization of a document into multiple sentences
and establish benchmarks.
The rest of the paper is organized as follows.
In Section 2, we describe each speciﬁc problem
in abstractive summarization that we aim to solve,
and present a novel model that addresses it. SecarXiv:1602.06023v5 [cs.CL] 26 Aug 2016
tion 3 contextualizes our models with respect to
closely related work on the topic of abstractive text
summarization. We present the results of our experiments on three different data sets in Section 4.
We also present some qualitative analysis of the
output from our models in Section 5 before concluding the paper with remarks on our future direction in Section 6.
In this section, we ﬁrst describe the basic encoderdecoder RNN that serves as our baseline and then
propose several novel models for summarization,
each addressing a speciﬁc weakness in the baseline.
Encoder-Decoder RNN with Attention
and Large Vocabulary Trick
Our baseline model corresponds to the neural machine translation model used in Bahdanau et al.
The encoder consists of a bidirectional
GRU-RNN , while the decoder
consists of a uni-directional GRU-RNN with the
same hidden-state size as that of the encoder, and
an attention mechanism over the source-hidden
states and a soft-max layer over target vocabulary to generate words. In the interest of space,
we refer the reader to the original paper for a detailed treatment of this model. In addition to the
basic model, we also adapted to the summarization problem, the large vocabulary ‘trick’ (LVT)
described in Jean et al. . In our approach,
the decoder-vocabulary of each mini-batch is restricted to words in the source documents of that
batch. In addition, the most frequent words in the
target dictionary are added until the vocabulary
reaches a ﬁxed size. The aim of this technique
is to reduce the size of the soft-max layer of the
decoder which is the main computational bottleneck. In addition, this technique also speeds up
convergence by focusing the modeling effort only
on the words that are essential to a given example.
This technique is particularly well suited to summarization since a large proportion of the words in
the summary come from the source document in
Capturing Keywords using Feature-rich
In summarization, one of the key challenges is to
identify the key concepts and key entities in the
document, around which the story revolves.
order to accomplish this goal, we may need to
go beyond the word-embeddings-based representation of the input document and capture additional linguistic features such as parts-of-speech
tags, named-entity tags, and TF and IDF statistics of the words. We therefore create additional
look-up based embedding matrices for the vocabulary of each tag-type, similar to the embeddings
for words.
For continuous features such as TF
and IDF, we convert them into categorical values
by discretizing them into a ﬁxed number of bins,
and use one-hot representations to indicate the bin
number they fall into. This allows us to map them
into an embeddings matrix like any other tag-type.
Finally, for each word in the source document, we
simply look-up its embeddings from all of its associated tags and concatenate them into a single
long vector, as shown in Fig. 1. On the target side,
we continue to use only word-based embeddings
as the representation.
Hidden State
Input Laye
Output Laye
Attention mechanism
Figure 1: Feature-rich-encoder: We use one embedding
vector each for POS, NER tags and discretized TF and IDF
values, which are concatenated together with word-based embeddings as input to the encoder.
Modeling Rare/Unseen Words using
Switching Generator-Pointer
Often-times in summarization, the keywords or
named-entities in a test document that are central
to the summary may actually be unseen or rare
with respect to training data. Since the vocabulary
of the decoder is ﬁxed at training time, it cannot
emit these unseen words. Instead, a most common
way of handling these out-of-vocabulary (OOV)
words is to emit an ‘UNK’ token as a placeholder.
However this does not result in legible summaries.
In summarization, an intuitive way to handle such
OOV words is to simply point to their location in
the source document instead. We model this notion using our novel switching decoder/pointer architecture which is graphically represented in Figure 2. In this model, the decoder is equipped with
a ‘switch’ that decides between using the generator or a pointer at every time-step. If the switch
is turned on, the decoder produces a word from its
target vocabulary in the normal fashion. However,
if the switch is turned off, the decoder instead generates a pointer to one of the word-positions in the
source. The word at the pointer-location is then
copied into the summary. The switch is modeled
as a sigmoid activation function over a linear layer
based on the entire available context at each timestep as shown below.
σ(vs · (Ws
cci + bs)),
where P(si = 1) is the probability of the switch
turning on at the ith time-step of the decoder, hi
is the hidden state, E[oi−1] is the embedding vector of the emission from the previous time step,
ci is the attention-weighted context vector, and
c, bs and vs are the switch parameters. We use attention distribution over word positions in the document as the distribution to sample
the pointer from.
exp(va · (Wa
hhi−1 + Wa
i (j)) for j ∈{1, . . . , Nd}.
In the above equation, pi is the pointer value at
ith word-position in the summary, sampled from
the attention distribution Pa
i over the document
word-positions j ∈{1, . . . , Nd}, where P a
the probability of the ith time-step in the decoder
pointing to the jth position in the document, and
j is the encoder’s hidden state at position j.
At training time, we provide the model with explicit pointer information whenever the summary
word does not exist in the target vocabulary. When
the OOV word in summary occurs in multiple document positions, we break the tie in favor of its
ﬁrst occurrence. At training time, we optimize the
conditional log-likelihood shown below, with additional regularization penalties.
log P(y|x) =
(gi log{P(yi|y−i, x)P(si)}
+(1 −gi) log{P(p(i)|y−i, x)(1 −P(si))})
where y and x are the summary and document
words respectively, gi is an indicator function that
is set to 0 whenever the word at position i in the
summary is OOV with respect to the decoder vocabulary. At test time, the model decides automatically at each time-step whether to generate or to
point, based on the estimated switch probability
P(si). We simply use the arg max of the posterior probability of generation or pointing to generate the best output at each time step.
The pointer mechanism may be more robust in
handling rare words because it uses the encoder’s
hidden-state representation of rare words to decide
which word from the document to point to. Since
the hidden state depends on the entire context of
the word, the model is able to accurately point to
unseen words although they do not appear in the
target vocabulary.1
Hidden State
Input Layer
Output Layer
Figure 2: Switching generator/pointer model: When the
switch shows ’G’, the traditional generator consisting of the
softmax layer is used to produce a word, and when it shows
’P’, the pointer network is activated to copy the word from
one of the source document positions. When the pointer is
activated, the embedding from the source is used as input for
the next time-step as shown by the arrow from the encoder to
the decoder at the bottom.
Capturing Hierarchical Document
Structure with Hierarchical Attention
In datasets where the source document is very
long, in addition to identifying the keywords in
the document, it is also important to identify the
key sentences from which the summary can be
drawn. This model aims to capture this notion of
two levels of importance using two bi-directional
1Even when the word does not exist in the source vocabulary, the pointer model may still be able to identify the correct
position of the word in the source since it takes into account
the contextual representation of the corresponding ’UNK’ token encoded by the RNN. Once the position is known, the
corresponding token from the source document can be displayed in the summary even when it is not part of the training
vocabulary either on the source side or the target side.
RNNs on the source side, one at the word level
and the other at the sentence level. The attention
mechanism operates at both levels simultaneously.
The word-level attention is further re-weighted by
the corresponding sentence-level attention and renormalized as shown below:
k=1 P aw(k)P as (s(k))
w(j) is the word-level attention weight at
jth position of the source document, and s(j) is
the ID of the sentence at jth word position, P a
is the sentence-level attention weight for the lth
sentence in the source, Nd is the number of words
in the source document, and P a(j) is the re-scaled
attention at the jth word position. The re-scaled
attention is then used to compute the attentionweighted context vector that goes as input to the
hidden state of the decoder. Further, we also concatenate additional positional embeddings to the
hidden state of the sentence-level RNN to model
positional importance of sentences in the document. This architecture therefore models key sentences as well as keywords within those sentences
jointly. A graphical representation of this model is
displayed in Figure 3.
Hidden State
Input Laye
Output Laye
Hidden State
Sentence laye
Sentence-level attention
Word-level attention
Figure 3: Hierarchical encoder with hierarchical attention:
the attention weights at the word level, represented by the
dashed arrows are re-scaled by the corresponding sentencelevel attention weights, represented by the dotted arrows.
The dashed boxes at the bottom of the top layer RNN represent sentence-level positional embeddings concatenated to
the corresponding hidden states.
Related Work
A vast majority of past work in summarization
has been extractive, which consists of identifying key sentences or passages in the source document and reproducing them as summary .
Humans on the other hand, tend to paraphrase
the original story in their own words. As such, human summaries are abstractive in nature and seldom consist of reproduction of original sentences
from the document. The task of abstractive summarization has been standardized using the DUC-
2003 and DUC-2004 competitions.2 The data for
these tasks consists of news stories from various
topics with multiple reference summaries per story
generated by humans. The best performing system
on the DUC-2004 task, called TOPIARY , used a combination of linguistically
motivated compression techniques, and an unsupervised topic detection algorithm that appends
keywords extracted from the article onto the compressed output. Some of the other notable work in
the task of abstractive summarization includes using traditional phrase-table based machine translation approaches , compression
using weighted tree-transformation rules and quasi-synchronous grammar approaches .
With the emergence of deep learning as a viable
alternative for many NLP tasks , researchers have started considering this
framework as an attractive, fully data-driven alternative to abstractive summarization. In Rush et
al. , the authors use convolutional models
to encode the source, and a context-sensitive attentional feed-forward neural network to generate
the summary, producing state-of-the-art results on
Gigaword and DUC datasets. In an extension to
this work, Chopra et al. used a similar convolutional model for the encoder, but replaced the
decoder with an RNN, producing further improvement in performance on both datasets.
In another paper that is closely related to our
work, Hu et al. introduce a large dataset
for Chinese short text summarization. They show
promising results on their Chinese dataset using
an encoder-decoder RNN, but do not report experiments on English corpora.
In another very recent work, Cheng and Lapata
 used RNN based encoder-decoder for extractive summarization of documents. This model
is not directly comparable to ours since their
2 
framework is extractive while ours and that of
 , and is abstractive.
Our work starts with the same framework as
 , where we use RNNs for both
source and target, but we go beyond the standard
architecture and propose novel models that address critical problems in summarization. We also
note that this work is an extended version of Nallapati et al. . In addition to performing more
extensive experiments compared to that work, we
also propose a novel dataset for document summarization on which we establish benchmark numbers too.
Below, we analyze the similarities and differences of our proposed models with related work
on summarization.
Feature-rich encoder (Sec. 2.2): Linguistic features such as POS tags, and named-entities as well
as TF and IDF information were used in many
extractive approaches to summarization , but they are novel in the context of
deep learning approaches for abstractive summarization, to the best of our knowledge.
Switching generator-pointer model (Sec. 2.3):
This model combines extractive and abstractive
approaches to summarization in a single end-toend framework.
Rush et al. also used
a combination of extractive and abstractive approaches, but their extractive model is a separate log-linear classiﬁer with handcrafted features.
Pointer networks have also
been used earlier for the problem of rare words
in the context of machine translation , but the novel addition of switch in our
model allows it to strike a balance between when
to be faithful to the original source (e.g., for named
entities and OOV) and when it is allowed to be creative. We believe such a process arguably mimics how human produces summaries. For a more
detailed treatment of this model, and experiments
on multiple tasks, please refer to the parallel work
published by some of the authors of this work
 .
Hierarchical attention model (Sec. 2.4): Previously proposed hierarchical encoder-decoder
models use attention only at sentence-level . The novelty of our approach lies in joint
modeling of attention at both sentence and word
levels, where the word-level attention is further in-
ﬂuenced by sentence-level attention, thus capturing the notion of important sentences and important words within those sentences. Concatenation
of positional embeddings with the hidden state at
sentence-level is also new.
Experiments and Results
Gigaword Corpus
In this series of experiments3, we used the annotated Gigaword corpus as described in Rush et al.
We used the scripts made available by
the authors of this work4 to preprocess the data,
which resulted in about 3.8M training examples.
The script also produces about 400K validation
and test examples, but we created a randomly sampled subset of 2000 examples each for validation
and testing purposes, on which we report our performance. Further, we also acquired the exact test
sample used in Rush et al. to make precise
comparison of our models with theirs. We also
made small modiﬁcations to the script to extract
not only the tokenized words, but also systemgenerated parts-of-speech and named-entity tags.
Training: For all the models we discuss below, we
used 200 dimensional word2vec vectors trained on the same corpus to initialize the model embeddings, but we allowed them
to be updated during training. The hidden state dimension of the encoder and decoder was ﬁxed at
400 in all our experiments. When we used only
the ﬁrst sentence of the document as the source,
as done in Rush et al. , the encoder vocabulary size was 119,505 and that of the decoder stood
at 68,885. We used Adadelta for
training, with an initial learning rate of 0.001. We
used a batch-size of 50 and randomly shufﬂed the
training data at every epoch, while sorting every
10 batches according to their lengths to speed up
training. We did not use any dropout or regularization, but applied gradient clipping. We used
early stopping based on the validation set and used
the best model on the validation set to report all
test performance numbers. For all our models, we
employ the large-vocabulary trick, where we restrict the decoder vocabulary size to 2,0005, because it cuts down the training time per epoch by
nearly three times, and helps this and all subse-
3We used Kyunghyun Cho’s code ( 
com/kyunghyuncho/dl4mt-material) as the starting point.
4 
5Larger values improved performance only marginally,
but at the cost of much slower training.
quent models converge in only 50%-75% of the
epochs needed for the model based on full vocabulary.
Decoding: At decode-time, we used beam search
of size 5 to generate the summary, and limited the
size of summary to a maximum of 30 words, since
this is the maximum size we noticed in the sampled validation set. We found that the average system summary length from all our models (7.8 to
8.3) agrees very closely with that of the ground
truth on the validation set (about 8.7 words), without any speciﬁc tuning.
Computational costs: We trained all our models on a single Tesla K40 GPU. Most models took
about 10 hours per epoch on an average except the
hierarchical attention model, which took 12 hours
per epoch. All models typically converged within
15 epochs using our early stopping criterion based
on the validation cost.
The wall-clock training
time until convergence therefore varies between
6-8 days depending on the model.
Generating
summaries at test time is reasonably fast with a
throughput of about 20 summaries per second on
a single GPU, using a batch size of 1.
Evaluation metrics: Similar to and , we use the full
length F1 variant of Rouge6 to evaluate our system. Although limited length recall was the preferred metric for most previous work, one of its
disadvantages is choosing the length limit which
varies from corpus to corpus, making it difﬁcult
for researchers to compare performances.
Fulllength recall, on the other hand, does not impose
a length restriction but unfairly favors longer summaries. Full-length F1 solves this problem since it
can penalize longer summaries, while not imposing a speciﬁc length restriction.
In addition, we also report the percentage of
tokens in the system summary that occur in the
source (which we call ‘src. copy rate’ in Table 1).
We describe all our experiments and results on the
Gigaword corpus below.
words-lvt2k-1sent: This is the baseline attentional
encoder-decoder model with the large vocabulary
trick. This model is trained only on the ﬁrst sentence from the source document, as done in Rush
et al. .
words-lvt2k-2sent: This model is identical to the
model above except for the fact that it is trained
6 
on the ﬁrst two sentences from the source. On
this corpus, adding the additional sentence in the
source does seem to aid performance, as shown
in Table 1. We also tried adding more sentences,
but the performance dropped, which is probably
because the latter sentences in this corpus are not
pertinent to the summary.
words-lvt2k-2sent-hieratt: Since we used two sentences from source document, we trained the hierarchical attention model proposed in Sec 2.4.
As shown in Table 1, this model improves performance compared to its ﬂatter counterpart by learning the relative importance of the ﬁrst two sentences automatically.
feats-lvt2k-2sent: Here, we still train on the ﬁrst
two sentences, but we exploit the parts-of-speech
and named-entity tags in the annotated gigaword
corpus as well as TF, IDF values, to augment the
input embeddings on the source side as described
in Sec 2.2. In total, our embedding vector grew
from the original 100 to 155, and produced incremental gains compared to its counterpart wordslvt2k-2sent as shown in Table 1, demonstrating the
utility of syntax based features in this task.
feats-lvt2k-2sent-ptr: This is the switching generator/pointer model described in Sec. 2.3, but in
addition, we also use feature-rich embeddings on
the document side as in the above model. Our experiments indicate that the new model is able to
achieve the best performance on our test set by all
three Rouge variants as shown in Table 1.
Comparison with state-of-the-art:
We compared the performance of our model words-lvt2k-
1sent with state-of-the-art models on the sample
created by Rush et al. , as displayed in the
bottom part of Table 1. We also trained another
system which we call words-lvt5k-1sent which
has a larger LVT vocabulary size of 5k, but also
has much larger source and target vocabularies of
400K and 200K respectively.
The reason we did not evaluate our best validation models here is that this test set consisted of
only 1 sentence from the source document, and did
not include NLP annotations, which are needed
in our best models. The table shows that, despite
this fact, our model outperforms the ABS+ model
of Rush et al. with statistical signiﬁcance.
In addition, our models exhibit better abstractive
ability as shown by the src. copy rate metric in the
last column of the table. Further, our larger model
words-lvt5k-1sent outperforms the state-of-the-art
model of with statistically
signiﬁcant improvement on Rouge-1.
We believe the bidirectional RNN we used to
model the source captures richer contextual information of every word than the bag-of-embeddings
representation used by Rush et al. and
Chopra et al. in their convolutional attentional encoders, which might explain our superior
performance.
Further, explicit modeling of important information such as multiple source sentences, word-level linguistic features, using the
switch mechanism to point to source words when
needed, and hierarchical attention, solve speciﬁc
problems in summarization, each boosting performance incrementally.
DUC Corpus
The DUC corpus7 comes in two parts: the 2003
corpus consisting of 624 document, summary
pairs and the 2004 corpus consisting of 500 pairs.
Since these corpora are too small to train large
neural networks on, Rush et al. trained their
models on the Gigaword corpus, but combined it
with an additional log-linear extractive summarization model with handcrafted features, that is
trained on the DUC 2003 corpus. They call the
original neural attention model the ABS model,
and the combined model ABS+.
Chopra et al.
 also report the performance of their RAS-
Elman model on this corpus and is the current
state-of-the-art since it outperforms all previously
published baselines including non-neural network
based extractive and abstractive systems, as measured by the ofﬁcial DUC metric of recall at 75
bytes. In these experiments, we use the same metric to evaluate our models too, but we omit reporting numbers from other systems in the interest of
In our work, we simply run the models trained
on Gigaword corpus as they are, without tuning
them on the DUC validation set. The only change
we made to the decoder is to suppress the model
from emitting the end-of-summary tag, and force
it to emit exactly 30 words for every summary,
since the ofﬁcial evaluation on this corpus is based
on limited-length Rouge recall.
On this corpus
too, since we have only a single sentence from
source and no NLP annotations, we ran just the
models words-lvt2k-1sent and words-lvt5k-1sent.
The performance of this model on the test set
7 
is compared with ABS and ABS+ models, RAS-
Elman from , as well as TOP-
IARY, the top performing system on DUC-2004 in
Table 2. We note our best model words-lvt5k-1sent
outperforms RAS-Elman on two of the three variants of Rouge, while being competitive on Rouge-
words-lvt2k-1sent
words-lvt5k-1sent
Table 2: Evaluation of our models using the limited-length
Rouge Recall at 75 bytes on DUC validation and test sets.
Our best model, although trained exclusively on the Gigaword corpus, consistently outperforms the ABS+ model
which is tuned on the DUC-2003 validation corpus in addition to being trained on the Gigaword corpus.
CNN/Daily Mail Corpus
The existing abstractive text summarization corpora including Gigaword and DUC consist of only
one sentence in each summary. In this section,
we present a new corpus that comprises multisentence summaries. To produce this corpus, we
modify an existing corpus that has been used
for the task of passage-based question answering
 .
In this work, the authors used the human generated abstractive summary bullets from new-stories in CNN and Daily
Mail websites as questions (with one of the entities hidden), and stories as the corresponding passages from which the system is expected to answer the ﬁll-in-the-blank question. The authors released the scripts that crawl, extract and generate
pairs of passages and questions from these websites. With a simple modiﬁcation of the script, we
restored all the summary bullets of each story in
the original order to obtain a multi-sentence summary, where each bullet is treated as a sentence. In
all, this corpus has 286,817 training pairs, 13,368
validation pairs and 11,487 test pairs, as deﬁned
by their scripts. The source documents in the training set have 766 words spanning 29.74 sentences
on an average while the summaries consist of 53
words and 3.72 sentences. The unique characteristics of this dataset such as long documents, and
ordered multi-sentence summaries present interesting challenges, and we hope will attract future
Model name
Src. copy rate (%)
Full length F1 on our internal test set
words-lvt2k-1sent
words-lvt2k-2sent
words-lvt2k-2sent-hieratt
feats-lvt2k-2sent
feats-lvt2k-2sent-ptr
Full length F1 on the test set used by 
ABS+ 
words-lvt2k-1sent
RAS-Elman 
words-lvt5k-1sent
Table 1: Performance comparison of various models. ’*’ indicates statistical signiﬁcance of the corresponding model with
respect to the baseline model on its dataset as given by the 95% conﬁdence interval in the ofﬁcial Rouge script. We report
statistical signiﬁcance only for the best performing models. ’src. copy rate’ for the reference data on our validation sample is
45%. Please refer to Section 4 for explanation of notation.
words-lvt2k
words-lvt2k-hieratt
words-lvt2k-temp-att
Table 3: Performance of various models on CNN/Daily
Mail test set using full-length Rouge-F1 metric. Bold faced
numbers indicate best performing system.
researchers to build and test novel models on it.
The dataset is released in two versions: one
consisting of actual entity names, and the other,
in which entity occurrences are replaced with
document-speciﬁc integer-ids beginning from 0.
Since the vocabulary size is smaller in the
anonymized version, we used it in all our experiments below. We limited the source vocabulary
size to 150K, and the target vocabulary to 60K,
the source and target lengths to at most 800 and
100 words respectively. We used 100-dimensional
word2vec embeddings trained on this dataset as
input, and we ﬁxed the model hidden state size at
200. We also created explicit pointers in the training data by matching only the anonymized entityids between source and target on similar lines as
we did for the OOV words in Gigaword corpus.
Computational costs: We used a single Tesla K-
40 GPU to train our models on this dataset as well.
While the ﬂat models (words-lvt2k and wordslvt2k-ptr) took under 5 hours per epoch, the hierarchical attention model was very expensive, consuming nearly 12.5 hours per epoch. Convergence
of all models is also slower on this dataset compared to Gigaword, taking nearly 35 epochs for
all models. Thus, the wall-clock time for training until convergence is about 7 days for the ﬂat
models, but nearly 18 days for the hierarchical attention model. Decoding is also slower as well,
with a throughput of 2 examples per second for
ﬂat models and 1.5 examples per second for the
hierarchical attention model, when run on a single
GPU with a batch size of 1.
Evaluation: We evaluated our models using the
full-length Rouge F1 metric that we employed for
the Gigaword corpus, but with one notable difference: in both system and gold summaries, we considered each highlight to be a separate sentence.8
Results: Results from the basic attention encoderdecoder as well as the hierarchical attention model
are displayed in Table 3. Although this dataset is
smaller and more complex than the Gigaword corpus, it is interesting to note that the Rouge numbers are in the same range. However, the hierarchical attention model described in Sec.
outperforms the baseline attentional decoder only
marginally.
Upon visual inspection of the system output, we
noticed that on this dataset, both these models produced summaries that contain repetitive phrases
or even repetitive sentences at times. Since the
summaries in this dataset involve multiple sentences, it is likely that the decoder ‘forgets’ what
part of the document was used in producing earlier
highlights. To overcome this problem, we used
the Temporal Attention model of Sankaran et al.
 that keeps track of past attentional weights
of the decoder and expliticly discourages it from
attending to the same parts of the document in future time steps. The model works as shown by the
8On this dataset, we used the pyrouge script (https://
pypi.python.org/pypi/pyrouge/0.1.0) that allows evaluation of each sentence as a separate unit. Additional pre-processing involves assigning each highlight to its
own "<a>" tag in the system and gold xml ﬁles that go as
input to the Rouge evaluation script. Similar evaluation was
also done by .
Source Document
( @entity0 ) wanted : ﬁlm director , must be eager to shoot footage of golden lassos and invisible
jets . <eos> @entity0 conﬁrms that @entity5 is leaving the upcoming " @entity9 " movie ( the
hollywood reporter ﬁrst broke the story ) . <eos> @entity5 was announced as director of the movie
in november . <eos> @entity0 obtained a statement from @entity13 that says , " given creative
differences , @entity13 and @entity5 have decided not to move forward with plans to develop and
direct ’ @entity9 ’ together . <eos> " ( @entity0 and @entity13 are both owned by @entity16
. <eos> ) the movie , starring @entity18 in the title role of the @entity21 princess , is still set
for release on june 00 , 0000 . <eos> it ’s the ﬁrst theatrical movie centering around the most
popular female superhero . <eos> @entity18 will appear beforehand in " @entity25 v. @entity26
: @entity27 , " due out march 00 , 0000 . <eos> in the meantime , @entity13 will need to ﬁnd
someone new for the director ’s chair . <eos>
Ground truth Summary
@entity5 is no longer set to direct the ﬁrst " @entity9 " theatrical movie <eos> @entity5 left the
project over " creative differences " <eos> movie is currently set for 0000
words-lvt2k
@entity0 conﬁrms that @entity5 is leaving the upcoming " @entity9 " movie <eos> @entity13
and @entity5 have decided not to move forward with plans to develop <eos> @entity0 conﬁrms
that @entity5 is leaving the upcoming " @entity9 " movie
words-lvt2k-hieratt
@entity5 is leaving the upcoming " @entity9 " movie <eos> the movie is still set for release on
june 00 , 0000 <eos> @entity5 is still set for release on june 00 , 0000
words-lvt2k-temp-att
@entity0 conﬁrms that @entity5 is leaving the upcoming " @entity9 " movie <eos> the movie is
the ﬁrst ﬁlm to around the most popular female actor <eos> @entity18 will appear in " @entity25
, " due out march 00 , 0000
Table 4: Comparison of gold truth summary with summaries from various systems. Named entities and
numbers are anonymized by the preprocessing script. The "<eos>" tags represent the boundary between
two highlights. The temporal attention model (words-lvt2k-temp-att) solves the problem of repetitions in
summary as exhibited by the models words-lvt2k and words-lvt2k-hieratt by encouraging the attention
model to focus on the uncovered portions of the document.
following simple equations:
t is the unnormalized attention-weights
vector at the tth time-step of the decoder.
other words, the temporal attention model downweights the attention weights at the current time
step if the past attention weights are high on the
same part of the document.
Using this strategy,
the temporal attention
model improves performance signiﬁcantly over
both the baseline model as well as the hierarchical
attention model. We have also noticed that there
are fewer repetitions of summay highlights produced by this model as shown in the example in
These results, although preliminary, should
serve as a good baseline for future researchers to
compare their models against.
Qualitative Analysis
Table 5 presents a few high quality and poor quality output on the validation set from feats-lvt2k-
2sent, one of our best performing models. Even
when the model differs from the target summary,
its summaries tend to be very meaningful and relevant, a phenomenon not captured by word/phrase
matching evaluation metrics such as Rouge. On
the other hand, the model sometimes ‘misinterprets’ the semantics of the text and generates a
summary with a comical interpretation as shown
in the poor quality examples in the table. Clearly,
capturing the ‘meaning’ of complex sentences remains a weakness of these models.
Our next example output, presented in Figure
4, displays the sample output from the switching
generator/pointer model on the Gigaword corpus.
It is apparent from the examples that the model
learns to use pointers very accurately not only for
named entities, but also for multi-word phrases.
Despite its accuracy, the performance improvement of the overall model is not signiﬁcant. We
believe the impact of this model may be more pronounced in other settings with a heavier tail distribution of rare words. We intend to carry out more
experiments with this model in the future.
On CNN/Daily Mail data, although our models
are able to produce good quality multi-sentence
summaries, we notice that the same sentence or
Good quality summary output
S: a man charged with the murder last year of a british backpacker confessed to the slaying on the night he was charged
with her killing , according to police evidence presented at a
court hearing tuesday . ian douglas previte , ## , is charged
with murdering caroline stuttle , ## , of yorkshire , england
T: man charged with british backpacker ’s death confessed
to crime police ofﬁcer claims
O: man charged with murdering british backpacker confessed to murder
S: following are the leading scorers in the english premier
league after saturday ’s matches : ## - alan shearer -lrbnewcastle united -rrb- , james beattie .
T: leading scorers in english premier league
O: english premier league leading scorers
S: volume of transactions at the nigerian stock exchange
has continued its decline since last week , a nse ofﬁcial said
thursday . the latest statistics showed that a total of ##.###
million shares valued at ###.### million naira -lrb- about
#.### million us dollars -rrb- were traded on wednesday in
#,### deals .
T: transactions dip at nigerian stock exchange
O: transactions at nigerian stock exchange down
Poor quality summary output
S: broccoli and broccoli sprouts contain a chemical that kills
the bacteria responsible for most stomach cancer , say researchers , conﬁrming the dietary advice that moms have
been handing out for years . in laboratory tests the chemical
, <unk> , killed helicobacter pylori , a bacteria that causes
stomach ulcers and often fatal stomach cancers .
T: for release at #### <unk> mom was right broccoli is
good for you say cancer researchers
O: broccoli sprouts contain deadly bacteria
S: norway delivered a diplomatic protest to russia on monday after three norwegian ﬁsheries research expeditions
were barred from russian waters . the norwegian research
ships were to continue an annual program of charting ﬁsh
resources shared by the two countries in the barents sea region .
T: norway protests russia barring ﬁsheries research ships
O: norway grants diplomatic protest to russia
S: j.p. morgan chase ’s ability to recover from a slew of
recent losses rests largely in the hands of two men , who are
both looking to restore tarnished reputations and may be
considered for the top job someday . geoffrey <unk> , now
the co-head of j.p. morgan ’s investment bank , left goldman
, sachs & co. more than a decade ago after executives say
he lost out in a bid to lead that ﬁrm .
T: # executives to lead j.p. morgan chase on road to recovery
O: j.p. morgan chase may be considered for top job
Examples of generated summaries from our best
model on the validation set of Gigaword corpus. S: source
document, T: target summary, O: system output. Although
we displayed equal number of good quality and poor quality
summaries in the table, the good ones are far more prevalent
than the poor ones.
Figure 4: Sample output from switching generator/pointer
networks. An arrow indicates that a pointer to the source position was used to generate the corresponding summary word.
phrase often gets repeated in the summary. We believe models that incorporate intra-attention such
as Cheng et al. can ﬁx this problem by encouraging the model to ‘remember’ the words it
has already produced in the past.
Conclusion
In this work, we apply the attentional encoderdecoder for the task of abstractive summarization
with very promising results, outperforming stateof-the-art results signiﬁcantly on two different
datasets. Each of our proposed novel models addresses a speciﬁc problem in abstractive summarization, yielding further improvement in performance. We also propose a new dataset for multisentence summarization and establish benchmark
numbers on it. As part of our future work, we plan
to focus our efforts on this data and build more robust models for summaries consisting of multiple
sentences.