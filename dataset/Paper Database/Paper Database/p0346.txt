Dynamic Computation Ofﬂoading for
Mobile-Edge Computing with Energy
Harvesting Devices
Yuyi Mao, Jun Zhang, and Khaled B. Letaief, Fellow, IEEE
Mobile-edge computing (MEC) is an emerging paradigm to meet the ever-increasing computation
demands from mobile applications. By ofﬂoading the computationally intensive workloads to the MEC
server, the quality of computation experience, e.g., the execution latency, could be greatly improved.
Nevertheless, as the on-device battery capacities are limited, computation would be interrupted when
the battery energy runs out. To provide satisfactory computation performance as well as achieving green
computing, it is of signiﬁcant importance to seek renewable energy sources to power mobile devices via
energy harvesting (EH) technologies. In this paper, we will investigate a green MEC system with EH
devices and develop an effective computation ofﬂoading strategy. The execution cost, which addresses
both the execution latency and task failure, is adopted as the performance metric. A low-complexity
online algorithm, namely, the Lyapunov optimization-based dynamic computation ofﬂoading (LODCO)
algorithm is proposed, which jointly decides the ofﬂoading decision, the CPU-cycle frequencies for
mobile execution, and the transmit power for computation ofﬂoading. A unique advantage of this
algorithm is that the decisions depend only on the instantaneous side information without requiring
distribution information of the computation task request, the wireless channel, and EH processes. The
implementation of the algorithm only requires to solve a deterministic problem in each time slot, for
which the optimal solution can be obtained either in closed form or by bisection search. Moreover,
the proposed algorithm is shown to be asymptotically optimal via rigorous analysis. Sample simulation
results shall be presented to verify the theoretical analysis as well as validate the effectiveness of the
proposed algorithm.
Index Terms
Mobile-edge computing, energy harvesting, dynamic voltage and frequency scaling, power control,
QoE, Lyapunov optimization.
The authors are with the Department of Electronic and Computer Engineering, the Hong Kong University of Science and
Technology, Clear Water Bay, Kowloon, Hong Kong (e-mail: {ymaoac, eejzhang, eekhaled}@ust.hk). Khaled B. Letaief is also
with Hamad bin Khalifa University, Doha, Qatar (e-mail: ).
This work is supported by the Hong Kong Research Grants Council under Grant No. 16200214.
I. INTRODUCTION
The growing popularity of mobile devices, such as smart phones, tablet computers and wearable devices, is accelerating the advent of the Internet of Things (IoT) and triggering a revolution
of mobile applications . With the support of on-device cameras and embedded sensors, new
applications with advanced features, e.g., navigation, face recognition and interactive online
gaming, have been created. Nevertheless, the tension between resource-limited devices and
computation-intensive applications becomes the bottleneck for providing satisfactory quality of
experience (QoE) and hence may defer the advent of a mature mobile application market .
Mobile-edge computing (MEC), which provides cloud computing capabilities within the radio
access networks (RAN), offers a new paradigm to liberate the mobile devices from heavy
computation workloads . In conventional cloud computing systems, remote public clouds,
e.g., Amazon Web Services, Google Cloud Platform and Microsoft Azure, are leveraged, and
thus long latency may be incurred due to data exchange in wide area networks (WANs). In
contrast, MEC has the potential to signiﬁcantly reduce latency, avoid congestion and prolong the
battery lifetime of mobile devices by ofﬂoading the computation tasks from the mobile devices
to a physically proximal MEC server , . Thus, lots of recent efforts have been attracted
from both industry and academia .
Unfortunately, although computation ofﬂoading is effective in exploiting the powerful computation resources at cloud servers, for conventional battery-powered devices, the computation
performance may be compromised due to insufﬁcient battery energy for task ofﬂoading, i.e.,
mobile applications will be terminated and mobile devices will be out of service when the
battery energy is exhausted. This can possibly be overcome by using larger batteries or recharging
the batteries regularly. However, using larger batteries at the mobile devices implies increased
hardware cost, which is not desirable. On the other hand, recharging batteries frequently is
reported as the most unfavorable characteristic of mobile phones1, and it may even be impossible
in certain application scenarios, e.g., in the wireless sensor networks (WSNs) and the IoT for
surveillance where the nodes are typically hard-to-reach. Meanwhile, the rapidly increasing
energy consumption of the information and communication technology (ICT) sector also brings a
strong need for green computing . Energy harvesting (EH) is a promising technology to resolve
these issues, which can capture ambient recyclable energy, including solar radiation, wind, as
1CNN.com, “Battery life concerns mobile users,” available on 
well as human motion energy , and thus it facilitates self-sustainability and perpetual operation
By integrating EH techniques into MEC, satisfactory and sustained computation performance
can be achieved. While MEC with EH devices open new possibilities for cloud computing, it
also brings new design challenges. In particular, the computation ofﬂoading strategies dedicated
for MEC systems with battery-powered devices cannot take full beneﬁts of the renewable energy
sources. In this paper, we will develop new design methodologies for MEC systems with EH
A. Related Works
Computation ofﬂoading for mobile cloud computing systems has attracted signiﬁcant attention
in recent years. To increase the batteries’ lifetime and improve the computation performance, various code ofﬂoading frameworks, e.g., MAUI and ThinkAir , were proposed. However,
the efﬁciency of computation ofﬂoading highly depends on the wireless channel condition, as the
implementation of computation ofﬂoading requires data transmission. This calls for computation
ofﬂoading policies that incorporate the characteristics of wireless channels – . In , a
stochastic control algorithm adapted to the time-varying wireless channel was proposed, which
determines the ofﬂoaded software components. For the femto-cloud computing systems, where
the cloud server is formed by a set of femto access points, the transmit power, precoder and
computation load distribution were jointly optimized in . In addition, a game-theoretic decentralized computation ofﬂoading algorithm was proposed for multi-user mobile cloud computing
systems . Nevertheless, these works assume non-adjustable processing capabilities of the
central processing units (CPUs) at the mobile devices, which is not energy-efﬁcient since the CPU
energy consumption increases super-linearly with the CPU-cycle frequency . With dynamic
voltage and frequency scaling (DVFS) techniques, the local execution energy consumption
for applications with strict deadline constraints is minimized by controlling the CPU-cycle
frequencies . Besides, a joint allocation of communication and computation resources for
multi-cell MIMO cloud computing systems was proposed in . Most recently, the energydelay tradeoff of mobile cloud systems with heterogeneous types of computation tasks were
investigated by a Lyapunov optimization algorithm, which decides the ofﬂoading policy, task
allocation, CPU clock speeds and selected network interfaces .
Energy harvesting was introduced to communication systems for its potential to realize selfsustainable and green communications , . With non-causal side information (SI)2, including the channel side information (CSI) and energy side information (ESI), the maximum
throughput of point-to-point EH fading channels can be achieved by the directional water-
ﬁlling algorithm . The study was later extended to EH networks with causal SI .
Cellular networks with renewable energy supplies have also been widely investigated. Resources
allocation policies that maximize the energy efﬁciency in OFDMA systems with hybrid energy
supplies (HES), i.e., both grid and harvested energy are accessible to base stations, were proposed
in . To save the grid energy consumption, a sleep control scheme for cellular networks with
HES was developed in , and a low-complexity online base station assignment and power
control algorithm based on Lyapunov optimization was proposed in .
The design principles for MEC systems with EH devices are different from those for EH
communication systems or MEC systems with battery-powered devices. On one hand, compared
to EH communication systems, computation ofﬂoading policies require a joint design of the
ofﬂoading decision, i.e., whether to ofﬂoad a task, the CPU-cycle frequencies for mobile execution3, and the transmission policy for task ofﬂoading, which makes it much more challenging.
On the other hand, compared to MEC systems with battery-powered devices, the design objective is shifted from minimizing the battery energy consumption to optimizing the computation
performance as the harvested energy comes for free. In addition, taking care of the ESI is a new
design consideration, and the time-correlated battery energy dynamics poses another challenge.
B. Contributions
In this paper, we will investigate MEC systems with EH devices and develop an effective
dynamic computation ofﬂoading algorithm. Our major contributions are summarized as follows:
• We consider an EH device served by an MEC server, where the computation tasks can
be executed locally at the device or be ofﬂoaded to the MEC server for cloud execution4.
2‘Causal SI’ refers to the case that, at any time instant, only the past and current SI is known, while non-causal SI means
that the future SI is also available.
3We use “local execution” and “mobile execution” interchangeably in this paper.
4It is worthwhile to point out that powering mobile devices in MEC systems with wireless energy harvesting was proposed in
 , where the harvested energy is radiated from a hybrid access point and fully controllable. This is different from the system
considered in this paper where the EH process is random and uncontrollable.
An execution cost that incorporates the execution delay and task failure is adopted as the
performance metric, while DVFS and power control are adopted to optimize the mobile
execution process and data transmission for computation ofﬂoading, respectively.
• The execution cost minimization (ECM) problem, which is an intractable high-dimensional
Markov decision problem, is formulated assuming causal SI, and a low-complexity online
Lyapunov optimization-based dynamic computation ofﬂoading (LODCO) algorithm is proposed. In each time slot, the system operation, including the ofﬂoading decision, the CPUcycle frequencies for mobile execution, and the transmit power for computation ofﬂoading,
only depends on the optimal solution of a deterministic optimization problem, which can
be obtained either in closed form or by bisection search.
• We identify a non-decreasing property of the scheduled CPU-cycle frequencies (the transmit
power) with respect to the battery energy level, which shows that a larger amount of available
energy leads to a shorter execution delay for mobile execution (MEC server execution).
Performance analysis for the LODCO algorithm is also conducted. It is shown that the
proposed algorithm can achieve asymptotically optimal performance of the ECM problem
by tuning a two-tuple control parameters. Moreover, it does not require statistical information
of the involved stochastic processes, including the computation task request, the wireless
channel, and EH processes, which makes it applicable even in unpredictable environments.
• Simulation results are provided to verify the theoretical analysis, especially the asymptotic
optimality of the LODCO algorithm. Moreover, the effectiveness of the proposed policy is
demonstrated by comparisons with three benchmark polices with greedy harvested energy
allocation. It is shown that the LODCO algorithm not only achieves signiﬁcant performance
improvement in terms of execution cost, but also effectively reduces task failure.
The organization of this paper is as follows. In Section II, we introduce the system model.
The ECM problem is formulated in Section III. The LODCO algorithm for the ECM problem
is proposed in Section IV and its performance analysis is conducted in Section V. We show the
simulation results in Section VI and conclude this paper in Section VII.
II. SYSTEM MODEL
In this section, we will introduce the system model studied in this paper, i.e., a mobile-edge
computing (MEC) system with an EH device. Both the computation model and energy harvesting
model will be discussed.
A. Mobile-edge Computing Systems with EH Devices
&RPSXWLQJWDVNLQSXW
(+PRELOHGHYLFH
0(&VHUYHU
A mobile-edge computing system with an EH mobile device.
We consider an MEC system consisting of a mobile device and an MEC server as shown in
Fig. 1. In particular, the mobile device is equipped with an EH component and powered purely
by the harvested renewable energy. The MEC server, which could be a small data center managed
by the telecom operator, is located at a distance of d meters away and can be accessed by the
mobile device through the wireless channel. The mobile device is associated with a system-level
clone at the MEC server, namely, the cloud clone, which runs a virtual machine and can execute
the computation tasks on behalf of the mobile device . By ofﬂoading the computation tasks
for MEC, the computation experience can be improved signiﬁcantly – .
We assume that time is slotted, and denote the time slot length and the time slot index set
by τ and T ≜{0, 1, · · ·}, respectively. The wireless channel is assumed to be independent and
identically distributed (i.i.d.) block fading, i.e., the channel remains static within each time slot,
but varies among different time slots. Denote the channel power gain at the tth time slot as ht,
and ht ∼FH (x) , t ∈T , where FH (x) is the cumulative distribution function (CDF) of ht. For
ease of reference, we list the key notations of our system model in Table I.
B. Computation Model
We use A (L, τd) to represent a computation task, where L (in bits) is the input size of the
task, and τd is the execution deadline, i.e., if it is decided that task A (L, τd) is to be executed, it
should be completed within time τd. The computation tasks requested by the applications running
at the mobile device are modeled as an i.i.d. Bernoulli process. Speciﬁcally, at the beginning of
each time slot, a computation task A (L, τd) is requested with probability ρ, and with probability
SUMMARY OF KEY NOTATIONS
Description
Distance between the mobile device and the MEC server
Index set of the time slots
Channel power gain from the mobile device to the MEC server in time slot t
Computation task with L bits input and deadline τd
Computation mode indicators at time slot t
Task arrival indicator at time slot t
Number of CPU cycles required to process one bit task input (A (L, τd))
Scheduled CPU-cycle frequencies for local execution at time slot t
Transmit power for computation ofﬂoading at time slot t
Maximum allowable CPU-cycle frequency (transmit power)
mobile (Dt
Execution delay of local execution (MEC server execution) at time slot t
mobile (Et
Energy consumption of local execution (MEC server execution) at time slot t
Harvested (harvestable) energy at time slot t
Maximum value of Et
Battery energy level at the beginning of time slot t
The weight of the task dropping cost
1 −ρ, there is no request. Denote ζt = 1 if a computation task is requested at the tth time slot
and ζt = 0 if otherwise, i.e., P (ζt = 1) = 1−P (ζt = 0) = ρ, t ∈T . We focus on delay-sensitive
applications with execution deadline less than the time slot length, i.e., τd ≤τ – , ,
 , and assume no buffer is available for queueing the computation requests.
Each computation task can either be executed locally at the mobile device, or be ofﬂoaded to
and executed by the MEC server. It may also happen that neither of these two computation modes
is feasible, e.g., when energy is insufﬁcient at the mobile device, and hence the computation
task will be dropped. Denote It
j ∈{0, 1} with j = {m, s, d} as the computation mode indicators,
m = 1 and It
s = 1 indicate that the computation task requested in the tth time slot
is executed at the mobile device and ofﬂoaded to the MEC server, respectively, while It
means the computation task is dropped. Thus, the computation mode indicators should satisfy
the following operation constraint:
d = 1, t ∈T .
Local Executing Model: The number of CPU cycles required to process one bit input is
denoted as X, which varies from different applications and can be obtained through off-line
measurement . In other words, W = LX CPU cycles are needed in order to successfully
execute task A (L, τd). The frequencies scheduled for the W CPU cycles in the tth time slot are
denoted as f t
w, w = 1, · · · , W, which can be implemented by adjusting the chip voltage with
DVFS techniques . As a result, the delay for executing the computation task requested in
the tth time slot locally at the mobile device can be expressed as
Accordingly, the energy consumption for local execution by the mobile device is given by
mobile = κ
where κ is the effective switched capacitance that depends on the chip architecture . Moreover, we assume the CPU-cycle frequencies are constrained by f max
CPU, i.e., f t
Mobile-edge Executing Model: In order to ofﬂoad the computation task for MEC, the input
bits of A (L, τd) should be transmitted to the MEC server. We assume sufﬁcient computation
resource, e.g., a high-speed multi-core CPU, is available at the MEC server, and thus ignore its
execution delay , , . It is further assumed that the output of the computation is of
small size so the transmission delay for feedback is negligible. Denote the transmit power as
pt, which should be less than the maximum transmit power pmax
tx . According to the Shannon-
Hartley formula, the achievable rate in the tth time slot is given by r (ht, pt) = ω log2
where ω is the system bandwidth and σ is the noise power at the receiver. Consequently, if the
computation task is executed by the MEC server, the execution delay equals the transmission
delay for the input bits, i.e.,
r (ht, pt),
and5 the energy consumed by the mobile device is given by
server = pt · Dt
server = pt ·
r (ht, pt).
5When the execution delay in the MEC server is non-negligible, the proposed algorithm can still be applied by modifying the
expression of Dt
server in (4) as Dt
server = L/r
+ τserver, where τserver denotes the execution delay in the MEC server.
C. Energy Harvesting Model
The EH process is modeled as successive energy packet arrivals, i.e., Et
H units of energy arrive
at the mobile device at the beginning of the tth time slot. We assume Et
H’s are i.i.d. among
different time slots with the maximum value of Emax
. Although the i.i.d. model is simple, it
captures the stochastic and intermittent nature of the renewable energy processes , , .
In each time slot, part of the arrived energy, denoted as et, satisfying
will be harvested and stored in a battery, and it will be available for either local execution
or computation ofﬂoading starting from the next time slot. We start by assuming that the
battery capacity is sufﬁciently large. Later we will show that by picking the values of et’s,
the battery energy level is deterministically upper-bounded under the proposed computation
ofﬂoading policy, and thus we only need a ﬁnite-capacity battery in actual implementation. More
importantly, including et’s as optimization variables facilitates the derivation and performance
analysis of the proposed algorithm. Similar techniques were adopted in previous studies, such as
 , and . Denote the battery energy level at the beginning of time slot t as Bt. Without
loss of generality, we assume B0 = 0 and Bt < +∞, t ∈T . In this paper, energy consumed for
purposes other than local computation and transmission is ignored for simplicity, while more
general energy models can be handled by the proposed algorithm with minor modiﬁcations.6
Denote the energy consumed by the mobile device in time slot t as E (It, f t, pt), which depends
on the selected computation mode, scheduled CPU-cycle frequencies and transmit power, and
can be expressed as
 It, f t, pt
mobile + It
subject to the following energy causality constraint:
 It, f t, pt
≤Bt < +∞, t ∈T .
Thus, the battery energy level evolves according to the following equation:
Bt+1 = Bt −E
 It, f t, pt
+ et, t ∈T .
6We will demonstrate how to adapt the proposed algorithm to more general energy models of mobile devices, e.g., by taking
the power consumption of screens and operating systems into account, in Section IV-A.
With EH mobile devices, the computation ofﬂoading policy design for MEC systems becomes
much more complicated compared to that of conventional mobile cloud computing systems
with battery-powered devices. Speciﬁcally, both the ESI and CSI need to be handled, and the
temporally correlated battery energy level makes the system decision coupled in different time
slots. Consequently, an optimal computation ofﬂoading strategy should strike a good balance
between the computation performance of the current and future computation tasks.
III. PROBLEM FORMULATION
In this section, we will ﬁrst introduce the performance metric, namely, the execution cost. The
execution cost minimization (ECM) problem will then be formulated and its unique technical
challenges will be identiﬁed.
A. Execution Cost Minimization Problem
Execution delay is one of the key measures for users’ QoE – , – , which will
be adopted to optimize the computation ofﬂoading policy for the considered MEC system.
Nevertheless, due to the intermittent and sporadic nature of the harvested energy, some of the
requested computation tasks may not be able to be executed and have to be dropped, e.g., due
to lacking of energy for local computation, while the wireless channel from the mobile device
to the MEC server is in deep fading, i.e., the input of the tasks cannot be delivered. To take this
aspect into consideration, we penalize each dropped task by a unit of cost. Thus, we deﬁne the
execution cost as the weighted sum of the execution delay and the task dropping cost, which
can be expressed by the following formula:
 It, f t, pt
 ζt = 1, It
where φ (in second) is the weight of the task dropping cost, 1 (·) is the indicator function, and
D (It, f t, pt) is given by
 It, f t, pt
mobile + It
Without loss of generality, we assume that executing a task successfully is preferred to dropping
a task, i.e., τd ≤φ.
If it is decided that a task is to be executed, i.e., It
m = 1 or It
s = 1, it should be completed
before the deadline τd. In other words, the following deadline constraint should be met:
 It, f t, pt
≤τd, t ∈T .
Consequently, the ECM problem can be formulated as:
It,f t,pt,et lim
(1), (6), (8), (12)
s ≤ζt, t ∈T
 It, f t, pt
≤Emax, t ∈T
0 ≤pt ≤pmax
, w = 1, · · · , W, t ∈T ,
d ∈{0, 1}, t ∈T ,
where (13) indicates that if there is no computation task requested, neither mobile execution nor
MEC server execution is feasible. (14) is the battery discharging constraint, i.e., the amount of
battery output energy cannot exceed Emax in each time slot, which is essential for preventing
the battery from over discharging , . The maximum allowable transmit power and the
maximum CPU-cycle frequency constraints are imposed by (15) and (16), respectively, while
the zero-one indicator constraint for the computation mode indicators is represented by (17).
B. Problem Analysis
In the considered MEC system, the system state is composed of the task request, the harvestable energy, the battery energy level, as well as the channel state, and the action is the
energy harvesting and the computation ofﬂoading decision, including the scheduled CPU-cycle
frequencies and the allocated transmit power. It can be checked that the allowable action set
depends only on the current system state, and is irrelevant with the state and action history.
Besides, the objective is the long-term average execution cost. Thus, P1 is a Markov decision
process (MDP) problem. In principle, P1 can be solved optimally by standard MDP algorithms,
e.g., the relative value iteration algorithm and the linear programming reformulation approach
 . Nevertheless, for both algorithms, we need to use ﬁnite states to characterize the system,
and discretize the feasible action set. For example, if we use K = 20 states to quantize the
wireless channel, M = 20 states to characterize the battery energy level, E = 5 states to
describe the harvestable energy, and admits L = 10 transmit power levels and F = 10 CPUcycle frequencies, there are 2KME = 4000 possible system states in total. For the relative
value iteration algorithm, this will take a long time to converge as there will be as many as
L + 1 + F W feasible actions in some states. For the linear programming (LP) reformulation
approach, we need to solve an LP problem with 2KME ×
 L + 1 + F W
variables, which will
be practically infeasible even for a small value of W, e.g., 1000. In addition, it will be difﬁcult
to obtain solution insights with the MDP algorithms as they are based on numerical iteration.
Moreover, quantizing the state and action may lead to severe performance degradation, and the
memory requirement for storing the optimal policy will yet be another big challenge.
In the next section, we will propose a Lyapunov optimization-based dynamic computation
ofﬂoading (LODCO) algorithm to solve P1, which enjoys the following favorable properties:
• There is no need to quantize the system state and feasible action set, and the decision of
the LODCO algorithm within each time slot is of low complexity. In addition, there is no
memory requirement for storing the optimal policy.
• The LODCO algorithm has no prior information requirement on the channel statistics, the
distribution of the renewable energy process or the computation task request process.
• The performance of the LODCO algorithm is controlled by a two-tuple control parameters.
Theoretically, by adjusting these parameters, the proposed algorithm can behave arbitrarily
close to the optimal performance of P1.
• An upper bound of the required battery capacity is obtained, which shall provide guidelines
for practical installation of the EH components and storage units.
IV. DYNAMIC COMPUTATION OFFLOADING: THE LODCO ALGORITHM
In this section, we will develop the LODCO algorithm to solve P1. We will ﬁrst show an
important property of the optimal CPU-cycle frequencies, which helps to simplify P1. In order to
take advantages of Lyapunov optimization, we will introduce a modiﬁed ECM problem to assist
the algorithm design. The LODCO algorithm will be then proposed for the modiﬁed problem,
which also provides a feasible solution to P1. In Section V, we will show that this solution is
asymptotically optimal for P1.
A. The LODCO Algorithm
We ﬁrst show that the optimal CPU-cycle frequencies of the W CPU cycles scheduled for a
single computation task should be the same, as stated in the following lemma.
Lemma 1: If a task requested at the tth time slot is being executed locally, the optimal
frequencies of the W CPU cycles should be the same, i.e., f t
w = f t, w = 1, · · · , W.
Proof: The proof can be obtained by contradiction, which is omitted for brevity.
The property of the optimal CPU-cycle frequencies in Lemma 1 indicates that we can optimize
a scalar f t instead of a W-dimensional vector f t for each computation task, which helps to reduce
the number of optimization variables. However, due to the energy causality constraint (8), the
system’s decisions are coupled among different time slots, which makes the design challenging.
This is a common difﬁculty for the design of EH systems. We ﬁnd that by introducing a non-zero
lower bound, Emin, on the battery output energy at each time slot, such coupling effect can be
eliminated and the system operations can be optimized by ignoring (8) at each time slot. Thus,
we ﬁrst introduce a modiﬁed version of P1 as
It,ft,pt,et lim
(1), (6), (8), (12) −(17)
 It, f t, pt
[Emin, Emax] , t ∈T ,
where 0 < Emin ≤Emax. Compared to P1, only a scalar f t needs to be determined for mobile
execution, which preserves optimality according to Lemma 1, and thus Dt
mobile = W (f t)−1 and
mobile = Wκ (f t)2. Besides, all constraints in P1 are retained in P2, and an additional constraint
on the battery output energy is imposed by (18). Hence, P2 is a tightened version of P1. Denote
the optimal values of P1 and P2 as EC∗
P1 and EC∗
P2, respectively. The following proposition
reveals the relationship between EC∗
P1 and EC∗
P2, which will later help show the asymptotic
optimality of the proposed algorithm.
Proposition 1: The optimal value of P2 is greater than that of P1, but smaller than the
optimal value of P1 plus a positive constant ν (Emin), i.e., EC∗
P1 + ν (Emin),
where ν (Emin) = ρ
φ (1 −FH (η)) + 1Emin≥E
min · (φ −τEmin)
. Here, η =
min = κW 3τ −2
and τEmin = κ
Proof: Please refer to Appendix A.
In general, the upper bound in Proposition 1 is not tight. However, as Emin goes to zero,
ν (Emin) diminishes as shown in the following corollary.
Corollary 1: By letting Emin approach zero, EC∗
P2 can be made arbitrarily close to EC∗
Emin→0 ν (Emin) = 0.
Proof: The proof is omitted due to space limitation.
Proposition 1 bounds the optimal performance of P2 by that of P1, while Corollary 1 shows
that the performance of both problems can be made arbitrarily close. Actually, Corollary 1 ﬁts
our intuition, since when Emin →0, P2 reduces to P1. However, due to the temporally correlated
battery energy levels, the system’s decisions are time-dependent, and thus the vanilla version of
Lyapunov optimization techniques, where the allowable action sets are i.i.d., cannot be applied
directly. Fortunately, the weighted perturbation method offers an effective solution to circumvent
this issue . In order to present the algorithm, we ﬁrst deﬁne the perturbation parameter and
the virtual energy queue at the mobile device, which are two critical elements.
Deﬁnition 1: The perturbation parameter θ for the EH mobile device is a bounded constant
satisfying
θ ≥˜Emax + V φ · E−1
where ˜Emax = min{max{κW (f max
CPU)2 , pmax
tx τ}, Emax}, and 0 < V < +∞is a control parameter
in the LODCO algorithm with unit as J2 · second−1.7
Deﬁnition 2: The virtual energy queue ˜Bt is deﬁned as ˜Bt = Bt −θ, which is a shifted
version of the actual battery energy level at the mobile device.
As will be elaborated later, the proposed algorithm minimizes the weighted sum of the net
harvested energy and the execution cost in each time slot, with weights of the virtual energy
queue length ˜Bt, and the control parameter V , respectively, which tends to stabilize Bt around θ
and meanwhile minimize the execution cost. The LODCO algorithm is summarized in Algorithm
1. In each time slot, the system operation is determined by solving a deterministic per-time slot
problem, which is parameterized by the current system state and with all constraints in P2 except
the energy causality constraint (8).
Remark 1: When the power consumption for maintaining the basic operations at the mobile
device, denoted as Pbasic, is considered, there will be four computation modes for the time
slots with ζt = 1, i.e., mobile execution (It
m = 1), MEC server execution (It
s = 1), dropping
the task while maintaining the basic operations (It
d = 1), as well as dropping the task and
disabling the basic operations (It
f = 1); while for the time slots with ζt = 0, two modes exist,
i.e., the basic operations are maintained (It
d = 1) or disabled (It
f = 1). As a result, the energy
7Since the right-hand side of (19) increases with φ (φ ∈[τd, +∞)), a larger value of φ will result in a large value of θ, i.e.,
a higher perturbed energy level in the proposed algorithm.
consumed by the mobile device at the tth time slot can be written as E (It, f t, pt) = It
server + (It
d) Pbasicτ. We introduce a unit of cost to penalize the interruption of
basic operations, and thus the execution cost can be expressed as costt = D (It, f t, pt) + φ ·
1 (ζt = 1, It
f = 1) + ψ · 1 (It
f = 1), where ψ > 0 is the weight of the basic operations
interruption cost. It is worthwhile to note that the framework of the proposed LODCO algorithm
can be modiﬁed for this case, where the major changes lie on the selection of the perturbation
parameter θ and the solution for the per-time slot problem, and will not be detailed in this paper.
Algorithm 1 The LODCO Algorithm
1: At the beginning of time slot t, obtain the task request indicator ζt, virtual energy queue
length ˜Bt, harvestable energy Et
H, and channel gain ht.
2: Decide et, It, f t and pt by solving the following deterministic problem:
It,pt,ft,et ˜Bt 
 It, f t, pt
 It, f t, pt
 ζt = 1, It
(1), (6), (12) −(18).
3: Update the virtual energy queue according to (9) and Deﬁnition 2.
4: Set t = t + 1.
B. Optimal Computation Ofﬂoading in Each Time Slot
In this subsection, we will develop the optimal solution for the per-time slot problem, which
consists of two components: the optimal energy harvesting, i.e., to determine et, as well as the
optimal computation ofﬂoading decision, i.e., to determine It, f t and pt. The results obtained in
this subsection are essential for feasibility veriﬁcation and performance analysis of the LODCO
algorithm in Section V.
Optimal Energy Harvesting: It is straightforward to show that the optimal amount of
harvested energy et∗can be obtained by solving the following LP problem:
and its optimal solution is given by
H · 1{ ˜Bt ≤0}.
Optimal Computation Ofﬂoading: After decoupling et from the objective function, we can
then simplify the per-time slot problem into the following optimization problem PCO:
It,ft,pt −˜Bt · E
 It, f t, pt
 It, f t, pt
 ζt = 1, It
s.t. (1), (12) −(18).
Denote the feasible action set and the objective function of PCO as F t
CO (It, f t, pt),
respectively. For the time slots without computation task request, i.e., ζt = 0, there is a single
feasible solution for PCO due to (13), which is given by It
d = 1, f t = 0, and
pt = 0. Thus, we will focus on the time slots with computation task requests in the following.
First, we obtain the optimal CPU-cycle frequency for a task being executed locally at the mobile
device by solving the following optimization problem PME:
ft −˜Bt · κW
 f t2 + V · W
0 < f t ≤f max
 f t2 ∈[Emin, Emax] ,
which is obtained by plugging It
d = 0 and pt = 0 into PCO, and using the fact that
f t > 0 for local execution. (24) is the execution delay constraint for mobile execution, and (25)
is the CPU energy consumption constraint obtained by combining (14) and (18). We denote the
objective function of PME as Jt
m (f t). Note that mobile execution is not necessarily feasible due
to limited computation capability of the processing unit at the mobile device as indicated by
(23). In the following proposition, we develop the feasibility condition and the optimal solution
for PME given it is feasible.
Proposition 2: PME is feasible if and only if fL ≤fU, where fL = max{
κW , fmax}. If PME is feasible, its optimal solution is given by:
˜Bt ≥0 or ˜Bt < 0, f t
˜Bt < 0, fL ≤f t
˜Bt < 0, f t
Proof: We ﬁrst show the feasibility condition. Due to (24), f t should be no less than W/τd
in order to meet the delay constraint. Besides, since the CPU energy consumption increases with
f t, the battery output energy constraint can be equivalently expressed as
By incorporating (23), we rewrite the feasible CPU-cycle frequency set as fL = max{
τd} ≤f t ≤fU = min{
κW , fmax}, i.e., PME is feasible if and only if fL ≤fU.
Next, we proceed to show the optimality of (26) when PME is feasible. When ˜Bt ≥0, Jt
decreases with f t, i.e., the minimum value is achieved by f t = fU. When ˜Bt < 0, Jt
m (f t) is
convex with respect to f t as both −˜BtκW (f t)2 and V W/f t are convex functions of f t. By
taking the ﬁrst-order derivative of Jt
m (f t) and setting it to zero, we obtain a unique solution
3 > 0. If f t
0 < fL, Jt
m (f t) is increasing in [fL, fU], and thus f t∗= fL; if f t
m (f t) is decreasing in [fL, fU], and thus f t∗= fU; otherwise, if fL ≤f t
m (f t) is
decreasing in [fL, f t
0] and increasing in (f t
0, fU], and we have f t∗= f t
It can be seen from Proposition 2 that the optimal CPU-cycle frequency is chosen by balancing
the cost of the harvested energy and the execution cost. Interestingly, we ﬁnd that a higher CPUcycle frequency, i.e., lower execution delay, can be supported with a greater amount of available
harvested energy, which is because that the cost of renewable energy is reduced and more energy
can be used to enhance the user’s QoE, as demonstrated in Corollary 2.
Corollary 2: The optimal CPU-cycle frequency for local execution f t∗is independent with
the channel gain ht, and non-decreasing with the virtual energy queue length ˜Bt.
Proof: Since PME does not depend on ht, the optimal CPU-cycle frequency is independent
with the channel state. As fL and fU are constants independent with ˜Bt, and f t
0 increases with
˜Bt for ˜Bt < 0, we can conclude that f t∗is non-decreasing with ˜Bt based on (26).
Next, we will consider the case that the task is executed by the MEC server, where the optimal
transmit power for computation ofﬂoading can be obtained by solving the following optimization
problem PSE:
r (ht, pt) + V ·
r (ht, pt)
s.t. 0 < pt ≤pmax
r (ht, pt) ≤τd
r (ht, pt) ∈[Emin, Emax] ,
which is obtained by plugging It
d = 0 and f t = 0 into PCO, and using the fact that
pt > 0 for computation ofﬂoading. (28) and (29) stand for the execution delay constraint and the
battery output energy constraint for MEC, respectively. We denote the objective function of PSE
s (pt). Due to the wireless fading, it may happen that computation ofﬂoading is infeasible.
In order to derive the feasibility condition and the optimal solution for PSE given it is feasible,
we ﬁrst provide the following lemma to facilitate the analysis.
Lemma 2: For h > 0, g1 (h, p) ≜
r(h,p) is an increasing function of p (p > 0) that takes value
 σ ln 2 (ωh)−1 , +∞
Proof: The proof is omitted due to space limitation.
Based on Lemma 2, we combine constraints (27)-(29) into an inequality and obtain the
feasibility condition for PSE, as demonstrated in the following lemma.
Lemma 3: PSE is feasible if and only if pt
U, where pt
U are deﬁned as
respectively. In (30), pt
Emin is the unique solution for pL = r (ht, p) Emin
given σL ln 2 (ωht)−1 < Emin, and pt
Emax is the unique solution for pL = r (ht, p) Emax given
σL ln 2 (ωht)−1 < Emax.
Proof: The proof can be obtained based on Lemma 2, which is omitted for brevity.
We now develop the optimal solution for PSE as speciﬁed in the following proposition.
Proposition 3: If PSE is feasible, i.e., pt
U, its optimal solution is given by
˜Bt ≥0 or ˜Bt < 0, pt
˜Bt < 0, pt
˜Bt < 0, pt
0 is the unique solution for equation Ξ
ht, p, ˜Bt
(σ+hp) ln 2
Proof: When ˜Bt ≥0, since both terms in Jt
s (pt) are non-increasing with pt, we have
U. When ˜Bt < 0, we deﬁne g2
r(h,p), and thus
ht, p, ˜Bt
(htp+σ) ln 2
ht, p, ˜Bt
dΞ(ht,p, ˜Bt)
ht, p, ˜Bt
increases with p. In addition, as Ξ
ht, 0, ˜Bt
σ ln 2 < 0
ht, p, ˜Bt
= +∞, there exists a unique pt
0 ∈(0, +∞) satisfying Ξ
0, ∀ht > 0. Since the denominator of (32) is positive for ht > 0 and p > 0,
dg2(ht,p, ˜Bt)
for p ∈(0, pt
0), i.e., g2
ht, p, ˜Bt
is decreasing, and
dg2(ht,p, ˜Bt)
≥0 for p ∈[pt
0, +∞), i.e.,
ht, p, ˜Bt
is increasing. Consequently, when ˜Bt < 0 and pt
s (pt) is nonincreasing in [pt
0) while non-decreasing in (pt
U], and thus pt∗= pt
0; when ˜Bt < 0 and
s (pt) is non-decreasing in the feasible domain, and thus pt∗= pt
L; otherwise when
˜Bt < 0 and pt
s (pt) is non-increasing in the feasible domain, we have pt∗= pt
Similar to mobile execution, we ﬁnd a monotonic behavior of the optimal transmit power for
computation ofﬂoading, as shown in the following corollary.
Corollary 3: For a given ht such that PSE is feasible, the optimal transmit power for computation ofﬂoading pt∗is non-decreasing with ˜Bt.
Proof: Please refer to Appendix B.
Remark 2: We can see from (31) that the optimal transmit power for computation ofﬂoading
depends on both the battery energy level and the channel state. In Corollary 3, we show a higher
battery energy level awakes a higher transmit power, and thus incurs smaller execution latency.
However, the monotonicity of pt∗with respect to ht does not hold. This is due to the battery
output energy constraint, which makes the feasible set of pt change with ht.
Based on Proposition 2 and 3, the optimal computation ofﬂoading decision can be obtained
by evaluating the optimal values of PCO for the three computation modes, i.e., dropping the
task, mobile execution and MEC server execution, which can be explicitly expressed as
⟨It∗, f t∗, pt∗⟩= arg
⟨It,ft,pt⟩∈Ft
 It, f t, pt
where JCO (It, f t, pt) = 1Itm=1Jt
m (f t) + 1Its=1Jt
s (pt) + 1It
d=1,ζt=1 · V φ, and V φ is the value
of JCO (It, f t, pt) when a computation task is dropped. Note that when ζt = 1 and F t
d = 1] , 0, 0⟩}, the computation task has to be dropped, as PCO has only one
feasible solution. It is also worth mentioning that bisection search can be applied to obtain pt
0, i.e., solving PCO is of low complexity.
V. PERFORMANCE ANALYSIS
In this section, we will ﬁrst prove the feasibility of the LODCO algorithm for P2, and the
achievable performance of the proposed algorithm will then be analyzed.
A. Feasibility
We verify the feasibility of the LODCO algorithm by showing that under the optimal solution
for the per-time slot problem, the energy causality constraint in (8) is always satisﬁed, as
demonstrated in the following proposition.
Proposition 4: Under the optimal solution for the per-time slot problem, when Bt < ˜Emax,
s = 0, f t = 0, and pt = 0, and the energy causality constraint in (8) will not be
violated, i.e., the LODCO algorithm is feasible for P2 (P1).
Proof: When Bt < ˜Emax, we will show by contradiction that with the optimal computation
ofﬂoading decision, E (It, f t, pt) = 0. Suppose there exists an optimal computation ofﬂoading
decision ⟨It∗, f t∗, pt∗⟩with either It∗
m = 1 or It∗
s = 1. With this solution, due to the non-zero lower
bound of the battery output energy, i.e., (18), the value of JCO (It∗, f t∗, pt∗) will be no less than
−˜BtEmin, which is greater than V φ as achieved by the solution with It
d = 1, i.e., ⟨It∗, f t∗, pt∗⟩is
not optimal for the per-time slot problem. When Bt ≥˜Emax, as
⟨It,ft,pt⟩∈Ft
E (It, f t, pt) = ˜Emax,
E (It, f t, pt) ≤Bt, ∀⟨It, f t, pt⟩∈F t
CO. Thus, (8) holds under the LODCO algorithm.
Based on the optimal energy harvesting decision and Proposition 4, we show the battery
energy level is conﬁned within an interval as shown in the following corollary.
Corollary 4: Under the LODCO algorithm, the battery energy level at the mobile device Bt
is conﬁned within [0, θ + Emax
] , ∀t ∈T .
Proof: The lower bound of Bt is straightforward as the energy causality constraint is not
violated according to Proposition 4. The upper bound of Bt can be obtained based on the optimal
energy harvesting in (21): Suppose θ < Bt ≤θ + Emax
, since et∗= 0, we have Bt+1 ≤Bt ≤
; otherwise, if Bt ≤θ, since et∗= Et
H, we have Bt+1 ≤Bt +et∗≤θ +et∗≤θ +Emax
Consequently, we have Bt ∈[0, θ + Emax
] , ∀t ∈T .
As will be seen in the next subsection, the bounds of the battery energy level are useful for
deriving the main result on the performance of the proposed algorithm. In addition, Corollary 4
indicates that, given the size of the available energy storage CB, we can determine the control
parameter V as φ−1·
Emin, where CB should be greater than ˜Emax +Emax
in order to guarantee V > 0. This is instructive for installation of EH and storage units at the
mobile devices.
B. Asymptotic Optimality
In this subsection, we will analyze the performance of the LODOC algorithm, where an
auxiliary optimization problem P3 will be introduced to bridge the optimal performance of P2
and the performance achieved by the proposed algorithm. This will demonstrate the asymptotic
optimality of the LODCO algorithm for P1 conjointly with Proposition 1.
Firstly, we deﬁne the Lyapunov function as
Accordingly, the Lyapunov drift function and the Lyapunov drift-plus-penalty function can be
expressed as
 It, f t, pt
 ζt = 1, It
respectively.
In the following lemma, we derive an upper bound for ∆V
, which will play an important
part throughout the analysis of the LODCO algorithm.
Lemma 4: For arbitrary feasible decision variables et, It, f t and pt for P2, ∆V
bounded by
 It, f t, pt
 It, f t, pt
 ζt = 1, It
where C = (Emax
2+( ˜Emax)
Proof: Please refer to Appendix C.
Note that the terms inside the conditional expectation of the upper bound derived in Lemma
4 coincides with the objective function of the per-time slot problem in the LODCO algorithm.
To facilitate the performance analysis, we deﬁne the following auxiliary problem P3:
It,ft,pt,et lim
s.t. (1), (6), (12) −(18)
 It, f t, pt
In P3, the average harvested energy consumption equals the average harvested energy, i.e., the
energy causality constraint in P2 is replaced by (38). Denote the optimal value of P3 as EC∗
In the following lemma, we will show that P3 is a relaxation of P2.
Lemma 5: P3 is a relaxation of P2, i.e., EC∗
Proof: The proof can be obtained by showing any feasible solution for P2 is also feasible
for P3, which is omitted for brevity.
Besides, in the following lemma, we show the existence of a stationary and randomized policy
 , where the decisions are i.i.d. among different time slots and depend only on Et
H, ζt and ht,
that behaves arbitrarily close to the optimal solution of P3, meanwhile, the difference between
E [et] and E [E (It, f t, pt)] is arbitrarily small.
Lemma 6: For an arbitrary δ > 0, there exists a stationary and randomized policy Π for P3,
which decides etΠ, ItΠ, f tΠ and ptΠ, such that (1), (6), (12)-(18) are met, and the following
inequalities are satisﬁed:
 ItΠ, f tΠ, ptΠ
 ζt = 1, ItΠ
P3 + δ, t ∈T ,
 ItΠ, f tΠ, ptΠ
≤̺δ, t ∈T ,
where ̺ is a scaling constant.
Proof: The proof can be obtained by Theorem 4.5 in , which is omitted for brevity.
In Section IV, we bounded the optimal performance of the modiﬁed ECM problem P2 with
that of the original ECM problem P1, while in Lemma 5, we showed the auxiliary problem P3
is a relaxation of P2. With the assistance of these results, next, we will provide the main result
in this subsection, which characterizes the worst-case performance of the LODCO algorithm.
Theorem 1: The execution cost achieved by the proposed LODCO algorithm, denoted as
ECLODCO, is upper bounded by
ECLODCO ≤EC∗
P1 + ν (Emin) + C · V −1.
Proof: Please refer to Appendix D.
Remark 3: Theorem 1 indicates that the execution cost upper bound can be made arbitrarily
tight by letting V →+∞, Emin →0, that is, the proposed algorithm asymptotically achieves the
optimal performance of the original design problem P1. However, the optimal performance of P1
is achieved at the price of a higher battery capacity requirement and longer convergence time to
the optimal performance. This is because that, the battery energy level will be stabilized around
θ under the LODCO algorithm. As Emin decreases or V increases, θ increases accordingly, and
it will need a longer time to accumulate the harvested energy, which postpones the arrival of the
system stability and hence delays the convergence. Thus, by adjusting the control parameters,
we can balance the system performance and the battery capacity/convergence time. Similar
phenomenon was observed in our previous work .
VI. SIMULATION RESULTS
In this section, we will verify the theoretical results derived in Section V and evaluate the
performance of the proposed LODCO algorithm through simulations. In simulations, Et
H is uniformly distributed between 0 and Emax
with the average EH power given by PH = Emax
and the channel power gains are exponentially distributed with mean g0d−4, where g0 = −40
dB is the path-loss constant. In addition, κ = 10−28, τ = φ = 2 ms, w = 1 MHz, σ = 10−13 W,
= 1 W, f max
CPU = 1.5 GHz, Emax = 2 mJ, and L = 1000 bits. Besides, X = 5900 cycles per
byte, which corresponds to the workload of processing the English main page of Wikipedia .
Moreover, PH = 12 mW, d = 50 m and τd = 2 ms unless otherwise speciﬁed. For comparison,
we introduce three benchmark policies, namely, mobile execution with greedy energy allocation
(Mobile Execution (GD)), MEC server execution with greedy energy allocation (MEC Server
Execution (GD)) and dynamic ofﬂoading with greedy energy allocation (Dynamic ofﬂoading
(GD)), which minimize the execution cost at the current time slot. They work as follows:
• Mobile Execution (GD): Compute the maximum feasible CPU-cycle frequency as f t
min{Bt,Emax}
} when ζt = 1. If W/f t
U ≤τd, the computation task will be
executed locally with CPU-cycle frequency f t
U; otherwise, mobile execution is infeasible
and the task will be dropped. Note that computation ofﬂoading is disabled in this policy.
• MEC Server Execution (GD): When ζt = 1, compute the maximum feasible transmit power as pt
U = min{pmax
min{Bt,Emax}} if σL ln 2 (ωht)−1 < min{Bt, Emax}, where
min{Bt,Emax} is the unique solution of pL = r (ht, p) min{Bt, Emax}. If L/r (ht, pt
the computation task will be ofﬂoaded to the MEC server with transmit power pt
U; otherwise,
MEC server execution is infeasible and the computation task will be dropped. Note that the
computation tasks are always ofﬂoaded to the MEC server in this policy.
• Dynamic Ofﬂoading (GD): When ζt = 1, compute f t
U as in the Mobile Execution
(GD) and MEC Server Execution (GD) policies, respectively, and check if they can meet
the delay requirement. Then the feasible computation mode that incurs smaller execution
delay will be chosen. If neither computation modes is feasible, the computation task will
be dropped.
A. Theoretical Results Veriﬁcation
Time (minutes)
Battery energy level (mJ)
Battery energy level
Perturbed energy level
Time (minutes)
Average execution cost
Dynamic Offloading (Greedy)
Dynamic Offloading (LODCO)
V = 1.0 × 10−5 J2 · second−1, Emin = 0.02 mJ
V = 1.0 × 10−5 J2 · second−1, Emin = 0.04 mJ
V = 1.0 × 10−5 J2 · second−1, Emin = 0.04 mJ
V = 1.0 × 10−5 J2 · second−1, Emin = 0.02 mJ
V = 1.6 × 10−4 J2 · second−1, Emin = 0.02 mJ
V = 1.6 × 10−4 J2 · second−1, Emin = 0.02 mJ
Battery energy level and average execution cost vs. time, ρ = 0.6.
In this subsection, we will verify the feasibility and asymptotic optimality of the LODCO
algorithm developed in Proposition 4, Corollary 4, and Theorem 1, respectively. The value of
θ is chosen as the value of the right-hand side of (19). In Fig. 2(a), the battery energy level is
depicted to demonstrate the feasibility of the LODOC algorithm for P2 (P1). First, we observe
that the harvested energy keeps accumulating at the beginning, and ﬁnally stabilizes around the
perturbed energy level. This is due to the fact that in the proposed algorithm the Lyapunov
drift-plus-penalty function is minimized at each time slot. From the curves, with a larger value
of V or a smaller value of Emin, the stabilized energy level becomes higher, which agrees with
the deﬁnition of the perturbation parameter in (19). Also, we see that the energy level is conﬁned
within [0, θ + Emax
], which veriﬁes Corollary 4 and conﬁrms that the energy causality constraint
is not violated, i.e., Proposition 4 holds. The evolution of the average execution cost with respect
to time is shown in Fig. 2(b). We see that, a larger value of V or a smaller value of Emin results in
a smaller long-term average execution cost. Nevertheless, the algorithm converges more slowly
to the stable performance. Besides, if ⟨Emin, V ⟩are properly selected, the proposed algorithm
will achieve signiﬁcant performance gain compared to the benchmark policies.
V (J2⋅ second
Average execution cost
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
V (J2⋅ second
Required battery capacity (mJ)
Average execution cost and required battery capacity vs. V , ρ = 0.6 and Emin = 0.02 mJ.
The relationship between the average execution cost/required battery capacity and V is shown
in Fig. 3. We see from Fig. 3(a) that the execution cost achieved by the proposed algorithm
decreases inversely proportional to V , and eventually it converges to the optimal value of P2,
which veriﬁes the asymptotic optimality developed in Theorem 1. However, as shown from Fig.
3(b), the required battery capacity grows linearly with V since the value of θ is linearly increasing
with V . Thus, V should be chosen to balance the achievable performance, convergence time and
required battery capacity. For instance, if a battery with 18 mW capacity is available, we can
choose V = 1.6 × 10−4 J2 · second−1 for the LODCO algorithm, and then 74.4%, 51.8% and
46.3% performance gain compared to the Mobile Execution (GD), MEC Server Execution (GD)
and Dynamic Ofﬂoading (GD) policies, respectively, will be obtained.
B. Performance Evaluation
We will show the effectiveness of the proposed algorithm and demonstrate the impacts of
various system parameters in this subsection. First, the impacts of the task request probability
ρ on the system performance, including the execution cost, the average completion time of the
executed tasks and the task drop ratio, are illustrated in Fig. 4. We see in Fig. 4(a) that the
Computing task request probability, ρ
Average execution cost
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
(a) Execution cost vs. ρ
Computing task request probability, ρ
Average completion time
of the executed tasks (ms)
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
Computing task request probability, ρ
Ratio of dropped tasks (%)
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
(b) Average completion time/task drop ratio vs. ρ
System performance vs. task arrival probability.
execution cost increases with ρ, which is in accordance with our intuition. Besides, the LODCO
algorithm achieves signiﬁcant execution cost reduction compared to the benchmark policies. In
Fig. 4(b), the average completion time of the executed tasks and the task drop ratio are shown,
We see that the LODCO algorithm achieves a near-zero task drop ratio, while those achieved
by the benchmark policies increase rapidly with ρ. In terms of the average completion time, the
LODCO algorithm outperforms the benchmark policies when ρ is small. However, when ρ is
large, the average completion time achieved by the LODCO algorithm is slightly longer than
that achieved by the MEC Server Execution (GD) policy. The reason is, in order to minimize the
execution cost, the LODCO algorithm suppresses the task drop ratio at the expense of a minor
execution delay performance degradation.
The system performance versus the EH rate, i.e., PH, is shown in Fig. 5, where the effectiveness
of the LODCO algorithm is again validated. In addition, we see the execution cost decreases
as the EH rate increases since consuming the renewable energy incurs no cost. Similar to the
execution cost, the task drop ratios achieved by different policies decrease with the EH rate.
Interestingly, under the LODCO algorithm, an increase of the EH rate does not necessarily
reduce the average completion time, e.g., when ρ = 0.6 and PH increases from 6 to 7 mW,
the LODCO algorithm has introduced a 0.1 ms extra average completion time, but secured a
10% task drop reduction. Since the optimization objective is the execution cost, eliminating task
drops brings more beneﬁts in terms of system cost when the system resource is scarce, i.e., the
EH power (mW)
Average execution cost
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
(a) Execution cost vs. PH
EH power (mW)
Average completion time
of the executed tasks (ms)
EH power (mW)
Ratio of dropped tasks (%)
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
(b) Average completion time/task drop ratio vs. PH
System performance vs. EH rate, the solid lines corresponds to ρ = 0.6 and the dash-solid lines corresponds to ρ = 0.4.
harvested energy is insufﬁcient compared to the relatively intense computation workload.
Deadline (ms)
Average execution cost
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
(a) Execution cost vs. τd
Deadline (ms)
Average completion time
of the executed tasks (ms)
Deadline (ms)
Ratio of dropped tasks (%)
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
(b) Average completion time/task drop ratio vs. τd
System performance vs. execution deadline, the solid lines corresponds to ρ = 0.6 and the dash-solid lines corresponds
to ρ = 0.4.
In Fig. 6, we reveal the relationship of between the execution deadline τd and the system
performance. As τd decreases, i.e., the computation requirement becomes more stringent, the
execution cost, average completion time and task drop ratio achieved by all four policies increase.
It can be seen that when τd ≤0.4 ms, the execution cost achieved by the Mobile Execution
(GD) policy becomes a constant ρφ, and the task drop ratio is 100%. Meanwhile, the MEC
Server Execution (GD) and the Dynamic Ofﬂoading (GD) policies converge. In these scenarios,
the mobile device is not able to conduct any computation because of hardware limitation, i.e.,
f t ≤f max
CPU = 1.5 GHz, and all the computation tasks have to be ofﬂoaded to the MEC server for
MEC. The results in Fig. 6(b) conﬁrms the beneﬁts of MEC as around 50% tasks are successfully
executed for τd = 0.2 ms even under the greedy ofﬂoading policy. Note that for a small value of
τd, e.g., τd ≤0.8 ms, the average completion time achieved by the LODCO algorithm is slightly
longer than those of the other two policies with computation ofﬂoading, but the task drop ratio
is reduced noticeably by more than 20%. This phenomenon is similar to what was observed in
Fig. 4(b), where the LODCO algorithm tends to avoid dropping tasks by prolonging the average
completion time in order to achieve a minimum execution cost.
Distance from the MEC server (m)
Average execution cost
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
(a) Execution cost vs. d
Distance from the MEC server (m)
Average completion time
of the executed tasks (ms)
Distance from the MEC server (m)
Ratio of dropped tasks (%)
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
Mobile Execution (GD)
MEC Server Execution (GD)
Dynamic Offloading (GD)
Dynamic Offloading (LODCO)
(b) Average completion time/task drop ratio vs. d
System performance vs. distance, the solid lines corresponds to ρ = 0.6 and the dash-solid lines corresponds to ρ = 0.4.
Finally, we show the relationship between the system performance and d, i.e., the distance
from the mobile device to the MEC server, in Fig. 7. The performance of the computation
ofﬂoading policies, including the MEC Server Execution (GD), Dynamic ofﬂoading (GD) and
the LODCO algorithms, deteriorate as d becomes large. As can be seen from Fig. 7(a), when
the mobile device is close to the MEC server, the three computation ofﬂoading policies converge
and greatly outperform the Mobile Execution (GD) policy. In such scenarios, the mobile device
is able to ofﬂoad the computation tasks to the MEC server with a small amount of harvested
energy due to small path loss. With a large value of d, e.g., d = 80 m, ofﬂoading the tasks
greedily cannot bring any execution cost reduction compared the Mobile Execution (GD) policy,
while the LODCO algorithm offers more than 40% performance gain. From Fig. 7(b), we see
that although the MEC Server Execution (GD) policy incurs the least completion time for the
executed tasks, its task failure performance sharply degrades. In contrast, the proposed LODCO
algorithm achieves a near-zero task drop ratio with an improved completion time performance
compared to the Mobile Execution (GD) and Dynamic Ofﬂoading (GD) policies.
VII. CONCLUSIONS
In this paper, we investigated mobile-edge computing (MEC) systems with EH mobile devices. The execution cost, which addresses the execution delay and task failure, was adopted
as the performance metric. A dynamic computation ofﬂoading policy, namely, the Lyapunov
optimization-based dynamic computation ofﬂoading (LODCO) algorithm, was then developed. It
is a low-complexity online algorithm and requires little prior knowledge. We found the monotonic
properties of the CPU-cycle frequencies (transmit power) for mobile execution (computation
ofﬂoading) with respect to the battery energy level, which uncovers the impact of EH to the
system operations. Performance analysis was conducted which revealed the asymptotic optimality
of the proposed algorithm. Simulation results showed that the proposed LODCO algorithm not
only signiﬁcantly outperforms the benchmark greedy policies in terms of execution cost, but
also reduces computation failures noticeably at an expense of minor execution delay performance
degradation. Our study provides a viable approach to design future MEC systems with renewable
energy-powered devices. It would be interesting to extend the proposed algorithm to more general
MEC systems with multiple mobile devices, as well as consider resource-limited MEC servers.
Another extension is to combine the concepts of wireless energy transfer and energy harvesting
by deploying a power beacon co-located with the MEC server so that the energy deﬁcit incurred
by the renewable energy sources can be compensated by the controllable radio frequency energy.
A. Proof for Proposition 1
Since P2 is a tightened version of P1, we have EC∗
P2. The other side of the inequality
can be obtained by constructing a feasible solution for P2 (denoted as ⟨et
based on the optimal solution for P1 (denoted as ⟨et
P1⟩8): i) If E
8For simplicity, we assume the optimal solution for P1 satisﬁes the property of the optimal CPU-cycle frequencies in Lemma
(0, Emin), then the computation task will be dropped in the constructed solution and no harvested
energy will be consumed, i.e., costt
P2 = φ; ii) If E
∈[Emin, Emax], the constructed
solution for the tth time slot will be the same as the optimal solution for P1; iii) The EH decision
P2 is determined by et
P2 = max{Bt
It is not difﬁcult to show Bt
P2 < +∞, and thus the constructed solution is feasible to P2.
If Emin ≥Eτd
min, where Eτ
min = κW 3τ −2
is the minimum amount of energy required to meet the
deadline constraint for mobile execution, for a time slot with It
m,P1 = 1 and E
(0, Emin), the constructed solution incurs (φ −τEmin) units of extra execution cost in the worst
case. Here, τEmin = κ
min is the execution delay corresponds to Emin amount of energy
consumption for mobile execution; otherwise, if Emin < Eτd
m,P1 = 1 and E
(0, Emin) is infeasible as the deadline constraint cannot be met. Besides, the probability of
ofﬂoading a task to the MEC server successfully with energy consumption less than Emin is no
greater than P{ωτd log2
≥L} = 1−FH (η), where η ≜
min, and the
constructed solution will incur at most φ units of extra execution cost as costt
P1 > 0. By further
incorporating the task request probability ρ, we can obtain the desired result.
B. Proof for Corollary 3
For ˜Bt < 0, since Ξ
= 0, with some manipulations, we have ˜Bt · k (ht, pt
ln 2 , where k (h, p) =
ln 2 −(hp + σ) log2
, and ∂k(h,p)
< 0, i.e.,
k (h, p) decreases with p for p > 0. Denote ˜Bt
+ < 0 and the corresponding solutions for
ht, p, ˜Bt
0,+, respectively. Since ˜Bt
< 0, i.e., pt
0,−. Since pt
U are invariant with ˜Bt,
according to (31), pt∗is non-decreasing with ˜Bt for ˜Bt < 0. Besides, as pt∗= pt
U when ˜Bt > 0,
we can conclude that pt∗is non-decreasing with ˜Bt.
C. Proof for Lemma 4
By subtracting θ at both sides of (9), we have ˜Bt+1 = ˜Bt + et −E (It, f t, pt). Squaring both
sides of this equality, we have
˜Bt + et −E
 It, f t, pt2
+ 2 ˜Bt  et −E
 It, f t, pt
 et2 + E2  It, f t, pt
+ 2 ˜Bt  et −E
 It, f t, pt
Dividing both sides of (42) by 2, adding V [D (It, f t, pt) + φ · 1 (ζt = 1, It
d = 1)], as well as
taking the expectation conditioned on ˜Bt, we can obtain the desired result.
D. Proof for Theorem 1
Since the LODCO algorithm obtains the optimal solution of the per-time slot problem, (43)
holds, where costt∗and costtΠ are the execution cost at the tth time slot under ⟨It∗, f t∗, pt∗⟩and
⟨ItΠ, f tΠ, ptΠ⟩, respectively. (†) is because that policy Π is independent of the battery energy
level Bt, and (‡) is due to Corollary 4 and Lemma 6.
 It∗, f t∗, pt∗
+ V · costt∗| ˜Bt
 ItΠ, f tΠ, ptΠ
+ V · costtΠ| ˜Bt
 ItΠ, f tΠ, ptΠ
≤max{θ, Emax
} · ̺δ + V (ECP3 + δ) + C.
By letting δ go to zero, we obtain
Taking the expectation on both sides of (44), summing up the inequalities for t = 0, · · ·T −1,
dividing by T and letting T go to inﬁnity, we have ECLODCO ≤EC∗
V . By further utilizing
Proposition 1 and Lemma 5, the theorem is proved.