Proceedings of the Fifth Named Entity Workshop, joint with 53rd ACL and the 7th IJCNLP, pages 25–33,
Beijing, China, July 26-31, 2015. c⃝2015 Association for Computational Linguistics
Boosting Named Entity Recognition with Neural Character Embeddings
C´ıcero dos Santos
IBM Research
138/146 Av. Pasteur
Rio de Janeiro, RJ, Brazil
 
Victor Guimar˜aes
Instituto de Computac¸˜ao
Universidade Federal Fluminense (UFF)
Niter´oi, RJ, Rio de Janeiro
 
Most state-of-the-art named entity recognition (NER) systems rely on handcrafted
features and on the output of other NLP
tasks such as part-of-speech (POS) tagging and text chunking. In this work we
propose a language-independent NER system that uses automatically learned features only. Our approach is based on the
CharWNN deep neural network, which
uses word-level and character-level representations (embeddings) to perform sequential classiﬁcation. We perform an extensive number of experiments using two
annotated corpora in two different languages: HAREM I corpus, which contains
texts in Portuguese; and the SPA CoNLL-
2002 corpus, which contains texts in Spanish.
Our experimental results give evidence of the contribution of neural character embeddings for NER. Moreover, we
demonstrate that the same neural network
which has been successfully applied to
POS tagging can also achieve state-of-theart results for language-independet NER,
using the same hyperparameters, and without any handcrafted features.
HAREM I corpus, CharWNN outperforms
the state-of-the-art system by 7.9 points in
the F1-score for the total scenario (ten NE
classes). For the SPA CoNLL-2002 corpus, CharWNN outperforms the state-ofthe-art system by 0.8 point in the F1.
Introduction
Named entity recognition is a natural language
processing (NLP) task that consists of ﬁnding
names in a text and classifying them among several predeﬁned categories of interest such as person, organization, location and time.
machine learning based systems have been the
predominant approach to achieve state-of-the-art
results for NER, most of these NER systems rely
on the use of costly handcrafted features and on
the output of other NLP tasks . On the other hand, some recent
work on NER have used deep learning strategies
which minimize the need of these costly features
 . However, as far as
we know, there are still no work on deep learning
approaches for NER that use character-level embeddings.
languageindependent NER using CharWNN, a recently
proposed deep neural network (DNN) architecture
that jointly uses word-level and character-level
embeddings to perform sequential classiﬁcation
 .
employs a convolutional layer that allows effective character-level feature extraction from words
of any size. This approach has proven to be very
effective for language-independent POS tagging
 .
We perform an extensive number of experiments using two annotated corpora: HAREM I
corpus, which contains texts in Portuguese; and
the SPA CoNLL-2002, which contains texts in
In our experiments, we compare the
performance of the joint and individual use of
character-level and word-level embeddings. We
provide information on the impact of unsupervised
pre-training of word embeddings in the performance of our proposed NER approach. Our experimental results evidence that CharWNN is effective and robust for Portuguese and Spanish NER.
Using the same CharWNN conﬁguration used by
dos Santos and Zadrozny for POS Tagging,
we achieve state-of-the-art results for both corpora. For the HAREM I corpus, CharWNN outperforms the state-of-the-art system by 7.9 points
in the F1-score for the total scenario (ten NE
classes), and by 7.2 points in the F1 for the selective scenario (ﬁve NE classes). For the SPA
CoNLL-2002 corpus, CharWNN outperforms the
state-of-the-art system by 0.8 point in the F1.
This work is organized as follows. In Section
2, we brieﬂy describe the CharWNN architecture.
Section 3 details our experimental setup and Section 4 discuss our experimental results. Section 6
presents our ﬁnal remarks.
CharWNN extends Collobert et al.’s neural network architecture for sequential classiﬁcation by adding a convolutional layer to extract
character-level representations . Given a sentence, the network
gives for each word a score for each class (tag)
τ ∈T. As depicted in Figure 1, in order to score
a word, the network takes as input a ﬁxed-sized
window of words centred around the target word.
The input is passed through a sequence of layers
where features with increasing levels of complexity are extracted. The output for the whole sentence is then processed using the Viterbi algorithm
 to perform structured prediction.
For a detailed description of the CharWNN neural network we refer the reader to .
Word- and Character-level Embeddings
As illustrated in Figure 1, the ﬁrst layer of the
network transforms words into real-valued feature vectors (embeddings). These embeddings are
meant to capture morphological, syntactic and semantic information about the words.
ﬁxed-sized word vocabulary V wrd, and we consider that words are composed of characters from
a ﬁxed-sized character vocabulary V chr. Given a
sentence consisting of N words {w1, w2, ..., wN},
every word wn is converted into a vector un =
[rwrd; rwch], which is composed of two subvectors: the word-level embedding rwrd ∈Rdwrd
and the character-level embedding rwch ∈Rclu of
wn. While word-level embeddings capture syntactic and semantic information, character-level embeddings capture morphological and shape information.
Word-level embeddings are encoded by column vectors in an embedding matrix W wrd ∈
Rdwrd×|V wrd|, and retrieving the embedding of a
particular word consists in a simple matrix-vector
multiplication. The matrix W wrd is a parameter
to be learned, and the size of the word-level embedding dwrd is a hyperparameter to be set by the
The character-level embedding of each word is
computed using a convolutional layer . In Figure 1, we illustrate the construction of the character-level embedding for the word Bennett, but the same process is used to construct the character-level embedding of each word in the input. The convolutional layer ﬁrst produces local features around
each character of the word, and then combines
them using a max operation to create a ﬁxed-sized
character-level embedding of the word.
Given a word w composed of M characters
{c1, c2, ..., cM}, we ﬁrst transform each character cm into a character embedding rchr
m . Character
embeddings are encoded by column vectors in the
embedding matrix W chr ∈Rdchr×|V chr|. Given a
character c, its embedding rchr is obtained by the
matrix-vector product: rchr = W chrvc, where vc
is a vector of size
which has value 1 at index c and zero in all other positions. The input for
the convolutional layer is the sequence of character embeddings {rchr
, ..., rchr
The convolutional layer applies a matrixvector
kchr of successive windows in the sequence
, ..., rchr
Let us deﬁne the vector
Rdchrkchr as the concatenation of the
character embedding m, its (kchr −1)/2 left
neighbors, and its (kchr −1)/2 right neighbors:
m−(kchr−1)/2, ..., rchr
m+(kchr−1)/2
The convolutional layer computes the j-th element
of the vector rwch, which is the character-level embedding of w, as follows:
W 0zm + b0
where W 0 ∈Rclu×dchrkchr is the weight matrix of
the convolutional layer. The same matrix is used to
extract local features around each character window of the given word. Using the max over all
character windows of the word, we extract a ﬁxedsized feature vector for the word.
Figure 1: CharWNN Architecture
Matrices W chr and W 0, and vector b0 are parameters to be learned. The size of the character
vector dchr, the number of convolutional units clu
(which corresponds to the size of the characterlevel embedding of a word), and the size of the
character context window kchr are hyperparameters.
Scoring and Structured Inference
We follow Collobert et al.’s 
window approach to score all tags T for each word
in a sentence. This approach follows the assumption that in sequential classiﬁcation the tag of a
word depends mainly on its neighboring words.
Given a sentence with N words {w1, w2, ..., wN},
which have been converted to joint word-level
and character-level embedding {u1, u2, ..., uN},
to compute tag scores for the n-th word wn in the
sentence, we ﬁrst create a vector r resulting from
the concatenation of a sequence of kwrd embeddings, centralized in the n-th word:
un−(kwrd−1)/2, ..., un+(kwrd−1)/2
We use a special padding token for the words with
indices outside of the sentence boundaries.
Next, the vector r is processed by two usual
neural network layers, which extract one more
level of representation and compute the scores:
s(wn) = W 2h(W 1r + b1) + b2
where matrices W 1 ∈Rhlu×kwrd(dwrd+clu) and
W 2 ∈R|T|×hlu, and vectors b1 ∈Rhlu and
b2 ∈R|T| are parameters to be learned. The transfer function h(.) is the hyperbolic tangent. The
size of the context window kwrd and the number
of hidden units hlu are hyperparameters to be chosen by the user.
Like in , CharWNN uses
a prediction scheme that takes into account the
sentence structure.
The method uses a transition score Atu for jumping from tag t ∈T to
u ∈T in successive words, and a score A0t for
starting from the t-th tag.
Given the sentence
1 = {w1, w2, ..., wN}, the score for tag path
1 = {t1, t2, ..., tN} is computed as follows:
Atn−1tn + s(wn)tn
where s(wn)tn is the score given for tag tn at word
wn and θ is the set of all trainable network parameters
 W wrd, W chr, W 0, b0, W 1, b1, W 2, b2, A
After scoring each word in the sentence, the
Viterbi algorithm is used to ﬁnd
the most likely tag sequence [t∗]N
1 , which consists
in the tag path that leads to the maximal score:
Network Training
We train CharWNN by minimizing a negative
likelihood over the training set D. In the same way
as in , we interpret the sentence score (3) as a conditional probability over a
path. For this purpose, we exponentiate the score
(3) and normalize it with respect to all possible
paths. Taking the log, we arrive at the following
conditional log-probability:
The log-likelihood in Equation 5 can be computed efﬁciently using dynamic programming
 .
We use stochastic gradient
descent (SGD) to minimize the negative loglikelihood with respect to θ. We use the backpropagation algorithm to compute the gradients of the
neural network. We implemented CharWNN using the Theano library .
Experimental Setup
Unsupervised Learning of Word
Embeddings
The word embeddings used in our experiments
are initialized by means of unsupervised pretraining.
We perform pre-training of wordlevel embeddings using the skip-gram NN architecture available in the
word2vec 1 tool.
In our experiments on Portuguese NER, we use
the word-level embeddings previously trained by
1 
dos Santos and Zadrozny . They have used
a corpus composed of the Portuguese Wikipedia,
the CETENFolha2 corpus and the CETEMPublico3 corpus.
In our experiments on Spanish NER, we use
the Spanish Wikipedia. We process the Spanish
Wikipedia corpus using the same steps used by dos
Santos and Zadrozny : (1) remove paragraphs that are not in Spanish; (2) substitute nonroman characters by a special character; (3) tokenize the text using a tokenizer that we have implemented; (4) remove sentences that are less than 20
characters long (including white spaces) or have
less than 5 tokens; (5) lowercase all words and
substitute each numerical digit by a 0. The resulting corpus contains around 450 million tokens.
It is important to note that although we perform unsupervised pre-training of word embeddings, we also leave the word embeddings be updated during the supervised step, i.e., during the
training with the NER labeled data.
Following dos Santos and Zadrozny ,
we do not perform unsupervised learning of
character-level embeddings. The character-level
embeddings are initialized by randomly sampling each value from an uniform distribution:
U (−r, r), where r =
|V chr| + dchr .
weight matrices W 0, W 1 and W 2 are initialized
in a similar way.
We use the corpus from the ﬁrst HAREM
evaluation in our
experiments on Portuguese NER. This corpus
is annotated with ten named entity categories:
Person (PESSOA), Organization (ORGANIZA-
CAO), Location (LOCAL), Value (VALOR), Date
(TEMPO), Abstraction (ABSTRACCAO), Title
(OBRA), Event (ACONTECIMENTO), Thing
(COISA) and Other (OUTRO). The HAREM corpus is already divided into two subsets:
HAREM and MiniHAREM. Each subset corresponds to a different Portuguese NER contest.
In our experiments, we call HAREM I the setup
where we use the First HAREM corpus as the
training set and the MiniHAREM corpus as the
test set. This is the same setup used by dos Santos
and Milidi´u . Additionally, we tokenize the
2 
3 
Table 1: Named Entity Recognition Corpora.
Training Data
Tokens Sentenc. Tokens
Portuguese
SPA CoNLL-2002 Spanish
8,323 264,715
HAREM corpus and create a development set that
comprises 5% of the training set. Table 1 present
some details of this dataset.
In our experiments on Spanish NER we use
the SPA CoNLL-2002 Corpus, which was developed for the CoNLL-2002 shared task . It is annotated with four named
entity categories: Person, Organization, Location
and Miscellaneous. The SPA CoNLL-2002 corpus
is already divided into training, development and
test sets. The development set has characteristics
similar to the test corpora.
We treat NER as a sequential classiﬁcation
problem. Hence, in both corpora we use the IOB2
tagging style where: O, means that the word is not
a NE; B-X is used for the leftmost word of a NE
type X; and I-X means that the word is inside of a
NE type X. The IOB2 tagging style is illustrated in
the following example.
Wolff/B-PER
currently/O
journalist/O
in/O Argentina/B-LOC
Del/B-PER Bosque/I-PER
of/O the/O
seventies/O
Real/B-ORG
Madrid/I-ORG
Model Setup
In most of our experiments, we use the same hyperparameters used by dos Santos and Zadrozny
 for part-of-speech tagging. The only exception is the learning rate for SPA CoNLL-2002,
which we set to 0.005 in order to avoid divergence. The hyperparameter values are presented
in Table 2. We use the development sets to determine the number of training epochs, which is six
for HAREM and sixteen for SPA CoNLL-2002.
We compare CharWNN with two similar neural network architectures:
CharNN and WNN.
CharNN is equivalent to CharWNN without word
embeddings, i.e., it uses character-level embeddings only. WNN is equivalent to CharWNN without character-level embeddings, i.e., it uses word
embeddings only. Additionally, in the same way
as in , we check the impact
of adding to WNN two handcrafted features that
contain character-level information, namely capitalization and sufﬁx. The capitalization feature
has ﬁve possible values: all lowercased, ﬁrst uppercased, all uppercased, contains an uppercased
letter, and all other cases. We use sufﬁx of size
three. In our experiments, both capitalization and
sufﬁx embeddings have dimension ﬁve. The hyperparameters values for these two NNs are shown
in Table 2.
Experimental Results
Results for Spanish NER
In Table 3, we report the performance of different
NNs for the SPA CoNLL-2002 corpus. All results
for this corpus were computed using the CoNLL-
2002 evaluation script4. CharWNN achieves the
best precision, recall and F1 in both development
and test sets. For the test set, the F1 of CharWNN
is 3 points larger than the F1 of the WNN that uses
two additional handcrafted features: sufﬁxes and
capitalization. This result suggests that, for the
NER task, the character-level embeddings are as
or more effective as the two character-level features used in WNN. Similar results were obtained
by dos Santos and Zadrozny in the POS
tagging task.
In the two last lines of Table 3 we can see the
results of using word embeddings and characterlevel embeddings separately.
Both, WNN that
uses word embeddings only and CharNN, do not
achieve results competitive with the results of the
networks that jointly use word-level and characterlevel information.
This is not surprising, since
it is already known in the NLP community that
jointly using word-level and character-level features is important to perform named entity recognition.
In Table 4, we compare CharWNN results with
the ones of a state-of-the-art system for the SPA
CoNLL-2002 Corpus. This system was trained using AdaBoost and is described in . It employs decision trees as a base learner
4 
Table 2: Neural Network Hyperparameters.
Parameter Name
Word embedding dimensions
Word context window size
Char. embedding dimensions
Char. context window size
Convolutional units
Hidden units
Learning rate
Table 3: Comparison of different NNs for the SPA CoNLL-2002 corpus.
word emb., char emb.
word emb., sufﬁx, capit.
word embeddings
char embeddings
and uses handcrafted features as input. Among
others, these features include gazetteers with people names and geographical location names. The
AdaBoost based system divide the NER task into
two intermediate sub-tasks: NE identiﬁcation and
NE classiﬁcation. In the ﬁrst sub-task, the system
identiﬁes NE candidates. In the second sub-task,
the system classiﬁes the identiﬁed candidates. In
Table 4, we can see that even using only automatically learned features, CharWNN achieves stateof-the-art results for the SPA CoNLL-2002.
Results for Portuguese NER
In Table 5, we report the performance of different
NNs for the HAREM I corpus. The results in this
table were computed using the CoNLL-2002 evaluation script. We report results in two scenarios:
total and selective. In the total scenario, all ten
categories are taken into account when scoring the
systems. In the selective scenario, only ﬁve chosen
categories (Person, Organization, Location, Date
and Value) are taken into account. We can see
in Table 5, that CharWNN and WNN that uses
two additional handcrafted features have similar
results. We think that by increasing the training
data, CharWNN has the potential to learn better
character embeddings and outperform WNN, like
happens in the SPA CoNLL-2002 corpus, which is
larger than the HAREM I corpus. Again, CharNN
and WNN that uses word embeddings only, do not
achieve results competitive with the results of the
networks that jointly use word-level and characterlevel information.
In order to compare CharWNN results with
the one of the state-of-the-art system, we report
in tables 6 and 7 the precision, recall, and F1
scores computed with the evaluation scripts from
the HAREM I competition5 , which uses a scoring strategy different from
the CoNLL-2002 evaluation script.
In Table 6, we compare CharWNN results with
the ones of ETLCMT , a state-of-the-art system for
the HAREM I Corpus . ETLCMT is an ensemble method that uses
Entropy Guided Transformation Learning (ETL)
as the base learner.
The ETLCMT system uses
handcrafted features like gazetteers and dictionaries as well as the output of other NLP tasks such as
POS tagging and noun phrase (NP) chunking. As
we can see in Table 6, CharWNN outperforms the
state-of-the-art system by a large margin in both
total and selective scenarios.
In Table 7, we compare CharWNN results by
entity type with the ones of ETLCMT .
results were computed in the selective scenario.
CharWNN produces a much better recall than
ETLCMT for the classes LOC, PER and ORG. For
the ORG entity, the improvement is of 21 points
in the recall. We believe that a large part of this
boost in the recall is due to the unsupervised pre-
5 Arquitectura.html
Table 4: Comparison with the state-of-the-art for the SPA CoNLL-2002 corpus.
word embeddings, char embeddings
words, ortographic, POS tags, trigger words,
bag-of-words, gazetteers, word sufﬁxes,
word type patterns, entity length
Table 5: Comparison of different NNs for the HAREM I corpus.
Total Scenario
Selective Scenario
word emb., char emb.
word emb., sufﬁx, capit.
word embeddings
char embeddings
Table 6: Comparison with the State-of-the-art for the HAREM I corpus.
Total Scenario
Selective Scenario
word emb., char emb.
words, POS tags, NP tags,
capitalization, word length,
dictionaries, gazetteers
training of word embeddings, which can leverage
large amounts of unlabeled data to produce reliable word representations.
Impact of unsupervised pre-training of
word embeddings
In Table 8 we assess the impact of unsupervised pre-training of word embeddings in Char-
WNN performance for both SPA CoNLL-2002
and HAREM I (selective). The results were computed using the CoNLL-2002 evaluation script.
When unsupervised pre-training is not used, the
word embeddings are initialized by randomly
sampling each value from an uniform distribution:
U (−r, r), where r =
|V wrd| + dwrd .
We can see in Table 8 that, for both corpora,
CharWNN results are improved when using unsupervised pre-training. The impact of unsupervised
pre-training is larger for the HAREM I corpus
(13.2 points in the F1) than for the SPA CoNLL-
2002 (4.3 points in the F1). We believe one of
the main reasons of this difference in the impact is
the training set size, which is much smaller in the
HAREM I corpus.
Related Work
Some recent work on deep learning for named entity recognition include Chen et al. , Collobert et al. and Passos et al. .
Chen et al. employ deep belief networks
(DBN) to perform named entity categorization. In
their system, they assume that the boundaries of
all the entity mentions were previously identiﬁed,
which makes their task easier than the one we
tackle in this paper. The input for their model is
the character-level information of the entity to be
classiﬁed. They apply their system for a Chinese
corpus and achieve state-of-the-art results for the
NE categorization task.
Collobert et al. propose a deep neural
network which is equivalent to the WNN architecture described in Section 3.3. They achieve stateof-the-art results for English NER by adding a feature based on gazetteer information.
Passos et al.
 extend the Skip-Gram
language model to produce phrase embeddings that are more suitable
to be used in a linear-chain CRF to perform
NER. Their linear-chain CRF, which also uses
additional handcrafted features such as gazetteer
Table 7: Results by entity type for the HAREM I corpus.
Table 8: Impact of unsup. pre-training of word emb. in CharWNN performance.
Pre-trained word emb.
SPA CoNLL-2002
based, achieves state-of-the-art results on two English corpora: CoNLL 2003 and Ontonotes NER.
The main difference between our approach and
the ones proposed in previous work is the use of
neural character embeddings.
This type of embedding allows us to achieve state-of-the-art results for the full task of identifying and classifying named entities using only features automatically learned. Additionally, we perform experiments with two different languages, while previous work focused in one language.
Conclusions
In this work we approach language-independent
NER using a DNN that employs word- and
character-level embeddings to perform sequential
classiﬁcation. We demonstrate that the same DNN
which was successfully applied for POS tagging
can also achieve state-of-the-art results for NER,
using the same hyperparameters, and without any
handcrafted features.
Moreover, we shed some
light on the contribution of neural character embeddings for NER; and deﬁne new state-of-the-art
results for two NER corpora in two different languages: Portuguese and Spanish.
Acknowledgments
Victor Guimar˜aes’ contributions were made during an internship at IBM Research.