GAG: Global Attributed Graph Neural Network for Streaming
Session-based Recommendation
Ruihong Qiu
The University of Queensland
Brisbane, Australia
 
Hongzhi Yin∗
The University of Queensland
Brisbane, Australia
 
The University of Queensland
Brisbane, Australia
 
The University of Queensland
Brisbane, Australia
 
Streaming session-based recommendation (SSR) is a challenging
task that requires the recommender system to do the session-based
recommendation (SR) in the streaming scenario. In the real-world
applications of e-commerce and social media, a sequence of useritem interactions generated within a certain period are grouped as
a session, and these sessions consecutively arrive in the form of
streams. Most of the recent SR research has focused on the static setting where the training data is first acquired and then used to train
a session-based recommender model. They need several epochs of
training over the whole dataset, which is infeasible in the streaming setting. Besides, they can hardly well capture long-term user
interests because of the neglect or the simple usage of the user
information. Although some streaming recommendation strategies
have been proposed recently, they are designed for streams of individual interactions rather than streams of sessions. In this paper, we
propose a Global Attributed Graph (GAG) neural network model
with a Wasserstein reservoir for the SSR problem. On one hand,
when a new session arrives, a session graph with a global attribute
is constructed based on the current session and its associate user.
Thus, the GAG can take both the global attribute and the current
session into consideration to learn more comprehensive representations of the session and the user, yielding a better performance in
the recommendation. On the other hand, for the adaptation to the
streaming session scenario, a Wasserstein reservoir is proposed to
help preserve a representative sketch of the historical data. Extensive experiments on two real-world datasets have been conducted
to verify the superiority of the GAG model compared with the
state-of-the-art methods.
∗Corresponding author and contributing equally with the first author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from .
SIGIR ’20, July 25–30, 2020, Virtual Event, China
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-8016-4/20/07...$15.00
 
CCS CONCEPTS
• Information systems →Recommender systems.
streaming recommendation, session-based recommendation, graph
neural networks
ACM Reference Format:
Ruihong Qiu, Hongzhi Yin, Zi Huang, and Tong Chen. 2020. GAG: Global
Attributed Graph Neural Network for Streaming Session-based Recommendation. In Proceedings of the 43rd International ACM SIGIR Conference
on Research and Development in Information Retrieval (SIGIR ’20), July
25–30, 2020, Virtual Event, China. ACM, New York, NY, USA, 10 pages.
 
INTRODUCTION
In many modern online systems, such as e-commerce and social
media platforms, there usually exist a large number of interactions
between users and items, such as clicking goods and playing songs.
As illustrated in Fig. 1, a sequence of interactions occurring in a
certain period can be considered as a session. Session-based recommendation (SR) has been widely studied recently by the academia
and the industry , which aims to recommend
items to users based on sessions. However, most of them focus on
the static setting, which is not suitable in real-life situation.
In practice, sessions are dynamically produced as a stream, which
leads to urgent requirements of streaming session-based recommendation (SSR). As presented in Fig. 1, a general procedure for SSR is
to train the recommendation model with the historical sessions to
preserve the users’ long-term interests and then conduct the online
update with the streaming sessions to adapt to their recent preferences. Most of the current research for the SR focuses on the static
scenario, where the recommendation models are trained in a batch
way. As users’ preferences are changing over time, it is infeasible to
apply a static model for new coming sessions. To precisely capture
the user preference, the model needs to be online updated with
the latest sessions. Due to the memory space limit, it is unpractical
to stack up the training data by absorbing every new session. In
the meanwhile, the training time will be another concern in the
streaming scenario, where the recommendation model is expected
to be updated promptly. However, a typical SR model needs to train
for a long time to converge, which cannot be guaranteed within a
short period.
 
𝑣6 𝑣1 𝑣2 𝑣1
𝑣5 𝑣23 𝑣17 𝑣6 𝑣5
𝑣4 𝑣5 𝑣4 𝑣4
𝑣58 𝑣2 𝑣9 𝑣32 𝑣47 𝑣32
Session Stream
Historical Sessions
Offline Training
Online Update
Figure 1: The general framework for SSR consists of two
phases: the offline training and the online update. During
the offline training, the recommender system is trained in
a static style with the whole historical session data. When
newly generated sessions arrive, the model is expected to
conduct an efficient online update with streaming techniques to preserve the users’ long-term interests and adapt
to the newest preferences.
Recently, a few methods utilize the reservoir technique for streaming tasks . In these cases, the interaction data is stored
with the same probability in the reservoir and then sampled for
the online training of the model. However, if streaming sessions
are processed in such a manner, the SSR models will suffer from
the loss of the session information because the data samples are
stored and drawn as discrete interactions. Moreover, the reservoir
for traditional streaming tasks is designed to capture the matrix
factorization information rather than the session’s sequence pattern. Besides, online learning can barely adapt to the session-based
recommendation task for newly arrived data as well. For online
learning, when a new session comes, the model will update accordingly to capture the recent transition pattern in the latest session.
However, these models will easily overfit the new data and fail
to maintain users’ long-term preferences learned from historical
data. Therefore, it is important for the SSR model to effectively
exploit the user’s information and thus obtain a comprehensive
representation for both long- and short-term preferences.
More recently, Guo et al. applied the reservoir technique to
the SSR task with a weighted sampling scheme by evaluating how
informative each session is. This method cannot be generalized
to other models mainly because it needs to generate an informativeness score for every item in a session with pre-computed item
feature vectors, which are commonly unavailable in other models.
Moreover, this model directly combines the session-based method
with a matrix factorization module for recommendation, which can
hardly learn the complicated correlations between users and items
in the SSR problem.
To address the issues discussed above, we propose a Global
Attributed Graph (GAG) neural network model with a Wasserstein
reservoir as a solution to SSR. To make the most usage of the user
embeddings and maintain long-term preference information for
SSR, we firstly convert a user’s session sequence into a session
graph having the user embedding as a global attribute associated
with the embeddings of interacted items. Based on the global attributed session graph, the GAG model performs graph convolution to
learn an updated global attribute, which is passed to the ranking
module to output a recommendation list. In the GAG model, the
global attribute is applied to effectively assist the joint representation learning of both the entire session and the items within the
session. To develop a general reservoir for the SSR problem, we propose the Wasserstein reservoir, which stores and samples session
data according to the Wasserstein distance between the generated
recommendation lists and the user’s real interactions. During the
sampling procedure, the Wasserstein reservoir samples the sessions
whose recommendation results have a higher Wasserstein distance.
Intuitively, the model makes worse predictions in these sessions
with a higher Wasserstein distance, which is more informative to
refine the model during the online update.
The main contributions of this paper are summarized as follows:
• We propose the GAG model to effectively memorize and
incorporate users’ long-term preferences into the embedding vectors for SSR by treating the user embedding as a
global attribute for the session graphs to allow for more
expressiveness when learning representations.
• A Wasserstein reservoir is designed to actively select the
most informative training cases for updating the model in
streaming settings. Moreover, our Wasserstein reservoir is
an effective yet generic online learning approach that can
be easily applied to other steaming session data.
• Extensive experimental results on two real-world datasets
demonstrate that the proposed GAG model and the Wasserstein reservoir achieve the state-of-the-art performance.
RELATED WORK
Session-based Recommendation
Sequential recommendation is mainly based on the Markov
chain model , which learns the dependency of items
in a sequence data. Using probabilistic decision-tree models, Zimdars et al. proposed to encode the state of the transition pattern
of items. Shani et al. made use of a Markov Decision Process
(MDP) to compute item transition probabilities.
Deep learning models are popular with the boom of recurrent
neural networks . Hidasi et al. proposed the
GRU4REC, which applies the GRU to treat the data as time
series. Some recent approaches use the attention mechanism to
avoid the time order. NARM stacks GRU as the encoder to
extract information and then a self-attention layer to sum up as
the session embedding. To further alleviate the bias by time series,
STAMP replaces the recurrent encoder with the attention layer.
Recently, GNN has been widely used in recommendation . Some methods utilize GNN to encode the session information
to prevent the misguidance of the session order .
SSRM considers a specific user’s historical sessions and applies
the attention mechanism to combine them.
Streaming Recommendation
Online learning focuses on updating the old model with the new
data to capture the most recent interest of the user .
For instance, He et al. proposed an element-wise alternative
to the least squares technique to address the missing data. Jugovac
et al. applied a replay-based evaluation protocol to update
the model with the new arrival events and articles in the news
recommendation. Although the models above capture the user’s
recent interest by updating the model with new interactions, they
fail to remember historical interactions.
Random sampling is a technique to address the history-ignoring
problem by introducing a reservoir to store the user’s long-term
interactions . For example, Diaz-Aviles et al. 
applied sampling strategies based on active learning principles
on the matrix factorization method to update the model. More recently, Guo et al. used the same reservoir technique to process
the streaming sessions.
Graph Neural Networks
Originally, GNN is applied basically on directed graphs in a simple
situation . In recent years, many GNN methods work
very similar to the message passing network to perform an
aggregation over the neighborhood of nodes to compute the node
embeddings. In , the global attribute is introduced into the
GNN layer to maintain a graph level feature in physical systems.
Task Definition
In the SSR problem, there is an item set V = {𝑣1, 𝑣2, 𝑣3, . . . , 𝑣𝑚},
where all items are unique and 𝑚denotes the number of items.
Usually, an embedding layer is applied to represent all items, xi =
Embed𝑣(𝑣𝑖),𝑖≤𝑚, where Embed𝑣is a mapping function that transforms an item into a continuous and dense representation xi ∈R𝑑.
There is also a user set U = {𝑢1,𝑢2,𝑢3, . . . ,𝑢𝑛}, where all users are
unique and𝑛denotes the number of users. Similarly, another embedding layer performs mapping to all user ID, uj = Embed𝑢(𝑢𝑗), 𝑗≤𝑛,
where Embed𝑢is another mapping function from a user to pj ∈R𝑑.
A session sequence at a time step 𝑡from a user 𝑢is defined as a list
𝑆𝑢,𝑡= [𝑣1, 𝑣2, . . . , 𝑣𝑙], 𝑣∗∈V. 𝑙is the length of the session 𝑆, which
may contain duplicated items, 𝑣𝑎= 𝑣𝑏, 𝑎,𝑏< 𝑙. In the setting of the
SSR, at time step 𝑡, the recommender system needs to recommend
an item 𝑣𝑡+1 based on {𝑆𝑢,0,𝑆𝑢,1, . . . ,𝑆𝑢,𝑡}, which are all sessions of
a user from the history to the current. The item 𝑣𝑡+1 should match
the user’s preference the most. In the meantime, sessions arrive at a
high speed, which means that the computation resource is limited
to calculation. As a result, an algorithm should have an efficient
way to process the history sessions as well as the current session.
Usually, we only recommend the top-𝐾ranked items to users.
In this paper, we propose a novel Global Attributed Graph (GAG)
neural network model to address the SSR problem mainly by transforming a user’s information into the global attribute and incorporating it in the session graph. The architecture of the GAG model is
demonstrated in Fig. 2. There are two key components: GAG model
for generating recommendation and Wasserstein reservoir for the
streaming data learning.
Global Attributed Session Graph
As shown in Fig. 2, at the first stage, the session sequence is converted into a session graph with a global attribute for the purpose
to process each session via GNN. Similar to and , because
of the natural order of the session sequence, we convert it into
a weighted directed graph. In addition, we incorporate the user’s
general information as the global attribute 𝑢into the session graph,
𝐺𝑠= (u,𝑉𝑠, 𝐸𝑠), 𝐺𝑠∈G, where G is the set of all session graphs.
In the session graph 𝐺𝑠, the node set 𝑉𝑠represents the nodes in
the session graph, which are items 𝑣𝑠,𝑛from 𝑆. For every node
Item set 𝒱
Session graph 𝐺𝑠
Recommendation Procedure
Training Data
Wasserstein
Figure 2: The pipeline of the GAG model for the SSR problem. In the upper half, for a specific session 𝑆from a user
𝑢, the GAG model first converts it into a global attributed
session graph 𝐺𝑠. The GAG layer takes 𝐺𝑠as input and computes the graph convolution based on node features, edge
weights and the global attribute. The output of the 𝑘-layer
GAG model is the updated global attribute uk. To make a personalized recommendation, uk is applied to compare with
the whole item set to generate the recommendation list. In
the bottom half, it shows the procedure of the Wasserstein
reservoir dealing with streaming sessions. New streaming
sessions and the current reservoir are united together and
sampled the online training data according to their respective Wasserstein distance. The online training data is fed to
help with the update of the current GAG model. After the
online training of the model, the reservoir is updated with
the session stream and itself. The updated reservoir is for
the following new arrival sessions.
v, the input feature is the initial embedding vector x. The edge
set 𝐸𝑠represents all directed edges (𝑤𝑠,(𝑛−1)𝑛, 𝑣𝑠,𝑛−1, 𝑣𝑠,𝑛), where
𝑤𝑠,(𝑛−1)𝑛is the weight of the edge and 𝑣𝑠,𝑛is the click of the item
after 𝑣𝑠,𝑛−1 in 𝑆. The weight of the edge is defined as the frequency
of the occurrence of the edge within the session.
Global Attributed Graph Neural Network
With the construction of the global attributed session graph 𝐺𝑠, we
propose the GAG model to perform graph convolution on 𝐺𝑠with
the node features, edge features and the global attribute. When the
GAG model is fed with the session graph as the input, the computation proceeds from the edge, the node to the global attribute.
First, the per-edge update is calculated among all edges to compute the output features from sender nodes vsk to receiver nodes
vrk with additional features of the edge itself ek and the global
attribute u. In our design of GAG, the edge feature, i.e., the weight
of the edge, will not be updated because the edge feature is not in
the dense vector form. This setting means that the output of the
edge update function ek′, will only be used to update other node
features and global features. The output new session graph 𝐺′𝑠has
the same edge set 𝐸𝑠as the input session graph 𝐺𝑠. Because the
session graph is built in the directed situation, we compute the
propagation in both directions to represent the different meanings
for a node as a sender and a receiver in an edge. Therefore, the 𝜙𝑒
Session graph 𝐺𝑠
Figure 3: The usage of the global attribute in GAG. (a) In
the input stage, the global attribute is concatenated with the
node feature for every node, which gives out a node feature
concatenated with the global attribute. (b) In the global attribute update procedure, the attention weight 𝛼𝑖is calculated based on the concatenation of the features of the last
node vl, the individual node vi and the global attribute u itself.
function is designed as:
ek,in′ = 𝜙𝑒
 ek, vrk, vsk, u
= 𝑤𝑘· MLP(vsk ||u),
ek,out′ = 𝜙𝑒
 ek, vrk, vsk, u
= 𝑤𝑘· MLP(vsk ||u),
where 𝑤𝑘is the scalar form of ek, MLP stands for the multi-layer
perceptron to encode the features provided by a concatenation
of the sender and receiver node and || means the concatenation
between two vectors along the unit dimension. MLPs in both equations are not shared because they perform different operations to
the node features. In Fig. 3 (a), the procedure of exploiting the global
attribute in the node update function is demonstrated in detail.
After updating the new per-edge features, per-node features are
updated based on the per-edge features when the node is the sender
and the receiver. The new per-node feature consists of the normalized summation of the in-coming and out-going neighborhoods.
The aggregation procedures are as:
𝑗∈{vsj=vri }
𝑁𝑖𝑛(𝑖)𝑁𝑜𝑢𝑡(𝑗)
𝑗∈{vrj=vsi }
𝑁𝑜𝑢𝑡(𝑖)𝑁𝑖𝑛(𝑗)
where 𝑁𝑖𝑛(∗) and 𝑁𝑜𝑢𝑡(∗) represent the in-coming and the outgoing degree of a node.
The final result of the neighborhood aggregation is a linear
transformation of the in-coming and the out-going feature:
vi′ = MLP(vi,in′||vi,out′).
The updated node feature vi′ actually includes the information
from the node feature of itself and the neighborhood, the edge
weight and the global attribute.
At the last step of the GAG layer forward computations, the
global attribute is updated based on all the features of nodes, edges
and the global attribute itself in the graph. It is worth noting that
the purpose of the session-based recommendation is to generate a
representation of a session to recommend items. Therefore, the final
global attribute is exactly the representation we desire to represent
the whole graph. Similar to the previous methods to separate the
representation of the preference in long-term and short-term parts
inside a session , a self-attention on the last input item 𝑣𝑙,
of the session is applied to aggregate all item features of the session
to be the session-level feature. The computation of updating u to
usg is defined as:
u′ = 𝜙𝑢 𝑉′, u
= Self-Att(𝑣′
𝑖, u) + u,
where 𝑣𝑖∈𝑉′,𝑖= 1, 2, 3, . . . ,𝑙represent all items in the session
after being updated to the new features. In the setting of the session graph, items are converted into nodes and the Self-Att can be
divided into two steps:
𝛼𝑖= MLP(vl′||vi′||u),
where an MLP is utilized to learn the weights that aggregate the
node features, the last node feature and the global attribute. In Fig. 3
(b), the detail of the computation of attention weights is presented.
Besides, because the user’s profile is applicable in the SSR setting,
the incorporation of the user embedding can provide the extra user
information. Therefore, the final formula for how to compute the
output of the global attribute with user information is defined as:
u′ = usg + u.
The residual addition can help to alleviate the burden of directly
learning the updated global attribute.
Recommendation
The last stage of the GAG to perform the recommendation is the
generation of candidate items based on the representation of the
input session and the user’s profile. We compute a score for every
item and form a score vector ˆz ∈R𝑛, where n is the size of the item
set. Specifically, the score vector ˆz is calculated as:
ˆz = u′⊤X,
where X is embeddings of all items in the item set.
The probabilistic form of the prediction ˆy is defined as:
ˆy = Softmax(ˆz).
Wasserstein Reservoir for Streaming Model
In this section, we extend our offline model to the streaming setting.
Our purpose is to update our model with the new arrival session
data while keeping the knowledge learned from the historical sessions. Traditionally, online learning methods update the model only
with the new data, which will always lead to forgetting the past .
To prevent the model from losing the awareness of historical data,
we leverage the reservoir to maintain a long-term memory of the
historical data . The reservoir technique is widely used
in the streaming database management systems.
The purpose of applying a reservoir is to maintain a representative sketch of all the historical data. Therefore, we conduct a
random sampling to select the data stored in the reservoir.
Let 𝐶denote the reservoir, which contains |𝐶| sessions. Let 𝑡be
the time order of the arrival session instance. When 𝑡> |𝐶|, the
reservoir will store this 𝑡-th session with the probability:
𝑝store = |𝐶|
and replaces a uniformly random session that is already in 𝐶. This
method of generating the reservoir is actually sampling randomly
from the current dataset, and it can successfully maintain the
model’s long-term memory .
Although the reservoir can be updated in the way introduced
above, the probability for a new arrival session to be included tends
to be smaller over time, and the reservoir will have a chance of
overlooking the recent data. However, the recent data is crucial for
predicting the user’s varying preference. Besides, new users and
new items are exposed to the system continually. In consequence,
when the new session data 𝐶𝑛𝑒𝑤arrives, we update the pre-trained
model with 𝐶𝑛𝑒𝑤and the reservoir 𝐶.
The reservoir sampling procedure above enables the model to
continually update according to the new and old data. However, it
can narrowly achieve a good performance in reality. The reason
is that most training sessions in 𝐶are already learned well by 𝑀,
which results in 𝐶𝑟𝑎𝑛𝑑mainly containing helpless training samples.
Actually, if the current model makes a worse prediction on a session, it is more worthwhile to update the model with this session
because it either contains the latest preference of a user or there is
some item transition patterns that the current model cannot learn
well. Such a session is called an informative session to the model
and this session is more significant to the model update. In our
work, the informativeness of a session is defined as the distribution
distance 𝑑between its predicted recommendation result ˆy and the
real interaction y. ˆy is a distribution given by the model 𝑀and y is
a one-hot vector. Intuitively, the greater of this distance, 𝑀predicts
the worse over the session. There are different distance metrics of
two distributions:
• The Wasserstein distance (EMD distance) :
𝑑𝑊(P𝑟, P𝑔) =
𝛾∈Π(P𝑟,P𝑔)
E(𝑥,𝑦)∼𝛾[∥𝑥−𝑦∥]
• The Kullback-Leibler (KL) divergence :
𝑑𝐾𝐿(P𝑟∥P𝑔) =
𝑃𝑟(𝑥) log 𝑃𝑟(𝑥)
• The Total Variation (TV) distance:
𝑑𝑇𝑉(P𝑟, P𝑔) = sup
P𝑟(𝐴) −P𝑔(𝐴)
Within the recommendation task, the real distribution 𝑃𝑟is always a one-hot vector y. Under this situation, the KL divergence
between y and ˆy, 𝑑𝐾𝐿(y∥ˆy) is:
𝑑𝐾𝐿(y∥ˆy) = −log 𝑃𝑔(𝑣𝑖),
where 𝑃𝑔(𝑣𝑖) is the predicted probability over the ground truth item
𝑣𝑖given by the model 𝑀. Therefore, the KL divergence fails to take
the whole distribution into consideration.
As for the TV distance, 𝑑𝑇𝑉(y, ˆy) is:
𝑑𝑇𝑉(y, ˆy) = max
𝑗≠𝑖(1 −𝑃𝑔(𝑣𝑖), 𝑃𝑔(𝑣𝑗)),
Algorithm 1 Online Update with Wasserstein Reservoir
Input: the current time step 𝑡, the current model 𝑀, the current
reservoir 𝐶and new sessions 𝐶𝑛𝑒𝑤;
Output: the updated model 𝑀′ and the updated reservoir 𝐶′;
1: initialize a blank update dataset 𝑆;
2: if the last epoch finished then
for each session 𝑠𝑖in 𝐶𝑛𝑒𝑤do
if a new item or a new user appears then
append 𝑠𝑖to 𝑆;
for each session 𝑠𝑖in 𝐶∪𝐶𝑛𝑒𝑤−𝑆do
compute the Wasserstein distance 𝑑𝑖of 𝑠𝑖;
compute the sample probability 𝑝(𝑠𝑖);
sample the the rest of 𝑆according to Eq. (18);
13: end if
14: update the current model 𝑀with 𝑆to 𝑀′;
15: for each session 𝑠𝑖in 𝐶𝑛𝑒𝑤do
update the reservoir with 𝑠𝑖according to Eq (12) to 𝐶′;
18: end for
where 𝑃𝑔(𝑣𝑗) is the predicted probability over the item 𝑣𝑗given by
the model 𝑀other than the ground truth item 𝑣𝑖. The TV distance
either captures the difference over the real interacted item or other
unrelated items.
Obviously, both KL divergence and TV distance have drawbacks
of focusing on a certain elementary event while neglecting the
whole distribution. The only metric that can preserve the difference
at each prediction score is the Wasserstein distance.
Therefore, we propose a Wasserstein reservoir construction strategy that samples the session whose output probability distribution
over the recommendation item has a higher Wasserstein distance
to the user’s real interaction with a higher probability. Intuitively,
when the output probability of a session has higher Wasserstein
distance, the output will contain more information compared with
those with lower Wasserstein distance. Therefore, we sample sessions according to the Wasserstein distance of their output probabilities. For session 𝑠𝑖with corresponding Wasserstein distance 𝑑𝑖
for its output, the sampling probability is calculated as follows:
𝑝sample(𝑠𝑖) =
𝑠𝑗∈𝐶∪𝐶𝑛𝑒𝑤−𝑆𝑑𝑗
where 𝑆is the ongoing updated dataset. The detailed construction
of the Wasserstein reservoir is shown in Algorithm 1. During the
sampling procedure, because there are always new items and new
users in the streaming data, their corresponding embedding vectors
are not trained before they show up. To prevent the model from
neglecting the new sessions, these sessions are directly included.
Since the recommendation task is considered as a classification
problem over the whole item set, we can apply a multi-class crossentropy loss between the predicted recommendation distribution ˆy
and the real interaction y:
y𝑖log (ˆy𝑖) ,
where 𝑙is the number of training sessions in a mini-batch.
EXPERIMENT SETUP
LastFM 1 is a real-world music recommendation dataset, which is
released by Celma Herrada . In this work, we mainly focus on
music artist recommendation. As shown by Guo et al. , we also
consider doing recommendations on artists and choose the 10,000
most popular ones. Based on the time order, we group transactions
in 8 hours from the same user as a session. Following , sessions
that contain more than 20 transactions or less than 2 will be filtered
out. In total, there are 298,919 sessions after the pre-processing.
Gowalla 2 is a point-of-interest real-world dataset collected from
a social network for users’ check-in. The same as Guo et al. , the
30,000 most popular places are used for experiments and check-ins
within 1 day are defined as a session. Again, sessions that contain
more than 20 transactions or less than 2 will be filtered out. Finally,
we have 198,680 sessions during experiments.
Following Chang et al. and Guo et al. , to simulate the streaming situation of the data arriving situation, the dataset is split into
two proportions (60% and 40%) by the chronological order of all
data. The first part is defined as the training set (D𝑡𝑟𝑎𝑖𝑛) while the
second part is the candidate set (D𝑐𝑎𝑛𝑑𝑖𝑑𝑎𝑡𝑒). Specifically, D𝑡𝑟𝑎𝑖𝑛is
used for training the GAG model as offline data. As for D𝑐𝑎𝑛𝑑𝑖𝑑𝑎𝑡𝑒,
it is designed to simulate the online streaming session data. Especially for D𝑐𝑎𝑛𝑑𝑖𝑑𝑎𝑡𝑒, it is further divided into five same-sized test
set by time order, D𝑡𝑒𝑠𝑡,1, . . . , D𝑡𝑒𝑠𝑡,5. Test sets are provided in the
time order to the model during test time. And after testing on the
current test set, the model will be updated according to it and the
updated model accounts for the test for the next test set. Such an
online update is designed for the streaming occasion.
To evaluate the performance of our model, according to the
nature of the user’s picking of the first few recommended items,
the top-20 recommendation is applied here and we mainly compare
different models based on the Recall@𝐾and MRR@𝐾.
In our experiments, we will mainly compare our GAG model to the
following representative baseline methods:
• POP always chooses the most popular items of all users to
recommend to other users. It is a simple yet strong baseline.
• S-POP recommends the most popular items that appear in
the current session instead of the whole item set.
• BPR-MF is a method that mainly makes use of a pairwise
ranking loss . Also, the Matrix Factorization is modified
to suit the session-based recommendation as in .
1 
2 
• GRU4REC utilizes GRU layers to learn the session embedding in the anonymous setting .
• NARM adds an attention layer to item level across the session to encode the session information within an anonymous
setting .
• FGNN makes use of GNN to learn an embedding of an anonymous session to make recommendation . This method
does not consider the user information.
• SSRM is a state-of-the-art method for the SSR problem,
which applies a reservoir to sample the history sessions
to help the current session embedding learning .
Training Detail
In the implementation of the model, we set all MLPs with 1 layer
and the embedding size is 200 for the fairness of comparison. We
use Adam with a learning rate of 0.003 and set the batch size
as 100 to train the GAG model. The size of the reservoir is set to
|𝐷|/100 and the window size is set to |𝐶𝑛𝑒𝑤|/2 on each 𝐶∪𝐶𝑛𝑒𝑤.
EXPERIMENT RESULTS
In this section, we will describe our experiments on two real-world
datasets and demonstrate the efficacy of our proposed model GAG.
Specifically, four research questions will be addressed:
• RQ1 How does our proposed GAG model perform compared
with current state-of-the-art methods? (Section 5.1)
• RQ2 How does the global attribute help to solve the SSR
problem? (Section 5.2)
• RQ3 How is the performance of the Wasserstein reservoir?
(Section 5.3)
• RQ4 How is the parameter sensitivity of the GAG model?
(Section 5.4)
Comparisons with Baseline Methods
To evaluate the overall performance of the GAG, we compare the
GAG model with the baseline methods mentioned in Section 4.3
by the Recall@20 and MRR@20 scores on Gowalla and LastFM
datasets. The overall results are demonstrated in Fig. 4. We also
use the top-5 and top-10 recommendation results for a more indepth comparison. For fairness, we have the GAG-50 model with
the embedding size as 50 in accordance with the baseline methods.
For the state-of-the-art performance, we have the GAG model with
the embedding size as 200.
General Comparison. The overall performance is shown
in Fig. 4. Clearly, the proposed GAG-50 model outperforms all
the baseline methods in all situations. With the embedding size
increasing to 200, the GAG model achieves the state-of-the-art
results. Both of them show the superiority of the GAG model.
The performance is much worse for conventional methods, such
as POP and S-POP, both of which recommend the most popular
items to users. POP recommends the most popular ones from the
whole item set while S-POP chooses the most popular item in the
current session. POP fixes the recommendation list, which fails to
detect the different patterns of users’ behaviors in different sessions.
However, S-POP is still a strong session-based baseline method
because it can capture the item’s re-occurrence patterns of the
(a) Recall@20 on Gowalla.
(b) MRR@20 on Gowalla.
(c) Recall@20 on LastFM.
(d) MRR@20 on LastFM.
Figure 4: Results of streaming session-based recommendation performance.
session. Besides, for the shallow method BPR-MF, which performs
a matrix factorization of the whole user-item interaction matrix, it
has higher performance compared with POP because it can perform
the personalized recommendation. However, BPR-MF still fails to
outperform S-POP in the SSR problem because S-POP can further
extract the session-specific information.
For deep learning models, GRU4REC is a method that utilizes
GRU to process the session as a sequence and output a session
embedding to make a recommendation. It outperforms traditional
methods in most situations, which is proof of the superiority of
the deep learning-based approaches. Besides, methods utilizing
the attention mechanism, e.g., NARM and SSRM, obtain a great
improvement compared with GRU4REC, which shows the capability
of the attention mechanism to learn the inter-dependency of items.
Especially, SSRM is specifically for the SSR problem and it is the
strongest baseline in the experiment.
Recently, graph neural networks have been demonstrated to have
a strong ability to model structured data. For example, FGNN is a
state-of-the-art method for SR. In this experiment, we can see that
FGNN achieves a comparable performance with SSRM. Compared
with GAG-50, FGNN has a worse performance because it is only
designed for SR and cannot model the user information.
In-depth Comparison. We further evaluate GAG model
by the top-5 and top-10 recommendation results on the Gowalla
dataset. Specifically, we use the Recall@𝐾and the MRR@𝐾(𝐾=
5, 10) scores to demonstrate the result in Fig. 5.
According to the results, GAG and GAG-50 still have superiority
in the higher standard recommendation. Compared with GNNbased methods, SSRM has a greater drop in both top-5 and top-10
performance, implying that the graph structure and GNN are more
suitable for the session representation and the generalization ability.
(a) Recall@5 index.
(b) MRR@5 index.
(c) Recall@10 index.
(d) MRR@10 index.
Figure 5: In-depth results of streaming session-based recommendation performance on Gowalla.
In contrast, the attention mechanism fails to distinguish the item
transition pattern in sessions.
Effect of Global Attribute
In our GAG model, we utilize the global attribute in both the node
embedding update and the global attribute update itself. In this
experiment, we conduct the ablation study and make different
substitutions of the global attribute to evaluate its efficacy. We use
the Recall@20 and MRR@20 on Gowalla and LastFM datasets to
evaluate the performance.
Ablation Study. In this experiment, we compare the GAG
model with the following variants:
• FGNN: FGNN uses the GNN layer that does not take the user
information in both the node update layer and the readout
function (readout function in a normal GNN model represents the graph level output function). It serves as the basic
baseline method.
• GAG-FGNN: We substitute the node update function with
FGNN’s node update layer and maintain the global attribute
update function in GAG to evaluate the integration of the
user’s information in the global attribute update.
• GAG-NoGA: In this variant, we keep the global attribute in
the node update procedure while removing it in the global
attribute update function.
The results are presented in Fig. 6. Each module using the global
attribute has a contribution to the recommendation performance.
In general, FGNN is the worst because it neglects the global attribute. GAG-FGNN and GAG-NoGA both make improvements
by introducing the global attribute. Specifically, GAG-FGNN uses
the global attribute in the global attribute update function while
GAG-NoGA incorporates the global attribute in the node update
function. Comparing these two variants, the results prove that the
(a) Recall@20 on Gowalla.
(b) MRR@20 on Gowalla.
(c) Recall@20 on LastFM.
(d) MRR@20 on LastFM.
Figure 6: Results of the ablation study of the global attribute.
GAG-Static
GAG-RanUni
GAG-FixNew
GAG-WassUni
(a) Recall@20 on Gowalla.
GAG-Static
GAG-RanUni
GAG-FixNew
GAG-WassUni
(b) MRR@20 on Gowalla.
GAG-Static
GAG-RanUni
GAG-FixNew
GAG-WassUni
(c) Recall@20 on LastFM.
GAG-Static
GAG-RanUni
GAG-FixNew
GAG-WassUni
(d) MRR@20 on LastFM.
Figure 7: Results of the different reservoir sampling strategies.
global attribute applied to the node update procedure has a greater
impact on the recommendation performance than in its self-update.
Effect of Wasserstein Reservoir
In this section, we conduct experiments to prove the efficacy of the
Wasserstein reservoir. The reservoir consists of two major designs:
(1) The sampling procedure is based on the Wasserstein distance between the session’s predictive distribution and the real interaction;
(2) Sessions containing new items or new users will be added to the
training sample directly. We substitute the Wasserstein reservoir
with other reservoirs to evaluate how the design of the reservoir
affects the performance of the GAG model in the SSR problem.
Ablation Study. In this experiment, an ablation study is
conducted to prove the efficacy of both designs in our Wasserstein
reservoir. The variants are listed out as follows:
• GAG-Static: For this method, we simply eliminate the online
training of the model.
• GAG-RanUni: This variant only performs random sampling on the union set of the current reservoir and new
arrival sessions. It is the most common design of a reservoir.
• GAG-FixNew: This variant directly adds a new session containing new items or new users to the training data. For the
rest, it still performs a random sampling.
• GAG-WassUni: This method samples the training data from
the union set of the current reservoir and the new sessions
according to their Wasserstein distance.
According to the result in Fig. 7, our proposed Wasserstein reservoir achieves the best performance in all situations. For the static
recommendation version, GAG-Static, its performance decreases
along with the time because there is a shift of the users’ preference
and the streaming sessions contain new items and new users. In
most cases, the random sampling version variant, GAG-RanUni,
performs worse than other methods that use a specialized reservoir
sampling strategy. The conclusion can be drawn from these two
figures that incorporating the sessions containing new items and
new users helps with the online update of the model. Comparing
GAG-FixNew with GAG-RanUni, the performance of GAG-FixNew
is better on Gowalla while it has a decrease in the long-term prediction of D𝑡𝑒𝑠𝑡,4 and D𝑡𝑒𝑠𝑡,5 on LastFM. The model is distracted
because the new items and new users in these two parts of the
dataset are not representative. Comparing the complete GAG model
with GAG-WassUni, it can be seen that the incorporation of new
users and items can help with online training. Furthermore, the efficacy of Wasserstein distance is demonstrated. With the Wasserstein
distance-based sampling, GAG-WassUni outperforms GAG-RanUni
in most cases. Similarly, GAG also has higher scores than GAG-
FixNew, which randomly samples the training data.
Reservoir Efficiency. There are two important parameters
in the design of the Wasserstein reservoir: the reservoir size and the
window size. On one hand, the reservoir size indicates the volume
of the reservoir, which determines the storage requirement of the
online update for the recommender system. On the other hand, the
window size restricts how many data instances will be sampled for
the online training, which represents the work load of the online
update for the recommender system.
The default reservoir size is set to |𝐷|/100. For comparison, we
change the reservoir size to {|𝐷|/5, |𝐷|/20, |𝐷|/400} to evaluate the
effect of the reservoir size. Results of different reservoir sizes are
presented in Fig. 8. When the reservoir size is set to |𝐷|/100, our
GAG model achieves the best performance. When the reservoir size
increases, the probability of the new sessions stored in the reservoir
decreases, which makes the model concentrate more on the historical data. However, for the streaming data, the recent ones are more
(a) Recall@20 on Gowalla.
(b) MRR@20 on Gowalla.
(c) Recall@20 on LastFM.
(d) MRR@20 on LastFM.
Figure 8: Results of different reservoir size.
(a) Recall@20 on Gowalla.
(b) MRR@20 on Gowalla.
(c) Recall@20 on LastFM.
(d) MRR@20 on LastFM.
Figure 9: Results of different embedding sizes.
representative of the users’ recent preference. When the reservoir
size decreases, the streaming performance drops on a smaller scale,
which indicates that new sessions are more important for the recommendation performance. For the state-of-the-art method SSRM,
it achieves its highest performance with the reservoir size set to
|𝐷|/20, which is 5 times larger than our GAG model. Apparently,
our design has a higher efficiency in reservoir storage.
To evaluate the effect of the window size, we substitute the
default window size, |𝐶|/2, with {|𝐶|, |𝐶|/4, |𝐶|/8, |𝐶|/16, |𝐶|/32}
to evaluate the effect of the window size. In Fig. 10, we demonstrate
the results. It is clear that when the window size is larger, the model
(a) Recall@20 on Gowalla.
(b) MRR@20 on Gowalla.
(c) Recall@20 on LastFM.
(d) MRR@20 on LastFM.
Figure 10: Results of different window size.
can achieve a better recommendation performance because it can
utilize more data to update itself.
Parameter Sensitivity
In this section, we conduct experiments to evaluate the parameter
sensitivity of our GAG model.
Embedding Size. The previous methods achieve the best
results when the embedding size is set to 50 or 100. Therefore, we
test the following variants of our GAG model with the embedding
size of : GAG-50, GAG-100, GAG and GAG-400.
In Fig. 9, results of the sensitivity of the embedding size are
presented. It is clear that when the embedding size is set to 200, the
GAG model has the highest performance in all situations. Size 100 is
a relatively strong variant when compared with 50 and 400. When
the embedding size is set as 50 and 400, they are unrepresentative
and over-parameterized in their respective methods, which causes
difficulty in training a strong model.
Number of Layers. The number of GAG layers controls the
depth of the model. We test our model with different numbers of
layers of : GAG, GAG-2 and GAG-3.
In Fig. 11, the result of different layers is presented. Generally,
GNN models always suffer from an increase in the depth of the
model because of the gradient explosion. In our experiment, the
performance of the GAG model decreases as the model goes deeper,
which is consistent with the common observation. Furthermore,
the connectivity of sessions is smaller than the traditional graph
data, which also limits the power of deeper GNN models.
CONCLUSION
In this paper, we proposed a GAG model with a Wasserstein reservoir to perform SSR. We addressed the problem of how to preserve
users’ long-term interests by introducing the global attribute and
the GAG layer. We designed an effective and generic Wasserstein
(a) Recall@20 on Gowalla.
(b) MRR@20 on Gowalla.
(c) Recall@20 on LastFM.
(d) MRR@20 on LastFM.
Figure 11: Results of different numbers of layers.
reservoir, which samples sessions according to the Wasserstein
distance between their recommendation results and the real interactions. In the future, it is significant to investigate how to incorporate
the cross-session information for the SSR problem.
ACKNOWLEDGMENTS
The work has been supported by Australian Research Council
(Grant No. DP190101985, DP170103954 and FT200100825).