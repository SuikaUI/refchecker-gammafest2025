Active Self-Paced Learning for Cost-Effective and
Progressive Face Identiﬁcation
Liang Lin, Keze Wang, Deyu Meng, Wangmeng Zuo, and Lei Zhang
Abstract—This paper aims to develop a novel cost-effective
framework for face identiﬁcation, which progressively maintains a batch of classiﬁers with the increasing face images
of different individuals. By naturally combining two recently
rising techniques: active learning (AL) and self-paced learning
(SPL), our framework is capable of automatically annotating
new instances and incorporating them into training under weak
expert recertiﬁcation. We ﬁrst initialize the classiﬁer using a few
annotated samples for each individual, and extract image features
using the convolutional neural nets. Then, a number of candidates
are selected from the unannotated samples for classiﬁer updating,
in which we apply the current classiﬁers ranking the samples by
the prediction conﬁdence. In particular, our approach utilizes
the high-conﬁdence and low-conﬁdence samples in the selfpaced and the active user-query way, respectively. The neural
nets are later ﬁne-tuned based on the updated classiﬁers. Such
heuristic implementation is formulated as solving a concise
active SPL optimization problem, which also advances the SPL
development by supplementing a rational dynamic curriculum
constraint. The new model ﬁnely accords with the “instructorstudent-collaborative” learning mode in human education. The
advantages of this proposed framework are two-folds: i) The
required number of annotated samples is signiﬁcantly decreased
while the comparable performance is guaranteed. A dramatic
reduction of user effort is also achieved over other state-of-theart active learning techniques. ii) The mixture of SPL and AL
effectively improves not only the classiﬁer accuracy compared to
existing AL/SPL methods but also the robustness against noisy
data. We evaluate our framework on two challenging datasets,
which include hundreds of persons under diverse conditions, and
demonstrate very promising results. Please ﬁnd the code of this
project at: 
Index Terms—Cost-effective model; Active learning; Self-paced
learning; Incremental processing; Face identiﬁcation
This work was supported in part by the State Key Development Program
under Grant 2016YFB1001004, in part by the National Natural Science Foundation of China under Grant 61671182, 61661166011 and 61373114, in part
by the National Grand Fundamental Research 973 Program of China under
Grant No. 2013CB329404, in part by Hong Kong Scholars Program and Hong
Kong Polytechnic University Mainland University Joint Supervision Scheme,
and sponsored by CCF-Tencent Open Research Fund (NO. AGR20160115).
L. Lin and K. Wang are with School of Data and Computer Science, Sun
Yat-sen University, Guangzhou, China and also with Engineering Research
Center for Advanced Computing Engineering Software of Ministry of Education, China. Email: ; .
D. Meng is with School of Mathematics and Statistics and Ministry of
Education Key Lab of Intelligent Networks and Network Security, Xi’an
Jiaotong University, P. R. China. Email: .
W. Zuo is with School of Computer Science and Technology, Harbin
Institute of Technology, Harbin, P. R. China. Email: .
L. Zhang is with Dept. of Computing, The Hong Kong Polytechnic
University, Hong Kong. Email: .
I. INTRODUCTION
With the growth of mobile phones, cameras and social
networks, a large amount of photographs is rapidly created,
especially those containing person faces.
To interact with
these photos, there have been increasing demands of developing intelligent systems (e.g., content-based personal photo
search and sharing from either his/her mobile albums or social
network) with face recognition techniques , , . Thanks
to several recently proposed pose/expression normalization
and alignment-free approaches , , , identifying face
in the wild has achieved remarkable progress. As for the
commercial product, the website “Face.com” once provided
an API (application interface) to automatically detect and
recognize faces in photos. The main problem in such scenarios
is to identify individuals from images under a relatively unconstrained environment. Traditional methods usually handle
this problem by supervised learning , while it is typically
expensive and time-consuming to prepare a good set of labeled
samples. Since only a few data are labeled, Semi-supervised
learning may be a good candidate to solve this problem.
But it has been pointed out by : Due to large amounts of
noisy samples and outliers, directly using the unlabeled data
may signiﬁcantly reduce learning performance.
This paper targets on the challenge of incrementally learning
a batch of face recognizers with the increasing face images
of different individuals1. Here we assume that the person
faces can be basically detected and localized by existing face
detectors. However, to build such a system is quite challenging
in the following aspects.
• Person faces have large appearance variations (see examples in Fig. I (a)) caused by diverse views and expressions
as well as facial accessories (e.g., glasses and hats) and
aging. The different lighting condition is also required to
be considered in practice.
• It is possible that only a few labeled samples are accessible at ﬁrst, and the changes of personal faces are rather
unpredictable over time, especially under the current
scenarios that there are large amount of images swarmed
into Internet every day.
• Even though a few user interventions (e.g., labeling new
samples) could be allowed, the user effort is desired to
be kept minimizing over time.
Conventional incremental face recognition methods such
as incremental subspace approaches , often fail on
complex and large-scale environments. Their performances
1 
 
Illustration of high- and low-conﬁdence samples in the feature space.
(a) shows a few face instances of different individuals, and these instances
have large appearance variations. (b) illustrates how the samples distribute in
the feature space, where samples of high classiﬁcation conﬁdence distribute
compactly to form several clusters and low conﬁdence samples are scattered
and close to the classiﬁer decision boundary.
could be dropped drastically when the initial training set of
face images is either insufﬁcient or inappropriate. In addition,
most of existing incremental approaches suffer from noisy
samples or outliers in the model updating. In this work, we
propose a novel active self-paced learning framework (ASPL)
to handle the above difﬁculties, which absorbs powers of two
recently rising techniques: active learning (AL) , and
self-paced learning (SPL) , , . In particular, our
framework tends to conduct a “Cost-less-Earn-more” working
manner: as much as possible pursuing a high performance
while reducing costs.
The basic approach of the AL methods is to progressively
select and annotate most informative unlabeled samples to
boost the model, in which user interaction is allowed. The
sample selection criteria is the key in AL, and it is typically
deﬁned according to the classiﬁcation uncertainty of samples.
Speciﬁcally, the samples of low classiﬁcation conﬁdence,
together with other informative criteria like diversity, are
generally treated as good candidates for model retraining.
On the other hand, SPL is a recently proposed learning
regime to mimic the learning process of humans/animals that
gradually incorporates easy to more complex samples into
training , , where an easy sample is actual the one of
high classiﬁcation conﬁdence by the currently trained model.
Interestingly, the two categories of learning methods select
samples with the opposite criteria. This ﬁnding inspires us to
investigate the connection between the two learning regimes
and the possibility of making them complementary to each
other. Moreover, as pointed out in , , learning based
features are considered to be able to exploit information with
better discriminative ability for face recognition, compared to
the hand-crafted features. We thus utilize the deep convolutional neural network (CNN) , for feature extraction
instead of using handcraft image features.. In sum, we aim at
designing a cost-effective and progressive learning framework,
which is capable of automatically annotating new instances
and incorporating them into training under weak expert recertiﬁcation. In the following, we discuss the advantage of
our ASPL framework in two aspects: “Cost-less” and “Earnmore”.
(I) Cost less: Our framework is capable of building effective
classiﬁers with less labeled training instances and less user
efforts, compared with other state-of-the-art algorithms. This
property is achieved by combining the active learning and
self-paced learning in the incremental learning process. In
certain feature space of model training as Fig. 1 (b) illustrates,
samples of low classiﬁcation conﬁdence are scattered and
close to the classiﬁer decision boundary while high conﬁdence
samples distribute compactly in the intra-class regions. Our
approach takes both categories of samples into consideration
for classiﬁer updating. The beneﬁt of this strategy includes:
i) High-conﬁdence samples can be automatically labeled and
consistently added into model training throughout the learning
process in a self-paced fashion, particularly when the classiﬁer
becomes more and more reliable at later learning iterations.
This signiﬁcantly reduce the burden of user annotations and
make the method scalable in large-scale scenarios. ii) The
low-conﬁdence samples are selected by allowing active user
annotations, making our approach more efﬁciently pick up
informative samples, more adapt to practical variations and
converge faster, especially in the early learning stage of
(II) Earn more: The mixture of self-paced learning and
active learning effectively improves not only the classiﬁer accuracy but also the classiﬁer robustness against noisy samples.
From the perspective of AL, extra high-conﬁdence samples
are automatically incorporated into the retraining without cost
of human labor in each iteration, and faster convergence can
be thus gained. These introduced high-conﬁdence samples
also contribute to suppress noisy samples in learning, due
to their compactness and consistency in the feature space.
From the SPL perspective, allowing active user intervention
generates the reliable and diverse samples that can avoid the
learning been misled by outliers. In addition, utilizing the CNN
facilitates to pursue a higher classiﬁcation performance by
learning the convolutional ﬁlters instead of hand-craft feature
engineering.
In brief, our ASPL framework includes two main phases.
At the initial stage, we ﬁrst learn a general face representation
using an architecture of convolutional neural nets, and train a
batch of classiﬁers with a very small set of annotated samples
of different individuals. In the iteration learning stage, we rank
the unlabeled samples according to how they relate to the
current classiﬁers, and retrain the classiﬁers by selecting and
annotating samples in either active user-query or self-paced
manners. We can also make the CNN ﬁne-tuned based on the
updated classiﬁers.
The key point in designing such an effective interactive
learning system is to make an efﬁcient labor division between
computers and human participants, i.e., we should possibly
feed computable and faithful tasks into computers, and to possibly arrange labor-saving and intelligent tasks to humans .
The proposed ASPL framework provides a rational realization
to this task by automatically distinguishing high-conﬁdence
samples, which can be easily and faithfully recognized by
computers in a self-paced way, and low-conﬁdence ones,
which can be discovered by requesting user annotation.
The main contributions of this work are several folds. i)
To the best of our knowledge, our work is the ﬁrst one to
make a face recognition framework capable of automatically
annotating high-conﬁdence samples and involve them into
training without need of extra human labor in a purely selfpaced manner under weak recertiﬁcation of active learning.
Especially in that along the learning process, we can achieve
more and more pseudo-labeled samples to facilitate learning
totally for free. Our framework is thus suitable in practical large-scale scenarios. The proposed framework can be
easily extended to other similar visual recognition tasks. ii)
We provide a concise optimization problem and theoretically
interpret that the proposed ASPL is an rational implementation
for solving this problem. iii) This work also advances the
SPL development, by setting a dynamic curriculum variation.
The new SPL setting better complies with the “instructorstudent-collaborative” learning mode in human education than
previous models. iv) Extensive experiments on challenging
CACD and CASIA-WebFace datasets show that our approach
is capable of achieving competitive or even better performance
under only small fraction of sample annotations than that
under overall labeled data. A dramatic reduction (> 30%) of
user interaction is achieved over other state-of-the-art active
learning methods.
The rest of the paper is organized as follows. Section II
presents a brief review of related work. Section III overview
the pipeline of our framework, followed by a discussion
of model formulation and optimization in Section IV. The
experimental results, comparisons and component analysis are
presented in Section V. Section VI concludes the paper.
II. RELATED WORK
In this section, we ﬁrst present a review for the incremental
face recognition, and then brieﬂy introduce related developments on active learning and self-paced learning.
Incremental Face Recognition. There are two categories
of methods addressing the problem of identifying faces with
incremental data, namely incremental subspace and incremental classiﬁer methods. The ﬁrst category mainly includes
the incremental versions of traditional subspace learning approaches such as principal component analysis (PCA) 
and linear discriminant analysis (LDA) . These approaches
map facial features into a subspace, and keep the eigen
representations (i.e., eigen-faces) updated by incrementally
incorporating new samples. And face recognition is commonly
accomplished by the nearest neighbor-based feature matching,
which is computational expensive when a large number of
samples are accumulated over time. On the other hand, the
incremental classiﬁer methods target on updating the prediction boundary with the learned model parameters and new
samples. Exemplars include the incremental support vector
machines (ISVM) and the online sequential forward
neural network . In addition, several attempts have been
made to absorb advantages from both of the two categories
of methods. For example, Ozawa et al., proposed to
integrate the Incremental PCA with the resource allocation
network in an iterative way. Although these mentioned approaches make remarkable progresses, they suffer from low
accuracy compared with those of batch-based state-of-the-art
face recognizers, and none of these approaches have been
successfully validated on large-scale datasets (e.g., more than
500 individuals). And these approaches are basically studied
in the context of fully supervised learning, i.e., both initial and
incremental data are required to be labeled.
Active Learning. This branch of works mainly focus on
actively selecting and annotating the most informative unlabeled samples, in order to avoid unnecessary and redundant
annotation. The key part of active learning is thus the selection
strategy, i.e., which samples should be presented to the user for
annotation. One of the most common strategies is the certaintybased selection , , in which the certainties are measured according to the predictions on new unlabeled samples
obtained from the initial classiﬁers. For example, Lewis et al.,
 proposed to take the most uncertain instance as the one
that has the largest entropy on the conditional distribution over
its predicted labels. Several SVM-based methods determine the uncertain samples as they are relatively close to the
decision boundary. The sample certainty was also measured by
applying a committee of classiﬁers in . These certaintybased approaches usually ignore the large set of unlabeled
instances, and are thus sensitive to outliers. A number of later
methods present the information density measure by exploiting
the information of unlabeled data when selecting samples. For
example, the informative samples are sequentially selected
to minimize the generalization error of the trained classiﬁer
on the unlabeled data, based on a statistical approach 
or prior information . In , , instances are taken
to maximize the increase of mutual information between the
candidate instances and the remaining ones based on Gaussian
Process models. The diversity of the selected instance over
the unlabeled data has been also taken into consideration
 . Recently, Elhamifar et al., presented a general
framework via convex programming, which considered both
the uncertainty and diversity measure for sample selection.
However, these mentioned active learning approaches usually
emphasize those low-conﬁdence samples (e.g., uncertain or
diverse samples) while ignoring the other majority of highconﬁdence samples. To enhance the discriminative capability,
wang et al. proposed a uniﬁed semi-supervised learning
framework, which incorporates the high conﬁdence coding
vectors of unlabeled data into training under the proposed effective iterative algorithm, and demonstrate its effectiveness in
dictionary-based classiﬁcation. Our work inspires by this work,
and also employs the high-conﬁdence samples to improve both
accuracy and robustness of classiﬁers.
Self-paced Learning. Inspired by the cognitive principle
of humans/animals, Bengio et al. initialized the concept
of curriculum learning (CL), in which a model is learned
by gradually including samples into training from easy to
complex. To make it more implementable, Kumar et al. 
substantially prompted this learning philosophy by formulating
the CL principle as a concise optimization model named selfpaced learning (SPL). The SPL model includes a weighted
loss term on all samples and a general SPL regularizer
imposed on sample weights. By sequentially optimizing the
model with gradually increasing pace parameter on the SPL
regularizer, more samples can be automatically discovered in
Fig. 2. Illustration of our proposed cost-effective framework. The pipeline includes stages of CNN and model initialization; classiﬁer updating; high-conﬁdence
sample labeling by the SPL, low-conﬁdence sample annotating by AL and CNN ﬁne-tuning, where the arrows represent the workﬂow. The images highlighted
by blue in the left panel represent the initially selected samples.
a pure self-paced way. Jiang et al. , , provided
more comprehensive understanding for the learning insight
underlying SPL/CL, and formulated the learning model as a
general optimization problem as:
w,v∈ n
viL(w; xi, yi) + f(v; λ)
where D = {(xi, yi)}n
i=1 corresponds to the training dataset,
L(w; xi, yi) denotes the loss function which calculates the
cost between the objective label yi and the estimated one, w
represents the model parameter inside the decision function,
v = [v1, v2, · · · , vn]T denote the weight variables reﬂecting
the samples’ importance. λ is a parameter for controlling the
learning pace, which is also referred as “pace age”.
In the model, f(v; λ) corresponds to a self-paced regularizer. Jiang et al. abstracted three necessary conditions it should
be satisfy , : (1) f(v; λ) is convex with respect to
v ∈ ; (2) The optimal weight of each sample should
be monotonically decreasing with respect to its corresponding
loss; and (3) The optimal weight of each sample should be
monotonically decreasing with respect to the pace parameter
In this axiomic deﬁnition, Condition 2 indicates that the
model inclines to select easy samples (with smaller errors)
in favor of complex samples (with larger errors). Condition
3 states that when the model “age” λ gets larger, it embarks
on incorporating more, probably complex, samples to train a
“mature” model. The convexity in Condition 1 further ensures
that the model can ﬁnd good solutions.
Ψ is the so called curriculum region that encodes the information of predetermined curriculums. Its axiomic deﬁnition
contains two conditions : (1) It should be nonempty and
convex; and (2) If xi is ranking before xj in curriculum (more
important for the problem), the expectation
Ψ vi dv should
be larger than
Ψ vj dv. Condition 1 ensures the soundness
for the calculation of this speciﬁc constraint, and Condition
2 indicates that samples to be learned earlier is supposed to
have larger expected values. This constraint weakly implies a
prior learning sequence of samples, where the expected value
for the favored samples should be larger.
The SPL model (1) ﬁnely simulates the learning process
of human education. Speciﬁcally, it builds an “instructorstudent collaborative” paradigm, which on one hand utilizes
prior knowledge provided by instructors as a guidance for
curriculum designing (encoded by the curriculum constraint),
and on the other hand leaves certain freedom to students to
ameliorate the actual curriculum according to their learning
pace (encoded by the self-paced regularizer). Such a model not
only includes all previous SPL/CL methods as its special cases,
but also provides a general guild line to extend a rational SPL
implementation scheme against certain learning task. Based
on this framework, multiple SPL variations have been recently
proposed, like SPaR , SPLD , SPMF and SPCL
The SPL related strategies have also been recently attempted
in a series of applications, such as speciﬁc-class segmentation learning , visual category discovery , long-term
tracking , action recognition and background subtraction . Especially, the SPaR method, constructed based on
the general formulation (1), was applied to the challenging
SQ/000Ex task of the TRECVID MED/MER competition,
and achieved the leading performance among all competing
teams .
Complementarity between AL and SPL: It is interesting
that the function of SPL is very complementary to that of AL.
The SPL methods emphasize easy samples in learning, which
correspond to the high-conﬁdence intra-class samples, while
AL inclines to pick up the most uncertain and informative
samples for the learning task, which are always located in lowconﬁdence area near classiﬁcation boundaries. SPL is capable
of easily attaining large amount of faithful pseudo-labeled
samples with less requirement of human labors (by reranking
technique . We will introduce details in Section 4), while
tends to underestimate the roles of those most informative
ones intrinsically conﬁguring the classiﬁcation boundaries; on
the contrary, AL inclines to get informative samples, while
need more human labors to manually annotate these samples
with more carefully annotation. We thus expect to effectively
mix these two learning schemes to help incremental learning
both improve the efﬁciency with less human labors (i.e.,
Cost Less) and achieve better accuracy and robustness of the
learned classiﬁer against noisy samples (i.e., Earn More). This
constructs the basic motivation of our ASPL framework for
face identiﬁcation under large-scale scenarios.
III. FRAMEWORK OVERVIEW
In this section, we illustrate how our ASPL model works. As
illustrated in Fig. 2, the main stages in our framework pipeline
include: CNN pretraining for face representation, classiﬁer
updating, high-conﬁdence sample pseudo-labeling in a selfpaced fashion, low-conﬁdence sample annotating by active
users, and CNN ﬁne-tuning.
CNN pretraining: Before running the ASPL framework, we
need to pretrain a CNN for feature extraction based on a pregiven face dataset. These images are extra selected without
overlapping to all our experimental data. Since several public
available CNN architectures , have achieved remarkable success on visual recognition, our framework supports to
directly employ these architectures and their pretrained model
as initialized parameters. In our all experiments, AlexNet 
is utilized. Given the extra selected of annotated samples, we
further ﬁne-tune the CNN for learning discriminative feature
representation.
Initialization: At the beginning, we randomly select few
images for each individual, extract feature representation for
them by pretrained CNN, and manually annotate labels to them
as the starting point.
Classiﬁer updating: In our ASPL framework, we use onevs-all linear SVM as our classiﬁer updating strategies. In the
beginning, only a small part of samples are labeled, and we
train an initial a classiﬁer for every individual using these
samples. As the framework gets mature, samples manually
annotated by the AL and pseudo-labeled by the SPL are
growing, we adopt them to retrain the classiﬁers.
High-conﬁdence sample pseudo-labeling: We rank the unlabeled samples by their important weights via the current
classiﬁers, e.g., using the classiﬁcation prediction hinge loss,
and then assign pseudo-labels to the top-ranked samples of
high conﬁdences. This step can be automatically implemented
by our system.
Low-conﬁdence sample annotating: Based on certain AL
criterion obtained under the current classiﬁers, rank all unlabeled samples, select those top-ranked ones (most informative
and generally with low-conﬁdence) from the unlabeled samples, and then manually annotate these samples by active users.
CNN ﬁne-tuning: After several steps of the interaction, we
make the neural nets ﬁne-tuned by the backward propagation
algorithm. All self-labeled samples by the SPL and manually
annotated ones by the AL are added into the network, we
utilize the softmax loss to optimize the CNN parameters via
stochastic gradient decent approach.
IV. FORMULATION AND OPTIMIZATION
In this section we will discuss the formulation of our proposed framework, and also provide a theoretical interpretation
of its entire pipeline from the perspective of optimization. In
speciﬁc, we can theoretically justify that the entire pipeline of
this framework ﬁnely accords with a solving process for an
active self-paced learning (ASPL) optimization model. Such a
theoretical understanding will help deliver more insightful understanding on the intrinsic mechanism underlying the ASPL
A. Active Self-paced Learning
In the context of face identiﬁcation, suppose that we have
n facial photos which are taken from m subjects. Denote the
training samples as D = {xi}n
i=1 ⊂Rd, where xi is the ddimensional feature representation for the ith sample. We have
m classiﬁers for recognizing each sample by the one-vs-all
Learned knowledge from data will be utilized to ameliorate
our model after a period of pace increasing. Correspondingly,
we denote the label set of xi as yi = {y(j)
∈{−1, 1}}m
where y(j)
corresponds to the label of xi for the jth subject.
That is, if y(j)
= 1, this means that xi is categorized as a face
from the jth subject.
On our problem setting, we should give two necessary
remarks. One is that in our investigated face identiﬁcation
problems, almost all data have not been labeled before our
system running. Only very small amount of samples are
annotated as the initialization. That is, most of {yi}n
unknown and needed to be completed in the learning process.
In our system, a minority of them is manually annotated by
the active users and a majority is pseudo-labeled in a selfpaced manner. The other remark is that the data {xi}n
possibly been inputted into the system in an incremental way.
This means that the data scale might be consistently growing.
Via the proposed mechanism of combining SPL and AL, our
proposed ASPL model can adaptively handle both manually
annotated and pseudo-labeled samples, and still progressively
ﬁt the consistently growing unlabeled data in such an incremental manner. The ASPL is formulated as follows:
{w,b,v,yi∈{−1,1}m,i/∈Ωλ}
w(j), b(j), D, y(j), v(j)
where w ={w(j)}m
Rd and b = {b(j)}m
represent the weight and bias parameters of the decision
functions for all m classiﬁers. C(C
0) is the standard regularization parameter trading off the loss function
and the margin, and we set C = 1 in our experiments.
v = {[v(j)
2 , · · · , v(j)
j=1 denotes the weight variables
reﬂecting the training samples’ importance, and λj is a parameter (i.e. the pace age) for controlling the learning pace of the
jth classiﬁer. f
is the self-paced regularizer controlling the learning scheme. We denote the index collection of
all currently active annotated samples as Ωλ = ∪m
where Ωλj corresponds to the set of the jth subject with the
pace age λj. Here Ωλ is introduced as a constraint on yi.
i } composes of the curriculum constraint of
the model at the m classiﬁers’ pace age λ = {λj}m
particular, we specify two alternative types of the curriculum
constraint for each sample xi, as:
= is for the pseudo-labeled sample, i.e.,
i /∈Ωλ. Then, its importance weights with respect to all
the classiﬁers {v(j)
j=1 need to be learned in the SPL
optimization.
i = {1} is for the sample annotated by the AL process,
i ∈Ωλj. Thus, its importance weights
are deterministically set during the model training, i.e.,
Each type of the curriculums will be detailedly interpreted in
Section II. Note that different from the previous SPL settings,
this curriculum Ψλ
i can be dynamically changed with respect
to all the pace ages λ of m classiﬁers. This conducts the
superiority of our model, as we discuss in the end of this
We then deﬁne the loss function L
 w(j), b(j), D, y(j), v(j)
w(j), b(j), D, y(j), v(j)
w(j), b(j); xi, y(j)
i (w(j)T xi + b(j))
+ 1| ≤2, y(j)
∈{−1, 1}, i /∈Ωλ,
i (w(j)T xi + b(j))
+ is the hinge loss of xi in
the jth classiﬁer. The cost term corresponds to the summarized
loss of all classiﬁers, and the constraint term only allows two
kinds of feasible solutions: i) for any i, there exists y(j)
while for all other y(k)
= −1 for all k ̸= j; ii) y(j)
all j = 1, 2, · · · , m (i.e., background or an unknown person
class). These samples xi will be added into the unknown
sample set U. It is easy to see that such constraint complies
with real cases where a sample should be categorized into one
pre-speciﬁed subject or not classiﬁed into any of the current
Referring to the known alternative search strategy, we
can then solve this optimization problem. Speciﬁcally, the
algorithm is designed by alternatively updating the classiﬁer
parameters w, b via one-vs-all SVM, the sample importance
weights v via the SPL, the pseudo-label y via reranking.
Along with gradually increasing pace parameter λ, the optimization updates: i) the curriculum constraint Ψλ via AL
and ii) the feature representation via CNN ﬁne-tuning. In the
following we introduce the details of these optimization steps,
and give their physical interpretations. The correspondence of
this algorithm to the practical implementation of the ASPL
system will also be discussed in the end.
Initialization: As introduced in the framework, we initialize
our system running by using pre-trained CNN to extract
feature representations of all samples {xi}n
i=1. Set an initial
m classiﬁers’ pace parameter set λ = {λj}m
j=1. Initialize
the curriculum constraint Ψλ with currently user annotated
samples Ωλ and corresponding {y(j)}m
j=1 and v.
Classiﬁer Updating: This step aims to update the classiﬁer parameters {w(j), b(j)}m
j=1 by one-vs-all SVM. Fixing
i=1, v, {yi}n
i=1, Ψλ}, the original ASPL model Eqn. (2)
can be simpliﬁed into the following form:
w(j), b(j); xi, y(j)
which can be equivalently reformulated as solving the following independent sub-optimization problems for each classiﬁer
j = 1, 2, · · · , m:
w(j), b(j); xi, y(j)
This is a standard one-vs-all SVM model with weights by
taking one-class sample as positive while all others as negative.
Speciﬁcally, when the weights v(j)
are only of values {0, 1},
it corresponds to a simpliﬁed SVM model under sampled
instances with v(j)
= 1; otherwise when vj
i sets values from
 , it corresponds to the weighted SVM model. And both
of them can be readily solved by many off-the-shelf efﬁcient
solvers. Thus, this step can be interpreted as implementing
one-vs-all SVM over instances manually annotated from the
AL and self-annotated from the SPL.
High-conﬁdence Sample Labeling: This step aims to
assign pseudo-labels y and corresponding important weights
v to the top-ranked samples of high conﬁdences.
We start by employing the SPL to rank the unlabeled
samples according to their importance weights v. Under ﬁxed
{w, b, {xi}n
i=1, {yi}n
i=1, Ψλ}, our ASPL model in Eqn. (2)
can be simpliﬁed to optimize v as:
w(j), b(j); xi, y(j)
This problem then degenerates to a standard SPL problem
as in Eqn.(1). Since both the self-paced regularizer f(v(j); λj)
and the curriculum constraint Ψλ is convex (with respect
to v), various existing convex optimization techniques, like
the gradient-based or interior-point methods, can be used for
solving it. Note that we have multiple choices for the selfpaced regularizer, as those built in . All of them
comply with three axiomic conditions required for a self-paced
regularizer, as deﬁned in Section II.
Based on the second axiomatic condition for self-paced
regularizer, any of the above f(v(j); λj) inclines to conduct
larger weights on high-conﬁdence (i.e., easy) samples with
less loss values while vice versa, which evidently facilitates the
model with the “learning from easy to hard” insight. In all our
experiments, we utilize the linear soft weighting regularizer
due to its relatively easy implementation and well adaptability
to complex scenarios. This regularizer penalizes the sample
weights linearly in terms of the loss. Speciﬁcally, we have
f(v(j), λj) = λj(1
where λj > 0. Eqn. (6) is convex with respect to v(j), and
we can thus search for its global optimum by computing the
partial gradient equals. Considering v(j)
∈ , we deduce
the analytical solution for the linear soft weighting, as,
otherwise,
where ℓij = l
w(j), b(j); xi, y(j)
is the loss of xi in the jth
classiﬁer. Note that the deducing way to Eqn. (7) is similar
with in , but our resulting solution is different since our
ASPL model in Eqn. (2) is new.
After obtaining the weight v for all unlabeled samples (i /∈
Ωλ) according to the optimized v(j) in a descending order.
Then we consider the samples with larger important weight
than others are high conﬁdences. We form these samples into
high-conﬁdence sample set S and assign them pseudo-labels:
Fixing {w, b, {xi}n
i=1, Ψλ, v}, we optimize yi of Eqn. (2)
which corresponds to solve:
yi∈{−1,1}m,i∈S
where vi is ﬁxed and can be treated as constant. When xi
belongs to a certain person class, Eqn. (11) has an optimum,
which can be exactly extracted by the Theorem 1. The proof
is speciﬁed in the supplementary material.
Denote those js that satisfy w(j)T xi + b(j) ̸= 0 and v(j)
(0, 1] as a set M and set all y(j)
= −1 for others in default
2. The solution of Eqn. (11) for y(j)
i , j ∈M can be obtained
by the following theorem.
Theorem 1:
w(j)T xi + b(j) < 0, Eqn. (11) has a
j = 1, ..., m;
∀j ∈M except j = j∗, w(j)T xi + b(j) < 0,
i.e., v(j∗)
ℓij∗> 0, then Eqn. (11) has a solution:
−1, j ̸= j∗
1, j = j∗;
(c) Otherwise, Eqn. (11) has a solution:
 −1, j ̸= j∗
1, j = j∗,
= 0 actually implies that the i-th sample is with low-conﬁdence to
be annotated as the j-th class, and thus it is natural to pseudo-label it as a
negative sample for the j-th class. wT x + b = 0 implies that a sample is
located in the classiﬁcation boundary of the j-th class, and thus it is also a
low-conﬁdence j-class sample and thus we directly annotate it as negative.
Actually, for these samples, pseudo-label them as positive or negative will
not affect the value of the objective function of Eq. (11). We tend to annotate
these low-conﬁdence samples as negative since due to the constraint of Eq.
(11) (at most one positive class one sample is allowed to be annotated), this
will not inﬂuence selecting a more rational positive class for each sample.
j∗= arg min
(j)T xi + b(j))
Actually, only those high-conﬁdence samples with positive
weights, as calculated in the last updating step for v, are
meaningful for the solution. This implies the physical interpretation for this optimization step: we iteratively ﬁnd the highconﬁdence samples based on the current classiﬁer, and then
enforce pseudo-labels yi on those top-ranked high-conﬁdence
ones (i ∈S). This is exactly the mechanism underlying a
reranking technique .
The above optimization process can be understood as the
self-learning manner of a student. The student tends to pick
up most high-conﬁdent samples, which imply easier aspects
and faithful knowledge underlying data, to learn, under the
regularization of the pre-designed curriculum Ψλ. Such regularization inclines to rectify his/her learning process so as to
avoid him/her stuck into a unexpected overﬁtting point.
Low-conﬁdence
Annotating:
pseudolabeling high-conﬁdence samples in such a self-paced uncertainty modeling, we employ AL fashion to update the
curriculum constraint Ψλ in the model by supplementing
more informative curriculums based on human knowledge.
The AL process aims to select most low-conﬁdence unlabeled
samples and to annotate them as either positive or negative by
requesting user annotation. Our selection criteria are based on
the classical uncertainty-based strategy , . Speciﬁcally,
given the current classiﬁers, we randomly collected a number
of randomly unlabeled samples, which are usually located in
low-conﬁdence area near the classiﬁcation boundaries.
1) Annotated Sample Verifying: Considering the user annotation may contain outliers (incorrectly annotated samples), we
introduce a veriﬁcation step to correct the wrongly annotated
samples. Assuming that labeled samples with lower prediction
scores from the current classiﬁers have higher probability of
being incorrectly labeled, we propose to ask the active user
to verify their annotations on these samples. Speciﬁcally, in
this step we ﬁrst employ the current classiﬁers to obtain the
prediction scores of all the annotated samples. Then we rerank them and select Top-L ones with lowest prediction scores
and ask the user to verify these selected samples, i.e., doublechecking them. We can set L as a small number (L = 5 in
our experiments), since we do believe the chance of human
making mistakes is low. In sum, we improve the robustness
of the AL process by further validating Top-L most uncertain
samples with the user. In this way, we can reduce the effects of
accumulated human annotation errors and enable the classiﬁer
to be trained in a robust manner.
2) Low-conﬁdence Deﬁnition: When we utilize the current classiﬁers (m classiﬁers for discriminating m object
categories) to predict the label of unlabeled samples, those
predicted as more than two positive labels (i.e., predicted as
the corresponding object category) actually represent these
samples making the current classiﬁers ambiguous. We thus
adopt them as so called ”low-conﬁdent” samples and require
active user to manually annotate them. Actually, in this step,
other ”low-conﬁdence” criterion can be utilized. We employed
this simple strategy just due to its intuitive rationality and
efﬁciency.
After users perform manual annotation, we update the Ψλ
by additionally incorporating those newly annotated sample
set φ into the current curriculum Ψλ. For each annotated
sample, our AL process includes the following two operations:
i) Set its curriculum constraint, i.e., {Ψλ
i }i∈φ = {1}; ii)
Update its labels {yi}i∈φ and add its index into the set of
currently annotated samples Ωλ. Such speciﬁed curriculum
still complies with the axiomic conditions for the curriculum
constraint as deﬁned in . For those annotated samples,
the corresponding Ψλ
i = {1} with expectation value 1 over
the whole set, while for others Ψλ
i = with expectation
value 1/2. Thus the more informative samples still have a
larger expectation than the others. Also, it is easy to see Ψλ is
non-empty and convex. It thus complies traditional curriculum
understanding.
New Class Handling: After the AL process, if active user
annotates the selected unlabeled samples with u unseen person
classes, new classiﬁers for these unseen classes are needed to
be initialized without affecting the existed classiﬁers. Moreover, there is another difﬁculty that the samples of the new
class are not enough for classiﬁer training. Thanks to the
proposed ASPL framework, we can employ the following four
steps to address above mentioned issues.
1) For each of these new class samples, search all the
unlabeled samples and pick out its K-nearest neighbors
from the unseen class set U in the feature space;
2) Require active user to annotate these selected neighbors
to enrich the positive samples for these new person
3) Initialize and update {w(j), b(j), v(j), y(j), λj}m+u
for these new person classes according to above mentioned iteration process of {initialization, classiﬁer updating, high-conﬁdence sample labeling, low-conﬁdence
sample annotating}.
This step corresponds to the instructor’s role in human education, which aims to guide a student to involve more informative curriculums in learning. Different from the previous ﬁxed
curriculum setting in SPL throughout the learning process,
here the curriculum is dynamically updated based on the selfpaced learned knowledge of the model. Such an improvement
better simulates the general learning process of a good student.
With the learned knowledge of a student increasing, his/her
instructor should vary the curriculum settings imposed on him
from more in the early stage to less in later. This learning
manner evidently should conduct a better learning effect which
can well adapt the personal information of the student.
Feature Representation Updating: After several of the
SPL and AL updating iterations of {w, b, {yi}n
i=1, v, Ψλ},
we now aim to update the feature representation {xi}n
through ﬁnetuning the pretrained CNN by inputting all manually labeled samples from the AL and self-annotated ones
from the SPL. These samples tend to deliver data knowledge
into the network and improve the representation of the training
samples. A better feature representation is thus expected to be
extracted from this ameliorated CNN.
Algorithm 1: The sketch of ASPL framework
Input: Input dataset {xi}n
Output: Model parameters w, b
1: Use pre-trained CNN to extract feature representations
i=1. Initialize multiple annotated samples into the
curriculum Ψλ and corresponding {yi}n
i=1 and v. Set an
initial pace parameter λ = {λ0}m.
while not converged do
Update w, b by one-vs-all SVM
Update v by the SPL via Eqn. (7)
Pseudo-label high-conﬁdence samples {yi}i∈S by the
reranking via Eqn. (11)
Update the unclear class set U
Verify the annotated samples by AL.
Update low-conﬁdence samples {yi, Ψλ
i }i∈φ by the
if u unseen classes have labeled,
Handle u new classes via the steps in Sect. IV-A
Go to the step 2
In every T iterations:
• Update {xi}n
i=1 through ﬁne-tuning CNN
• Update λ according to Eqn. (10)
9: end while
10: return w, b;
This learning process simulates the updating of the knowledge structure of a human brain after a period of domain
learning. Such updating tends to facilitate a person grasp
more effective features to represent newly coming samples
from certain domain and make him/her with a better learning
performance. In our experiments, we generally conduct the
CNN feature ﬁne-tuning after around 50 rounds of the SPL
and AL updating, and the learning rate is set as 0.001 for all
Pace Parameter Updating: We utilize a heuristic strategy
to update pace parameters {λj}m
j=1 for m classiﬁers in our
implementation.
After multiple iterations of the ASPL, we speciﬁcally set
the pace parameter λj for each individual classiﬁer, and
utilize a heuristic strategy in our implementation for parameter
updating. For the tth iteration, we compute the pace parameter
for optimizing Eqn. (2) by :
j is the average accuracy of the j-th classiﬁer in the
current iteration, and α is a parameter which controls the
pace increasing rate. In our experiments, we empirically set
{λ0, α} = {0.2, 0.08}. Note that the pace parameters λ should
be stopped when all training samples are with v = {1}. Thus,
we introduce an empirical threshold τ constraining that λ is
only updated in early iterations, i.e., t ≤τ. τ is set as 12 in
our experiments.
The entire algorithm can then be summarized into Algorithm 1. It is easy to see that this solving strategy for the ASPL
model ﬁnely accords with the pipeline of our framework.
Convergence Discussion: As illustrated in Algorithm 1, the
ASPL algorithm alternatively updates variables including: the
classiﬁer parameters w, b (by weighted SVM), the pseudolabels y (closed-form solution by Theorem 1), the importance
weight v (by SPL), and low-conﬁdence sample annotations
φ (by AL). For the ﬁrst three parameters, these updates are
calculated by a global optimum obtained from a sub-problem
of the original model, and thus the objective function can be
guaranteed to be decreased. However, just as other existing
AL techniques, human efforts are involved in the loop of the
AL stage, and thus the objective function cannot be guaranteed
to be monotonically decreased in this step. However, just as
shows in Sect. V, as the learning processing, the model tends
to be more and more mature, and the labor of AL tends to be
less and less in the later learning stage. Thus with gradually
less involvement of the AL calculation in our algorithm, the
monotonic decrease of the objective function in iteration tends
to be promised, and thus our algorithm tends to be convergent.
B. Relationship with Other SPL/AL Models
It is easy to see that the proposed ASPL model extends
the previous AL/SPL models and includes all of them as
special cases. When we ﬁx the curriculum and feature representations and only update other parameters, it degenerates
to the traditional SPL models by rationally setting the selfpaced regularizer. When we ﬁx the SPL parameters, feature
representations and do not involve pseudo-labels in learning,
the model degenerates the a general AL learning regime.
The amelioration to both SPL and AL is expected to bring
beneﬁts to both regimes. On one hand, introducing more highconﬁdence samples in the self-paced fashion is helpful to
reduce the burden of user annotations, particularly when the
classiﬁer becomes reliable at later learning iterations. On the
other hand, the low conﬁdence samples selected by active user
annotations tends to make our approach workable with less
initial labeled samples than existing self-paced learning algorithms. All these beneﬁts are comprehensively substantiated
by our experiments.
THE SUMMARIZATION OF DATASETS WE USED.
# images/person
CASIA-WebFace-Sub
V. EXPERIMENTS
In this section, we ﬁrst introduce the datasets and implementation setting, and then discuss the experimental results
and comparisons with other existing approaches.
A. Datasets and Setting
We adopt two public datasets in our experiments, the Cross-
Age Celebrity Dataset (CACD) 
and CASIA-WebFace-
Sub dataset .
CACD is a large-scale and challenging dataset for evaluating
face recognition and retrieval, and it contains a batch of images
of 2, 000 celebrities collected from Internet, which are varying
in age, pose, illumination, and occlusion. And only a subset of
200 celebrities are manually annotated by Chen et al. . For
better convincing evaluation, we augment this subset by extra
labeling 300 individuals and obtain a set of 56, 138 images in
CASIA-WebFace dataset is a large scale face recognition dataset with 10,575 subjects/persons and 494,414 images.
CASIA-WebFace is extremely challenging for its images are
all collected from Internet with different view points and
light illumination under different scenes. Though the total
person/subject number of CASIA-WebFace dataset is very
large, the sample number for each person, varying from 3 to
804, is heavily unbalanced. For those persons who has very
few samples (say below 100), the experiment analysis is not
able to be performed. Hence, we select a subset of the CASIA-
WebFace dataset by discarding its persons with less than
100 samples to form the CASIA-WebFace-Sub dataset. The
CASIA-WebFace-Sub dataset has 181,901 images with 925
persons inside. The detailed information of above mentioned
datasets is summarized in Table I.
Experiment setting. We detect the facial points using the
method proposed in and align the faces based on the
eye locations. The experiments on both of the datasets are
conducted as the following steps. We ﬁrst randomly select
80% images of each individual to form the unlabeled training
set, and the rest samples are used for testing, according to the
setting in the existing active learning method . Then, we
randomly annotate n samples of each person in the training
set to initialize the classiﬁer. To get rid of the inﬂuence of
randomness, we average the results over 5 times of execution
with different sample selections. All of the experiments are
conducted on a common desktop PC with i7 3.4GHz CPU
and a NVIDIA Titan X GPU.
On the two above mentioned datasets, we evaluate the
performance of incremental face identiﬁcation in two aspects:
the recognition accuracy and user annotation amount in the
incremental learning process. The recognition accuracy is de-
ﬁned as the rank-one rate for face identiﬁcation. We compare
our ASPL framework with several existing active learning
algorithms and baseline methods under the same setting: i)
CPAL (Convex Programming based Active Learning) :
Annotate a few samples in each step based on prediction
uncertainty and sample diversity; ii) CCAL (Conﬁdence-based
Active Learning via SVMs) : Select only one sample having lowest prediction conﬁdence; iii) AL RAND: Randomly
select unlabeled samples to be annotated during the training
phase. This method discards all active learning techniques and
can be considered as the lower bound, and iv) AL ALL: All
unlabeled samples are annotated for training the classiﬁer. This
method can be regarded as the upper bound (best performance
the classiﬁer can achieve). For fair comparison, all of these
methods utilize the same feature representation as ours in
the beginning. As the training iteration increase, active user
annotation is employed to those selected most informative
and representative samples. Then, CNN ﬁne-tuning is also
exploited to improve the feature extractor for ASPL, CPAL,
CCAL, AL RAND, AL ALL.
Details of CNN implementation.
The architecture of
AlexNet is utilized in our all experiments. Thanks to
the well pre-training, the CNN updating is only implemented
few times during ASPL iteration in all our experiments, each
only containing no more than 5 CNN updating steps. We
generally conducted CNN steps after around 5 rounds of the
SPL and AL updating, and the learning rate is set as 0.001 for
all layers. Equal importance is imposed between the previous
training examples and the newly labeled examples, and CNN
is updated using the stochastic gradient decent methods with
the momentum 0.9 and weight decay 0.0005.
B. Experimental Comparisons
The results on the two datasets are reported in Fig. 3(a)
and Fig. 3(b), respectively, where we can observe how the
recognition accuracy changes with increasingly incorporating
more unlabeled samples. In CACD dataset, to achieve the same
recognition accuracy, ASPL model requires few annotation of
the unlabeled data. On the other hand, ASPL outperforms
the competing methods in accuracy when the same amount
annotations. ASPL can still have a superior performance as
the iteration goes on. The similar results and phenomena can
be discovered in CASIA-WebFace-Sub dataset. As one can
see that, ASPL only requires about 40% and 45% annotations
to achieve the-state-of-art performance on CACD and CASIA-
WebFace-Sub dataset, respectively. While the compared methods AL RAND, CCAL and CPAL all requires about 81% and
65%, respectively. Hence, our ASPL can performs as well as
the AL ALL with minimal annotations.
Note that the performances of RAND and CCAL are
relatively close, and the similar results were reported in .
According to the explanation in , this comes from the fact
that many samples have low prediction conﬁdences and distribute not densely in the feature space. Thus, the randomizing
sample selection achieves similar results compared to CCAL.
C. Component Analysis
To further analyze how different components contribute to
performance, we implement several variants of our framework:
i) ASPL (w/o FT): allowing both active and self-paced sample
selection during learning while disabling the CNN ﬁne-tuning,
i.e., the feature extractor is kept the same as the iteration
goes on for training; ii) ASPL (w/o SPL): discarding highconﬁdence sample pseudo-labeling via self-paced learning;
iii) ASPL (w/o AL): ignoring low conﬁdence samples for
active user annotation; iv) AL ALL: ﬁne-tuning the CNN and
train classiﬁers with all the labels of the training samples
and v) AL ALL (w/o FT): training classiﬁers with all the
labels of the training samples without ﬁne-tuning. Moreover,
the full version of our proposed model is denoted as ASPL,
which allows the convolutional nets to be ﬁne-tuned during
the training process. We further evaluate the ASPL variants in
the following aspects.
Contribution
components.
AL ALL and AL ALL (w/o FT) as the baselines, we gradually add the AL, SPL and ﬁne-tuning components to ASPL.
These experiments are executed on the CASIA-Webface
dataset. Fig. 4 illustrates the accuracy obtained using ASPL,
ASPL (w/o FT), ASPL (w/o AL) and ASPL (w/o SPL). One
can observe that any of the three components is useful in
improving the recognition accuracy. Especially, the additional
SPL component can signiﬁcantly improve the recognition
accuracy and reduce the number of annotation samples by automatically exploiting the majority of high-conﬁdence samples
for feature learning.
We also observe that the CNN feature ﬁne-tuning can dramatically improve the recognition accuracy in the early steps.
This is mainly because the information gain (i.e., individual
appearance diversity) deceases with progressively introducing
new samples to the neural nets.
Analysis on initial samples. In SPL , classiﬁer is ﬁrst
trained using the initial samples. With the current classiﬁer,
easy samples are preferred to be selected in the early training
steps, and thus it is expected that the performance of SPL
heavily relies on the initial samples. Fortunately, by incorporating with active learning, ASPL can evidently alleviate this
problem. To verify this, we compare the performance of ASPL
and SPL on 20 randomly selected individuals of CASIA-
Webface-Sub dataset. The result is shown in Fig. 5. Given
the same initialized feature representations, we also conduct
the experiments to analyze the performance vs different initial
portions to be handled by AL on this dataset. The results are
illustrated in Fig. 6.
As one can see from Fig. 5, with different initial samples,
ASPL reaches similar/stable results as the training continues,
while SPL still varies a lot. This result indicates that the
AL component is effective in handling the poor initialization.
Fig. 6 illustrates that though poor performance is obtained at
the beginning, the performance of our model increases during
the training process. In summary, our model is insensitive to
the diversity and quantity of initial samples.
THE PERFORMANCE COMPARISON OF WHETHER HANDLING UNSEEN NEW
CLASSES OR NOT ON THE CASIA-WEBFACE-SUB DATASET. ASPL (ALL)
DENOTES THE ASPL VERSION OF NO UNSEEN CLASSES.
# Class Number
ASPL (ALL)
THE ERROR RATES OF THE PSEUDO-LABELS ASSIGNED BY SPL ON
HIGH-CONFIDENCE SAMPLES.
# iteration
ASPL (w/o FT)
Performance with new classes. To justify the effectiveness
of our ASPL for handling unseen new classes, we conduct
the following experiment on the CASIA-WebFace-Sub dataset:
We compare the performance of incrementally giving some
classes (our ASPL) and directly giving all person classes.
Speciﬁcally, given all person classes, we initialize all the
classiﬁers at the beginning of the training and optimize them
without handling unseen new classes. We denote this variant as
ASPL (ALL). The experimental result is illustrated in Table II
percentage of labeled samples
percentage of labeled samples
Results on (a) CACD and (b) CASIA-WebFace-Sub datasets. The vertical axes represent the recognition accuracy and the horizontal axes represent
the percentage of annotated samples of the whole set.
percentage of labeled samples
AL_ALL (w/o FT)
ASPL (w/o FT)
ASPL (w/o SPL)
ASPL (w/o AL)
Fig. 4. Accuracies with the increase of annotated samples of different variants
of our framework, using CASIA-Webface-Sub dataset.
number of iterations
The accuracy and standard deviation of ASPL and SPL on the
CASIA-Webface-Sub dataset.
10% 20% 30% 40%
percentage of labeled samples
ASPL (10%)
ASPL (20%)
ASPL (30%)
The comparison of different number of initial samples and the
further required annotation ported of the AL process on the CASIA-Webface-
Sub dataset. For fair comparison, these methods share the same feature
representation as initialization.
number of iterations
percentage of labeled samples
ASPL (w/o FT)
ASPL (w/o SPL)
ASPL (w/o AL)
The comparison of different number of initial samples and the further
required annotation ported of the AL process on the CASIA-WebFace-Sub
and shows that our proposed ASPL can handle unseen new
classes effectively without substantially performance drop or
even with slightly better performance, compared with the all
classes given version ASPL (ALL).
Annotation required for large scale dataset. To demonstrate that our ASPL can be adopted under large scale scenario,
we analyze the training phase of ASPL on the large scale
CASIA-WebFace-Sub dataset. As illustrated in Fig. 7, the xaxis denotes the number of training iterations and the y-axis
denotes the amount of required user annotation. The curve in
Fig. 7 demonstrates that our proposed ASPL model requires
relatively larger annotations when the training iteration number
is small. As the training continues, the amount required
annotations began to be reduced due to the gradually mature
model incrementally ameliorated in the learning process. This
observation indicates that the burden of user annotations
would be indeed relieved when the classiﬁer becomes reliable
at the later learning stage of the proposed ASPL method.
Moreover, as illustrated in Table III, with the increase of user
annotations over time, ASPL can automatically assign more
reliable pseudo-labels to the unlabeled samples selected in the
self-paced way.
Robustness analysis.
We further analyze the robustness
of ASPL when noisy images are deliberately included in
two experiments. (i) Ex-1: a (a = 0%, 10%, 30%, 50%)
noisy images are added to the initial samples for each individual. (ii) Ex-2: noise-free initials are used, but b (b =
0%, 10%, 30%, 50%) importers are deliberately annotated during the training process. These experiments are conducted on
number of iterations
Noise (0%)
Noise (10%) w/o VF
Noise (30%) w/o VF
Noise (50%) w/o VF
Noise (10%)
Noise (30%)
Noise (50%)
number of iterations
Noise (0%)
Noise (10%) w/o VF
Noise (30%) w/o VF
Noise (50%) w/o VF
Noise (10%)
Noise (30%)
Noise (50%)
Robust analysis of ASPL under two types of noisy samples. (a) Using different number of noisy samples as the initial annotation. (b) Adding different
number of noisy samples at the 10-th step (denoted by the black spots).
the CASIA-Webface-Sub dataset. To validate the effectiveness
of the proposed annotated sample verifying step, we disable
the verifying step and denote these modiﬁcation as “Noise w/o
Fig. 8(a) shows the result of Ex-1, where ASPL is initialized
with different number of noisy images. In early steps of the
iteration, noisy data have huge adverse effect on test accuracy.
Along with the increase of iteration number, the genuine
data gradually dominate the results. Fig. 8(b) illustrates the
result of Ex-2, where noisy images are added to the labeled
training set the 2-th step of iteration. We can see that a
sharp decline in the recognition accuracy. However, with the
evolving of ASPL training, similar accuracy as compared with
that got on the original clean data can be obtained when
the number of iterations increases. As one can comparing
“Noise (10/30/50%)” with “Noise (10/30/50%) w/o VF” from
Fig. 8(a), with the verifying step, ASPL can recover from noisy
images in a slightly fast way. This justiﬁes the effectiveness
of the proposed annotated sample verifying step.
VI. CONCLUSIONS
In this paper, we have introduced, ﬁrst, an effective framework to solve incremental face identiﬁcation, which build
classiﬁers by progressively annotating and selecting unlabeled
samples in an active self-paced way, and second, a theoretical
interpretation of the proposed framework pipeline from the
perspective of optimization. Third, we evaluate our approach
on challenging scenarios and show very promising results.
In the future, we will extend the system to support several
video-based vision applications, which require large amount of
user annotations. The proposed framework provides a rational
realization to this task by automatically distinguishing highconﬁdence samples, which can be easily and faithfully recognized by computers in a self-paced way, and low-conﬁdence
ones, which can be discovered by requesting user annotation.
Proof for Theorem 1
Our aim is to solve the following optimization problem:
yi∈{−1,1}m,i∈S
where ℓij = l
w(j), b(j); xi, y(j)
is the hinge loss of xi in
the jth classiﬁer. Speciﬁcally, we deﬁne the hinge loss as:
w(j), b(j); xi, y(j)
(j)T xi + b(j)
The constraint term
dominates two cases of yi can be for all m classiﬁers: (i)
all items of yi are all negative, i.e., {y(j)
j=1 = {−1}. In
this case, the input region proposal xi is assumed to be the
background by m classiﬁers in the current optimization. (ii)
In all items of yi, one is positive and all others are negative.
In this case, xi is categorized into a certain object class.
Before giving the solution of Eqn. (11), we ﬁrst introduce
the two necessary lemmas as follows:
Lemma 1: The solution of
∈{−1,1},i∈S
ℓij, j = 1, ..., m
−1, if w(j)T xi + b(j) < 0
1, if w(j)T xi + b(j) > 0
1 or −1, if w(j)T xi + b(j) = 0
Proof: We discuss the solution in three cases:
(i) When w(j)T xi + b(j) < 0, it is easy to see that
(j)T xi + b(j)
(j)T xi + b(j)
Thus the global solution of Eqn. (13) is y(j)
(ii) When w(j)T xi + b(j) > 0, similar to (i), one can easily
prove that y(j)
= 1 is the global solution in this case.
(iii) When w(j)T xi + b(j) = 0, whether y(j)
= 1 or −1, lij
will have the same value 1. Thus both y(j)
= 1 and y(j)
are the global solution of Eqn. (13).
Lemma 2: The solution of
yi∈{−1,1}m,i∈S v(j)
i ℓij, j = 1, ..., m,
−1, if w(j)T xi + b(j) < 0 and v(j)
1, if w(j)T xi + b(j) > 0 and v(j)
1 or −1, if w(j)T xi + b(j) = 0 or v(j)
Proof: For v(j)
∈(0, 1], since v(j)
is a positive constant,
the solution of Eqn. (14) is the same as that of Eqn. (13).
While if v(j)
= 0, for both y(j)
= 1 or y(j)
= −1, lij will
have the same value 0. The conclusion is thus evident.
As one can easily see from Lemma 2, when w(j)T xi +
b(j) = 0 or v(j)
= 0, the optimal y(j)
for Eqn. (14) can be
either +1 or −1. Thus in all components v(j)
i ℓij of Eqn. (11)
with w(j)T xi+b(j) = 0 or v(j)
= 0, we can easily assume that
the corresponding solution is y(j)
= −1, i.e., |y(j)
which will not affect the soundness and ﬁnal values of the
optimal solution of Eqn. (11).
Denote those js that satisfy w(j)T xi + b(j) ̸= 0 and v(j)
(0, 1] as a set M and set all y(j)
= −1 for others in default.
The solution of Eqn. (11) for y(j)
i , j ∈M can be obtained by
the following theorem.
Theorem 2:
w(j)T xi + b(j) < 0, Eqn. (11) has a
j = 1, ..., m;
∀j ∈M except j = j∗, w(j)T xi + b(j) < 0,
i.e., v(j∗)
ℓij∗> 0, then Eqn. (11) has a solution:
 −1, j ̸= j∗
1, j = j∗;
(c) Otherwise, Eqn. (11) has a solution:
 −1, j ̸= j∗
1, j = j∗,
j∗= arg min
(j)T xi + b(j)
Proof: In the cases (a) and (b), it is easy to see that
the provided y(j)
is actually the solution of the unconstraint
problem of Eqn. (11). Since the solution complies with the
constraint, this solution is also the one of the constrained one.
In the case (c), there are more than two samples with
positive conﬁdence scores, i.e., w(j)T xi + b(j) > 0. In this
case, it is impossible that the ﬁnal solution is
= −1, j = 1, ..., m,
since if we let y(j)
= 1 for any one sample satisfying
w(j)T xi+b(j) > 0, the objective function will have a decrease
value with respect to v(j)
(j)T xi + b(j)
Then there will be a unique j∗where the ﬁnal solution
should have y(j∗)
= 1. We only need to pick up the one at
which the objective of Eqn. (11) attains the minimal value.
i ∈{−1, 1}m with
 −1, j ̸= j′
The objective of Eqn. (11) is then
(j)T xi + b(j)
(j)T xi + b(j)
Then if we assume another y∗
i ∈{−1, 1}m with
−1, j ̸= j∗
then we have that
F(j′) −F(j∗)
ℓij′ + v(j∗)
(j∗)T xi + b(j∗)
(j′)T xi + b(j′)
ℓij′ −v(j′)
(j′)T xi + b(j′)
ℓij∗−v(j∗)
(j∗)T xi + b(j∗)
(j′)T xi + b(j′)
(j∗)T xi + b(j∗)
If we choose j∗as Eqn. (15), then it is easy to see that
F(j′) −F(j∗) ≥0.
We thus can deduce that Eqn. (11) is with a global solution:
 −1, j ̸= j∗
The proof is completed.