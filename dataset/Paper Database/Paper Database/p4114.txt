> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
Abstract—A Generative Adversarial Network (GAN) usually
contains a generative network and a discriminative network in
competition with each other. The GAN has shown their capability
in a variety of applications. In this paper, the usefulness and
effectiveness of GAN for classification of hyperspectral images
(HSIs) is explored for the first time. In the proposed GAN, a
convolutional neural network (CNN) is designed to discriminate
the inputs and another CNN is used to generate so-called fake
inputs. The aforementioned CNNs are trained together: The
generative CNN tries to generate fake inputs that are as real as
possible, and the discriminative CNN tries to classify the real and
fake inputs. This kind of adversarial training improves the
generalization capability of the discriminative CNN, which is
really important when the training samples are limited.
Specifically, we propose two schemes: (1) a well-designed
1D-GAN as a spectral classifier, and (2) a robust 3D-GAN is as a
spectral-spatial classifier. Furthermore, the generated adversarial
samples are used with real training samples to fine-tune the
discriminative CNN, which improves the final classification
performance. The proposed classifiers are carried out on three
widely-used hyperspectral datasets: Salinas, Indiana Pines, and
Kennedy Space Center. The obtained results reveal that the
proposed models provide competitive results compared to the
state-of-the-art methods. In addition, the proposed GANs open
new opportunities in the remote sensing community for the
challenging task of HSIs classification, and also, reveal the huge
potential of GAN-based methods for the analysis of such complex
and inherently nonlinear data.
Index Terms—Convolutional neural network (CNN), deep
learning, generative adversarial network (GAN), hyperspectral
images classification.
I. INTRODUCTION
HYPERSPECTRAL sensors simultaneously capture the
This work was supported in part by the Natural Science Foundation of China
under the Grant 61771171 and in part by the National Natural Science
Foundation of key international cooperation under the Grant 61720106002.
(Corresponding author: Yushi Chen)
L. Zhu and Y. Chen are with the School of Electronics and Information
Engineering, Harbin Institute of Technology, Harbin 150001, China (e-mail:
 ; ).
P. Ghamisi is with German Aerospace Center (DLR), Remote Sensing
Technology Institute (IMF), Wessling 82234, Germany, and also with the
Signal Processing in Earth Observation (SiPEO), Technical University of
Munich (TUM), Munich 80333, Germany (e-mail: p.ghamisi@gmail. com).
J. A. Benediktsson is with the Faculty of Electrical and Computer
Engineering, University of Iceland, IS-107 Reykjavik, Iceland (e-mail:
 )
spatial and spectral information of the observing target. Such
data are characterized as a valuable source of information for
Earth observation, which brings both challenges and
opportunities to develop new data processing techniques .
The classification of hyperspectral images (HSIs), which is a
crucial step for the plethora of applications, tries to assign a
specific class to each pixel in the scene. HSIs classification is
widely-used, e.g. urban development, land change monitoring,
scene interpretation, and resource management. Among
hyperspectral data processing techniques, classification is one
of the most vibrant topics in the remote sensing community .
Most of the supervised methods that have been applied in the
machine learning community have been explored for
hyperspectral images classification in the last few decades. In
general, there are two kinds of data classification methods:
spectral classifiers and spectral-spatial classifiers.
Hyperspectral data usually contain hundreds of spectral
channels of the same scene, which provide abundant spectral
information. Traditional spectral classification algorithms
typically include k-nearest-neighbors, maximum likelihood,
neural network and logistic regression . Most of those
algorithms dramatically suffer from the so-called curse of
dimensionality (Hughes phenomenon) . Support vector
machines (SVMs) have shown their low sensitivity to high
dimensionality with respect to the number of training samples
and are unlikely to suffer from the Hughes phenomenon.
Furthermore, SVM-based classifiers usually obtain good
classification performance in terms of when a limited number
of training samples is available compared with other
widely-used supervised techniques . During the first
decade of this century, SVMs-based spectral classifiers were
considered as the state-of-the-art methods in the hyperspectral
community.
With the advancement of the sensor and imaging systems,
the spatial resolution of hyperspectral data is becoming finer
and finer. With the help of spatial information, which can be
extracted by diverse methodologies such as filtering or
segmentation approaches, the classification performance can be
significantly
approaches,
morphological profiles have been widely-used to extract the
spatial features of HSIs (usually followed by SVMs or random
forest to obtain the resulting classification map) . Many
extensions have been developed for hyperspectral data feature
extraction
morphological
operators,
demonstrate that the morphological profile is still under further
Lin Zhu, Yushi Chen, Member, IEEE, Pedram Ghamisi, Member, IEEE, and Jón Atli Benediktsson,
Fellow, IEEE
Generative Adversarial Networks for
Hyperspectral Image Classification
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
development . On the other hand, multiple kernel learning
has been applied to hyperspectral data classification because of
its powerful capability to handle heterogeneous spectral and
spatial features in an efficient manner . Spectral-spatial
classification approaches are regarded as the mainstream of
HSI classification. Many methods have been proposed in recent
years on the spectral-spatial classification of hyperspectrla data.
As an example, in , a method, which combines sparse
representation and Markov random fields, was proposed. The
method utilizes Markov random fields to explore spatial
correlation which significantly improves the classification
performance. Furthermore, a new spectral-spatial classifier
based on discriminant analysis has been proposed for
hyperspectral image classification in . The proposed
method learned a representative subspace from the spectral and
classification
performance.
Most of the traditional spectral and spectral-spatial
classifiers do not classify the hyperspectral data in a “deep”
manner. In , it is demonstrated that the classifiers like linear
SVM and logistic regression can be attributed to single-layer
classifiers, while decision tree or SVM with kernels are
believed to have two layers. Deep models, which contain two or
more hidden layers, tend to extract the invariant and
discriminant features of the input data. Deep learning methods
have been actively studied in a wide variety of research areas
such as image classification, language processing, and speech
recognition in recent years . Recently, deep learning
has also been utilized for remote sensing data processing
including HSI classification. A survey of deep learning-based
approaches for remote sensing data can be found in .
learning-based
autoencoders, has been proposed for hyperspectral feature
extraction and classification . Deep belief network, another
kind of deep models, was introduced and modified for HSI
classification as well .
In recent years, lots of deep models, especially deep
convolutional neural networks (CNNs), have been proposed in
the remote sensing community. In , a deep CNN with five
layers was employed to extract the spectral features of HSIs
leading to a promising classification performance. After that, in
 , a novel pixel-pair method is proposed as a deep spectral
classifier, and the model achieved good performance when the
number of training samples is not sufficient.
The aforementioned methods in and are spectral
classifiers. In order to utilize the spatial and spectral
information of HSIs simultaneously, some spectral-spatial
classifiers based on deep CNNs have been proposed , .
For example, in a framework based on principal
component analysis (PCA), deep CNN, and logistic regression
was used for HSIs classification. HSIs are inherently 3D data,
so it is reasonable to design 3D CNNs to effectively extract the
spectral-spatial features of HSIs , . On the other hand,
CNNs can be combined with other techniques such as sparse
representation approach and morphological profiles. In ,
CNN is followed by sparse representation to refine the learned
features. Recently, a method based on the combination of
Gabor filtering and CNN was introduced to extract the features
of HSIs, which leads to a performance improvement .
Furthermore, there are new types of deep models which have
also been investigated for HSIs classification. Very recently, a
new deep dictionary learning has been proposed for HSIs
classification, which has shown its capability under the
condition of limited training samples .
Although great progress has been achieved in HSI
classification using deep learning-based methods, deep models
usually face a serious problem known as overfitting. The reason
behind this problem is that deep learning-based methods need
to train a large number of learnable parameters, which requires
a lot of training samples. The problem becomes serious when
the number of training samples is limited. Unfortunately, the
limited availability of training samples is a common situation in
the remote sensing community since the collection of such data
is either time demanding or expensive. Deep models are often
over trained if there are not sufficient training samples available,
which means the performance is good in the training stage but
the performance is relatively poor in the test stage. Therefore,
new and effective training strategies for deep models are
needed to address the issue of overfitting (the Generative
Adversarial Network (GAN), which this paper investigates, is
one of those strategies). Actually, the generator network of
GAN can be regarded as a regularization method, which can
mitigate the overfitting phenomena to a great extent.
GAN is a new kind of model, which usually contains
agenerative model G and a discriminative model D . The
models G and D are trained in an adversarial manner, in which
G tries to generate the fake inputs as real as possible, and D
tries to classify the real and fake inputs. In this adversarial game,
both participants wish to get optimized results (i.e., D can
achieve the best classification results, and G can generate the
fake data which possess the most similar distribution with real
data). Through the adversarial manner and competition of two
networks, the training process of the discriminator will proceed
both continuously and effectively instead of getting trapped
into overfitting immediately when we use a limited number of
training samples.
Furthermore, GAN generates samples which can be used as
virtual samples. The proper usage of the virtual samples
improves the classification performance. In this paper, the
generated samples are used to boost the classification accuracy
and the experimental results prove the effectiveness of the
usage of such samples.
Due to the advantages of CNN, deep convolutional GAN is
well suited for image data processing . GAN can be used in
a variety of applications such as data synthesis, style transfer,
image super-resolution and classification .
In this paper, the use of the generative adversarial network
for hyperspectral data classification is explored for the first
time. With the help of GANs, the deep CNN achieves better
performance in terms of classification accuracy and the
overfitting problem raised by CNNs can be considerably
mitigated. Two frameworks, 1D-GAN and 3D-GAN, are
proposed for HSI classification, and the classification results
obtained by these two frameworks showed that our GANs are
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
superior to traditional convolution neural networks even under
the condition of limited training samples. In more details, the
main contributions of the paper are summarized as follows.
1) The use of GAN for hyperspectral data processing is
explored for the first time in this paper. The adversarial samples
including 1D spectra and 3D spectral-spatial patches are
generated by a well-designed GAN.
2) Two GANs frameworks including spectral classifiers and
spectral-spatial classifiers are proposed for HSIs classification.
The frameworks use well-designed CNNs to classify HSIs, and
the adversarial training is adopted by a regularization
technique.
3) Adversarial samples are used for HSIs classification for the
first time, which is investigated to fine-tune the aforementioned
GANs for an improved classification performance.
4) The proposed methods are tested on three well-known
hyperspectral datasets under the condition of having limited
training samples available.
The rest of the paper is organized as follows. Section II
presents the background of GAN. Section III presents the
details of the proposed GAN frameworks including spectral
and spectral-spatial architectures for HSIs classification, and
the introduction of adversarial samples for classification. The
details of experimental results are reported in Section IV. In
Section V, conclusions and discussions are presented.
II. BACKGROUND
Supervised learning methods in machine learning can in
general be divided into two parts: Generative approaches and
discriminate approaches. Generative approaches involve the
learning of distribution parameters from data samples, and they
can generate new samples according to the learned models.
Typically, generative methods calculate the distribution
assumption of the explicit or implicit variables of the real data.
Then, they can generate new data through the learned
assumptions, which have a similar distribution as the real data.
GAN which was proposed by Goodfellow in 2014, is a novel
way to train a generative mode land a promising method to train
classifiers. Commonly GAN is composed of two parts: the
generative network G and the discriminative model D .The
generator G can capture the potential distribution of real data
and output the new data while the discriminator D is a binary
classifier which can judge whether the input samples are real or
not. The information flow in GAN is a feed forward pass from
one model generator G , which generates the fake data, to the
second model discriminator D , which evaluates the output of
the first model. The architecture of GAN is shown in Fig. 1.
In order to learn the generator’s distribution
p over data x ,
we supposed that the true samples are equipped with data
distribution x
and the input noise variable has a prior 
The generator accepts a random noise z as input and produces a
mapping to data space z
estimates the probability
that x is the true sample from training data . In the
optimized procedure the discriminator D is trained to maximize
which is the probability of assigning the correct labels
to the correct sources while the generator G is trained to
. Therefore, the ultimate aim of the
optimization is to solve the minimax problem:
where E is the expectation operator. Through the calculation
and evaluation, one found that when the discriminator D has a
high probability distribution of real samples, the gradients in D
may disappear and cause the training process to stop. To make
sure that the generator has proper gradients when the
classification accuracy for the discriminator is high, the
generator’s loss function is usually formulated to maximize the
probability of classifying a sample as true instead of
minimizing the probability of it to be classified as false .
Therefore, the modified loss function can be written in the
following optimization form:
The parameters update of G is based on the back-propagation
of D instead of directly using the real data samples. In addition,
Input noise
Genetator G
Discriminator D
Fig. 1. The architecture of GAN
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
there is no requirement that the latent code has any specific
dimensionality nor on the generator net being invertible. GANs
can learn models that generate points only on a thin manifold
that goes near the data, so the GAN framework can train any
kind of generator net.
On one hand, the adversarial model is most straightforward
when the G and D are both multiply perceptrons . On the
other hand, the shallow multiply perceptrons usually have
limited capabilities in coping with complex data. Recently,
deep learning methods have achieved a substantial success and
they can build a network with several layers instead of having
shallow net layer connections . Therefore, they can
leverage the nonlinear mapping abilities and capture more
crucial features of input data (i.e., especially in coping with the
complicated and inherently nonlinear data) . As a
special type of deep learning-based method, the convolution
network (i.e., CNN) , which is inspired by neuroscience
 , utilizes two important strategies which make it different
from other deep learning methods. Those two strategies are
local connections and shared weights. In more details, in the
CNN, the local correlation information is explored by
considering the local connectivity between nearby neurons,
instead of the full connection of all neural units as in other deep
methods. In this context, CNNs can reduce the computational
complexity and redundancy in exploiting the data features.
Especially, CNNs can alleviate the overfitting phenomenon in
the deep learning process. Recently, the deep methods and
CNNs have shown their excellent performance in hyperspectral
images classification and feature extraction .
Although GANs have shown their promising usages in
varieties of aspects, they also suffer from stability issues due to
its adversarial idea . To solve this issue, some techniques
for stabilizing the training process of the GAN have been
developed. Among those approaches, the convolution network
can address the instability issue to some extent. Recently, the
deep convolutional generative adversarial network (DCGAN)
architecture, which uses deep convolution networks in G and
D was proposed . The generator G , which takes a uniform
noise distribution z and class labels c as input and output,
respectively, can be reshaped into a three-dimensional tensor.
The discriminator D has a similar architecture to common
CNNs except that the pooling layers are replaced with stride
convolutions and all the activation functions are the leaky
rectified linear unit (LeakyReLU) . Although GANs have
shown promising performance in image synthesis and
many other aspects , as unsupervised generative models,
the D networks of the original GANs only estimate whether the
input samples are either true or fake. Therefore, they are not
suitable for the purpose of multi-class image classification.
Recently, the concept of GAN has been extended to be a
conditional model with semi-supervised methods. In , the
authors proposed Semi-GAN whose labels of true training data
were imported to the discriminator D .
Furthermore, the conditional GAN requires some additional
information for both G and D where the extra information can
be class labels or other data modalities . Therefore, the
conditional GAN can leverage the generative adversarial nets
to generate the specific labels. In addition, Odena presented
auxiliary classifier GAN (AC-GAN), which can be used in
image classifications, whose discriminator D is modified to be a
softmax classifier that can output multi-class labels
probabilities .
III. PROPOSED METHOD
A. The framework of the proposed method
Our networks are shaped with respect to the theory of
AC-GAN while the objective function is modified to take into
account the likelihood of the correct source and likelihood of
the correct HSI classes. The parameters are optimized
depending on the multi-classification loss so they can optimize
the loss function more appropriately than traditional GANs.
The labeled information is regarded as the input of both
generator and discriminator, and the discriminator D contains
an auxiliary decoder network which can output the respective
training data labels. Definitely, the extra-label information can
leverage both the classification abilities of discriminator D and
generative abilities of generator G . The architecture of our
method is shown in the Fig. 2.
From the original GAN, we can see that in training process,
the discriminator D receives both real training data and fake
data generated by the generator G and outputs the probability
distribution
. Therefore, the aim of the D
Real HSI class labels
Input noise
Genetator G
Discriminator D
Predicted HSI class labels
Fig. 2. The general architecture of proposed method
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
network is to try to maximize the log-likelihood of the right
Similarly, the aim of the G network is to try to minimize the
same quantity.
In the network, we can see that the generator G also accept
hyperspectral image class labels
in addition to the noise z
the output of G can be defined by
. The real
training data with corresponding class labels and the fake data
generated by G are regarded as the input of the discriminator D ,
The probability distribution over sources 
along with the
probability distribution over class labels 
are fed into
the network D .The objective function contains two parts: the
log-likelihood of the right source of input data
log-likelihood of the right class labels
so D is optimized to maximize the
while G is optimized
to maximize
In this experiment, the two frameworks (i.e., the combination
of the spectral vector and the spectral-spatial information) are
designed, while the former is called 1D-GAN and the latter is
called 3D-GAN. The G and D in the aforementioned two
frameworks are both in the form of convolutional networks.
The proposed GANs are not only used to classify the real and
fake inputs but also to predict the corresponding labels of the
input data. G has the form of fractionally-stride convolutional
neural network and D adopts convolution neural networks.
Finally, the discriminator D is followed by sigmoid classifier
and softmax classifiers applied in parallel, which are used to
classify the real/fake samples and the HSIs, respectively.
With the continuation of the training process, both G and D
will theoretically achieve the most optimized results when G
can generate fake data that are most similar to real data and D
can-not distinguish between fake data and real data. In this
manner, we can prove that the whole network achieves the
Nash equilibrium condition, and the adversarial behavior and
competition between two networks can promote the
classification performance. Therefore, the crucial idea of GAN
lies in the adversarial training and through the continuous
competition we can obtain superior classification results in
comparison to traditional CNN methods.
The main framework of 1D-GAN is shown in Fig. 3, which
is built based on HSI spectral features only where all the input
noise and training data are spectral vectors.
Due to the availability of hundreds of bands in original HSI,
which means the input has high dimensions, it is difficult to
Input noise
Genetator G
Real HSI class labels
Discriminator D
Predicted HSI class labels
Spectral vectors
10 principle components
Fig. 3. The framework of 1D-GAN for HSIs classification
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
train the generator G (i.e., the training stage is not stable). In
the other words, the generator cannot effectively imitate the
real data because of high redundancy. Thus, we extract the
spectral features of HSIs based on principal component
analysis (PCA) . PCA can condense the whole image by
reducing the spectral dimensions to a suitable scale, and it is a
crucial step to formulate a robust GAN.
Pertinently, in order to promote the generator to exert
superior abilities on capturing crucial features and generating
realistic-looking samples as the best possible and preserve most
important spectral information of original HSI bands, we
preserve 10 principal components, which contain the 99.99%
energy of the inputs.
In Fig. 3, we show the framework of 1D-GAN on the Salinas
dataset as input. From the figure, one can see that the G
receives both noise z and labels c as input, while D receives as
input the real spectral vectors x with labels c and some batches
of fake spectral vectors z
. Then, through the D network, one
can obtain the final results including both the class labels and
the source labels. In our networks, any pooling layer is replaced
with stride convolutions (discriminator) and fractional-strided
convolutions (generator).
The main framework of 3D-GAN is shown in Fig.4. In
3D-GAN, the network extracts spectral-spatial features
effectively, which achieves better classification performance.
Here, we only describe the special parts of the proposed
3D-GAN. Different from 1D-GAN which only utilizes the
spectral information of HSIs, the spatial features are also taken
into consideration in addition to the spectral features in this
subsection.
The number of spectral bands is reduced to three components
by PCA, which condense the whole image by reducing the data
dimensions to a suitable scale, and in the meantime, it reserves
the spatial information. Due to PCA, the computational
complexity is dramatically reduced, and it is really important to
stabilize the GAN training procedure. In 3D-GAN, the
generator accepts noise as input and transforms its shape to the
same size as real data with three principal components in the
spectral domain. Then, the discriminator accepts the real data or
the generated fake samples as input data, and it uses the
sigmoid classifier to give the real and fake classification results
and softmax classifier to give the classification map. The first
layer of the GAN, which takes a uniform noise distribution z as
input, is just a matrix multiplication. The result is then reshaped
into a tensor and used as the start of the convolution stack. In
the proposed frameworks, we indicate the hyperspectral ground
labels in multicolor squares but the source labels in grey
In 3D-GAN, like the basic allocations in 1D-GAN, pooling
layers are replaced with strided convolutions (in the
discriminator) and fractional-strided convolutions (in the
generator). In addition, batch normalization is used in both the
generator and the discriminator and the fully connected hidden
layers are removed.
D. Generative Adversarial Samples for Classification
Now let us consider that the GAN consists of both a
generator and a discriminator. The classification abilities of the
discriminator have been discussed above. On the other hand,
using the fake samples from the generator also has a potential in
improving the final classification results in terms of accuracies.
In fact, when the discriminator cannot distinguish the real data
from the synthetic fake data, we can also conclude that the
generated abilities of G are superior to the D . Consequently,
the whole adversarial network achieves the global optimality in
Input noise
Genetator G
Real HSI class labels
Discriminator D
Softmax c=1
Predicted HSI class labels
3 principle components
Spatial-Spectral data
Fig. 4. The framework of 3D-GAN for HSIs classification
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
theory .
In this paper, the generated fake samples can be regarded as
augmentation data that increase the number of training
samples. Then, both the fake samples and the true samples are
fed into the networks in order to optimize the nets. Let us
suppose that the original dataset has N classes, during network
training. To begin with, each generated sample is passed
forward through the network and assigned a label by taking the
maximum value of the probability prediction vector. These fake
samples can consequently be used for training in the network
with these labels. In addition, the generated samples do not
belong to any class of real samples. Due to the difference of real
samples and generated samples, a new class label is then
created (i.e.,
) and every fake sample is endowed with this
new label. In this paper, we adopted this method to assign
to the labels of fake samples. In the experimental part of
the paper, we qualitatively visualize the adversarial samples
through the false color map.
IV. EXPERIMENTAL RESULTS
A. Data Description
In our study, three widely-used hyperspectral datasets with
different environmental settings were adopted to validate the
proposed methods. They are captured over Salinas Valley in
California (Salinas), Kennedy Space Center (KSC) in Florida
and a mixed vegetation site over the Indian Pines test area in
North-western Indiana (Indian Pines).
The first dataset, Salinas, was collected by the 224-band
AVIRIS sensor over Salinas Valley, California. The available
dataset is composed of 512×217 pixels with 204 bands [after
the removal of low signal to noise ratio (SNR) bands] and the
available ground reference map covers 16 classes of interest.
The hyperspectral image is characterized by having a high
spatial resolution (3.7-meter pixels). The false color composite
image and the corresponding ground reference map are
demonstrated in Fig. 5.
The second dataset was captured by the NASA airborne
AVIRIS instrument over the Kennedy Space Center, Florida. It
is called here the KSC dataset. The KSC dataset has an altitude
of approximately 20 km, with a spatial resolution of 18 m. This
dataset is composed of 512×614 pixels. After removing water
absorption and low SNR bands, 176 bands were used for the
corresponding false color composite map. In the classification,
13 classes were defined for the site. Fig. 6 demonstrates the
classes of the KSC dataset and the corresponding false color
composite map.
The third dataset is a mixed vegetation site over the Indian
Pines test area in Northwestern Indiana (Indian Pines) which
was collected by the Airborne Visible/Infrared Imaging
Spectrometer (AVIRIS). The dataset was obtained by an
aircraft flown, with a size of 145 pixels × 145 pixels and 220
spectral bands in the wavelength range of 0.4–2.5 μm. The false
color image is shown in Fig. 7(a). The number of bands is
reduced to 200 by removing water absorption bands. Sixteen
different land-cover classes are provided in the ground
reference map, as shown in Fig. 7.
For all three datasets, the labeled samples were split into two
subsets which contain training and test samples, and the details
are listed in Table I, II, and III. During the training procedure of
GAN, we use 200 training samples, which are truly limited, to
learn weights and biases of each neuron, 100 training samples
are used to guide the design of proper architectures, which can
identify whether the network is overfitted or not. In the test
process, all the samples in the dataset are used to estimate the
capability of the trained network. This is important for
designing the proper convolution network and we can use the
test samples to assess the final classification performance.
Fig. 6. The Kennedy Space Center (KSC) dataset. (a) False-color composite
(Band 28, 19, 10) and (b) ground reference map
Fig. 7. The Indian Pines dataset. (a) False-color composite image (Band 28, 19,
10) and (b) ground reference map
Fig. 5. The Salinas dataset. (a) False-color composite (Band 50, 28, 15)
and (b) ground reference map
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
B. The classification results for 1D-GAN
In this experiment, our networks are also compared with
other former methods used in HSI feature extraction and
classifications such as the original CNN to validate the quality
of classification results. The training and test data are randomly
chosen among the whole dataset and we only use 200 training
samples for each datasets and the epoch is set to 500 for our
methods. The GANs have a relatively higher computational
complexity compared with other networks considering the fact
that both the G and D need to be trained in each epoch. The
classification results are given in the form of mean± standard
deviation. The 1D-GAN framework is built only based on HSI
spectral feature extraction. Therefore, all the input noise and
training data are spectral vectors. First, the number of training
data spectral bands in each dataset is reduced to 10 by PCA.
The size of noise 𝑧 sent to the generator networks is
it is then converted to
through the fractionally-stride
convolution of generator G .Then the generated fake samples
and true training samples are imported to the discriminator D
which can give the corresponding image labels c and source
labels s . The main architectures of the 1D-GANs and
PCA-CNN for each dataset are shown in Table IV, and the
n_class shown in Table IV represents the number of classes in
each dataset
In order to have a fair comparison, the architecture of
PCA-CNN is designed in such a way to be the same as
discriminator D .The stride is 1 and the padding is set to 0 in this
experiment. Similarly, we apply the same activation function as
used in DCGAN. The batch normalization is also introduced to
the networks for the specific layers. The batch normalization
can stabilize training by normalizing the input for each unit to
have zero mean and unit variance.
At the end of the common CNN, the fully connected neural
nodes are activated by a linear function. Then, the
corresponding labels are given through a softmax classifier.
After the full connection and activation, the last layer neural
nodes of discriminator D are connected with both a softmax
classifier and a sigmoid classifier. From the softmax classifier,
one can obtain the predicted label c . From the sigmoid
classifier, one can obtain the labels s (fake or real) of the GAN.
In this experiment, our methods are compared with other
feature extraction methods like the PCA, factor-analysis (FA)
 , locally linear embedding (LLE) , linear discriminant
analysis (LDA) , independent component analysis (ICA)
 , PCA-CNN and recurrent neural network (RNN) . FA
TABLE III LAND COVER CLASSES AND NUMBERS OF PIXELS ON INDIAN
PINES DATASET
Corn-notill
Grass-pasture
Grass-trees
Grass-pasture-mowed
Hay-windrowed
Soybean-notill
Soybean-mintill
Soybean-clean
Buildings-Grass-Trees
Stone-Steel-Towers
TABLE II LAND COVER CLASSES AND NUMBERS OF PIXELS IN KSC
Willow swamp
CP hammock
Slash pine
Oak/Broadleaf
Graminoid marsh
Spartina marsh
Cattail marsh
Salt marsh
TABLE I LAND COVER CLASSES AND NUMBERS OF PIXELS ON
SALINAS DATASET
Brocoli_green_weeds_1
Brocoli_green_weeds_2
Fallow_rough_plow
Fallow_smooth
Grapes_untrained
Soil_vinyard_develop
Corn_senesced_green_weeds
Lettuce_romaine_4wk
Lettuce_romaine_5wk
Lettuce_romaine_6wk
Lettuce_romaine_7wk
Vinyard_untrained
Vinyard_vertical_trellis
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
is a linear statistical method designed for potential factors from
observed variables to replace original data. LLE seeks a
lower-dimensional projection of the data which preserves
distances within local neighborhoods. LDA can be used to
perform supervised dimensionality reduction, by projecting the
input data to a linear subspace consisting of the directions
which maximize the separation between classes. ICA separates
a multivariate signal into additive subcomponents that are
maximally independent. An RNN is a network which uses
hidden layers or memory cells to learn features, and it adopts
recurrent connections between neural activations at consecutive
time steps. The effectiveness of different feature extraction
methods is evaluated mainly through classification results.
Additional classifiers such as the KNN classifier and SVM with
a kernel like RBF-SVM for the evaluation.
In order to have a fair comparison, we use the grid search
method to find the best parameters for these feature extraction
methods. The results listed in Table V-VII are the best results
obtained in the searching process. For the methods with the
RBF-SVM classifiers, we use a “grid-search” method to
define the most appropriate C and  . In this manner, pairs
are tried and the one with the best classification
accuracy on the validation samples is picked. This method is
convenient and straightforward. Moreover, the computational
time to find the best parameters by grid-search is not much
since there are only two parameters that need to be estimated. In
this experiment, we do the search by exponentially growing
sequences of C and like .
For PCA, FA, LDA and ICA, we select the number of
features in the range of 10 to N (i.e., the number of
hyperspectral bands). The number of the neighbors in LLE is
chosen from 1 to 15 and for KNN the range of the nearest
neighbors varied between 1 and 10. Table V-VII shows the
results obtained from the condition when the GAN models are
TABLE IV THE ARCHITECTURES OF THE 1D-GAN
Convolution
Activation
128×n_class
TABLE V CLASSIFICATION RESULTS OBTAINED BY DIFFERENT APPROACH ON SALINAS DATASET
Classifier
Classifier
Logistic Regression
Classifier
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
trained using the 10 principal components of the original HSIs.
Compared with the PCA, FA, LLE, LDA, ICA and RNN, the
CNN-based methods show better performances in terms of
accuracies, especially the 1D-GAN methods which all achieve
the best accuracy on three different classifiers. Furthermore,
these Tables illustrate that the classification results usually
have a superior performance when feature extraction methods
are followed by either LR or RBF-SVM classifiers.
TABLE VII CLASSIFICATION RESULTS OBTAINED BY DIFFERENT APPROACH ON INDIAN PINES DATASET
Classifier
Classifier
Logistic Regression
Classifier
TABLE VI CLASSIFICATION RESULTS OBTAINED BY DIFFERENT APPROACH ON KSC DATASET
Classifier
Classifier
Logistic Regression
Classifier
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
For the Salinas dataset, 1D-GAN-LR exhibits the best OA,
AA and K, with improvements of 0.84%, 4.03% and 0.0169
over CNN-LR, respectively. Our approach outperforms
1D-GAN-KNN by 3.49%, 8.27% and 0.0536 in terms of OA,
AA and K, respectively. For the KSC data et, as can be seen, the
OA of 1D-GAN-LR is 89.64%, which is increased by 3.50%
and 0.48% compared with KNN and RBF-SVM, respectively,
it also increases 1.97%, 3.29 % and 0.0308 in OA, AA, and K
compared with 1D-PCA-CNN. For the Indian Pines dataset, the
best performance is conducted by 1D-GAN followed by
RBF-SVM. In this context, 1D-GAN followed by RBF-SVM
improves the OA, AA, and K of CNN-RBF-SVM by 3.32%,
4.35%, and 0.0391, respectively. The results show that the
1D-GAN method gave the best performance in terms of OA,
AA and Kappa for all three datasets.
Furthermore, detailed experiments with different principal
components of 1D-GAN have been investigated to give a
comprehensive comparison. Table VIII shows the classification
results of 1D-GAN. There, the whitening principal component
analysis (PCA) was utilized in the experiments, which is a
modified PCA with identity covariance matrix. In the table, the
PCA-3 PCA-10, PCA-50, PCA-100, and PCA-All represent the
situations where we preserve three, 10, 50, 100, and all
principal components, respectively.
In 1D-GAN, 10 principal components are used to condense
the spectral information. Due to the fact that we only use
spectral information in 1D-GAN, we try to preserve sufficient
components (i.e., 10). Furthermore, compared with 3D-GAN,
the computational complexity of 1D-GAN is relatively low. We
use relatively more components without high computation
complexity. From Table VIII, one can see that the 10 principal
components achieved the best classification accuracy on three
datasets. If the number of the selected principal components is
not sufficient, the classification results tend to be bad (e.g.,
when three are selected). Because of the dimensionality of the
input is low (e.g., three PCs), one cannot formulate a deep
network to capture the discriminant and nonlinear features
efficiently. If the number of the selected principal components
are too many (e.g., 100), the classification results tend to be bad
too. In order to obtain a good classification performance, 10
principal components are selected in 1D-GAN. Because of the
dimensionality of the input is too high (e.g., 100), it may cause
the serious overfitting problem under the condition of limited
training samples (i.e., 200).
C. The classification results for 3D-GAN
In 3D-GAN, the network considers both spectral and spatial
features effectively, which can lead to a better performance in
terms of classification accuracies than the ones obtained by
1D-CNN. As mentioned before, we preserve three principal
components as the inputs of 3D-GAN. The architecture of the
3D-GAN are shown in Table IX. The number of classes for
each dataset is represented by n_class. The networks G and D of
3D-GAN are deep CNNs with five convolution layers and
proper activation functions. The discriminator D is followed by
a sigmoid classifier and a softmax classifier, which are used to
classify the real/fake samples and the HSIs, respectively. The
size of the input noise is
and the generator converts
the inputs to fake samples with the size of
. Then the
generated samples are sent to the discriminator D . Bach
normalization is used in some specific layers to boost the
classification accuracy. In our practice, the model leads to
instability if batch normalization is used in all layers.
The size of mini-batch was 100 and the learning rate was
0.0002. In this set of experiments, the number of training
epochs for the CNNs and GANs is 600.
The SVM-based and CNN-based five methods are included
to give a comprehensive comparison. The classification results
are shown in Tables X-XII. For the three datasets, we use
which the n_band represents the number of
spectral bands and
neighbors of each pixel as the
input 3D images in these methods without PCA and using PCA
respectively. The input images are normalized into the range
[-0.5 0.5].
Due to the advantages of SVM, some SVM-based HSIs
classifiers are included for comparison. The 3D-RBF-SVM
(SVM with the radial basis function kernel) receives the 3D
images as inputs. The extended morphological profile with
TABLE VIII CLASSIFICATION RESULTS OF 1D-GAN WITH DIFFERENT PRINCIPAL COMPONENTS ON THREE DATASETS
85.32±1.54
89.13±2.19
83.46±1.95
83.32±1.32
81.89±2.24
89.15±0.39
88.13±3.50
74.39±1.47
74.09±0.97
73.14±3.10
82.07±1.22
90.45±2.62
75.20±1.42
76.60±1.03
78.52±2.26
76.89±2.24
89.64±2.47
82.74±1.89
82.45±1.45
82.33±1.34
70.14±1.34
84.13±3.19
78.28±2.04
77.28±2.04
76.15±1.45
74.52±1.26
88.15±2.62
83.41±1.23
81.24±0.89
81.48±1.26
Indian Pines
64.09±3.27
67.24±2.80
64.35±2.09
62.30±1.85
59.58±2.56
58.14±2.56
59.27±3.19
56.75±2.56
53.75±1.56
48.78±3.09
61.32±2.21
63.45±2.62
61.53±1.03
60.07±1.03
57.00±2.13
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
SVM (EMP-SVM) is a widely used spectral-spatial classifier
for . In the EMP-SVM method, three principal components
from HSIs are computed and then the opening and closing
operations are used to extract spatial information on the first
three components. In the experiments, the shape structuring
element (SE) is set as disk with an increasing size from 1 to 4.
Therefore, 24 spatial features are generated. The learned
featured are fed to an RBF-SVM to obtain the final
classification results.
Furthermore, 3D-CNN , which has the same architecture
as the discriminator D in 3D-GAN, PCA-CNN, and EMP-CNN
are also used for comparison. For the PCA-CNN, the CNN is
conducted on the three principal components, which is useful
when the training samples are limited . From Tables X-XII,
one can see that for Salinas dataset, the 3D-GAN exhibits the
highest OA, AA and K, with an improvement of 1.76%, 3.68%
and 0.0119 over PCA-CNN respectively. On the other hand,
our 3D-GAN approach outperforms 3D-RBF-SVM by 9.93%,
2.69% and 0.09 in terms of OA, AA and K, respectively.
Furthermore, the proposed 3D-GAN obtains a better
classification performance on Salinas dataset compared with
the 3D-CNN and EMP-CNN. For the KSC and Indian Pines
datasets, we can obtain the similar results. Compared with these
state-of-the-art methods, the 3D-GAN demonstrates the best
performance.
In term of the running time of different networks, the
3D-GAN needs a longer time to optimize a new network, which
is caused by the update on both the generator network and
TABLE IX THE ARCHITECTURES OF THE 3D-GAN
Convolution
Activation
64×n_class
TABLE X CLASSIFICATION WITH SPECTRAL-SPATIAL FEATURES ON THE SALINAS DATASET
3D-RBF-SVM
83.09±1.08
85.90±1.26
87.04±0.16
88.15±0.24
91.26±0.48
93.02±1.54
85.46±2.06
82.53±1.38
74.02±0.36
77.76±0.82
84.47±0.43
89.15±0.39
81.07±1.19
84.02±1.46
85.43±0.19
86.05±0.13
90.88±0.52
92.07±1.22
Brocoli_green_weeds_1
94.15±0.50
77.97±0.69
96.33±1.20
60.17±0.36
84.32±1.13
98.12±1.02
Brocoli_green_weeds_2
98.57±0.89
99.75±0.37
93.86±0.23
95.04±0.17
98.81±0.08
94.11±0.12
90.56±0.50
50.40±0.51
65.54±1.29
84.69±0.32
75.92±0.15
76.46±0.28
Fallow_rough_plow
98.93±0.40
98.72±0.82
94.33±0.47
97.63±0.15
89.84±0.09
100.00±0.47
Fallow_smooth
95.23±0.63
97.44±0.36
77.01±1.01
99.95±0.08
80.00±0.00
88.25±1.89
99.25±0.91
99.94±0.36
94.02±0.01
99.96±0.10
96.88±0.07
99.34±0.36
98.82±0.33
99.88±0.02
90.00±0.50
87.50±0.00
97.96±0.19
99.90±0.67
Grapes_untrained
78.50±0.57
98.50±0.22
75.47±0.69
89.65±0.22
83.64±0.13
89.44±1.13
Soil_vinyard_develop
94.11±0.50
99.33±0.37
95.19±0.01
99.38±0.61
100.00±0.00
100.00±0.00
Corn_senesced_green_weeds
85.56±0.36
93.99±0.56
85.41±0.04
98.20±0.95
100.00±0.00
98.13±1.00
Lettuce_romaine_4wk
90.63±0.78
82.30±1.23
92.03±0.16
92.20±0.36
98.87±0.12
96.69±2.12
Lettuce_romaine_5wk
99.48±0.03
100.00±0.00
89.45±1.23
34.54±4.36
99.35±0.04
99.06±1.04
Lettuce_romaine_6wk
20.08±2.47
99.12±0.16
40.80±1.89
19.20±5.36
74.65±0.68
77.92±1.68
Lettuce_romaine_7wk
66.29±1.67
97.64±0.45
20.00±2.48
90.38±1.36
70.73±0.05
78.21±0.67
Vinyard_untrained
59.14±1.06
0.0138±2.56
52.64±2.96
91.59±1.36
65.13±0.20
70.88±0.45
Vinyard_vertical_trellis
66.96±0.78
83.79±0.48
55.97±1.87
18.49±6.36
83.42±0.94
Runtime (s.)
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
discriminator network in one training epoch. Therefore, the
computational complexity of GAN is approximately twice as
much as the CNN-based methods, but our method possesses a
superior ability in terms of classification accuracy.
Like 1D-GAN, detailed experiments with different principal
components of 3D-GAN have been investigated to give a
comprehensive comparison. Table XIII shows the classification
results of 3D-GAN. In the experiment reported in the table,
three principal components are investigated to obtain the main
spectral information and their spatial neighborhood pixels are
used to obtain the spatial information. Due to the fact that the
spatial information is also included, we use relatively fewer
components in the spectral domain compared with 1D-GAN.
From Table XIII one can observe that the PCA operation can
improve the accuracy to some degree. In the experiment of
3D-GAN, we only chose three principal components because
TABLE XI CLASSIFICATION WITH SPECTRAL-SPATIAL FEATURES ON THE KSC DATASET
3D-RBF-SVM
76.13±0.24
90.59±0.25
96.94±0.13
95.63±0.26
96.02±0.42
96.89±1.24
64.60±0.34
85.83±0.28
91.39±0.02
89.65±0.21
93.17±0.14
94.14±0.40
73.52±1.30
89.41±1.39
96.60±0.14
94.95±1.13
95.27±0.49
96.52±0.26
88.68±0.69
87.82±4.24
90.14±0.89
91.71±3.71
96.189±0.56
98.292±0.42
Willow swamp
69.77±2.67
80.14±7.06
57.28±2.04
89.73±10.1
71.605±1.96
79.835±1.45
CP hammock
70.73±1.45
87.64±6.19
97.24±0.23
92.16±5.33
76.828±1.24
98.438±0.14
Slash pine
57.32±0.63
86.64±4.79
95.60±0.19
86.94±6.27
100.00±0.00
86.508±1.12
Oak/Broadleaf
42.85±2.56
77.02±8.87
63.75±1.56
94.79±6.89
100.00±0.00
98.758±0.14
32.24±0.62
89.66±5.82
92.07±1.03
90.92±7.90
96.943±0.78
100.00±0.00
10.00±3.77
83.37±17.8
100.00±0.00
91.57±6.14
77.143±1.47
97.143±1.06
Graminoid marsh
42.23±3.64
91.78±2.82
100.00±0.00
96.22±3.13
79.814±1.89
72.949±2.10
Spartina marsh
84.00±0.25
97.12±1.57
91.37±0.56
99.53±0.99
100.00±0.00
99.231±0.09
Cattail marsh
81.88±1.35
97.06±1.85
99.56±0.01
99.81±0.37
99.752±0.04
100.00±0.00
Salt marsh
96.75±0.45
99.64±1.12
100.00±0.00
99.79±0.30
100.00±0.00
100.00±0.00
86.32±1.26
99.24±2.11
98.21±0.17
97.69±2.31
99.205±0.03
96.481±1.23
100.00±0.00
100.00±0.00
100.00±0.00
100.00±0.00
100.000±0.00
100.00±0.00
Runtime (s.)
TABLE XII CLASSIFICATION WITH SPECTRAL-SPATIAL FEATURES ON THE INDIAN PINES DATASET
3D-RBF-SVM
58.01±1.08
69.34±1.06
86.48±0.13
86.47±0.26
87.27±1.01
89.09±1.97
50.56±2.06
52.63±1.28
68.19±0.26
70.41±0.42
80.17±0.48
83.14±1.58
52.07±1.19
64.51±0.56
84.23±0.16
84.12±0.19
85.24±1.29
87.32±1.21
77.35±1.50
15.94±0.39
10.43±1.78
14.70±1.40
15.00±1.34
30.21±1.03
Corn-notill
18.52±1.06
39.16±1.28
86.71±1.25
86.34±1.11
86.98±0.96
81.79±0.26
Corn-mintill
54.66±0.57
70.75±0.59
84.25±1.47
89.49±0.70
85.27±1.34
75.93±1.26
32.30±0.39
54.74±0.00
76.92±2.69
42.00±1.43
94.09±1.63
90.08±1.23
Grass-pasture
68.37±0.47
84.96±1.59
85.91±0.23
92.75±1.87
86.39±2.12
Grass-trees
85.53±2.96
96.21±1.16
88.33±0.23
92.75±0.30
79.04±1.03
93.28±0.23
Grass-pasture-mowed
10.27±1.36
100.00±0.00
10.67±2.35
12.00±0.50
53.57±1.65
40.71±1.05
Hay-windrowed
78.50±0.23
85.00±0.56
100.00±0.00
100.00±0.00
91.59±0.48
98.11±0.21
12.32±0.51
15.78±1.19
12.46±2.56
10.00±1.20
10.20±2.05
20.00±1.96
Soybean-notill
62.28±3.36
75.92±1.39
89.85±0.45
78.72±0.95
73.25±1.14
74.28±0.89
Soybean-mintill
66.86±1.61
81.23±0.96
91.55±1.04
95.52±1.23
90.30±0.78
91.12±0.25
Soybean-clean
28.25±0.42
31.85±0.51
86.76±0.69
89.47±0.39
80.43±0.96
84.99±1.46
99.18±1.47
98.23±0.28
87.50±1.48
80.00±0.00
56.34±2.48
49.75±2.45
85.98±1.28
90.85±1.19
88.37±1.67
84.55±0.58
91.62±0.69
94.38±0.26
Buildings-Grass-Trees
13.82±0.35
94.28±1.01
53.53±2.48
69.54±1.31
74.58±0.78
94.47±0.79
Stone-Steel-Towers
87.78±0.32
95.24±0.67
95.65±0.57
89.34±1.08
88.17±1.02
88.22±1.16
Runtime (s.)
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
the classification results are relatively good compared with
traditional
classification
performance may be better if more components are selected.
One should note that more principal components lead to a
higher computational complexity and a longer training time.
Furthermore, the classification accuracies descended when too
many components (e.g., 100 components) were selected.
Taking the aforementioned factors into consideration, after
performing the whiten PCA, we preserved three components in
To explore the effect of the adversarial component of GANs
in classification, we also conduct experiments on all three
datasets to see whether the classifier component of the
3D-GAN would perform better than for an isolated network of
GANs. The isolated GAN network means that the discriminator
D updates its parameters in the training process while the
generator G does not update its parameters. In other words, the
gradient flow from the discriminator D does not broadcast to
the generator G , and actually the two networks are not really in
an adversarial manner. We call this training process
3D-Isolated-GAN and the results are listed in Table XIV.
In this experiment, 200 training samples are randomly
chosen for each dataset, and from the Table we can see that the
normal 3D-GAN outperforms the 3D-Isolated-GAN about
2.93%, 3.49%, and 2.46% in terms of OA for the three datasets.
Therefore, we can make the conclusion that the adversarial
action between two networks is highly important and
influential in the training process.
D. The visualization of adversarial samples and 3D-GAN
augmentation
The GAN consists of a generator and a discriminator, which
is a two-player minimax game between G and D . If the
discriminator cannot distinguish the real data from the synthetic
fake data, we can conclude that the generated ability of G has
superior performance, and the whole adversarial network
achieves the global optimality in theory .
The discriminator can be regarded as a classifier to get the
classification results. On the other hand, the synthetic fake
samples from the generator can be used to increase the number
of training samples. The discriminator model is the one which
directly accesses information in the dataset (e.g., the real
samples from the distribution and the generator model learn
based on error signals from the discriminator).
In the visualization experiment, the fake samples are
generated by the generator (i.e., G ) of 3D-GAN. Some
selected fake and real samples on three hyperspectral datasets
are shown in Fig. 8. In fact, it is difficult to distinguish the fake
TABLE XIV CLASSIFICATION RESULTS BETWEEN NORMAL AND ISOLATED GAN NETWORKS ON THE THREE DATASETS
3D-Isolated-GAN
93.02±1.54
90.09±0.56
88.15±0.39
85.76±1.31
92.07±1.22
88.05±0.96
97.69 ±0.24
94.20±0.49
94.14±0.40
84.34±1.37
96.52±0.26
89.25±0.98
Indian Pines
90.69 ±0.86
87.23±1.75
83.14±1.82
80.14±2.04
89.62±0.26
84.32±0.47
TABLE XIII CLASSIFICATION RESULTS OF 3D-GAN WITH DIFFERENT PRINCIPAL COMPONENTS ON THREE DATASETS
93.32±1.54
95.12±0.75
95.03±0.95
94.53±1.02
94.89±1.24
89.15±0.39
94.83±0.28
94.39±0.47
93.09±0.97
93.14±0.40
92.07±1.22
94.41±1.39
94.20±0.42
93.60±0.45
94.52±0.26
96.89±1.24
97.56±1.04
97.14±0.89
93.45±1.21
93.33±1.34
94.14±0.40
92.14±1.06
94.28±2.04
89.28±2.04
88.15±1.45
96.52±0.26
96.45±0.54
95.41±0.23
92.24±0.59
91.48±1.26
Indian Pines
89.09±1.97
90.04±1.29
88.97±1.87
85.30±1.45
83.58±1.12
83.14±1.58
85.02±1.54
82.75±1.56
81.75±1.56
77.78±2.14
87.32±1.21
89.16±0.89
86.53±1.03
83.07±1.03
79.00±1.63
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
samples from the real samples. From the Figure, one can see
that at the end of the adversarial training, the generated samples
get more and more details from the real data.
To verify the superior performance of the 3D-GAN
augmentation methods, we feed the 100 fake samples, which
are generated by 3D-GAN, into the training dataset. We
suppose here that the original dataset has N classes and that the
fake samples can be endowed with the label
. Then, the
real and fake samples are classified by the PCA-CNN and the
3D-GAN, which are called the Aug-PCA-CNN and
the3D-Aug-GAN, respectively. The classification results from
these data augmentation methods and the original methods are
shown in Tables XV-XVII. From the Tables, one can see that
the OA of the methods after data augmentation on three dataset
outperforms the methods without data augmentation. It is
obvious that the additional fake samples can improve the
classification performance compared with original methods.
E. Classification Maps
At last, in this subsection, the classification accuracies are
Label: Stubble
Label: Soil_vinyard_develop
Label: Lettuce_romaine_4wk
Label: Mud flats
Label: Oak/Broadleaf
Label: Willow swamp
Label: Corn-notill
Label: Grass-trees
Label: Soybean-mintill
Fig. 8. The real data and generated fake data with same labels in different classes on three datasets: (I): Salinas data, (II) KSC dataset and (III) Indian Pines
dataset, (a) real training data, (b) the first corresponding fake data and (c) the second corresponding fake data
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
evaluated from a visual perspective. The methods including
EMP-SVM, 3D-CNN, 3D-GAN and 3D-Aug-GAN with
virtual samples are selected to classify the whole images. Figs.
9-11 are the classification maps for different methods on the
three datasets. All parameters in these models are optimized.
From Figs. 9-11, one can figure out how the different methods
affect the classification results. The SVM-based methods
always have the most errors for the three datasets (see Figs, 9(b),
10(b) and 11(b)). Especially for the Salinas dataset (Fig 9(b)),
many pixels are misclassified at the top of the image with the
SVM based method. By making the comparison between the
true ground reference and the classification maps, one can see
that the obtained classification results from CNNs and GANs
are more precise, which show that the CNNs and GANs are
Fig. 10. KSC: (a) False color image, (b) to (e), classification maps for different classifiers: (b) EMP-SVM, (c) 3D-CNN, (d) 3D-GAN,(e) 3D-Aug-GAN
Fig. 9. Salinas: (a) Ground reference map, (b) to (e), classification maps for different classifiers: (b) EMP-SVM, (c) 3D-CNN, (d) 3D-GAN,(e) 3D-Aug-GAN
TABLE XVII CLASSIFICATION WITH DATA AUGMENTATION ON THE INDIAN PINES DATASET
Aug-PCA-CNN
3D-Aug-GAN
88.72±0.94
89.34±1.45
90.69 ±0.86
91.10±0.56
80.17±0.48
82.62±2.19
83.14±1.82
83.76±1.52
86.64±0.49
87.43±1.98
89.62±0.26
89.95±0.13
Train time(s.)
Test time(s.)
TABLE XVI CLASSIFICATION WITH DATA AUGMENTATION ON THE KSC DATASET
Aug-PCA-CNN
3D-Aug-GAN
96.02±0.42
96.85±0.32
97.69 ±0.24
98.12±0.63
93.17±0.14
93.29±0.48
94.14±0.40
94.76±0.12
95.27±0.49
95.71±0.56
96.52±0.26
98.05±0.20
Train time(s.)
Test time(s.)
TABLE XV CLASSIFICATION WITH DATA AUGMENTATION ON THE SALINAS DATASET
Aug-PCA-CNN
3D-Aug-GAN
91.26±0.48
92.04±0.16
93.02±1.54
93.67±0.56
84.47±0.43
85.02±0.36
88.15±0.39
90.89±1.31
90.88±0.52
91.13±0.19
92.07±1.22
92.55±0.96
Train time(s.)
Test time(s.)
> REPLACE THIS LINE WITH YOUR PAPER IDENTIFICATION NUMBER (DOUBLE-CLICK HERE TO EDIT) <
promising methods for HSI classification. Furthermore, the
proposed GAN with data augmentation (3D-Aug-GAN)
demonstrates an excellent visual classification performance,
and it works pretty well under the condition of limited raining
V. CONCLUSION
In this paper, the usefulness and effectiveness of GAN for
HSIs classification are explored for the first time. With the help
of GANs, the deep CNN achieves better performance in terms
of classification accuracy compared with traditional CNN.
Furthermore, the overfitting problem raised by CNNs is
mitigated. In more detail, two frameworks are designed: (1)
The first one, called the 1D-GAN, is based on spectral vectors
and (2) the second one, called the 3D-GAN combines the
spectral and spatial features. These two architectures
demonstrated excellent abilities in feature extraction and image
classification compared with other state-of-the-art methods. In
the proposed GANs, PCA is used to reduce the high
dimensionality of inputs, which is really important to stabilize
the training procedure. Due to the large number of learnable
parameters (e.g., weights) in deep models, deep CNNs suffer a
lot with the problem of overfitting, while GAN can be regarded
as a regularization technique which can mitigate the overfitting
phenomenon in training process. Furthermore, the HSI samples
that are generated by GAN are illustrated for the first time here,
possibly opening a new window for generation of hyperspectral
data generation. More importantly, generated adversarial
samples are for the first time used as training samples for HSIs
classification in this paper. Those samples significantly
improve the classification performance. The aforementioned
techniques show their huge potential of GANs for HSI
classification.