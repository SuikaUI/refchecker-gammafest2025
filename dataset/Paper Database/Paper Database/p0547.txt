Socially Trusted Collaborative Edge Computing
in Ultra Dense Networks
Lixing Chen, Student Member, IEEE, Jie Xu, Member, IEEE
Small cell base stations (SBSs) endowed with cloud-like computing capabilities are considered as
a key enabler of edge computing (EC), which provides ultra-low latency and location-awareness for
a variety of emerging mobile applications and the Internet of Things. However, due to the limited
computation resources of an individual SBS, providing computation services of high quality to its users
faces signiﬁcant challenges when it is overloaded with an excessive amount of computation workload.
In this paper, we propose collaborative edge computing among SBSs by forming SBS coalitions to
share computation resources with each other, thereby accommodating more computation workload in
the edge system and reducing reliance on the remote cloud. A novel SBS coalition formation algorithm
is developed based on the coalitional game theory to cope with various new challenges in small-cellbased edge systems, including the co-provisioning of radio access and computing services, cooperation
incentives, and potential security risks. To address these challenges, the proposed method (1) allows
collaboration at both the user-SBS association stage and the SBS peer ofﬂoading stage by exploiting the
ultra dense deployment of SBSs, (2) develops a payment-based incentive mechanism that implements
proportionally fair utility division to form stable SBS coalitions, and (3) builds a social trust network for
managing security risks among SBSs due to collaboration. Systematic simulations in practical scenarios
are carried out to evaluate the efﬁcacy and performance of the proposed method, which shows that
tremendous edge computing performance improvement can be achieved.
I. INTRODUCTION
Pervasive mobile computing and the Internet of Things are driving the development of many
new applications that are both compute-demanding and latency-sensitive, such as cognitive
L. Chen and J. Xu are with the Department of Electrical and Computer Engineering, University of Miami, USA. Email:
 , .
incentives
SBS coalition
peer offloading
cloud server
Fig. 1. Illustration of socially trusted collaborative EC
assistance, mobile gaming and augmented reality. Although cloud computing enables convenient
access to a centralized pool of conﬁgurable and powerful computing resources, it often cannot
meet the stringent requirements of latency-sensitive applications due to the often unpredictable
network latency and expensive bandwidth , . The growing amount of distributed data
further makes it impractical or resource-prohibitive to transport all the data over today’s alreadycongested backbone networks to the remote cloud . As a remedy to these limitations, Edge
Computing (EC) emerges as a new computing paradigm to push the frontier of computing
applications, data, and services away from centralized cloud computing infrastructures to the
logical extremes of a network thereby enabling analytics and knowledge generation to occur at
the data source.
Considered as a key enabler of EC, small cell base stations (SBSs), such as femtocells
and picocells, endowed with cloud-like computing and storage capability can serve end-users’
computation requests as a substitute of the cloud while providing LTE connectivity to the Internet,
especially for indoor premises. Such migration between computation and wireless communication
service provisioning at the network edge was envisioned in the TROPIC project . Nonetheless,
compared with mega-scale data centers, SBS will be limited in computing resources. Therefore,
computation workload exceeding the SBS’s computing capacity still has to be sent to the cloud,
resulting in a hierarchical ofﬂoading structure among end-users, SBSs, and the cloud. Although
there have been a few works , studying the optimization of the ofﬂoading strategy in
this hierarchical structure, relying on a single SBS signiﬁcantly limits the EC performance.
Fortunately, the ultra dense deployment of SBSs in the next generation (5G) mobile networks
 creates an opportunity for nearby SBSs to collaboratively form a computation resource pool.
Such a collaborative EC infrastructure, also known as Femto-Cloud , improves the efﬁciency
of system resource utilization by exploiting the spatial diversity of workload patterns, thereby
signiﬁcantly enhancing EC performance. For instance, a cluster of SBSs can coordinate among
themselves to serve computation requests by transferring workload from overloaded SBSs to
nearby SBSs with a light workload.
The idea of balancing computation workload among nearby SBSs is similar to geographical
load balancing , in data center networks, which has been extensively studied. However,
edge computing in ultra dense networks faces many new challenges of forming an effective
collaborative network. First, whereas conventional clouds manage only the computing resource,
moving the computing resource to the network edge leads to the co-provisioning of radio
access and computing services by the SBSs, thus mandating a new model for understanding
the interdependency between the management of the two resources. Unlike cloud computing
that is agnostic to user location, the physical association between the SBSs and the end users
becomes a critical design aspect that has a signiﬁcant impact on the computing performance.
Second, a distinct feature of SBSs is that they are often owned and deployed by individual users
(e.g. home/enterprise owners). Unlike macro base stations that are deployed by the network
operator, the operator has only minimum control over SBSs. Without proper incentives, SBSs
will be reluctant to participate in the collaborative edge computing process. Therefore, incentives
must be devised and incorporated into the load balancing scheme. Of particular importance is
the design of a trust management module that takes into account the social trust relationship
between the SBSs to minimize the security and privacy risks in collaboration.
In this paper, we design a socially trusted collaborative edge computing platform for ultra
dense networks (see Figure 1 for illustration). (1) We use payment as the incentive mechanism
for individual SBSs to collaborate. Speciﬁcally, overloaded SBSs can pay nearby SBSs with
spare computing resources to process their workload instead of ofﬂoading it to the remote
cloud. The collaborative network formation and the associated payment scheme are designed
under the coalitional game theoretic framework and we prove that our proposed scheme results
in the optimal stable coalition among the SBSs. (2) When forming the coalition among SBSs,
in addition to workload balancing at the SBS level, we allow end-users to directly switch their
association to neighboring SBSs by exploiting the ultra dense deployment of SBSs, thereby
avoiding transmission energy and latency incurred in the workload transfer between SBSs. This
mixed workload balancing scheme is in stark contrast with geographical load balancing in
data center networks or collaborative Femto-Cloud that does not consider the ultra dense
deployment. (3) The proposed platform has a dedicated trust management component that
manages the trust between any two SBSs to enable security-aware collaboration. Apart from the
physical network of SBSs, we construct a social trust network that characterizes the trust between
SBSs, which can be used to determine the security measure to be put on the processing/ofﬂoading
of computation workload from/to neighbor SBSs, thereby reducing security and privacy leakage
risks. (4) We conduct extensive systematic simulation studies to evaluate our proposed scheme in
practical settings and understand how different SBS coalitions are formed and when collaborative
EC is the most useful. Our results show that the proposed collaborative EC method can reduce
the system cost by more than 40% compared to standalone EC systems without collaboration.
The rest of this paper is organized as follows. Section II presents the system model. Section
III develops a coalitional game for cooperative SBS network. Section IV proposes a merge-split
framework for distributed coalition formation. Simulations are carried out in Section V. Section
VI reviews related works, followed by the conclusion in Section VII.
II. SYSTEM MODEL
We consider N SBSs, indexed by N = {1, 2, ..., N}, endowed with heterogeneous computing
capabilities. SBSs are located in separate rooms, possibly on different ﬂoors, in a multi-story
building. These SBSs have Internet access and therefore can ofﬂoad computation tasks to the
remote cloud when its own computational capacity cannot accommodate the demand. Let M =
{1, 2, ..., M} denote the set of all mobile user equipments (MUEs) in the building. Each SBS
has a set of authorized MUEs, denoted by Mi ⊆M. For instance, MUEs (e.g. mobile phones,
laptops etc.) of employees in a business are authorized to access the communication/computing
service of the SBS deployed by the business. MUEs of family members can also access its
home SBS. However, due to the ultra dense deployment of SBSs in the building, an MUE is in
the radio coverage of multiple SBSs and hence, there is a potential for SBSs to collaboratively
balance the workload via direct MUE-SBS association.
We consider a time-slotted system. In each time slot, each MUE has a certain amount of
computationally intensive tasks that need be ofﬂoaded to either the SBSs or the cloud for
processing. We will focus on the problem in one time slot. There are two types of computation
tasks: private tasks and normal tasks. Private tasks of an MUE must be processed by its own
SBS or the cloud (which is assumed to be secure). They cannot be processed by other SBSs due
to privacy concerns since SBSs are deployed by individual home/business owners which may
not be fully trusted and less protected than the cloud. Normal tasks are less security-sensitive
and hence, they can be processed by either its own SBS, the secure cloud or other nearby SBSs.
Therefore, the task requests from MUE m ∈M in a time slot are described by a tuple (λa
m is rate of task arrival in the current time slot (assuming a Poisson arrival process) and
τm ∈ is the fraction of private tasks. Without SBS collaboration, the total task arrival rate
to SBS i from all its authorized MUEs is thus:
Due to the limited computational capacity of SBS i, there is a maximum task arrival rate ωmax
that SBS i can handle. We deﬁne αi ≜ωmax
i as the computing resource surplus (or deﬁcit)
of SBS i. If αi ≥0, then SBS i has spare computing resources that it can share with other
SBSs. If αi < 0, then SBS i needs to acquire additional computing resource from either the
cloud or other peer SBSs to meet its demand. Therefore, there is a potential computing resource
exchange market among the SBSs. We call SBSs with α ≥0 potential “sellers” and those with
α < 0 potential “buyers”.
A. Overview of Collaborative Edge Computing
Buyer SBSs have the following two options to acquire additional computing resources:
SBS-to-Cloud ofﬂoading: The SBS can further ofﬂoad the unsatisﬁed computation tasks to
the remote cloud. However, there will be extra transmission delay costs due to the large roundtrip time to the remote cloud. Moreover, the cloud will also charge the SBS service fees for
using the cloud computing resources.
SBS coalitions: Instead of relying on the remote cloud, SBSs can collaborate with each other
by forming edge computing coalitions, in order to reduce the number of computation tasks
ofﬂoaded to the cloud, thereby improving the delay performance and cutting their expenses on
using the cloud service. Speciﬁcally, there are two ways to collaborate:
• SBS peer ofﬂoading: a buyer SBS ﬁrst receives the computation tasks from its authorized
MUEs and then further transmits via the wireless link some of the received tasks to nearby
seller SBSs for processing.
• MUE-SBS association: if an authorized MUE is also in the coverage of the seller SBS, a
buyer SBS can associate this MUE to the seller SBS and directly ofﬂoad its computation
tasks to that seller SBS. This method exploits the dense deployment of SBSs and further
saves the task transmission delay and energy cost.
Clearly, load balancing via MUE-SBS association is preferred due to the reduced overhead
cost. Therefore, in SBS coalitions, MUE-SBS association is adopted with a higher priority.
When load balancing cannot be realized via MUE-SBS association, SBS peer ofﬂoading is then
executed. Typically, these two methods are used at the same time since MUEs are distributed in
the network and not all MUEs are covered by seller SBSs.
surplus/deficit
edge orchestration
assign SBS
load balancing
(MUE-SBS assoc.)
(SBS peer offloading)
SBS network
Cloud server
# tasks, type
form coalitions
send tasks
load balancing
cloud offloading
return result
return result
return result
Fig. 2. Operating time sequence diagram of collaborative edge computing
Different coalitions (i.e. seller-buyer matchings) lead to different edge computing performance.
Since SBSs are self-interested and do not provide computing services to other SBSs for free, a
key issue that this paper will address is how to design payment mechanisms to provide seller
SBSs with incentives to cooperate and form the optimal stable coalitions. Before we design
the coalition mechanism, we ﬁrst show a time sequence diagram in Figure 2 to illustrate the
operation of the collaborative edge computing system. At the beginning of each operational slot,
a signaling phase is introduced in which MUEs report task requests. Based on these requests,
SBSs form edge computing coalitions by playing a distributed coalitional game, taking into
consideration of the local processing cost, cloud ofﬂoading cost, SBS peer ofﬂoading cost and
collaboration risk. Buyer SBSs make payments to seller SBSs for using their computing services.
An edge orchestrator, which is a trusted third party, is introduced to facilitate the payment process.
Speciﬁcally, the buyer SBSs ﬁrst send payments to the edge orchestrator, which then distributes
the payments to the seller SBSs. The time slot ends with returning computation results to the
Next, we model the various costs involved in the collaborative edge computing system. For
each SBS, its total cost comprises two main parts: operational cost and risk management cost.
These costs form the basis of the coalition formation game.
B. Operational Cost
We ﬁrst model the operational cost of the edge computing coalitions incurred in different
stages of the system.
Stage I: MUE-SBS association. We consider that an SBS absorbs the association cost (i.e.
MUE-to-SBS transmission delay and energy consumption) of its authorized MUEs as part of its
operational cost. Let Mij ⊆Mi(∀j ∈N , j ̸= i) denote the set of authorized MUEs of SBS i
that are associated to SBS j. The achievable transmission rate ra
mi between MUE m and SBS i
is given by the Shannon capacity
mi = W log
where W is the channel bandwidth, Hmi is the channel gain between SBS i and user m, σ2 is
the noise power and I is the interference from other SBSs. Given a target transmission rate ra
the transmission power is thus
W −1)(σ2 + I)H−1
To simplify the notations, we assume that the expected data size of each task is a unit size.
Therefore, the expected transmission delay and energy consumption of each task are da
mi, respectively. The MUE-SBS association cost of SBS i is therefore
where γ is a normalization coefﬁcient for delay cost and energy cost. The ﬁrst term on the
right-hand side is the association cost of authorized MUEs of SBS i that only associate with
SBS i. The second and third terms are the costs due to authorized MUEs of SBS i associating
with other SBSs j ̸= i. However, for each MUE m, its private tasks must be sent to its own
SBS i. Note that for a seller SBS i, we must have Mij = ∅, ∀j since it has enough computing
resources to accommodate all task requests from its own authorized MUEs.
Stage II: SBS peer ofﬂoading. In this stage, the cost of SBSs is mainly caused by task
migration between SBSs due to transmission delay and energy consumption. Let βij denote the
amount of tasks sent from SBS i to SBS j. The transmission rate from SBS i to SBS j and the
associated transmission power are denoted by rij and pij, respectively, which can be derived in
a similar way as in Stage I. Therefore, the transmission delay and energy consumption for each
task is ds,tx
= 1/rij and es,tx
= pij/rij. The transmission cost incurred to SBS i due to peer
ofﬂoading is therefore:
Stage III: SBS computing. We then model the cost for processing computation tasks locally
at SBSs. For each task, we assume that the required number of CPU cycles is an exponential
random variable with mean ρ. The computational capability of SBS i is measured by its CPU
speed (i.e. CPU cycles per second), denoted by fi. We model the computing delay using the
M/M/1 queuing system. Thus the average computation delay (including task waiting time and
processing time) for each task, can be obtained as
where ωi is the workload processed at SBS i, which is the outcome of SBS coalition and
load balancing and will be discussed shortly. The computation energy consumption for each
task processed at SBS i is proportional to the square of the CPU speed (fi)2, presented as
= κ(fi)2, where κ is a constant depending on the CPU architecture . Therefore, the
computation cost of SBS i is
i (ωi) + γes,c
Notice that although here we use speciﬁc functions for computing delay and energy consumption,
other functions can also be adopted. In practice, an SBS may maintain a lookup table for the
expected delay and energy consumption under different workload inputs.
Stage IV: SBS-to-Cloud ofﬂoading. SBSs may still have to ofﬂoad some computation tasks
to the cloud. Let βi0 be the number of computation tasks ofﬂoaded to the cloud by SBS i. Due
to the large round-trip time to the remote cloud and the transmission energy consumption, the
SBS-to-Cloud ofﬂoading cost of SBS i is
(βi0) = βi0(dc,tx
where dc,tx
is the total expected delay (due to both transmission and computation on the cloud)
from SBS i to the cloud, and ec,tx
is the transmission energy consumed by SBS i for each task.
In addition, the cloud charges SBSs w0 $/task for using the cloud service. Therefore, SBS i will
also incur an monetary cost
Mi = w0βi0
To sum up, the total operational cost of SBS i is:
Ci = wc(Ca
where wc converts the delay and energy cost into a value comparable to the monetary cost. Keep
in mind that this cost depends on how the SBSs form the coalition and balance the workload
among themselves.
C. SBS Social Trust Model
Since SBSs are operated by individual owners, there are higher security and privacy risks for
SBSs to ofﬂoad their tasks to other SBSs than processing locally or ofﬂoading to the secure
cloud. Therefore, when forming SBS coalitions, trust between SBSs must be taken into account.
Apart from the physical network of SBSs, we deﬁne a social trust network that describes the
trust relationships between SBSs. Let Tij ∈ denote the trust value that SBS i assigns to
SBS j. Tij = 0 indicates that SBS i completely distrusts SBS j and Tij = 1 indicates that SBS
i completely trusts SBS j. However, even if two SBSs are neighbors in the physical network,
they may not have an established trust relationship between each other. For instance, a new SBS
may have just been set up or two SBSs have not interacted with each other for a long time.
As illustrated in Figure 3, although SBS i and SBS j are physical neighbors and hence can
potentially form a coalition, the values of Tij and Tji are unknown since they do not have a
social relationship.
(a) Physical network
Neighborhood
Neighborhood
Neighborhood
(b) Social trust network
Fig. 3. Physical and social network.
In such cases, trust between the SBSs will be derived using the social trust network. If SBS
i can reach SBS j via certain other SBSs in the social network, then the trust between SBS i
and SBS j is computed by propagating trust along the path that connects them. Let Λ(i, j) be
the shortest path between SBS i and SBS j, then trust Tij is computed as
(k,l)∈Λ(i,j)
We note that the above is just one common way to evaluate trust using the social trust network.
There are many other ways to evaluate trust proposed in the literature. Moreover, the trust values
will be updated over time depending on the recent social interactions (including interactions in
the coalitions) among SBSs.
Using the social trust network, the cost due to managing the security risk that SBS i faces
when ofﬂoading computation tasks to other SBSs (e.g. adopting stronger yet more costly security
mechanisms) is modeled as follows:
ij + βij)(1 −Tij)
m∈Mij(1 −τm)λa
m is the amount of ofﬂoaded workload due to direct MUE-SBS
association, βij is the amount of ofﬂoaded workload in SBS peer ofﬂoading and wr converts
risk into a value comparable to the monetary cost.
III. COLLABORATIVE SBS NETWORK AS A COALITIONAL GAME
To formally study the formation of SBS coalitions and the resulting workload ofﬂoading
decisions, we use the framework of the coalitional game theory , . A coalitional game
is deﬁned as a tuple (N , v) where N is the player’s set and v : 2N →R is a function that
assigns for every possible coalition S ⊆N a real number representing the total beneﬁt achieved
by coalition S. By evaluating the values of different coalitions, players decide what coalitions
are formed among themselves. In what follows, we ﬁrst deﬁne the value function v(S) for any
given coalition S ⊆N . Clearly, v(S) depends on not only which SBSs are in the coalition S
but also how they collaborate, namely how they perform load balancing. Then we will describe
what coalitions are desired in terms of stability.
A. Collaborative load balancing and value function for coalitions
In this subsection, we investigate the interaction among SBSs that belong to any given coalition
S (which may not be stable though). Let Ss ⊂S denote the set of seller SBSs in S and Sb ⊂S
denote the set of buyer SBSs in S. We must have Ss ∪Sb = S. Although there are many
approaches to match buyers with sellers in the coalition (e.g., double auction or other matching
algorithms ), for ease of implementation, we consider a simple scheme similar to that
relies on the preference of the buyers inside the coalition to decide the workload ofﬂoading
decisions among the SBSs. Speciﬁcally, buyers can act sequentially (according to some order
Π) to acquire their needed computation resource as follows:
(1) Buyer bi ∈Sb requests to acquire its needed computation resource from seller sj ∈Ss
that will potentially yield the smallest ofﬂoading cost according to the SBS peer ofﬂoading
scheme in Algorithm 1 (which returns results of Mbisj and βbisj).
– If seller sj can offer the required computation resource of buyer bi, then the buyer does
not act further.
– Otherwise, buyer bi acquires as much computation resource as possible from seller
sj and then tries to fulﬁll the rest of its computation resource demand by acquiring
resources from other sellers in Ss.
(2) Buyer bi repeats the above sequence until it has covered up all its computation resource
deﬁcit or no available sellers in Ss exist. Then the next buyer SBS starts its acquiring
This process is repeated for all buyers in Sb. If a buyer is unable to ﬁnd a seller in Ss and
still needs computation resource, then the buyer will ofﬂoad the remaining computation tasks,
represented by βbi0 to the cloud. Essentially a buyer SBS tries to ofﬂoad as much computation
workload as possible to peer seller SBSs.
Algorithm 1 SBS peer ofﬂoading scheme
Input: Computation surplus |αsj| of seller sj; Computation deﬁcit |αbi| of buyer bi.
1: Maximum task ofﬂoading: α = min(|αbi|, |αsj|);
Stage 1: MUE-SBS association
2: Find users co-covered by buyer bi and seller sj, denoted by Rbisj;
m∈Rbisj (1 −τm)λa
Choose Mbisj satisfying:
m∈Mbisj (1 −τm)λa
m = α; Stop;
Mbisj = Rbisj;
m∈Mbisj (1 −τm)λa
m; Go to Stage 2;
Stage 2: SBS peer ofﬂoading
9: βbisj = ˜α;
10: return Mbisj, βbisj;
Following the above buyer-seller matching and workload allocation process, the values of
Mbisj, βbisj and βbi0 can thus be determined for each bi and sj. In particular, the workload ωbi
(or ωsj) that buyer SBS bi (or seller SBS sj) needs to process locally can be determined as
sj∈{Ss∪{0}}
With all these values derived, we are able to compute the operational cost Ci as well as the
risk management cost Ri for each SBS i ∈S according to our system model. Clearly, the values
of these costs also depend on the ordering of the buyer SBSs in the aforementioned matching
process. Let OS be the set of all possible orderings over buyers in S. Then given an ordering
Π ∈OS, the utility of SBS i in coalition S is thus deﬁned as
ui(S, Π) = −(Ci + Ri), i ∈S
and the total utility for coalition S is
The minus sign is inserted to turn the problem into a maximization problem in order to facilitate
the analysis of the coalitional game. The value function for the SBSs coalition formation game
(N , v) is deﬁned as
v(S) = max
Π∈OS U(S, Π)
which is the maximum achievable total utility over all possible orderings of the buyers, or
equivalently, the minimum achievable total cost of SBSs in the coalition.
B. Payment scheme within a coalition
The previous subsection describes how SBSs in a coalition can collaborate with each other to
improve their total utility (i.e. reduce their total cost). However, although the overall performance
of the coalition may be improved, individual SBSs, especially the seller SBSs, do not share their
computing resources with others for free. In this subsection, we design a payment scheme to
provide seller SBSs with incentives to cooperate. In the next section, we will study what stable
coalitions are formed under this payment-based incentive mechanism.
Let gi be the payment/reward of a buyer/seller SBS i, then its post-payment utility φi becomes
φi = ui −gi
Clearly, the total payment must equal the total reward within a coalition and hence P
i∈S gi = 0.
If gi > 0, then SBS i pays gi. If gi < 0, then SBS i receives |gi| reward.
Our payment scheme is developed by following a simple yet strict fairness criterion, namely
proportional fairness payoff division. Nevertheless, other fairness criteria, such as egalitarian
fair, Shapley value, nucleolus, can also be adopted. In this scheme, the values of payments and
rewards are decided by dividing the payoff (the utility improvement) of the whole coalition
due to cooperation among the SBSs proportionally to their utility achieved without cooperation.
Speciﬁcally, for SBS i, its post-payment utility will be
where v({i}) represents the utility of SBS i if it does not join any coalition (so only local
processing or ofﬂoading to the cloud), and ψi is the proportional weight satisfying P
i∈S ψi = 1
where ˜v({i}) is the normalized utility of SBS i within its coalition. The normalization is to map
negative SBS utilities to a positive interval. It is easy to verify that P
i∈S φi = v(S). Based on
the proportional fairness criterion, the payment/reward of SBS i can thus be determined as
gi(S) = φi(S) −ui(S), ∀i ∈S
In the above equation, φi can be interpreted as the expected utility of SBS i by participating
in the coalition, while the ui is the actually realized utility. The gap of the two is ﬁlled by the
payment scheme.
There are two implementation issues for the payment scheme. First, payments need to be
properly distributed since multiple buyers and sellers may be involved in the transaction.
Moreover, direct payment from buyers to sellers faces fraud risks in the monetary transaction.
To enable the effective and safe transaction, the edge orchestrator, which is a trusted third-party,
collects payments from all buyers and then distributes them to the sellers.
C. Stability of Coalitions
SBSs may form multiple disjoint coalitions and there are many ways that SBSs form coalitions.
However, we are interested in forming stable coalitions such that no SBS or group of SBSs have
incentives to leave the current coalition to form a different coalition. In particular, the requirement
that all SBSs (buyers and sellers) in a coalition must at least receive higher utilities than working
individually is a necessary but not sufﬁcient condition for stability.
Consider any subset K ⊆N of SBSs, we call S = {S1, ..., SL} a collection of coalitions
formed by these SBSs, where Sl ⊆K, ∀l are disjoint subsets of K. If K = N , then we call
S a partition of N . A defection function D is a function that associates each possible partition
S of N with a group of collections. The stability of a partition S is deﬁned with respect to a
defection function.
Deﬁnition 1. (D-stability). A partition S of N is D-stable if no group of SBSs are interested in
leaving S and forming a new collection of coalitions S′ ∈D(S). That is, at least one SBS in
such a group does not improve its utility by leaving the current partition.
In other words, a defection function D restricts the possible ways that SBSs may deviate/defect.
Two defection functions are of particular interest. The ﬁrst function, denoted by Dc, associates
with each partition S the group of all possible collections in N , namely there is no restriction
on the way SBSs may deviate. The second function, denoted by Dhp, associates each partition
S with the group of collections that can be formed by merging or splitting coalitions in S.
Therefore, Dhp-stability is weaker than Dc-stability. In the next section, we design a distributed
SBS coalition formation algorithm that achieves at least Dhp-stability.
IV. DISTRIBUTED COALITION FORMATION
A. Distributed Coalition Formation Algorithm
To present the distributed SBS coalition formation algorithm, we ﬁrst introduce the notion of
Pareto dominance to compare the “quality” of two collections of coalitions.
Deﬁnition 2. (Pareto Dominance) Consider two collections of disjoint coalitions S1 and S2
formed by the same subset of SBSs K ⊆N . S1 Pareto-dominates S2, denoted by S1 ⊲S2, if and
only if φi(S1) ≥φi(S2), ∀i ∈K with at least one strict inequality for some SBS.
Pareto dominance implies that a group of SBSs prefer to form coalitions in S1 rather than S2,
if and only if at least one SBS is able to strictly improve its utility without hurting any other
SBS. The following two operations, namely merge and split , are central to our coalition
formation algorithm:
• Merge: merge a set of coalitions {S1, . . . , Sl} into a bigger coalition Sl
j=1 Sj if {Sl
{S1, . . . , Sl}.
• Split: split a coalition {Sl
j=1 Sj} into a set of smaller coalitions {S1, . . . , Sl} if
{S1, . . . , Sl} ⊲{Sl
By performing Merge, a group of SBSs can operate and form a single and larger coalition if
this formation increases the utility of at least one SBS without decreasing the utility of any other
involved SBSs. Hence, a Merge decision ensures that all involved SBSs agree on its occurrence.
Likewise, a coalition can decide to split and divide itself into smaller coalitions if splitting is
preferred in the Pareto sense.
Our SBS coalition formation algorithm is developed based on the Merge and Split operations,
which is presented in Algorithm 2. The algorithm consists of two phases. The coalition formation
phase iteratively executes the Merge and Split operations. Given the current partition S, each
coalition S ∈S negotiates, in a pairwise manner, with neighboring SBSs to assess a potential
merge. The two coalitions will then decide whether or not to merge. Whenever a Merge decision
occurs, a coalition can subsequently investigate the possibility of a Split. Clearly, a Merge or a
Split operation is a distributed decision that an SBS (or a coalition of SBSs) can make. After
successive Merge-and-Split iterations, the network converges to a partition composed of disjoint
coalitions and no coalition has any incentive to further merge or split. In other words, the
partition is Merge-and-Split proof. The convergence of any Merge-and-Split iterations such as
the proposed algorithm is guaranteed as shown in . Upon convergence, the second phase of
the actual computation ofﬂoading then starts using mechanisms described in Section III.
B. Stability Analysis
The outcome of the above algorithm is a partition of disjoint independent coalitions of SBSs.
As an immediate result of the deﬁnition of Dhp stability, every partition resulting from proposed
algorithm is Dhp-stable. In particular, no coalitions of SBSs in the ﬁnal partition have the incentive
Algorithm 2 Distributed SBS coalition formation
1: Initial: The SBS network is partitioned by S = N = {1, . . . , N} with non-cooperative SBSs
at the beginning of each operational time slot.
Phase 1: SBS Coalition Formation
(a) S′ ←Merge(S): SBS coalitions in S decide to merge by examining the Pareto
dominance.
(b) S ←Split(S′): SBS coalitions in S′ make distributed split decision using the Pareto
dominance.
5: Until Merge and split converges to a ﬁnal partition Sf
Phase 2: Cooperative computation ofﬂoading
(a) each coalition Si ∈Sf order its buyers in a way to minimize the ofﬂoading cost
(maximize (17)).
7: Repeat for every Si ∈Sf
(b) each buyer in a coalition Si ∈Sf attempts to acquire computation demands in coalition
9: Until no peer ofﬂoading in the coalition is available.
(c) any buyer who still has unsatisﬁed computation demand performs SBS-to-cloud
ofﬂoading.
11: These two stages are repeated periodically to adapt the partition to environmental changes.
to pursue a different coalition formation through Merge or Split. Next, we investigate whether
the proposed algorithm can achieve Dc-stability.
A Dc-stable partition has the following properties according to . (i) No SBSs are interested
in leaving S to form other collections in N (through any operation). (ii) A Dc-stable partition
is the unique outcome of any arbitrary iteration of merge-and-split, if it exists. (iii) A Dc-stable
partition S is a unique ⊲-maximal partition, i.e., for all partition S′ ̸= S, we have S ⊲S′.
Therefore, the Dc-stable partition provides a Pareto optimal utility distribution. However, the
existence of a Dc stable partition is not always guaranteed . Nevertheless, we can still have
the following result.
Theorem 1. The proposed distributed SBS coalition formation algorithm converges to the Paretooptimal Dc-stable partition, if such a partition exists. Otherwise, the ﬁnal partition is Dhp-stable.
Proof. The proof is immediate due to the fact that, when it exist, the Dc-stable partition is a
unique outcome of any Merge-and-Split iteration , such as any partition resulting from our
coalition formation algorithm.
The stability of the grand coalition (e.g. all SBSs form a single coalition) is of particular interest
in the coalitional game theory. It can be easily shown that the considered SBS coalitional game
is generally not superadditive and its core is generally empty due to the extra ofﬂoading cost
(transmission delay, cost and collaboration risk) and hence, the grand coalition is not stable.
Instead, independent disjoint coalitions will form. Readers who are interested in more details on
the stability of grand coalition in coalitional games are referred to , .
C. Complexity Analysis
The complexity of the proposed coalition formation algorithm lies mainly in the complexity
of the Merge and Split operations. For a given network, in one Merge operation, each current
coalition attempts to merge with other coalitions in a pairwise manner. In the worst case scenario,
every SBS, before ﬁnding a suitable merge partner, needs to make a merge attempt with all
other SBSs in N . In this case, the ﬁrst SBS requires N −1 attempts for merge, the second
requires N −2 attempts and so on. The total number of merge attempts in the worst case is thus
i=1(N −i). In practice, the merge process requires a signiﬁcantly lower number of attempts
since ﬁnding a suitable partner does not always require to go through all possible merge attempts
(once a suitable partner is identiﬁed the merge will occur immediately). The complexity is further
reduced due to the fact that SBSs do not need to attempt to merge with physically unreachable
SBSs. Moreover, after the ﬁrst run of the algorithm, the initial N non-cooperative SBSs will
self-organize into larger coalitions. Subsequent runs of the algorithm will deal with a network
composed of a number of coalitions that is much smaller than N.
For the split operation, in the worst case scenario, splitting can involve ﬁnding all the possible
partitions of the set formed by the SBSs in a single coalition. For a given coalition S, this number
is given by the Bell number P|S|
which grows exponentially with the number of SBSs
|S| in the coalition. In practice, this split operation is restricted to the formed coalitions, and
thus it will be applied to small sets. The split complexity is further reduced due to the fact that,
in most scenarios, a coalition does not need to search for all possible split forms. For instance,
once a coalition identiﬁes a suitable split structure, the SBSs in this coalition will split, and the
search for further split forms is not needed in the current iteration.
V. SIMULATION
In this section, we conduct systematic simulations in practical scenarios to evaluate the
performance of the proposed system and algorithm.
Our simulation adopts the widely-used stochastic geometry approach for ultra dense SBS
deployment, which is modeled as a homogeneous Poisson Point Process (PPP) . Speciﬁcally,
we simulate a 100m×200m×50m ofﬁce building where a set of SBSs are deployed whose
locations are chosen according to the PPP with density 0.15. The distribution of MUEs also
follows another PPP with density 0.6. The task generation process of each MUE is modeled
as a Poisson process with a rate of 5 tasks per time slot. The maximum transmission power
of MUEs is set as 10 dBm. The channel model follows the ITU indoor path loss model :
L[db] = 20 lg f+10ν lg du+Lf(n)−28 (The values and corresponding explanations of parameters
are shown in TABLE I). The target MUE-SBS transmission rate is ru = 25 Mbps and hence
the corresponding transmission power can be computed. Similar requirements are imposed on
the transmissions between SBSs with SBS maximum transmission power 20 dBm and target
transmission rate rs = 50 Mbps. Figure 4 shows the SBS deployment and MUE association in
one operational time slot used in the simulation.
For simplicity, we consider a ﬁxed social trust network throughout the simulation time horizon.
Nevertheless, our algorithm is also compatible with evolving trust networks that are updated
continuously or periodically according to SBS interactions. The adopted social trust network is
illustrated in Figure 5. SBSs that are physically unreachable will not have mutual trust values
(e.g. SBS 3 and SBS 10). SBSs that are physical neighbors may also miss mutual trust due to
the lack of recent interactions. In this case, a trust value is obtained by ﬁnding the shortest path
in the social trust network (e.g. SBS 5 →SBS 10 →SBS 13).
The proposed SBS collaboration scheme is compared with three benchmark schemes:
SIMULATION SETUP: SYSTEM PARAMETERS
Parameters
Maximum UE transmission power pm
Maximum SBS transmission power ps
UE transmission rate requirement ru
SBS peer transmission rate requirement rs
Frequency (indoor path loss model) f
Indoor path loss exponent ν
Floor penetration loss Lf(n), n= 
 db
Noise power σ2
SBS density (PPP)
User density (PPP)
Task arrival rate of MUEs λa
System bandwidth W
Cloud ofﬂoading delay dc,tx
0.3 sec/task
X-axis (m)
Y-axis (m)
Z-axis (m)
Small-cell base station
User equipment
Fig. 4. SBS deployment and MUE association
• Non-cooperative scheme: Every SBS does not share computation resources with peer SBSs.
For overloaded SBSs, all unsatisﬁed computation tasks will be ofﬂoaded to the cloud server.
• Cloud-ofﬂoading minimization: The scheme greedily exploits the computation resources
of peer SBSs to minimize the number of tasks ofﬂoaded to the cloud server. Therefore, peer
T2,13=0.62
T13,2= 0.5
Fig. 5. Social trust network
ofﬂoading is performed whenever possible regardless of the ofﬂoading and risk management
• Centralized collaborative scheme: This scheme uses brutal force to search for the best
coalition structure that minimizes the total system cost without considering the coalition
stability or SBS incentives.
B. Coalition formation in one time slot
Fig. 6. Computation resource surplus/deﬁcit
We exemplify the distributed coalition formation process by considering the computation
surplus/deﬁcit proﬁle shown in Figure 6 in one operational time slot. Figure 7 depicts the
evolution of the intermediate post-payment utilities φ during the coalition formation process,
where weights in the cost function are set as wc = 0.2, wr = 0.2, w0 = 1. The horizontal
axis represents the iterations in the Merge-and-Split process and for each iteration, we indicate
if it is a Merge operation or a Split operation. Since all SBSs have their own computation
tasks to process, they incur positive costs (hence negative utilities). In particular, SBSs 1, 5,
8, 9, 10, 13 have computation resources deﬁcits. Without SBS collaboration, they have to
ofﬂoad the extra computation tasks to the remote cloud, thereby incurring large transmission
delay and cloud payment costs. During the coalition formation, each iteration is executed by
following the Merge/Split operation that aims to ﬁnd a Pareto-dominant coalition partition than
the current partition. Therefore, after each iteration, at least one of the SBSs improves its utilities
without decreasing the utilities of other SBSs. Figure 8 shows the system utility evolution of
each speciﬁc Merge or Split operation. We see that the system utility is improved with every
Merge/Split operation and after only several iterations, the network converges to a stable partition
of coalitions. This indicates that in practice, the complexity of running the proposed algorithm
is low and hence, it can be easily implemented.
Post-payment utility
M: Merge S: Split
Fig. 7. Evolution of post-payment utility φ
The ﬁnal coalitions and the number of exchanged computation tasks are presented in Figure 9,
where buyers are matched with nearby sellers. Several points are worth noting. First, a coalition
can contain multiple buyers and multiple sellers and is not necessarily just a matching between
one buyer and one seller. For example, the coalition {4, 9} involves only one buyer SBS 9 and
seller SBS 4, whereas the coalition {3, 6, 8, 13} involves two buyer SBSs 8, 13 and two seller
SBSs 3, 6. In particular, SBS 6 is sharing its computation resources with both SBSs 8 and 13.
System Utility
M: Merge S: Split
Merge {2};{10}
Merge {3};{8}
Merge {3,8};{11}
Merge {4};{9}
Split {1,3,5,6,8,11,13} to {3,6,8,13},{1,5,11}
Merge {1,6,5};{3,8,11,13}
Merge {3,8,11};{13}
Merge {1,6};{5}
Merge {1};{6}
Fig. 8. System utility evolution and coalition formation
Second, an SBS may not want to join any coalition. In other words, an SBS may want to form
an isolated coalition that contains only itself. In this particular simulation, we observe that SBS
7 and SBS 12 separately form isolated coalitions. As a result, the utilities of these two SBSs
stay the same before and after the coalition formation. This can also be observed in Figure 7.
By reading both Figure 6 and Figure 9, we can see that not all computation demands of buyers
can be satisﬁed via SBS coalition. For instance, consider SBS 9, it has a computation resource
deﬁcit for 18 tasks, yet it can only ofﬂoad 10 tasks to SBS 4, which is the only matched seller
SBS. In this case, the remaining 8 unsatisﬁed tasks will be ofﬂoaded to the cloud. Figure 10
further shows the computation resource deﬁcit (or surplus) and the actual computation resource
bought (or sold) for each SBS. Clearly, the deﬁcit (or surplus) serves an upper bound on what
is actually bought (or sold) and hence, the magnitude of the red bar is always larger than that
of the corresponding blue bar. In particular, SBSs 7 and 12 do not sell any of their computation
resource surplus to other SBSs. In the same ﬁgure, we also show the payments made by buyer
SBSs and the rewards received by seller SBSs. It can be veriﬁed that the total payment equals the
total reward within each coalition. For instance, in the coalition {3, 6, 8, 13}, the total payment
is 0.19 + 8.30 made by buyer SBSs 8, 13 and the total reward is 4.13 + 4. 36 received by seller
SBSs 3, 6.
We note that what coalitions will be formed depends on the adopted cost function. In this
set of simulations, we investigate the impact of the relative weights of ofﬂoading cost wc, risk
management cost wr and payment to the cloud w0. Table II reports the formed SBS coalitions
X-axis (m)
Z-axis (m)
Y-axis (m)
Offloaded tasks
Fig. 9. Coalitions and computation peer ofﬂoading
Payment/Reward g($)
Deficit/Surplus and Bought/Sold
Deficit/Surplus ( )
Bought/Sold
Isolated sellers
Isolated sellers
Fig. 10. Payment/reward and bought/sold of SBSs
for different weight proﬁles. We can see that, although in our scenario the grand coalition is
difﬁcult to form due to the physical network constraints, larger coalitions tend to form with
smaller weights assigned to the peer ofﬂoading cost and the risk management cost. Figure 11
presents the number of formed coalitions and the average coalition size.
WEIGHTS AND COALITION STRUCTURE
[wc, wr, w0]
SBS Coalition Structure
[0.1, 0.1, 1.0]
{ ; ; }
[0.1, 1.0, 1.0]
{ ; ; ; ; }
[1.5, 0.1, 1.0]
{ ; ; ; ; ; ; ; ; }
[1.5, 0.5, 1.0]
{ ; ; ; & the rest isolated SBSs}
[1.0, 1.0, 1.0]
{ ; ; ; & the rest isolated SBSs}
[1.5, 1.0, 1.0]
{ ; ; & the rest isolated SBSs}
Number of coalitions
(a) Number of coalitions
Average coalition size
(b) Average coalition size
Fig. 11. Impact of weights on coalition formation (w0 = 1).
C. Performance evaluation and comparison
Figure 12 shows the cost incurred by different parts of the system and offers a comparison
with the three benchmarks. (1) The non-cooperative scheme incurs the highest total cost. Since
there is no collaboration among the SBSs, each SBS has to ofﬂoad its extra computation tasks to
the remote cloud, thereby incurring a large transmission delay and cloud payment cost. However,
since there is no task ofﬂoading between SBSs, its operational cost is lowered and totally
avoids the risk management cost since all tasks are processed locally or in the secure cloud.
(2) The purpose of the cloud-ofﬂoading minimization scheme is to minimize the number of
tasks ofﬂoaded to the remote cloud, thereby reducing the transmission delay and cloud payment
cost. As can be seen, the cost due to using cloud service is signiﬁcantly reduced. However,
since the optimization ignores the operation cost due to ofﬂoading among SBSs and especially
the risk management cost, the total cost is still high. (3) The centralized collaborative scheme
Operational
Management
Cost (-Utility)
Distributed coalition formation
Non-cooperative
Cloud-offloading minimization
Centralized collaborative
Fig. 12. Costs characterization
Weighted Cost (-Utility)
Non-cooperative
Without MUE-SBS association
With MUE-SBS association
Fig. 13. Advantage of MUE-SBS association scheme
minimizes the overall network cost by jointly considering all cost sources, thereby achieving
a much lower total cost. However, the centralized scheme is performed under the assumption
that all SBSs are cooperative with no incentive issues, which is not suitable for our considered
problem where SBSs are self-interested. (4) Our proposed solution based on the coalitional game
gracefully addresses the incentive challenge. As can be seen, the proposed algorithm achieves
similar performance to the centralized scheme while ensuring that the adopted coalitions are
In Figure 13, we demonstrate the beneﬁts achieved by introducing the workload balancing in
MUE-SBS association, which is a distinct feature of ultra dense SBS networks and that existing
work did not consider. We run the coalition formation algorithm under two settings: with and
without MUE-SBS association scheme. As can be observed, the MUE-SBS association scheme
Number of MUEs
Weighted cost (-Utility)
Number of SBS buyers/sellers
Distributed coalition formation
Non-cooperative
Cloud-offloading minimization
Centralized collaborative
Number of SBS buyers
Number of SBS sellers
system capacity
maximum utility gain
(relative) 41%
maximum utility gain
(absolute) 23.5
Fig. 14. Impact of MUE number
Fraction of private task
Weighted cost (-Utility)
Distributed coalition formation
Non-cooperative
Cloud-offloading minimization
Centralized collaborative
Utility gain
Fig. 15. Impact of private fraction τ
helps to reduce the system cost and the cost reduction depends on the value of wc. When
wc is small, the transmission delay and energy consumption saved by MUE-SBS association
scheme are less valued, therefore, a modest cost reduction is realized. As the wc increases, the
edge system beneﬁts more by adopting the MUE-SBS association scheme. However, as shown
previously, a too large wc discourages formation of SBS coalitions which restrains the role of
MUE-SBS association. Hence, the beneﬁt of MUE-SBS association scheme diminishes when
the wc grows larger than 0.6.
How much performance improvement (i.e. cost reduction) can be achieved by SBS coalition
Time slots
Task requests to SBSs s
Fig. 16. Dynamics of task arrival
Time slots
System utility gain
Fig. 17. Dynamics of utility gain
will depend on the spatial trafﬁc pattern in the network. Intuitively, if all SBSs have a light
workload, then there is no need for collaboration, whereas if all SBSs are overloaded, then it is
not possible to collaborate. Now, we investigate the performance of collaborative edge computing
as a function of the system utilization level (i.e. ratio of expected task number in the network to
system computation capacity P
). We simulate a spectrum of the system utilization level
by changing the number of MUEs in the network. Figure 14 depicts the impact of the number
of MUEs on the collaborative performance in terms of total system cost. When there are only a
few MUEs, most of the SBSs can use its own computation resource to satisfy the computation
requests. The system is thus a “buyers’ market”. When there is an excessive number of MUEs,
most of the SBSs need extra computation resources. The system is thus a “sellers’ market”. In
both cases, coalitions are difﬁcult to form. The maximum utility gain by collaboration occurs
when the system computation capacity matches the number of MUEs. By allowing collaboration
among SBSs, the spatial workload intensity heterogeneity is mitigated via workload balancing.
In our simulations, the maximum absolute utility gain is achieved at around 50 MUEs and the
maximum relative utility gain (41%) is achieved at around 40 MUEs.
The performance improvement by SBS coalition also depends on how ﬂexibly computation
tasks can be ofﬂoaded. Recall that computation tasks can be either normal tasks or private tasks
that must be processed locally or ofﬂoaded to the remote cloud. Figure 15 shows the impact
of the fraction of the private tasks among the total tasks. As can be seen, a larger utility gain
is achieved at a lower fraction of private tasks because peer ofﬂoading among SBSs is more
ﬂexible. Again the proposed coalition formation algorithm signiﬁcantly reduces the total system
cost and achieves close-to-optimal performance.
In order to evaluate the performance of proposed algorithm over multiple operational slots,
we further simulate a dynamic edge system with random MUE arrival and computation task
arrival; the social trust network is assumed to be observed and updated every 5 slots. The
total task requests received by SBSs are given in Figure 16. With the temporally heterogeneous
computation task requests, the SBSs intermittently switch between “buyer” and “seller” modes.
Figure 17 shows the corresponding system utility gain across 30 operational slots, where each
color block denotes the post-payment utility of an SBS. It can be observed that the system utility
gain is mainly decided by the buyer-seller composition in the edge system. For example in time
slot 23, there is only one “buyer” (SBS 6) in the system and all other SBSs are in the “seller”
mode. In this case, only one coalition {2,6} is formed and a low system utility gain is realized.
By contrast, in time slot 15, a more balanced composition of “seller” and “buyers” is presented,
where buyers have a large demand for computation resource which can be potentially satisﬁed
by the sellers. This motivates the formation of SBS coalitions and hence results in larger system
utility gain.
VI. RELATED WORK
Resource allocation in small cell networks has been widely studied in the literature. For
instance, belief propagation method is applied to manage interference problems in the femtocell
network . Orthogonal bandwidth allocation for femtocells is investigated using fractional
frequency reuse . However, these works only manage communication resources and do not
consider the computing capabilities of SBSs and how SBSs can form a pool of computational
resources while providing radio access service. Computational resource sharing is the main
concern of geographical load balancing techniques originally proposed for data centers to
deal with spatial diversities of workload patterns and electricity prices . However,
conventional clouds manage only computational resources without considering the radio access.
In edge systems, the provisioning of radio access between the SBSs and end users is a critical
design aspect that has a signiﬁcant impact on the system performance. Recently, with SBSs being
considered as a major form of edge devices in the new edge computing paradigm, increasingly
many works start to look at the joint optimization of computation and communication resources
of SBSs , . However, most of these works assume that the coalitions among the SBSs
have already been determined and focus on the ofﬂoading decisions of MUEs. In , ,
computation clusters of SBSs are optimally built by performing joint allocation of radio and
computation resources, focusing on reducing the power consumption and processing complexity.
However, the incentive issue of SBSs is not considered.
Since SBSs are typically developed by individual owners, how to provide SBSs with incentives
to collaborate is key to improving the overall system performance. In , , , incentive
mechanisms based on game theoretic methods are designed to motivate femtocells to adopt
open/hybrid radio access mode, which does not consider the cooperative edge computing. In
 , a double auction mechanism is developed for matching user computation request to a set
of cloudlets. These works consider incentives of SBSs to provide services to end users. Our
paper studies incentives of SBSs to collaborate among each other.
The coalitional game theory is a powerful tool for studying user cooperation problems with
individual incentive issues, which has been widely adopted in various problems, e.g. interference
management , , spectrum sensing and smart grids , . Recently, it is also
introduced in to the collaborative edge computing system for forming Femto-clouds among
individual femtocells. Our considered system differs from this paper in the following aspects.
First, we consider an ultra dense deployment scenario. Therefore, collaboration does not only
occur on the SBS peer ofﬂoading level but also on the MUE-SBS association level. Second, we
consider socially-trusted collaboration by introducing the social trust network. This allows risk
management between any pair of SBSs.
VII. CONCLUSION
In this paper, we investigated collaborative edge computing in a densely-deployed small cell
network, where the SBSs are incentivized to form coalitions and cooperate with SBS peers to
increase system utility. Within the coalitions, buyers and sellers are allowed to cooperate at both
MUE-SBS association stage and SBS peer ofﬂoading stage by exploiting the dense deployment of
SBSs. We developed a distributed coalition formation algorithm based on Merge-and-Split rules.
The proposed algorithm jointly considers SBS operational cost, cloud service fees, and potential
security risks during coalition formation and guarantees the stability of coalitions by following
a payment-based incentive mechanism. Our simulation results show that the collaborative edge
system can dramatically reduce the system cost by more than 40%. Our study not only provides
new guidelines for cooperation among densely deployed edge devices but also delivers important
insights for social trust and security issues in edge cooperation, which deserves more future
investigation in collaborative edge computing systems.