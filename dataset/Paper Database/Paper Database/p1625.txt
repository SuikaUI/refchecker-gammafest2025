Some Studies in Machine Learning Using the Game of Checkers
Some Studies in Machine Learning
Using the Game of Checkers
Arthur L. Samuel
machine-learning
procedures have
been investigated in some detail usi!Jg the game of
checkers. Enough work has been done to verify the fact that a computer can be programmed so that it will
learn to playa better game of checkers than can be played by the person who wrote the program. Furthermore, it can learn to do this in a remarkably short period of time (8 or 10 hours of machine-playing time)
when given only the rules of the game, a sense of direction, and a redundant and incomplete list of
parameters which are thought to have something to do with the game, but whose correct signs and relative
weights are unknown and unspecified. The principles of machine learning verified by these 'experiments
are, of course, applicable to many other situations.
Introduction
The studies reported here have been concerned with the
progr;Jmming of a uigital computer to behave in a way
which. if done by human beings or animals, would be
descrihcu as involving the process of learning. While
this is not thc place to uwell on the importance of machinc-learning proceuures. or to uiscourse on the philosophical aspccts, I there is obviously a very large amount
nf \\'L)rk. now done hy people. which is quite trivial in its
uemanus on the intellect hut does, nevertheless, involve
some learning. We have at our command computers with
adequate data-handling ahility and with sufficient ,computational specd to make use of machine-learning techniqucs. hut our knowledge of the basic principlcs of these
tcchniqucs is still rudimentary. Lacking such knowledge,
it is neccssary to spccify methods of problcm solution in
minute anu
~xact uetaiL a time-consuming and costly
pr0cedurc. Programming computers to learn from experienec shoulu eventual Iv eliminatc the need for much
of this dctailed programm'ing erfort.
Ge/ll'l'lll /llelhodl' of llpproach
At thc outset it might he well to distinguish sharply betwccn two gcncral approaches to thc problem of machine
learning. One method. which might be called the Nellral-
ApproliCh. ueals with the possibility of inducing
learncd hchavior into a randomly connected switching
nct (or its simulation on a digital computer) as a result
of a rewaru-and-punishment
1l1uch Illorc ctlicient approach, is to prouucc the equivalent nf a highly organizeu network which has been designcd tn Icarn nnly certain specific things. The first
Originally published in IBM Journal, Vol. 3, No.3. July, 1959.
method should lead to the dcvelopmcnt of general-purpose learning machines. A comparison between the size
of the switching nets that can be reas,?nably constructed
or simulated at the present time and the size of the neural
nets used by animals, suggests that we have a long way
to go before we obtain practical
devices.~ The second
procedure requires rcprogramming for each new application. but it is capable of realization at the present time.
The experimcnts to be describcd here were based on this
second approach.
Choice of prohlem
For some years the writer has devotcd his spare time to
the subject of machine learning and has concentrated on
the development of learning proccdures as applied to
games.:: A game provides a convenient vehicle for such
study as contrasted with a problem taken from life, since
complications
Checkers. rather than chcss,4-7 was chosen because the
simplicity of its rules permits greater emphasis to be
placed on learning techniques. Regardless of the relative
merits cf the two games as intellectual pastimes, it is fair
to state that checkers contains all of the basic characteristics of an intellectual activity in which heuristic procedures and learning processes can playa major role and
in which these processes can be evaluated.
Some nf these· characteristics might well be enumerated. They are:
(l) The activity must not be deterministic in the practical sense. Therc exists no known algorithm which will
guarantee a win or a draw in checkers, and the complete
Improving the Efficiency of a Problem Solver
explorations of every possible path through a checker
game would involve perhaps
10.111 choices of moves
which. at 3 choices per millimicrosecond. would still take
1O~I centuries to consider.
(2) A definite goal must exist-the winning of the
game-and at least one criterion or intermediate goal
must exist which has' a bearing on the achievement of the
final goal and for which the sign should be known. In
checkers the goal is to deprive the opponent of the possibility of moving, and the dominant criterion is the
number of pieces of each color on the board. The importance of having a known criterion will be discussed
(3) The rules of the activity must be definite and they
should be known. Games satisfy this requirement. Unfortunately, many problems of economic importance do
not. While in principle the determination of the rules can
be a part of the learning process, this is a complication
which might well be left until later.
(4) There should be a background of knowledge concerning the activity against which the learning progress
can be tested.
(5) The activity should be one that is familiar to a
substantial body of people so that the behavior of the
program can be made understandable to them. The
ability to have the program play against human opponents (or antagonists) adds spice to the study and, incidentally, provides a convincing demonstration for those
who do not believe that machines can learn.
Having settled on the game of checkers for our learning studies, we must, of course, first program the computer to play legal check ~rs; that is, we must express the
rules of the game in macl:Jine language and we must arrange for the mechanics. of accepting an opponent's
moves and of reporting the computer's moves, together
with all pertinent data desired by the experimenter. The
ShannonH in 1950 as applied to chess rather than checkers. The basic program used in these experiments is quite
similar to the program described by Strachey9 in 1952.
The availability of a larger and faster machine (the
IBM 704), coupled with many detailed changes in the
programming procedure, leads to a fairly interesting
game being played, even without any learning. The basic
forms of the program will now be described.
The basic checker-playing program
The computer plays by looking ahead a few moves and
by evaluating the resulting board positions much as a
human player might do. Boal d positions are stored by
sets of machine words. four words normally being used
to represent any particular board position. Thirty-two bit
positions (of the 36 available in an IBM 704 word) are,
by convention, assigned to the 32 playing squares on the
checkerboard, and pieces appearing on these squares are
represented by I's appearing in the assigned bit positions
of the corresponding word. "Looking-ahead" is prepared
for by computing all possible next moves, starting with a
given board position. The indicated moves are explored
in turn by producing new hoard-position records corresponding .to the conditions after the move in question
(the old board positions being saved to facilitate a return
to the starting. poinn and the process can be repeated.
This look-ahead procc;dure is carried several moves in
advance, as illustrated in Fig. ·1.. The resulting board pesitions are then scored in terms of their relative value to
the machine.
The standard method of scoring the resulting board
positions has been in terms of a linear polynomial. A
number of schemes of an abstract sort were tried for
evaluating board positions without regard to the usual
checker concepts, but none of these was suecessfuI.IO
One way of looking at the various terms in the scoring
polynomial is that those terms with numerically small
coefficients should measure criteria related as intermediate goals to the criteria measured l'y the larger terms.
The achievement of these intermediate goals indicates
that the machine is going in the right direction, such that
the larger terms win. eventually increJse. If the program
could look far enough ahead we need only ask, "Is the
machine still in' 'the
game?,~J.l Since it cannot look this
far ahead in the usual situation, we must substitute something else, say the piece ratio, and let the machine continue the look-ahead until one side has gained a piece
advantage. But even this is not always possible, so we
have the program test to see if the machine has gained a
positional advantage, et cetera. Numerical measures of
these various properties of the board positions are then
added together (each with an appropriate coefficient
which defines its relative importance) to form the evaluation polynomial.
More 3pecifically, as defined by the rules for checkers,
the dominant scoring parameter is the inability for one
side or the other to move,12 Since this can occur but once
in any game, it is tested for separately and is not included
in the scoring polynomial as tabulated by the computer
during play. The next parameter to be considered is the
relative piece advantage. It is always assumed that it is
to the machine's advantage to reduce the number of the
opponent's pieces as compared to its own. A reversal of
the sign of this. term will, in fact, cause the program to
play "give-away" checkers, and with learning it can only
learn to playa better and better give-away game. Were
the sign of this term not known by the programmer it
could. of course, be determined by tests, but it must be
fixed by the experimenter and, in effect, it is one of the
instructions to the machine defining its task. The numerical computation of the piece advantage has been arranged in such a way as to account for the well-known
property that it is usually to one's advantage to trade
pieces when one is ahead and to avoid trades when
behind. Furthermore, it is assumed that kings are more
valuable than pieces, the relative weights assigned to
them being three to twO. 13 This ratio means that the
program will trade three men for two kings, or two
kings for three men. if by so doing it can obtain some
positional advantage.
Some Studies in Machine Learning Using the Game of Checkers
INITIAL BOARD POSITION ---
A "tree" of moves which might be investigated during the look-ahead procedure. The actual
branchings are much more numerous than those shown, and the "tree" is apt to extend to as many
as 20 levels.
Improving the Efficiency of a Problem Solver
Th~ Chllic~ for
lh~ paralllcl~rs to follow this first
llf th~ scoring polynlllllial and thcir cocllici~nts th~n
Clllll~S a Illatter of concern. Two
~ith~r the
experilll~ntcr can
d~cid~ what these suhseljuent t~rms are to h~. or he can arrange for the program
to make the
s~kction. We will discuss the first case in
some detail in connection with the
rot~-Icarning studies
am! leave for a
lat~r sedion the discussion of various
program methods of
s~lccting parameters and adjusting
their coetlicients.
It is not satisfactory to
s~lect the initial move which
kads to the hoard position with the highest score, since
to reach this position would require the cooperation of
the opponent. Instead. an analysis must he made proceeding
h(/ck \I"(/rd from the evaluated board positions
through the "tree"
of possible moves, each time with
consideration of the intent of the side whose move is
that the opponent would
always attempt to minimize the machine's score while
the machine acts to maximize its score. At each branch
point, then. the corresponding hoard position is given
the score of the hoard position which would result from
the most favorahle move. Carrying this "minimax" procedure hack to the starting point results in the selection
of a "best move." The score of the board position at the
end of the most likely chain is also brought back. and for
learning purposes this score is now assigned to the present board position. This process is shown in Fig. 2. The
best move is executed, reported on the console lights.
and tabulated by the printer.
The opponent is then permitted to make his move,
which can be communicated to the machine either by
means of console switches or by means of punched
cards. The computer verifies the legality of the opponent's move, rejecting l-I or accepting it, and the process
is repeated. \Vhen the program can look ahead and predict a win, this fact is reported on the printer. Similarly,
the program concedes when it sees that it is going to
Ply lilllilatiolls
Playing-time considerations make it necessary to limit
the look-ahead distance to some fairly small value. This
distance is defined as the ply (a ply of 2. consisting of
one proposed move hy the machine and the anticipated
reply by the opponent). Th~ ply is not fixed hut depends
upon the dynamics of the situation. and it varies from
move to move and from branch to branch during the
move analysis. A great many schemes of adjusting the
look-ahead distance have been tried at various times,
some of them quite complicated. The most effective one.
although quite detailed. is simple in concept and is as
follows. The program always looks ahead a minimum
Llistance. which for the op~ning game and without learning is usually set at three moves. At this minimum ply
the program will evaluate the boarLl position if none of
the following conditions llCCurS: (I) the next move is a
jump. (2) the last move was a jump. or (3) an exchange
olIcr is possihk. If any on~ of these conditions exists. the
program continues looking aheaLl. At a ply of 4 the
program will stop and evaluate the resulting board position if conditions (I) and (3) ahove arc not met. At a ply
of 5 or greater. the program stops the look-ahead whenever the next ply level docs not offer a jump. At a ply
of I I or greater. the 'program will terminate the lookaheaLl. even if the next move i,;"to he a jump, should one
siLle at this time be ahead by more than two kings (to
prevent the needless exploration of obviously losing or
winning sequences), The program stops at a ply of 20
regardkss of all conditions (since the memory space for
the look-ahead moves is then exhausted) and an adjustment in score is made to allow for the pending jump.
Finally. an adjustment is made in the levels of the break
points between the different conditions when time is
saved through rotc learning (see below) and when the
total number of pieces on the board falls below an arbitrary number. All break points are determined by single
data words which can be changed at any time by manual
intervention.
This tying of the' ply with board conditions achieves
three desired
re~ults. In the first place. it permits board
evaluations to be· made und'cr conditions of relative stability for so-called dead positions. as defined by Turing.l~
Secondly, it causes greater surveillance of those paths
which offer better opportunities for gaining or losing an
advantage. Finally, since branching is usually seriously
restricted by a jump situation. the total number of board
positions and moves to be considered is still held down
to a reasonable number and is more equitably distributed
between the various
pos~ible initial moves.
As a practical maller, machine-playing time usually
has heen limited to appro;.:imately 3D seconds per move.
table-lookup
procedures.
searching procedures, and a variety of new programming
tricks were developed, and full use was made of all of the
resources of the IBM 704 to increase the operating speed
as much as possible. One can, of course, set the playing
time at any desired value by adjustments of the permitted
ply; too small a ply results in a bad game and too large
a ply makes the game unduly costly in terms of machine
Other modes of play
For study purposes the program was written to accommodate several variations of this basic plan. One of these
permits the program to play against itself. that is. to play
both sides of the game. This mode of play has been
found to be especiaJly good during the early stages of
The program can also follow book games presented to
it either on cards or on magnetic tape. When operating
in this mode. the program lkcides at each point in the
game on its ncxt move in the usual way and rcports this
proposeLl move. Instead of actually making this move.
the program refers to the
~torcd record of a book game
and makes the book move. The program
r~cords its
evaluation of the two moves. and it also counts and reports the number of possible moves which the program
Some Studies in Machine Learning Using the Game of Checkers
MACHINE CHOOSES BRANCH
WITH LARGEST SCORE
OPPONENT EXPECTfD
TO CHOOSE BRANCH
SMALLEST SCORE
MACHINE CHOOSES BRANCH
WI TH MOST POSI TI VE SCORE
PLY NUMBERCD
EVALUATIONS MADE
AT THIS LEVEL
Simplified diagram showing how the evaluations are backed-up through the "tree" of possible
moves to arrive at the best next move. The evaluation process starts at @.
rates as being better than the book move and th~ number
it rates as being poorer. The sides are then reversed and
the process is repeated. At the end of a book game a corrdation coefficient is computed, relating the machine's
indicated moves to those moves adjudged best by the
checker masters.!!;
It should be noted that the emphasis throughout all of
these studies has
learning techniques.
temptation to improve the machine's game by giving it
standard openings or other man-generated knowledge of
playing techniques has been consistently resisted. Even
when book games are played, no weight is given to the
fact that the moves as listed are presumably the best possible moves under the circumstances.
For demonstration purposes, and also as a means of
avoiding lost machine time while an opponent is thinking. it is sometimes convenient to play several simultaneous games against different opponents. With the
program in its present .form the most convenient numher for this purpose has been found to be six, although
eight have been played on a number of occasions.
Games may be started with any initial configuration
fllr the hoard position so that the program may be tested
lIn end games. checkcr puzzles. et cetera. For nonstandani starting conditions, the program lists the initial piece
arrangement. From time to time, and at the end of each
game. the program also tabulates various bits of statistical information which assist in the evaluation of playing
performance.
Numerous other features have also been added to
make the program convenient to operate (for details see
Appendix A), but these have no direct bearing on the
problem of learning, to which we will now turn our
attention.
Rote learning and its variants
Perhaps the most elementary type of learning worth discussing would be a form of rote learning in which the
program simply saved all of the board positions encountered during play, together with their computed
scores. Reference could then be made to this memory
record and a certain amount of computing time might
be saved. This can hardly be called a very advanced
form of learning; nevertheless, if the program then utilizes the saved time to compute further in depth it will
improve with time.
Fortunately, the ability to store board information at
a ply of 0 and to look up boards at a larger ply provides
the possibility of looking much farther in advance than
might otherwise be possible. To understand this, consider a very simple case where the look-ahead is always
terminated at a fixed ply, say 3. Assume further that the
program saves only the board positions encountered
during the actual play with their associated backed-up
Improving the Efficiency of a Problem Solver
scorcs. Now it is this list of previous board positions that
is used to look up board positions while at a ply lev"cl of
J in the suhsequent games. If a board position is ("ound,
its score has, in clIeet. already been backed up by three
levels. and if it hecomes etrective in determining the
move to be made. it is a .(i-ply score rather than a simple
J-ply score. This new initial board position with its (i-ply
score is, in turn, saved and "(t may be encountered in a
future game and the score backed up by an additional
set of three levels, et cetera. This procedure is illustrated
in Fig. 3. The incorporation of this variation. together
with the simpler rotc-learning feature. results in a fairly
powerful learning technique which has been studied in
some detail.
Several additional features had to be incorporated into
the program before it was practical to embark on learning studies using this storage scheme. In the first place,
it was necessary to impart a sense of direction to the program in order to force it to press on toward a win. To
illustrate this, consider the situati9n of two kings against
one king, which is a winning combination for practically
all variations in board positions. In time, the program
can be assumed to have stored all of these variations,
each associated with a winning score. Now. if such a
situation is encountered, the program will look ahead
along all possible paths and each path will lead to a winning combination, in spite of the fact that only one of
the possible initial moves may be along the direct path
toward the win while all of the rest may be wasting time.
How is the program to differentiate between these?
A good solution is to keep a record of the ply value of
the ditrerent board positions at all times and to make a
further choice between board positions on this basis. If
ahead. the program can be arranged to push directly
toward the win while. if behind, it can be arranged to
adopt delaying' tactics. The most recent method used is
to carry the effective ply along with the score by simply
decreasing the magnitude of the score a small amount
each time it is backed-up a ply level during the analyses.
If the program is now faced with a choice of board positions whose scores differ only by the ply number, it will
automatically
advantageous
choosing a low-ply alternative if winning and a high-ply
alternative if losing. The significance of this concept of a
direction sense should not be overlooked. Even without
"learning," it is very important. Several of the early attempts at learning failed because the direction sense was
not properly taken into account.
• Cawloging lind culling stored inlormatioll
Since practical considerations limit the number of board
positions which can be saved, and since the time to
search through those that are saved can easily become
unduly long. one must devisG systems (I) to catalog
hoards that arc saved. (2) to delete redundancies. and
(3) to discard board positions which are not believed to
he of much value. The most effective cataloging system
found to date starts hy standardizing all board positions.
first by reversing the pieces and piece positions if it is a
board POSItion in which White is to move. so that all
boards are reported as if it were Black's turn to move.
This reduces by nearly a factor of two the numher of
boards which must be saved. Board positions. in which
all of the pieces 'are kings, can be reflected about the
diagonals with a possible fourfold reduction in the number which must be saved. A more' compact board representation than the one employed during play is also used
so as to minimize the storage requirements.
After the board positions are standardized. they are
grouped into records on the basis of (I) the number of
pieces on the board, (2) the presence or absence of a
piece advantage, (3) the side possessing this advantage,
(4) the presence or absence of kings on the board.:(5) the
side having the so-called "move," or .opposition advantage, and finally (6) the first moments of the pieces about
normal and diagonal axes through the board. During
play, newly acquired board positions are saved in the
memory until a reasonable number have been accumulated. and they are then merged with those on the "memory tape" and a new memory tape is produced. Board
positions within a .record are listed in a serial fashion,
being sorted with respect to the" words which define them.
The records are arranged on the tape in the order that
they are most likely to be needed during the course of a
game; board positions with 12 pieces to a side coming
first, et cetera. This method of cataloging is very important because it cuts tape-searching time to a minimum.
Reference must be made. of course. to the board positions already saved, and this is done by reading the correct record into the memory ane searching through it by
a dichotomous search procedure. Usually five or more
records are held in memory at on\~ time. the exact number at any time depending upon the lengths of the particular records in question. Normally, the program calls
three or four new records into memory during each new
move, making room for them as needed, by discarding
the records which have been held the longest.
Two different procedures have been found to be of
value in limiting the number of board positions that are
saved; one based on the frequency of use. and the second on the ply. To keep track of the frequency of use,
an age term is carried along with the score. Each new
board position to be saved is arbitrarily assigned an age.
When reference is made to a stored board position,
either to update its score or to utilize it in the lookahead procedure, the age recorded for this board position
is divided by two. This is called
relre~·hing. Offsetting
this, each board position is automatically aged by one
unit at the memory merge times (normally occurring
about once every 20 moves). When the age of anyone
board position reaches an arbitrary maximum value this
hoard position is expunged from the
r~cord. This is a
form of lorgelling. New board positions which remain
unused arc soon forgotten. while board positions which
arc used several times in succession will be refreshed to
such an extent that they will be remembered even if not
used thereafter for a fairly long period of time. This form
of refreshing and forgetting was adopted on the basis of
Some Studies in Machine Learning Using the Game of Checkers
PLY NUMBER
..........~.
EVALUATIONS WOULD NORMALLY
THIS LEVEL
PREVIOUS EVALUATION
Simplified representation of the rote-learning process, in which information saved from a previous game is used to increase the effective ply of the .backed-up score.
retlections as to the frailty of human memories. It has
proven to be very effective.
In addition to the limitations imposed by forgetting, it
seemed desirable to place a restriction on the maximum
size of anyone record. Whenever an arbitrary limit is
reached. enough of the lowest-ply board positions are
automatically culled from the record to bring the size
well hclow the maximum.
Before embarking o~ a study of the learning capahilities of the system as just described, it was, of course,
first necessary to fix the terms and coefficients in the
evaluation polynomial. To do this, a number of different
sets of values were tested by playing through a series
. of hook games ami computing the move correlation coefficients. These values varied from 0.2 for the poorest
polynomial tested, to approximately 0.6 for the one
finally adopted. The selected polynomial contained four
terms (as contrasted with the use of 16 terms in later
experiments). In decreasing order of importance these
were: (l) piece advantage, (2) denial of occupancy,
(3) mobility, and (4) a hybrid term which combined control of the center and piece advancement.
• Rote-learning tests
After a scoring polynomial was arbitrarily picked, a series
of games was played, both self-play and play against
many different individuals (several of these being checker masters). Many book games were also followed, some
improving the Efficiency of a Problem Solver
of these heing end games. The program lcarnel1 to 'play
a very good opening game and to recognize most win- ,
ning and losing end positions many moves in advanc.:,
although its midgame play was not greatly improved.
now qualifies as a
hetter-thanaverage novice. but definitely not as an expert.
At the present time the ,IJlemory tape contains something over 53.000 board positions (averaging 3.X words
each) which have been selected from
a much larger
numher of positions by means of the culling techniques
described. While this is still far from the number which
would tax the listing and searching procedures used in
the program, rough estimates. based on the frequency
with which the saved boards are utilized during normal
play (these figures being tabulated automatically), indicate that a library tape containing at least 20 times the
present number of board positions would he needed to
improve the midgame play significantly. At the present
rate of acquisition of new positions this would require
inordinate amount of play and, consequently. of
machine timeY'
The general conclusions which can be drawn from
these tests are that:
(I) An effective rote-learning technique must include
a procedure to give the program a sense of direction.
and it must contain a refined system for cataloging and
storing information.
(2) Rote-learning procedures can be use'd etlectively
on machines
data-handling capacity of the
IBM 704 if the information which must be saved and
searched docs not occupy more than, wugh1v. one million words, and if not more than llne hundred or so references need to be made to this informatil'n per minute.
These figures are, of course. highly dependent upon the
exact etnciency of cataloging which can be a-:hieved.
(3) Thy game of checkers. when played with a simple
scoring scheme and with rote learning only, requires
more than this number of words for master cal iber of
play and. as a consequence. is not completely amenable
to this treatment on the 18i\'1 70-L
(4) A game, such as checkers. is a suitable vehicle for
use during the development of learning techniques. and
it is a very satisfactory device for demonstrating machine-learning procedures to the unbelieving.
Learning procedure involving generalizations
An obvious way to decrease
the amount of storage
needed to utilize past experience is to gen~ralize on the
hasis of cxperience and to save nnly the generalizatil1ns.
This should. of course. be a continulllis process if it is to
be truly e1fective. and it slllluld in\'l1lve se\'cral levels nf
abstractillll. A start has been made in this direction by
having the program select a subsL,t llf possible terms for
use in the evaluation polyllllJllial and by having the program determine the sign and
ma~nitllde llf the cnl'llicients which multiply these paran1L'ters. i\t the present
time this subset consists of /(, tL'nn, c1lllsen frllm a list
of JX parameters. The piece-advantage term needed to
define the task is computed separately anJ. of course. is
not altered hy the program.
After a number of relatively unsuccessful attempts to
havc thc program generalize while playing both sides of
the gamc. the program was arranged to act as two diffe..~nt players, for convenience called A Iplw and BetG.
Alph,~ gcneralizes on its experiertce after each m~ve bv
adjustin~ the coefficients in its evaluation polynomial and
hy replacinb terms which appear to be unilTlPortant by
new parametel ~ drawn from a reserve list. Beta. on the
contrary, uses
th~ same evaluation polynomial for the
duration of any ont: game. Program Alpha is used to
opponents.
Alpha and Beta play each other.
At the end of each self-play game a determination is
made of the relative playing ability of Alpha, as compared with Beta, by a neutral portion of the program. If
Alpha wins-or is adjudged to be ahead when a game is
otherwise terminated-the then current scoring system
used by Alpha is given to Beta. If, on the other hand,
Beta wins or is ahead; this fact is recorded as a blackmark for Alpha. 'Yhenever Alpha receives an arbitrary
number of black marks (usu'rrlly set at three) it is assumed to be on the wrong track. and a fairly drastic and
arbitrary change is made in its scoring polynomial (by
reducing the coefficient of the leading term to zero).
This action is necessary on occasion, since the entire
learning process is an attempt to find the highest point
in multidimensional scoring space in the presence of
many secondary maxima on which the program can
become trapped. By manual intervention it is possible to
return to some previous condition or make some other
change if it becomes apparent that the learning process
is not functioning properly. In general, however, the
program seeks to extricate itself from traps and to improve more or less continuously.
The capability of the program can be tested at any
time by having Alpha play one or more book games
(with the learning procedure temporarily immobilized)
and by correlating its play with the recommendations of
the masters or. more interestingly, by pitting it against
a human player.
Polynomial modification procedure
~ f Alpha is to make changes in its scoring polynomial.
It must be given some trustworthy criteria for measurin a
performance. A logical difficulty presents itself, sinc;
the only measuring parameter available is this same
scoring polynomial that the process is desi!!ned to improve. Recourse is had to the peculiar pro;erty of the
look-ahead procedure. which makes it less important for
polynomial
particularlv
further ahead the process is continued.
Thi~ means that
one can evaluate the relative change in the positions of
two players, when this evaluation is made over a fairly
large number of moves, by using a scoring system which
is much too gross to be significant on a move-Iw-move
Perhaps an even better way of looking at the matter
Some Studies in Machine Learning Using the Game of Checkers
is that we arc attempting to make the score, calculatet!
for the current boart! position. look like that calculated
for the terminal hoard position of the chain of moves
which most probably will occur t!uring actual play. Of
course, if one coult! t!evelop a perfect system of this sort
it would be the equivalent of always looking ahead to
the end of the game. The nearer this it!eal is approachet!,
the better would be the
In order to obtain a sufficiently large span to make use
of this characteristic, Alpha keeps a record of the apparent goodness of its board positions as the game progresses. This record is kept by computing the scoring
polyno'mial for each board position encountered in actual
play and by saving this polynomial in its entirety. At the
same time, Alpha also computes the backed-up score for
all board positions, using the look-ahead procedure described earlier. At each play by Alpha the initial board
score, as saved from the previous Alpha move, is compared with the backed-up score for the current position.
The difference between these scores, defined as delta, is
used to check the scoring polynomial. If delta is positive
it is reasonable to assume that the initial board evaluation was in error and terms which contributed positively
shoult! have been given more weight, while those that
contributed
negatively
weight. A converse statement can be made for the case
where delta is negative. Presumably, in this case, either
the initial board evaluation was incorrect, or a wrong
choice of moves was made, and greater weight should
have been given to terms making negative contributions,
with less \veight to positive terms. These changes are
not made directly but are brought about in an involved
way which will now be described.
i\ record is kept of the correlation existing between
the signs of the individual term contributions in the initial sCl)rii1g polynomial and the sign of delta. After each
play an adjustment is made in the values of the correlation cl)ellicients, due account being taken of the number
of times that each particular term has been used and has
hat! a nonzero value. The coefficient for the polynomial
term (other than the piece-advantage term) with the then
largest correlation coefficient is set at a prescribed maximum value with proportionate values determined for all
of the remaining coefficients. Actually, the term coefficients arc fi:\et! at integral powers of 2, this power being
t!efined by the ratio of the correlation coefficients. More
precisely, if the ratio oCtwo correlation coefficients is
equal to or larger than n hut less than Il+ I, where n is
an integer. then the ratio of the two term coefficients is
set equal to 2". This procedure was adopted in order to
increase the range
in values of the term coefficients.
\Vhenever a correlation-coefficient calculation leads to a
negative sign, a corresponding reversal is made in the
sign associated with the term itself.
IIl.l'w!>ilitie.\'
It should he noted that the span of moves over which
delta is computet! consists of a remembered part and an
anticipated portion. During the remembered play, use
had been made of Alpha's current scoring polynomial to
determine Alpha's moves but not to determine the opponent's moves, while during the anticipation play the
moves for hoth sides are made using Alpha's scoring
polynomial. One is tempted to increase the sensitivity of
delta as an indicator of change by increasing the span of
the remembered portion. This has been found to be
dangerous since the coefficients in the evaluation polynomial and, indeed. the terms themselves, may change
between the time of the remembered evaluation and the
time at which the anticipation evaluation is made, As a
matter of fact, this difficulty is present even for a span
of one move-pair. It is necessary to recompute the scoring polynomial for a given initial board position after a
move has been determined and after the indicated
rections in the scoring polynomial have been made, and
to save this score for future comparisons, rather than to
save the score used to determine the move. This may
seem a trivial point, but its neglect in the initial stages
of these experiments led to oscillations quite analogous
to the instability inouced iri electrical circuits by long
delays in a feedback loop.
As a means of stabilizing against 'minor variations in
the delta values, an arbitrary minimum value was set,
and when delta fell below this minimum for any particular move no change was made in the polynomial.
This same minimum value is used to set limits for the
initial board evaluation score to decide whether or not
it will be assumed to be zero. This minimum is recomputed each time and, normally, has been fixed at the
average value of the coefficients for the terms in the currently existing evaluation polynomial.
Still another type of instability can occur whenever
a new term is introduced into the scoring polynomial.
Obviously, after only a single move the correlation coefficient of this new term will have a magnitude of 1, even
though it might go to 0 after the very next move. To
prevent violent fluctuations due to this cause, the correlation coefficients for newly introduced terms are computed as if these terms had already been used several
times and had been found to have a zero correlation coefficient. This is done by replacing the times-used numb
III the calculation by an arbitrary number (usually
set at 16) until the usage does, in fact, equal this number.
After a term has been in use for some time, quite the
opposite action is desired so that the more recent experience can outweigh earlier results. This is achieved, together with a substantial reduction in calculation time,
by using powers of 2 in place of the actual times-used
and by limiting the maximum power that is used. To be
specific, at any stage of play defined as the Nth move,
corrections to the values of the correlation coefficients
Cx are made using 16 for N until N equals 32, whereupon 32 is used until N equals 64, et cetera, using the
and a value for N larger than 256 is never used.
After a minimum was set for delta it seemed reasona-
Improving the Efficiency of a Problem Solver
hie to attach greater weight to situations leading to large
values of tlelta. Accortlingly, two atltlitional categories
are ddinetl. If a contrihution to tlelta is matle hy the first
term. meaning that a change has occurred in the piece
ratio. the indicatetl changes in the correlation coetlicients
arc tloubled, while .if the value of tlelta is so large as to
indicate that an almost sure win or lose will result. the
elfect on the correlation"~oefficientsis quadrupled.
Term replacemellt
;\o[ention has been made several times of the procedure
for replacing terms in the scoring polynomial. The program. as it is currently running, contains 38 different
terms (in addition to the piece-advantage term), 16 of
·these being included in the scoring polynomial at anyone
time and the remaining 22 being kept in reserve. After
each move a low-term tally is recorded against that active
term which has the lowest correlation coefficient and, at
the same time, a test is made to see if this brings its tally
count up to some arbitrary limit, usually set at 8. When
this limit is reached for any specific term. this term is
transferred to the bottom of the reserve list, and it is re-
. placed by a term from the head of the reserve Jist. This
new term enters the polynomial with zero values for
correlation
coefficient.
count. On the average, then, an active term is replaced
once each eight moves and the replaced terms are given
another chance after 176 moves. As a check on the effectiveness of this procedure, the program reports on
the usage which has accrued against each discarded term.
Terms which are repeatedly rejected after a minimum
amount of usage can be removed and replaced with completely new terms.
It might be argued that this procedure of having the
program select terms for the evaluation polynomial from
a supplied list is much too simple and that the program
should generate the terms for itself. Unfortunately, no
satisfactory scheme for doing this has yet been devised.
With a man-generated list one might at least ask that
the terms be members of an orthogonal set, assuming
that this has some meaning as applied to the evaluation
of a checker position. Apparently, no one knows enough
about checkers to define such a set. The only practical
solution seems to he that of including a relatively large
number of possible terms in the hope that all of the
contributing parameters
get covered
though in an involved and redundant way. This is not
an undesirable state of atfairs, however, since it simulates
the situation which is likely to exist when an attempt is
made to apply similar learning techniques to real-life
situations.
:-'1any of the terms in the existing list arc related in
some vague way to the parameters used by checker experts.
Some of the
concepts which
checker experts
appear to use have elutled the writer's attempts at definition, and he has heen unable to program them. Some
of the terms are quite unrelated to the usual checker
lore and have been discovered more or less by accident.
The second moment ahout the diagonal axis through the
double corners is an example. Twenty-seven tlilferent
simple terms are now in use, the rest being com hi national
terms. as will he described later.
A word might be said about these terms with respect
to the exact' way in which they arc definetl and the
general procedures used for their evaluation. Each term
relates to the relative
standi~gs of the two sides. with
respect to the parameter in question, and it is numerically equal to the difference hetween the ratings for the
individual sides. A reversal of the. sigh obviously corresponds to a change of sides. As a further means of
insuring symmetry the individual ratings of the respective sides are determined at corresponding times in the
playas viewed by the side in question. for example,
consider a parameter which relates to the board conditions as left after one side has moved. The rating of
Black for such a parameter would be made after Black
had moved, and the rating of White would not be made
until after White had moved. During anticipation play,
these individual ratings are made after each move and
saved for future reference. When an evaluation is desired the progrm)1 takes the differences between the most
recent ratings and those mane a move earlier. In general,
an attempt has been made to define all parameters so
that the individual-side ratings are expressible as small
positive integers.
Binary connecti!'e terms
In addition to the simple terms of the type just described,
a number of combinational terms have been introduced.
Without these terms the
s.~oring polynomial would, of
course, be linear. A number of different ways of introducing nonlinear terms have been devised but only one
of these has been tested in any detail. This scheme provides terms which have some of the properties of binarv
logical connectives. Four such terms are formed fo'r
each pair of simple terms which are to be related. This
is done by making an arbitrary division of the range in
values for each of the simple terms and assigning the
binary values of 0 and 1 to these ranges. Since most of
the simple terms are symmetrical about 0, this is easilv
done on a sign basis. The new terms are then of
form A-B, A-B, A-B. and A-8, yielding values either of'
I. These terms are introduced into the scorina
polynomial with adjustable coefficients and si!.!ns, and
are thereafter indistinguishable from the other t~rms.
As it would require some 1404 such combinational
terms to interrelate the 27 simple terms originallv used.
it was fountl desirable to limit the actual
nlln~ber of
combinational terms used at anyone time to a small
fraction of these and to introduce new terms onlv as it
became possible to retire older inetfectual
tcrm~. The
terms actually used are given in Appendix C.
Preliminary leamiflg-hy-geflerali;;ariofl tests
An idea of the learning ability of this procedure can he
gained by analyzing an initial test series of 28 !.!amesUl
played with the program just described. At the ~tart an
arbitrary selection of 16 terms was chosen and all terms
Some Studies in Machine Learning Using the Game of Checkers
were assigned equal weights. During the first 14 games
Alpha was assigned the White side, with Beta constrained as to its first move (two cycles of the seven
different initial moves). Thereafter, Alpha was assigned
Black and White alternately. During this time a total
of 29 different terms was dis·carded and replaced, the
majority of these on two different- occasions.
Certain other figures obtained during these 2S games
~Ire of interest. At frequent intervals the program lists
the 12 leading terms in Alpha's scoring polynomial with
their correlation coefficients and a running count of the
number of times these coefficients have been altered.
Based on these samplings, one observes that at least 20
different terms were assigned the largest coefficient at
some time or other, some of these alternating with other
terms a number of times, and two even reappearing at
the top of the list with their signs reversed. While these
variations were more violent at the start of the series
of games and decreased as time went on, their presence
indicated that the learning procedure was still not completely stable. During the first seven games there were
at least 14 changes in occupancy at the top of the list
involving 10 different terms. Alpha won three of these
gamcs and lost four. The quality of the play was extrcmely poor. During the next seven games there were
at least eight changes made in the top listing involving
live different terms. Alpha lost the first of these games
and won the next six. Quality of play improved steadily
hut the machine still played rather badly. During Games
15 through 11 there were eight changes in the top listing
involving five
Alpha winning five g;,mes and
losing two.
amateur players who
played the machine during this period agreed that it
lI'as "triek~' but beatable". During Games 22 through 28
there \\'ere at least four changes involving three terms.
Alpha \\'on two games and lost five. The program appeared to be approaching a quality of play which caused
it to he described as "a better-than-average player". A
detailed ~Inalysis of these results indicated that the learning procedure did work and that the rate of learning
\\as surprisingly high, but that the learning was quite
erratic and none too stable.
• Second series oj tests
Some of the more obvious reasons for this erratic
hehavior in the first series of tests have been identified.
The program was modified in several respects to
prOve the situation, and additional tests were made. Four
l\f these modifications are important enough to justify a
uetaileu explanation.
In the first place, the program was frequently fooled
hy bad play on the part of its opponent. A simple solution was to chan!!e the correlation coefficients less drastically when delta was positive than when delta was
negative. The procedure finally adopted for the positive
delta case was to make corrections to selected terms in
the polynomial only. When the scoring polynomial was
Positive. changes were made to coefficients associated
lVith the negatively contributing terms, and when the
polynomial was negative, changes were made to the coefficients associated with positively contributing terms.
No changes were made to coefficients associated with
terms which happened to. be zero. For the negative delta
case, changes were made to the coefficients of all contributing terms, just as before.
A second defect seemed to be connected with the
too frequent introduction of new terms into the scoring
polynomial and the tendency for these new terms to
assume dominant positions on the basis.·of insufficient
evidence. This was remedied by the simple expedient
of decreasing the rate of introduction of new terms
from one every eight moves to one every 32 moves.
The third defect had to do with the complete exclusion
consideration of many
board positions
encountereq during play by reason of the minimum
limit on delta. This resulted in the misassignment of
credit to those board positions which permitted spectacular moves when the credit rightfully belonged to
earlier board positions which. had permitted the necessary groundlaying moves. Although no precise way has
yet been devised to insu,e the corr:ect assignment of
credit, a very simple expedient was found to be most
effective in minimizing the adverse effects of earlier
assignments. This expedient was to allow the span of
remembered moves, over which delta is computed, to
increase until delta exceeded the arbitrary minimum
value, and then to apply the corrections to the coefficients as dictated by the terms in the retained polynomial for this earlier board position. In this case, the
difficulty which was mentioned in the section on Instabilities in connection with an arbitrary increase in
span, does not occur after each correction, since no
changes are made in the coefficients of the scoring
polynomial as long as delta is below the minimum value.
Of course, whenever delta does exceed the minimum
value the program must then recompute the initial scoring polynomial for the then current board position and
so restart the procedure with a span of a single remembered move-pair. This over-all procedure rectifies the
defect of assigning credit to a board position that lies
too far along the move chain, but it introduces the
possibility of assigning credit to' a board position that
is not far enough along.
As a partial expedient to compensate for this newly
introduced danger, a change was made in the initial
board evaluatio·n. Instead of evaluating the initial board
positions directly, as was done before, a standard but
rudimentary tree-search (terminated after the first nonjump move) was used. Errors due to impending jump
situations were eliminated by this procedure, and because of the greater accuracy of the evaluation it was
possible to reouee the minimum delta limit by a small
F.inally, to avoid the danger of having Beta adopt
Alpha's polynomial as a result of a chance win on
Alpha's part (or perhaps a situation in which Alpha
had allowed its polynomial to degenerate after an early
or midgame advantage had been gained), it was decided
Improving the Efficiency of a Problem Solver
to re4uire a majority of wins on Alpha's p;u I before
Jkta would aLlopt Alpba's scoring polynomial.
\Vith these mollifications, a new series of
t,~,>ts was
maLIc. In order to reduce tbe learning time, the initial
selection of terms was made on the hasis of tl,,; results
ohtaineLl during the carl ier tests, but no allent ion was
paid to their previously assigned weights.
In contrast
with the earlier erratic behavior, the revised prol~ram appeared to be extremely stahle, perhaps at the ex pense of
a somewhat lower initial learning rate. The way in which
the character of the evaluation polynomial altered as
learning progresseLl is shown in Fig. 4.
The most obvious change in behavior was in regard
to the relative number of games won hy Alpha ;,nd the
prevalence of draws. During the first 2H game'> of the
earlier series Alpha won
16 and lost
12. The eorresponding figures for the first 2M games of the neW series
were 18 won by Alpha, and four lost, with six draws.
In all cases the names were terminated, if not finished,
in 70 moves and'"a judgment made in terms of tIll; final
p:>sitions. Unfortunately, these ligures arc not
comparable because of the decreased
which Beta adopted Alpha's polynomial during the ,ccond
series, both by design and hecause a programming crror
immobilized the adoption procedure during part of the
tests. Nevertheless, the great decrease in the nUlllhcr of
losses and the prevalence of draws seemed to indicate
that the learning process was much more stable. Some
typical games from this second series arc given in Appendix B.
As learning proceeds, it should become harder and
harder for Alpha .to improve its game, and one would
expect the number of wins hy Alpha to decrease with
time. If secondary maxima
in scoring space arc encountered, one might even find siluations in which /\Ipha
wins less than half of the games. With Beta at such a
minor change
polynlJlllial
would result in a degradation of ils play, and' several
oscillations about
might occur
Alpha landed at a point which WlHlll1 enable it to heat
Beta. Some evidence of this trend is discernible in Ihe
play, although many more games \\ill have 10 he I'I;p,ed
before it can be ohserved with certainty.
The tentative conclusions which can be drawn InJlll
these tests are:
(I) A simple generalization Schl'1l1e of the typl' hne
used can be an effective learning device for pn1hll'nls
amenable to tree-searching procedures.
(2) The memory requirements llf such schemes ;Ire
quite modest and remain fixed with time.
(3) The operating times arc abll n:asonahle and rl'main fixed. independent of the anll11ll1t of al'l'umulall'd
(4) Incipient forms of instabilil\' in the s"IUlilHl l';lIl
he expected hut, at least for Ihe chl'l'ker pr"gralll. Illl'w
can be dealt with hy quite straighlf,l['ward pnlcl'lhlll·S .
(5) Even with the ineolllplete and redundant sl'l Ilf
parameters which have been used III date. it is Pllssihle
for the computer to learn to play
bl'tter-than-a\'l'r;l~e
game of checkers in a relatively short period 01 time.
As a final precautionary note, it should be stateLl that
these experiments have not encompassed a sulliciently
large series of games to demonstrate
unamhil!uouslv
that the learning procedure is completely stable -or th;t
it will necessarily lend to the best possible choice of
parameters and coetlicients.' .
Rote learning vs. generalization
Some interesting comparisons can he niade between the
playing style developed hy the learning-by-generalization
program and that developed by the carl ier rotc-learning
procedure. The program with rote learning soon learned
to imitate master play during the opening moves. It was
always quite poor during the middle game, b~t it easily
learned how to avoid most of the obvious traps during
end-game play and could usually drive on toward a win
when left with a piece advantage. The program with the
generalization procedure has never learned to play in
a conventional manner and its openings are apt to be
weak. On the other hand. it soon learned to play a
good middle game: and with a piece advantage it usually
polishes off its -opponent' in short order. Interestingly
enough, after 28 games it had still not learned how to
end game with
kings against one in a
double corner.
Apparently,
greatest help,
either under conditions when the results of any specific
action are long delayed, or in those situations where
highly specialized techniques are required. Contrasting
with this, the generalization proceG'Jre is most helpful
in situations in which the available permutations of conditions are large in number and when the consequences
of any specific action 'are not long delayed.
•. Procedures i/ll'oll'ing both forms of learning
The next obvious step is to combine the better features
rote-learning
generalization
scheme. This must be done with some care, since it is
not practical to update the previously saved information
after every change in the evaluation polynomial. A compromise solution might be to save only a very limited
amount of information during the early stages of learning and to increase the amount as warranted by the
increasing stability of the evaluation
coetlicient
learning. For example, the program could he arranged
to save only the piece-advantage term at the start. -At
some stage in the learning process the next term could
be added. perhaps when no change had been made in
the parameter used for this tern; during some fairlv
long period, say for three complete games~ If and whe~
the program is able to play an additional perioLl without
changes in the next parameter, this could also be added.
et cetera. \Vhenever a change does occur in a parameter
previously
tape could be reviewed, all terms involving the changed
parameter and those lower on the
list could
expunged, and the program could drop hack to the earlier
condition with respect to its term-saving schedule.
Some Studies in Machine Learning Using the Game of Checkers
Improving the Efficiency of a Problem Solver
Another solution woulll hc to utilize the generalization scheme alone until it hall hecomc fairly stable and
to introduce rote learning at this time. It is, of course,
perfectly feasible to salvage much of the learning which
has been accumulated by both of the programs studicd
to date. This could be done hy appending an abridged
form of the present mcmory tape ,to the generalization
scheme in its present stage of learning and by proceeding from
in accordance with the first solution
proposed above.
Future development
While it is believed that these tests have reached the
stage of diminishing returns, some effort might well be
expended in an attempt to get the program to generate
its own parameters for the evaluation polynomial. Lacking
procedure,
possible to generate terms .based on theories as proposed
hy students of the game. This procedure would be at
variance with the writer's previous philosophy, but it is
Footnotes and References
Some of these are quite profound and have a bearing on
the questions raised by Nelson Goodman in Fact, Fictiol/ I/I/d Fnrecas has compared the
lligllal computer 10 the nervous system of a flatworm.
T() extend this comparison to the situation under discussion would he unfair to the worm since its nervous
system is a':lLlally quite highly organ'ized as compared
WIth the random-net studies by B. G. Farley and W. A.
\..··Simulation
Self-Organizing Systems
Digital Computers," IRE PGIT 4,
N. Ro.:hester, J. H. Holland, L. H. Haibt and W. L.
Duda 5 and demonstrated on television on February
2-1. 1956.
C. E. ~hannon. "Programming a Computer for Playing
PllIl. Mag. 41, 256 .
1. J;:.lster. P. Steill. S. Ulam, W. Walden, M. Wells, "Expenments III Chess," Journal of the ACM 4 174 .
Shannon. loe cit.
C. S. Strachey, "Logical or Non-Mathematical Programmes," Proc. of ACM Meeting at Toronto, Ontario,
pp. 46-49. Sept. 8-10, 1952.
highly likely that similar compromises will havc to be
made when one attempts to apply learning procedures
to problems of economic importance.
Conclusions
As a result of thcse experiments one can. say with some
certainty that
devise learning
schemes which will greatly outperform an average person and that such learning schemes may eventually be
economically feasible as applied to real-life problems.
Acknowledgments
Many different people have contributed to these studies
through stimulating discussions of the basic problems.
From time to time the writer was assisted by several
different programmers, although most of the detailed
work was his own. The forbearance of the machine room
operators and
thei~ willingness to play the machine at
all hours of the day and night are also greatly appreciated.
One of the more interesting of these was to express a
board position in terms of the first and higher moments
of the white and black pieces separately about two orthogonal axes on the board. Two such sets of axes were
tried, one set being parallel to the sides of the board
and the second set being those through the diagonals.
This apt phraseology was suggested by John McCarthy.
Not the capture of all of the opponent's pieces, as popularly assumed, although- nearly all games end in this
The use of a weight ratio rather than this, conforming
more closely to the values assumed by many players.
can lead into certain logical complications, as found by
Strachey, lac. cit.
The only departure from complete generality of the
game as programmed is that the program requires the
opponent to make a permissible move. including the
taking of a capture if one is offered. "Huffing" is not permitted.
Pitman, 1953.
This coefficient is defined as C=(L-H)/(L+H), where
. L is the total number of different legal moves which the
machine judged to be poorer than the indicated book
moves, and H is the total number which it judged to be
better than the book moves.
This playing-time requirement, while _large in terms of
cost. would be less than the time which the checker
master probably spends to acquire his proficiency.
There is a logical fallacy in this argument. The program
might save only invariant terms which have nothing to do
with goodness of play; for example, it might count the
squares on the checkerboard. The forced inclusion of
the piece-advantage term prevents this.
Each game averaged 68 moves (34 to a side), of which
approximately 20 caused changes to be made in the
scoring polynomial.
Some Studies in Machine Learning Using the Game of Checkers
Appendix A: Programming details
,..j pproxilllate siz.e of program
Basic chccker-playing routine
Input. move verification and output
Game starting and..\crminating routines
Loaders. table generators, dumping, et cetera
Statistical and analytical routincs
Rote-learning routines
Generalization-learning routines
Tables and constants for basic play
Working space for basic play
\Vorking space for generalization learning
Working space for rote learning
I 100 instructions
1400 instructions
600 instructions
H50 instructions
700 instructions
1500 instructions
650 instructions
2000 words
balance of memory
• Approximate compllfation times
To find all available moves from given board position.
To make a single move and find resulting board position
To evaluate a board position (4 terms)
To find score for a saved board position (rote learning)
To evaluate position (with 16 terms for generalization learning)
2.6 milliseconds
1.5 milliseconds
2.4 milliseconds
2.3 milliseconds
7.5 milliseconds
Jump moves are computed by a simple extension of this procedure. Multiple jumps are handled as a sequence of single
jumps separated by null-reply moves.
Board representations
The standard checkerboard numbering system (see Appendix B) is used in communicating with the machine. A modified numbering system is used for internal computations, the numbers shown on the squares in Fig. A-I corresponding
to the bit positions in an IBM 704 word. Any given board position is represented by four such worc1s; one word (FA)
containing 1's in those bit positions corresponding to squares containing pieces of the color whose turn it is to move
and which normally move in a forward direction. To be specific. if it is Black's turn to move (i.e., i: Black is "active")
FA designates the location of all of Black's pieces, both men and kings. Conversely, if White is active, FA designates
the location of White's kings only, since White's men can only move in the direction arbitrarily called backward.
The other words designate, respectively: BA, backward active pieces; FP, forward passive pieces; and BP, backward
passive pieces.
To conserve space when writing on tape, three words are used to record board positions with kings, and only two
words are used for board positions without kings. These are saved in a standardized form, as explained in the text.
Possible moves are designated by five words; one word to indicate by its sign (with the word itself containing other
information) whether the moves are jumps or not. (If a jump is available, only jump moves are saved.) The other
four words designate the location of those pieces which can move in the four different diagonal directions: RF, for
right forward; LF, for left forward; LB, for left backward; and RB, for right backward, respectively.
By reference to Fig. A-I, it will be observed that a right-forward move results in an increase of 4 in the square
designation. while a left-forward move results in an increase of 5. Bit positions 9, 18 and 27 do not appear on the
board. This notation makes it possible to compute available moves fos all pieces simultaneously. Having previously.
computed a word called EMPTY, which contains 1's in locations corresponding to all unoccupied squares, one can
compute RF, for the normal move case, in four instructions, as listed below (in IBM 704 symbolic language):
(puts word EMPTY into the accumulator);
(shifts word to left by 4 positions);
(forms logical AND between EMPTY and FA);
(stores word as newly computed RF).
Improving the Efficiency of a Problem Solver
Fil:llr,' A -I
Checkerboard notation for internal computations.
", ddilio//lIllillle-s(/\'ing expedie//Is
Ilit counting is done hy a table-lookup procedure in a closed subroutine of 16 executed instructions (408 microseconds).
'I his reLJuires a 156-word tahle which is generated at the start by a 13-word program. Similar table-lookup procedures
arc used. 10 llIrn a word end-for-end. and to locate the l's in a word for move reporting.
.\Iulliplications are usually avoided. In several places where multiplication by small integers must be done, it is
programmed in terms of shifts and logical operations.
During the look-ahead procedure a complete record is kept of the sequence of board positions currently under
investigalion. As a result. no computing is needed to retract moves.
Some Studies in Machine Learning Using the Game of Checkers
Appendix B: Sample games from the second series with generalization learning
• Typical opel/iI/R.I'
The first eight moves of selected games in which Alpha played Black against Beta, showing the way in which different
types of play were tried.
• Typical games
Sample games in which Alpha played White against forced Beta openings.
Terminated
Beta Concedes
Beta Concedes
70 Move Termination
Improving the Efficiency of a Problem Solver
FiC:/Ir,. B-1
Square designations used in reporting games.
Appendix C: Evaluation polynomial details for second series
,\fethod of C()II/pllling terll/S
The 16 terms called for in the evaluation polynomial are computed, individually, by taking the value of the appropriate
parameter, as L1etined below, for the board position under consideration and subtracting the value of this same
parameter computeLl for the board position just prior to the last move (with the necessary reversal in the definitions
lIf active and passive sides). This difference is then multiplied by the corresponding program-computed coefficient.
which can vary between - 2 1" and +2 1x• and credited to the side which was passive on the board position under
cllnsiLleration.
Some Studies in Machine Learning Using the Game of Checkers
Dcjinitinns O!I'(/rtllIll'tl'rS
ADV (Advancemcnt)
The paramcter is crcdited with I for each passive man in
thc 5th and 6th rows (counting in passivc's direction)
and debited with 1 for each passive man in thc 3rd and
APEX (Apcx)
The parameter is dcbited with I if there are no kings on
the board. if either square 7 or 26 is occupied by an active man. and if neither of these squares is occupied by a
passive man.
BACK (Back Row Bridge)
The parameter is credited with 1 if there are no active
kings on the board and if the two bridge squares (I and
3, or 30 and 32) in the back row are occupied by passive
CENT (Center Control I)
The parameter is credited with I for each of the following squares: 11,12,15,16,20,21,24 and 25 which is
occupied by a passive man.
CNTR (Center Control II)
The parameter is credited with I for each of the following squares: 11,12,15,16,20,21,24 and 25 that is
either currently occupied by an active piece or to which
an active piece can move.
CORN (Double-Corner Credit)
The parameter is credited with 1 if the material credit
value for the active side is 6 or less, if the passive side is
ahead in material credit, and if the active side can move
into one of the double-corner squares.
CRAMP (Cramp)
The paranleter is credited with 2 if the passive side occupies the cramping square (13 for Black, and 20 for
White) and at least one other nearby square (9 or 14 for
Black, and 19 or 20 for White), while certain squares
(17,21,22 and 25 for Black, and 8,11,12 and 16 for
White) are all occupied by the active side.
DENY (Denial of Occupancy)
The parameter is credited with I for each square defined
in MOB if on the next move a piece occupying this
square could he captured without an exchange.
orA (Double Diagonal File)
The parameter is credited with I for each passive piece
located in the diagonal tiles terminating in the doublecorner squares.
OlAV (Diagonal Moment Value)
The parameter is credited with 1/2 for each passive
piece located on squarcs 2 removed from the doublecorner diagonal files. with l for each passive piece located on squarcs I removed from the douhle-corner files
and with 3! 2 for each passive piece in the double-corner
DYKE (Dyke)
The parameter is credited with I for each string of passive pieces that occupy three adjacent diagonal squares.
(Exehang~)
The parameter is credited with 1 for each square to
which the active side may advance a piece and. in so
doing, force an exchange.
EXPOS (Exposure)
The parameter is credited with I for each passive piece
that is flanked along one or the other diagonal by two
empty squares.
FORK (Threat of Fork)
The parameter is credited with 1 for each situation in .
which passive pieces occupy two adjacent squares in one
row and in which there are three empty squares so disposed that the active side could, by occupying one of
them, threaten a. ~ure capture of one or the other of the
two pieces.
The parameter is credited with 1 for each single empty
square that separates two passive pieces along a diagonal,
or that separates a passive piece from the edge of the
GUARD (Back Row Control)
The parameter is credited with 1 if there are no active
kings and if either the Bridge or the Triangle of Oreo is
occupied by passive pieces.
HOLE (Hole)
The parameter is credited with 1 for each empty square
that is surrounded by three or more passive pieces.
KCENT (King Center Control)
The parameter is credited with 1 for each of the following squares: 11, 12, 15, 16, 20,21,24 and 25 which is
occupied by a passive king.
MOB (Total Mobility)
The parameter is credited with 1 for each square to
which the active side could move one or more pieces in
the normal fashion,
disregarding the fact
moves mayor may not be available.
MOBIL (Undenied Mobility)
The parameter is credited with the difference between
MOB and DENY.
MOVE (I\Iove)
The parameter is credited with I if pieces are even with
a total piece count (2 for men. and 3 for kings) of less
than 24, and if an odd number of pieces are in the move
squares 1, 2, 3 and 4.
NODE (Node)
The parameter is credited with 1 for each passive piece
that is surrounded by at least three empty squares.
Improving the Efficiency of a Problem Solver
OREO (Triangle of Orca)
The parameter is credited with I if there are no passive
kings and if the Triangle of Oreo (squares 2, 3 and 7 for
Black. and squares 26. 3D and 3 I for White) is occupied
hy passive pieces.
POLE (Pole)
The parameter is credited with I for each passive man
that is completely surrounded hy empty squares.
RECAP (Recapture)
This parameter is identical with Exchange. as defined
ahove. (It was introduced to test the elfects produced by
the random times at which parameters are introduced
and deleted from the evaluation polynomial.)
THRET (Threat)
The parameter is credited with
fo'r each square to
which an active piece may he moved and in so doing
threaten the capture of a passive piece on a subsequent
--- -'-------_._--------------
Undenied Mobility-Denial 01 Occupancy
Denial 01 Occllpancy-Total Mohility
Binary connectil'e terms
The abbreviations used for the terms of this type which have been employed are listed below,
in the order of
AoB. r/oB AoB, and AoB. where A and B are the two respective parameters heading the sublists of abbreviations.
Undenied Mobility-
Center Control I
!:'I'all/ation polynomial (first /2 terms only) alter 42 !?Clines, dllring which a total 011039 different sets 01 adjllstments
11'['1'1' !!lade ro (he terms and their coefficients. ':'
... ,.-----._- --'_._----------------------------------
Used as Coefficient
A dillsted
Coefficient
Correlation
Coefficient
------------------------
Times A djlls/ed
fIelore Discard
Times Adjusted
Belore Discard
--'i-' ------- ---o
.\'"r,· od",.',! ill f'l'oof: An additional 211 games have recently been played, Although
"'111<: 't);l1i1t'an.1 changes w<:re notell. the general stabilization of the learning process
,tt););c,lcll hy
h~ure -l has heen contirmeJ. During this play. 412 more adjustments
IInc ll1ad,
Itl the terms ;tnd their coellicients anJ
12 allllitions were made to the
Ihl uf di-carded tnms.
Receil'ed ivlarch 3, )1)59