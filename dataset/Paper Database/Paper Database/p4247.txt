Flows on Surfaces of Arbitrary Topology
Alias wavefront
Figure 1: Snapshots of ﬂows on various surfaces computed using our novel technique.
In this paper we introduce a method to simulate ﬂuid ﬂows on
smooth surfaces of arbitrary topology: an effect never seen before.
We achieve this by combining a two-dimensional stable ﬂuid solver
with an atlas of parametrizations of a Catmull-Clark surface. The
contributions of this paper are: (i) an extension of the Stable Fluids
solver to arbitrary curvilinear coordinates, (ii) an elegant method
to handle cross-patch boundary conditions and (iii) a set of new
external forces custom tailored for surface ﬂows. Our techniques
can also be generalized to handle other types of processes on surfaces modeled by partial differential equations, such as reactiondiffusion. Some of our simulations allow a user to interactively
place densities and apply forces to the surface, then watch their
effects in real-time. We have also computed higher resolution animations of surface ﬂows off-line.
CR Categories:
1.3.7 [Computer Graphics]: Three-Dimensional
Graphics and Realism—Animation
Keywords: Computational ﬂuid dynamics, Subdivision Surfaces.
Introduction
The simulation of ﬂuid ﬂows in computer graphics has recently
experienced a renaissance with the advent of new algorithms and
faster hardware. It is now possible to simulate ﬂuid ﬂows in real
∗Alias wavefront, 210 King Street East, Toronto, ON, Canada M5A 1J7.
 
Figure 2: Comparing vectors lying in different tangent spaces is
ambiguous without a parametrization.
time for reasonably sized problems. Most of these models, however, assume that the ﬂuids “live in a box”, either a square-like domain in two-dimensions or a box-like domain in three-dimensions.
Therefore, we thought that it would be interesting and challenging
to extend current solvers to handle ﬂuids that live on surfaces of
arbitrary topology. A well studied example is that of a ﬂuid ﬂow on
a sphere, which can serve as a model for our atmosphere. Indeed,
there is a large body of literature in the physical sciences which
deals with this problem. However, little or no attention has been
devoted to the problem of simulating ﬂuid ﬂows on arbitrary surfaces. We believe that a ﬂuid solver on surfaces of arbitrary topology can result in many practical applications in computer graphics. For example, the ﬂows can be used to decorate surfaces like
the ones depicted in Figures 1.(b) and 1.(c) with complex textures.
Also the ﬂow ﬁeld can be used to deﬁne a local frame at every point
of the surface. This is useful, for example, in specifying a principal direction of anisotropy as shown in Figure 1.(e). More generally, since assigning consistent frames to a surface is not easy our
solvers might be of help. Moreover, our surfaces, when restricted
to lie in the plane, are actually curved two-dimensional grids which
can be applied to the problem of computing ﬂows over arbitrarily curved objects as shown in Figure 1.(d). This is an improvement over current solvers which typically voxelize the objects into
a grid. More generally, our approach should be relevant to solve
other types of equations on arbitrary surfaces. However, our motivation was mainly intellectual curiosity: what would a ﬂuid ﬂow
look like on arbitrary surfaces ? In this paper we provide an answer.
In order to model ﬂuid ﬂows on surfaces we need both a model
for the surface and a model for the ﬂuid simulation. When simulating ﬂuids it is desirable to have a surface representation which
Figure 3: The distortions of the parametrization are apparent in a
simulation that ignores the metric (left) and are considerably reduced in our simulations (right).
admits a global atlas of smooth parametrizations. The reason is that
ﬂuid simulators require the comparison of vectors at different points
on the surface. In general, these vectors are in different tangent
planes as shown in Figure 2, and we need a way to compare them in
a common space. A possible solution would be to use some “translation on the surface” mechanism to bring the tangent planes together, but how to do this properly without a parametrization is not
obvious. Incidently, this problem does not exist for scalar functions
deﬁned on the surface. In this case we can solve equations directly
on the surface without a global parametrization, see for example
[Turk 1991] or [Desbrun et al. 1999]. On the other hand, parametric surfaces allow tangent vectors to be compared in their parameter domains. Therefore, Catmull-Clark subdivision surfaces are an
ideal candidate for our surface model: they are smooth, can handle
arbitrary topologies and have a natural quad patch parametrization.
That is all we need.
For the ﬂuid solver we decided to implement our Stable Fluids
algorithm [Stam 1999] over others [Foster and Metaxas 1996; Foster and Metaxas 1997; Chen et al. 1997; Witting 1999] for the following reasons: it is fast (stable), relatively easy to implement and
forms the basis of more sophisticated solvers that simulate swirly
smoke [Fedkiw et al. 2001], water [Foster and Fedkiw 2001; Enright et al. 2002] and ﬁre [Nguyen et al. 2002]. The Stable Fluids
algorithm uses a semi-Lagrangian solver for the advection [Courant
et al. 1952], a projection step to ensure incompressibility [Chorin
1967] and an implicit treatment of the viscosity. The combination
of these techniques results in an unconditionally stable solver for
the ﬂuid’s velocity.
In our ﬁrst implementation we blindly applied the Stable Fluids
solver to each parameter domain while enforcing the cross-patch
boundary conditions. However, visible artefacts appeared in our
ﬂows such as the one shown in Figure 3 (left). We soon realized
that this was due to the fact that we ignored the distortions caused
by the parametrization of the Catmull-Clark surface. Fortunately,
the equations of ﬂuid ﬂow can be re-written in general curvilinear coordinates which take into account these distortions. These
equations are somewhat more complicated than the usual Navier-
Stokes Equations, however. To express them concisely (even in
two-dimensions) requires some notational devices which we will
introduce below. Fortunately, our solver still works in this framework and Figure 3 (right) shows that our novel algorithm drastically
reduces these artefacts. Note that artefacts are still apparent but disappear as the grid is reﬁned.
We mention that there is a large body of literature concerned with
solving the Navier-Stokes equations in general coordinates, especially in engineering where very often “body-ﬁtted” grids are used
to compute ﬂows over complex shapes. Standard references are
[Hirsch 1990; Warsi 1998]. Often these solvers use arbitrary triangular meshes combined with a ﬁnite element based solver. These
Figure 4: Effect of boundary reﬁnement rules on the parametrization: original Catmull-Clark (left) and modiﬁed edge rules by Biermann et al. (right).
solvers are usually more complex and are consequently slower than
the one proposed in this paper. More importantly, it is not at all
obvious how to implement the semi-Lagrangian algorithm in their
framework.
The rest of the paper is organized as follows. In the next section
we introduce some notation and brieﬂy mention some properties
of Catmull-Clark surfaces. In Section 3 we present our stable ﬂuid
solver in general curvilinear coordinates. Section 4 presents the implementation and an elegant way to handle the boundary conditions
between patches. Next, Section 5 discusses some results generated
with our algorithm. Finally, in Section 6 we conclude and present
interesting directions for future research.
Catmull-Clark Surfaces
Catmull-Clark surfaces are a generalization of piecewise bi-cubic
B-spline surfaces to meshes of arbitrary topology. They were introduced in 1978 by Catmull and Clark where they are de-
ﬁned as a sequence of reﬁnements of an arbitrary (base) mesh. The
reﬁnement rules were designed to generalize the midpoint knot insertion rules for B-Splines. Consequently, where the mesh is regular, Catmull-Clark surfaces agree exactly with B-spline surfaces.
Long after their introduction it was proved that these surfaces are
in fact tangent plane continuous [Reif 1995; Zorin 1997] and could
be evaluated everywhere [Stam 1998]. These two properties make
Catmull-Clark surfaces relevant to our problem. Another important
property of Catmull-Clark surfaces is that they admit a global atlas of parametrizations. Without loss of generality we assume that
the base mesh is made up only of quads. If not, reﬁne once. We
therefore have a one to one correspondance between the quads of
the base mesh and the patches of the surface. This fact allows us to
uniquely label each patch of the surface. Adjacent patches overlap
only along the edges of their parameter domains. The transitions
between the domains can easily be computed and will be crucial in
our algorithm to enforce the correct boundary conditions.
To handle surfaces with open boundaries such as the one shown
in Figure 1.(d) we use the rules provided in [Biermann et al. 2000].
These rules use B-spline curve reﬁnement masks on the boundary
and a modiﬁed edge rule for interior vertices adjacent to an irregular boundary vertex. Fortunately, both tangent continuity and exact
evaluation remain valid for these modiﬁed rules. As shown in Figure 4 these new rules considerably reduce the distortions due to the
parametrization at the boundaries, which is desirable.
We now introduce some notation to make our description more
precise. We label the set of quads of the base mesh by p = 1, · · · , P
and assume that the parameter domain of each patch is the unit
square Ωp = × . Each quad then deﬁnes three functions:
k = 1, 2, 3.
Figure 5: The overlap functions between patches are restricted to
the four cases shown. This ﬁgure also shows our labeling of the
The patches overlap along their boundaries ∂Ωp. In order to correctly handle the ﬂows across patches we need to specify the transition functions between adjacent patches as well as their derivatives.
First we label each edge of the parameter domain with a number
between 0 and 3 as shown in Figure 5. Notice that the labels are
ordered counterclockwise. We then observe that the possible transition functions depend only on four functions. Given two adjacent
edges with labels e1 and e2 it can be shown by inspection that the
transition function depends only on the number
< e1, e2 >= (4 + e1 −(e2 + 2)%4)%4,
where “%” denotes the modulo operator.
This simple relation
greatly simpliﬁes the implementation of the boundary conditions
given below. Indeed, the transitions functions between patches depend only on the following four functions:
φ0(x1, x2)
φ1(x1, x2)
x2, 1 −x1
φ2(x1, x2)
1 −x1, 1 −x2
φ3(x1, x2)
1 −x2, x1
Consequently, the transition function between two edges labeled e1
and e2 depends on the function φ<e1,e2>. Their derivatives which
we need to transform vectors between patches are:
These matrices tell us how we should transform the coordinates of
a vector so that it remains unchanged in the new coordinate system.
We illustrate this fact in Figure 5 by the central vector in each patch.
To counter the distortions caused by the parametrization we need
a measure of deformation. For a surface these are given by the local
metric (gi,j) which is computed directly from the parametrizations
deﬁned by Equation 1 [Aris 1989]:
i, j = 1, 2,
and where the dependence on p has been dropped. By deﬁnition this
is a 2 × 2 symmetrical positive deﬁnite matrix, so that g1,2 = g2,1
and the determinant
g = det (gi,j) = g1,1g2,2 −g2
Figure 6: Measure of the distortion √g on the surfaces of Figure 1.
This shows that the inverse of the metric is well deﬁned, which
is important since we are interested in defeating the deformations
caused by the parametrization. The elements of the inverse are denoted by gi,j and their exact expressions are
g g2,2, g2,2 = 1
and g1,2 = g2,1 = −1
Figure 6 shows the values of √g corresponding to the surfaces
shown in Figure 1. Notice the deformations near the points on the
surface corresponding to the irregular points of the base mesh.
Stable Fluids Solver on Surfaces
Basic Algorithm
In this section we brieﬂy recall the main steps of the Stable Fluids
algorithm. For further details we refer the reader to our original paper [Stam 1999]. This algorithm solves the incompressible Navier-
Stokes equations, which can be written in the following compact
∂t = P{−(u · ∇)u + ν∇2u + f},
where u = (u1, u2) is the ﬂuid’s velocity, ν is the viscosity and
f = (f 1, f 2) are external forces. The operator P{v} projects a
vector ﬁeld v onto its incompressible (divergence free) component.
In addition to providing an update rule for the velocities, our algorithm also includes a method to compute the motion of a density ρ
immersed in the ﬂuid. The equation for the evolution of the density
is an advection-diffusion equation:
∂t = −(u · ∇)ρ + κ∇2ρ + S,
where κ is a diffusion rate and S are sources of density.
For each time step ∆t the algorithm solves the Navier-Stokes
equation in four steps. Starting from the velocity ﬁeld of the previous time step u0, the algorithm resolves each term of Equation 12
sequentially :
The ﬁrst step is easy to compute, we simply add the force ﬁeld
multiplied by the time step to the velocity: u1 = u0 + ∆t f. The
second step uses a simple implicit solver for the diffusion equation:
(I −∆tν ∇2)u2 = u1.
The third step is given by an advection equation:
∂t = −(u2 · ∇)u3,
and is solved with a semi-Lagrangian technique [Courant et al.
u3(x) = u2(x −∆tu2(x)).
For clarity we assume a simple Euler step for the “backtrace.”
Higher order schemes are of course also handled by our algorithm.
Finally, the last step projects the velocity ﬁeld onto the incompressibles [Chorin 1967]. This step involves the solution of a Poisson
∇2ϕ = ∇· u3,
followed by the correction u4 = u3 −∇ϕ. Our goal now is to generalize these steps to velocities living in a Catmull-Clark surface.
Extension to Curvilinear Coordinates
In order for the ﬂows to be truly intrinsic we have to take into account the distortions caused by the parametrizations. The difference
from a ﬂat space is that all differential operators such as the gradient “∇” now depend on the metric (gi,j) introduced in Section 2.
In Appendix A, we provide the expressions of the operators occurring in the Navier-Stokes Equations. These formulas were obtained
from the excellent book by Aris , which is a good introduction to the Navier-Stokes Equations in general coordinates.
The ﬁrst step of the algorithm is unaffected: uk
0 + ∆tf k.
In the second step we have from the expression for the Laplacian
that (see Appendix A):
where k = 1, 2 and we assume an “Einstein-like” summation between occurrences of identical upper/lower and lower/upper indices
(see Appendix A for more details). The advection step is written
similarly using the expression of the gradient in Appendix A as:
2g1,j + u2
2g2,j ∂uk
This equation can be recast in the same form as the usual advection
equation (Equation 16) by deﬁning the new velocity ﬁeld:
2g1,k + u2
The beauty of this insight is that we can now apply the same semi-
Lagrangian technique of the original Stable Fluids solver with u2
replaced by ¯u2:
u3(x) = u2(x −∆t¯u2(x)).
The same applies to the solution of the advection Equation 13 for
the density.
Finally the last step of the Stable Fluids solver involves the solution of the following Poisson-like equation:
Once ϕ is obtained from this equation we compute the ﬁnal velocity
by subtracting its gradient from u3:
3 −gk,j ∂ϕ
This completes the theoretical development of our ﬂuid solver in
curvilinear coordinates. In summary, steps two and four of the algorithm still involve inverting linear operators. However, they are
now more complicated and depend on the spatially varying metric
of the parametrization. It came as a big relief to us that the semi-
Lagrangian treatment of the advection term remains applicable to
this more general situation. One simply has to replace the advecting ﬁeld with the one given in Equation 20. We also point out that
the equations given in this section remain valid in three-dimensions
and could be applied to the computation of ﬂuids on deformed grids
for example. We will now show how to put all this theory to work
in a practical algorithm to simulate ﬂuid ﬂows on surfaces.
Figure 7: Discretization of one parameter domain. Scalars are de-
ﬁned at the cell centers (dots), the x1-components of the velocity
are deﬁned at the squares, while the x2-components are deﬁned at
the diamonds. The shaded grid cells are not part of the parameter
domain but handle the boundary conditions.
Implementation
In this section we assume that the reader is familiar both with an
implementation of our Stable Fluids solver and of Catmull-Clark
surfaces. For the former see the original paper [Stam 1999] and for
the latter see for example the most recent notes of the subdivision
surface courses given at SIGGRAPH [Zorin et al. 2000].
Discretization
In our implementation we discretize every patch domain into N×N
grid cells. Instead of the cell centered conﬁguration of the original
Stable Fluids solver we use the one shown in Figure 7. This is
the so-called MAC conﬁguration which is more stable with respect
to the “project” step of the algorithm [Foster and Metaxas 1997;
Fedkiw et al. 2001]. All scalars such as the density are deﬁned at
the cell centers, while the x1-components of the velocity are deﬁned
on the vertical edges of the grid and the x2-components are deﬁned
on the horizontal edges. The cell centered variables are denoted by
i, j = 0, · · · , N + 1,
respectively. The velocity on the other hand is denoted using halfway indices:
i = −1, · · · , N + 1, j = 0, · · · , N + 1.
This labeling is illustrated in Figure 7. We also added an additional layer of grid cells to handle boundary conditions. The values
at these cells will be ﬁlled in from the grids of the neighboring
Using the exact evaluation procedure for Catmull-Clark surfaces
[Stam 1998], we ﬁrst compute the metric at every node of the grid
using Equation 9. This step only has to be performed once for
a given surface and grid resolution. With these values at all the
grid points we can discretize the different steps of the Stable Fluids solver as shown in Appendix B. Since the resulting linear systems for the diffusion and the projection steps are symmetric we
Figure 8: Labelling of the boundary patches and edges used when
setting boundary conditions.
solve them using a preconditioned conjugate gradient method as
was done in [Fedkiw et al. 2001; Foster and Fedkiw 2001]. The
semi-Lagrangian advection step is similar to that of the original
Stable Fluids solver except that the modiﬁed velocity ﬁeld ¯u2 replaces u2. The only tricky part is the handling of boundaries which
we will describe in Section 4.3 below.
Boundary Conditions
The linear solvers we use require that the values at the boundaries
are well deﬁned. To facilitate the treatment of the boundaries we
have added an extra layer of grid cells. After each iteration of the
conjugate gradient solver or any other update of the grids, we populate these layers using the grid versions of the transition functions
of Equations 3-6:
(j, N + 1 −i) ,
(N + 1 −i, N + 1 −j) and
(N + 1 −j, i) .
Let ek be the index of the edge adjacent to the edge labelled by “k”
and ϕk be the scalar grid values corresponding to the adjacent patch
as shown in Figure 8. Given these notations, we set the boundary
cells of our grid using the following formulas:
ϕN+1,i = ϕ1
ϕi,N+1 = ϕ2
where i = 1, · · · , N and tk =< k, ek > (recall Equation 2).
The strategy to set the boundary values for the velocity are more
difﬁcult but follow the same line of reasoning. As for the scalar
case let us denote the velocity ﬁelds of the adjacent patches by u0,
u1, u2 and u3. Then we have the following update rules for the
boundary cells:
2 ,i], (u3)2
2 ,i], (u1)2
[t0,i,N], (u0)2
[t0,i,N+ 1
[t2,i,1], (u2)2
We now explain how to treat the semi-Lagrangian algorithm near
boundaries. Recall that the semi-Lagrangian procedure in the original Stable Fluids solver involves tracing paths backwards through
(2.5,1.75)
(-0.75,1.5)
(0.5,0.25)
(0.75,-0.5)
Figure 9: For each point that exits a domain we iteratively ﬁnd the
domain where it lives.
the grid and interpolating values there. When these paths remain
within the patch’s grid we can simply apply the original algorithm.
Handling the case when these paths wander off to adjacent patches
requires more care. Our interpolation routine ﬁrst checks whether
the coordinate lies in the current patch domain. When this is not the
case the patch in which the coordinate lies is found, one coordinate
at a time. Following is the algorithm that implements these ideas.
Clip ( x1, x2, p, M )
while not (x1, x2) ∈Ωp
get edge indices e0, e1, e2 and e3
if x1 < 0 then
p = index of neighboring patch
(x1, x2) = φ<3,e3>(x1 + 1, x2)
if x1 > 1 then
p = index of neighboring patch
(x1, x2) = φ<1,e1>(x1 −1, x2)
if x2 < 0 then
p = index of neighboring patch
(x1, x2) = φ<0,e0>(x1, x2 + 1)
if x2 > 1 then
p = index of neighboring patch
(x1, x2) = φ<2,e2>(x1, x2 −1)
This step is then followed by a linear interpolation from the grid
of patch p at the location (x1, x2). When interpolating velocities
we also multiply them by the matrix M to account for the change
in parameter domains. Figure 9 illustrates how the coordinate and
the matrix M are computed for a speciﬁc example. We note that
near an irregular vertex we might get different results if we change
the order of the if statements in the above algorithm. To remedy
this, we could base the order on the slope of the backtrace direction
for example. However, in practice we found that this algorithm
worked well.
We wrote a program that allows a user to apply forces and deposit
densities on the surfaces interactively. All the pictures included in
this paper are snapshots from our program: all renderings are done
via standard OpenGL calls. The ﬂows are depicted one patch at the
time by rendering them into texture maps which are then applied to
the rendered mesh.
We also added two surface forces. One is simply a force that
simulates gravity. For each surface point (x1, x2) we added a force
that is proportional to the projection of the downward direction d
onto the tangent plane and the density ρ at that point:
fg = Gρ ug,
Figure 10: Vectors involved in computing the effects due to gravity
in the parameter domain.
Figure 11: Densities ﬂowing down a head due to gravity.
where G is a constant and ug are the coordinates of the projection
dT of d in the tangent plane. See Figure 10 for a depiction of this
situation. To compute these coordinates we need the frame (s, t, n)
given by the parametrization in the tangent plane. The vectors s and
t are the normalized coordinate directions and n is the normal. In
general, this frame is not orthogonal. The projection of d is given
dT = d −(n · d)n.
To obtain the coordinates of dT in this frame, however, is not difﬁcult. First compute the dot products
a = dT · t, b = dT · s
c = t · s,
and then set the coordinates ug = (u1
g) equal to
g = b −cu1
Using this force we can simulate densities ﬂowing down a surface, like paint dripping from a human head, as shown in Figure
11. The downward vector is computed from the current viewing
direction. In our interactive solver the user can rotate the object
while watching the densities ﬂowing downward due to gravity. The
head in Figure 11 is comprised of about 450 patches. In this simulation we allocated grids of size 32 × 32 for each patch. Even at
this level of complexity we were still able to produce a frame every
ﬁve seconds on our Dell Inspiron laptop which has a Pentium III
1GHz processor and a nVidia Geforce2Go graphics card. Figure 12
is another complex example comprised of 223 patches.
Figure 12: Flow on a surface of complex topology.
Figure 13: Rotating sphere with a Coriolis force.
A second force we introduce is due to the rotation of an object:
the so-called Coriolis effect. We assume that our surface rotates
around a vector r at a rotational speed Ω. Our Coriolis force is then
fc = Ω(n · r) (u2, −u1),
where as before n is the normal to the surface. Notice that this
force is proportional to the velocities of the ﬂow. In our simulations
we assign a random set of velocities at a sparse set of locations on
the patches at the beginning of the simulation. Figure 13 shows
four frames from an animation of this effect on a sphere, where
we have set the initial distribution of density as a set of horizontal stripes. Notice how the vortices in the ﬂow rotate clockwise in
the “northern” hemisphere and counterclockwise in the “southern”
hemisphere.
Figure 14 depicts that our model can be used to simulate the
ﬂow over arbitrarily curved domains in two-dimensions. This is
more accurate than the voxel-occupancy techniques used in previous work [Foster and Metaxas 1997; Fedkiw et al. 2001; Foster and
Fedkiw 2001].
Figure 15 shows another application of our model where we use
the velocity ﬁeld to specify the principal direction of anisotropy.
Figure 14: Densities dropping down a domain with curvilinear
boundaries.
Figure 15: The velocity ﬁeld is used as the principal direction of
anisotropy in this sequence.
This direction evolves over time and produces interesting animations.
Finally, we can also apply our framework to solve other types of
equations on surfaces. Figure 16 shows different reaction diffusion
textures created using our solver. In fact, our technique is similar to
that of Witkin and Kass . However, we extend their model to
surfaces of arbitrary topology.
Conclusions and Future Work
In this paper we have for the ﬁrst time shown how to simulate ﬂuid
ﬂows on surfaces of arbitrary topology. We achieved this by using
a combination of fast ﬂuid solvers and Catmull-Clark subdivision
surfaces. To minimize the distortions caused by the parametrization we had to use a formulation of the Navier-Stokes equations in
general coordinates. Our model can also be applied to the problem of computing ﬂows over arbitrarily curved boundaries in twodimensions. This suggests an obvious extension of our algorithm to
three-dimensions: computing ﬂows over arbitrary objects. This extension would require a formulation of the Catmull-Clark algorithm
in three-dimensions. The model described in [MacCracken and Joy
1996] would be a good candidate once an evaluation procedure like
[Stam 1998] were developed for it. Extending our model to work on
arbitrary meshes is another interesting direction for future research,
where the main challenge is an extension of the semi-Lagrangian
Figure 16: Textures created using a reaction-diffusion process.
algorithm.
Partial Differential Operators in Curvilinear Coordinates
Working in general coordinates is considerably more difﬁcult than
the usual ﬂat euclidean case. The main difﬁculty consists in mastering the notational devices which have been invented to make the
manipulation of formulas more manageable. There’s no space here
for a short tutorial so we refer the reader to the excellent book by
Aris . The main notational device that we need is the summation convention over repeated indices. The coordinates of points
and vectors are always denoted with an index in the upper position
as in xi and ui. The derivative with respect to a coordinate, denoted by
∂xi has by convention an index in a lower position. We
can now state the summation convention: any index repeated once
in the upper position and once in the lower position in a product of
terms is called a dummy index and is held to be summed over the
range of its values. In our case the range of the index is always 1, 2.
For example, we have that:
∂xj = gi,1 ∂
∂x1 + gi,2 ∂
We now provide the expressions in general coordinates of the
differential operators that appear in the Stable Fluids solver. They
are taken from [Aris 1989] (pages 169-70). Gradient:
∇ϕ = gi,j ∂ϕ
Divergence:
Laplacian:
These expressions are also valid in three-dimensions with the
dummy indices taking the values 1, 2, 3. For the vorticity conﬁnement force [Fedkiw et al. 2001] we also require the curl of a velocity
ﬁeld (in two-dimensions):
∂xi + gi,1 ∂u2
Discretization of the Operators
Given the labelling shown in Figure 7 we now provide the discrete
versions of the differential operators appearing in each step of our
algorithm. We assume that the grid spacing is h = 1/N. The
Laplacian operator is discretized as follows:
(∇2ϕ)i,j =
i,j + D1,2
i,j + D2,1
i,j + D2,2
2 ,j −Ai−1
2 ,j −Bi−1
A = √gg1,1, B = √gg1,2, C = √gg2,2,
ϕi+1,j −ϕi,j,
ϕi,j −ϕi−1,j,
4 (ϕi+1,j+1 + ϕi,j+1 −ϕi+1,j−1 −ϕi,j−1) ,
4 (ϕi,j+1 + ϕi−1,j+1 −ϕi,j−1 −ϕi−1,j−1) ,
4 (ϕi+1,j+1 + ϕi+1,j −ϕi−1,j+1 −ϕi−1,j) ,
4 (ϕi+1,j + ϕi+1,j−1 −ϕi−1,j −ϕi−1,j−1) ,
ϕi,j+1 −ϕi,j,
ϕi,j −ϕi,j−1.
The gradient is discretized as
(g1,1)i+ 1
2 ,j + (g1,2)i+ 1
(g1,2)i,j+ 1
2 + (g2,2)i,j+ 1
And ﬁnally the divergence is discretized as
(∇· u)i,j =
2 ,j(u1)i+ 1
2 ,j −(√g)i−1
2 ,j(u1)i−1
(√g)i,j+ 1
2 (u2)i,j+ 1
2 −(√g)i,j−1
2 (u2)i,j−1