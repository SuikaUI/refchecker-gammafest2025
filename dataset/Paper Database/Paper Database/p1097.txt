LinkNet: Exploiting Encoder Representations for
Efﬁcient Semantic Segmentation
Abhishek Chaurasia
School of Electrical and Computer Engineering
Purdue University
West Lafayette, USA
Email: 
Eugenio Culurciello
Weldon School of Biomedical Engineering
Purdue University
West Lafayette, USA
Email: 
Abstract—Pixel-wise semantic segmentation for visual scene
understanding not only needs to be accurate, but also efﬁcient
in order to ﬁnd any use in real-time application. Existing
algorithms even though are accurate but they do not focus
on utilizing the parameters of neural network efﬁciently. As
a result they are huge in terms of parameters and number
of operations; hence slow too. In this paper, we propose a
novel deep neural network architecture which allows it to learn
without any signiﬁcant increase in number of parameters. Our
network uses only 11.5 million parameters and 21.2 GFLOPs
for processing an image of resolution 3 × 640 × 360. It gives
state-of-the-art performance on CamVid and comparable results
on Cityscapes dataset. We also compare our networks processing
time on NVIDIA GPU and embedded system device with existing
state-of-the-art architectures for different image resolutions.
I. INTRODUCTION
Recent advancement in machines with ability to perform
computationally intensive tasks have enabled researchers to tap
deeper into neural networks. Convolutional neural networks’
(CNNs) , recent success has been demonstrated in image
classiﬁcation , , , , , , localization , ,
scene understanding , etc. A lot of researchers have
shifted their focus towards scene understanding because of
the surge in tasks like augmented reality and self-driving
vehicle, and one of the main step involved in it is pixel-level
classiﬁcation/semantic segmentation , .
Inspired by auto-encoders , , most of the existing
techniques for semantic segmentation use encoder-decoder pair
as core of their network architecture. Here the encoder encodes
information into feature space, and the decoder maps this
information into spatial categorization to perform segmentation.
Even though semantic segmentation targets application that
require real-time operation, ironically most of the current deep
networks require excessively large processing time. Networks
such as YOLO , Fast RCNN , SSD focus on
real-time object detection but there is very little to no work
done in this direction in case of semantic segmentation .
In our work, we have made an attempt to get accurate
instance level prediction without compromising processing time
of the network. Generally, spatial information is lost in the
encoder due to pooling or strided convolution is recovered by
using the pooling indices or by full convolution. We hypothesize
and later prove in our paper that instead of the above techniques;
bypassing spatial information, directly from the encoder to the
corresponding decoder improves accuracy along with signiﬁcant
decrease in processing time. In this way, information which
would have been otherwise lost at each level of encoder is
preserved, and no additional parameters and operations are
wasted in relearning this lost information.
In Section III we give detailed explanation of our LinkNet
architecture. The proposed network was tested on popular
datasets: Cityscapes and CamVid and its processing
times was recorded on NVIDIA Jetson TX1 Embedded Systems
module as well as on Titan X GPU. These results are reported
in Section IV, which is followed by conclusion.
II. RELATED WORK
Semantic segmentation involves labeling each and every
pixel of an image and therefore, retaining spatial information
becomes utmost important. A neural network architecture
used for scene parsing can be subdivided into encoder and
decoder networks, which are basically discriminative and
generative networks respectively. State-of-the-art segmentation
networks, generally use categorization models which are mostly
winners of ImageNet Large Scale Visual Recognition Challenge
(ILSCRC) as their discriminator. The generator either uses
the stored pooling indices from discriminator, or learns the
parameters using convolution to perform upsampling. Moreover,
encoder and decoder can be either symmetric (same number of
layers in encoder and decoder with same number of pooling
and unpooling layers), or they can be asymmetric.
In a pre-trained VGG was used as discriminator. Pooling
indices after every max-pooling step was saved and then later
used for upsampling in the decoder. Later on researchers came
up with the idea of deep deconvolution network , , fully
convolutional network (FCN) combined with skip architecture
 , which eliminated the need of saving pooling indices.
Networks designed for classiﬁcation and categorization mostly
use fully connected layer as their classiﬁer; in FCN they
get replaced with convolutional layers. Standard pre-trained
encoders such as: AlexNet , VGG , and GoogLeNet
 have been used for segmentation. In order to get precise
segmentation boundaries, researchers have also tried to cascade
their deep convolutional neural network (DCNN) with postarXiv:1707.03718v1 [cs.CV] 14 Jun 2017
Fig. 1: LinkNet Architecture
processing steps, like the use of Conditional Random Field
(CRF) , .
Instead of using networks which were designed to perform
image classiﬁcation, proposed to use networks speciﬁcally
designed for dense predictions. Most of these networks failed
to perform segmentation in real-time on existing embedded
hardware. Apart from this, recently recurrent neural networks
(RNNs) were used to get contextual information and to
optimize CRF ; but the use of RNN in itself makes it
computationally very expensive. Some work was also done
in designing efﬁcient network , , where DCNN was
optimized to get a faster forward processing time but with a
decrease in prediction accuracy.
III. NETWORK ARCHITECTURE
The architecture of LinkNet is presented in Figure 1.
Here, conv means convolution and full-conv means full
convolution . Furthermore, /2 denotes downsampling by a
factor of 2 which is achieved by performing strided convolution,
TABLE I: Input and output feature maps
Fig. 2: Convolutional modules in encoder-block (i)
Fig. 3: Convolutional modules in decoder-block (i)
and ∗2 means upsampling by a factor of 2. We use batch
normalization between each convolutional layer and which is
followed by ReLU non-linearity , . Left half of the
network shown in Figure 1 is the encoder while the one the right
is the decoder. The encoder starts with an initial block which
performs convolution on input image with a kernel of size 7×7
and a stride of 2. This block also performs spatial max-pooling
in an area of 3 × 3 with a stride of 2. The later portion of
encoder consists of residual blocks and are represented as
encoder-block(i). Layers within these encoder-blocks are shown
in detail in Figure 2. Similarly, layer details for decoder-blocks
are provided in Figure 3. Table I contains the information about
the feature maps used in each of these blocks. Contemporary
segmentation algorithms use networks such as VGG16 (138
million parameters), ResNet101 (45 million parameters) as their
encoder which are huge in terms of parameters and GFLOPs.
LinkNet uses ResNet18 as its encoder, which is fairly lighter
network and still outperforms them as evident from Section
TABLE II: Performance comparison. Image size is W×H
NVIDIA TX1
NVIDIA Titan X
TABLE III: Comparison on the basis of operations
Parameters
Model size (fp16)
Proposed Net
IV. We use the technique of full-convolution in our decoder
as proposed earlier by . Every conv(k × k)(im, om) and
full-conv(k × k)(im, om) operations has at least three
parameters. Here, (k × k) represent (kernel −size) and
(im, om) represent (inputmap, outputmap) respectively.
Unlike existing neural network architectures which are being
used for segmentation, our novelty lies in the way we link each
encoder with decoder. By performing multiple downsampling
operations in the encoder, some spatial information is lost. It
is difﬁcult to recover this lost information by using only the
downsampled output of encoder. linked encoder with
decoder through pooling indices, which are not trainable
parameters. Other methods directly use the output of their
encoder and feed it into the decoder to perform segmentation.
In this paper, input of each encoder layer is also bypassed
to the output of its corresponding decoder. By doing this we
aim at recovering lost spatial information that can be used
by the decoder and its upsampling operations. In addition,
since the decoder is sharing knowledge learnt by the encoder
at every layer, the decoder can use fewer parameters. This
results in an overall more efﬁcient network when compared to
the existing state-of-the-art segmentation networks, and thus
real-time operation. Information about trainable parameters and
number operations required for each forward pass is provided
in detail in Section IV.
IV. RESULTS
We compare LinkNet with existing architectures on two
different metrics:
1) Performance in terms of speed:
• Number of operations required to perform one
forward pass of the network
• Time taken to perform one forward pass
2) Performace interms of accuracy on Cityscapes and
CamVid datasets.
A. Performance Analysis
We report inference speed of LinkNet on NVIDIA TX1
embedded system module as well as on widely used NVIDIA
TitanX. Table II compares inference time for a single input
frame with varying resolution. As evident from the numbers
provided, LinkNet can process very high resolution image
at 8.5 fps on GPU. More importantly, it can give real-time
performance even on NVIDIA TX1. ’-’ indicates that network
was not able to process image at that resolution on the
embedded device.
We choose 640 × 360 as our default image resolution and
report number of operations required to process image of this
resolution in Table III. Number of operations determine the
forward pass time of any network, therefore reduction in it
is more vital than reduction in number of parameters. Our
approach’s efﬁciency is evident in the much low number of
operations per frame and overall parameters.
B. Benchmarks
We use Torch7 machine-learning tool for training with
RMSProp as the optimization algorithm. The network was
trained using four NVIDIA TitanX. Since the classes present
in all the datsets are highly imbalanced; we use a custom class
weighing scheme deﬁned as wclass =
ln(1.02+pclass). This class
weighing scheme has been taken from and it gave us
better results than mean average frequency. As suggested in
Cityscapes , we use intersections over union (IoU) and
instance-level intersection over union (iIoU) as our performance
metric instead of using pixel-wise accuracy. In order to prove
that the bypass connections do help, each table contains IoU and
iIoU values with as well as without bypass. We also compare
LinkNet’s performance with other standard models such as
SegNet , ENet , Dilation8/10 , and Deep-Lab CRF
a) Cityscapes:
This dataset consists of 5000 ﬁneannotated images, out of which 2975 are available for training,
500 for validation, and the remaining 1525 have been selected
as test set . We trained on our network on 19 classes
that was provided in the ofﬁcial evaluation scripts . As
reported in Table IV, our network outperforms existing models.
TABLE IV: Cityscapes val set results (* on test set)
Class iIoU
Dilation10
Deep-Lab CRF (VGG16)
Deep-Lab CRF (ResNet101)
LinkNet without bypass
TABLE V: Results on CamVid test set of (1) SegNet, (2) ENet, (3) Dilation8, (4) LinkNet without bypass, and (5) LinkNet
Pedestrian
(a) Input Image
(b) Ground truth
(c) Prediction
Fig. 4: LinkNet prediction on Cityscapes test set.
(a) Input Image
(b) Ground truth
(c) Prediction
Fig. 5: LinkNet prediction on CamVid test set.
These performance values were calculated on validation dataset.
Input image of resolution 1024 × 512 was used for training
the network. A batch size of 10 and initial learning rate of
5e−4 was found to give optimum performance. Figure 4 shows
the predicted segmented output on couple of cityscapes test
b) CamVid: It is another automotive dataset which contains 367 training, 101 validation, and 233 testing images .
There are eleven different classes such as building, tree, sky,
car, road, etc. while the twelfth class contains unlabeled data,
which we ignore during training. The original frame resolution
for this dataset is 960 × 720 (W,H) but we downsampled the
images by a factor of 1.25 before training. Due to hardware
constraint, batch size of 8 was used to train the network.
In Table V we compare the performance of the proposed
algorithm with existing state-of-the-art algorithms on test set.
LinkNet outperforms all of them in both IoU and iIoU metrics.
Segmented output of LinkNet can be seen in Figure 5
V. CONCLUSION
We have proposed a novel neural network architecture
designed from the ground up speciﬁcally for semantic segmentation. Our main aim is to make efﬁcient use of scarce
resources available on embedded platforms, compared to fully
ﬂedged deep learning workstations. Our work provides large
gains in this task, while matching and at times exceeding
existing baseline models, that have an order of magnitude larger
computational and memory requirements. The application of
proposed network on the NVIDIA TX1 hardware exempliﬁes
real-time portable embedded solutions.
Even though the main goal was to run the network on mobile
devices, we have found that it is also very efﬁcient on high
end GPUs like NVIDIA Titan X. This may prove useful in
data-center applications, where there is a need of processing
large numbers of high resolution images. Our network allows
to perform large-scale computations in a much faster and more
efﬁcient manner, which might lead to signiﬁcant savings.
ACKNOWLEDGMENT
This work was partly supported by the Ofﬁce of Naval
Research (ONR) grants N00014-12-1-0167, N00014-15-1-2791
and MURI N00014-10-1-0278. We gratefully acknowledge the
support of NVIDIA Corporation with the donation of the TX1,
Titan X, K40 GPUs used for this research.