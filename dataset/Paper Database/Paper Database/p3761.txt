Deep Clustering for Unsupervised Learning
of Visual Features
Mathilde Caron, Piotr Bojanowski, Armand Joulin, and Matthijs Douze
Facebook AI Research
Abstract. Clustering is a class of unsupervised learning methods that
has been extensively applied and studied in computer vision. Little work
has been done to adapt it to the end-to-end training of visual features
on large scale datasets. In this work, we present DeepCluster, a clustering method that jointly learns the parameters of a neural network
and the cluster assignments of the resulting features. DeepCluster iteratively groups the features with a standard clustering algorithm, kmeans, and uses the subsequent assignments as supervision to update
the weights of the network. We apply DeepCluster to the unsupervised
training of convolutional neural networks on large datasets like ImageNet
and YFCC100M. The resulting model outperforms the current state of
the art by a signiﬁcant margin on all the standard benchmarks.
Keywords: unsupervised learning, clustering
Introduction
Pre-trained convolutional neural networks, or convnets, have become the building blocks in most computer vision applications . They produce excellent
general-purpose features that can be used to improve the generalization of models learned on a limited amount of data . The existence of ImageNet , a
large fully-supervised dataset, has been fueling advances in pre-training of convnets. However, Stock and Cisse have recently presented empirical evidence
that the performance of state-of-the-art classiﬁers on ImageNet is largely underestimated, and little error is left unresolved. This explains in part why the
performance has been saturating despite the numerous novel architectures proposed in recent years . As a matter of fact, ImageNet is relatively small
by today’s standards; it “only” contains a million images that cover the speciﬁc
domain of object classiﬁcation. A natural way to move forward is to build a bigger and more diverse dataset, potentially consisting of billions of images. This,
in turn, would require a tremendous amount of manual annotations, despite
the expert knowledge in crowdsourcing accumulated by the community over the
years . Replacing labels by raw metadata leads to biases in the visual representations with unpredictable consequences . This calls for methods that
can be trained on internet-scale datasets with no supervision.
Unsupervised learning has been widely studied in the Machine Learning community , and algorithms for clustering, dimensionality reduction or density
 
Mathilde Caron et al.
Fig. 1: Illustration of the proposed method: we iteratively cluster deep features
and use the cluster assignments as pseudo-labels to learn the parameters of the
estimation are regularly used in computer vision applications . For
example, the “bag of features” model uses clustering on handcrafted local descriptors to produce good image-level features . A key reason for their success
is that they can be applied on any speciﬁc domain or dataset, like satellite or
medical images, or on images captured with a new modality, like depth, where
annotations are not always available in quantity. Several works have shown that
it was possible to adapt unsupervised methods based on density estimation or dimensionality reduction to deep models , leading to promising all-purpose
visual features . Despite the primeval success of clustering approaches in
image classiﬁcation, very few works have been proposed to adapt them to
the end-to-end training of convnets, and never at scale. An issue is that clustering
methods have been primarily designed for linear models on top of ﬁxed features,
and they scarcely work if the features have to be learned simultaneously. For
example, learning a convnet with k-means would lead to a trivial solution where
the features are zeroed, and the clusters are collapsed into a single entity.
In this work, we propose a novel clustering approach for the large scale endto-end training of convnets. We show that it is possible to obtain useful generalpurpose visual features with a clustering framework. Our approach, summarized
in Figure 1, consists in alternating between clustering of the image descriptors
and updating the weights of the convnet by predicting the cluster assignments.
For simplicity, we focus our study on k-means, but other clustering approaches
can be used, like Power Iteration Clustering (PIC) . The overall pipeline is
suﬃciently close to the standard supervised training of a convnet to reuse many
common tricks . Unlike self-supervised methods , clustering has the
advantage of requiring little domain knowledge and no speciﬁc signal from the
inputs . Despite its simplicity, our approach achieves signiﬁcantly higher
performance than previously published unsupervised methods on both ImageNet
classiﬁcation and transfer tasks.
Finally, we probe the robustness of our framework by modifying the experimental protocol, in particular the training set and the convnet architecture.
The resulting set of experiments extends the discussion initiated by Doersch et
al. on the impact of these choices on the performance of unsupervised meth-
Deep Clustering for Unsupervised Learning of Visual Features
ods. We demonstrate that our approach is robust to a change of architecture.
Replacing an AlexNet by a VGG signiﬁcantly improves the quality of the
features and their subsequent transfer performance. More importantly, we discuss the use of ImageNet as a training set for unsupervised models. While it
helps understanding the impact of the labels on the performance of a network,
ImageNet has a particular image distribution inherited from its use for a ﬁnegrained image classiﬁcation challenge: it is composed of well-balanced classes and
contains a wide variety of dog breeds for example. We consider, as an alternative,
random Flickr images from the YFCC100M dataset of Thomee et al. . We
show that our approach maintains state-of-the-art performance when trained on
this uncured data distribution. Finally, current benchmarks focus on the capability of unsupervised convnets to capture class-level information. We propose
to also evaluate them on image retrieval benchmarks to measure their capability
to capture instance-level information.
In this paper, we make the following contributions: (i) a novel unsupervised
method for the end-to-end learning of convnets that works with any standard
clustering algorithm, like k-means, and requires minimal additional steps; (ii)
state-of-the-art performance on many standard transfer tasks used in unsupervised learning; (iii) performance above the previous state of the art when trained
on an uncured image distribution; (iv) a discussion about the current evaluation
protocol in unsupervised feature learning.
Related Work
Unsupervised learning of features. Several approaches related to our work
learn deep models with no supervision. Coates and Ng also use k-means
to pre-train convnets, but learn each layer sequentially in a bottom-up fashion,
while we do it in an end-to-end fashion. Other clustering losses have
been considered to jointly learn convnet features and image clusters but they
have never been tested on a scale to allow a thorough study on modern convnet
architectures. Of particular interest, Yang et al. iteratively learn convnet
features and clusters with a recurrent framework. Their model oﬀers promising
performance on small datasets but may be challenging to scale to the number of
images required for convnets to be competitive. Closer to our work, Bojanowski
and Joulin learn visual features on a large dataset with a loss that attempts
to preserve the information ﬂowing through the network . Their approach
discriminates between images in a similar way as examplar SVM , while we
are simply clustering them.
Self-supervised learning. A popular form of unsupervised learning, called
“self-supervised learning” , uses pretext tasks to replace the labels annotated
by humans by “pseudo-labels” directly computed from the raw input data. For
example, Doersch et al. use the prediction of the relative position of patches
in an image as a pretext task, while Noroozi and Favaro train a network to
spatially rearrange shuﬄed patches. Another use of spatial cues is the work of
Mathilde Caron et al.
Pathak et al. where missing pixels are guessed based on their surrounding.
Paulin et al. learn patch level Convolutional Kernel Network using an
image retrieval setting. Others leverage the temporal signal available in videos by
predicting the camera transformation between consecutive frames , exploiting the temporal coherence of tracked patches or segmenting video based
on motion . Appart from spatial and temporal coherence, many other signals have been explored: image colorization , cross-channel prediction ,
sound or instance counting . More recently, several strategies for combining multiple cues have been proposed . Contrary to our work, these
approaches are domain dependent, requiring expert knowledge to carefully design a pretext task that may lead to transferable features.
Generative models. Recently, unsupervised learning has been making a lot
of progress on image generation. Typically, a parametrized mapping is learned
between a predeﬁned random noise and the images, with either an autoencoder , a generative adversarial network (GAN) or more
directly with a reconstruction loss . Of particular interest, the discriminator of a GAN can produce visual features, but their performance are relatively
disappointing . Donahue et al. and Dumoulin et al. have shown
that adding an encoder to a GAN produces visual features that are much more
competitive.
After a short introduction to the supervised learning of convnets, we describe
our unsupervised approach as well as the speciﬁcities of its optimization.
Preliminaries
Modern approaches to computer vision, based on statistical learning, require
good image featurization. In this context, convnets are a popular choice for
mapping raw images to a vector space of ﬁxed dimensionality. When trained on
enough data, they constantly achieve the best performance on standard classi-
ﬁcation benchmarks . We denote by fθ the convnet mapping, where θ is
the set of corresponding parameters. We refer to the vector obtained by applying this mapping to an image as feature or representation. Given a training set
X = {x1, x2, . . . , xN} of N images, we want to ﬁnd a parameter θ∗such that
the mapping fθ∗produces good general-purpose features.
These parameters are traditionally learned with supervision, i.e. each image
xn is associated with a label yn in {0, 1}k. This label represents the image’s
membership to one of k possible predeﬁned classes. A parametrized classiﬁer gW
predicts the correct labels on top of the features fθ(xn). The parameters W of
the classiﬁer and the parameter θ of the mapping are then jointly learned by
Deep Clustering for Unsupervised Learning of Visual Features
optimizing the following problem:
ℓ(gW (fθ(xn)) , yn) ,
where ℓis the multinomial logistic loss, also known as the negative log-softmax
function. This cost function is minimized using mini-batch stochastic gradient
descent and backpropagation to compute the gradient .
Unsupervised learning by clustering
When θ is sampled from a Gaussian distribution, without any learning, fθ does
not produce good features. However the performance of such random features on
standard transfer tasks, is far above the chance level. For example, a multilayer
perceptron classiﬁer on top of the last convolutional layer of a random AlexNet
achieves 12% in accuracy on ImageNet while the chance is at 0.1% . The
good performance of random convnets is intimately tied to their convolutional
structure which gives a strong prior on the input signal. The idea of this work is
to exploit this weak signal to bootstrap the discriminative power of a convnet.
We cluster the output of the convnet and use the subsequent cluster assignments
as “pseudo-labels” to optimize Eq. (1). This deep clustering (DeepCluster) approach iteratively learns the features and groups them.
Clustering has been widely studied and many approaches have been developed for a variety of circumstances. In the absence of points of comparisons,
we focus on a standard clustering algorithm, k-means. Preliminary results with
other clustering algorithms indicates that this choice is not crucial. k-means
takes a set of vectors as input, in our case the features fθ(xn) produced by the
convnet, and clusters them into k distinct groups based on a geometric criterion. More precisely, it jointly learns a d × k centroid matrix C and the cluster
assignments yn of each image n by solving the following problem:
yn∈{0,1}k ∥fθ(xn) −Cyn∥2
Solving this problem provides a set of optimal assignments (y∗
n)n≤N and a centroid matrix C∗. These assignments are then used as pseudo-labels; we make no
use of the centroid matrix.
Overall, DeepCluster alternates between clustering the features to produce
pseudo-labels using Eq. (2) and updating the parameters of the convnet by
predicting these pseudo-labels using Eq. (1). This type of alternating procedure
is prone to trivial solutions; we describe how to avoid such degenerate solutions
in the next section.
Avoiding trivial solutions
The existence of trivial solutions is not speciﬁc to the unsupervised training of
neural networks, but to any method that jointly learns a discriminative classi-
ﬁer and the labels. Discriminative clustering suﬀers from this issue even when
Mathilde Caron et al.
applied to linear models . Solutions are typically based on constraining or
penalizing the minimal number of points per cluster . These terms are
computed over the whole dataset, which is not applicable to the training of convnets on large scale datasets. In this section, we brieﬂy describe the causes of
these trivial solutions and give simple and scalable workarounds.
Empty clusters. A discriminative model learns decision boundaries between
classes. An optimal decision boundary is to assign all of the inputs to a single cluster . This issue is caused by the absence of mechanisms to prevent
from empty clusters and arises in linear models as much as in convnets. A common trick used in feature quantization consists in automatically reassigning
empty clusters during the k-means optimization. More precisely, when a cluster
becomes empty, we randomly select a non-empty cluster and use its centroid
with a small random perturbation as the new centroid for the empty cluster. We
then reassign the points belonging to the non-empty cluster to the two resulting
Trivial parametrization. If the vast majority of images is assigned to a few
clusters, the parameters θ will exclusively discriminate between them. In the
most dramatic scenario where all but one cluster are singleton, minimizing
Eq. (1) leads to a trivial parametrization where the convnet will predict the
same output regardless of the input. This issue also arises in supervised classiﬁcation when the number of images per class is highly unbalanced. For example,
metadata, like hashtags, exhibits a Zipf distribution, with a few labels dominating the whole distribution . A strategy to circumvent this issue is to sample
images based on a uniform distribution over the classes, or pseudo-labels. This is
equivalent to weight the contribution of an input to the loss function in Eq. (1)
by the inverse of the size of its assigned cluster.
Implementation details
Convnet architectures. For comparison with previous works, we use a standard AlexNet architecture. It consists of ﬁve convolutional layers with 96,
256, 384, 384 and 256 ﬁlters; and of three fully connected layers. We remove the
Local Response Normalization layers and use batch normalization . We also
consider a VGG-16 architecture with batch normalization. Unsupervised
methods often do not work directly on color and diﬀerent strategies have been
considered as alternatives . We apply a ﬁxed linear transformation based
on Sobel ﬁlters to remove color and increase local contrast .
Training data. We train DeepCluster on ImageNet unless mentioned otherwise. It contains 1.3M images uniformly distributed into 1, 000 classes.
Optimization. We cluster the central cropped images features and perform
data augmentation (random horizontal ﬂips and crops of random sizes and aspect ratios) when training the network. This enforces invariance to data aug-
Deep Clustering for Unsupervised Learning of Visual Features
NMI t / labels ImageNet
(a) Clustering quality
NMI t-1 / t
(b) Cluster reassignment
(c) Inﬂuence of k
Fig. 2: Preliminary studies. (a): evolution of the clustering quality along training epochs; (b): evolution of cluster reassignments at each clustering step; (c):
validation mAP classiﬁcation performance for various choices of k.
mentation which is useful for feature learning . The network is trained with
dropout , a constant step size, an ℓ2 penalization of the weights θ and a momentum of 0.9. Each mini-batch contains 256 images. For the clustering, features
are PCA-reduced to 256 dimensions, whitened and ℓ2-normalized. We use the
k-means implementation of Johnson et al. . Note that running k-means takes
a third of the time because a forward pass on the full dataset is needed. One
could reassign the clusters every n epochs, but we found out that our setup on
ImageNet (updating the clustering every epoch) was nearly optimal. On Flickr,
the concept of epoch disappears: choosing the tradeoﬀbetween the parameter
updates and the cluster reassignments is more subtle. We thus kept almost the
same setup as in ImageNet. We train the models for 500 epochs, which takes 12
days on a Pascal P100 GPU for AlexNet.
Hyperparameter selection. We select hyperparameters on a down-stream
task, i.e., object classiﬁcation on the validation set of Pascal VOC with no
ﬁne-tuning. We use the publicly available code of Kr¨ahenb¨uhl1.
Experiments
In a preliminary set of experiments, we study the behavior of DeepCluster during training. We then qualitatively assess the ﬁlters learned with DeepCluster
before comparing our approach to previous state-of-the-art models on standard
benchmarks.
1 
Mathilde Caron et al.
Fig. 3: Filters from the ﬁrst layer of an AlexNet trained on unsupervised ImageNet on raw RGB input (left) or after a Sobel ﬁltering (right).
Preliminary study
We measure the information shared between two diﬀerent assignments A and B
of the same data by the Normalized Mutual Information (NMI), deﬁned as:
NMI(A; B) =
where I denotes the mutual information and H the entropy. This measure can
be applied to any assignment coming from the clusters or the true labels. If the
two assignments A and B are independent, the NMI is equal to 0. If one of them
is deterministically predictable from the other, the NMI is equal to 1.
Relation between clusters and labels. Figure 2(a) shows the evolution of
the NMI between the cluster assignments and the ImageNet labels during training. It measures the capability of the model to predict class level information.
Note that we only use this measure for this analysis and not in any model selection process. The dependence between the clusters and the labels increases
over time, showing that our features progressively capture information related
to object classes.
Number of reassignments between epochs. At each epoch, we reassign the
images to a new set of clusters, with no guarantee of stability. Measuring the
NMI between the clusters at epoch t −1 and t gives an insight on the actual
stability of our model. Figure 2(b) shows the evolution of this measure during
training. The NMI is increasing, meaning that there are less and less reassignments and the clusters are stabilizing over time. However, NMI saturates below
0.8, meaning that a signiﬁcant fraction of images are regularly reassigned between epochs. In practice, this has no impact on the training and the models do
not diverge.
Choosing the number of clusters. We measure the impact of the number k of
clusters used in k-means on the quality of the model. We report the same down-
Deep Clustering for Unsupervised Learning of Visual Features
Fig. 4: Filter visualization and top 9 activated images from a subset of 1 million
images from YFCC100M for target ﬁlters in the layers conv1, conv3 and conv5
of an AlexNet trained with DeepCluster on ImageNet. The ﬁlter visualization
is obtained by learning an input image that maximizes the response to a target
ﬁlter .
stream task as in the hyperparameter selection process, i.e. mAP on the Pascal
VOC 2007 classiﬁcation validation set. We vary k on a logarithmic scale, and
report results after 300 epochs in Figure 2(c). The performance after the same
number of epochs for every k may not be directly comparable, but it reﬂects
the hyper-parameter selection process used in this work. The best performance
is obtained with k = 10, 000. Given that we train our model on ImageNet, one
would expect k = 1000 to yield the best results, but apparently some amount of
over-segmentation is beneﬁcial.
Visualizations
First layer ﬁlters. Figure 3 shows the ﬁlters from the ﬁrst layer of an AlexNet
trained with DeepCluster on raw RGB images and images preprocessed with a
Sobel ﬁltering. The diﬃculty of learning convnets on raw images has been noted
before . As shown in the left panel of Fig. 3, most ﬁlters capture only
color information that typically plays a little role for object classiﬁcation .
Filters obtained with Sobel preprocessing act like edge detectors.
Probing deeper layers. We assess the quality of a target ﬁlter by learning
an input image that maximizes its activation . We follow the process
described by Yosinki et al. with a cross entropy function between the target
ﬁlter and the other ﬁlters of the same layer. Figure 4 shows these synthetic
images as well as the 9 top activated images from a subset of 1 million images
from YFCC100M. As expected, deeper layers in the network seem to capture
larger textural structures. However, some ﬁlters in the last convolutional layers
seem to be simply replicating the texture already captured in previous layers,
as shown on the second row of Fig. 5. This result corroborates the observation
Mathilde Caron et al.
Filter 145
Filter 194
Filter 116
Filter 119
Filter 182
Fig. 5: Top 9 activated images from a random subset of 10 millions images from
YFCC100M for target ﬁlters in the last convolutional layer. The top row corresponds to ﬁlters sensitive to activations by images containing objects. The
bottom row exhibits ﬁlters more sensitive to stylistic eﬀects. For instance, the
ﬁlters 119 and 182 seem to be respectively excited by background blur and depth
of ﬁeld eﬀects.
by Zhang et al. that features from conv3 or conv4 are more discriminative
than those from conv5.
Finally, Figure 5 shows the top 9 activated images of some conv5 ﬁlters that
seem to be semantically coherent. The ﬁlters on the top row contain information
about structures that highly corrolate with object classes. The ﬁlters on the
bottom row seem to trigger on style, like drawings or abstract shapes.
Linear classiﬁcation on activations
Following Zhang et al. , we train a linear classiﬁer on top of diﬀerent frozen
convolutional layers. This layer by layer comparison with supervised features
exhibits where a convnet starts to be task speciﬁc, i.e. specialized in object
classiﬁcation. We report the results of this experiment on ImageNet and the
Places dataset in Table 1. We choose the hyperparameters by cross-validation
on the training set. On ImageNet, DeepCluster outperforms the state of the art
from conv3 to conv5 layers by 3−5%. The largest improvement is observed in the
conv4 layer, while the conv1 layer performs poorly, probably because the Sobel
ﬁltering discards color. Consistently with the ﬁlter visualizations of Sec. 4.2,
conv3 works better than conv5. Finally, the diﬀerence of performance between
DeepCluster and a supervised AlexNet grows signiﬁcantly on higher layers: at
layers conv2-conv3 the diﬀerence is only around 6%, but this diﬀerence rises to
Deep Clustering for Unsupervised Learning of Visual Features
conv1 conv2 conv3 conv4 conv5
conv1 conv2 conv3 conv4 conv5
Places labels
ImageNet labels
Pathak et al. 
Doersch et al. 
Zhang et al. 
Donahue et al. 
Noroozi and Favaro 
Noroozi et al. 
Zhang et al. 
DeepCluster
Table 1: Linear classiﬁcation on ImageNet and Places using activations from the
convolutional layers of an AlexNet as features. We report classiﬁcation accuracy
on the central crop. Numbers for other methods are from Zhang et al. .
14.4% at conv5, marking where the AlexNet probably stores most of the class
level information. In the supplementary material, we also report the accuracy if
a MLP is trained on the last layer; DeepCluster outperforms the state of the art
The same experiment on the Places dataset provides some interesting insights: like DeepCluster, a supervised model trained on ImageNet suﬀers from
a decrease of performance for higher layers (conv4 versus conv5). Moreover,
DeepCluster yields conv3-4 features that are comparable to those trained with
ImageNet labels. This suggests that when the target task is suﬃcently far from
the domain covered by ImageNet, labels are less important.
Pascal VOC 2007
Finally, we do a quantitative evaluation of DeepCluster on image classiﬁcation,
object detection and semantic segmentation on Pascal VOC. The relatively
small size of the training sets on Pascal VOC (2, 500 images) makes this setup
closer to a “real-world” application, where a model trained with heavy computational resources, is adapted to a task or a dataset with a small number of
instances. Detection results are obtained using fast-rcnn2; segmentation results are obtained using the code of Shelhamer et al.3. For classiﬁcation and
detection, we report the performance on the test set of Pascal VOC 2007 and
choose our hyperparameters on the validation set. For semantic segmentation,
following the related work, we report the performance on the validation set of
Pascal VOC 2012.
2 
3 
Mathilde Caron et al.
Classiﬁcation
Segmentation
ImageNet labels
Random-rgb
Random-sobel
Pathak et al. 
Donahue et al. ∗
Pathak et al. 
Owens et al. ∗
Wang and Gupta ∗
32.8† 47.2
Doersch et al. ∗
Bojanowski and Joulin ∗
33.7† 49.4
Zhang et al. ∗
43.4† 46.9
Zhang et al. ∗
Noroozi and Favaro 
Noroozi et al. 
DeepCluster
Table 2: Comparison of the proposed approach to state-of-the-art unsupervised
feature learning on classiﬁcation, detection and segmentation on Pascal VOC.
∗indicates the use of the data-dependent initialization of Kr¨ahenb¨uhl et al. .
Numbers for other methods produced by us are marked with a †.
Table 2 summarized the comparisons of DeepCluster with other featurelearning approaches on the three tasks. As for the previous experiments, we
outperform previous unsupervised methods on all three tasks, in every setting.
The improvement with ﬁne-tuning over the state of the art is the largest on semantic segmentation (7.5%). On detection, DeepCluster performs only slightly
better than previously published methods. Interestingly, a ﬁne-tuned random
network performs comparatively to many unsupervised methods, but performs
poorly if only fc6-8 are learned. For this reason, we also report detection and
segmentation with fc6-8 for DeepCluster and a few baselines. These tasks are
closer to a real application where ﬁne-tuning is not possible. It is in this setting
that the gap between our approach and the state of the art is the greater (up to
9% on classiﬁcation).
Discussion
The current standard for the evaluation of an unsupervised method involves the
use of an AlexNet architecture trained on ImageNet and tested on class-level
tasks. To understand and measure the various biases introduced by this pipeline
on DeepCluster, we consider a diﬀerent training set, a diﬀerent architecture and
an instance-level recognition task.
Deep Clustering for Unsupervised Learning of Visual Features
Classiﬁcation
Segmentation
Training set
Best competitor
43.4† 53.2
DeepCluster
DeepCluster
Table 3: Impact of the training set on the performance of DeepCluster measured on the Pascal VOC transfer tasks as described in Sec. 4.4. We compare
ImageNet with a subset of 1M images from YFCC100M . Regardless of the
training set, DeepCluster outperforms the best published numbers on most tasks.
Numbers for other methods produced by us are marked with a †
ImageNet versus YFCC100M
ImageNet is a dataset designed for a ﬁne-grained object classiﬁcation challenge . It is object oriented, manually annotated and organised into well
balanced object categories. By design, DeepCluster favors balanced clusters and,
as discussed above, our number of cluster k is somewhat comparable with the
number of labels in ImageNet. This may have given an unfair advantage to
DeepCluster over other unsupervised approaches when trained on ImageNet. To
measure the impact of this eﬀect, we consider a subset of randomly-selected 1M
images from the YFCC100M dataset for the pre-training. Statistics on the
hashtags used in YFCC100M suggests that the underlying “object classes” are
severly unbalanced , leading to a data distribution less favorable to Deep-
Table 3 shows the diﬀerence in performance on Pascal VOC of DeepCluster pre-trained on YFCC100M compared to ImageNet. As noted by Doersch et
al. , this dataset is not object oriented, hence the performance are expected to
drop by a few percents. However, even when trained on uncured Flickr images,
DeepCluster outperforms the current state of the art by a signiﬁcant margin
on most tasks (up to +4.3% on classiﬁcation and +4.5% on semantic segmentation). We report the rest of the results in the supplementary material with
similar conclusions. This experiment validates that DeepCluster is robust to a
change of image distribution, leading to state-of-the-art general-purpose visual
features even if this distribution is not favorable to its design.
AlexNet versus VGG
In the supervised setting, deeper architectures like VGG or ResNet have a
much higher accuracy on ImageNet than AlexNet. We should expect the same
improvement if these architectures are used with an unsupervised approach. Table 4 compares a VGG-16 and an AlexNet trained with DeepCluster on ImageNet
and tested on the Pascal VOC 2007 object detection task with ﬁne-tuning. We
also report the numbers obtained with other unsupervised approaches .
Mathilde Caron et al.
AlexNet VGG-16
ImageNet labels
Doersch et al. 
Wang and Gupta 
Wang et al. 
DeepCluster
Table 4: Pascal VOC 2007 object
detection with AlexNet and VGG-
16. Numbers are taken from Wang et
Oxford5K Paris6K
ImageNet labels
Doersch et al. 
Wang et al. 
DeepCluster
Table 5: mAP on instance-level image retrieval on Oxford and Paris
dataset with a VGG-16. We apply
R-MAC with a resolution of 1024
pixels and 3 grid levels .
Regardless of the approach, a deeper architecture leads to a signiﬁcant improvement in performance on the target task. Training the VGG-16 with DeepCluster
gives a performance above the state of the art, bringing us to only 1.4 percents
below the supervised topline. Note that the diﬀerence between unsupervised and
supervised approaches remains in the same ballpark for both architectures (i.e.
1.4%). Finally, the gap with a random baseline grows for larger architectures,
justifying the relevance of unsupervised pre-training for complex architectures
when little supervised data is available.
Evaluation on instance retrieval
The previous benchmarks measure the capability of an unsupervised network to
capture class level information. They do not evaluate if it can diﬀerentiate images
at the instance level. To that end, we propose image retrieval as a down-stream
task. We follow the experimental protocol of Tolias et al. on two datasets,
i.e., Oxford Buildings and Paris . Table 5 reports the performance of a
VGG-16 trained with diﬀerent approaches obtained with Sobel ﬁltering, except
for Doersch et al. and Wang et al. . This preprocessing improves by
5.5 points the mAP of a supervised VGG-16 on the Oxford dataset, but not on
Paris. This may translate in a similar advantage for DeepCluster, but it does not
account for the average diﬀerences of 19 points. Interestingly, random convnets
perform particularly poorly on this task compared to pre-trained models. This
suggests that image retrieval is a task where the pre-training is essential and
studying it as a down-stream task could give further insights about the quality
of the features produced by unsupervised approaches.
Conclusion
In this paper, we propose a scalable clustering approach for the unsupervised
learning of convnets. It iterates between clustering with k-means the features
Deep Clustering for Unsupervised Learning of Visual Features
produced by the convnet and updating its weights by predicting the cluster assignments as pseudo-labels in a discriminative loss. If trained on large dataset like
ImageNet or YFCC100M, it achieves performance that are signiﬁcantly better
than the previous state-of-the-art on every standard transfer task. Our approach
makes little assumption about the inputs, and does not require much domain
speciﬁc knowledge, making it a good candidate to learn deep representations
speciﬁc to domains where annotations are scarce.
Acknowledgement. We thank Alexandre Sablayrolles and the rest of the FAIR
team for their feedback and fruitful discussion around this paper. We would like
to particularly thank Ishan Misra for spotting an error in our evaluation setting
of Table 1.
Mathilde Caron et al.