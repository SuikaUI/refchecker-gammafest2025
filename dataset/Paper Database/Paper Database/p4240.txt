Published as a conference paper at ICLR 2021
DENOISING DIFFUSION IMPLICIT MODELS
Jiaming Song, Chenlin Meng & Stefano Ermon
Stanford University
{tsong,chenlin,ermon}@cs.stanford.edu
Denoising diffusion probabilistic models (DDPMs) have achieved high quality image generation without adversarial training, yet they require simulating a
Markov chain for many steps in order to produce a sample. To accelerate sampling, we present denoising diffusion implicit models (DDIMs), a more efﬁcient
class of iterative implicit probabilistic models with the same training procedure as
DDPMs. In DDPMs, the generative process is deﬁned as the reverse of a particular
Markovian diffusion process. We generalize DDPMs via a class of non-Markovian
diffusion processes that lead to the same training objective. These non-Markovian
processes can correspond to generative processes that are deterministic, giving rise
to implicit models that produce high quality samples much faster. We empirically
demonstrate that DDIMs can produce high quality samples 10× to 50× faster in
terms of wall-clock time compared to DDPMs, allow us to trade off computation
for sample quality, perform semantically meaningful image interpolation directly
in the latent space, and reconstruct observations with very low error.
INTRODUCTION
Deep generative models have demonstrated the ability to produce high quality samples in many
domains . In terms of image generation, generative adversarial networks ) currently exhibits higher sample quality
than likelihood-based methods such as variational autoencoders , autoregressive models and normalizing ﬂows . However, GANs require very speciﬁc choices in optimization and architectures
in order to stabilize training , and could fail to cover modes of the data distribution .
Recent works on iterative generative models , such as denoising diffusion probabilistic models ) and noise conditional score networks ) have demonstrated the ability to produce samples comparable to that of GANs, without having to perform adversarial training. To achieve this, many denoising autoencoding models
are trained to denoise samples corrupted by various levels of Gaussian noise. Samples are then
produced by a Markov chain which, starting from white noise, progressively denoises it into an image. This generative Markov Chain process is either based on Langevin dynamics or obtained by reversing a forward diffusion process that progressively turns an image into
noise .
A critical drawback of these models is that they require many iterations to produce a high quality
sample. For DDPMs, this is because that the generative process (from noise to data) approximates
the reverse of the forward diffusion process (from data to noise), which could have thousands of
steps; iterating over all the steps is required to produce a single sample, which is much slower
compared to GANs, which only needs one pass through a network. For example, it takes around 20
hours to sample 50k images of size 32 × 32 from a DDPM, but less than a minute to do so from
a GAN on a Nvidia 2080 Ti GPU. This becomes more problematic for larger images as sampling
50k images of size 256 × 256 could take nearly 1000 hours on the same GPU.
To close this efﬁciency gap between DDPMs and GANs, we present denoising diffusion implicit
models (DDIMs). DDIMs are implicit probabilistic models 
and are closely related to DDPMs, in the sense that they are trained with the same objective function.
 
Published as a conference paper at ICLR 2021
Figure 1: Graphical models for diffusion (left) and non-Markovian (right) inference models.
In Section 3, we generalize the forward diffusion process used by DDPMs, which is Markovian,
to non-Markovian ones, for which we are still able to design suitable reverse generative Markov
chains. We show that the resulting variational training objectives have a shared surrogate objective,
which is exactly the objective used to train DDPM. Therefore, we can freely choose from a large
family of generative models using the same neural network simply by choosing a different, non-
Markovian diffusion process (Section 4.1) and the corresponding reverse generative Markov Chain.
In particular, we are able to use non-Markovian diffusion processes which lead to ”short” generative
Markov chains (Section 4.2) that can be simulated in a small number of steps. This can massively
increase sample efﬁciency only at a minor cost in sample quality.
In Section 5, we demonstrate several empirical beneﬁts of DDIMs over DDPMs. First, DDIMs have
superior sample generation quality compared to DDPMs, when we accelerate sampling by 10× to
100× using our proposed method. Second, DDIM samples have the following “consistency” property, which does not hold for DDPMs: if we start with the same initial latent variable and generate
several samples with Markov chains of various lengths, these samples would have similar high-level
features. Third, because of “consistency” in DDIMs, we can perform semantically meaningful image
interpolation by manipulating the initial latent variable in DDIMs, unlike DDPMs which interpolates
near the image space due to the stochastic generative process.
BACKGROUND
Given samples from a data distribution q(x0), we are interested in learning a model distribution
pθ(x0) that approximates q(x0) and is easy to sample from. Denoising diffusion probabilistic models ; Ho et al. ) are latent variable models of the form
pθ(x0:T )dx1:T ,
pθ(x0:T ) := pθ(xT )
θ (xt−1|xt)
where x1, . . . , xT are latent variables in the same sample space as x0 (denoted as X). The parameters θ are learned to ﬁt the data distribution q(x0) by maximizing a variational lower bound:
Eq(x0)[log pθ(x0)] ≤max
Eq(x0,x1,...,xT ) [log pθ(x0:T ) −log q(x1:T |x0)]
where q(x1:T |x0) is some inference distribution over the latent variables. Unlike typical latent variable models ), DDPMs are learned with a
ﬁxed (rather than trainable) inference procedure q(x1:T |x0), and latent variables are relatively high
dimensional. For example, Ho et al. considered the following Markov chain with Gaussian
transitions parameterized by a decreasing sequence α1:T ∈(0, 1]T :
q(x1:T |x0) :=
q(xt|xt−1), where q(xt|xt−1) := N
where the covariance matrix is ensured to have positive terms on its diagonal. This is called the
forward process due to the autoregressive nature of the sampling procedure (from x0 to xT ). We
call the latent variable model pθ(x0:T ), which is a Markov chain that samples from xT to x0, the
generative process, since it approximates the intractable reverse process q(xt−1|xt). Intuitively,
the forward process progressively adds noise to the observation x0, whereas the generative process
progressively denoises a noisy observation (Figure 1, left).
A special property of the forward process is that
q(xt|x0) :=
q(x1:t|x0)dx1:(t−1) = N(xt; √αtx0, (1 −αt)I);
Published as a conference paper at ICLR 2021
so we can express xt as a linear combination of x0 and a noise variable ϵ:
xt = √αtx0 +
ϵ ∼N(0, I).
When we set αT sufﬁciently close to 0, q(xT |x0) converges to a standard Gaussian for all x0, so it
is natural to set pθ(xT ) := N(0, I). If all the conditionals are modeled as Gaussians with trainable
mean functions and ﬁxed variances, the objective in Eq. (2) can be simpliﬁed to1:
γtEx0∼q(x0),ϵt∼N(0,I)
θ (√αtx0 +
1 −αtϵt) −ϵt∥
where ϵθ := {ϵ(t)
t=1 is a set of T functions, each ϵ(t)
: X →X (indexed by t) is a function with
trainable parameters θ(t), and γ := [γ1, . . . , γT ] is a vector of positive coefﬁcients in the objective
that depends on α1:T . In Ho et al. , the objective with γ = 1 is optimized instead to maximize
generation performance of the trained model; this is also the same objective used in noise conditional
score networks based on score matching .
From a trained model, x0 is sampled by ﬁrst sampling xT from the prior pθ(xT ), and then sampling
xt−1 from the generative processes iteratively.
The length T of the forward process is an important hyperparameter in DDPMs. From a variational
perspective, a large T allows the reverse process to be close to a Gaussian , so that the generative process modeled with Gaussian conditional distributions becomes a
good approximation; this motivates the choice of large T values, such as T = 1000 in Ho et al.
 . However, as all T iterations have to be performed sequentially, instead of in parallel, to obtain a sample x0, sampling from DDPMs is much slower than sampling from other deep generative
models, which makes them impractical for tasks where compute is limited and latency is critical.
VARIATIONAL INFERENCE FOR NON-MARKOVIAN FORWARD PROCESSES
Because the generative model approximates the reverse of the inference process, we need to rethink
the inference process in order to reduce the number of iterations required by the generative model.
Our key observation is that the DDPM objective in the form of Lγ only depends on the marginals2
q(xt|x0), but not directly on the joint q(x1:T |x0). Since there are many inference distributions
(joints) with the same marginals, we explore alternative inference processes that are non-Markovian,
which leads to new generative processes (Figure 1, right). These non-Markovian inference process
lead to the same surrogate objective function as DDPM, as we will show below. In Appendix A, we
show that the non-Markovian perspective also applies beyond the Gaussian case.
NON-MARKOVIAN FORWARD PROCESSES
Let us consider a family Q of inference distributions, indexed by a real vector σ ∈RT
qσ(x1:T |x0) := qσ(xT |x0)
qσ(xt−1|xt, x0)
where qσ(xT |x0) = N(√αT x0, (1 −αT )I) and for all t > 1,
qσ(xt−1|xt, x0) = N
√αt−1x0 +
1 −αt−1 −σ2
t · xt −√αtx0
The mean function is chosen to order to ensure that qσ(xt|x0) = N(√αtx0, (1 −αt)I) for all
t (see Lemma 1 of Appendix B), so that it deﬁnes a joint inference distribution that matches the
“marginals” as desired. The forward process3 can be derived from Bayes’ rule:
qσ(xt|xt−1, x0) = qσ(xt−1|xt, x0)qσ(xt|x0)
qσ(xt−1|x0)
1Please refer to Appendix C.2 for details.
2We slightly abuse this term (as well as joints) when only conditioned on x0.
3We overload the term “forward process” for cases where the inference model is not a diffusion.
Published as a conference paper at ICLR 2021
which is also Gaussian (although we do not use this fact for the remainder of this paper). Unlike the
diffusion process in Eq. (3), the forward process here is no longer Markovian, since each xt could
depend on both xt−1 and x0. The magnitude of σ controls the how stochastic the forward process
is; when σ →0, we reach an extreme case where as long as we observe x0 and xt for some t, then
xt−1 become known and ﬁxed.
GENERATIVE PROCESS AND UNIFIED VARIATIONAL INFERENCE OBJECTIVE
Next, we deﬁne a trainable generative process pθ(x0:T ) where each p(t)
θ (xt−1|xt) leverages knowledge of qσ(xt−1|xt, x0). Intuitively, given a noisy observation xt, we ﬁrst make a prediction4
of the corresponding x0, and then use it to obtain a sample xt−1 through the reverse conditional
distribution qσ(xt−1|xt, x0), which we have deﬁned.
For some x0 ∼q(x0) and ϵt ∼N(0, I), xt can be obtained using Eq. (4). The model ϵ(t)
θ (xt) then
attempts to predict ϵt from xt, without knowledge of x0. By rewriting Eq. (4), one can then predict
the denoised observation, which is a prediction of x0 given xt:
θ (xt) := (xt −
1 −αt · ϵ(t)
θ (xt))/√αt.
We can then deﬁne the generative process with a ﬁxed prior pθ(xT ) = N(0, I) and
θ (xt−1|xt) =
qσ(xt−1|xt, f (t)
otherwise,
where qσ(xt−1|xt, f (t)
θ (xt)) is deﬁned as in Eq. (7) with x0 replaced by f (t)
θ (xt). We add some
Gaussian noise (with covariance σ2
1I) for the case of t = 1 to ensure that the generative process is
supported everywhere.
We optimize θ via the following variational inference objective (which is a functional over ϵθ):
Jσ(ϵθ) := Ex0:T ∼qσ(x0:T )[log qσ(x1:T |x0) −log pθ(x0:T )]
= Ex0:T ∼qσ(x0:T )
log qσ(xT |x0) +
log qσ(xt−1|xt, x0) −
θ (xt−1|xt) −log pθ(xT )
where we factorize qσ(x1:T |x0) according to Eq. (6) and pθ(x0:T ) according to Eq. (1).
From the deﬁnition of Jσ, it would appear that a different model has to be trained for every choice
of σ, since it corresponds to a different variational objective (and a different generative process).
However, Jσ is equivalent to Lγ for certain weights γ, as we show below.
Theorem 1. For all σ > 0, there exists γ ∈RT
>0 and C ∈R, such that Jσ = Lγ + C.
The variational objective Lγ is special in the sense that if parameters θ of the models ϵ(t)
shared across different t, then the optimal solution for ϵθ will not depend on the weights γ (as global
optimum is achieved by separately maximizing each term in the sum). This property of Lγ has
two implications. On the one hand, this justiﬁed the use of L1 as a surrogate objective function for
the variational lower bound in DDPMs; on the other hand, since Jσ is equivalent to some Lγ from
Theorem 1, the optimal solution of Jσ is also the same as that of L1. Therefore, if parameters are
not shared across t in the model ϵθ, then the L1 objective used by Ho et al. can be used as a
surrogate objective for the variational objective Jσ as well.
SAMPLING FROM GENERALIZED GENERATIVE PROCESSES
With L1 as the objective, we are not only learning a generative process for the Markovian inference
process considered in Sohl-Dickstein et al. and Ho et al. , but also generative processes
for many non-Markovian forward processes parametrized by σ that we have described. Therefore,
we can essentially use pretrained DDPM models as the solutions to the new objectives, and focus on
ﬁnding a generative process that is better at producing samples subject to our needs by changing σ.
4Learning a distribution over the predictions is also possible, but empirically we found little beneﬁts of it.
Published as a conference paper at ICLR 2021
Figure 2: Graphical model for accelerated generation, where τ = .
DENOISING DIFFUSION IMPLICIT MODELS
From pθ(x1:T ) in Eq. (10), one can generate a sample xt−1 from a sample xt via:
xt−1 = √αt−1
xt −√1 −αtϵ(t)
“ predicted x0”
1 −αt−1 −σ2
“direction pointing to xt”
random noise
where ϵt ∼N(0, I) is standard Gaussian noise independent of xt, and we deﬁne α0 := 1. Different
choices of σ values results in different generative processes, all while using the same model ϵθ, so
re-training the model is unnecessary. When σt =
(1 −αt−1)/(1 −αt)
1 −αt/αt−1 for all t,
the forward process becomes Markovian, and the generative process becomes a DDPM.
We note another special case when σt = 0 for all t5; the forward process becomes deterministic
given xt−1 and x0, except for t = 1; in the generative process, the coefﬁcient before the random
noise ϵt becomes zero. The resulting model becomes an implicit probabilistic model , where samples are generated from latent variables with a ﬁxed procedure
(from xT to x0). We name this the denoising diffusion implicit model (DDIM, pronounced /d:Im/),
because it is an implicit probabilistic model trained with the DDPM objective (despite the forward
process no longer being a diffusion).
ACCELERATED GENERATION PROCESSES
In the previous sections, the generative process is considered as the approximation to the reverse
process; since of the forward process has T steps, the generative process is also forced to sample T
steps. However, as the denoising objective L1 does not depend on the speciﬁc forward procedure
as long as qσ(xt|x0) is ﬁxed, we may also consider forward processes with lengths smaller than T,
which accelerates the corresponding generative processes without having to train a different model.
Let us consider the forward process as deﬁned not on all the latent variables x1:T , but on a
subset {xτ1, . . . , xτS}, where τ is an increasing sub-sequence of [1, . . . , T] of length S.
particular, we deﬁne the sequential forward process over xτ1, . . . , xτS such that q(xτi|x0) =
N(√ατix0, (1 −ατi)I) matches the “marginals” (see Figure 2 for an illustration). The generative
process now samples latent variables according to reversed(τ), which we term (sampling) trajectory. When the length of the sampling trajectory is much smaller than T, we may achieve signiﬁcant
increases in computational efﬁciency due to the iterative nature of the sampling process.
Using a similar argument as in Section 3, we can justify using the model trained with the L1 objective, so no changes are needed in training. We show that only slight changes to the updates in
Eq. (12) are needed to obtain the new, faster generative processes, which applies to DDPM, DDIM,
as well as all generative processes considered in Eq. (10). We include these details in Appendix C.1.
In principle, this means that we can train a model with an arbitrary number of forward steps but only
sample from some of them in the generative process. Therefore, the trained model could consider
many more steps than what is considered in or even a continuous time variable t
 . We leave empirical investigations of this aspect as future work.
5Although this case is not covered in Theorem 1, we can always approximate it by making σt very small.
Published as a conference paper at ICLR 2021
RELEVANCE TO NEURAL ODES
Moreover, we can rewrite the DDIM iterate according to Eq. (12), and its similarity to Euler integration for solving ordinary differential equations (ODEs) becomes more apparent:
To derive the corresponding ODE, we can reparameterize (√1 −α/√α) with σ and (x/√α) with
¯x. In the continuous case, σ and x are functions of t, where σ : R≥0 →R≥0 is continous, increasing
with σ(0) = 0. Equation (13) with can be treated as a Euler method over the following ODE:
d¯x(t) = ϵ(t)
where the initial conditions is x(T) ∼N(0, σ(T)) for a very large σ(T) (which corresponds to the
case of α ≈0). This suggests that with enough discretization steps, the we can also reverse the
generation process (going from t = 0 to T), which encodes x0 to xT and simulates the reverse of
the ODE in Eq. (14). This suggests that unlike DDPM, we can use DDIM to obtain encodings of
the observations (as the form of xT ), which might be useful for other downstream applications that
requires latent representations of a model.
In a concurrent work, proposed a “probability ﬂow ODE” that aims to recover the
marginal densities of a stochastic differential equation (SDE) based on scores, from which a similar
sampling schedule can be obtained. Here, we state that the our ODE is equivalent to a special case
of theirs (which corresponds to a continuous-time analog of DDPM).
Proposition 1. The ODE in Eq. (14) with the optimal model ϵ(t)
has an equivalent probability ﬂow
ODE corresponding to the “Variance-Exploding” SDE in Song et al. .
We include the proof in Appendix B. While the ODEs are equivalent, the sampling procedures are
not, since the Euler method for the probability ﬂow ODE will make the following update:
which is equivalent to ours if αt and αt−∆t are close enough. In fewer sampling steps, however,
these choices will make a difference; we take Euler steps with respect to dσ(t) (which depends less
directly on the scaling of “time” t) whereas Song et al. take Euler steps with respect to dt.
EXPERIMENTS
In this section, we show that DDIMs outperform DDPMs in terms of image generation when fewer
iterations are considered, giving speed ups of 10× to 100× over the original DDPM generation
process. Moreover, unlike DDPMs, once the initial latent variables xT are ﬁxed, DDIMs retain highlevel image features regardless of the generation trajectory, so they are able to perform interpolation
directly from the latent space. DDIMs can also be used to encode samples that reconstruct them
from the latent code, which DDPMs cannot do due to the stochastic sampling process.
For each dataset, we use the same trained model with T = 1000 and the objective being Lγ
from Eq. (5) with γ = 1; as we argued in Section 3, no changes are needed with regards to the
training procedure. The only changes that we make is how we produce samples from the model;
we achieve this by controlling τ (which controls how fast the samples are obtained) and σ (which
interpolates between the deterministic DDIM and the stochastic DDPM).
We consider different sub-sequences τ of [1, . . . , T] and different variance hyperparameters σ indexed by elements of τ. To simplify comparisons, we consider σ with the form:
στi(η) = η
(1 −ατi−1)/(1 −ατi)
1 −ατi/ατi−1,
where η ∈R≥0 is a hyperparameter that we can directly control. This includes an original DDPM
generative process when η = 1 and DDIM when η = 0. We also consider DDPM where the random
noise has a larger standard deviation than σ(1), which we denote as ˆσ: ˆστi =
1 −ατi/ατi−1 .
This is used by the implementation in Ho et al. only to obtain the CIFAR10 samples, but
not samples of the other datasets. We include more details in Appendix D.
Published as a conference paper at ICLR 2021
Table 1: CIFAR10 and CelebA image generation measured in FID. η = 1.0 and ˆσ are cases of
DDPM only considered T = 1000 steps, and S < T can be seen as
simulating DDPMs trained with S steps), and η = 0.0 indicates DDIM.
CIFAR10 (32 × 32)
CelebA (64 × 64)
dim( ) = 10
dim( ) = 100
dim( ) = 10
dim( ) = 100
Figure 3: CIFAR10 and CelebA samples with dim(τ) = 10 and dim(τ) = 100.
SAMPLE QUALITY AND EFFICIENCY
In Table 1, we report the quality of the generated samples with models trained on CIFAR10 and
CelebA, as measured by Frechet Inception Distance ), where we vary
the number of timesteps used to generate a sample (dim(τ)) and the stochasticity of the process
(η). As expected, the sample quality becomes higher as we increase dim(τ), presenting a tradeoff between sample quality and computational costs. We observe that DDIM (η = 0) achieves the
best sample quality when dim(τ) is small, and DDPM (η = 1 and ˆσ) typically has worse sample
quality compared to its less stochastic counterparts with the same dim(τ), except for the case for
dim(τ) = 1000 and ˆσ reported by Ho et al. where DDIM is marginally worse. However, the
sample quality of ˆσ becomes much worse for smaller dim(τ), which suggests that it is ill-suited for
shorter trajectories. DDIM, on the other hand, achieves high sample quality much more consistently.
In Figure 3, we show CIFAR10 and CelebA samples with the same number of sampling steps and
varying σ. For the DDPM, the sample quality deteriorates rapidly when the sampling trajectory has
10 steps. For the case of ˆσ, the generated images seem to have more noisy perturbations under short
trajectories; this explains why the FID scores are much worse than other methods, as FID is very
sensitive to such perturbations ).
In Figure 4, we show that the amount of time needed to produce a sample scales linearly with the
length of the sample trajectory. This suggests that DDIM is useful for producing samples more
efﬁciently, as samples can be generated in much fewer steps. Notably, DDIM is able to produce
samples with quality comparable to 1000 step models within 20 to 100 steps, which is a 10× to
50× speed up compared to the original DDPM. Even though DDPM could also achieve reasonable
sample quality with 100× steps, DDIM requires much fewer steps to achieve this; on CelebA, the
FID score of the 100 step DDPM is similar to that of the 20 step DDIM.
SAMPLE CONSISTENCY IN DDIMS
For DDIM, the generative process is deterministic, and x0 would depend only on the initial state xT .
In Figure 5, we observe the generated images under different generative trajectories (i.e. different τ)
while starting with the same initial xT . Interestingly, for the generated images with the same initial
xT , most high-level features are similar, regardless of the generative trajectory. In many cases,
samples generated with only 20 steps are already very similar to ones generated with 1000 steps in
terms of high-level features, with only minor differences in details. Therefore, it would appear that
xT alone would be an informative latent encoding of the image; and minor details that affects sample
Published as a conference paper at ICLR 2021
Figure 4: Hours to sample 50k images with one Nvidia 2080 Ti GPU and samples at different steps.
sample timesteps
sample timesteps
sample timesteps
Figure 5: Samples from DDIM with the same random xT and different number of steps.
quality are encoded in the parameters, as longer sample trajectories gives better quality samples but
do not signiﬁcantly affect the high-level features. We show more samples in Appendix D.4.
INTERPOLATION IN DETERMINISTIC GENERATIVE PROCESSES
Figure 6: Interpolation of samples from DDIM with dim(τ) = 50.
Since the high level features of the DDIM sample is encoded by xT , we are interested to see whether
it would exhibit the semantic interpolation effect similar to that observed in other implicit proba-
Published as a conference paper at ICLR 2021
Table 2: Reconstruction error with DDIM on CIFAR-10 test set, rounded to 10−4.
bilistic models, such as GANs . This is different from the interpolation
procedure in Ho et al. , since in DDPM the same xT would lead to highly diverse x0 due to
the stochastic generative process6. In Figure 6, we show that simple interpolations in xT can lead to
semantically meaningful interpolations between two samples. We include more details and samples
in Appendix D.5. This allows DDIM to control the generated images on a high level directly through
the latent variables, which DDPMs cannot.
RECONSTRUCTION FROM LATENT SPACE
As DDIM is the Euler integration for a particular ODE, it would be interesting to see whether it
can encode from x0 to xT (reverse of Eq. (14)) and reconstruct x0 from the resulting xT (forward
of Eq. (14))7. We consider encoding and decoding on the CIFAR-10 test set with the CIFAR-10
model with S steps for both encoding and decoding; we report the per-dimension mean squared
error (scaled to ) in Table 2. Our results show that DDIMs have lower reconstruction error for
larger S values and have properties similar to Neural ODEs and normalizing ﬂows. The same cannot
be said for DDPMs due to their stochastic nature.
RELATED WORK
Our work is based on a large family of existing methods on learning generative models as transition operators of Markov chains . Among them, denoising diffusion
probabilistic models ) and noise conditional score networks ) have recently achieved high sample quality comparable to GANs . DDPMs optimize a variational lower bound to the log-likelihood,
whereas NCSNs optimize the score matching objective over a nonparametric
Parzen density estimator of the data .
Despite their different motivations, DDPMs and NCSNs are closely related. Both use a denoising
autoencoder objective for many noise levels, and both use a procedure similar to Langevin dynamics
to produce samples . Since Langevin dynamics is a discretization of a gradient
ﬂow , both DDPM and NCSN require many steps to achieve good sample quality.
This aligns with the observation that DDPM and existing NCSN methods have trouble generating
high-quality samples in a few iterations.
DDIM, on the other hand, is an implicit generative model 
where samples are uniquely determined from the latent variables. Hence, DDIM has certain properties that resemble GANs and invertible ﬂows , such
as the ability to produce semantically meaningful interpolations. We derive DDIM from a purely
variational perspective, where the restrictions of Langevin dynamics are not relevant; this could partially explain why we are able to observe superior sample quality compared to DDPM under fewer
iterations. The sampling procedure of DDIM is also reminiscent of neural networks with continuous
depth , since the samples it produces from the same latent
variable have similar high-level visual features, regardless of the speciﬁc sample trajectory.
DISCUSSION
We have presented DDIMs – an implicit generative model trained with denoising auto-encoding /
score matching objectives – from a purely variational perspective. DDIM is able to generate high-
6Although it might be possible if one interpolates all T noises, like what is done in Song & Ermon .
7Since xT and x0 have the same dimensions, their compression qualities are not our immediate concern.
Published as a conference paper at ICLR 2021
quality samples much more efﬁciently than existing DDPMs and NCSNs, with the ability to perform
meaningful interpolations from the latent space. The non-Markovian forward process presented here
seems to suggest continuous forward processes other than Gaussian (which cannot be done in the
original diffusion framework, since Gaussian is the only stable distribution with ﬁnite variance). We
also demonstrated a discrete case with a multinomial forward process in Appendix A, and it would
be interesting to investigate similar alternatives for other combinatorial structures.
Moreover, since the sampling procedure of DDIMs is similar to that of an neural ODE, it would
be interesting to see if methods that decrease the discretization error in ODEs, including multistep methods such as Adams-Bashforth , could be helpful for further
improving sample quality in fewer steps . It is also relevant to investigate
whether DDIMs exhibit other properties of existing implicit models .
ACKNOWLEDGEMENTS
The authors would like to thank Yang Song and Shengjia Zhao for helpful discussions over the
ideas, Kuno Kim for reviewing an earlier draft of the paper, and Sharvil Nanavati and Sophie Liu
for identifying typos. This research was supported by NSF (#1651565, #1522054, #1733686), ONR
(N00014-19-1-2145), AFOSR (FA9550-19-1-0024), and Amazon AWS.