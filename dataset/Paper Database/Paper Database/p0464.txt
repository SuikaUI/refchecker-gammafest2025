An Integral Solution to Surface Evolution PDEs
Via Geo-cuts
Yuri Boykov1, Vladimir Kolmogorov2, Daniel Cremers3, and Andrew Delong1
1 University of Western Ontario, Canada
{yuri, adelong3}@csd.uwo.ca
2 University College London, UK
 
3 University of Bonn, Germany
 
Abstract. We introduce a new approach to modelling gradient ﬂows
of contours and surfaces. While standard variational methods (e.g. level
sets) compute local interface motion in a diﬀerential fashion by estimating local contour velocity via energy derivatives, we propose to solve
surface evolution PDEs by explicitly estimating integral motion of the
whole surface. We formulate an optimization problem directly based on
an integral characterization of gradient ﬂow as an inﬁnitesimal move of
the (whole) surface giving the largest energy decrease among all moves
of equal size. We show that this problem can be eﬃciently solved using recent advances in algorithms for global hypersurface optimization
 . In particular, we employ the geo-cuts method that uses ideas
from integral geometry to represent continuous surfaces as cuts on discrete graphs. The resulting interface evolution algorithm is validated on
some 2D and 3D examples similar to typical demonstrations of level-set
methods. Our method can compute gradient ﬂows of hypersurfaces with
respect to a fairly general class of continuous functionals and it is ﬂexible with respect to distance metrics on the space of contours/surfaces.
Preliminary tests for standard L2 distance metric demonstrate numerical
stability, topological changes and an absence of any oscillatory motion.
Introduction
As detailed in , discrete minimum cut/maximum ﬂow algorithms on
graphs can be eﬀectively used for optimization of a fairly wide class of functionals deﬁned on contours and surfaces in continuous metric spaces. So far, graph
based methods were presented as a global optimization alternative to local variational optimization methods such as the level set method. Eﬃcient algorithms
for ﬁnding global optima have a number of advantages over local optimization
methods. However, in some cases it is necessary to observe gradual changes of a
contour/surface that they display under gradient ﬂow (or gradient descent). For
example, gradient ﬂow models dynamics of many natural phenomena in physics.
In computer vision, ability to track gradual changes in segmentation allowed
variational methods to successfully incorporate shape priors .
A. Leonardis, H. Bischof, and A. Pinz (Eds.): ECCV 2006, Part III, LNCS 3953, pp. 409–422, 2006.
⃝Springer-Verlag Berlin Heidelberg 2006
Y. Boykov et al.
In this paper we propose a new integral approach to computing gradient ﬂow
of interfaces with respect to a fairly general class of energy functionals. The proposed algorithm generates a timely sequence of cuts corresponding to gradient
ﬂow of a given contour. Note that the proposed method is not a new implementation of level set methods but rather an alternative numerical method for
evolving interfaces. Our method does not use any level set function to represent
contours/surfaces. Instead, it uses an implicit contour/surface representation via
geo-cuts . As the level set method, our approach handles topological changes
of the evolving interface.
Variational Methods and PDEs in Computer Vision
Numerous computer vision problems can be addressed by variational methods.
Based on certain assumptions regarding the image formation process, one formulates an appropriate cost functional which is subsequently minimized by implementing the Euler-Lagrange equations in a gradient ﬂow partial diﬀerential
equation (PDE). This technique has become standard in various ﬁelds of computer vision ranging from motion estimation , over image enhancement to segmentation . While not all PDEs are derived from a
variational approach, in this work we will focus on the class of PDEs which
correspond to the gradient ﬂow to an underlying variational principle.
Despite their enormous success in the local optimization of a large class of
cost functionals, PDEs suﬀer from certain drawbacks. In particular, they are
inherently diﬀerential approaches, they rely on the notion of an energy gradient
which – in many cases — requires intense numerical computations. The numerical discretization of PDEs requires a careful choice of appropriate time step sizes.
Extensive research went into determining conditions which guarantee stability
of the respective implementations. In practice, meaningful time step sizes are
often chosen based on various heuristics.
In contrast to this diﬀerential approach, we develop in this paper an integral
approach to solving a certain class of gradient ﬂow PDEs. To this end we revert
to eﬃcient combinatorial optimization methods acting on a discrete space. In
a number or recent papers , it was shown that various optimization
problems deﬁned on surfaces in continuous spaces can be eﬃciently solved by
discrete combinatorial optimization methods. In contrast to these works, the
present paper is not focussed on determining the global optima of respective cost
functions, but rather on actually modelling the local gradient descent evolution of
the corresponding variational approaches. In this sense, we hope to further bridge
the gap between continuous variational approaches and discrete combinatorial
approaches to optimization.
From Diﬀerential to Integral Approach
Our main goal is an algorithm for computing gradient ﬂows for hypersurfaces
based on novel optimization techniques which are fundamentally
An Integral Solution to Surface Evolution PDEs Via Geo-cuts
diﬀerent from standard variational methodology. Gradient ﬂow for contours and
surfaces amounts to evolving an initial boundary under Euler-Lagrange equation
of a given energy functional. Such propagation of surfaces corresponds to many
natural phenomena and it can be derived from the laws of physics. Standard
variational calculus justiﬁes the corresponding PDE in the context of (local)
energy optimization and provides numerical methods (including level-sets) for
solving it directly via ﬁnite diﬀerence or ﬁnite element schemes. In contrast, our
new approach solves the corresponding PDE indirectly.
Our approach to gradient ﬂow was motivated by the numerical stability of
global optimization methods in . In this paper we show how to turn them
into robust surface evolution methods that may overcome some of the numerical
limitations of standard variational techniques. Note that variational methods
rely on estimates of energy derivatives in order to compute each point’s local
diﬀerential motion (velocity). In contrast, our main idea is to compute integral
motion of the surface as a whole. In particular, geo-cuts allow to compute
such motion by means of integral geometry without estimating derivatives.
When trying to model surface evolutions by global optimization approaches,
we are faced with the following discrepancy between local and global optimization methods: while existing global optimization methods are merely focussed on ﬁnding the boundary with the lowest energy, the gradient approaches
make use of the energy gradient, i.e. they focus on the maximal energy reduction
per change in the boundary. Therefore, any algorithm for computing gradient
ﬂow needs to have means to incorporate a measure of the boundary change.
Distances Between Contours
There are numerous metrics to measure change between boundaries. In fact, the
question of which metric on the space of contours should be used has been largely
ignored in the context of calculus of variation. Most so-called gradient descent
evolutions implicitly assume an L2 inner product. Several recent advances were
made regarding the derivation of Euler-Lagrange equations with respect to more
sophisticated contour metrics, focussed either on using the correct metric ,
or on designing novel gradient ﬂows with certain desirable properties . A very
similar freedom in the choice of metric on the space of contours will also arise
in our novel integral formulation of boundary evolution.
Note that motion of a contour C in a diﬀerential framework is described by a
(normal) vector ﬁeld v = dC
dt where velocity vector vs is given for every contour
point s. Then, standard L2 measure for boundary change is deﬁned as || dC
C |vs|2ds = ⟨dC
dt ⟩using Euclidean inner product ⟨, ⟩. As mentioned above,
employing other inner products on the space of contours will entail diﬀerent
kinds of gradient ﬂows of a contour.
In order to avoid local diﬀerential computations, we will represent the motion
of a contour C by integral measures of boundary change: a distance metric on
the space of contours that for any two contours C and C0 assigns a (nonnegative)
distance value dist(C, C0). Such distance metric could be consistent with ideas
for measuring boundary change in the diﬀerential framework if for C →C0
Y. Boykov et al.
(a) Diﬀerential framework
(b) Integral framework
dist(C, C0) = 2
 ΔC d0(p)dp
Fig. 1. L2 distance between two near-by contours. In the integral framework dist(C, C0)
is equal to a weighted area of the highlighted region. The weight of each point p is given
by a distance d0(p) to the nearest point on C0.
dist(C, C0) = ⟨dC, dC⟩+ o(||dC||2)
where dC = C −C0 is a ﬁeld of (normal) vectors deﬁned on points in C0 and
connecting them with points on C as shown in Figure 1(a). In other words: The
integral distance metric is consistent with the diﬀerential approach if the two
metrics are identical up to higher order terms.
Example 1. (L2 metrics) Figure 1 illustrates relationship between diﬀerential
and integral approaches to measuring boundary change between two contours
for the most standard case of L2 inner product ⟨, ⟩. The corresponding distance
metric on the space of contours in R2 is
dist(C, C0) = 2 ·
where p are points in R2, function d0(p) is a distance from p to the nearest
point on C0 (distance map), and ΔC is a region between two contours. Then, (1)
holds because integrating the distance function 2d0(p) along a (normal) direction
connecting some point s ∈C0 and a point q ∈C gives ||q −s||2 = dC2
Our general integral approach to front propagation is described in the next
subsection. The method is well deﬁned for any distance metric on the space
of contours. However, if one wants to model the gradient ﬂow corresponding
to a diﬀerential formulation with a given inner product ⟨, ⟩then the consistent
distance metric (1) should be used.
Integral Formulation of Gradient Flow
Our method for solving PDEs for contours or surfaces evolution is motivated
as follows. Gradient ﬂow (descent) of an interface C under any given energy
functional F(C) can be intuitively viewed as a temporal sequence of inﬁnitesimal
An Integral Solution to Surface Evolution PDEs Via Geo-cuts
steps where each step gives the largest decrease of the contour energy among all
steps of the same size. This almost banal interpretation of the gradient descent
suggests that the contour Ct+dt corresponding to an inﬁnitesimal step in the
gradient descent from a contour Ct can be obtained by solving the following
constrained optimization problem:
C : dist(C,Ct)=ϵ F(C)
for some (arbitrarily) small value ϵ > 0 ﬁxing the distance dist(C, Ct) from the
contour Ct. Equivalently, the method of Lagrangian multipliers shows that Ct+dt
should also solve unconstrained optimization problem
F(C) + λ · dist(C, Ct)
for some (arbitrarily) large value of parameter λ. These formulations for Ct+dt do
not establish an explicit relationship between the temporal step size dt and the
values of ϵ or λ. We just know that for each small dt there is some corresponding
small ϵ = ϵ(dt) or some corresponding large λ = λ(dt).
In fact, it is not diﬃcult to establish an exact relationship between λ and dt
using a well known PDE for evolution of an interface C under a gradient ﬂow
(descent) with respect to a given energy functional F(C). Our general approach
to computing gradient ﬂows will be based on optimization of energy (2).
Theorem 1. Consider a family of contours Ct minimizing energy
Et(C) = F(C) +
2(t −t0) · dist(C, C0)
where metric dist(C, C0) is consistent with some inner product ⟨, ⟩according to
equation (1). Then, as t →t0
Ct = C0 + v · (t −t0) + o(Δt)
where vector ﬁeld v = −dF
dC is a gradient of F with respect to inner product ⟨, ⟩.
That is, as t →t0 the contour Ct solves the standard gradient ﬂow PDE
Proof. Since Et(C) = F(C) +
2(t−t0)⟨C −C0, C −C0⟩then any contour C
optimizing Et should satisfy
(t −t0) · (C −C0).
Thus, optimality of Ct for Et implies Ct −C0 = −(t−t0)· dF
dC which is equivalent
to the standard gradient ﬂow equation (3) as t →t0.
Y. Boykov et al.
Standard variational (diﬀerential) methods for computing contour evolution under gradient ﬂow, including level sets, explicitly estimate the derivative dF
use ﬁnite diﬀerences or ﬁnite elements to approximate the PDE (3). Theorem 1
suggests an alternative integral approach to computing gradient ﬂows. Assuming
that C0 is a current state of the contour, we can obtain an optimal contour Ct
minimizing (2) for some small time step Δt = (t−t0). The gradient ﬂow problem
is solved by a sequence of optimal steps {C0 →Ct} where at each new iteration
C0 is reset to the optimal contour computed in the previous step.
Optimization of Et may look like a diﬃcult task. However, our integral approach is practical because a wide class of continuous functionals F(C) and
metrics dist(C, C0) in energy (2) can be eﬃciently optimized by recent global
methods . In particular, Section 4 describes details of a discrete approximation algorithm for gradient ﬂows based on geo-cuts . This algorithm is based
on implicit representation of continuous contours as cuts on discrete graphs. Optimization of continuous contour/surface energy (2) via geo-cuts avoids explicit
diﬀerentiation of Et and relies on eﬃcient combinatorial algorithms.
Discussion and Relation to Previous Approaches
Note that energy Et in (2) can be globally minimized using geo-cuts when
the ﬁrst term, hypersurface functional F(C), includes anisotropic Riemannian
length/area and any regional bias. It is important, however, that energy (2)
contains another term dist(C, C0). This second term is critical for implementing gradient ﬂow instead of global minimization of functional F(C). Note that
dist(C, C0) enforces shape stabilization and slows down the contour generating
gradual motion instead of a jump into a global minima. As shown in Example 1 from Section 3.1, standard gradient ﬂow with respect to L2 inner product
corresponds to shape constraint dist(C, C0) penalizing deviation of C from C0
according to the area between the contours weighted by the distance from C0. In
fact, this is a simple regional bias that can be easily incorporated into geo-cuts.
Additional details are given in Section 4.
Our approach can also compute gradient ﬂow with respect to inner products diﬀerent from L2. One has to determine the distance metric dist(C, C0)
consistent with the corresponding inner product as in equation (1).
Generally speaking, one can use our general framework for propagating hypersurfaces by optimizing energy (2) with an arbitrary distance metric dist(C, C0).
In this case the method may not really correspond to any true gradient ﬂow but it
may still generate some gradual motion of an interface. That may be suﬃcient for
many practical applications in computer vision that do not need exact gradient
ﬂow. The results in suggest that using specialized distance metrics could be
beneﬁcial in applications.
Interestingly, some existing discrete algorithms for active contours are special
cases of our general approach for some speciﬁc distance metric dist(C, C0).
Example 2. (DP snakes) A well-known dynamic programming approach to 2D
snakes uses control points to represent discrete snake C. Then, a typical snake
energy functional F(C) is iteratively minimized by dynamic programming over
An Integral Solution to Surface Evolution PDEs Via Geo-cuts
positions of control points. In order to simulate gradient-descent-like motion,
the algorithm in allows each point to move only in a small box around their
current position. Intuitively speaking, this idea does capture the spirit of gradient
ﬂow motion. However, as easily follows from our theories in Section 3.2, the
motion generated in corresponds to energy (2) with a 0 −1 boxy distance
metric on a space of snakes dist(C, C0) = 
p δ|dCp|>ϵ where ϵ is a given box
size and dCp = C(p) −C0(p) is a shift of snake’s control point p. This distance
metric is not consistent with any inner product (bilinear form). Therefore, the
corresponding algorithm does not generate a true gradient ﬂow1. At the same
time, our theories suggest a simple correction to the problem; In order to get
a true L2 gradient ﬂow, DP-snakes algorithm could amend box-based move
constraints with a quadratic motion penalty dist(C, C0) = 
p which can
be easily handled by dynamic programming.
Example 3. (Fixed Band Graph-Cuts) An approach to segmentation in is
very similar to DP-snakes algorithm in . Dynamic programming in DP-snakes
is replaced by graph cuts but still uses the idea of a ﬁxed size “box”. Since
graph cuts do not use control points to represent contours and instead rely
on implicit binary graph-partitioning representation, the boxes around control
points are replaces by a small band around a current cut. Otherwise, the active
contour algorithm presented in can be described through energy (2) with
the same 0 −1 boxy distance metric dist(C, C0) = δ|dC|h>ϵ where |dC|h is the
Hausdorﬀdistance between C and C0. It follows that the method in does not
correspond to gradient ﬂow for any reasonable inner product. In fact, ﬁxed-band
approach in is likely to generate a jerky non-smooth motion. In contrast,
our theoretical framework allows a principled approach to contour evolution via
graph cuts. Using proper distance dist(C, C0) consistent with some (continuous)
inner product ⟨, ⟩allows to control geometric artifacts that may arise in front
propagation using discrete optimization techniques.
Computing Gradient Flow Via Geo-Cuts
As discussed before, there are a number of algorithms that can (globally) minimize continuous functional (2) and practically implement our approach to solving gradient ﬂow PDEs. This paper concentrates on a solution based on
geo-cuts .
Review of Geo-cuts
Geo-cuts is a graph based approach to minimizing continuous functionals E(C)
based on representing contours as cuts on a discrete graph (Fig. 2). Nodes in
this graph correspond to sampled points in space. A cut is a binary labeling of
1 A standard DP snake under Euclidean length functional F(C) will not generate
a true mean curvature motion. In particular, this snake may not converge to a circle
before collapsing into a point.
Y. Boykov et al.
Fig. 2. Geo-cuts: Any continuous contour C corresponds to a cut on a graph. Edge
weights deﬁne discrete cut metric assigning length to C based on the cost of the corresponding cut. With appropriately chosen weights, cut metric approximates any continuous anisotropic Riemannian metric.
these nodes. In the context of continuous contour representation, binary labels
{1, 0} say if the point (node) is inside or outside of the contour. Note that this
implicit representation of continuous contours does not say precisely where the
boundary is between the two neighboring graph nodes (points in space) with
diﬀerent labels. In fact, the lack of sub-pixel accuracy does not cause problems
for geo-cuts because they do not use estimates of local gradients/derivatives, e.g.
curvature, and rely on methods of integral geometry instead.
There are also two special nodes, terminals s and t (source and sink). Graph
edges are n-links and t-links, as in Fig. 2. Typically, n-links encode regularization
term in the energy (length or area) while t-links encode regional bias.
The ﬁrst step in the geo-cuts approach is to construct a graph whose cut
metric approximates that of functional E(C). Such construction exists for a fairly
large class of continuous functionals E, as shown in . In general, E(C) can
be any submodular (graph-representable) functional over contours/surfaces. In
particular, it can include the following terms:
– Geometric length/area under a fairly wide class of continuous metrics (including any anisotropic Riemannian metric);
– Flux with respect to any continuous vector ﬁeld;
– Regional term integrating arbitrary potential function over the interior of C.
After constructing an appropriate graph, the cut with the smallest cost can be
computed very eﬃciently via min cut/max ﬂow algorithms.
We now apply this framework to the problem of computing gradient ﬂow
at time t given current contour C0. In order to minimize functional Et(C) in
eq. (2), we need to approximate terms F(C) and dist(C, C0) with a discrete cut
metric. According to the characterization above, the ﬁrst term F(C) can be any
submodular functional over contours/surfaces. This covers a widely used special
case when F is a geometric length/area in a Riemannian metric induced by the
image. Let us consider the second term.
As discussed in section 3.1, we have some freedom in choosing function
dist(C, C0). There are many distance measures corresponding to diﬀerent inner
An Integral Solution to Surface Evolution PDEs Via Geo-cuts
products ⟨, ⟩. For example, in order to incorporate standard L2 inner product
we can use the distance function described in example 1. It can be rewritten as
dist(C, C0) = −2 ·
d0(p)dp + 2 ·
where int(C) is the interior of C and d0(p) is now the signed distance map; it
is negative inside C0 and positive outside. The ﬁrst term above is a constant
independent of C. The second term is a regional bias that can be incorporated
into geo-cuts using t-links. Note that we can use non-Euclidean signed distance
maps to implement metrics on the space of contours diﬀerent from L2.
Minimizing Energy Et with Geo-cuts
Our approach to gradient ﬂows amounts to ﬁnding small moves C(t) from C(0) =
C0 for (t −t0) < δt and then resetting time and energy (2) for C′
Section 4.3 describes this move-reset algorithm. In this section, however, we
assume that C0 is ﬁxed and discuss properties of a timely sequence of cuts
{C(t)|t ≥0} where each particular cut C(t) is a global minima of Et(C) for a
given t. For simplicity of notation we will assume that t0 = 0.
It can be shown that the time axis can be split into a ﬁnite number of intervals
[ti, ti+1] such that there is cut Ci which is optimal for all t ∈[ti, ti+1]. Our goal
is therefore to ﬁnd a sequence of critical time instances t1, t2, t3, . . . , tn when
an optimal cut changes. We will also need to ﬁnd the corresponding sequence
of optimal cuts C1, C2, C3, . . . , Cn. Note that the initial contour C0 will be an
optimal cut for any t ∈[0, t1]. Also, “ﬁnal cut” Cn is a global minimizer of
functional F(C). It may happen that C0 is already a global minimum, in which
case n = 0. Below we list a number of useful facts about this sequence of cuts.
Remark 1. It is possible to prove that
F(C0) > F(C1) > F(C2) > ... > F(Cn)
Therefore, the energy will never increase during the algorithm. This will prevent
any oscillatory behaviour present in some implementations of level sets.
Remark 2. Similar to the continuous case, the gradient ﬂow (gradient descent)
algorithm above is related to the following constrained optimization problem
(where C is now a discrete cut and F(·) encodes cut metric):
C : dist(C0,C)=ϵ F(C)
More precisely, an optimal solution Ct for energy (2) at any given time t > 0
solves the constrained minimization problem above for
ϵt = dist(C0, C)
Indeed, suppose that there is some other cut C such that dist(C0, C) = ϵt and
F(C) < F(Ct). Then, F(C) + 1
2tdist(C0, C) < F(Ct) + 1
2tdist(C0, C) and we
have a contradiction to the fact that Ct is optimal for energy (2).
Y. Boykov et al.
Equation (6) explicitly determines the “size” of each gradient descent step
ϵi = dist(C0, Ci) generated by our algorithm. It is easy to show that
0 < ϵ1 < ϵ2 < . . . < ϵn < ∞
Remark 3. An interesting observation is that C1 (the ﬁrst cut diﬀerent from
initial solution C0) is a solution for
F(C) −F(C0)
dist(C0, C)
The proof is based on the fact that at time t1 energy (2) has two distinct optimal
cuts C1 and C0. Thus, F(C0) = F(C1) +
2t1 dist(C0, C1) and the proof follows
from a standard “binary search” algorithm for ratio optimization. It also follows
that the corresponding optimal value of the ratio is equal to −1
2t1 . Note that the
optimal (minimal) ratio value has to be negative (non-positive). Indeed, unless
C0 is a global minimizer of F(·) we have at least one cut (e.g. C1) where the
value of the ratio is negative (since F(C1) < F(C0)). Note that optimization of
the ratio above is meaningful in discrete formulation only. It can be shown that
in the continuous case the ratio above converges to −∞as C →C0.
Remark 4. The ﬁrst cut C1 is the most accurate gradient descent step from C0
as it corresponds to the smallest step size ϵ1. Ideally, we want to compute the
optimal solution of (5) for the smallest value of ϵ while ϵ1 is the smallest step
size where our graph cut algorithm can detect an optimal move. The size of that
smallest step ϵ1 is possibly due to approximation errors in our discrete graph-cut
formulation and may depend on graph “resolution”.
Summary of Gradient Flow Algorithm
It follows that the gradient ﬂow is approximated the best when we reset to initial
0 = C1 and update the energy (2) after each small move C1. In practice we
may not need to be so conservative but that needs to be checked experimentally.
It is possible to show that
ϵ1 ≈(2t1 · ||∇F||)2 = (2t1 · ||dF
dC (C0)||)2
Indeed, using remark 3 and expression ϵ1 = dist(C0, C1) ≈||C1 −C0||2 we get
= F(C1) −F(C0)
≈⟨∇F, C1 −C0⟩
≈−||∇F|| · ||C1 −C0||
Equation (7) allows to determine a stopping criteria for our algorithm when
we converged to a local minima where ∇F = 0. In practice we may stop if
the gradient of F is smaller than some predeﬁned threshold, ||∇F|| < δ, which
corresponds to the stopping condition
dist(C0, C1) < (2t1 · δ)2
An Integral Solution to Surface Evolution PDEs Via Geo-cuts
Experimental Validation
Although the focus of our paper is mainly theoretical, we have generated preliminary results to show that gradient ﬂow can indeed be approximated with an
integral representation of length and hypersurfaces. The image sequences that
follow were generated by combining the geo-cuts method for computing F(C)
and a signed distance map for computing dist(C, C0) as in (4). The distance
map is computed in such a way that for pixels p at the boundary of cut C0 there
holds d0(p) = ±0.5. (Pixel p is said to be at the boundary if it is 4-connected
to some pixel q in the other segment). In our tests we compute the ﬁrst cut C1
and reset t′
0 = t1, C′
0 = C1. We use an implementation of maxﬂow graph-cuts 
as a tool for optimizing the energy. Note that in the ﬁgures below we show only
selected time frames of the gradient ﬂow motion computed by out method.
In Figures 3, 6 and 7 we have intentionally used low-resolution grids to illustrate that even extremely coarse integral representations can yield accurate
gradient ﬂow motion, despite a lack of sub-pixel accuracy. Our test results on
(a) Curvature ﬂow in “Manhattan” L1 metric (4-neighborhood)
(b) Curvature ﬂow in “Octagonal” metric (8-neighborhood)
(c) Curvature ﬂow in Euclidean (L2) metric (16-neighborhood)
Fig. 3. Length minimizing (curvature) ﬂow of a 2D contour under diﬀerent homogeneous metrics. Pixalization reﬂects the actual resolution used in the experiments and
demonstrates that our discrete geo-cuts representation of contours generates accurate
gradient ﬂow without explicitly tracking the contour with sub-pixel accuracy as in
level-sets.
Y. Boykov et al.
Fig. 4. Empirical plot of a radius of a circle under curvature ﬂow. Theoretically, this
function is r(t) = √const −2t.
Fig. 5. Euclidean length minimizing ﬂow of a 2D “sausage” (16-neighb). Note that the
straight sides have zero curvature and they do not move until the top and the bottom
sides (with positive curvature) collapse the “sausage” to a circle.
length/area minimization with a Euclidian metric demonstrate that our algorithm ﬁrst converges to a circle/sphere and then converges about the center to
a point–exactly the progression expected of a correct gradient ﬂow simulation,
and is a critical test of any such algorithm.
A plot in Figure 4 presents empirical evidence conﬁrming that gradient ﬂow
generated by our method has accurate temporal dynamics. This plot shows
the radius of a circle evolving under (Euclidean) curvature ﬂow computed by
our method. Our algorithm directly generates time Δt for each step allowing us to show actual temporal dynamics of the ﬂow. The plot demonstrates
accurate temporal behaviour of the moving circle consistent with the theory.
The same plot also demonstrates that our algorithm can compute gradient
ﬂow with a high temporal resolution so that the generated motion is very
Figure 5 provides additional evidence of our method’s accuracy. We compute
(Euclidean) curvature ﬂow of a “sausage” which gradually moves from the ends
where the curvature is non-zero while the straight sides do not move until the
sausage turns into a circle. This result would be impossible to obtain with a DPsnake or ﬁxed-band graph cuts . For example, each step of the algorithm
in will uniformly erode the “sausage” from all sides. The “sausage” will
An Integral Solution to Surface Evolution PDEs Via Geo-cuts
Fig. 6. Length minimizing ﬂow of a 2D contour (blue) under image-based anisotropic
Riemannian metric (16-neighborhood)
(a) Gradient ﬂow for a cube (26-neighborhood)
(b) Gradient ﬂow for a blob (26-neighborhood)
Fig. 7. Euclidean area minimizing ﬂow of a surface in 3D. Voxalization reﬂects the
actual resolution.
collapse into a line interval (not into a point) in jumpy moves of equal size (band
Our tests with image-based Riemannian metrics (e.g. see Figure 6) have
conﬁrmed that topological changes in contours occur in a similar manner to levelset methods, and that contours do not exhibit oscillatory motion but instead
remain ﬁxed at local minima.
As of this writing, we have yet to experiment with more justiﬁed ways of
both controlling the time steps and the manner in which the distance map(s)
are used. One potential source of inaccuracy lies in the fact that the distance map
can be determined only with precision 0.5, since we use discrete representation
of contours via geo-cuts. The inﬂuence of this eﬀect is most signiﬁcant near the
boundary of contour C0. This suggests that using the ﬁrst cut C1 is not necessarily the most accurate method. The problem, however, may be solved by using
cuts Ck for bigger time step tk > t1. This idea can be combined with supersampling the grid graph. Despite this potential diﬃculty, the experiments indicate
that even our preliminary implementation gives very encouraging results, which
show that geo-cuts approach may provide a numerically stable method for solving gradient ﬂow PDEs.
Y. Boykov et al.