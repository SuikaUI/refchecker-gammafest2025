Submitted to Management Science
manuscript MS-14-00232
Authors are encouraged to submit new papers to INFORMS journals by means of
a style ﬁle template, which includes the journal title. However, use of a template
does not certify that the paper has been accepted for publication in the named journal. INFORMS journal templates are for the exclusive purpose of submitting to an
INFORMS journal and should not be used to distribute the papers in print or online
or to submit the papers to another publication.
GOTCHA! Network-based Fraud Detection for Social
Security Fraud
Dr. V´eronique Van Vlasselaer
Department of Decision Sciences and Information Management, KU Leuven, Leuven, Belgium,
 
Prof. Dr. Tina Eliassi-Rad
Department of Computer Science, Rutgers University, Piscataway, NJ, USA, 
Prof. Dr. Leman Akoglu
Department of Computer Science, Stony Brook University, Stony Brook, NY, USA, 
Prof. Dr. Monique Snoeck
Department of Decision Sciences and Information Management, KU Leuven, Leuven, Belgium, 
Prof. Dr. Bart Baesens
Department of Decision Sciences and Information Management, KU Leuven, Leuven, Belgium, 
School of Management, University of Southampton, Highﬁeld, Southampton, SO17 1BJ, United Kingdom
We study the impact of network information for social security fraud detection. In a social security system,
companies have to pay taxes to the government. This study aims to identify those companies that intentionally go bankrupt in order to avoid contributing their taxes. We link companies to each other through their
shared resources, as some resources are the instigators of fraud. We introduce GOTCHA!, a new approach
on how to deﬁne and extract features from a time-weighted network, and how to exploit and integrate
network-based and intrinsic features in fraud detection. The GOTCHA! propagation algorithm diﬀuses fraud
through the network, labeling the unknown and anticipating future fraud whilst simultaneously decaying
the importance of past fraud. We ﬁnd that domain-driven network variables have a signiﬁcant impact on
detecting past and future frauds, and improve the baseline by detecting up to 55% additional fraudsters over
Key words : fraud detection, network analysis, bipartite graphs, fraud propagation, guilt-by-association
History : This paper was ﬁrst submitted on February 5, 2014.
Introduction
Fraud detection is a research domain with a wide variety of diﬀerent applications and diﬀerent requirements, including credit card fraud , call record fraud , money laundering , insurance fraud and telecommunications fraud . The aforementioned problems generally exhibit the same characteristics, but the solution to each problem is
rather domain-speciﬁc . Data mining techniques – i.e., ﬁnding patterns and
anomalies in large amounts of data – have already proven useful in risk evaluation , but fraud is an atypical example and requires built-in domain knowledge.
We introduce GOTCHA!, a new, generic, scalable and integrated approach on how (social)
network analytics can improve the performance of traditional fraud detection tools in a social
security context. We identify ﬁve challenges that concur with fraud. That is, fraud is an uncommon,
well-considered, time-evolving, carefully organized and imperceptibly concealed crime that appears
in many diﬀerent types and forms. Whereas current research fails to integrate all these dimensions
into one encompassing approach, GOTCHA! is the ﬁrst to address each of these challenges
together in one high-performance, time-dependent detection technique.
In short, GOTCHA! contributes to the fraud detection domain by proposing a novel approach
on how to spread fraud through a (i) time-weighted network and features extracted from a (ii)
bipartite graph (cfr. infra). We exploit dynamic network-based features derived from the direct
neighborhood, and develop a new propagation algorithm that infers an initial exposure score for
each node using the whole network. The exposure score measures the extent to which a node is
inﬂuenced by fraudulent nodes. We integrate both intrinsic and network-based features into one
scalable algorithm. We argue that fraud is a time-dependent phenomenon, and as a consequence
GOTCHA! is designed such that a subject’s characteristics and fraud probability can change over
We test the validity of our approach on a real data set obtained from the Belgian social security
institution, which registers and monitors every active company in Belgium and keeps track of all
resources, and their associations with companies.1 In a social security system, companies have to
pay employer and employee contributions to the government. Fraud occurs when companies intentionally go bankrupt in order to avoid paying these taxes. A new/existing company with (partly)
the same structure is founded afterwards and continues the activities of the former company. We
can compare the structures of companies through their resources.
1 Due to conﬁdentiality issues, we will not elaborate further upon the exact type of resources, but the reader can
understand shared resources in terms of the same address, equipment, buyers, suppliers, employees, etc.
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Side Company 3
Side Company 2
Side Company 5
Side Company 6
Side Company 4
Side Company 1
Key Company
Side Company 1
Side Company 2
Side Company 3
Side Company 4
Side Company 5
Side Company 6
Key Company
Unobservable
Observable
(a) Example of a spider construction. Company 1 and 4 are fraudulent. Resources are
transferred towards other companies (solid line). The key company organizes the fraudulent setup, but
its links to other companies are hidden (dashed line). (b) Bipartite graph of the spider construction.
Companies are indirectly connected to each other through the resources.
A spider construction is a fraudulent setup with an active exchange of resources between the
companies, i.e., fraudulent companies do not transfer all of their resources to only one other
company as this might attract too much attention (see Figure 1a). They rather distribute their
resources among many companies. Active companies that inherit resources from fraudulent companies, exhibit a high risk of perpetrating fraud themselves. In particular, we distinguish between
the key and side companies. The side companies are the perpetrators of the fraud and have an
observable link to each other through shared resources. The core of a spider construction is the
key company, which is responsible for organizing the fraud, setting up many side companies and
pruning away their proﬁts, so that they go bankrupt. However, the key company has unobservable
links, and therefore we can only detect the side companies. The main goal of GOTCHA! is to
exploit the associations between companies and their resources to infer which companies have a
high risk to commit fraud in the future. We believe that network-based knowledge might strongly
improve the standard approaches, which only use intrinsic variables in the detection models.
In order to assess the added value of our approach, we compare GOTCHA! to three baselines:
(1) an intrinsic model, only including intrinsic features; (2) a unipartite model, linking companies
directly together by means of the resources they shared or transferred among each other; (3) a
bipartite model, which starts from the same network representation as our GOTCHA! model,
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
integrating both companies and resources (see Figure 1b). Yet, the model is not time-weighted. Our
results show that an optimal mix between intrinsic and time-weighted network-based attributes
contribute to a higher accuracy and more precise output than the baselines. Moreover, it appears
that many regular (i.e., non-intentional) bankruptcy companies are also outputted and classiﬁed
as high risk. This is a strong indication that the developed approach is also able to ﬁnd those
companies that committed fraud, but were not caught in the past. As a result, we argue that our
approach is suitable for both future and retrospective fraud detection.
This paper is organized as follows: Section 2 motivates GOTCHA!’s fraud detection process and
framework, as well as GOTCHA!’s contributions to existing research. Section 3 focuses on how
network analysis is implemented for fraud detection. This section also discusses GOTCHA!’s propagation algorithm and how domain-driven networked features are deﬁned and extracted from the
network. Section 4 summarizes the modeling approach. Section 5 contains the results of GOTCHA!
on social security fraud data. Section 6 concludes this paper.
Social Security Fraud Detection
Background
The Belgian Social Security Institution is a federal agency that monitors the tax contributions
of every active company in Belgium. These contributions are used to fund the various branches
in social security, such as family allowance funds, unemployment funds, health insurance, holiday
funds, etc. Companies – or in general terms, the employers – need to pay employer and employee
contributions to the government. Some companies, nevertheless, fail to redeem their obligations
and ﬁle for bankruptcy. Recently, experts found evidence of fraudulent setups through bankruptcy.
In real data, we observe small “webs of fraud”, the so-called spider constructions. A spider
construction consists of (fraudulent) companies that are closely connected to each other through
shared or transferred resources. Resources include address, equipment, buyers, suppliers, employees,
etc. For example, two companies are associated with each other because they operate at the same
location. The data reveals which resource is associated with which company for which speciﬁc
time period. We observe that the proﬁts of companies that belong to a fraudulent setup are
often pruned away by a hidden key company (see Figure 1). Consequently, the company becomes
insolvent and ﬁles for bankruptcy, leaving the government with unrecoverable debt claims. We
see, however, that their operational resources move towards other currently legitimate or newly
founded companies, e.g., 80% of the resources of the fraudulent company are re-used by a new
or currently legitimate company. Those companies will continue the activities of the fraudulent
company. The transfer (or sharing) of such resources induces the observable structure of spider
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Active Companies
Fraudulent Companies
Overview of the total number of active companies (blue curve) and fraudulent companies
(red curve). The number of active companies is consistently growing. A similar trend can be noticed in
the number of fraudulent companies.
constructions. Companies that inherit (many) resources of fraudulent companies, exhibit a high risk
of perpetrating fraud in the future as well. Figure 1b shows how (groups of) resources are exchanged
between various companies, transferring fraudulent knowledge on how to commit fraud towards legitimate companies. We must note that resource sharing is nevertheless
a normal activity in the corporate environment, complicating the detection process. Although
the exact procedure of resource sharing is conﬁdential, the reader can think in terms of e.g., the
transfer or sharing of employees, equipment, buyers/suppliers, and addresses taken over by other
employers, etc. The requirements of fraud experts are threefold: (1) curtailing the growth of existing
spider constructions; (2) preventing the development of new spider constructions; and (3) detecting
uncaught spider constructions, i.e., dense subgraphs in the network with many bankruptcies. In
this work, we focus on requirement (1) and (2). Recall that we do not have information to associate
key companies to their side companies. Therefore, we aim to ﬁnd suspicious side companies.
Challenges
A ﬁrst contribution of this research is the investigation and identiﬁcation of the underlying
reasons why fraud detection cannot be resolved by applying standard data analytics. We identify
ﬁve challenges present in most fraud detection problems, and discuss how each challenge can be
addressed. In general, the main challenges that characterize fraud are as follows:
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Real-life example of fraud propagating through a sub-network over time. Legitimate
companies are unﬁlled, fraudulent companies are ﬁlled. The initial situation is represented in (a).
When time passes, more nodes are inﬂuenced by fraudulent behavior of their neighbors (b), ultimately
infecting almost the whole subgraph (c). This conﬁrms the contagious eﬀect of fraud.
Fraud is an uncommon, well-considered, time-evolving, carefully organized and imperceptibly
concealed crime which appears in many diﬀerent types and forms.
I. Uncommon Fraud detection techniques must deal with extremely skewed class distributions.
Subject matter experts are often only able to identify a limited number of conﬁrmed fraud cases.
Rather than using unsupervised techniques, how can we use and learn from (sparsely) labeled
data? Resampling techniques are able to emphasize fraud and
rebalance the data set.
Figure 2 depicts the number of active companies over 8 years (blue curve) and the percentage
of fraudulent companies over the same time period (red curve) for the social security institution
in our study.2 Each year, approximately 230K companies are active with a fraud ratio between
0.09% and 0.18%, except for year t−4 where the fraud ratio is 0.32%.3 For reasons of stability,
GOTCHA! is applied to year t0 −t3.
II. Well-considered Complex fraud structures are carefully planned and well thought through.
Fraud is present in all attributes. Labeling instances based on a single action (e.g., outlier detection) is often inaccurate and insuﬃcient. We believe that integrating intrinsic and domain-driven
network attributes helps to improve model performance.
III. Time-evolving Fraud evolves over time. Fraudsters learn from the mistakes of their
predecessors and are highly adaptive . Models should be built for a varying temporal
2 Due to conﬁdentiality issues, the exact date of each timestamp is omitted.
3 During year t−4 a fraud detection team was assigned and experts eﬀectively started to report fraud. The peak in
fraud detection is mainly due to catching up the piling backlog of old fraud cases and entering them in the system.
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
granularity, weighing information based on its recency . We estimate
models for diﬀerent timestamps, resulting in a time-dependent fraud probability.
IV. Carefully organized Fraudsters often do not operate by themselves, but are inﬂuenced by
close allies and inﬂuence others in turn. They transfer knowledge on how to commit fraud without
being detected. This is homophily. Homophily states that instances that are closely related to
each other are likely to behave in the same way .
A feasibility study on the social security
data set indicates that fraudulent companies are indeed signiﬁcantly more connected to other
fraudulent companies (p-value ≤0.02 for t0 −t3 using a one-tailed proportion test).
V. Imperceptibly concealed Maes et al. formulated this as the presence of overlapping
data. Fraudulent companies often have the same characteristics as legitimate companies. In the
fraud detection domain, there is a need for extracting additional, meaningful features that uncover
hidden behavior. We focus on inﬂuence. Inﬂuence is subtle and often subliminal. This challenge
encompasses how to capture unobservable, subtle fraudulent inﬂuences from the external environment. We address this challenge by means of collective inference procedures, like network propagation techniques, to diﬀuse a small amount of fraudulent behavior through the network and infer
a fraud exposure score for every node in the network.
Figure 3 illustrates how fraud spreads through a network over time, much like a virus. The
closer the nodes are located to the region of a fraudulent source, the higher the probability of
copying the fraudulent behavior. This phenomenon is known as the propagation eﬀect .
Sections 3, 4 and 5 of this paper explain in more detail how we address each of these challenges.
In particular, Section 3.3 describes how we infer an initial exposure score for every company, and
consequently label the unknown resources based on fraudulent inﬂuences from the whole network
(Challenge V ). In Section 3.4, each company is then featurized based on its direct resources (Challenge IV ). Section 4 discusses how we integrate intrinsic and network-based features (Challenge II )
and resample the data set using SMOTE (Challenge I ). The proposed fraud
detection technique estimates time-weighted features and a time-dependent fraud probability for
every company (Challenge III ), which is explained in Section 5.
Related Work
Although fraud detection algorithms are frequently discussed in the literature, only few research
studies acknowledge the importance of network analytics in fraud detection. To the best of our
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Fraud type
Challenges
 
money laundering
 
money laundering
 
telecom fraud
 
insurance fraud
(Galloway and Simoﬀ2006)
law enforcement fraud
 
security fraud
 
security fraud
 
online auction fraud
 
 
online auction fraud
 
 
online auction fraud
 
online auction fraud
 
online auction fraud
 
 
accounting fraud
 
insurance fraud
 
opinion fraud
social security fraud
Overview of all published papers related to fraud detection using network analytics.
knowledge, Table 1 gives an overview of all published papers related to fraud detection using network analytics. The table evaluates each paper according to the identiﬁed challenges in Section 2.2.
All papers comply with Challenge IV, i.e., including network analysis in the detection process.
Methods 1-5 focus on one type of network feature to measure or visualize fraud and rely to a
larger extent on human interaction for eﬀectively guiding the fraud detection process. GOTCHA!
is designed such that it derives multiple network-based features in order to judge the fraudulence
of other instances. Methods 6-10 are more advanced; they analyze and combine multiple aspects of
the direct neighborhood to decide whether a node in the network is fraudulent or not. Collective
inference procedures for fraud detection are discussed in methods 11-18. Rather than only taking
into account the direct neighborhood, GOTCHA! implicitly uses the indirect neighborhood to infer
a label for the unknown nodes, both anticipating future fraud and forgiving past associations.
Except for ˇSubelj et al. and Chau et al. , all fraud detection papers exclusively use
network variables to detect fraud, neglecting instance-speciﬁc information. Although we believe
that the network eﬀects play an important role in accurately identifying fraud, individual instance
behavioral information often also contains subtle signs of new types of fraud and should therefore
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Current process
INVESTIGATION
CONFIRMATION
PREVENTION
Automated Detection algorithm
Fraud detection process for the social security institution.
not be disregarded and considered as a valuable indicator in the fraud detection process. Our
paper diﬀers from the work of ˇSubelj et al. and Chau et al. as they use intrinsic
features only to bootstrap the network learning algorithms. In order to develop a comprehensible
and usable technique for experts, we extend the intrinsic features with domain-driven network
features. As such, we oﬀer experts the opportunity to gain insights about the importance of each
of the variables in the fraud detection process. Given that current research does not oﬀer an
encompassing approach, we developed GOTCHA!.
Proposed Fraud Detection Process
In order to make the GOTCHA! approach useable, it needs to be embedded in the global context
of the fraud detection process. The goal of social security fraud detection is to deﬁne which companies are likely to commit fraud within a certain period of time. Currently, social security experts
have mainly focused on manually inspecting random companies and determining whether they are
involved in fraud or not. This section discusses how we propose to extend the current process. The
fraud detection process is illustrated in Figure 4.
Fraud detection is the automated process of identifying high-risk instances. For reasons of generality, we use the term Automated Detection Algorithms to refer to any technique that is able to
estimate a fraud detection model, such as tree models, linear or logistic functions, SVMs, ANNs,
Bayesian learning, ensemble models, etc. . During fraud
investigation, experts decide to agree or disagree with the high-risk companies identiﬁed by the
model using their practical insights and knowledge. Note that, currently, experts are not guided
as to which companies are potentially high-risk. This makes the fraud investigation process ineﬃcient and time-consuming. The high-risk companies are passed on to the ﬁeld auditors who ﬁnally
conﬁrm if their expectations are correct (fraud conﬁrmation).
Observe the interactive nature of such a system: while experts feed the fraud detection algorithms
with conﬁrmed fraud, our algorithm guides the experts in turn where to look for fraud. In the end,
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Intrinsic attributes
Direct network
attributes
Indirect network
attributes
Intrinsic model
Network model
DATA SOURCES
NETWORK ANALYSIS
FEATURE DEFINITION,
EXTRACTION &
LEARNING PHASE
PREPROCESSED DATA
TRANSACTIONAL DATA
HISTORICAL DATA
FACTUAL DATA
LABELED DATA
Section 3.2
Section 3.3
Section 3.4
Section 5.1
INTRINSIC DATA
LEARNING ALGORITHM
NETWORK DATA
propagation
Proposed GOTCHA! framework for social security fraud detection.
the ultimate goal is to evolve towards fraud prevention, i.e., the ability of detecting fraud before it
is even committed .
This paper studies the fraud detection phase by proposing GOTCHA!. The next section will
discuss the fraud detection process in more detail. We expect that our process is more eﬃcient and
systematic than experts merely following their own intuition. Our estimated models give a good
indicator which companies are likely to commit fraud (see Section 5).
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Intrinsic Variables
Historical
Network Variables
quadrangles
Example of a preprocessed data set.
GOTCHA!’s Fraud Detection Framework
Figure 5 illustrates in greater detail our proposed framework for the fraud detection phase (see Figure 4) in a social security context. We start from three data sources. A factual data source contains
company-speciﬁc information such as regional, sectorial and legal characteristics of each company.
Historical data log changes in company information, e.g., when a company changes its legal seat.
Transactional data record which resources are associated to which companies, including the time
period. Those data sources are transformed into relevant company-speciﬁc and network-centric
attributes. Transactional data form the basis to create the global network structure representing
the relationships between companies and resources as a bipartite graph (Section 3.2). As historical
relationships between companies and resources contain important information, we use the historical
data sources to reconstruct historical links and add them to the network, weighing the links based
on their recency. While the past and the present is explicitly implemented in such a network, future
behavior can be estimated by exploiting both direct eﬀects as well as collectively inferring fraud
through the whole network (Section 3.3). Approximately 350K active and non-active companies
and 5 million resources are considered in the network.
According to Verbeke , variables can be classiﬁed into two categories:
Definition 1. A local or intrinsic variable represents intrinsic information of a company
as if it was treated in isolation. Those variables include regional, sectorial, historical and legal
characteristics.
Definition 2. A network variable aggregates information that is contained by the neighborhood of each company. We assume that behavior of a company’s neighbors has an inﬂuence on the
company itself. Those variables include the degree, triangles and propagated exposure score (see
Section 3.4 for details), and can be classiﬁed as direct and indirect network variables depending
on whether they are derived from the direct neighborhood or take into account the full network
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Overview of a unipartite (a) and a bipartite (b) graph.
structure.
Figure 6 gives an example of the preprocessed data, and features of each category. We derive
regional, sectorial and legal variables from the factual data source; the historical features are
extracted from the historical data. The transactional data source is the basis for the creation of
the network variables and speciﬁes which resources are assigned to which companies for which time
period (see Section 3).
In the remainder of this paper, we will use the terms intrinsic and network variables to indicate
whether the variables are generated by instance-speciﬁc or network-centric information. The data
preprocessing phase derives intrinsic, direct and indirect network attributes. Rather than using
plain relational classiﬁers as proposed by to predict fraud, the
network data set imposes a mix of intrinsic and domain-driven network attributes. A learning
algorithm will then estimate the corresponding models (Section 4). Those models are used to
evaluate fraudulent behavior of companies (Section 5).
Network Analytics for Fraud Detection
General Concepts and Notations
Our proposed approach is based on fundamentals from graph theory, incorporating Challenge IV
of Section 2.2. Boccaletti et al. deﬁne graph theory as the natural framework for the exact
mathematical treatment of complex networks. Formally, a complex network can be represented as
a graph. A graph consists of a set of vertices v ∈V and edges e ∈E. Vertices – also referred to as
nodes or points – are connected by edges – also known as links or lines. A standard graph can thus
mathematically be represented as G = (V,E), and is shown in Figure 7a. A graph can be either
directed or undirected, depending on the direction imposed on the edges. When edges deﬁne the
capacity or the intensity of a connection , the graph is said to be weighted.
Mathematically, a graph is represented as a matrix. The adjacency matrix An×n = (ai,j) is the
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
corresponding matrix representation of size n × n of a graph, with n being the total number of
vertices and ai,j = 1 if a link between node i and j exists, and ai,j = 0 otherwise. The weight matrix
Wn×n = (wi,j) captures the link weight of the relationships between the nodes.
Most networks contain only one node type. Certain applications, however, require implementing
a second entity. Such networks are bipartite graphs, as shown in Figure 7b. In contrast to unipartite
graphs, a bipartite graph consists of two types of vertices v1 ∈V1 and v2 ∈V2. An edge e ∈E
exclusively connects objects from diﬀerent classes to each other. For each edge in a bipartite graph,
the following property holds:
e(v1,v2) ∈E|v1 ∈V1 and v2 ∈V2
This property enforces that two instances of the same class are never directly connected, but
always connect through an object of the other class. The adjacency matrix of an undirected bipartite
graph is formally written as An×m = (ai,j), with ai,j = 1 if a link between node i ∈V1 and node
j ∈V2 exists, and ai,j = 0 otherwise. The corresponding adjacency matrix has a size of n×m, with
n and m the number of objects in set V1 and V2 respectively. The weight matrix is Wn×m = (wi,j).
Time-weighted Bipartite Networks
Reality is often diﬃcult to capture in mathematical formulations or even a graphical representation.
Network analysts, in consideration with ﬁeld experts, should carefully choose and agree upon
the right design of the network, reﬂecting the reality in the best possible way. It is particularly
important to bridge the richness of experts’ knowledge to the technical limitations of network
analytics by selecting the most relevant data features for the analysis.
We argued in Section 1 that in a social security fraud detection problem companies are related to
their resources. The goal of fraud detection is to ﬁnd high-risk companies, but the resources are an
important indicator as they help in executing the company’s (fraudulent) activities. Resources are
transferred from company to company. If a currently legitimate company inherits resources from a
fraudulent company, this substantially increases the fraud risk of that company. Hence, we create
a bipartite graph (or bigraph) connecting companies to their past and present resources. We work
with undirected networks as fraud can pass from a company to a resource, and vice versa.
For computational reasons, the graphical representation is mapped into a weight matrix W with
size c×r, where c and r specify the number of companies and resources respectively. The strength
of the relationship between a company and resource is exponentially weighted in time:
wi,j = e−γh if a relationship exists between company i and resource j
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
with γ the decay constant4, and h the time passed since the resource was linked to the company,
with h = 0 representing a current relationship. The value of the decay constant γ indicates the
rate at which past information declines, and is chosen (by mutual agreement with the experts)
such that only limited past information is taken into account. Particularly, if experts say that the
associations can be considered as irrelevant after x days, then we choose γ such that the decay
function goes to zero for time values greater than x, i.e., f(t > x) ≈0. For example, if one decides
that information of only 5 years back should be taken into account, then γ ≈1.
The matrix W is time-dependent. To incorporate the time-evolving characteristics of fraud
(cfr. Challenge III in Section 2.2), we create a matrix W t for each timestamp t ∈{t0,t1,t2,t3},
representing the interrelated structure at time t. The social security bigraph contains approximately
350K active and non-active companies and 5 million active and non-active resources in every
timestamp of analysis. In each timestamp, the network density is around 4.5 × 10−6.
GOTCHA!’s Fraud Propagation Algorithm: Deﬁning high-risk nodes in the
This section handles Challenge V (see Section 2.2). In particular, we answer the following questions:
(1) Which resources are often involved in fraud and exhibit a high risk to entice other companies to
perpetrate fraud as well? (2) Which companies are sensitive to fraud? More speciﬁcally, we need a
score that indicates which resources are coincidentally associated with fraudulent companies (lowrisk) and which resources systematically pop up when fraud is detected (high-risk). For example,
assume an address that was previously used by a fraudulent company is taken over by another
company. What would you say about the riskiness of that resource? Would the resource riskiness
change if you knew that the address was already used by many fraudulent companies previously,
or if the address was the location of only one fraudulent company many years ago? Similarly, we
derive a score that gives a primary indication of how the company is aﬀected by the fraudulent
inﬂuences from its neighborhood.
Given a time-weighted bipartite graph of companies and resources, we infer an exposure score
for every node (i.e., resource and company) in the network. The exposure score expresses the
extent to which the node is aﬀected by fraud. As only companies are directly attributed to fraud,
we start from the label of the few conﬁrmed fraudulent companies. The bipartite graph allow to
spread fraudulent inﬂuence through the network and deﬁne an exposure score for each company
and resource. As such, each company can be analyzed based on its own exposure score and the
links to high- and low-risk resources.
4 Due to conﬁdentiality issues, we will not elaborate on the exact value of γ.
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
We start from the Personalized PageRank algorithm , one of the popular
applications of the Random Walk with Restarts (RWR) method . In the fraud
domain, this algorithm is already exploited by Gy¨ongyi et al. and is the basis of their
TrustRank algorithm to detect web spam. We extend the Personalized PageRank algorithm in
order to meet the following domain-speciﬁc requirements:
1. Bipartite graphs: fraud contaminates both companies and resources.
2. Focus on fraud: only fraud – and no legitimate eﬀects – propagates through the network.
3. Dynamics: fraud is evaluated upon its recency.
4. Degree-independent propagation: high-degree companies spread proportionally more fraud
than low-degree companies.
In general, the Personalized PageRank algorithm computes an exposure score for each node
which depends on (a) the exposure scores of the node’s neighborhood and (b) a random jump
towards another node in the network. Mathematically, this can be written as,
(⃗ξ) = α · A(⃗ξ) + (1 −α) ·⃗v
with (⃗ξ) a vector containing the exposure scores of the nodes, A the corresponding columnnormalized adjacency matrix, α the restart probability and ⃗v the restart vector. The restart vector
⃗v is uniformly distributed over all nodes, and normalized afterwards.
Solving Equation 3 requires a matrix inversion. This is often not feasible to compute in practice.
The most widely used way to compute the relevance score is by the power iteration method,
which iterates until convergence . Convergence is reached until the change is
marginal, or after a maximum number of iteration steps. Next, we discuss how we integrate the
fraud-speciﬁc domain requirements into the algorithm.
Requirement 1 Equation 3 is developed for unipartite graphs. We want to assess the extent
to which fraud aﬀects both companies and resources. Starting from the weighted adjacency matrix
Wc×r of the bipartite graph with c companies and r resources (see Section 3.2), the matrix is
transformed to a unipartite representation, according to ,
Matrix Q is a symmetric matrix with c + r rows and columns. Introducing zeros enforces
that resources exclusively connect to companies and vice versa. The column-normalized matrix is
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Qnorm, a matrix where all columns sum to 1. The iterative propagation procedure for bipartite
graphs can then be written as,
(⃗ξ) = α · Qnorm(⃗ξ) + (1 −α) ·⃗v
Note that Qnorm is a dynamic matrix, representing both present and past relationships.
All active and non-active companies are included. This allows us to integrate and exploit all
connections (ever established) among companies and resources. The vectors ⃗ξ and ⃗v are of size
c + r, containing the exposure scores and restart probabilities of the companies and the resources.
Requirement 2 The goal is to focus on fraud and exclusively propagate fraudulent inﬂuence
through the network. A similar approach is taken in Provost et al. to compute brand
aﬃnity, measuring the proximity of a node to the seed nodes. Seed nodes are nodes that already
are enticed about the product or, in our case, into fraud. Given information provided by seed
nodes, how will this aﬀect the other currently legitimate companies and resources in the network?
We use the restart vector to personalize the ranking towards fraud and stress the fraudulent
inﬂuences of the seed nodes. The restart vector speciﬁes which nodes (here: companies) committed
fraud, where vj = 1 if entry j is a fraudulent company and vj = 0 if entry j is a resource or a
legitimate company. Although there is a lack of evidence of conﬁrmed fraud nodes, the algorithm
is able to cope with only few labeled nodes by emphasizing fraud in the restart vector.
Requirement 3 Fraud is dynamic. Recently caught companies are a more important source of
spreading fraud than companies detected many years ago. The restart vector reﬂects the fraudulent inﬂuence a certain company can disperse, and should depend on the recency of the fraud.
The more time passed since fraud was detected, the lower a particular fraudulent company’s inﬂuence. Inspired by the half-time decay of nuclear particles, we exponentially decay the relevance of
fraudulent activities over time,
vj = e−βh if entry j is a fraudulent company
with β the decay constant (see Section 3.2 for details), and h the time passed since the company
was detected fraudulent where h = 0 represents a current fraud company.
Requirement 4 Fraudulent companies infect their surrounding resources directly. However,
low-degree companies have fewer links through which fraud can propagate and aﬀect the resources
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Presence in fraudulent companies
Fraud score
anticipating
Each resource is associated with its propagated exposure score and its presence in
fraudulent companies. The resources are colored according to their riskiness (red indicates high risk,
green is low risk). The horizontal line represents the boundary dividing the resources in a low-risk and
high-risk category. Note that only 0.28% of all resources are labeled as high-risk.
more strongly. High-degree companies have many links, resulting in a marginal impact on the
neighboring nodes. In realistic situations, this assumption does not hold. The inﬂuence of highdegree companies should be equally treated as low-degree companies, as high-degree companies
have a wider range to inﬂuence other companies. Hence, fraud propagation has to be proportional
to a node’s degree, and
⃗z = ⃗v ⊙⃗d
with ⃗z the degree-adapted restart vector, which is the element-wise product of the restart vector
⃗v and the degree vector ⃗d denoting the degree of each entry. The normalized vector is ⃗znorm.
After k + 1 iterations, the exposure score for each company and resource equals
⃗ξk+1 = α · Qnorm · ⃗ξk + (1 −α) ·⃗znorm
with α the restart probability5, Qnorm the column-normalized adjacency matrix, ⃗znorm the
normalized degree-adapted restart vector, ⃗ξk a vector containing the exposure scores of all nodes
after k iterations, and ⃗ξ0 the initial distribution. Note that the ﬁnal scores are independent of the
initial values of ⃗ξ0 . We repeat the process for 100 iterations in order to make sure that
5 based on Page et al. , we choose α = 0.85
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Various egonets for micro- (a), small- (b) and medium-sized (c) companies. The company is the
center (i.e., the ego) of the egonet and is surrounded by its resources (i.e., the alters). High-risk resources are
labeled in black, low-risk nodes are white-colored. All central companies (egos) are still active at the time of
potential changes in the ﬁnal exposure score are only marginal.
Apart from a company score, the GOTCHA! propagation algorithm also assigns an exposure
score to each resource. Note that the interpretation of the exposure scores of both companies and
resources is the same: it expresses the extent to which the company/resource is exposed to fraud.
Figure 8 shows the exposure scores of the resources compared to their presence in fraudulent companies (for year t0). In general, 87% of the variation in the resources’ exposure score is explained by
their presence in fraudulent companies. While certain resources were never associated with fraudulent companies before, they receive a relatively high exposure score. This means that, although
those resources are not directly contaminated by fraudulent activities, they are surrounded by a
huge amount of fraud. We call this the anticipating eﬀect of GOTCHA!’s fraud propagation. On
the other hand, some resources have been involved in fraudulent companies, but received a low
fraud score. Due to the incorporation of the recency of fraud in the propagation algorithm, there is
a forgiving eﬀect present. When time evolves and resources were not involved in fraud again, their
fraudulent inﬂuence decreases and is only marginal.
In agreement with social security fraud experts, GOTCHA! considers resources involved in at
least two fraudulent companies always as high-risk. The minimum exposure score of the resource
connected to at least two fraudulent companies is chosen as the cut-oﬀvalue to distinguish between
low- and high-risk resources. The horizontal line in Figure 8 illustrates this cut-oﬀvalue. Resources
located above the cut-oﬀline are marked as high-risk. Note that this corresponds to only 0.28% of
all resources.
Having an estimated probability of the riskiness of the resources, we are now able to characterize
each company based on its connectivity to high- and low-risk resources.
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Description
Unipartite
DIRECT FEATURES
Neighborhood Degree
number of ﬁrst-order neighbors that are of
- high-risk
- low-risk
proportion of high-risk neighbors
Time-Weighted Degree
time-weighted6 number of ﬁrst-order neighbors that are of
- high-risk
- low-risk
proportion of high-risk nodes, weighted in time
number of closed triples in the neighborhood that contain
- at least one high-risk node
- no high-risk nodes
proportion of triples that contain at least one high-risk node
Quadrangles
number of quadrangles in the extended neighborhood that contain
- at least one high-risk company node
time-weighted
- at least one high-risk company node, weighted in time
- no high-risk company nodes
time-weighted
- no high-risk company nodes, weighted in time
proportion of quadrangles that contain at least one high-risk company node
time-weighted
- weighted in time
Quadrangle Frequency
quadrangles in the extended neighborhood that contain the same two ﬁrst-order
neighbors, and have
mean (high-risk)
- at least one high-risk company node, averaged
time-weighted
- at least one high-risk company node, averaged and weighted in time
max (high-risk)
- at least one high-risk company node, maximum
time-weighted
- at least one high-risk company node, maximum and weighted in time
mean (low-risk)
- no high-risk company nodes, averaged
time-weighted
- no high-risk company nodes, averaged and weighted in time
max (low-risk)
- no high-risk company nodes, maximum
time-weighted
- no high-risk company nodes, averaged and weighted in time
Neighborhood Similarity
count of similar neighbors
INDIRECT FEATURES
Exposure Score
node’s own exposure score
Neighborhood Exposure
ﬁrst-order neighbors’ exposure score
- averaged
weighted mean
- time-weighted
Network-based feature extraction.
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Network Feature Extraction
Given all legitimate companies at time t, we want to rank those companies according to their
fraud risk – i.e., the probability that they will commit fraud in the near future. As this risk
depends on a combination of intrinsic and network-based variables, we need to transform network
information to a set of promising network-based features for each active company . We infer two types of network-based features: direct and indirect features. The
direct network features are derived from each company’s direct neighborhood. Given the bipartite
structure of our network, for each company we take into account all nodes that are one and two
hops removed from the center (i.e., a company’s associated resources and companies). Figure 9
illustrates the direct neighborhood of a company with varying neighborhood size. The indirect
network features are derived from the exposure scores which use the whole network rather than a
node’s neighborhood. Table 2 gives an overview of the features derived from the network.
Our approach GOTCHA! is evaluated against three baselines: (1) a model without network
features, (2) a model with unipartite features, and (3) a model with bipartite features not timeweighted. In (2), companies are directly linked to each other. The link weight expresses the number
of shared resources between both companies. Here, the direct features are derived from the ﬁrstorder neighborhood as this explicitly comprises the associated companies. In (3), the network has a
bipartite structure, but the links are not weighted in time. For each company, the unipartite model
(2) extracts the following direct features: degree, triangles, neighborhood similarity. The degree
counts the number of neighbors. Since the impact of high-risk neighbors is an important indicator
of fraud, we distinguish between the number of ﬁrst-order high-risk and low-risk neighbors, and the
ratio hereof. Remark that a node is classiﬁed as high-risk if the node is a fraudulent company or if
the node has a suﬃcient large exposure score as explained in Section 3.3. A triangle is deﬁned as
three nodes that are all connected to each other. We say that a triangle has a high-risk if at least
one of the associated nodes is classiﬁed as high-risk. Neighborhood similarity measures the extent
to which the characteristics of the neighbors are similar to the node of interest. Here, we compare
companies based on location and sector-speciﬁc information, guided by expert expectations.
The indirect features include the company’s own exposure score and the exposure scores of the
ﬁrst-order neighborhood aggregated by the mean and maximum. The exposure score is computed
according to Equation 3 where the restart vector incorporates fraud (Requirement 2). The bipartite
model (3) derives the same set of features as the unipartite model, with the exception of triangles. In
our bipartite network structure where companies (resources) are exclusively connected to resources
(companies), no triangles exist. However, a shift of many resources from one company to another
might indicate the existence of a spider construction. Hence, we count the number of quadrangles
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Summary Statistics
DIRECT FEATURES
Neighborhood Degree
Time-Weighted Degree
Quadrangles
time-weighted
time-weighted
time-weighted
Quadrangle Frequency
mean (high-risk)
time-weighted
max (high-risk)
time-weighted
mean (low-risk)
time-weighted
max (low-risk)
time-weighted
Neighborhood Similarity
Location I
Location II
INDIRECT FEATURES
Exposure Score
Neighborhood Exposure
weighted mean
Network-based feature extraction.
– i.e., a closed path of four nodes – in the extended neighborhood where we both include the
ﬁrst- and second-order neighborhood. We say that a quadrangle is of high risk if at least one highrisk company node is associated with the quadrangle. For each pair of resources, the quadrangle
frequency measures how many times they are both included in a quadrangle. At company level, we
summarize this feature by the mean and maximum amongst all pairs of resources associated with
that company. The features in GOTCHA diﬀer from those of (3) as they are time-weighted by the
edges. For high-risk degree for example, this means that we sum the edge weight of the associated
high-risk resources. The value of a weighted quadrangle is determined by the arithmetic mean of
the link weights . We also derive the weighted mean of the ﬁrst-order
neighbors’ exposure scores, weighing the impact of each node’s exposure score by the edge weight.
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
We construct the features for each timestamp t ∈{t0,t1,t2,t3} and hence take into account the
time-evolving property of fraud. Together with the intrinsic features, these network-based features
are fed into a learning algorithm. An overview of the features’ summary statistics for year t3 can
be found in Table 3.
Modeling Approach
The social security institution keeps track of fraudulent companies and labels them fraudulent as
soon as suspicious activities are discovered. Having an extensive database containing time-related
records, we are able to evaluate time-consistent models at diﬀerent timestamps and time windows.
In our analysis, we deﬁne four timestamps t ∈{t0,t1,t2,t3}. For each timestamp, we specify within
which time window the learning algorithm has to predict whether a company will be fraudulent
or not. We evaluate the models on their detection of short-, medium- and long-term frauds. For
instance, a short-term model estimates the probability of short-term fraud. The time windows are
set to 6, 12 and 24 months, by experts’ agreement.
A key challenge in predicting social security fraud is making the right trade-oﬀbetween a small
time window that accurately reﬂects current types of fraud, and a larger time window which
provides more conﬁrmed evidence of fraud and anticipates new fraudulent structures.
As mentioned, in order to evaluate the relevance of relational information in fraud prediction,
we compare the GOTCHA! model with three baselines. The same instances are used in the
training and test sets for the baselines and GOTCHA! network model. By doing so, we are able
to determine the added value of incorporating relational knowledge (in terms of network-based
features) on the performance of the prediction models. We discuss each of the models in more
detail below.
Baseline - Intrinsic – is trained and tested with intrinsic-only variables. Relationships with
other companies and resources are neglected in the analysis.
Baseline - Unipartite – integrates intrinsic and network-based variables into one model (see
Challenge II in Section 2.2). The network only consists of companies that are linked to each other
by means of resources. Link weight is deﬁned as the number of resources that both companies
Baseline - Bipartite – integrates intrinsic and network-based variables into one model (see
Challenge II in Section 2.2). The network includes both companies and resources. A binary link
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
weight is imposed, deﬁning whether a link exists between a company and a resource.
Proposed GOTCHA! model – enriches the bipartite model with time-weighted network
Rebalancing the data set
To address the extremely skewed data distribution (see Challenge I in Section 2.2), we use the
SMOTE approach to rebalance the data set. Synthetic Minority Oversampling
Technique (SMOTE) is a combination of oversampling the minority class and undersampling the
majority class . Based on the experimental results of Chawla et al. , we
choose an oversampling and undersampling percentage of 400% and 200% respectively.
Learning algorithm
Random Logistic Forests and Random Forests are implemented to train the models. We opt for
ensemble methods as individual logistic regression or decision trees often fail to appropriately
weigh features based on their predictiveness , which our data set conﬁrmed
(see Section 5). Breiman proposed Random Forests, an ensemble of trees. Random Logistic
Forests, as proposed by , is an ensemble of plain vanilla logistic regressions,
where each classiﬁer is fed with ||log(N)+1|| random features, with N the total number of features.
The ﬁnal label assigned to an instance is based on the majority vote of each individual model. We
estimate an ensemble of 500 individual models, each with 6 random features.
Using ten-fold stratiﬁed cross-validation, we enforce the learning algorithms to use each instance
once in the test set. Stratiﬁed sampling ensures that each sample represents the real fraud
distribution. As such, we can average the results, obtaining more stable performance measures of
each of the models and resulting in a better impression of the signiﬁcance of the diﬀerent types of
variables.
In summary, our experiments are designed to answer the following questions: 1) Do networkbased variables yield better performance over intrinsic-only variables? If so, by how much? 2) Is
the incorporation of a bipartite, time-weighted network structure essential? 3) Are network models
able to capture changes in the environment? Do they statistically perform better as the baselines
over the diﬀerent timestamps? 4) Are the network models able to identify companies that will
perpetrate fraud in the near future and also on long term?
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
AUC Performance
(1) Baseline - Intrinsic
Random Log. Forest
Random Forest
(2) Baseline - Unipartite
Random Log. Forest
Random Forest
(3) Baseline - Bipartite
Random Log. Forest
Random Forest
(4) GOTCHA!
Random Log. Forest
Random Forest
AUC scores of the baseline and GOTCHA! models.
In this section, we discuss the results of our GOTCHA! network model compared to the baselines.
All models are evaluated in terms of the AUC score (Area Under ROC Curve), precision and
recall. We use an extensive time-dependent data set obtained from the Belgian Social Security
Institution. For each timestamp, approximately 220,000 active companies and more than 5 million
resources are registered. Our goal is to ﬁnd companies that exhibit a high risk of perpetrating
fraud. We extract intrinsic features that describe the current characteristics of a company, and
network-based features that take into account the present and past relationships to the resources.
We train and test models based on fraudulent companies found and conﬁrmed by experts. We
analyze the diﬀerence in performance between the baselines and the GOTCHA! model, as well as
the diﬀerence in performance for the various time windows (i.e., short, medium and long term).
Do network-based features boost the performance of traditional models that only use intrinsic
features? That is, does the GOTCHA! model signiﬁcantly outperform the baselines? As opposed
to existing methods which bootstrap the network propagation
algorithm with the output of an intrinsic model, we opt to include both intrinsic and domain-driven
network-based features in the ﬁnal model. There are two reasons. First, our approach indicates
which variables (including intrinsic variables) contribute to fraudulent behavior, and as a consequence, experts will gain insights in the current fraud process. Second, we start from a set of
conﬁrmed fraudulent companies to initialize the propagation algorithm which other methods lack.
Table 4 outlines the average AUC score for the diﬀerent estimated models, based on 10-fold cross
validation. The results show that the intrinsic baseline can be improved by including networkbased variables. The unipartite baseline (1) performs signiﬁcantly better than the intrinsic baseline
(2) at a signiﬁcance level of 0.05 (except for year t0 on short term and t2 on long term for the
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Mean N. Exposure
wMean N. Exposure
Exposure Score
Quadr. (TW Rel.)
Historical I
Quadr. Freq. (TW Max HR)
Quadr. (TW HR)
Quadr. (HR)
High-risk Degree
Quadr. Freq. (TW Mean LR)
Similarity (Location) I
High-risk TW Degree
Quadr. Freq. (TW Max HR)
Quadr. (LR)
Quadr. Freq. (TW Max LR)
Quadr. Freq. (Mean HR)
Quadr. Freq. (Max LR)
Historical II
Quadr. (TW LR)
Quadr. Freq. (TW Mean HR)
Quadr. Freq. (Mean LR)
Max N. Exposure
Similarity (Sectorial)
Low-risk TW Degree
Sectorial I
Similarity (Location) II
Sectorial II
Rel. TW Degree
Sectorial III
Low-risk Degree
Rel. Degree
Quadr. (Rel.)
Variable Importance
Time-weighted Network
Mean N. Exposure
wMean N. Exposure
Exposure Score
Quadr. (TW Rel.)
Historical I
Quadr. Freq. (TW Max HR)
Quadr. (TW HR)
Quadr. (HR)
High-risk Degree
Quadr. Freq. (TW Mean LR)
Similarity (Location) I
High-risk TW Degree
Quadr. Freq. (TW Max HR)
Quadr. (LR)
Quadr. Freq. (TW Max LR)
Quadr. Freq. (Mean HR)
Quadr. Freq. (Max LR)
Historical II
Quadr. (TW LR)
Quadr. Freq. (TW Mean HR)
Quadr. Freq. (Mean LR)
Max N. Exposure
Similarity (Sectorial)
Low-risk TW Degree
Sectorial I
Similarity (Location) II
Sectorial II
Rel. TW Degree
Sectorial III
Low-risk Degree
Rel. Degree
Quadr. (Rel.)
Variable Importance
Mean N. Exposure
wMean N. Exposure
Exposure Score
Quadr. (TW Rel.)
Historical I
Quadr. Freq. (TW Max HR)
Quadr. (TW HR)
Quadr. (HR)
High-risk Degree
Quadr. Freq. (TW Mean LR)
Similarity (Location) I
High-risk TW Degree
Quadr. Freq. (TW Max HR)
Quadr. (LR)
Quadr. Freq. (TW Max LR)
Quadr. Freq. (Mean HR)
Quadr. Freq. (Max LR)
Historical II
Quadr. (TW LR)
Quadr. Freq. (TW Mean HR)
Quadr. Freq. (Mean LR)
Max N. Exposure
Similarity (Sectorial)
Low-risk TW Degree
Sectorial I
Similarity (Location) II
Sectorial II
Rel. TW Degree
Sectorial III
Low-risk Degree
Rel. Degree
Quadr. (Rel.)
Variable Importance
Variable Importance of Random Forest for timestamp t3. (TW = time-weighted; LR = low-risk; HR
= high-risk; N = neighborhood)
Random Forest model). We conclude that network-based variables boost the performance of the
fraud detection models. Remember, link weight in a unipartite network represents the number of
shared resources between two companies. Including resources as a separate entity in the network,
allows us to integrate time in the bipartite network by the link weight between a resource and a
company. We ﬁnd that the bipartite baseline (3) without time-weighted edges does improve the
intrinsic baseline (1), but does not outperform the unipartite baseline (2). The GOTCHA! model
(4) signiﬁcantly surpasses all baselines (1)-(3) in terms of AUC score from which we can conclude
that features derived from a time-weighted bipartite network are an important enrichment for fraud
detection models.
Ensemble methods perform better than the individual models. We compare a Decision Tree
model to Random Forests, and Logistic Regression to Random Logistic Forests, and ﬁnd that the
highest performance in terms of AUC score is achieved with ensemble models. For brevity, we
omit the model details.
Which variables (or variable categories) are mainly responsible for the performance of our
GOTCHA! models? Figure 10 depicts the variable importance of Random Forests in year t3 when
we are testing long-term fraud. Variable importance of each feature is measured by permutating
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
DIRECT FEATURES
Neighborhood Degree
Time-Weighted Degree
Quadrangles
time-weighted
time-weighted
time-weighted
Quadrangle Frequency
mean (high-risk)
time-weighted
max (high-risk)
time-weighted
mean (low-risk)
time-weighted
max (low-risk)
time-weighted
Res. Similarity
Location (1)
Location (2)
INDIRECT FEATURES
Exposure Score
Neighborhood Exposure
weighted mean
Variable importance and sign of the GOTCHA! model for social security fraud detection. A positive
sign indicates a positive contribution of that variable to fraud. A negative sign means that the variable negatively
impacts fraud.
the feature values among all out-of-bag observations – i.e., the observations left out when training
one tree. The diﬀerence between the number of correct votes with and without permutation is
the variable importance. Figure 10 shows that network-based variables are important indicators in
fraud detection models. The most predictive features comprise features derived from the exposure
scores and quadrangles. The exposure score captures the extent to which a node is inﬂuenced by
fraud. According to Figure 10, aggregated features derived from the neighborhood exposure scores
are more meaningful than the company’s own exposure score. Quadrangles measure whether a pair
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
of resources has been transferred between multiple companies before. The relative number of highrisk quadrangles plays an important role in the detection of fraud. Quadrangle frequency measures
how many times a transfer between the same pair of resources occurred. The more companies the
two resources have in common, the more suspicious the transfer is. This is in line with the process
of a spider construction, where resources are continuously moved from one fraudulent company to
Table 5 summarizes the signs of the coeﬃcients for the network parameters, based on Random
Logistic Forests. Note that, in general, features aggregating high-risk characteristics are positively
related with fraud, which complies with expert’s intuition. One exception is the high-risk timeweighted degree which is overall negatively related with fraud. Remark that low-risk quadrangle
frequency (maximum and time-weighted) positively impacts the suspiciousness of a company.
It appears that two resources that frequently move together even between many legitimate
companies are anomalous. In other words, the frequent hopping behavior in itself might thus be
an important indicator of suspiciousness. This might indicate that the GOTCHA! model is able
to ﬁnd new spider constructions, and does not completely rely on high-risk inﬂuences from the
surrounding environment. Based on the large parameter value, we ﬁnd that the weighted mean
neighborhood exposure score is a crucial element in the prediction of fraud, which is in accordance
with Figure 10. We conclude that network-based features remain relevant to estimate fraud over
time, irrespective of the timestamp and the time window.
Does the impact of network-based variables depend on the intrinsic variables of a company
or are they independent of other intrinsic features (e.g., are network eﬀects more pronounced
for companies that operate in a high-risk sector or legal category)? We do not ﬁnd signiﬁcant
interaction eﬀects between intrinsic and network-based features. Network-based features play an
important role, irrespective of the intrinsic characteristics of the company.
The companies outputted by our models are passed on to experts for further inspection. As
experts’ resources are limited, they require models that generate a short list (high precision) with
as many possible fraud cases in the near future (high recall). In practice, however, we often need
to make a trade-oﬀbetween precision and recall. Figure 11 depicts the precision and recall for the
baselines and the GOTCHA! model over various timestamps and time windows. Error bars indicate
the minimum and maximum results achieved over the folds. Although the GOTCHA! model does
not achieve a higher precision than the network models, it performs on average better than the
intrinsic-only model. A pairwise t-test conﬁrms that these results are signiﬁcant at (α = 0.1), with
the exception of the medium-term model for the intrinsic baseline in year t0. Although subtle, notice
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
the stepwise increase in precision over the diﬀerent time windows for almost all models within
each timestamp. Overall we can say that shorter-term models achieve a slightly lower precision
than models estimated on a longer time window. This can be explained by the lack of conﬁrmed
fraudulent cases to learn from.
Baseline – Intrinsic
Baseline – Unipartite
Baseline – Bipartite
Precision and recall for the various models. The network-based models outperform the
intrinsic baseline. While the Gotcha! models generate a high precision, the baselines and the Gotcha!
model perform equally good in terms of recall. As such, the Gotcha! models can detect almost all
fraud cases (high recall), like the intrinsic baseline, but are able to dramatically reduce the list that
experts need to investigate (high precision).
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
1 - Speciﬁcity
Sensitivity
ROC curve:
Out-of-time validation (Year t2 - Year t3)
Baseline - Intrinsic
Baseline - Unipartite
Baseline - Bipartite
ROC analysis of the proposed approach applied in practice. All models are estimated on
Year t2 and tested on Year t3.
In terms of recall, the GOTCHA! model and baselines follow a similar pattern: the ratio of
detected companies decreases when the time window is extended. On short term, every model
succeeds to identify all the fraudulent companies which is shown by the maximum error bars of one.
This assesses the trade-oﬀbetween recall and precision. Long-term models are more precise, which
is penalized by a lower recall. Short-term models are able to identify all fraudulent companies at
the expense of a lower precision.
Out-of-time Validation
Up until now, models were trained and validated on the same timestamp. Results prove the superiority of our proposed model compared to the baselines. However, in practice, models are trained on
a previous timestamp and used in real-time. This section discusses our ﬁndings when implementing
the models in this way. This is called out-of-time validation. The models are trained on year t −1
and tested on year t.
Figure 12 represents a ROC analysis of an out-of-time validation on medium-term period between
year t2 and year t3 (other timestamps perform similarly). The ﬁgure shows that the baselines
already perform well. However, including network-based variables has a positive eﬀect on the
predictive power of the network models. In particular, when a network model gives a company a
high score, it has a higher probability of begin truly fraudulent. This is shown in the steep increase
in the beginning of the curve that represents the performance of the network models. Remark that
the unipartite model outperforms the bipartite model. The most probable reason is that every
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Bankrupt Non-
Baseline - Intrinsic
Baseline - Unipartite
Baseline - Bipartite
Baseline - Intrinsic
Baseline - Unipartite
Baseline - Bipartite
Baseline - Intrinsic
Baseline - Unipartite
Baseline - Bipartite
Future lifecycle of the top 100 most suspicious companies. The number of conﬁrmed fraudulent
companies is reported, together with the number of bankrupt and non-active companies. These results show
that GOTCHA! outperforms the other baselines by detecting up to 33%, 23% and 6% more fraud than the
intrinsic, unipartite and bipartite baseline respectively (column total fraud).
resource has an equal impact on a company in the bipartite model, independent of the recency
of the relationship. This means that old relationships are equally treated as new relationships in
the analysis which can deteriorate the performance. The unipartite network connects companies
to companies by means of shared resources. A higher link weight indicates a more important
connection. As such, unipartite networks are able to make a better distinction between more
important links – in terms of the number of resources associated to that company – than bipartite
networks. However, when we include time-weighted features, we achieve the best performance. This
is shown by the GOTCHA! model.
The previous section illustrated that the medium- and long-term models perform better in terms
of precision. It appears, however, that many companies detected by the short-term model will
have solvency problems sometime in the future; this is shown in Table 6. The table represents the
results of an out-of-time validation over the diﬀerent timestamps, when the models are estimated
on short-term fraud. We analyze the top 100 most suspicious companies, as experts can only
investigate maximum 100 companies during each time period which thus reﬂects model usage in
practice. Remark that the results in Figure 11 are based on the optimal sensitivity-speciﬁcity
cutoﬀ, whereas in Table 6 we report the top 100 most suspicious companies. Table 6 indicates how
many companies in the list commit fraud on short (ST Fraud), medium (MT Fraud) and long (LT
Fraud) term. The model even identiﬁes companies that will commit fraud after the time window
of analysis (Fraud after analysis). Note that this eﬀect diminishes over time due to the recency
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
Evolution of a spider construction over time. The network represents the nodes and
connections as observed at time t0. Only one company is fraudulent, but passes many resources to
other companies. Future data shows that three extra companies will commit fraud, and two companies
will go bankrupt. If we had applied GOTCHA!, our results show that we could have avoided the
development of this spider construction at time t0.
of the data used. GOTCHA! improves the intrinsic baseline by detecting 31%, 33% and 33%
more fraudulent and high-risk cases for the respective timestamps, resulting in a higher precision
and recall. The unipartite baseline is improved by 11%, 23% and 15%, respectively. The bipartite
baseline is outperformed by an increase of 6%, 6% and 3% respectively. Recall that the ROC curve
of the bipartite model (see Figure 12) did not achieve a better performance than the unipartite
model. However, when analyzing the results by a limited set of the top 100 suspicious companies,
we ﬁnd that the bipartite model is more precise than the unipartite model. These results are
consistent over all timestamps.
What happens to the other companies in the list? Some are still active (Active). Others are
normally suspended (Non-active), and redeemed all their outstanding debts. Surprisingly, we see
that 29%, 30% and 20% of these companies go bankrupt in the future. Although there is a lack
of hard evidence and the time passed, experts are convinced that those companies are missed
fraudsters. Assuming the expert is right in his/her expectation, this would mean that the detection
model is able to reach higher levels of precision up to 71%, improving the intrinsic baseline by
detecting up to 55% additional fraudsters over time (year t2). There are thus reasons to believe
that GOTCHA! is suitable for retrospective fraud detection. To summarize, by using GOTCHA!,
experts can identify fraudulent companies much faster and more accurately, and potentially are
still able to recover some of the losses occurring with fraud.
Curtailing newly originated spider constructions
Rather than detecting far-evolved spider constructions, experts are enticed to identify newly originated spider constructions as well, i.e., new fraudulent setups with only few fraudulent companies
in it. In Figure 13, we illustrate that GOTCHA! is also able to ﬁnd such constructions. The ﬁgure
shows a subgraph for timestamp year t0. One company has committed fraud during this timestamp. Note that almost all its resources ﬂow towards another company. Indeed, this and two other
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
companies commit fraud in the future, as well as two companies that went bankrupt. Our results
show that if we had applied GOTCHA! during timestamp t0, we could have avoided the development of this spider construction as those companies would have appeared in the list generated on
t0. It can be questioned whether the two bankruptcies are purely coincidental or that they are part
of the fraud construction.
Conclusions
In this paper, we improve the performance of traditional classiﬁcation techniques for social security
fraud detection by including domain-driven network information using GOTCHA!, a new fraud
detection approach. We start by identifying the challenges that concur with fraud and design
GOTCHA! such that it addresses each of these challenges to detect future fraud. In particular, we
represent the network as a time-weighted bipartite graph, including two node types: companies
and their resources. Starting from a limited set of conﬁrmed fraudulent companies, we spread
fraudulent inﬂuences of one node type through the network and infer an initial exposure score for
both node types, i.e., the unlabeled companies and resources. Our propagation algorithm inherits
concepts from the Personalized PageRank algorithm as proposed by , and is
extended by making the following domain-dependent adjustments: (1) propagation for bipartite
graphs (i.e., scoring both companies and resources), (2) emphasizing fraud, (3) dynamical behavior:
use of a time-dependent weight to represent relationships between companies and resources, ´and to
weigh the impact of fraud, (4) degree-independent propagation. The time-dependent weight allows
to both anticipate and forgive the riskiness of the resources. For each company, we aggregate the
properties of the direct and indirect neighborhood, and combine them with intrinsic features.
The Social Security Institution beneﬁts from our developed approach in multiple ways: (1)
Guided search for fraud. Instead of randomly investigating companies, the GOTCHA! algorithm
produces an accurate list of companies that are worthwhile to investigate by experts. Our
experiments show that our GOTCHA! network model exploits essential information for predicting
future fraud more eﬃciently. Our model is compared to three baselines. The ﬁrst one is an
intrinsic-only baseline and uses only intrinsic features. The second one is a unipartite baseline,
linking the companies directly to each other and aggregating resource information in the link
weight. The third one extends the network representation to a bipartite graph but does not include
time in the link weights. Results show that GOTCHA! produces more accurate results than the
baselines in terms of their AUC score. We ﬁnd that network models achieve a higher precision,
although the recall is approximately the same. Hence, network-driven models reduce the set of
high-risk companies passed on to the experts for further screening. (2) Faster fraud detection. The
Author: GOTCHA! Network-based Fraud Detection for Social Security Fraud
Article submitted to Management Science; manuscript no. MS-14-00232
predictability of short-term models is surprising. Short-term models are not only able to accurately
predict which companies will commit fraud in the near future, but also identify companies that
perpetrate fraud many years later. This results in a higher overall precision compared to mediumand long-term models, favoring the short-term models in the fraud detection process. This also
indicates that, so far, many fraudulent companies already radiate fraudulent behavior, which used
to take several months, or even years, before they were actually captured. (3) Immediate feedback
loop. Findings of experts are immediately implemented in the models. The models update their
detection process accordingly. Consequently, changes in the fraud environment are captured by
the models. Our results show that models indeed use diﬀerent sets of variables over time. Our
future work will elaborate more on active learning, by updating the model using both correctly
and incorrectly classiﬁed instances.
Although we applied our approach to social security fraud detection, we have promising results
that our proposed framework can be employed for the detection of other fraud types where the
network can be represented as a higher order graph (n-partite graph). In , we demonstrate the beneﬁts of a similar approach on credit card fraud where merchants are
explicitly connected to buyers through their transactions. Other examples might include money
laundering linking people to cash transactions, etc. This work focuses on ﬁnding individual companies. Another topic for future research is community detection which may ﬁnd groups of suspicious
companies. Community detection allows experts to gain a thorough understanding in the creation
and development of spider constructions.
Acknowledgments
This work was performed by V´eronique Van Vlasselaer, Monique Snoeck and Bart Baesens through support
of FWO grant G.0551.15, by Tina Eliassi-Rad through support from NSF CNS-1314603, DTRA HDTRA1-
10-1-0120, DARPA under SMISC Program Agreement No. W911NF-12-C-0028, and under the auspices of
the U.S. Department of Energy by Lawrence Livermore National Laboratory under Contract DE-AC52-
07NA27344, and by Leman Akoglu through support from National Science Foundation CAREER 1452425,
IIS 1408287, DARPA Transparent Computing Program under Contract No. FA8650-15-C-7561, a Facebook
Faculty Gift, and an R&D grant from Northrop Grumman Aerospace Systems 1452425.