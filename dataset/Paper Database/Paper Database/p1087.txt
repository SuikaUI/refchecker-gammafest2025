SIAM J. SCI. COMPUT.
⃝2006 Society for Industrial and Applied Mathematics
Vol. 28, No. 6, pp. 2248–2265
SEMI-IMPLICIT COVOLUME METHOD IN 3D IMAGE
SEGMENTATION∗
S. CORSARO†, K. MIKULA‡, A. SARTI§, AND F. SGALLARI¶
Abstract. We introduce a three-dimensional (3D) semi-implicit complementary volume numerical scheme for solving the level set formulation of (Riemannian) mean curvature ﬂow problem. We
apply the scheme to segmentation of objects (with interrupted edges) in 3D images. The method is
unconditionally stable and eﬃcient regarding computational times. The study of its experimental
order of convergence on 3D examples shows its second order accuracy for smooth solutions and ﬁrst
order accuracy for highly singular solutions with vanishing gradients as arising in image segmentation.
Key words.
partial diﬀerential equations, numerical methods, image segmentation, semiimplicit scheme, complementary volume method
AMS subject classiﬁcations. 65M60, 65M12, 68U10
DOI. 10.1137/060651203
1. Introduction. In this paper we introduce a fast and stable computational
method for a three-dimensional (3D) image segmentation based on a solution of the
following Riemannian mean curvature ﬂow equation:
ε2 + |∇u|2∇.
g(|∇Gσ ∗I0|)
ε2 + |∇u|2
Here, u(t, x) is an unknown; we call it segmentation function or subjective surface
 , deﬁned in QT ≡[0, T] × Ω. The computational domain Ω ⊂Rd, d = 3,
is bounded by a Lipschitz continuous boundary ∂Ω. The endpoint of the interval
[0, T] represents a time when the ﬁnal segmentation result is obtained. In practice
it is chosen a posteriori; the segmentation is stopped when a change of solution in
time (e.g., in L2-norm) is less than a prescribed threshold. The Riemannian mean
curvature ﬂow (1.1) is weighted by a function g giving edge detection information
from the segmented image I0. The function g : R+
0 →R+ is nonincreasing, g(0) = 1,
admitting g(s) →0 for s →∞, e.g., g(s) = 1/(1 + Ks2), K ≥0 . Gσ ∈C∞(Rd)
is a smoothing kernel, e.g., the Gauss function, which is used in presmoothing of
image gradients by the convolution. We will use the notation g0 = g(|∇Gσ ∗I0|),
and, due to properties of convolution, 1 ≥g0 ≥δσ > 0 . The model parameter
1 ≥ε > 0 shifts the model from the mean curvature ﬂow of graphs (ε = 1) to the
mean curvature ﬂow of level sets (ε = 0) . For segmentation of objects without
corrupted boundaries (e.g., due to a noise or occlusion) the choice ε = 1 is optimal.
∗Received by the editors January 30, 2006; accepted for publication (in revised form) June 27,
2006; published electronically December 11, 2006. This work was supported by NATO Collaborative
Linkage grant PST.CLG.979123, and by grants VEGA 1/3321/06 and APVT-20-040902.
 
†CNR, Institute for High-Performance Computing and Networking (ICAR), Via P. Castellino 111,
80131 Napoli, Italy ( ).
‡Department of Mathematics, Slovak University of Technology, Radlinsk´eho 11, 813 68 Bratislava,
Slovakia ( ).
§DEIS, University of Bologna, Via Risorgimento 2, 40136 Bologna, Italy ( ).
¶Department of Mathematics, University of Bologna, Piazza di Porta S. Donato 5, 40127 Bologna,
Italy ( ).
SEMI-IMPLICIT 3D COVOLUME METHOD
When segmenting an object with gaps in encompassing edges, then smaller ε, close
to zero, should be used.
Together with the variational approaches following the seminal idea of Mumford
and Shah , the curve and surface evolution models are powerful techniques used
in image segmentation . Equation (1.1) can be formally
understood as an Evans–Spruck ε-regularization 
|∇u| ≈|∇u|ε =
ε2 + |∇u|2
of the segmentation equation
ut = |∇u|∇.
which is called geodesic or conformal mean curvature ﬂow equation in the level set
formulation .
In , the ε-regularization (1.2) was used as a tool to prove existence of the
viscosity solution of the mean curvature motion in the level set formulation
given by (1.3) with g0 ≡1 . The basic idea is that if the motion of a graph by
mean curvature is rescaled by a factor 1
ε, and letting ε →0, it gives the evolution of
level sets. Equations (1.3) and (1.1), respectively, were studied analytically in 
and , respectively.
In (1.3), where 0 < g0 ≤1, the motion of level sets is inﬂuenced by the image
features expressed in g0. In the case ε = 1, (1.1) gives the motion of a graph by mean
curvature with respect to a speciﬁc Riemann metric depending on g0. Rescaling this
motion by 1
ε (or, correspondingly, rescaling the Riemann metric) helps to complete
the interrupted edges. The idea to use such special Riemannian mean curvature ﬂow
of graphs to extract the so-called subjective contours and to segment images with
interrupted edges originates in ; such an approach is called the subjective
surface method. Unlike in (1.3), the subjective surface method does not move one
particular (e.g., zero) level set to the boundary of the segmented object, but it moves
all the level sets there.
The forming discontinuity (shock) in the evolving graph
of solution of (1.1) is used to detect object boundaries.
Thus the standard level
set methods preventing discontinuity formation by reinitialization of the front and
applying, e.g., higher order (ENO or WENO) schemes cannot be used here.
Concerning numerical solution, in all previous approaches, the level set type equation (1.3), respectively (1.1), was rewritten into the advection-diﬀusion form
ut = g0|∇u|∇.
where |∇u|ε is used instead of |∇u| in the case of (1.1). Then this form of equation was
solved by a ﬁnite diﬀerence scheme using upwind in the advection term and explicit
time stepping in the curvature term . As it will be discussed
in section 3.3, such an approach is computationally ineﬃcient mainly due to severe
stability restrictions both in advection and curvature parts.
In spite of the previous methods based on (1.4), our 3D covolume technique
suggested in this paper relies on discretization of (1.3) or, more precisely, of its εregularization (1.1). Using formulation (1.1) and employing its variational structure
we develop an unconditionally stable semi-implicit time discretization scheme which
gives the image segmentation in a computationally fast way. The main goal of this
paper is to suggest such a method for high-scale 3D image segmentation problems and
S. CORSARO, K. MIKULA, A. SARTI, AND F. SGALLARI
show its stability, computational eﬃciency, and experimental convergence properties.
Since the method can be used for any ε > 0 with ε →0, it can be applied to eﬃcient
solution of level set ﬂows also in any other mean curvature driven applications.
The covolume technique (also called complementary volume or ﬁnite volume element method) is a combination of ﬁnite element (see, e.g., ) and ﬁnite volume
methods; see, e.g., . The discrete equations are derived using the ﬁnite volume methodology, i.e., integrating equation in the so-called control (complementary,
ﬁnite) volume. The control volumes are constructed as elements of a dual (complementary) grid to a primal ﬁnite element triangulation (tetrahedral grid in the 3D
case). Employing the methodology of the ﬁnite element method, the piecewise linear
representation of solution on a tetrahedral grid is used to evaluate in a clear and
simple way the nonlinear quantities, the absolute value of gradients, in the numerical
solution of (1.1).
A two-dimensional (2D) covolume technique for solving the level set formulation of
mean curvature ﬂow was ﬁrst introduced in . There also a particular nonlinear fully
implicit time discretization scheme was given. The nonlinear scheme was designed in
such a way that the basic properties of a continuous solution, namely L∞- and W 1,1stability, are fulﬁlled also for discrete solutions.
In a linear semi-implicit 2D covolume level set method was given and studied.
The same basic stability properties were proven for the semi-implicit scheme. Since
it solves in every discrete time step linear (instead of nonlinear) algebraic systems, it
gives solution in a more eﬃcient way. In , the semi-implicit scheme was applied
to 2D image ﬁltering problem represented by the nonlinear diﬀusion level set type
equation 
ut = g(|∇Gσ ∗u|)|∇u|∇.
In this paper we present for the ﬁrst time a semi-implicit covolume scheme in three
dimensions for solving level set type problems and apply the scheme to a diﬀerent highscale application—3D image segmentation. The previous 2D covolume strategy is not
straightforwardly extended to the 3D case, but a new primal-dual grid construction
is developed respecting discrete voxel structure of 3D images.
Our new covolume
scheme is related to 3D image data representation known in computer graphics as a
centered-cubic-lattice method . From the numerical point of view, it avoids any grid
orientation eﬀect, which is important for simulation of curve and surface evolution on
a ﬁxed grid; we illustrate this phenomenon in section 3.3. Although (1.5), studied in
 , and (1.1) and (1.3), respectively, look similar, their structure is diﬀerent. In (1.1)
and (1.3) the weighting term g0 = g(|∇Gσ ∗I0|) is inside the divergence which brings
a new advective phenomenon into the model; cf. (1.4). The advective term given by
the vector ﬁeld −∇g0 is very important in the segmentation context; it drives all level
sets to the image edges. Without the convective term (let us think about (1.5) with
g0 instead of g(|∇Gσ ∗u|) in the right-hand side), the model is unable to segment
nonconvex objects, as discussed in section 3.3, and so the method from cannot
be applied to image segmentation. Fortunately, the semi-implicit covolume strategy
handles the weighting term inside divergence naturally, without going to advectiondiﬀusion form (1.4), and allows us to develop a fast and stable numerical scheme for
3D image segmentation.
The paper is organized as follows. In section 2 we introduce in detail our 3D
semi-implicit covolume method. In section 3 we study its experimental order of convergence in nontrivial examples of the level set evolution and thus its reliability in
SEMI-IMPLICIT 3D COVOLUME METHOD
simulations. We also discuss segmentation experiments with artiﬁcial and real (medical) 3D images and compare the method with other approaches. In this paper we
concentrate mainly on algorithmic and computational aspects of the method. A full
theoretical convergence analysis is not a simple task, and it is out of scope of this
paper; however, it is a subject of our current research.
2. Computational method. We present our method formally in the discretization of (1.3), although we always use its ε-regularization (1.1) with a speciﬁc ε > 0.
The notation is simpler in the case of (1.3), and it will be clear where regularization
appears in the numerical scheme.
Equation (1.1) is accompanied either with Dirichlet boundary conditions
u(t, x) = uD
in [0, T] × ∂Ω,
or Neumann boundary conditions
∂s (t, x) = 0
in [0, T] × ∂Ω,
where s is unit normal to ∂Ω, and with the initial condition
u(0, x) = u0(x)
In the image segmentation we use Dirichlet boundary conditions, and without loss
of generality we may assume uD = 0. The zero Neumann boundary conditions are
often used in computations of interface motions in free boundary problems (see, e.g.,
 ) or in morphological image smoothing (see, e.g., ).
In this paper,
we use Dirichlet boundary conditions in computing 3D image segmentations and in
comparisons with known exact solutions u. The zero Neumann boundary conditions
are used here in testing the accuracy of the method when dealing with the known
motion of a particular level set of function u without knowing the exact evolution
of the entire function u. In 3D image segmentation, the computational domain Ω is
usually a subdomain of the image domain; it should include the segmented object.
Along with the boundary conditions an initial condition (2.3) is also prescribed, and
we assume that the initial function is bounded, i.e., u0 ∈L∞(Ω).
2.1. Semi-implicit time discretization. First, we choose a uniform discrete
time step τ and a variance σ of the smoothing kernel Gσ.
Then we replace the
time derivative in (1.3) by backward diﬀerence. The nonlinear terms of the equation
are treated from the previous time step, while the linear ones are considered on the
current time level; this means semi-implicitness of the time discretization. By such
an approach we get our semi-discrete in time scheme:
Let τ and σ be ﬁxed numbers, g0 be given by an image I0, and u0 be a given initial
segmentation function. Then, for every discrete time moment tn = nτ, n = 1, . . . N,
we look for a function un, solution of the equation
2.2. Covolume spatial discretization in three dimensions. A 3D digital
image is given on a structure of voxels with cubic shape, in general. Since discrete
values of image intensity I0 are given in voxels and they inﬂuence the model, we will
S. CORSARO, K. MIKULA, A. SARTI, AND F. SGALLARI
Fig. 2.1. A tetrahedron of our primal grid together with its intersection with the bottom face
of voxel covolume is shown.
relate spatially discrete approximations of the segmentation function u also to the
voxel structure, more precisely, to voxel centers. In every discrete time step tn of
the method (2.4) we have to evaluate gradient of the segmentation function at the
previous step |∇un−1|. Toward that goal we put a 3D tetrahedral grid into the voxel
structure and take a piecewise linear approximation of the segmentation function on
such a grid. Such an approach will give a constant value of gradient in tetrahedra
(which is the main feature of the covolume and linear ﬁnite element 
methods in solving mean curvature ﬂow in the level set formulation), allowing simple,
clear, and fast construction of a fully discrete system of equations.
The formal construction of our covolumes will be given in the next paragraph, and
we will see that the covolume mesh corresponds back to the image voxel structure,
which is reasonable in image processing applications. On the other hand, the construction of covolume mesh has to use a 3D tetrahedral ﬁnite element grid to which
it is complementary. This will be possible using the following approach. First, every
cubic voxel is split into six pyramids with vertex given by the voxel center and base
surfaces given by the voxel boundary faces. The neighboring pyramids of neighboring
voxels are joined together to form an octahedron which is then split into four tetrahedra using diagonals of the voxel boundary face—see Figure 2.1. In such a way we
get our 3D tetrahedral grid. Two nodes of every tetrahedron correspond to centers
of neighboring voxels, and further two nodes correspond to voxel boundary vertices;
every tetrahedron intersects the common face of neighboring voxels. Let us note that
due to our image processing application in mind, we restrict all further considerations
only to this type of grid. In our method, only the centers of voxels will represent degree
of freedom nodes (DF nodes); i.e., solving the equation at a new time step we update
the segmentation function only in these DF nodes. Additional nodes of tetrahedra
will not represent degrees of freedom; we will call them nondegree of freedom nodes
(NDF nodes), and they will be used in piecewise linear representation of segmentation
function. Let a function u be given by discrete values in the voxel centers, i.e., in DF
nodes. Then in NDF nodes we take the average value of the neighboring DF nodal
values. By such deﬁned values in NDF nodes a piecewise linear approximation uh of
u on the tetrahedral grid is built.
For the tetrahedral grid Th, given by the previous construction, we construct a
covolume (dual) mesh. We modify the approach given in in such a way that
SEMI-IMPLICIT 3D COVOLUME METHOD
our covolume mesh will consist of cells p associated only with DF nodes p of Th, let us
say p = 1, . . . , M. Since there will be one-to-one correspondence between covolumes
and DF nodes, to avoid any confusion, we use the same notation for them. For each
DF node p of Th let Cp denote the set of all DF nodes q connected to the node p by an
edge. This edge will be denoted by σpq and its length by hpq. Then every covolume p is
bounded by the planes epq that bisect and are perpendicular to the edges σpq, q ∈Cp.
By this construction, if epq intersects σpq in its center, the covolume mesh corresponds
exactly to the voxel structure of the image inside the computational domain Ω where
the segmentation is provided. Then the covolume boundary faces do cross in NDF
nodes. So we can also say that NDF nodes correspond to zero-measure covolumes,
and thus they do not add additional equations to discrete model, and they do not
represent degrees of freedom in the covolume method. We denote by Epq the set of
tetrahedra having σpq as an edge. In our situation (see Figure 2.1) every Epq consists
of four tetrahedra. For each T ∈Epq let cT
pq be the area of the portion of epq that is
in T, i.e., cT
pq = m(epq ∩T), where m is the measure in Rd−1. Let Np be the set of
all tetrahedra that have DF node p as a vertex. Let uh be a piecewise linear function
on Th. We will denote a constant value of |∇uh| on T ∈Th by |∇uT | and deﬁne
regularized gradients by
ε2 + |∇uT |2.
We will use notation up = uh(xp), where xp is the coordinate of DF node p of Th.
With these notations, we are ready to derive covolume spatial discretization. As
it is usual in ﬁnite volume methods , we integrate (2.4) over every covolume
p, i = 1, . . . , M, and using divergence theorem we get an integral formulation
The exact “ﬂuxes”
∂ν ds in the right-hand side and “capacity function”
|∇un−1| in the left-hand side (see, e.g., ) will be approximated numerically using
piecewise linear reconstruction of un−1 on triangulation Th. If we denote g0
T approximation of g0 on a tetrahedron T ∈Th, then for the approximation of the right-hand
side of (2.6) we get
and the left-hand side of (2.6) is approximated by
where m(p) is the measure in Rd of covolume p and Mp is an approximation of the
capacity function inside the ﬁnite volume p. For that goal we use either the averaging
of the gradients proposed by Walkington , i.e.,
S. CORSARO, K. MIKULA, A. SARTI, AND F. SGALLARI
which is close to ﬁnite element approximation with the mass lumping.
regularization of both approximations of the capacity function is given either by
and if we deﬁne coeﬃcients (where the ε-regularization is taken into account)
we get from (2.7)-(2.8) our fully discrete semi-implicit covolume scheme:
p, p = 1, . . . , M, be given discrete initial values of the segmentation function.
Then, for n = 1, . . . , N we look for un
p, p = 1, . . . , M, satisfying
q ) = bn−1
Applying either Neumann or Dirichlet boundary conditions, our fully discrete scheme
gives the system of linear equations with the matrix which is a symmetric and diagonally dominant M-matrix. Using a similar technique as in we get the following.
Theorem. There exists unique solution (un
1, . . . , un
M) of the scheme (2.15) for
any τ > 0, ε > 0 and for every n = 1, . . . , N. The system matrix is a symmetric
and diagonally dominant M-matrix. For any τ > 0, ε > 0 the following L∞stability
estimate holds:
One can solve the system (2.15) by any eﬃcient preconditioned linear iterative solver
suitable for sparse, symmetric, diagonally dominant M-matrices, e.g., by SOR (successive overrelaxation) or PCG (preconditioned conjugate gradient) methods . In
the experiments presented in section 3 we use the SOR method. The iterative process
is stopped if R(l) < TOL R(0), where R(l) represents the squared residual in the lth
iteration. Reporting experimental order of convergence we use TOL=10−6. In the
segmentation one can increase TOL, e.g., to 10−2, in order to use fewer SOR iterations
and consequently to decrease overall segmentation time. No signiﬁcant inﬂuence to a
precision of the segmentation result is usually observed.
The evaluation of g0
T included in coeﬃcients (2.14) can be done in several ways.
First, we may replace the convolution by the weighted average to get I0
σ := Gσ ∗I0
SEMI-IMPLICIT 3D COVOLUME METHOD
(see, e.g., ) and then relate discrete values of I0
σ to voxel centers. Then, as above,
we may construct its piecewise linear representation on a grid and get a constant
value of g0
σ|) on every tetrahedron T ∈Th. Another possibility is to solve
a numerically linear heat equation for time t corresponding to variance σ with initial
datum given by I0 (see, e.g., ) by the same method as above. The convolution
represents a preliminary smoothing of the data. It is also a theoretical tool to have
bounded gradients and thus a strictly positive weighting coeﬃcient g0. In practice,
the evaluation of gradients on a ﬁxed discrete grid (e.g., described above) always
gives bounded values. So, working on a ﬁxed grid, one can also avoid the convolution,
especially if preliminary denoising is not needed or not desirable. Then it is possible
to work directly with gradients of piecewise linear representation of I0 in evaluation
3. Discussion of numerical results. In this section we study experimental order of convergence of the method in case of mean curvature driven level set ﬂow (i.e.,
for (1.1) with g ≡1 and ε →0), and then we present some 3D segmentation examples.
The comparison with nontrivial exact solutions shows the second order accuracy for
smooth (or mildly singular) solutions and the ﬁrst order accuracy for highly singular
solutions (i.e., when gradient is vanishing on a large subset of a domain and discontinuity set of the gradient ﬁeld is nontrivial). It means that the method is accurate in
computing interface motions, and it is reliable also for computing evolutions including
ﬂat regions as arising in the subjective surface based segmentation method.
3.1. Experimental order of convergence. In the ﬁrst example we test the
method using the exact solution 
u(x, y, z, t) = (x2 + y2 + z2 −1)/4 + t
of the level set equation
ut = |∇u|∇.
and consider Dirichlet boundary conditions given by this exact solution.
This problem, and all further computed examples in this subsection, are solved
in the spatial domain Ω = [−1.25, 1.25]3 and in the time interval T = 0.16.
have taken subsequent grid reﬁnement with M = n3 covolumes (DF nodes), n =
10, 20, 40, 80, 160. So the grid size is h = 2.5/n. The time step τ is chosen proportionally to h2 and we measure errors in L∞((0, T), L2(Ω))-norm (cf. ), which is
natural for testing the schemes for solving parabolic problems.
Let us assume that the error of the scheme in some norm is proportional to some
power of the grid size, i.e., Error(h) = Chα, with a constant C. Then halving the
grid size we have Error(h/2) = C(h/2)α from where we can simply extract
α = log2(Error(h)/Error(h/2)).
The α is called the experimental order of convergence (EOC) and can be determined
by comparing numerical solutions and exact solutions on subsequently reﬁned grids.
In Table 3.1 we report errors in L∞((0, T), L2(Ω))-norm for reﬁned grids and for
several choices of ε. In all cases we observe α = 2, where the coupling ε ≈h2 seems
optimal (see also other examples), but as one can see, choosing ε even smaller can get
even smaller errors on coarse grids.
S. CORSARO, K. MIKULA, A. SARTI, AND F. SGALLARI
Errors in L∞((0, T), L2(Ω))-norm, and EOC comparing numerical and exact solution (3.1).
Fig. 3.1. Exact solution (3.4) remaining unchanged under mean curvature ﬂow (plot at z = 0).
Next an interesting example comes from and is given by (see Figure 3.1)
u(x, y, z, t) = x + 0.5, x ≤−0.5
= 0, −0.5 ≤x ≤0.5
= x −0.5, x ≥0.5.
The level sets of u are planes, with zero mean curvature, and so the solution remains
unaltered by the ﬂow. There is also a large part of the solution where gradient is vanishing; however, the set of discontinuity in gradient is relatively simple (two planes)
regarding a possible orientation of our grid (we can make it parallel). Mathematically,
it is a trivial example, but it is a good test for a numerical scheme. One can observe
(see Table 3.2) that the error of the scheme in this example is proportional just to
regularization parameter ε, and thus it can be made as small as desirable. This is a
simple consequence of the consistency of our scheme in the sense that it gives exact
solution for any linear initial function and for any choice of regularization parameter
ε, any grid size h, and any size of time step τ. Such a property can be checked by
inspection of the scheme (2.15). For the linear function, the gradients in all tetrahedra
are the same, and so we get the system with the same structure as given by the backward Euler scheme for solving a linear diﬀusion equation with constant coeﬃcients,
and such a scheme does not alter a steady state.
In the next example we compare our numerical solution with the highly singular
solution given by
u(x, y, z, t) = min((x2 + y2 + z2 −1)/4 + t, 0).
The initial function and numerical result at T = 0.16 are plotted in Figure 3.2. We
SEMI-IMPLICIT 3D COVOLUME METHOD
Errors in L∞((0, T), L2(Ω))-norm, and EOC comparing numerical and exact solution (3.4).
Error, ε = h2
Error, ε = 10−6
Fig. 3.2. Numerical solution corresponding to exact solution (3.5) plotted at times t = 0 (left)
and t = 0.16 and for z = 0.
Errors in L∞((0, T), L2(Ω))-norm, and EOC comparing numerical and exact solution (3.5).
Error, ε = h2
see only slight smoothing in numerical solution along singularity; numerical solution
converges to viscosity solution with α = 1, as reported in Table 3.3.
In the last example we test experimental order of convergence comparing the
numerical and exact evolution of one particular level set. Namely, we use the exact
solution given by shrinking sphere with exact radius r(t) =
r(0) −4t, starting with
r(0) = 1. Our initial level set function is a 3D cone (signed distance function) having
zero value on the unit sphere. We consider zero Neumann boundary conditions, and
so we do not know the exact solution for evolution of the whole level set function.
At every time step we evaluate L2(S2)-norm of error, where S2 is the unit sphere,
comparing the exact shrinking sphere and the numerical zero level set, and then we
take L∞((0, T), L2(S2))-norm for the overall error in time interval T = 0.16. Figure
3.3 represents the initial sphere and the numerical zero level set at T = 0.16. Table
3.4 documents the higher order rate of convergence, where again the coupling ε = h2
is used. Similarly to the ﬁrst example, diﬀerent couplings or choice of a ﬁxed small ε
give similar errors and convergence rates.
S. CORSARO, K. MIKULA, A. SARTI, AND F. SGALLARI
Numerical solution corresponding to exact shrinking sphere with radius r(t) =
r(0) −4t, r(0) = 1, plotted at times t = 0 (left) and t = 0.16.
Errors in L∞((0, T), L2(S2))-norm, and EOC comparing numerical zero level sets and the exact
shrinking sphere.
Error, ε = h2
Fig. 3.4. Segmentation (right) of a 3D cube with two holes (left).
3.2. Segmentation examples. Here we present two 3D segmentation examples. The ﬁrst one is simple; in the image with resolution 403 voxels is an object, a
cube with two holes (see Figure 3.4(left)); the holes are in front and back faces. Figure
3.4 gives a reconstructed surface with the perfect hole ﬁlling (see Figure 3.4(right)).
Due to the advection term all level sets are attracted to the faces of the cube. Due
to the mean curvature ﬂow type diﬀusion the level sets continue inside the gaps in
the form of planar surfaces. Since in the holes area g0 ≡1 and ∇g0 ≡0 just the
mean curvature motion of level sets plays the role inside the gaps, and the planar
SEMI-IMPLICIT 3D COVOLUME METHOD
Fig. 3.5. Volume rendering of original 3D data set (left) and segmentation of the ventricle
ﬁlling is then a consequence of the basic property of mean curvature ﬂow, namely the
minimization of surface area. Segmentation of an object of this size takes few seconds
(on a 2.4GHz PC); one time step takes 0.15 sec, and we need few tens of time steps to
ﬁnd the result. A change in L2-norm of numerical solutions in subsequent time steps
is used to stop the segmentation process. We check whether
m(p) (unp −un−1
with a prescribed threshold δ.
In Figure 3.4(right) we visualize isosurface of the
segmentation function close to its maximum. In all segmentation examples computed
by our semi-implicit scheme we take K = 1, h =
n1 , n1 number of voxels in the
horizontal direction, τ ≈10 × h2, and δ = 10−5. We start all computations with
the initial function given as a peak centered in a “focus point” inside the segmented
object. At a sphere with center s and radius R the initial function can be described
by u0(x) =
|x−s|+v, where s corresponds to the focus point and 1
v gives a maximum
of u0. Outside that sphere we take values of u0 equal to
R+v. R usually corresponds
to the halved inner diameter of the image domain. For small objects a smaller R
can be used to speed up computations. In this example the maximum of the initial
segmentation function (the focus point s) is taken in the image center.
The second example is given by 3D echocardiography of size 81 × 87 × 166. As
one can see from volume rendering visualization (Figure 3.5(left)), the 3D image is
very noisy; however, the surface of the ventricle is observable. How noisy the image
intensity is can be seen also from Figure 3.6, where one can see 2D image intensity and
its graph in one 2D slice. Now we start the segmentation process with few “points
of view” inside the object of interest, i.e., the initial segmentation function having
several maxima, and let it evolve until the diﬀerence in L2-norm of two subsequent
time steps is less than the prescribed threshold. Then we look to a 2D slice with
relatively good boundary edges (Figure 3.6), where we see accumulation of level sets
along the inner boundary of the ventricle (Figure 3.6(left)). The largest gap in the
histogram (Figure 3.7(left)) indicates the shock in the segmentation function, and so
we choose one level inside the gap and plot it inside the slice (Figure 3.7(right)). We
can check how this level set looks like in other noisy slices (Figure 3.8) and then make
S. CORSARO, K. MIKULA, A. SARTI, AND F. SGALLARI
Fig. 3.6. Plot of accumulated level sets in the slice k = 130 (left) and 3D graphical view of this
slice (right).
Fig. 3.7. The histogram of the segmentation function in the slice k = 130 (middle); image
intensity with level set u = 0.052 (right). Visualization of the 3D surface in Figure 3.5 is done with
the same level set.
Fig. 3.8. Plot of image intensity together with level line 0.052 in two other slices k = 100 (left)
and j = 40 (right).
a 3D isosurface visualization (Figure 3.5(right)) which gives realistic representation
of the left ventricle.
The computation of one time step takes 3 seconds on a 2.4GHz one processor
PC and takes 200 steps to ﬁnish segmentation, and so the overall computing time for
this image size is in a range of few minutes. The MPI parallel implementation of
our 3D segmentation scheme has been built under the support of the Project HPC-
EUROPA at CINECA SuperComputing Center, Bologna, and so the segmentation
SEMI-IMPLICIT 3D COVOLUME METHOD
Fig. 3.9. Successful subjective surface based segmentation (1.4) of a “batman” image, in the
middle. Nonsuccessful segmentation only by slowed mean curvature motion (1.5), in the bottom.
time is even speeding up depending on the number of available processors (e.g., in
Linux cluster). The MPI parallelization of our algorithm is straightforward, because
it uses classical structures of scientiﬁc computing methodology for solving partial
diﬀerential equations and linear algebra problems (see, e.g., ).
3.3. Comparison with diﬀerent models and methods. First, we show the
diﬀerence between segmentation model (1.4) and (1.5) with g0 instead of g(|∇Gσ ∗u|);
i.e., we document the role of convective term which appears in the model if g0 is inside
the divergence term. This comparison also shows that the method from cannot be
straightforwardly transferred from image smoothing to image segmentation problems.
S. CORSARO, K. MIKULA, A. SARTI, AND F. SGALLARI
Let us consider a simple nonconvex black object on a white background as plotted
in Figure 3.9. If we start with the initial function plotted in the top left subﬁgure,
isolines of which are plotted in the top right subﬁgure, and apply model (1.4), we end
up with results as in the middle subﬁgures, while applying (1.5) we end up in the long
run with the bottom subﬁgures. In the middle we see accumulation of all level lines
on the object boundary due to the convective term, and any of these level lines can
be used to represent segmentation of the object. In the case of (1.5), the motion of
level lines is slowed down along the edges; however, level lines shrinking from outside,
due to minimizing length (property of mean curvature motion), cannot go inside the
nonconvex regions, and they accumulate on a convex envelope of the object.
Next we compare computational eﬃciency of our semi-implicit scheme with standard methods based on classical level set strategy and explicit time stepping. Such explicit schemes are usually based on formulation (1.4), where, moreover, all derivatives
are expanded to get mean curvature and advection terms. Then, in three dimensions,
(1.1) is written in the form
ut = g0((ε + u2
x3)ux1x1 + (ε + u2
x3)ux2x2 + (ε + u2
−2ux1ux2ux1x2 −2ux1ux3ux1x3 −2ux2ux3ux2x3)/
x1ux1 + g0
x2ux2 + g0
where us means partial derivative of a function u with respect to a variable s. The
explicit time stepping and central ﬁnite diﬀerence approximation is used in the mean
curvature term, and upwind ﬁnite diﬀerence approximation is used in convective term
 . For the computational comparison we use a representative 3D example where
we segment a sphere with four holes (white object on black background in 803 voxels
image); the 2D cut by equatorial plane is given in the upper left of Figure 3.10. In
the upper right of Figure 3.10 we see the reconstructed sphere, and in the bottom
part of Figure 3.10 we see the 2D cut of the shock proﬁle of the segmentation function
which is used to extract the upper sphere. This state of the segmentation function is
achieved after 1450 time steps using discretization of (3.7). Although CPU time
for one explicit time update is small, due to stability reasons, both in curvature and
convective parts, we have to choose a small time step, τ = 0.00002, and need many
of them to achieve a piecewise constant proﬁle of the segmentation function. So the
overall CPU time is 380 secs. In spite of that our semi-implicit discretization (2.15)
fulﬁlls unconditionally the discrete minimum-maximum principle (L∞-stability); i.e.,
no spurious oscillations appear for any length of discrete time step. We get the same
3D segmentation result in 28 steps with τ = 0.002. Although one step of the semiimplicit scheme is more complex, we have to solve the linear system, the overall CPU
time is 45 secs, and there is a beneﬁt of almost 10 times speed-up. This speed-up ratio
is quite a common observation in many 3D segmentation comparisons of semi-implicit
and explicit schemes.
At the end we illustrate removing a grid orientation eﬀect which can be observed in
numerical results of previously studied algorithms . There either “left oriented”
or “right oriented” triangulations (see Figure 3.11) have been used for solving the levelset-like problems, and, especially on coarse grids, the inﬂuence of grid orientation can
be observable.
To show this phenomenon in a transparent way we present a 2D
experiment where the initial unit circle is moving by mean curvature and expanding
with unit speed in the outer normal direction at the same time.
In such a case,
Fm(p), F = −1 is added to the right-hand side of the fully discrete scheme (2.15).
Since there is a balance between curvature and driving force the unit circle is the
SEMI-IMPLICIT 3D COVOLUME METHOD
Fig. 3.10. Subjective surface based segmentation of a 3D sphere with four holes.
Fig. 3.11. By dashed lines we plot the “left oriented” triangulation (left), “right oriented” triangulation (right), and “symmetric” triangulation corresponding to our method in two dimensions.
The image pixels (solid lines) in all cases correspond to the covolume mesh.
exact solution, and so it should remain stable also computationally. Using the “right
oriented” triangulation with 20×20 covolumes and the method from , at time T =
1, we get the result plotted in Figure 3.12(left). We see exact solution plotted by the
dashed line and its slight distortion visualizing the numerical solution. On the other
hand, using the 2D analogy of the method presented in this paper, i.e., “symmetric”
triangulation plotted in the middle part of Figure 3.11, we get the numerical result
presented in Figure 3.12(right), where the circular shape is not distorted. Our 3D
tetrahedral mesh and covolume grid construction transfer such “symmetry” of the
S. CORSARO, K. MIKULA, A. SARTI, AND F. SGALLARI
Fig. 3.12. By the dashed line we plot the exact solution (stable unit circle). By the thick solid
line we plot the level line obtained from numerical solution using the “right oriented” triangulation
(left) and the “symmetric” triangulation corresponding to our method in two dimensions. In the
latter case the solutions coincide in this visualization scale.
method into the 3D case, and in this sense the previous covolume techniques are
Acknowledgement. We thank Roberto Gori from CINECA for help with 3D
visualizations.