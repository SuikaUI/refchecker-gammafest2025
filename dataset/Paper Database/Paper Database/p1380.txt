Causal Interpretability for Machine Learning
- Problems, Methods and Evaluation
Raha Moraffah∗, Mansooreh Karami∗, Ruocheng Guo∗, Adrienne Raglin†, Huan Liu∗
∗Computer Science & Engineering, Arizona State University, Tempe, AZ, USA
†Army Research Lab, USA
∗{rmoraffa, mkarami, rguo12, huanliu}@asu.edu, † 
Machine learning models have had discernible achievements
in a myriad of applications. However, most of these models
are black-boxes, and it is obscure how the decisions are made
by them. This makes the models unreliable and untrustworthy. To provide insights into the decision making processes
of these models, a variety of traditional interpretable models
have been proposed. Moreover, to generate more humanfriendly explanations, recent work on interpretability tries
to answer questions related to causality such as “Why does
this model makes such decisions?”
or “Was it a speciﬁc
feature that caused the decision made by the model?”. In
this work, models that aim to answer causal questions are
referred to as causal interpretable models. The existing surveys have covered concepts and methodologies of traditional
interpretability. In this work, we present a comprehensive
survey on causal interpretable models from the aspects of
the problems and methods.
In addition, this survey provides in-depth insights into the existing evaluation metrics
for measuring interpretability, which can help practitioners
understand for what scenarios each evaluation metric is suitable.
Interpratablity, explainability, causal inference, counterfactuals, machine learning
INTRODUCTION
With the surge of machine learning in critical areas such
as healthcare, law-making and autonomous cars, decisions
that had been previously made by humans are now made automatically using these algorithms. In order to ensure the
reliability of such decisions, humans need to understand how
these decisions are made. However, machine learning models are usually inherently black-boxes and do not provide
explanations for how and why they make such decisions.
This has become especially problematic when recent work
shows that the decisions made by machine learning models are sometimes biased and enforce inequality .
instance, Angwin et al. demonstrates that predictions
made by Correctional Oﬀender Management Proﬁling for
Alternative Sanctions (COMPAS), which is a widely used
criminal risk assessment tool, shows racial biases. With recent regulations such as European Unions “Right to Explanation” and AI call for diversity and inclusion ,
interpretable models which are capable of explaining the
decisions they made are necessary.
Moreover, recent research shows that machine learning models, especially deep
neural networks, can be easily fooled into predicting a speciﬁc class label for an image when its pixel values are under minimal perturbations [30; 74; 80]. Such results imply
that machine learning models suﬀer from the risk of making
unexpected decisions. Understanding decisions of machine
learning models and the process leading to decision making
can help us understand the rules the models use to make
their decisions and therefore, prevent potential unexpected
situations from happening.
More speciﬁcally, through interpretable machine learning models, we aim to guarantee
that (a) decisions made by machine learning models comply
with the rules toward social good; (b) the classiﬁer does not
pick up the biases in the data and the decisions made are
compatible with human understandings.
Previously, various frameworks have been proposed to generate explanations for machine learning algorithms. These
algorithms can be mainly divided into two categories, (1)
algorithms that are inherently interpretable, which includes
the models that generate explanations at training time ;
(2) post-hoc interpretations that refer to the model that generate explanations for already made decisions [75; 85; 47].
Henceforth, these models are referred to as traditional interpretable models.
In this work, we focus on causal interpretable models that
can explain their decisions through what decisions would
have been made if they had been under alternative situations (e.g., being trained with diﬀerent inputs, model components or hyperparameters). Note that traditional interpretable models are unable to answer such questions about
decision making under alternative situations, although they
can explain how and why a decision is made by an existing
model on an observed instance. For instance, in the case of
credit applications, to impose fairness on the decision making process, we may need to answer questions such as Did
the protected features (e.g., race and gender etc.) cause the
system to reject the application of the i-th applicant?” and
“If the i-th applicant had diﬀerent protected features, would
the system still make the same decision?” In other words,
in order to make the explanations more understandable and
useful for humans, we need to ask questions such as “Why
did the classiﬁer make this decision instead of another?”,
“What would have happened to this decision of a classiﬁer
had we had a diﬀerent input to it?”, or “Was it feature
X that caused decision Y ?”.
Traditional interpretability
frameworks which only consider correlations are not capable of generating such explanations. This is due to the fact
that these frameworks cannot estimate how altering a feature or a component of a model would change the predictions
made by the rest of the model or the predicted labels on
the data samples. Therefore, in order to answer such questions about both data samples and models, counterfactual
analysis needs to be leveraged. Counterfactual analysis is a
concept from the causal inference literature . In counterfactual analysis, we aim to infer the output of a model
in imaginary scenarios that we have not observed or cannot
observe. Recently, counterfactual analysis and causal inference have gained a lot of attention from the interpretable
machine learning ﬁeld. Research in this area has mainly focused on generating counterfactual explanations from both
the data perspective [34; 76] as well as the components of a
model [77; 38].
Existing surveys on interpretable machine learning focus
on the traditional methods and do not discuss the existing methods from a causal perspective. In this survey, we
present commonly used deﬁnitions for interpretability, discuss interpretable models from a causal perspective and provide guidelines for evaluating these methods. More speciﬁcally, in Section 2, we ﬁrst provide diﬀerent deﬁnitions for interpretability. We then brieﬂy introduce the existing methods on traditional interpretablity and present diﬀerent types
of interpretable models in this category (Section 2.2). Section 3 discusses concepts from causal inference, which are
used in this survey. In section 4, we provide an overview of
existing works on causal interpretability. We also compare
the proposed models for both traditional and causal models
from diﬀerent perspectives to provide insights on advantages
and disadvantages of each type of interpretability. Section
5 provides detailed guidelines on the experimental settings
such as commonly used datasets and evaluation metrics for
both traditional and causal approaches.
We then discuss
evaluation metrics speciﬁcally used for causal methods in
more detail and provide diﬀerent scenarios for which these
metrics can be used. Since the evaluation of causal interpretable models is a challenging task, these guidelines can
be helpful for future research in this area and can be used
to evaluate approaches with similar characteristics. In addition, they can also be used to create new evaluation metrics
for the approaches with diﬀerent functionalities.
Interpretability algorithms
Traditional interpretability (Section 2.2)
Causal interpretability (Section 4)
Figure 1: Main categories for Interpretable frameworks
AN OVERVIEW OF INTERPRETABIL-
In this section, we present an overview of existing deﬁnitions for interpretability.
Miller et al.
 suggest that
interpretability is the degree to which a human can understand the cause of a decision. Kim et al. propose that
interpretability is the degree to which a human can consistently predict the model’s decisions. Doshi-Velez et al. 
deﬁne interpretability as the ability to explain in intelligible ways to a human. Gilpin et al. take a step further
and deﬁne interpretability as a part of explainability. They
state that explainable models are those that summarize the
reasons for neural network behaviors, gain the trust of the
users, or generate insights into the causes of their decisions
while interpretable models may not be able to describe the
operation of a system in an accurate way 1. Pearl claims
that tasks such as explainability require a causal model of
the environment and cannot be handled at the level of association.
Interpetability in Machine Learning
Interpretable machine learning has been widely explored and
discussed in previous literature. However, to the best of our
knowledge, there is no comprehensive review on causal interpretability models.
For instance, Lipton discusses
the motivation behind creating interpretable models and
categorizes interpretable models into two main categories:
transparent models and post-hocs. Doshi-velez et al. 
provide a deﬁnition of model interpretability and evaluation criteria. However, this review only proposes deﬁnitions
and evaluations that are used for traditional interpretability of models and does not cover causal and counterfactual
questions. Gilpin et al. , explain fundamental concepts
of explainability and use them to classify the literature on
interpretable models. Zhang and Zhu review the existing interpretable models proposed for deep models used in
visual domains. Du et al. provide a comprehensive survey of existing interpretable methods and discuss issues that
should be considered in future work. It is worth mentioning that none of the existing work discussed interpretable
models from a causal perspective.
In this work, we ﬁrst
introduce the state-of-the-art research in traditional interpretability (Sec.
2.2) and then give a detailed survey on
causal interpretable models (Sec.
Figure 1 shows an
overview of intepretable models and their classiﬁcation.
Traditional Interpretablity
Before proceeding with the detailed review of the methodologies in causal interpretable models, we provide an overview
of existing state-of-the-art methods in traditional machine
learning. We categorize traditional models into two main
categories:
• Inherently interpretable models: Models that generate
explanations in the process of decision making or while
being trained.
• Post-hoc interpretability: Generating explanations for
an already existing model using an auxiliary model.
Example-based interpretablity also falls into this category. In example-based interpretablity, we are looking for examples from the dataset which explain the
model’s behavior the best.
Interpretable Models
A machine learning model can be designed to include explanations embedded as part of their architecture or output interpretable decisions as part of their training process. Most
1In this survey we use the words interpretable and explainable interchangeably.
of these models are created in application of the deep neural
network. In this section, we present common interpretable
models in the literature.
Decision Trees. These methods make use of a tree-structured
framework in which each internal node checks whether a
condition on a feature is satisﬁed or not while the leaf nodes
show the ﬁnal predictions (class labels). A decision infers the
label of an instance by starting from the root and tracing a
path till a leaf node is reached, which can be interpreted as
an if..then.. rule. An example is illustrated in Figure 2.
Figure 2: An example of a decision tree with positive and
negative class (binary) and three attributes. The red path
has a decision rule, if ¬Att1 ∧Att2 ∧¬Att3 ⇒+1
Rule-Based Models. Rule-based classiﬁers also create explanations that are interpretable for humans. These classi-
ﬁers use a collection of if..then..
rules to infer the class
In a sense, rule-based classiﬁers are the text representation of the decision trees. However, there are some
key diﬀerences. Rule-based models can have rules that are
not mutually exclusive (i.e., two or more rules might trigger
by the same record), not exhausted (i.e., a record may not
trigger any rules) and ordered (i.e., the rule set is ordered
based on their priority) .
Linear Regression. Another common method known to
be interpretable is Linear Regression.
Linear Regression
models the linear relation between a dependent variable and
a set of explanatory variables (features). The weight of each
feature represents the mean change in the prediction given
a one unit increase of the feature.
Accordingly, it is reasonable to think that the features with larger weights has
more eﬀect on the ﬁnal result. However, diﬀerent types of
variables (e.g., categorical data vs numerical features) have
diﬀerent scales. This makes it diﬃcult to interpret the eﬀect
of each feature. Fortunately, there are several methods that
can be used to ﬁnd the importance of a feature in a linear
regression such as t-statistics and chi-square score .
The aforementioned methods are restricted by users’ limitations (i.e., human understanding). With the increase in the
number of features, these models become more and more
complex; for example, decision trees become much deeper,
and the number of the rules increase in the rule sets. This
makes comprehending the prediction of these models diﬃcult for humans . Below, we discuss recent inherently
interpretable models which are designed for more sophisticated scenarios.
Attention Networks. Attention networks have been successful in various highly-impactful tasks such as graph embedding and machine translation [98; 6]. These models
are widely known not only for their improved performance
over previous methods but also for their capability to show
which input features or learned representations are more important for making a speciﬁc prediction. Yang et al. 
use a hierarchical attention network in document classiﬁcation to capture the informative words as well as the sentences
that have a signiﬁcant role in the decision. This is because
the same word or sentence may be diﬀerentially important
in diﬀerent contexts. Attention networks also proved to be a
useful tool in visual question answering applications, which
require a joint image-text understanding to answer a question about the image [103; 64; 102; 65]. Yang et al. 
propose a Stacked Attention Network (SAN) that uses two
attention layers to infer the answer progressively. While the
ﬁrst attention layer focuses on all referred concepts in the
question, the higher-level layer provides a sharper attention
distribution to highlight regions that are more relevant to
the answer.
Disentangled Representation Learning.
One goal of
representation learning is to break down the features into
the independent latent variables that are highly correlated
with meaningful patterns . In traditional machine learning, approaches such as PCA , ICA and spectrum
analysis are proposed to discover disentangled components of data. Recently, deep latent-variable models such as
VAE , InfoGAN and β-VAE were developed to
learn disentangled latent variables through variational inference. For example, in empirical studies, it is shown that β-
VAE and InfoGAN can learn interpretable factorized latent
variables of human face images such as azimuth, hairstyle
and emotion .
Post-hoc Interpretability
Post-hoc interpretable methods aim to explain the decisionmaking process of the black-box models after they are trained.
These methods map an abstract concept used in a trained
machine learning model into a domain that is understandable by humans such as a block of pixels or a sequence of
words. Following are the widely known post-hoc methods.
Local Explanations. Local Interpretable Model-Agnostic
Explanations (LIME) is a representative and pioneer
framework that generates local explanations of black-box
LIME approximates the prediction of any blackbox via local surrogate interpretable models. LIME selects
an instance to explain by perturbing it around its neighborhood (i.e., eliminating patches of pixels or zeroing out
the values of some features). These samples are then fed to
the complex model for labeling and then it will be weighted
based on their proximity to the original data. Finally, LIME
learns an interpretable model on the weighted perturbed
data and their associated labels to create the explanations.
It is worth noting that LIME is a fast approximation of a
broader approach named SHAP that measures feature
importance.
Saliency Maps. Originally introduced by Simonyan et al.
 as “image-speciﬁc class saliency maps”, saliency maps
highlight pixels of a given input image that are mostly involved in deciding a particular class label for the image.
To extract those pixels, the derivative of the weight vector
is found by a single backpropagation pass (deconvolution).
The magnitude of the derivative shows the importance of
each pixel for the class score. Similar concepts were used
by other researchers to deconvolve the prediction and show
the locations of the input image that strongly impacts the
activation of the neurons [108; 94; 91]. While these methods
belong to a popular class of tools for interpretability, Adebayo et al. and Ghorbani et al. suggest that relying
on visual assessment is not adequate and can be misleading.
Example-Based Explanations. As proved in education
 and psychology domains , learning from experiences
and examples are promising tools to explain complex concepts. In these methods, a certain example is selected from
the dataset to represent the model’s prediction (e.g., knearest neighbor) or the distribution of the data. It is worth
mentioning that example-based explanations should not be
confused with those explanations that perturb features in
the dataset . Although using prototypes as the representation of data has shown to be eﬀective in the human learning process , Kim et al. use a method called Maximum
Mean Discrepancy (MMD) to capture a more complex distribution of the data. This method uses some instances as
criticisms to explain which prototypes are not captured by
the model to improve the interpretability of the black-boxes.
Gurumoorthy et al. extend this method and designed a
fast prototype selection algorithm called ProtoDash to not
only select the prototypes and criticism instances, but also
output non-negative weights indicating their importance.
Inﬂuence Functions. To track the impact of a training
sample on the prediction of a machine learning model, one
can simply modify an example or delete it (leave-one-out),
retrain the model, and observe the eﬀect. However, this approach can be extremely expensive. To alleviate the issue,
inﬂuence functions, a classic method from the robust statistics literature, can be used. Koh and Liang proposed
a second-order optimization technique to approximate these
inﬂuence functions. They veriﬁed their technique with different assumptions on the empirical risk ranging from being
strictly convex and twice-diﬀerentiable to non-convex and
non-diﬀerentiable losses.
Suppose ˆy(xt, ˆθ) is the model’s prediction for the sample xt
with an optimal parameter ˆθ. Lets ˆy(xt, ˆθ−z) be the prediction on the sample xt when the training sample z was removed while the model’s optimal parameter is ˆθ−z. The in-
ﬂuence function tries to approximate the diﬀerence between
the two predictions, ˆy(xt, ˆθ)−ˆy(xt, ˆθ−z), without retraining
the model with the following equation,
ˆy(xt, ˆθ) −ˆy(xt, ˆθ−z) = −1
n∇θ ˆy(xt, ˆθ)T H−1
ˆθ ∇θL(z, ˆθ)
where L(z, ˆθ) is the loss function and Hˆθ =
θL(zi, ˆθ) is
the Hessian matrix.
The same authors also investigate the eﬀect of removing large groups of training points in large datasets on the
accuracy of inﬂuence functions. They ﬁnd out that the approximation computed by the inﬂuence functions are correlated with the actual eﬀect. Inspired by this work, Cheng
et al. propose an explanation method, Fast Inﬂuence
Analysis, that employs inﬂuence functions on Latent Factor
Models to resolve the lack of interpretability of the collaborative ﬁltering approaches for recommender systems.
Feature Visualization. Another way of describing what
the model has learned is feature visualization. Most methods in this category deal with image inputs. Erhan et al. 
present an optimization technique called activation maximization to visualize what a neuron computes in an arbitrary layer of deep neural network.
Let ˆθ be the learned
ﬁxed parameters after training and hij(ˆθ, x) be the activation of neuron i in layer j, the learned image for that neuron can be calculated by solving the following optimization
x∗= arg max
hij(ˆθ, x), subject to ||x||2 = 1
Despite this method being used as a tool in providing explanations for higher-layer features [55; 79; 75], it has been
reported that due to the complexity of the input distribution, some returned images might contain optical illusions
Explaining by Base Interpretable Models.
In section 2.2.1 we discussed base models such as decision tree,
rule-based and linear regression, that are known to be interepretable. Following, we will introduce some works that
utilize these algorithms to explain a more sophisticated framework. Craven and Shavlik are one of the ﬁrst to use treestructured representations to approximate neural networks.
Since their model is independent of the network architecture and training algorithm, it can be generalized to a wide
variety of models. Their method, TREPAN, is similar to
CART and C4.5 and uses a gain ratio criterion to evaluate
the potential splits, but expands the tree based on a node
that increases the ﬁdelity of the extracted tree to the network.
Inspired by TREPAN, Boz propose a method
called DECTEXT to extract a decision tree that mimics
the behavior of a trained Neural Network. In their method,
they propose a new splitting technique, a new discretization method, and a novel pruning procedure. With these
modiﬁcations, the proposed method can handle continuous
features, optimize ﬁdelity and minimize the tree size.
technique called distillation can also be used to fully
understand why a speciﬁc answer is returned for a particular example. Frosst and Hinton answer this question
by creating a model in the form of soft decision tree and examine all the learned ﬁlters from the root of the tree to the
classiﬁcation’s leaf node. Zhang et al. adopt the same
concept but explained the network knowledge at a humaninterpretable semantic level and also showed how much each
ﬁlter contributes to the prediction.
The MofN algorithm is one of the well-known methods
that is used to extracts symbolic rules from trained neural networks. This method clusters the links based on the
weights and eliminates those groups that unlikely to have
any impact on the consequent. It then forms rules that are
the sum of the weighted antecedents with regard to the bias.
Authors also report experiments on the ﬁdelity of the model
and the comprehensibility of the set rules and the individual
Lou et al.
 use a generalized version of linear regression called generalized additive models (GAM) in the form
of g(y) = P fi(xi) = f1(x1) + ... + fn(xn) to interpret the
contribution of each predictor for diﬀerent classiﬁers or regression models. g(.) is a link function that controls whether
we want to describe the model as an additive model (regression by setting g(y) = y) or generalized additive model
(classiﬁcation by setting it to a logistic function). f(.) is
a shape function that quantiﬁes the impact of each individual feature.
This gives the ability to interpret spline
models and tree-based shape functions such as single trees,
bagged trees, boosted trees and boosted-bagged trees. Due
to the model not considering the interactions between the
features, there is a signiﬁcant gap in terms of accuracy between these models and complex models. To ﬁll this gap, the
same authors propose a method named Generalized Additive
Models plus Interactions (GA2Ms) in the form of g(y) =
P fi(xi) + P fij(xi, xj) which takes into account the twodimensional interactions that still can be interpretable as
heat maps .
Two case studies are conducted on real
healthcare problems on predicting pneumonia risks by using GA2Ms. These studies uncover new patterns that are
ignored by state-of-the-art complex models while still hitting
their accuracy .
CAUSAL INFERENCE
In this section, we brieﬂy review the concepts from causal
inference used in this paper for causal interpretable models.
In their paper, Guo et al.
 provide a comprehensive
review of existing causal inference methods and deﬁnitions.
Definition 1
(Structural Causal Models ). A 4tuple variable M(X, U, f, Pu) where X is a ﬁnite set of endogenous variables, usually the observable variables, U denotes a ﬁnite set of exogenous variables which usually account for unobserved or noise variables, f is a set of function
{f1, f2, ..., fn} where each function represents a causal mechanism such that ∀xi ∈X, xi = fi(Pa(xi), ui) and Pa(xi) is
a subset of
(X \ {xi}) ∪U and Pu is a probability distribution over U is called An Structural Causal Model (SCM) or
Structural Equation Model (SEM) .
Definition 2
(Causal Bayesian Network). To represent an SCM M(X, U, f, Pu), a directed graphical model
G(V, E) is used. V is the set of endogenous variables X and
E denotes the causal mechanisms. This indicates for each
causal mechanism xi = fi(Pa(xi), ui), there exists a directed
edge from each node in the parent set Pa(xi) to xi. The entire graph representing this SCM is called a Causal Bayesian
Network (CBN).
Definition 3
(Average Causal Effect). The Average Causal Eﬀect (ACE) of a binary random variable x (treatment) on another random variable (outcome) is deﬁned as:
ACE = E[y|do(x = 1)] −E[y|do(x = 0)],
Where do(.) operator denotes the corresponding interventional distribution deﬁned by the SCM or CBN.
CAUSAL INTERPRETABLITY
In this section, we discuss the state-of-the-art frameworks
on causal interpretability.
These frameworks are particularly needed since objective functions of machine learning
models only capture correlations and not real causes. Therefore, these models might cause problems in real-world decision making, such as making policies related to smoking and
cancer. Moreover, training data used to train these models
might not perfectly represent the environment; and the train
and the test sets might also have diﬀerent distributions. A
causal interpretable model can help us understand the real
causes of decisions made by machine learning algorithms,
improve their performance, and prevent them from failing
in unexpected circumstances.
Pearl introduces diﬀerent levels of said interpretability
and argues that generating counterfactual explanations is
the way to achieve the highest level of interpretability. Below are those levels of interpretability and their deﬁnitions:
• Statistical (associational) interpretability: Aims to uncover statistical associations by asking questions such
as “How would seeing x change my belief in y?”
• Causal interventional interpretability: Is designed to
answer “What if” questions.
• Counterfactual interpretability: Is the highest level of
interpretability, which aims to answer “Why” questions.
Traditional interpretability mainly focuses on the statistical interpretability, whereas causal interpretability aims to
answer questions associated with the causal interventional
interpretability and counterfactual interpretability. In the
following, we provide an extensive review of existing work
on causal interpretability. We classify the existing works in
this ﬁeld into four main categories:
1. Causal interpretablity for model-based interpretations:
In this category, methods explain the causal eﬀect of
a model component on the ﬁnal decision.
2. Counterfactual explanation generators: Methods in this
category aim to generate counterfactual explanations
for alternate situations and scenarios.
3. Causal interpretability and fairness: Lipton explains that interpretable models are often indispensable to guarantee fairness. Motivated by this, we provide an overview of the state-of-the-art methods on
causal fairness.
4. Causal interpretability and its role in verifying the
causal relationships discovered from data: In this category, we review methods which leverage interpretability as a tool to verify causal assumptions and relationships. We also discuss the scenarios, where causal
inference can be used to guarantee the interpretability
of a machine learning model.
In the following, we discuss each category in detail.
Causal Inference and Model-based Interpretation
Recently, causality has gained increasing attention in explaining machine learning models [12; 38]. These approaches
are usually designed to explain the role and importance of
each component of a machine learning model on its decisions with concepts from the causality. For instance, one
way to explain the role of a neuron on the decision of a neural network is to estimate the ACE of the neuron on the
output [12; 81].
Traditional interpretable models cannot
answer vital questions for understanding machine learning
models. For instance, traditional machine interpretability
frameworks are not capable to answer causal questions such
as “What is the impact of the n-th ﬁlter of the m-th layer
of a deep neural network on the predictions of the model?”
which are helpful and required for understanding a neural
network model. Furthermore, despite being simple and intuitive, performing ablation testing (i.e., removing a component of the model and retraining it to measure the performance for a ﬁxed dataset) is computationally expensive
and impractical. To address these problems, causal interpretability frameworks have been proposed. These frameworks are mainly designed to explain the importance of each
component of a deep neural network on its predictions by
answering counterfactual questions such as “What would
have happened to the output of the model had we had a different component in the model?”. These types of questions
are answered by borrowing some concepts from the causal
inference literature. The main idea is to model the structure of the DNN as a SCM and estimate the causal eﬀect of
each component of the model on the output by performing
causal reasoning. Narendra et al. consider the DNN as
an SCM, apply a function on each ﬁlter of the model to obtain the targeted value such as variance or expected value of
each ﬁlter and reason on the obtained SCM. Harradon et al.
 further suggest that in order to have an eﬀective interpretability, having a human-understandable causal model of
DNN, which allows diﬀerent kinds of causal interventions,
is necessary.
Based on this hypothesis, the authors propose an interpretability framework, which extracts humanunderstandable concepts such as eyes and ears of a cat from
deep neural networks, learns the causal structure between
the input, output and these concepts in an SCM and performs causal reasoning on it to gain more insights into the
model. Chattopadhyay et al. propose an attribution
method based on the ﬁrst principle of causality, particularly
SCMs and do(·) calculus. More concretely, similar to other
proposed methods in this category, the proposed framework
models the structure of the machine learning algorithm as an
SCM. It then proposes a scalable causal inference approach
to the estimate individual treatment eﬀect of a desired component on the decision made by the algorithm.
Chattopadhyay et al. suggest to simplify the SCM deﬁned
on a multi-layer network M([l1, l2, l3...., ln], U, f, PU) to another network as SCM M ′([l1, ln], U, f ′, PU) where l1 and ln
represent neurons in the input and output layers, li represents neurons in the i-th layer of the network, U denotes
the set of unknown variables, f and f ′ correspond to the
SCM functions and PU deﬁnes distributions of the unknown
variables. They then propose to calculate the ACE of any
neurons of the model on the output by performing causal
reasoning on M as follows,
do(xi=α) = E[y|do(xi = α)] −baselinexi,
where xi is i-th neuron of the network, y is the output of the
model and α is an arbitrary value the neuron is set to. They
also propose to calculate the baselinexi as Exi[Ey[y|do(xi =
In another research direction, Zhao and Hastie state
that to extract the causal interpretations from black-box
models, one needs a model with good predictive performance, domain knowledge in the form of a causal graph,
and an appropriate visualization tool. They further explore
partial dependence plot (PDP) and Individual Conditional Expectation (ICE) to extract causal interpretations from black-box models. Alvarez-Melis and Jaakkola
 generated causal explanations for structured input structured output black-box models by (a) generating perturbed
samples using a variational auroencoder; (b) generating a
weighted bipartite graph G = (Vx ∪Vy, E), where Vx and
Vy are elements in x and y and Eij represents the causal
inﬂuence of xi and yj; and (c) generating explanation components using graph partitioning algorithms.
Paraﬁta and Vitria introduce a causal attribution framework to explain decisions of a classiﬁer based on the latent
The framework consists of three steps, (a) constructing Distributional Causal Graph which allows us to
sample and compute likelihoods of the samples; (b) generating a counterfactual image which is as similar as possible
to the original image; and (c) estimating the eﬀect of the
modiﬁed factor by estimating the causal eﬀect.
Causal interpretation has also gained a lot of attention in
Generative Adversarial Networks (GANs) interpretability.
Bau et al. propose a causal framework to understand
”How” and ”Why” images are generated by Deep Convolutional GANs (DCGANs). This is achieved by a two-step
framework which ﬁnds units, objects or scenes that cause
speciﬁc classes in the data samples. In the ﬁrst step, dissection is performed, where classes with explicit representations in the units are obtained by measuring the spatial
agreement between individual units of the region we are examining and classes using a dictionary of object classes. In
the second step, intervention is performed to estimate the
causal eﬀect of a set of units on the class. This framework
is then used to ﬁnd the units with the highest causal eﬀect
on the class. Following equation shows the objective of this
framework,
α∗= arg min
(−δα→c + λ||α||2),
where α indicates the units that have causal eﬀect on the
outcome, δα→c measures the causal eﬀect of units on the
class by intervening on α and set it to the constant c and
λ||α||2 is a regularization term. Besserve et al. propose
to better understand the internal functionality of generative
models such as GANs or Variational Autoencoders (VAE)
and answer questions like ”For a face generator, is there an
internal encoding of the eyes, independent of the remaining facial features?”, by manipulating the internal variables
using counterfactual inference.
Madumal et al.
 leverage causal inference to explain
the behavior of reinforcement learning agents by learning
an SCM during reinforcement learning and generate counterfactual examples using the learned SCM.
Causal Inference and Example-based Interpretation
As mentioned in Section 2.2, in example based explanations,
we are looking for data instances that are capable of explaining the model or the underlying distribution of the data. In
this subsection, we explain counterfactual explanations, a
type of example-based explanations, which are one of the
widely used explanations for interpreting a model’s decisions.
Counterfactual explanations aim to answer “Why”
questions such as “Why the model’s decision is Y?” or “Was
it input X that caused the model to predict Y?”. Generally
speaking, counterfactuals are designed to answer hypothetical questions such as “What would have happened to Y,
had I not done X?”.
They are designed based on a new
type of conditional probability P(yx|x′, y′). This probability indicates how likely the outcome (label) of an observed
instance, i.e., y′, would change to yx if x′ is set to x. These
kinds of questions can be answered using SCMs .
Counterfactual explanations are deﬁned as examples that
are obtained by performing minimal changes in the original instance’s features and have a predeﬁned output. For
example, what minimal changes can be made in a credit
card applicant’s features such that their application gets accepted. These explanations are human friendly because they
are usually focused on a few number of features and therefore are more understandable. However, they suﬀer from the
Roshomon eﬀect which means there could be multiple
true versions of explanations for a predeﬁned outcome. To
alleviate this problem, we could report all possible explanations, or ﬁnd a way to evaluate all explanations and report
the best one. Recently, several works have been proposed to
generate counterfactual explanations. In order to generate
counterfacutal examples, Wachter et al.
 propose to
minimize the mean squared error between the model’s predictions and counterfactual outcomes as well as the distance
between the original instances and their corresponding counterfactuals in the feature space. Eq. (6) shows the objective
function to achieve this goal,
L(x, xcf, y, ycf)
L(x, xcf, y, ycf) = λ · ( ˆf(xcf) −ycf)2 + d(x, xcf),
where the ﬁrst term indicates the distance between the model’s
prediction for the counterfactual input xcf and the desired
counterfactual output, while the second term indicates the
distance between the actual instance features x and the
counterfactual features xcf.
Liu et al. propose a generative model to generate counterfactual explanations for explaining a model’s decisions
using Eq.(6). Garth et al. propose a method to generate counterfactual examples in a high dimensional setting.
The method is proposed for credit application prediction
via oﬀ-the-shelf interchangeable black-box classiﬁers. In the
case of high dimensional feature space, the generated explanation might not be interpretable due to the existence of
too many features. To alleviate the problem, the authors
propose to reweigh the distance between the features of an
instance and its corresponding counterfactual with the inverse median absolute deviation (Eq.(7)).
This metric is
robust to outliers and results in more sparse, and therefore,
more explainable solutions.
MADj = mediani∈{1,2,...,n}(|xi,j−medianl∈{1,2,...,n}(xl,j)|)
Goyal et al. propose to generate counterfactual visual
explanations for a query image I by using a distractor image
I′ which belongs to the class c′ (a diﬀerent class from the
actual output of the classiﬁer). To generate counterfactual
explanations, the authors propose to detect spatial regions
in I and I′ such that replacing those regions in I with regions
in I′ results in system classifying the generated image as c′.
In order to avoid trivial solutions such as replacing the entire
image I with I′, authors propose to minimize the number
of edits to transform I to I′. The proposed framework is
shown in the following equation,
P,a ||a||1
s.t. c′ = argmax g((1 −a) ◦f(I) + a ◦Pf(I′))
ai ∈{0, 1} ∀i and P ∈P,
where a ∈Rhw (h and w represent height and width of
an image, respectively) is a binary vector which indicates
whether the feature in I needs to be changed with the feature in I′ (value 1) or not (value 0).
P ∈Rhw×hw is a
permutation matrix used to align spatial cells of f(I′) with
f(I), f(I) and f(I′) correspond to spatial feature maps of
I and I′, respectively. Function g(.) represents the classiﬁer
and P is a set of all hw × hw permutation matrices. Goyal
et al. propose to explain classiﬁers’ decisions by measuring the Causal Concept Eﬀect (CACE). CACE is deﬁned
as the causal eﬀect of a concept (such as the brightness or
an object in the image) on the prediction. In order to generate counterfactuals, authors leverage a VAE-based architecture. Hendricks et al. propose a method to generate
counterfactual explanations using multimodal information
for video classiﬁcation tasks. The proposed method in this
work generates visual-linguistic explanations in two steps.
First, it trains a classiﬁcation model for which we would like
to generate explanations. Then, in the second step, it trains
a post-hoc explanation model by leveraging the output and
mid-level features of the trained model in ﬁrst the step. The
explanation model predicts the counterfactuality score for all
the negative classes (classes that the instance does not belong to according to the prediction model trained in the ﬁrst
step). The explanation model then generates explanations
by maximizing the counterfactuality score between positive
and negative classes.
Moore et al. propose to leverage adversarial examples
to generate counterfactual explanations. In order to generate plausible explanations, the number of changed features
should be small. Moreover, some features such as age cannot be changed arbitrarily. For example, we cannot ask loan
applicants to reduce their age. Therefore, to constrain the
number of changed features and the direction of gradients
in the generated adversarial examples, authors propose to
mask the unwanted features and gradients in a way that
only desired features change in the generated explanations.
Kommiya et al. propose to explain the decision of a machine learning framework by generating counterfactual examples which satisfy the following two criteria, (1) generated
examples must be feasible given users conditions and context
such as range for the features or features to be changed; (2)
counterfactual examples generated for explanations should
be as diverse as possible. In order to impose the diversity
criterion, authors propose to either maximize the point-wise
distance between examples in feature-space or leverage the
concept from Determinantal point processes to select a subset of samples with the diversity constraint.
Van Looveren and Klaise propose to leverage class prototypes to generate counterfactual explanations. They also
claim that using class prototypes for counterfactual example
generation accelerates the process. This work suggests that
the generated examples by traditional counterfactual generation frameworks [101; 35] do not satisfy two main criteria:
(1) they do not consider the training data manifold which
may result in out-of-distribution examples, and (2) the hyperparameters in the framework should be carefully tuned
in an appropriate range which could be time consuming. To
solve the mentioned problems, the authors propose to add a
reconstruction loss term (deﬁned as L2 reocnstruction error
between counterfactuals and an autoencoder trained on the
training samples) as well as a prototype loss term, which
is deﬁned as L2 loss between the class prototype and the
counterfactual samples, to the original objective function of
counterfactual generation (Eq (6)).
Rathi generates counterfactual explanations using shapely
additive explanations (SHAP).
Hendricks et al.
 deﬁned a method to generate natural language counterfactual explanations.
The framework
checks for evidences of a counterfactual class in the text explanation generated for the original input. It then checks if
those factors exist in the counterfactual image and returns
the existing ones.
Causal Inference and Fairness
Nowadays, politicians, journalists and researchers are concerned regarding the interpretability of model’s decisions
and whether they comply with ethical standards . Algorithmic decision making has been widely utilized to perform
diﬀerent tasks such as approving credit lines, ﬁltering job
applicants and predicting the risk of recidivism . Prediction of recidivism is used to determine whether to detain or
free a person and therefore, it needs to be guaranteed that
it does not discriminate against a group of people. Since
conventional evaluation metrics such as accuracy does not
take these into account, it is usually required to come up
with interpretable models in order to satisfy fairness criteria. Recently, huge attention has been paid to incorporating
fairness into decision making methods and its connection
with causal inference.
Kusner et al.
 propose a new
metric for measuring how fair decisions are based on counterfactuals. According to this paper, a decision is fair for
an individual if the outcome is the same both in the actual
world and a counterfactual world in which the individual
belonged to a diﬀerent demographic group. Kilbertus et al.
 address the problem from a data generation perspective
by going beyond observational data. The authors propose to
utilize causal reasoning to address the fairness problem by
asking the question “What do we need to assume about the
causal data generating process?” instead of “What should
be the fairness criterion?”.
Madras et al. propose a causal inference model in which
the sensitive attribute confounds both the treatment and
the outcome. It then leverages deep learning techniques to
learn the parameters of the model. Zhang and Bareinboim
 propose a metric (i.e., causal explanations) to quantitatively measure the fairness of an algorithm. This measure
is based on three measures of transmission from cause to
eﬀect namely counterfactual direct (Ctf-DE), indirect (Ctf-
IE), and spurious (Ctf-SE) eﬀects as deﬁned below. Given
an SCM M, the counterfactual indirect eﬀect of intervention
X = x1 on Y = y (relative to baseline X = x0) conditioned
on X = x with mediator W = Wx1 is deﬁned as,
IEx0,x1(y|x) = P(yx0,Wx1 |x) −P(yx0|x)
the counterfactual direct eﬀect of intervention X = x1 on Y
(with baseline x0) conditioned on X = x is deﬁned as,
DEx0,x1(y|x) = P(yx1,Wx0|x) −P(yx0|x)
And ﬁnally, the spurious eﬀect of event X = x1 on Y = y
(relative to baseline x0) is deﬁned as,
SEx0,x1(y|x) = P(yx0|x1) −P(y|x0)
Causal Inference as Guarantee for Interpretability
Machine learning has had great achievements in medical, legal and economic decision making.
Frameworks for these
applications must satisfy the following two criteria: 1) they
must be causal 2) they must be interpretable. For example,
in order to ﬁnd the eﬃcacy of a drug on patient’s health,
one needs to estimate the causal eﬀect of the drug on patient’s health status. Moreover, in order for the results to be
reliable for doctors and experts, an explanation of how the
decision has been made is necessary. Despite recent achievements in these two ﬁelds separately, not so many works
have been done to cover both requirements simultaneously.
Moreover, the state-of-the-art approaches in each ﬁeld are
incompatible and therefore can not be combined and used
Kim and Bastani propose a framework to
bridge the gap between causal and interpretable models by
transforming any algorithm into an interpretable individual
treatment eﬀect estimation framework. To be more speciﬁc,
this work leverages the algorithm proposed in to learn
an oracle function f which estimates the causal eﬀect of a
treatment for any observed instance and then learn an interpretable function f ′ to estimate f. They further provide
a bound for the error produced by their framework.
In another line of research, causal interpretability has been
used to verify the causal relationships in the data. Caruana
 perform two case studies to discover the rules
which show cases where generalized additive models with
pairwise interactions (GA2Ms) learn rules based on only
correlations in the data and invade causal rules. They then
propose to ﬁx the learned rules based on domain experts
knowledge.
Bastani et al. propose a decision tree based explanation method to generate global explanations for a blackbox model.
Their proposed framework provides powerful
insights into the data such as causal issues conﬁrmed by the
physicians previously.
PERFORMANCE EVALUATION
In this section we provide a detailed review of evaluation
methods and common datasets used to assess the interpretability of models for causal interpretablity. Evaluation
of interpretability is a challenging task due to the lack of consensus deﬁnition of interpretability and understanding of humans from the concept. Evaluation of causal interpretability
is even more challenging due to the lack of groundtruth data
for causal explanations and veriﬁcation of causal relationships. Therefore, it is important to have a uniﬁed guideline
on how to evaluate the proposed models. Traditional interpretability of a model is usually measured with quantiﬁable
proxies such as if a model is approximated using sparse linear
models it can be considered interpretable. To evaluate the
causal interpretability, researchers also came up with some
proxy metrics such as size and diversity of the counterfactual
explanation. In this section, we discuss all criteria deﬁned
for the “goodness” of both causal and traditional interpretations and proxy metrics to measure how good the proposed
framework can generate these explanations.
In this section, we brieﬂy introduce benchmark datasets
commonly used to evaluate interpretable models. Depending on the the type of the data (i.e., text, image or tabular) diﬀerent datasets are used to assess the interpretability .
Some commonly used datasets for image are “ImageNet (ILSVRC)” , “MNIST” and “PASCAL VOC
dataset” .
While for text they experimented on “20
Newsgroup Dataset” , “Yelp” , “IMDB” and
“Amazon” reviews.
“UCI repository” consists of
some tabular datasets that were used by the litreture such as
“Spambase”, “Insurance”, “Magic”, “Letter”, and “Adult”
datasets. In order to explain the outcome of the test sample,
the explanations are provided by the model. For instance,
in the case of image data, those patches of the images that
are mostly responsible for the class label were selected. For
the text data, words involved in the ﬁnal decision are made
bold with diﬀerent shades of color, which represent the degree of their involvement.
In addition to the mentioned
datasets, there are some datasets commonly used to evaluate the causal interpretable frameworks. In the following,
we list common datasets used for the evaluation of causal
interpretability.
• German loan dataset . This dataset contains 1000
observations of loan applicants which contains, numeric, categorical and ordinal attributes.
• LendingClub. This dataset2 contains 5 years of loan
records given by LendingClub company.
After preprocessing, it contains 8 features, namely,
employment years, annual income, number of open
credit accounts, credit history, loan grade as decided
by LendingClub, home ownership, purpose, and the
state of residence in the United States. .
• COMPAS. Collected by ProPublica for analysis
purposes on recidivism decisions in the United States,
after preprocessing, this data contains 5 features, namely,
bail applicant’s age, gender, race, prior count of offenses, and degree of criminal charge.
Unfortunately, datasets used for this purpose are not specifically designed for causal interpretability and do not contain
the groundtruth that captures the causal aspect of the model
such as counterfactual explanations or the ACE of diﬀerent
components of the model on the ﬁnal decision. On the other
hand, there are existing benchmark datasets speciﬁcally designed for evaluating tasks in causal inference. Cheng et al.
 provide a comprehensive survey on benchmark datasets
for diﬀerent causal tasks.
Evaluation Metrics
In order to assess the performance of a causal interpretable
framework, authors are required to evaluate the interpretability of generated explanations from two aspects, (1) the quality of the generated explanations, i.e., are generated explanations interpretable to humans?; and (2) are the generated
explanations causal? In the following two subsections, we
provide comprehensive guidelines and metrics on how to answer these questions.
Interpretability Evaluation Metrics
Evaluating the interpretability of a machine learning model
is usually a challenging task. Interpretable frameworks often
evaluate their methods via two main perspectives, (1) how
well the generated explanations by the method match the
human expectation from diﬀerent aspects; (2) how well the
generated explanations are without using any human subjects. Thus, we will categorize diﬀerent assessment methods
based on the aforementioned perspectives and provide some
examples of experiments conducted by the researchers.
2 
Human Subject-Based Evaluation Metrics.
the research in interpretability aims to let humans understand the reasons behind the outcome of a product.
Accordingly, experiments carried out by the researchers usually
answer the following questions:
• By providing two diﬀerent models, can the explanations help users choose the better classiﬁer in terms
of generalizability?
This will help us to investigate
whether the explanations can be used to decide which
model is better. Ribeiro et al. used human subjects from “Amazon Mechanical Turk” (AMT) to choose
between two models, one that generalizes better than
the other while its accuracy was lower on cross validation. With the provided explanations, the subjects
were able to choose the more generalized model 89%
of the time.
• With explanations provided by the interpretable methods for a particular sample, can a user correctly predict
the outcome of that sample? This is also called “Forward Simulation/Prediction” by Doshi-Velez and Kim
 . We can verify the explanations actually deﬁnes
the output we are looking for.
• Based on the explanations, do users trust the classi-
ﬁer to be used in real-world applications? Selvaraju et
al. evaluated the trust by asking 54 AMT workers to rate the reliability of the models via a 5-point
scale questionnaire. A sample along with its explanations were demonstrated to subjects for two diﬀerent
models, AlexNet and VGG-16 (VGG-16 is known to
be more reliable than AlexNet). Moreover, only those
instances that provided the same prediction and were
aligned with the ground truth label were considered.
The results of the evaluation shows that with the proposed explanation the subjects trust the model that
generalizes better (VGG-16).
• Do the resulted explanations match human intuition?
The model is described to human subjects in detail
and they were asked to provide insights about the outcome of the model (human-produced explanations).
The test assumes that the explanations provided by
the human should be aligned with one that the model
provides . Moreover, experts in a speciﬁc ﬁeld (e.g.,
doctors) can also be used to provide the explanations
(e.g., important factors/symptoms) on the task (e.g.,
recognizing the disease).
• Given two diﬀerent explanations from diﬀerent algorithms, which one provides a better quality explanation? This is also known as “Binary Forced Choice”
evaluation metric . This test can be used to compare the diﬀerent explanations from diﬀerent interpretable models.
Non-human Based Evaluation Metrics. Multiple factors such as human fatigue, improper practice sessions and
incentive costs can aﬀect experimental results when humansubject evaluation metrics are used. Hence, it is important
to conduct other evaluation metrics.
• How much a proposed interpretable model recovers the
important features of the data for a certain prediction task? This requires the important features to be
Countrfactual
Description of Property
Evaluation Metrics
Sparsity/Size
Perturbation which transforms x
to xcf should be small
Elastic net loss term (EN(δ) = β.||δ||1 + ||δ||2
Counting number of altered features manually 
Interpretability
Counterfactual explanations
should lie close to data manifold
Ratio of the reconstruction errors of counterfactual generator trained only on the counterfactual class and counterfactual generator trained on the original class 
Ratio of the reconstruction errors of counterfactual generator trained only on the counterfactual class and counterfactual generator trained on the all class 
Counterfactual
explanations
should be as similar as possible to
the original instance
Proximity = −1
i=1 dist(xcfi, x) 
Generating counterfactuals should
be fast enough to be deployable in
real-world applications
Measure the time and number of gradient updates 
Counterfatual explanations generated for a data instance should be
diﬀerent from each other
Diversity =
j=i+1 dist(xcfi, xcfj) 
Visual-Linguistic
Counterfactuals
Visual explanation is the region
which retains high positiveness or
negativeness (i.e., on the model
prediction for speciﬁc positive or
negative classes).
Measure how the output of the target classiﬁer changes
corresponding to the negative class when a speciﬁc region
is removed from the input using accuracy .
Linguistic explanation is compatible to the visual counterpart.
Measure how the output of the target classiﬁer changes
corresponding to the negative class when a speciﬁc region
is removed from the input using accuracy .
Table 1: A summary of evaluation metrics for counterfactual explanations
known beforehand. We should verify that the model
will pick up the important features of the data. One
simply can use any base method introduced in section 2.2.1 as a proxy model to extract the important
features. The fraction of these important features recovered by the interpretable method can be used as an
evaluation score .
• How locally faithful the proposed method is compared
to the original model (ﬁdelity)? Lack of ﬁdelity will result in a limited insight to the original model . In
convolutional neural network, one common approach is
the image occlusion. The pixels that the interpretable
method deﬁnes as important will be masked to see
whether it reﬂects on the classiﬁcation score or not
[91; 108].
• How consistent the explanations are for the similar instances with the same class label? The explanations
should not be signiﬁcantly diﬀerent for samples with
the same label with a slightly diﬀerent features. This
instability could be the result of a high variance as
well as the non-deterministic components of the explanation method .
Causal Evaluation Metrics
Due to the lack of groundtruth for causal explanations, to
verify the causal aspect of the proposed framework, we need
to quantify the desired characteristics of the model and measure the “goodness” of them via some predeﬁned proxy metrics.
In the following, we go over the existing metrics to
evaluate the proposed causal interpretable frameworks for
diﬀerent categories of causal interpretability.
Counterfactual Explanations Evaluation Metrics. Existing approaches for causal interpretability are mostly based
on generating counterfactual explanations.
For such approaches, the causal interpretability is often measured through
the goodness of generated counterfactual explanation. As
mentioned in section 4, a counterfactual explanation is the
highest level of explanation and therefore, we can claim that
if an explanation is a counterfactual explanation and is generated by considering causal relationships, it is indeed explainable. However, due to the lack of groundtruth for counterfactuals, we are unable to measure if the generated explanations are generated based on causal relationships. Therefore, to measure the “goodness” of counterfactual explanations, we suggest to conduct experiments to (1) measure
the interpretability of the explanations using the metrics
designed for interpretability; and (2) evaluate the conterfactuals themselves by measuring diﬀerent characteristics of
them. An interpretable Counterfatual explanation should
have the following characteristics:
• The model prediction on the counterfactual sample
(xcf) needs to be close to the predeﬁned output for
counterfactual explanation.
• The perturbation δ changing the original instance x
into xcf = x + δ should be sparse. In other words, size
of counterfactual (i.e., number of features) should be
• A counterfactual explanation xcf is considered interpretable if it lies close to the models training data distribution.
• The counterfactual instance xcf needs to be found fast
enough to ensure it can be used in a real life setting.
• Counterfatual explanations generated for a data instance should be diﬀerent from each other. In other
words, counterfactual explanations should be diverse.
• Visual-linguistic counterfactual explanations must satisfy the following two criteria, (1) Visual explanation is
the region which keeps high positiveness/negativeness
on the model prediction for speciﬁc positive/negative
classes; (2) Linguistic explanation should be compatible to the visual counterpart in the generated visual
explanations.
Below, we brieﬂy discuss these evaluation metrics designed
to assess aformentioned characteristics of a counterfactual
explanation:
To evaluate the sparsity of the generated counterfactual examples, Mc Grath et al. measures the size of a generated
example by counting the number of features each example
consists of.
Van Looveren and Klaise use elastic net
loss term EN(δ) = β||δ||1 +||δ||2
2 where δ is the distance between the original instance and its generated counterfactual
example and β is the hyperparameter.
In order for counterfactual explanations to be interpretable,
they need to be close to the data manifold. Looveren and
Klaise improves this criterion by suggesting that the counterfactuals are interpretable if they are close to the data
manifold of the counterfactual class . To measure the
interpretability deﬁned above, Looveren and Klaise propose
to measure the ratio of the reconstruction errors when the
model used for generating counterfactuals is trained only on
the counterfactual class vs when it is trained on the original
class . The proposed metric is shown in the following
IM1(AEi, AEt0, xcf) =
||x0 + δ −AEi(x0 + δ)||2
||x0 + δ −AEt0(x0 + δ)||2
Where AEi and AEt0 represent the autoencoders used to
generate the counterfacutals trained on the class i (counterfactual class) and class t0 (the original class), respectively.
We let xcf and x0 be the counterfactual explanation and
the original sample. In addition, δ denotes the distance between the original and counterfactual samples. A lower value
of IM1 shows that counterfactual examples can be better
reconstructed from the autoencoder trained on the counterfactual class in comparison to the autoencoder trained on
the original class. This implies that the generated counterfactuals are closer to the counterfactual class data manifold.
Another metric proposed by measures how similar the
generated counterfactuals are when generated using the autoencoder trained on only counterfactuals vs the autoencoder trained on all classes.
The metric is shown in the
following equation,
IM2(AEi, AEt0, xcf) = ||AEi(x0 + δ) −AE(x0 + δ)||2
||x0 + δ||1 + ǫ
A lower value of IM2 shows that counterfactuals generated
by both autoencoders trained on all classes and counterfactuals are more similar. This implies that the generated counterfactual distribution is as good as the distribution over all
Generated counterfactual explanations can be used to measure users’ understanding of a machine learning model’s local decision boundary. Mothilal et al. propose to mimic
users’ understanding of a model’s local decision boundaries
by, (a) constructing an auxiliary classiﬁer on both original
inputs and counterfactual examples; and (b) measuring how
well it mimics the actual decision boundaries. More specifically, they train a 1-nearest neighbor (1-NN) classiﬁer on
both the original and the counterfactual samples to predict
the class of new inputs. The accuracy of this model is then
compared with the accuracy of the original model.
The deﬁnition of counterfactual explanations implies that
generated explanations should be as similar as possible to
the original instance.
In order to evaluate the proximity
between original samples and counterfactual explanations,
Mothilal et al. deﬁnes proximity as Eq. (14),
Proximity = −1
dist(xcfi, x)
In order to be able to calculate the proximity for both categorical and continuous features, the authors further propose
two metrics to calculate the proximity for categorical and
continuous features. For continuous features, the proximity
is deﬁned as the mean of feature-wise L1 distances between
the original sample and counterfactuals divided by the median absolute deviation (MAD) of the features values in the
training set. For categorical features, disctance function is
calculated such that for each categorical feature it assigns 1
if the feature diﬀers from the original feature and otherwise
it assigns 0.
In order to gauge the speed of generating counterfactual explanations, Looveren and Klaise measure the time and
the number of gradient updates until the desired counterfactual explanation is generated.
Diversity of generated counterfactuals is measured via measuring feature-wise distances between each pair of counterfactual examples and calculating diversity as the mean of
the distances between each pair of examples . Eq. (15)
illustrates the measure used for diversity.
Diversity =
d(xcfi, xcfj)
Where Ck represents a set of k counterfactuals generated
for the original input, xcfi and xcfj are the i-th and j-th
counterfactuals in the set Ck.
Kanehira et al.
 propose metrics to evaluate visuallinguistic counterfactual explanations to ensure, (a) visual
explanations keep possession of high positiveness/negativeness
on the model predictions for positive/negative classes; (b)
linguistic explanations are compatible with their corresponding visual explanations. To measure if the generated examples meet these criteria, authors in propose two metrics
based on the accuracy. More speciﬁcally, to check for the
ﬁrst condition, they investigate how the output of the target
classiﬁer changes towards the negative class when a speciﬁc
region is removed from the input. To measure the second
criterion, for each output pair (s, R) they examine how the
region R makes the concept s distinguishable by humans. To
measure this quantitatively, they compute the accuracy by
Overview of interpretable models and their categories
Traditional
Interpretability
Interpretable Models: , ,
 , , , , , , 
Interpretability
Model-based: , , , , , , ,
Example-based: , , , , , ,
 , , , , 
Post-hoc: , , , , ,
 , , , , 
Fairness: , , , 
Guarantee: , , 
Table 2: A summary of the state-of-the-art frameworks for each type of interpretability
utilizing bounding boxes for each attribute in the test set.
More speciﬁcally, IoU (intersection over union) between a
given R and all bounding boxes R0 corresponding to attribute s0 is calculated. Then the accuracy is measured by
selecting the the attribute s0 with the largest IoU score and
checking its consistency with s a counterpart of R.
Table 1 summarizes evaluation metrics for counterfactulas
explanations based on the properties of the generated examples.
Model-based Evaluation Metrics. Due to the lack of
evaluation groundtruth for representing the actual eﬀect of
each component of the model on its ﬁnal decisions, evaluation for this type of models is still an open problem. One
common way of evaluating such models is to report the most
important components of a model by measuring their causal
eﬀects on the outcome of the model [38; 77]. Chattopadhyay
also used the causal attribution of each neuron on
the output to visualize the local decisions of the model by
saliency map. Moreover, to further investigate how well the
model estimates the ACE, they proposed to run the model
on datasets for causal eﬀect estimations .
Causal Fairness Evaluation. Evaluation of causal fairness models is a challenging task. Papers in this ﬁeld usually
assess the performance of the model for detecting discrimination. Zhang et al. leverage direct, indirect and spurious
eﬀect measures (deﬁned in section 4.3) to detect and explain
discrimination . However, to the best of our knowledge,
no quantitative measure of causality of a fairness algorithm
CONCLUSION
In this survey, we introduce the problem of interpretability in machine learning.
We view the problem from two
perspectives, (1) Traditional interpretability algorithms; (2)
causal interpretability algorithms.
However, the primary
focus of the survey is on causal frameworks. We ﬁrst provide diﬀerent deﬁnitions of interpretability, then review the
state-of-the-art methods in both categories and point out the
diﬀerences between them. Each type of interpretable models is further subdivided into other sub categories to provide
readers with better overview of existing directions and approaches in the ﬁeld. More conceretely, for traditional methods, we divide existing work into inherently interpretable
models and post-hoc intrerpretability. For causal models,
we divide the existing works into the following four categories: counterfactual examples, model-based interpretability, causal models in fairness and interpretability for verifying causal relationships. We also address the challenging
problem of evaluating interpretable models , explain existing
metrics in detail and categorize them based on the scenarios
they are designed for. Table 2 summarizes state-of-the-art
methods which belong to each category of interpretability.
ACKNOWLEDGEMENTS
We would like to thank Andre Harrison for helpful comments.