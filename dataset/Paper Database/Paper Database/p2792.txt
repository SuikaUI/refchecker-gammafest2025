Unpaired Image-to-Image Translation
using Cycle-Consistent Adversarial Networks
Jun-Yan Zhu∗
Taesung Park∗
Phillip Isola
Alexei A. Efros
Berkeley AI Research (BAIR) laboratory, UC Berkeley
horse zebra
zebra horse
summer winter
winter summer
Photograph
Monet Photos
Monet photo
photo Monet
Figure 1: Given any two unordered image collections X and Y , our algorithm learns to automatically “translate” an image
from one into the other and vice versa: (left) Monet paintings and landscape photos from Flickr; (center) zebras and horses
from ImageNet; (right) summer and winter Yosemite photos from Flickr. Example application (bottom): using a collection
of paintings of famous artists, our method learns to render natural photographs into the respective styles.
Image-to-image translation is a class of vision and
graphics problems where the goal is to learn the mapping
between an input image and an output image using a training set of aligned image pairs. However, for many tasks,
paired training data will not be available. We present an
approach for learning to translate an image from a source
domain X to a target domain Y in the absence of paired
examples. Our goal is to learn a mapping G : X →Y
such that the distribution of images from G(X) is indistinguishable from the distribution Y using an adversarial loss.
Because this mapping is highly under-constrained, we couple it with an inverse mapping F : Y →X and introduce a
cycle consistency loss to enforce F(G(X)) ≈X (and vice
versa). Qualitative results are presented on several tasks
where paired training data does not exist, including collection style transfer, object transﬁguration, season transfer,
photo enhancement, etc. Quantitative comparisons against
several prior methods demonstrate the superiority of our
1. Introduction
What did Claude Monet see as he placed his easel by the
bank of the Seine near Argenteuil on a lovely spring day
in 1873 (Figure 1, top-left)? A color photograph, had it
been invented, may have documented a crisp blue sky and
a glassy river reﬂecting it. Monet conveyed his impression
of this same scene through wispy brush strokes and a bright
What if Monet had happened upon the little harbor in
Cassis on a cool summer evening (Figure 1, bottom-left)?
A brief stroll through a gallery of Monet paintings makes it
possible to imagine how he would have rendered the scene:
perhaps in pastel shades, with abrupt dabs of paint, and a
somewhat ﬂattened dynamic range.
We can imagine all this despite never having seen a side
by side example of a Monet painting next to a photo of the
scene he painted. Instead, we have knowledge of the set of
Monet paintings and of the set of landscape photographs.
We can reason about the stylistic differences between these
* indicates equal contribution
 
Figure 2: Paired training data (left) consists of training examples {xi, yi}N
i=1, where the correspondence between xi
and yi exists . We instead consider unpaired training
data (right), consisting of a source set {xi}N
i=1 (xi ∈X)
and a target set {yj}M
j=1 (yj ∈Y ), with no information provided as to which xi matches which yj.
two sets, and thereby imagine what a scene might look like
if we were to “translate” it from one set into the other.
In this paper, we present a method that can learn to do the
same: capturing special characteristics of one image collection and ﬁguring out how these characteristics could be
translated into the other image collection, all in the absence
of any paired training examples.
This problem can be more broadly described as imageto-image translation , converting an image from one
representation of a given scene, x, to another, y, e.g.,
grayscale to color, image to semantic labels, edge-map to
photograph. Years of research in computer vision, image
processing, computational photography, and graphics have
produced powerful translation systems in the supervised
setting, where example image pairs {xi, yi}N
i=1 are available (Figure 2, left), e.g., . However, obtaining paired training data can be difﬁcult
and expensive. For example, only a couple of datasets exist for tasks like semantic segmentation (e.g., ), and they
are relatively small. Obtaining input-output pairs for graphics tasks like artistic stylization can be even more difﬁcult
since the desired output is highly complex, typically requiring artistic authoring. For many tasks, like object transﬁguration (e.g., zebra↔horse, Figure 1 top-middle), the desired
output is not even well-deﬁned.
We therefore seek an algorithm that can learn to translate between domains without paired input-output examples
(Figure 2, right). We assume there is some underlying relationship between the domains – for example, that they are
two different renderings of the same underlying scene – and
seek to learn that relationship. Although we lack supervision in the form of paired examples, we can exploit supervision at the level of sets: we are given one set of images in
domain X and a different set in domain Y . We may train
a mapping G : X →Y such that the output ˆy = G(x),
x ∈X, is indistinguishable from images y ∈Y by an adversary trained to classify ˆy apart from y. In theory, this objective can induce an output distribution over ˆy that matches
the empirical distribution pdata(y) (in general, this requires
G to be stochastic) . The optimal G thereby translates
the domain X to a domain ˆY distributed identically to Y .
However, such a translation does not guarantee that an individual input x and output y are paired up in a meaningful
way – there are inﬁnitely many mappings G that will induce the same distribution over ˆy. Moreover, in practice,
we have found it difﬁcult to optimize the adversarial objective in isolation: standard procedures often lead to the wellknown problem of mode collapse, where all input images
map to the same output image and the optimization fails to
make progress .
These issues call for adding more structure to our objective. Therefore, we exploit the property that translation
should be “cycle consistent”, in the sense that if we translate, e.g., a sentence from English to French, and then translate it back from French to English, we should arrive back
at the original sentence . Mathematically, if we have a
translator G : X →Y and another translator F : Y →X,
then G and F should be inverses of each other, and both
mappings should be bijections. We apply this structural assumption by training both the mapping G and F simultaneously, and adding a cycle consistency loss that encourages F(G(x)) ≈x and G(F(y)) ≈y. Combining this loss
with adversarial losses on domains X and Y yields our full
objective for unpaired image-to-image translation.
We apply our method to a wide range of applications,
including collection style transfer, object transﬁguration,
season transfer and photo enhancement. We also compare
against previous approaches that rely either on hand-deﬁned
factorizations of style and content, or on shared embedding functions, and show that our method outperforms these
baselines. We provide both PyTorch and Torch implementations. Check out more results at our website.
2. Related work
Generative Adversarial Networks (GANs) 
have achieved impressive results in image generation , image editing , and representation learning . Recent methods adopt the same idea for conditional
image generation applications, such as text2image , image inpainting , and future prediction , as well as to
other domains like videos and 3D data . The key to
GANs’ success is the idea of an adversarial loss that forces
the generated images to be, in principle, indistinguishable
from real photos. This loss is particularly powerful for image generation tasks, as this is exactly the objective that
much of computer graphics aims to optimize. We adopt an
adversarial loss to learn the mapping such that the translated
cycle-consistency
cycle-consistency
Figure 3: (a) Our model contains two mapping functions G : X →Y and F : Y →X, and associated adversarial
discriminators DY and DX. DY encourages G to translate X into outputs indistinguishable from domain Y , and vice versa
for DX and F. To further regularize the mappings, we introduce two cycle consistency losses that capture the intuition that if
we translate from one domain to the other and back again we should arrive at where we started: (b) forward cycle-consistency
loss: x →G(x) →F(G(x)) ≈x, and (c) backward cycle-consistency loss: y →F(y) →G(F(y)) ≈y
images cannot be distinguished from images in the target
Image-to-Image Translation The idea of image-toimage translation goes back at least to Hertzmann et al.’s
Image Analogies , who employ a non-parametric texture model on a single input-output training image pair.
More recent approaches use a dataset of input-output examples to learn a parametric translation function using CNNs
(e.g., ). Our approach builds on the “pix2pix” framework of Isola et al. , which uses a conditional generative
adversarial network to learn a mapping from input to
output images. Similar ideas have been applied to various
tasks such as generating photographs from sketches or
from attribute and semantic layouts . However, unlike
the above prior work, we learn the mapping without paired
training examples.
Unpaired Image-to-Image Translation Several other
methods also tackle the unpaired setting, where the goal is
to relate two data domains: X and Y . Rosales et al. 
propose a Bayesian framework that includes a prior based
on a patch-based Markov random ﬁeld computed from a
source image and a likelihood term obtained from multiple
style images. More recently, CoGAN and cross-modal
scene networks use a weight-sharing strategy to learn a
common representation across domains. Concurrent to our
method, Liu et al. extends the above framework with
a combination of variational autoencoders and generative adversarial networks . Another line of concurrent
work encourages the input and output to share
speciﬁc “content” features even though they may differ in
“style“. These methods also use adversarial networks, with
additional terms to enforce the output to be close to the input
in a predeﬁned metric space, such as class label space ,
image pixel space , and image feature space .
Unlike the above approaches, our formulation does not
rely on any task-speciﬁc, predeﬁned similarity function between the input and output, nor do we assume that the input
and output have to lie in the same low-dimensional embedding space. This makes our method a general-purpose solution for many vision and graphics tasks. We directly compare against several prior and contemporary approaches in
Section 5.1.
Cycle Consistency The idea of using transitivity as a
way to regularize structured data has a long history.
visual tracking, enforcing simple forward-backward consistency has been a standard trick for decades .
In the language domain, verifying and improving translations via “back translation and reconciliation” is a technique
used by human translators (including, humorously, by
Mark Twain ), as well as by machines .
recently, higher-order cycle consistency has been used in
structure from motion , 3D shape matching , cosegmentation , dense semantic alignment , and
depth estimation . Of these, Zhou et al. and Godard et al. are most similar to our work, as they use a
cycle consistency loss as a way of using transitivity to supervise CNN training. In this work, we are introducing a
similar loss to push G and F to be consistent with each
other. Concurrent with our work, in these same proceedings, Yi et al. independently use a similar objective
for unpaired image-to-image translation, inspired by dual
learning in machine translation .
Neural Style Transfer is another way
to perform image-to-image translation, which synthesizes a
novel image by combining the content of one image with
the style of another image (typically a painting) based on
matching the Gram matrix statistics of pre-trained deep features. Our primary focus, on the other hand, is learning
the mapping between two image collections, rather than between two speciﬁc images, by trying to capture correspondences between higher-level appearance structures. Therefore, our method can be applied to other tasks, such as
painting→photo, object transﬁguration, etc. where single
sample transfer methods do not perform well. We compare
these two methods in Section 5.2.
3. Formulation
Our goal is to learn mapping functions between two
domains X and Y given training samples {xi}N
xi ∈X and {yj}M
j=1 where yj ∈Y 1. We denote the data
distribution as x ∼pdata(x) and y ∼pdata(y). As illustrated in Figure 3 (a), our model includes two mappings
G : X →Y and F : Y
In addition, we introduce two adversarial discriminators DX and DY , where
DX aims to distinguish between images {x} and translated
images {F(y)}; in the same way, DY aims to discriminate
between {y} and {G(x)}. Our objective contains two types
of terms: adversarial losses for matching the distribution of generated images to the data distribution in the target
domain; and cycle consistency losses to prevent the learned
mappings G and F from contradicting each other.
3.1. Adversarial Loss
We apply adversarial losses to both mapping functions. For the mapping function G : X →Y and its discriminator DY , we express the objective as:
LGAN(G, DY , X, Y ) = Ey∼pdata(y)[log DY (y)]
+ Ex∼pdata(x)[log(1 −DY (G(x))],
where G tries to generate images G(x) that look similar to
images from domain Y , while DY aims to distinguish between translated samples G(x) and real samples y. G aims
to minimize this objective against an adversary D that tries
to maximize it, i.e., minG maxDY LGAN(G, DY , X, Y ).
We introduce a similar adversarial loss for the mapping
function F : Y →X and its discriminator DX as well:
i.e., minF maxDX LGAN(F, DX, Y, X).
3.2. Cycle Consistency Loss
Adversarial training can, in theory, learn mappings G
and F that produce outputs identically distributed as target
domains Y and X respectively (strictly speaking, this requires G and F to be stochastic functions) . However,
with large enough capacity, a network can map the same
set of input images to any random permutation of images in
the target domain, where any of the learned mappings can
induce an output distribution that matches the target distribution. Thus, adversarial losses alone cannot guarantee
that the learned function can map an individual input xi to
a desired output yi. To further reduce the space of possible mapping functions, we argue that the learned mapping
1We often omit the subscript i and j for simplicity.
Output 𝐺(𝑥)
Reconstruction F(𝐺𝑥)
Figure 4: The input images x, output images G(x) and the
reconstructed images F(G(x)) from various experiments.
From top to bottom:
photo↔Cezanne, horses↔zebras,
winter→summer Yosemite, aerial photos↔Google maps.
functions should be cycle-consistent: as shown in Figure 3
(b), for each image x from domain X, the image translation
cycle should be able to bring x back to the original image,
i.e., x →G(x) →F(G(x)) ≈x. We call this forward cycle consistency. Similarly, as illustrated in Figure 3 (c), for
each image y from domain Y , G and F should also satisfy
backward cycle consistency: y →F(y) →G(F(y)) ≈y.
We incentivize this behavior using a cycle consistency loss:
Lcyc(G, F) = Ex∼pdata(x)[∥F(G(x)) −x∥1]
+ Ey∼pdata(y)[∥G(F(y)) −y∥1].
In preliminary experiments, we also tried replacing the L1
norm in this loss with an adversarial loss between F(G(x))
and x, and between G(F(y)) and y, but did not observe
improved performance.
The behavior induced by the cycle consistency loss can
be observed in Figure 4: the reconstructed images F(G(x))
end up matching closely to the input images x.
3.3. Full Objective
Our full objective is:
L(G, F, DX, DY ) =LGAN(G, DY , X, Y )
+ LGAN(F, DX, Y, X)
+ λLcyc(G, F),
where λ controls the relative importance of the two objectives. We aim to solve:
G∗, F ∗= arg min
Dx,DY L(G, F, DX, DY ).
Notice that our model can be viewed as training two “autoencoders” : we learn one autoencoder F ◦G : X →
X jointly with another G◦F : Y →Y . However, these autoencoders each have special internal structures: they map
an image to itself via an intermediate representation that
is a translation of the image into another domain. Such a
setup can also be seen as a special case of “adversarial autoencoders” , which use an adversarial loss to train the
bottleneck layer of an autoencoder to match an arbitrary target distribution. In our case, the target distribution for the
X →X autoencoder is that of the domain Y .
In Section 5.1.4, we compare our method against ablations of the full objective, including the adversarial loss
LGAN alone and the cycle consistency loss Lcyc alone, and
empirically show that both objectives play critical roles
in arriving at high-quality results.
We also evaluate our
method with only cycle loss in one direction and show that
a single cycle is not sufﬁcient to regularize the training for
this under-constrained problem.
4. Implementation
Network Architecture
We adopt the architecture for our
generative networks from Johnson et al. who have
shown impressive results for neural style transfer and superresolution. This network contains three convolutions, several residual blocks , two fractionally-strided convolutions with stride 1
2, and one convolution that maps features to RGB. We use 6 blocks for 128 × 128 images and 9
blocks for 256×256 and higher-resolution training images.
Similar to Johnson et al. , we use instance normalization . For the discriminator networks we use 70 × 70
PatchGANs , which aim to classify whether
70 × 70 overlapping image patches are real or fake. Such a
patch-level discriminator architecture has fewer parameters
than a full-image discriminator and can work on arbitrarilysized images in a fully convolutional fashion .
Training details
We apply two techniques from recent
works to stabilize our model training procedure.
for LGAN (Equation 1), we replace the negative log likelihood objective by a least-squares loss . This loss is
more stable during training and generates higher quality
results. In particular, for a GAN loss LGAN(G, D, X, Y ),
we train the G to minimize Ex∼pdata(x)[(D(G(x)) −1)2]
and train the D to minimize Ey∼pdata(y)[(D(y) −1)2] +
Ex∼pdata(x)[D(G(x))2].
Second, to reduce model oscillation , we follow
Shrivastava et al.’s strategy and update the discriminators using a history of generated images rather than the
ones produced by the latest generators. We keep an image
buffer that stores the 50 previously created images.
For all the experiments, we set λ = 10 in Equation 3.
We use the Adam solver with a batch size of 1. All
networks were trained from scratch with a learning rate of
0.0002. We keep the same learning rate for the ﬁrst 100
epochs and linearly decay the rate to zero over the next 100
epochs. Please see the appendix (Section 7) for more details
about the datasets, architectures, and training procedures.
5. Results
We ﬁrst compare our approach against recent methods
for unpaired image-to-image translation on paired datasets
where ground truth input-output pairs are available for evaluation. We then study the importance of both the adversarial loss and the cycle consistency loss and compare our full
method against several variants. Finally, we demonstrate
the generality of our algorithm on a wide range of applications where paired data does not exist. For brevity, we refer
to our method as CycleGAN. The PyTorch and Torch code,
models, and full results can be found at our website.
5.1. Evaluation
Using the same evaluation datasets and metrics as
“pix2pix” , we compare our method against several
baselines both qualitatively and quantitatively. The tasks include semantic labels↔photo on the Cityscapes dataset ,
and map↔aerial photo on data scraped from Google Maps.
We also perform ablation study on the full loss function.
Evaluation Metrics
AMT perceptual studies On the map↔aerial photo
task, we run “real vs fake” perceptual studies on Amazon
Mechanical Turk (AMT) to assess the realism of our outputs. We follow the same perceptual study protocol from
Isola et al. , except we only gather data from 25 participants per algorithm we tested. Participants were shown a
sequence of pairs of images, one a real photo or map and
one fake (generated by our algorithm or a baseline), and
asked to click on the image they thought was real. The ﬁrst
10 trials of each session were practice and feedback was
given as to whether the participant’s response was correct
or incorrect. The remaining 40 trials were used to assess
the rate at which each algorithm fooled participants. Each
session only tested a single algorithm, and participants were
only allowed to complete a single session. The numbers we
report here are not directly comparable to those in as
our ground truth images were processed slightly differently
2 and the participant pool we tested may be differently dis-
2We train all the models on 256 × 256 images while in pix2pix ,
the model was trained on 256 × 256 patches of 512 × 512 images, and
feature loss GAN SimGAN
Ground truth
Figure 5: Different methods for mapping labels↔photos trained on Cityscapes images. From left to right: input, Bi-
GAN/ALI , CoGAN , feature loss + GAN, SimGAN , CycleGAN (ours), pix2pix trained on paired data,
and ground truth.
feature loss GAN SimGAN
Ground truth
Figure 6: Different methods for mapping aerial photos↔maps on Google Maps. From left to right: input, BiGAN/ALI ,
CoGAN , feature loss + GAN, SimGAN , CycleGAN (ours), pix2pix trained on paired data, and ground truth.
tributed from those tested in (due to running the experiment at a different date and time). Therefore, our numbers
should only be used to compare our current method against
the baselines (which were run under identical conditions),
rather than against .
FCN score Although perceptual studies may be the gold
standard for assessing graphical realism, we also seek an
automatic quantitative measure that does not require human
experiments. For this, we adopt the “FCN score” from ,
and use it to evaluate the Cityscapes labels→photo task.
The FCN metric evaluates how interpretable the generated
photos are according to an off-the-shelf semantic segmentation algorithm (the fully-convolutional network, FCN,
from ). The FCN predicts a label map for a generated
photo. This label map can then be compared against the
input ground truth labels using standard semantic segmenrun convolutionally on the 512 × 512 images at test time. We choose
256 × 256 in our experiments as many baselines cannot scale up to highresolution images, and CoGAN cannot be tested fully convolutionally.
tation metrics described below. The intuition is that if we
generate a photo from a label map of “car on the road”,
then we have succeeded if the FCN applied to the generated
photo detects “car on the road”.
Semantic segmentation metrics To evaluate the performance of photo→labels, we use the standard metrics from
the Cityscapes benchmark , including per-pixel accuracy,
per-class accuracy, and mean class Intersection-Over-Union
(Class IOU) .
CoGAN This method learns one GAN generator for
domain X and one for domain Y , with tied weights on the
ﬁrst few layers for shared latent representations. Translation
from X to Y can be achieved by ﬁnding a latent representation that generates image X and then rendering this latent
representation into style Y .
SimGAN Like our method, Shrivastava et al. 
uses an adversarial loss to train a translation from X to Y .
Map →Photo
Photo →Map
% Turkers labeled real
% Turkers labeled real
CoGAN 
0.6% ± 0.5%
0.9% ± 0.5%
BiGAN/ALI 
2.1% ± 1.0%
1.9% ± 0.9%
SimGAN 
0.7% ± 0.5%
2.6% ± 1.1%
Feature loss + GAN
1.2% ± 0.6%
0.3% ± 0.2%
CycleGAN (ours)
26.8% ± 2.8%
23.2% ± 3.4%
Table 1: AMT “real vs fake” test on maps↔aerial photos at
256 × 256 resolution.
Per-pixel acc.
Per-class acc.
CoGAN 
BiGAN/ALI 
SimGAN 
Feature loss + GAN
CycleGAN (ours)
pix2pix 
Table 2: FCN-scores for different methods, evaluated on
Cityscapes labels→photo.
Per-pixel acc.
Per-class acc.
CoGAN 
BiGAN/ALI 
SimGAN 
Feature loss + GAN
CycleGAN (ours)
pix2pix 
Table 3: Classiﬁcation performance of photo→labels for
different methods on cityscapes.
The regularization term ∥x −G(x)∥1 i s used to penalize
making large changes at pixel level.
Feature loss + GAN We also test a variant of Sim-
GAN where the L1 loss is computed over deep
image features using a pretrained network (VGG-16
relu4 2 ), rather than over RGB pixel values. Computing distances in deep feature space, like this, is also
sometimes referred to as using a “perceptual loss” .
BiGAN/ALI Unconditional GANs learn a
generator G : Z →X, that maps a random noise z to an
image x. The BiGAN and ALI propose to also learn
the inverse mapping function F : X →Z. Though they
were originally designed for mapping a latent vector z to an
image x, we implemented the same objective for mapping a
source image x to a target image y.
pix2pix We also compare against pix2pix ,
which is trained on paired data, to see how close we can
get to this “upper bound” without using any paired data.
For a fair comparison, we implement all the baselines
using the same architecture and details as our method, except for CoGAN . CoGAN builds on generators that
produce images from a shared latent representation, which
is incompatible with our image-to-image network. We use
the public implementation of CoGAN instead.
Comparison against baselines
As can be seen in Figure 5 and Figure 6, we were unable to
achieve compelling results with any of the baselines. Our
Per-pixel acc.
Per-class acc.
Cycle alone
GAN + forward cycle
GAN + backward cycle
CycleGAN (ours)
Table 4: Ablation study: FCN-scores for different variants
of our method, evaluated on Cityscapes labels→photo.
Per-pixel acc.
Per-class acc.
Cycle alone
GAN + forward cycle
GAN + backward cycle
CycleGAN (ours)
Ablation study:
classiﬁcation performance of
photo→labels for different losses, evaluated on Cityscapes.
method, on the other hand, can produce translations that are
often of similar quality to the fully supervised pix2pix.
Table 1 reports performance regarding the AMT perceptual realism task.
Here, we see that our method can
fool participants on around a quarter of trials, in both the
maps→aerial photos direction and the aerial photos→maps
direction at 256 × 256 resolution3. All the baselines almost
never fooled participants.
Table 2 assesses the performance of the labels→photo
task on the Cityscapes and Table 3 evaluates the opposite
mapping (photos→labels). In both cases, our method again
outperforms the baselines.
Analysis of the loss function
In Table 4 and Table 5, we compare against ablations
of our full loss.
Removing the GAN loss substantially
degrades results, as does removing the cycle-consistency
We therefore conclude that both terms are critical
to our results. We also evaluate our method with the cycle loss in only one direction: GAN + forward cycle loss
Ex∼pdata(x)[∥F(G(x))−x∥1], or GAN + backward cycle loss
Ey∼pdata(y)[∥G(F(y))−y∥1] (Equation 2) and ﬁnd that it often incurs training instability and causes mode collapse, especially for the direction of the mapping that was removed.
Figure 7 shows several qualitative examples.
Image reconstruction quality
In Figure 4, we show a few random samples of the reconstructed images F(G(x)).
We observed that the reconstructed images were often close to the original inputs x,
at both training and testing time, even in cases where one
domain represents signiﬁcantly more diverse information,
such as map↔aerial photos.
3We also train CycleGAN and pix2pix at 512 × 512 resolution, and
observe the comparable performance: maps→aerial photos: CycleGAN:
37.5% ± 3.6% and pix2pix: 33.9% ± 3.1%; aerial photos→maps: CycleGAN: 16.5% ± 4.1% and pix2pix: 8.5% ± 2.6%
Ground truth
Cycle alone
GAN+forward GAN+backward
Figure 7: Different variants of our method for mapping labels↔photos trained on cityscapes. From left to right: input, cycleconsistency loss alone, adversarial loss alone, GAN + forward cycle-consistency loss (F(G(x)) ≈x), GAN + backward
cycle-consistency loss (G(F(y)) ≈y), CycleGAN (our full method), and ground truth. Both Cycle alone and GAN +
backward fail to produce images similar to the target domain. GAN alone and GAN + forward suffer from mode collapse,
producing identical label maps regardless of the input photo.
label →facade
facade →label
edges →shoes
shoes →edges
Figure 8: Example results of CycleGAN on paired datasets
used in “pix2pix” such as architectural labels↔photos
and edges↔shoes.
Additional results on paired datasets
Figure 8 shows some example results on other paired
datasets used in “pix2pix” , such as architectural
labels↔photos from the CMP Facade Database , and
edges↔shoes from the UT Zappos50K dataset . The
image quality of our results is close to those produced by
the fully supervised pix2pix while our method learns the
mapping without paired supervision.
5.2. Applications
We demonstrate our method on several applications
where paired training data does not exist. Please refer to
the appendix (Section 7) for more details about the datasets.
We observe that translations on training data are often more
appealing than those on test data, and full results of all applications on both training and test data can be viewed on
our project website.
Collection style transfer (Figure 10 and Figure 11)
We train the model on landscape photographs downloaded
from Flickr and WikiArt. Unlike recent work on “neural
style transfer” , our method learns to mimic the style
of an entire collection of artworks, rather than transferring
the style of a single selected piece of art. Therefore, we
can learn to generate photos in the style of, e.g., Van Gogh,
rather than just in the style of Starry Night. The size of the
dataset for each artist/style was 526, 1073, 400, and 563 for
Cezanne, Monet, Van Gogh, and Ukiyo-e.
Object transﬁguration (Figure 13) The model is
trained to translate one object class from ImageNet to
another (each class contains around 1000 training images).
Turmukhambetov et al. propose a subspace model to
translate one object into another object of the same category,
while our method focuses on object transﬁguration between
two visually similar categories.
Season transfer (Figure 13) The model is trained on
854 winter photos and 1273 summer photos of Yosemite
downloaded from Flickr.
Photo generation from paintings (Figure 12) For
painting→photo, we ﬁnd that it is helpful to introduce an
additional loss to encourage the mapping to preserve color
composition between the input and output. In particular, we
adopt the technique of Taigman et al. and regularize the
generator to be near an identity mapping when real samples
of the target domain are provided as the input to the generator: i.e., Lidentity(G, F) = Ey∼pdata(y)[∥G(y) −y∥1] +
Ex∼pdata(x)[∥F(x) −x∥1].
CycleGAN+L"#$%&"&'
Figure 9: The effect of the identity mapping loss on Monet’s
painting→photos. From left to right: input paintings, CycleGAN without identity mapping loss, CycleGAN with
identity mapping loss. The identity mapping loss helps preserve the color of the input paintings.
Without Lidentity, the generator G and F are free to
change the tint of input images when there is no need to.
For example, when learning the mapping between Monet’s
paintings and Flickr photographs, the generator often maps
paintings of daytime to photographs taken during sunset,
because such a mapping may be equally valid under the adversarial loss and cycle consistency loss. The effect of this
identity mapping loss are shown in Figure 9.
In Figure 12, we show additional results translating
Monet’s paintings to photographs. This ﬁgure and Figure 9
show results on paintings that were included in the training set, whereas for all other experiments in the paper, we
only evaluate and show test set results. Because the training
set does not include paired data, coming up with a plausible translation for a training set painting is a nontrivial task.
Indeed, since Monet is no longer able to create new paintings, generalization to unseen, “test set”, paintings is not a
pressing problem.
Photo enhancement (Figure 14) We show that our
method can be used to generate photos with shallower depth
of ﬁeld. We train the model on ﬂower photos downloaded
from Flickr. The source domain consists of ﬂower photos
taken by smartphones, which usually have deep DoF due
to a small aperture. The target contains photos captured by
DSLRs with a larger aperture. Our model successfully generates photos with shallower depth of ﬁeld from the photos
taken by smartphones.
Comparison with Gatys et al. In Figure 15, we
compare our results with neural style transfer on photo
stylization. For each row, we ﬁrst use two representative
artworks as the style images for . Our method, on the
other hand, can produce photos in the style of entire collection. To compare against neural style transfer of an entire
collection, we compute the average Gram Matrix across the
target domain and use this matrix to transfer the “average
style” with Gatys et al .
Figure 16 demonstrates similar comparisons for other
translation tasks. We observe that Gatys et al. requires
ﬁnding target style images that closely match the desired
output, but still often fails to produce photorealistic results,
while our method succeeds to generate natural-looking results, similar to the target domain.
6. Limitations and Discussion
Although our method can achieve compelling results in
many cases, the results are far from uniformly positive. Figure 17 shows several typical failure cases. On translation
tasks that involve color and texture changes, as many of
those reported above, the method often succeeds. We have
also explored tasks that require geometric changes, with little success. For example, on the task of dog→cat transﬁguration, the learned translation degenerates into making minimal changes to the input (Figure 17). This failure might be
caused by our generator architectures which are tailored for
good performance on the appearance changes. Handling
more varied and extreme transformations, especially geometric changes, is an important problem for future work.
Some failure cases are caused by the distribution characteristics of the training datasets. For example, our method
has got confused in the horse →zebra example (Figure 17,
right), because our model was trained on the wild horse and
zebra synsets of ImageNet, which does not contain images
of a person riding a horse or zebra.
We also observe a lingering gap between the results
achievable with paired training data and those achieved by
our unpaired method. In some cases, this gap may be very
hard – or even impossible – to close: for example, our
method sometimes permutes the labels for tree and building in the output of the photos→labels task. Resolving this
ambiguity may require some form of weak semantic supervision. Integrating weak or semi-supervised data may lead
to substantially more powerful translators, still at a fraction
of the annotation cost of the fully-supervised systems.
Nonetheless, in many cases completely unpaired data is
plentifully available and should be made use of. This paper
pushes the boundaries of what is possible in this “unsupervised” setting.
Acknowledgments: We thank Aaron Hertzmann, Shiry
Ginosar, Deepak Pathak, Bryan Russell, Eli Shechtman,
Richard Zhang, and Tinghui Zhou for many helpful comments. This work was supported in part by NSF SMA-
1514512, NSF IIS-1633310, a Google Research Award, Intel Corp, and hardware donations from NVIDIA. JYZ is
supported by the Facebook Graduate Fellowship and TP is
supported by the Samsung Scholarship. The photographs
used for style transfer were taken by AE, mostly in France.
Figure 10: Collection style transfer I: we transfer input images into the artistic styles of Monet, Van Gogh, Cezanne, and
Ukiyo-e. Please see our website for additional examples.
Figure 11: Collection style transfer II: we transfer input images into the artistic styles of Monet, Van Gogh, Cezanne, Ukiyo-e.
Please see our website for additional examples.
Figure 12: Relatively successful results on mapping Monet’s paintings to a photographic style. Please see our website for
additional examples.
horse →zebra
zebra →horse
summer Yosemite →winter Yosemite
apple →orange
orange →apple
winter Yosemite →summer Yosemite
Figure 13: Our method applied to several translation problems. These images are selected as relatively successful results
– please see our website for more comprehensive and random results. In the top two rows, we show results on object
transﬁguration between horses and zebras, trained on 939 images from the wild horse class and 1177 images from the zebra
class in Imagenet . Also check out the horse→zebra demo video. The middle two rows show results on season transfer,
trained on winter and summer photos of Yosemite from Flickr. In the bottom two rows, we train our method on 996 apple
images and 1020 navel orange images from ImageNet.
Figure 14: Photo enhancement: mapping from a set of smartphone snaps to professional DSLR photographs, the system often
learns to produce shallow focus. Here we show some of the most successful results in our test set – average performance is
considerably worse. Please see our website for more comprehensive and random examples.
Gatys et al. (image I)
Gatys et al. (image II) Gatys et al. (collection)
Photo →Van Gogh
Photo →Ukiyo-e
Photo →Cezanne
Figure 15: We compare our method with neural style transfer on photo stylization. Left to right: input image, results
from Gatys et al. using two different representative artworks as style images, results from Gatys et al. using the
entire collection of the artist, and CycleGAN (ours).
Gatys et al. (image I)
Gatys et al. (image II) Gatys et al. (collection)
apple →orange
horse →zebra
Monet →photo
Figure 16:
We compare our method with neural style transfer on various applications.
From top to bottom:
apple→orange, horse→zebra, and Monet→photo. Left to right: input image, results from Gatys et al. using two different
images as style images, results from Gatys et al. using all the images from the target domain, and CycleGAN (ours).
apple →orange
zebra →horse
winter →summer
Monet →photo
photo →Ukiyo-e
photo →Van Gogh
iPhone photo →DSLR photo
horse →zebra
ImageNet “wild horse” training images
Figure 17: Typical failure cases of our method. Left: in the task of dog→cat transﬁguration, CycleGAN can only make
minimal changes to the input. Right: CycleGAN also fails in this horse →zebra example as our model has not seen images
of horseback riding during training. Please see our website for more comprehensive results.