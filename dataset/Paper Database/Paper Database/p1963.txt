Numerical Computation of Diffusion on a Surface
Peter Schwartz∗
David Adalsteinsson†
Phillip Colella∗
Adam Paul Arkin‡
Matthew Onsum§
∗Applied Numerical Algorithms Group
Lawrence Berkeley National Laboratory
Mail Stop 50A-1148
1 Cyclotron Road
Berkeley, CA 94720 USA
† Mathematics Department
University of North Carolina
CB 3250 Phillips Hall
Chapel Hill, NC 27599
§ Bioengineering Department, UC Berkeley and
Physical Biosciences Division,
Lawrence Berkeley National Laboratory
Berkeley, CA 94720 USA
§ Department of Mechanical Engineering
UC Berkeley
Berkeley, CA 94720 USA
classiﬁcation:
Applied Mathematical Sciences
corresponding author:
P. Colella
Applied Numerical Algorithms Group
Lawrence Berkeley National Laboratory
Mail Stop 50A-1148
1 Cyclotron Road
Berkeley, CA 94720 USA
telephone:
1-510–486-5412
1-510-495-2505
 
manuscript information:
total pages:
words in abstract
characters in paper
We present a numerical method for computing diffusive transport on a surface
derived from image data. Our underlying discretization method uses a Cartesian
grid embedded boundary method for computing the volume transport in region
consisting of all points a small distance from the surface. We obtain a representation of this region from image data using a front propagation computation based
on level set methods for solving the Hamilton-Jacobi and eikonal equations. We
demonstrate that the method is second-order accurate in space and time, and is capable of computing solutions on complex surface geometries obtained from image
data of cells.
Introduction
We consider the problem of computing the solution to the diffusion equation on a surface.
= ∆surfCsurf
Csurf : S →R
where S is a surface in R3. Our interest is motivated by problems in systems biology.
Processes such as cellular metabolism, locomotion, and chemotaxis, are mediated in
part by diffusive transport on the membrane, represented by (1). In particular, we want
to be able to compute high-ﬁdelity solutions to these problems, in which the surface is
obtained from image data of actual cells.
Traditional approaches to solving partial differential equations (PDE) on surfaces
have been based either on a global representation of the surface, such as a triangularization, or on local representations, such as with local coordinate representations, stitched
together using techniques such as multiblock or overset grids. In either case, both the
construction of such representations and the design of discretizations of (1) based on
them, have algorithmic difﬁculties and complications beyond those arising when the
domain is a subset of R2. In this paper, we present an approach to this problem that
avoids many of these difﬁculties. It is based on recent developments both in numerical
methods for solving partial differential equations in complex geometries, and in mathematical methods for detecting features in image data. In our approach, we solve the
heat equation on an annular domain consisting of all the points within a small distance
C : Ω(S, ϵ) →R
∂n = 0 on ∂Ω(S, ϵ)
Ω(S, ϵ) = {x : min
x′∈S ||x −x′|| < ϵ}
This problem is solved using a Cartesian grid embedded boundary method , in
which the equation (3) is discretized an any domain in R3 on a ﬁnite volume grid
constructed by intersecting the domain with rectangular grid cells. A representation
of the annular region for which the requisite intersection information is obtained from
image data using the methods in that represent the surface in terms of a solution
to a Hamilton-Jacobi equation. Speciﬁcally, we obtain from this process a function
whose values are the signed distance from the surface, deﬁned in an annular region
around the surface. Using such an implicit function representation for Ω(S, ϵ) it is
routine to compute the required intersection information. In , a similar approach
to the one described here has been used to simulate biomedical ﬂuid ﬂow problems
starting from images derived using the methods in from MRI data. The application
to surface transport both imposes a different set of requirements, and provides some
opportunities for simpliﬁcation.
The idea of solving this problem on a Cartesian mesh discretization on Ω(S, ϵ)
was used previously in . In that case, the PDE being solved was the original surface
equation (1), extended in a natural way to the annular region. Such an approach leads to
complicated difference approximations of the metric terms in the surface derivatives.
In addition, ∆surf is highly degenerate when viewed as an operator on functions in
R3. For example, in the case where S is a plane, any function that depends on the
coordinate direction orthogonal to S is in the null space of ∆surf. This complicates the
construction of implicit time discretizations, that require the solution of linear systems
derived from discretizing ∆surf.
The present approach avoids both these problems. The ﬁnite volume approximations to ∆are relatively simple, and when combined with standard implicit discretizations in time, lead to linear systems that permit the use of efﬁcient iterative methods
such as multigrid. The cost is that the solution to (3) is only an approximation to the
solution to (1). However, we show that the approximation is O(ϵ2). Since ϵ can be
chosen to be a ﬁxed multiple of the mesh spacing, this leads to error that is comparable
to the other discretizations errors in a second-order accurate method.
Thin-Layer Asymptotics
Let S ⊂R3 denote a compact, smooth, orientable surface, with orientation deﬁned by
a unit normal ﬁeld n. Then there exist a ﬁnite collection of smooth maps of the form,
x0 : (0, 1)2 →S
such that union of the range of these maps cover S, and, for ϵ sufﬁciently small, the
extensions
x : (−1, 1) × (0, 1)2 →Ω(S, ϵ)
x(ξ1, ξ2, ξ3) = ϵξ1n(x0(ξ2, ξ3)) + x0(ξ2, ξ3)
have nonsingular Jacobians and ranges whose union covers Ω(S, ϵ).
In that case,
x(ξ1, ξ2, ξ3) is the unique point in Ω(S, ϵ) that is a signed distance ϵξ1 from x0(ξ2, ξ3).
For any smooth coordinate mapping, we have
det(F)∇ξ ·
det(F)F −T F −1∇ξC
For the coordinate mapping (9) this leads to the following form for the diffusion equation (3).
for 1 < i, j ≤3
where ± = + if i = j, ± = −if i ̸= j. We can compute J and aij as functions of ϵ.
J = J0 −ϵξ1H + ϵ2ξ1
ij + ϵξ1Aij + O(ϵ2)
where the quantities J0, a0
ij, H, K and Aij depend only on ξ2, ξ3. In particular, the surface Laplacian ∆surf appearing in (1) can be written in terms of the ξ2, ξ3 coordinate
= ∆surfCsurf
We now show that as ϵ →0, a solution to (3) differs from a solution to (1) by
O(ϵ2). To do this, we expand C in powers of ϵ
equate terms in (11) corresponding to the same power of ϵ. We will further assume
that the derivatives of C with respect to all of the original spatial variables and time
are independent of ϵ, so that no inverse powers of ϵ appear from differentiating with
respect to time or the mapped variables. This will be the case, for example, if the initial
data is independent of ξ1.
First, we note that the homogeneous Neumann boundary condition in (3) becomes
= 0 at ξ1 = ±1
Furthermore, differentiating (16) with respect to ϵ implies that (17) must hold for each
of the C(p) separately. Then we have:
and (17) implies that C(0) is independent of ξ1.
Again, by (17) C(1) is independent of ξ1.
After rearranging terms, and recalling that C(0) and C(1) are independent of ξ1, we
= J0 ∂C(0)
The right-hand side is independent of ξ1, and by (17) it must be identically zero. i.e.,
C(0) satisﬁes (14). In addition, C(2) is independent of ξ1.
Similarly to the case p = 2 we have
= J0 ∂C(1)
+ ξ1G(ξ2, ξ3).
It follows from C(1) being independent of ξ1 and (17) that C(1) satisﬁes (14).
From this argument we see that C(0) + ϵC(1) satisﬁes (14), which implies that C itself
differs from a solution to (14) by O(ϵ2).
Even though the analysis was carried out given speciﬁc assumptions about the initial data, the conclusion appears to be robust relative relaxing the assumptions. In
particular, we continue to observe in our numerical calculations nearly invariant behavior of the solution in the direction normal to the surface for problems with forcing
of equation (1) with a source term; for long-time integration of the equations; and for
initial data that varies in the normal direction. Qualitatively, this is not surprising: diffusion in the normal direction relaxes to a local steady state very rapidly relative to the
time scale for diffusion in the tangential direction.
Embedded Boundary Discretization
The underlying discretization of space is given by rectangular control volumes on a
Cartesian grid: Υi = [ih, (i + u)h], i ∈Z3, h is the mesh spacing, and u is the
vector whose entries are all ones. The geometry is represented by the intersection of
the irregular domain Ωwith the Cartesian grid. We obtain control volumes Vi = Υi∩Ω
and faces Ai± 1
2 ed, which are the intersection of ∂Vi with the coordinate planes {x :
xd = (id + 1
2)h}. Here ed is the unit vector in the d direction. We also deﬁne
i to be the intersection of the boundary of the irregular domain with the Cartesian
control volume: AB
i = ∂Ω∩Υi.
In order to construct ﬁnite difference methods, we will need only a small number
of real-valued quantities that are derived from these geometric objects.
• Areas and volumes are expressed in dimensionless terms: volume fractions κi =
|Vi|h−3, face apertures αi± 1
2 ed = |Ai± 1
2 ed|h−2 and boundary apertures αB
• The locations of centroids, and the average outward normal to the boundary are given
exactly by:
Face centroid: xi+ 1
Boundary face centroid: xB
Outward normal: nB
where nB is the outward normal to ∂Ω, deﬁned for each point on ∂Ω. We assume that
we can compute estimates of these quantities that are accurate to O(h2).
Using just these quantities, we can deﬁne conservative discretizations for the divergence operator. Let ⃗F = (F 1, F 2, F 3) be a function of x. Then
2 edF d(xi± 1
where (22) is obtained by replacing the integrals of the normal components of the vector ﬁeld ⃗F with the values at the face centroids. We obtain the spatial discretization
from replacing F d(xi± 1
2 ed) with difference approximations. Following , we de-
ﬁne the discrete Laplacian
where the ﬂuxes satisfy
(Ci+s+ed −Ci+s)
= F d(xi+ 1
2 ed) + O(h2).
Here the sum over faces and the weights correspond to bilinear interpolation of the
centered difference approximations to the centroid location. Then we solve
dt = (∆hC)i
by discretizing in time using a second-order accurate, L0-stable implicit Runge-Kutta
method . The resulting method provides uniformly second-order accurate solutions
and is amenable to the use of geometric multigrid solvers for solving the resulting
linear systems. This approach can be generalized to include the effect of source terms;
for details, see .
Grid Generation
In order to carry out the numerical procedure outlined in the previous section, it is
necessary to generate the geometric data obtained from intersecting Ω(S, ϵ) with rectangular grid cells, i.e., the areas, volumes, and centroids deﬁned above. In order to do
this, we compute on a Cartesian grid the representation of the domain as an implicit
Ω(S, ϵ) = {x : |ψ(x)| < ϵ}
Given the values of ψ on the grid, it is a routine exercise in quadrature to compute the
intersection information we require to O(h2) accuracy. In this section, we will describe
how we obtain such an implicit function starting from image data.
Typically, we are given image data in the form of intensities G = G(x) evaluated
on a rectangular grid in three dimensions. In this work, the images are given as a
collection of deconvolution microscopy images where each x −y slice contains gray
scale values in the range (ﬁgure 1). The goal of this method is to ﬁnd a surface
that lies along high values of the gradient ∇G, as that indicates a sharp change in
image intensity. Additional requirements need to be imposed, since in a typical image,
the gradient is noisy, and there can be both missing edges due to imaging effects and
multiple possible edges due to internal structures. Following , we can formulate this
problem as a front propagation problem, to be solved using level set methods to solve
the associated Hamilton-Jacobi equation .
ψt + F|∇ψ| + ⃗U · ∇ψ + gκ|∇ψ| = 0
Here the set {x : ψ(x, t) = 0} corresponds to the location of the front at time t, with
the front located initially outside the surface to be detected, and
is the curvature. The functions F and ⃗U are chosen so that the front is attracted to the
maximum value of |∇G|, while g is chosen to constrain the curvature of the front, thus
preventing the front from propagating through small gaps in the image data representation of the surface.
1 + |∇S(G)|
F = αkI , g = γkI , ⃗U = β∇(|∇(S(G))|)
The operator S is a Gaussian smoothing operator, chosen to reduce the noise in the
image data. The parameters α, β, and γ are currently chosen by trial and error, usually
by running the detection code on two-dimensional slices of the data, which takes a
few seconds per run on a workstation (computing a 3D solution typically takes a few
minutes). When the solution to (4) reaches a steady state, we expect the zero set of ψ to
correspond to the outermost surface in the image. In practice, one solves the equations
for a ﬁxed time (e.g. t = 1) and adjusts the parameters α, β, and γ so that a solution
sufﬁciently close to a steady state is obtained. Since we are interested in the solution
only within a small distance of the propagating front, we use the technique in to
perform the calculation only in a narrow band near the front. Finally, we require not
only the location of the front, but that ψ be a distance function deﬁned within an ϵ
distance on either side of the front. We use the method in to compute extensions of
F, gκ and ⃗U away from the zero set at each time step so that the time evolution tends
to preserve the property that the solution satisﬁes the eikonal equation |∇ψ| = 1 and
is therefore a signed distance function. In particular at the end of the calculation we
expect the condition (26) to be satisﬁed. We also post-process the solution by solving
the eikonal equation using the method in to eliminate numerical error in the
signed distance property that may have accumulated in the course of the time evolution.
We show results for two examples. In the ﬁrst, the surface S in a sphere of radius
r0 = .4. In spherical coordinates, the initial data is Csurf(θ, φ, t = 0) = cos(φ), for
which the exact solution is
Csurf(θ, φ, t) = cos(φ)e−2t/r2
We compute the solution on a spherical shell as in (3) for h =
128, with ϵ = 3h.
Since the sphere can be speciﬁed analytically as a signed distance function, this calculation will test only the accuracy of the method for discretizing the diffusion equation.
We advance the solution in time until the accumulated time is 0.1 using a time-step
2 . At the ﬁnal time the magnitude of the solution has decreased by approximately a factor of 4. Figure 2 shows the computed solution on the outer surface of the
sphere. Figure 3 shows the corresponding error, given as the difference between the
computed solution and the exact solution extended to the entire spherical shell to be
constant in the radial direction. Table ?? contains various norms of the error, where the
integral norms (L1 and L2) are computed by computing a consistent approximation to
the integrals over Ω(S, ϵ) divided by 2ϵ. In the limit of vanishing ϵ, these estimates
converge to an estimate of the appropriate integrals over S. The L∞norm is computed
as the maximum over all cells of the absolute value. For all three norms, the method is
seen to be second order accurate. This is consistent with the modiﬁed equation analysis
in .
The second example demonstrates the end-to-end capability. We generate a signed
distance representation of the image in ﬁgure 1, then use it to compute the grid intersection information required to discretize the solution to the diffusion equation in the
annular region. In ﬁgures 4 and 5, the initial condition for this problem was a twovalued function: on a circular patch on the ﬂat underside of the surface we set C = 10;
everywhere else C = 0. The time-step was 5.0 seconds, which is approximately 30
times the maximum time-step for an explicit method on this problem.
There are a number of directions in which we intend to take this work. The diffusion solver described here is the core of a multicompartment model currently under
development for reaction-diffusion processes in cells. Transport in both the membrane
and the cytosol is represented using the embedded boundary approach, with coupling to
chemical reaction terms in both regions, and spatially- and state-dependent ﬂuxes representing transport coupling the membrane and the interior of the cell. We would also
like to extend this approach to other PDE representing mechanical processes on the surface of the cell, including the representation of the membrane as a elastic or viscoelastic medium, coupling the ideas discussed here to the versions of embedded boundary
method for hyperbolic problems described in , extended to moving boundaries following .
Acknowledgments
This work was supported at the Lawrence Berkeley National Laboratory by the U.S Department of Energy: Director, Ofﬁce of Science, Ofﬁce of Advanced Scientiﬁc Computing, Mathematical, Information, and Computing Sciences Division under Contract
DE-AC03-76SF00098; by the DARPA BioComp program, BAA-01-26-0126517; and
by the Howard Hughes Medical Institute. Work at the University of North Carolina
was supported by the DARPA BioComp program under contract number FA8750-05-
1-0118. We would also like to thank Prof. Henry Bourne of the University of California, San Francisco, for the use of his laboratory facilities in obtaining the image data
shown in ﬁgure 1.