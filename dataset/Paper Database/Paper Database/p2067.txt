Fast Linear Iterations for Distributed Averaging ∗
Stephen Boyd
Information Systems Laboratory, Stanford University
Stanford, CA 94305-9510
 , 
Revised February 2004
We consider the problem of ﬁnding a linear iteration that yields distributed averaging consensus over a network, i.e., that asymptotically computes the average of
some initial values given at the nodes. When the iteration is assumed symmetric, the
problem of ﬁnding the fastest converging linear iteration can be cast as a semideﬁnite
program, and therefore eﬃciently and globally solved. These optimal linear iterations
are often substantially faster than several common heuristics that are based on the
Laplacian of the associated graph.
We show how problem structure can be exploited to speed up interior-point methods
for solving the fastest distributed linear iteration problem, for networks with up to a
thousand or so edges. We also describe a simple subgradient method that handles far
larger problems, with up to one hundred thousand edges. We give several extensions
and variations on the basic problem.
distributed consensus, linear system, spectral radius, graph Laplacian,
semideﬁnite programming.
Introduction
We consider a network (connected graph) G = (N, E) consisting of a set of nodes N =
{1, . . . , n} and a set of edges E, where each edge {i, j} ∈E is an unordered pair of distinct
nodes. The set of neighbors of node i is denoted Ni = {j | {i, j} ∈E}.
Each node i holds an initial scalar value xi(0) ∈R, and x(0) = (x1(0), . . . , xn(0)) denotes
the vector of the initial node values on the network. (We can think of xi(0) as the amount of a
certain resource allocated to node i.) The network gives the allowed communication between
nodes: two nodes can communicate with each other if and only if they are neighbors. We are
interested in computing the average of the initial values, (1/n)
i=1 xi(0), via a distributed
∗Accepted for publication in Systems and Control Letters, 2004
algorithm, in which the nodes only communicate with their neighbors. (If we think of the
node values as the amount of a resource, then the average is a fair or uniform allocation of
the resource across the network.)
Distributed averaging can be done in many ways. One straightforward method is ﬂooding.
Each node maintains a table of the initial node values of all the nodes, initialized with its
own node value only. At each step, the nodes exchange information from their own tables
and the tables of their neighbors. After a number of steps equal to the diameter of the
network, every node knows all the initial values of all the nodes, so the average (or any other
function of the initial node values) can be computed.
In this paper, we only consider distributed linear iterations, which have the form
xi(t + 1) = Wiixi(t) +
i = 1, . . . , n,
where t = 0, 1, 2, . . . is the discrete time index, and Wij is the weight on xj at node i. Setting
Wij = 0 for j /∈Ni, this iteration can be written in vector form as
x(t + 1) = Wx(t).
The constraint on the sparsity pattern of the matrix W can be expressed as W ∈S, where
S = {W ∈Rn×n | Wij = 0 if {i, j} /∈E and i ̸= j}.
The distributed averaging problem arises in the context of coordination of networks of
autonomous agents, in particular, the consensus or agreement problem among the agents.
Distributed consensus problems have been studied extensively in the computer science literature (see, e.g., ). Recently it has found a wide range of applications, in areas such as
formation ﬂight of unmanned air vehicles and clustered satellites, and coordination of mobile
robots. The recent paper studies linear and nonlinear consensus protocols in these new
applications with ﬁxed network topology. Related coordination problems with time-varying
topologies have been studied in using a switched linear system model, and in using
set-valued Lyapunov theory.
In previous work, the edge weights used in the linear consensus protocols are either
constant or only dependent on the degrees of their incident nodes. With these simple methods
of choosing edge weights, many concepts and tools from algebraic graph theory (e.g., ),
in particular the Laplacian matrix of the associated graph, appear to be very useful in the
convergence analysis of consensus protocols (see, e.g., and §4 of this paper). The graph
Laplacian has also been used in control of distributed dynamic systems (e.g., ).
This paper is concerned with general conditions on the weight matrix W for the linear
iteration (1) to converge to the average at each node, and how we choose W to make the
convergence as fast as possible.
Fastest distributed linear averaging problem
The linear iteration (1) implies that x(t) = W tx(0) for t = 0, 1, 2, . . . . We want to choose
the weight matrix W so that for any initial value x(0), x(t) converges to the average vector
¯x = (1Tx(0)/n)1 = (11T/n)x(0),
t→∞x(t) = lim
t→∞W tx(0) = 11T
(Here 1 denotes the vector with all coeﬃcients one.) This is equivalent to the matrix equation
t→∞W t = 11T
Assuming this holds, we deﬁne the asymptotic convergence factor as
rasym(W) = sup
Ã ∥x(t) −¯x∥2
∥x(0) −¯x∥2
and the associated convergence time
log(1/rasym),
which gives the (asymptotic) number of steps for the error to decrease by the factor 1/e.
Another measure of the speed of convergence is the per-step convergence factor which is
rstep(W) = sup
∥x(t + 1) −¯x∥2
∥x(t) −¯x∥2
We can also deﬁne the associated convergence time τstep, as in (3).
In this paper we consider the following problem: ﬁnd the weight matrix W ∈S, consistent
with the given network, that makes the convergence as fast as possible. In terms of the
asymptotic convergence factor, this can be posed as the following optimization problem:
subject to
limt→∞W t = 11T/n.
Here W is the optimization variable, and the network is the problem data. A similar optimization problem can be formulated by replacing the objective function rasym(W) with the
per-step convergence factor rstep(W). We call the problem (4) (and in general its variations,
e.g., with the objective function rstep(W), or additional constraints on the weight matrix)
the fastest distributed linear averaging (FDLA) problem.
The FDLA problem (4) is closely related to the problem of ﬁnding the fastest mixing
Markov chain on a graph ; the only diﬀerence in the two problem formulations is that
in the FDLA problem, the weights can be (and the optimal ones often are) negative, hence
faster convergence could be achieved compared with the fastest mixing Markov chain on the
same graph. Despite the similarity in the problem formulations, this paper gives new results
on convergence condtions for the weights without non-negative constraint, considers the
per-step convergence factor, discusses in detail how to exploit structure in an interior-point
method for solving the associated semideﬁnite programms, and introduces several interesting
extensions.
In §2, we give necessary and suﬃcient conditions for a distributed linear iteration to converge
to the average vector, and characterize the asymptotic and per-step convergence factors.
In §3, we formulate the FDLA problem (with asymptotic convergence factor) as a spectral
radius minimization problem, and the FDLA problem, with per-step convergence factor, as a
spectral norm minimization problem. We then show that a variation on the FDLA problem,
in which the weights are assumed to be symmetric, can be formulated as a semideﬁnite program (SDP). We also show how to formulate the FDLA problem, with per-step convergence
factor, as an SDP. In §4, we describe some simple heuristics for the FDLA problem, based on
the graph Laplacian, which at least guarantee convergence. In §5, we give some numerical
examples, and show that the optimal weights often result in substantially faster convergence
than those obtained from the simple heuristics. In §6, we show how to exploit structure in
solving the symmetric FDLA problem (or the per-step FDLA problem) by an interior-point
method, and also give a simple subgradient method that handles large-scale problems. In §7,
we describe several extensions of the FDLA problem.
Convergence conditions
As we have seen, the distributed linear iteration (1) converges to the average, i.e., equation (2) holds, for any initial vector x(0) ∈Rn if and only if
t→∞W t = 11T
We have the following necessary and suﬃcient conditions for this matrix equation to hold.
Theorem 1 The equation (5) holds if and only if
ρ(W −11T/n)
where ρ(·) denotes the spectral radius of a matrix. Moreover,
ρ(W −11T/n),
∥W −11T/n∥2.
(Here ∥· ∥2 denotes the spectral norm, or maximum singular value.)
Before proving the theorem, we ﬁrst give some interpretations.
• Equation (6) states that 1 is a left eigenvector of W associated with the eigenvalue one.
This condition implies that 1Tx(t + 1) = 1Tx(t) for all t, i.e., the sum (and therefore
the average) of the vector of node values is preserved at each step.
• Equation (7) states that 1 is also a right eigenvector of W associated with the eigenvalue
one. This condition means that 1 (or any vector with constant entries) is a ﬁxed point
of the linear iteration (1).
• Together with the ﬁrst two conditions, condition (8) means that one is a simple eigenvalue of W, and that all other eigenvalues are strictly less than one in magnitude.
• If the elements of W are nonnegative, then (6) and (7) state that W is doubly stochastic,
and (8) states that the associated Markov chain is irreducible and aperiodic.
Proof. First we prove suﬃciency. If W satisﬁes conditions (6) and (7), then
W t −11T/n
where in the second equality, we use the fact that I −11T/n is a projection matrix. Now
applying condition (8) leads to the desired convergence (5).
To prove necessity, we use the fact that limt→∞W t exists (such matrices are called semiconvergent) if and only if there is a nonsingular matrix T such that
where Iκ is the κ-dimensional identity matrix (0 ≤κ ≤n) and Z is a convergent matrix,
i.e., ρ(Z) < 1. (This can be derived using the Jordan canonical form; see .) Let
u1, . . . , un be the columns of T and vT
1 , . . . , vT
n be the rows of T −1. Then we have
t→∞W t = lim
Since each uivT
i is a rank-one matrix and their sum
i = TT −1 = I has rank n, the
i must have rank κ. Comparing equations (5) and (12) gives κ = 1 and
1 = 11T/n, which implies that both u1 and v1 are multiples of 1. In other words, one is a
simple eigenvalue of W and 1 is its associated left and right eigenvectors, i.e., equations (6)
and (7) hold. Moreover,
= ρ(Z) < 1,
which is precisely condition (8).
Finally equations (9) and (10) can be derived directly from the error dynamics
x(t + 1) −¯x =
(x(t) −¯x).
In other words, the asymptotic convergence factor rasym is the spectral radius of W −11T/n,
and the per-step convergence factor rstep is its spectral norm.
Fastest distributed linear averaging problems
Using theorem 1, the FDLA problem (4) can be formulated as the following spectral radius
minimization problem:
ρ(W −11T/n)
subject to
with optimization variable W.
Even though the constraints in problem (13) are linear equalities, the problem in general
is very hard. The reason is that the objective function, i.e., the spectral radius of a matrix,
is not a convex function; indeed it is not even Lipschitz continuous (see, e.g., ). Some
related spectral radius minimization problems are NP-hard .
We can also formulate the FDLA problem, with per-step convergence factor, as the
following spectral norm minimization problem:
∥W −11T/n∥2
subject to
In contrast to the spectral radius formulation (13), this problem is convex, and can be solved
eﬃciently and globally.
Now suppose we add the additional constraint that weights are symmetric, i.e., Wij = Wji
for all {i, j} ∈E. In this case the spectral radius minimization problem (13) and the spectral
norm minimization problem (14) coincide (since the spectral norm of a symmetric matrix is
also its spectral radius). In this case, both problems can be cast as
ρ(W −11T/n)
subject to
which is a convex problem. We refer to this problem as the symmetric FDLA problem.
The problem of minimizing the per-step convergence factor, i.e., the spectral norm minimization problem (14), can be expressed as an SDP, by introducing a scalar variable s to
bound the spectral norm ∥W −11T/n∥2, and expressing the norm bound constraint as a
linear matrix inequality (LMI):
subject to
W T −11T/n
Here the symbol ⪰denotes matrix inequality, i.e., X ⪰Y means that X −Y is positive
semideﬁnite. For background on SDP and LMIs, see, e.g., .
Related background on eigenvalue optimization can be found in, e.g., .
Similarly, the symmetric FDLA problem (15) can be expressed as the SDP
subject to
−sI ⪯W −11T/n ⪯sI
with variables s ∈R and W ∈Rn×n.
Heuristics based on the Laplacian
There are some simple heuristics for choosing W ∈S that guarantee convergence of the
distributed linear averaging iteration, and sometimes give reasonably fast convergence. These
heuristics are based on the Laplacian matrix of the associated graph and assign symmetric
edge weights. To describe these heuristics, we ﬁrst need to introduce the incidence matrix
of the graph and an alternative representation of the FDLA problem based on it.
Suppose the graph has m edges, which we label 1, . . . , m. We arbitrarily assign a reference
direction for each edge.
(We will see later that this choice has no eﬀect on the weight
assignment, analysis, or algorithm.) The incidence matrix A ∈Rn×m is deﬁned as
if edge l starts from node i
if edge l ends at node i
otherwise.
The Laplacian matrix of the graph is deﬁned as L = AAT (and does not depend on the choice
of reference directions). The Laplacian matrix is a useful tool in algebraic graph theory, and
its eigenstructure reveals many important properties of the graph (see, e.g., ). We
note for future use that L is positive semideﬁnite, and since our graph is assumed connected,
L has a simple eigenvalue zero, with corresponding eigenvector 1.
We can use the incidence matrix to derive an alternative representation of the symmetric
FDLA problem. Since we consider symmetric weights, each edge l of the graph is associated
with the single weight wl = Wij = Wji, where edge l is incident to nodes i and j, which we
denote l ∼{i, j}. We let w ∈Rm denote the vector of weights on the edges. Using this
notation, the matrix W can be written as
W = I −A diag(w)AT.
The advantage of expressing W in the form (18) is that it automatically satisﬁes the constraints W ∈S, W = W T, and W1 = 1. Therefore the (symmetric) FDLA problem (15)
can be expressed as the unconstrained minimization problem
∥I −A diag(w)AT −11T/n∥2,
with variable w ∈Rm. This representation will also be used in the discussion of computational methods in §6.
Constant edge weights
The simplest approach is to set all the edge weights (for neighboring nodes) equal to a
constant α; the self-weights on the nodes are then chosen to satisfy the condition W1 = 1.
This corresponds to w = α1, and the associated weight matrix
W = I −αAAT = I −αL,
which can be expressed as
otherwise,
where di is the degree of node i (i.e., the number of neighbors of the node i). Distributed
linear averaging with this weight matrix is thus equivalent to the following commonly used
iteration (see, e.g., ):
xi(t + 1) = xi(t) + α
(xj(t) −xi(t)),
i = 1, . . . , n.
Since L is positive semideﬁnite, we must have α > 0 for the convergence condition
ρ(W −11/n) < 1 to hold. From equation (20) we can express the eigenvalues of W in terms
of those of L:
λi(W) = 1 −αλn−i+1(L),
i = 1, . . . , n,
where λi(·) denotes the ith largest eigenvalue of a symmetric matrix. In particular, the
eigenvalue zero of L corresponds to the eigenvalue one of W (i.e., λn(L) = 0, λ1(W) = 1).
The spectral radius of W −11T/n can then be expressed as
ρ(W −11T/n) = max{λ2(W), −λn(W)} = max{1 −αλn−1(L), αλ1(L) −1}.
From this we can determine the range of α over which convergence is obtained: we have
ρ(W −11T/n) < 1 if and only if
The choice of α that minimizes (21) is given by
λ1(L) + λn−1(L).
This gives the best possible constant edge weight.
There are some simple bounds that give choices for α that do not require exact knowledge
of the Laplacian spectrum. For example, we have the following bounds:
λ1(L) ≤max
{i,j}∈E(di + dj),
with equality if and only if the graph is bipartite and semiregular (see, e.g., ). It
follows that distributed linear averaging (with constant edge weight α) converges for α in
max{i,j}∈E(di + dj).
In particular, convergence is guaranteed if α ∈(0, 1/dmax), where dmax is the maximum degree
over the nodes in the network. In fact, convergence is guaranteed using the maximum-degree
provided the graph is not bipartite.
Compared with the optimal weights, the maximum-degree weights often lead to much
slower convergence when there are bottle-neck links in the graph. In , we give an example
of two complete graphs connected by a bridge, where the optimal weight matrix W ⋆can
perform arbitrarily better than the maximum-degree weights, in the sense that the ratio
asym)/(1 −rmd
asym) can be unbounded as n (the number of nodes in the graph) increases.
Local-degree weights
Another simple method is to assign the weight on an edge based on the larger degree of its
two incident nodes:
max{di, dj},
l ∼{i, j}.
We call these weights the local-degree weights, since they depend only on the degrees of
the incident nodes. This method comes from the Metropolis-Hastings algorithm, used to
simulate a Markov chain with uniform equilibrium distribution; see, e.g., . Similar to
the maximum-degree weights, the local-degree weights guarantee convergence provided the
graph is not bipartite.
We ﬁrst consider the small network, with 8 nodes and 17 edges, shown in ﬁgure 1. For
this network, the best constant edge weight, found from (23), is α⋆= 0.227. By solving
the SDP (17), we found the optimal symmetric edge weights, which are labeled in ﬁgure 1.
Note that the optimal symmetric weights for the two middle nodes, and the edge connecting
them, are negative. To say the least, this is not an obvious choice of weights.
The asymptotic convergence factors and convergence times of the four choices of weights
are summarized in table 1. For this example the maximum-degree and local-degree weights
result in the slowest convergence, with the optimal symmetric weights substantially faster
than the best constant weight.
Figure 1: A small graph with 8 nodes and 17 edges. Each edge and node is labeled with the
optimal symmetric weights, which give the minimium asymptotic convergence factor.
maximum-degree
local-degree
best constant
optimal symmetric
ρ(W −11T /n)
τ = 1/ log(1/ρ)
Table 1: Convergence factors/times of diﬀerent weights for the graph in ﬁgure 1.
Figure 2: A randomly generated network with 50 nodes and 200 edges.
A larger network
Next we consider the graph shown in ﬁgure 2, which has 50 nodes and 200 edges. This
graph was randomly generated as follows. First we randomly generate 50 nodes, uniformly
distributed on the unit square. Two nodes are connected by an edge if their distance is less
than a speciﬁed threshold. Then we increase the threshold until the total number of edges
is 200. (The resulting graph is connected).
The asymptotic convergence factors and convergence times, for the four diﬀerent sets of
weights, are summarized in table 2. It can be seen that the convergence with the optimal
symmetric weights is roughly twice as fast as with the best constant edge weight and the
local-degree weights, and is more than three times faster than the maximum-degree weights.
Figure 3 shows the eigenvalue distribution for the four weight matrices. Each of the
distributions has a single eigenvalue at one. The convergence of the maximum-degree method
is determined by its second eigenvalue, although it has a negative eigenvalue. For the local
degree weights, the second eigenvalue is smaller, and the smallest eigenvalue is more negative,
but still not enough to aﬀect the convergence factor. The best constant edge weights always
make ρ(W −11T/n) = λ2(W) = −λn(W), as shown in the ﬁgure. For the optimal symmetric
weights, the eigenvalues (other than 1) have an approximately symmetric distribution, with
many at or near the two critical values ±ρ(W −11T/n). Figure 4 shows the distribution
of the optimal symmetric edge and node weights. It shows that many of the weights are
We also solved problem (16) to ﬁnd the optimal (possibly asymmetric) weights that
minimize the per-step convergence factor; We found that r⋆
step = 0.902, and the solution W ⋆
turned out to be also symmetric (the solution is non-unique). Our computational experience
shows that allowing asymmetric weights usually does not lead to meaningful improvement
of the per-step convergence factor.
maximum-degree
local-degree
best constant
optimal symmetric
ρ(W −11T /n)
τ = 1/ log(1/ρ)
Table 2: Convergence factors/times of diﬀerent weights for the graph in ﬁgure 2.
maximum-degree weights
local-degree weights
best constant edge weight
optimal symmetric weights
Figure 3: Distribution of the eigenvalues of W with four diﬀerent strategies. The dashed
lines indicate ±ρ(W −11T/n).
Figure 4: Distribution of the optimal symmetric edge and node weights, found by solving
the SDP (17). Note that many weights are negative.
Computational methods
Interior-point method
Standard interior-point algorithms for solving SDPs work well for problems with up to a
thousand or so edges (see, e.g., ).
The particular structure of
the SDPs encountered in FDLA problems can be exploited for some gain in eﬃciency, but
problems with more than a few thousand edges are probably beyond the capabilities of
current interior-point SDP solvers.
We consider a simple primal barrier method, with the standard log-determinant barrier
function (see, e.g., [12, chapter 11]); the same techniques can be used to compute the search
directions in other interior-point methods (e.g., primal-dual). In the primal barrier method
(for solving the SDP (17)), at each step we need to compute a Newton step for the problem
of minimizing the function
φ(s, w) = µs −log det(sI + W −11T/n) −log det(sI −W + 11T/n),
where µ > 0 is a parameter and W denotes I −A diag(w)AT. The main eﬀort is in forming
the Hessian matrix H = ∇2φ(s, w), the gradient vector g = ∇φ(s, w), and then computing the Newton step −H−1g. We will show that the Hessian and gradient can be formed
eﬃciently, by exploiting the structure of W, namely,
W = I −A diag(w)AT = I −
wl(ei −ej)(ei −ej)T,
where ei denotes the ith standard unit vector, and al = ei −ej, with l ∼{i, j}, is the lth
column of the incidence matrix A.
We index the entries of the gradient vector from 0 to m, with g0 denoting the derivative
with respect to s. Similarly, we index the rows and columns of the Hessian H from 0 to m,
with index 0 referring to the variable s. Each Newton step can be computed as follows:
1. Compute the matrices
U = (sI + W −11T/n)−1,
V = (sI −W + 11T/n)−1.
Since the matrices to be inverted are positive deﬁnite, they can be computed by dense
Cholesky factorization and back substitution. This costs (5/3)n3 ﬂops per inversion, so
the total cost of this step is (10/3)n3 ﬂops. (Alternatively, we can exploit the structure
of the matrices, which are sparse plus a rank one matrix, to form U and V more
eﬃciently.)
2. Form the gradient and Hessian of φ as follows:
µ −tr U −tr V
l ) −tr(V alaT
(Uii + Ujj −2Uij) −(Vii + Vjj −2Vij),
l ∼{i, j}, l = 1, . . . , m
tr U 2 + tr V 2
l U) + tr(V alaT
(U 2)ii + (U 2)jj −2(U 2)ij
(V 2)ii + (V 2)jj −2(V 2)ij
l ∼{i, j}, l = 1, . . . , m
l′ ) + tr(V alaT
(Uii′ + Ujj′ −Uij′ −Ui′j)2 + (Vii′ + Vjj′ −Vij′ −Vi′j)2
l ∼{i, j}, l′ ∼{i′, j′}, l = 1, . . . , m, l′ = 1, . . . , m.
These formulas are derived using equation (27). The structure exploited here is similar
to the methods used in the dual-scaling algorithm for large-scale combinatorial optimization problems, studied in . The total costs of this step (number of ﬂops) is on
the order of m2 (negligible compared with step 1 and 3).
3. Compute the Newton step −H−1g by Cholesky factorization and back substitution.
The cost of this step is (1/3)m3 ﬂops.
The primal barrier method usually ﬁnds the optimal solution within 20 to 80 Newton
steps, at a cost of (10/3)n3 + (1/3)m3 ﬂops per step.
Subgradient method
We now give a simple subgradient method that can solve the symmetric FDLA problem on a
large-scale graph, with 100000 or more edges. The disadvantage, compared to interior-point
methods, is that this algorithm is relatively slow, and has no simple stopping criterion that
guarantees a certain level of suboptimality.
Again consider the problem (19), repeated here as
r(w) = ∥I −A diag(w)AT −11T/n∥2.
Here r represents rasym or rstep, which are the same for symmetric weight matrices. The
objective function r(w) is a nonsmooth convex function.
A subgradient of r at w is a vector g ∈Rm that satisﬁes the inequality
r( ˜w) ≥r(w) + gT( ˜w −w)
for any vector ˜w ∈Rm. If r is diﬀerentiable at w, then g = ∇r(w) is the only subgradient;
but when r is not diﬀerentiable at w, it can have multiple subgradients. Subgradients play a
key role in convex analysis, and are used in several algorithms for convex optimization (see,
e.g., ).
We can compute a subgradient of r at w as follows.
If r(w) = λ2(W) and u is the
associated unit eigenvector, then a subgradient g is given by
gl = −(ui −uj)2,
l ∼{i, j},
l = 1, . . . , m.
Similarly, if r(w) = λn(W) and v is a unit eigenvector associated with λn(W), then
gl = (vi −vj)2,
l ∼{i, j},
l = 1, . . . , m.
A more detailed derivation of these formulas can be found in . For large sparse symmetric
matrices W, we can compute a few extreme eigenvalues and their corresponding eigenvectors very eﬃciently using Lanczos methods (see, e.g., ). Thus, we can compute a
subgradient of r very eﬃciently.
The subgradient method is very simple:
given a feasible w(1) (e.g., from the maximum-degree or local-degree heuristics)
1. Compute a subgradient g(k) of r at w(k), and set w(k+1) = w(k) −βkg(k)/∥g(k)∥.
2. k := k + 1.
Here the stepsize βk is nonnegative and satisﬁes the diminishing stepsize rule: limk→∞βk = 0
k=1 βk = ∞. The convergence of this algorithm is proved in [40, §2.2]. Some closely
related methods for solving large-scale SDPs and eigenvalue problems are the spectral bundle
method and a prox-method ; see also .
To demonstrate the subgradient method, we apply it to a large-scale network with 10000
nodes and 100000 edges. The graph is generated as follows. First we generate a 10000 by
10000 symmetric matrix R, whose entries Rij, for i ≤j, are independent and uniformly
distributed on the interval . Then we choose a threshold value δ ∈ , and construct
the graph by placing an edge between nodes i and j if Rij ≤δ. We choose δ such that there
are precisely 100000 edges (this graph is connected).
We applied the subgradient method with stepsize βk = 1/(4
k), starting with the localdegree weights, which has convergence factor r = 0.730. Figure 5 shows the progress of the
algorithm, plotting the magnitude of the two extreme eigenvalues λ2 and λn of the matrix W.
After 400 iterations, the algorithm gives a convergence factor r = 0.473, which is a signiﬁcant
reduction compared with the local-degree weights.
iteration number
Figure 5: Progress of the subgradient method for FDLA problem on a large network with
10000 nodes and 100000 edges.
Extensions
In this section we describe several extensions of the basic FDLA problems described above.
Central weights
It is possible to consider criteria other than the asymptotic convergence factor or per-step
factor in the selection of the weight matrix.
Here we describe one simple example: we
deﬁne the central weights as those that result in asymptotic convergence and minimize the
logarithmic barrier function
log det(I −11T/n + W)−1 + log det(I + 11T/n −W)−1.
(The terminology follows control theory; see, e.g., .) In terms of the eigenvalues λi of W,
the central weights minimize the objective
(subject to |λi| < 1, i = 2, . . . , n); in contrast, the fastest converging symmetric weights
minimize the objective function
i∈{2,...,n} |λi| = max{λ2, −λn}.
The weight design problem with objective (28) is an unconstrained smooth convex minimization problem, readily solved using Newton’s method.
Sparse graph design
An interesting variation on the FDLA problem is to ﬁnd a sparse subgraph of the given
graph, while guaranteeing a certain convergence factor. In other words, we seek an edge
weight vector with as many zero entries as possible, subject to a prescribed maximum for the
convergence factor. This is a diﬃcult combinatorial problem, but one very eﬀective heuristic
to achieve this goal is to minimize the ℓ1 norm of the vector of edge weights; see, e.g., [12,
§6] and . For example, given the maximum allowed asymptotic convergence factor rmax,
the ℓ1 heuristic for the sparse graph design problem (with symmetric edge weights) can be
posed as the convex problem
subject to
−rmaxI ⪯I −A diag(w)AT −11T/n ⪯rmaxI.
It is also possible to assign weights to the edges, to achieve (hopefully) some desired sparsity
pattern. More sophisticated heuristics for sparse design and minimum rank problems can be
found in, e.g., .
To demonstrate this idea, we applied the ℓ1 heuristic (29) to the example described
in §5.1. We set the guaranteed convergence factor rmax = 0.910, which is only slightly larger
than the minimum factor 0.902. The resulting edge weight vector is relatively sparse; the
number of edges with non-zero weights is reduced from 200 to 96 1. This is illustrated in
ﬁgure 6. Figure 7 shows the distribution of the edge and node weights for the sparse network,
and should be compared to the distribution shown in ﬁgure 4.
Figure 6: Sparse network design with guaranteed convergence factor 0.910. The dotted lines
show edges that are not used. The number of edges used (i.e., with non-zero edge weights)
is reduced from 200 to 96.
Figure 7: Distribution of edge and node weights found by the ℓ1 heuristic for sparse network
design, with guaranteed convergence factor 0.910.
1In the numerical solution, a weight is considered zero if its magnitude is smaller than 10−3. Actually there
are only 3 weights with magnitude between 10−3 and 10−6, and all remaining 101 weights have magnitudes
less than 10−6. We substituted the sparse weights (ignoring weights with magnitude less than 10−3) back
to compute the corresponding convergence factor, and we got exactly 0.910 as required.
Distributed redistribution
In this section we consider a distributed redistribution problem, which is a generalization of
the distributed averaging problem. Here we are interested in rearranging the scalar values
at the nodes of a network to some desired distribution via distributed linear iterations, while
maintaining a ﬁxed weighted sum of the values at the nodes.
More speciﬁcally, let d ∈Rn be the desired distribution vector and c ∈Rn be a speciﬁed
weight vector. We will assume that cTd ̸= 0. Then we want to ﬁnd the distributed linear
iteration x(t + 1) = Wx(t) such that starting with any x(0) ∈Rn, the vector x(t) converges
to γd, where the constant γ should satisfy cTx(0) = cT(γd), i.e., γ = cTx(0)/(cTd). In other
words, we want to ﬁnd W ∈S such that
t→∞x(t) = lim
t→∞W tx(0) = dcT
for all x(0) ∈Rn. This is equivalent to the matrix equation
t→∞W t = dcT
Similar to Theorem 1, we have the following necessary and suﬃcient conditions for the
convergence of the distributed redistribution:
Theorem 2 Equation (30) holds if and only if
ρ(W −dcT/(cTd)) < 1.
Moreover, we have
rasym(W) = ρ(W −dcT/(cTd)),
rstep(W) = ∥W −dcT/(cTd)∥2.
Similar to the distributed averaging problem, we can formulate the fastest distributed
redistribution problem (minimizing the asymptotic convergence factor) as
ρ(W −dcT/(cTd))
subject to
where W is the optimization variable. As before, this problem is, in the general case, very
hard. If, however, we minimize the spectral norm of W −dcT/(cTd), which gives the per-step
convergence factor, the problem is convex and can be expressed as an SDP similar to (16).
Finally we consider a special case of problem (31) that can be converted into a convex
optimization problem. This special case is motivated by the fastest mixing reversible Markov
chain problem studied in . Speciﬁcally, we assume that
i = 1, . . . , n,
and deﬁne a matrix T and a vector q as follows:
d1/c1, . . . ,
Tc = T −1d =
c1d1, . . . ,
We also restrict the weight matrix W to have the form W = T f
WT −1, where f
W T. Evidently W and f
W have the same eigenvalues, and q is the eigenvector of f
associated with the eigenvalue one.
We formulate a spectral radius minimization problem with the symmetric matrix f
the variable:
subject to
This problem is convex and can be expressed as an SDP similar to (17). For any optimal
solution f
W ⋆to this problem, the matrix W = T f
W ⋆T −1 satisﬁes (30) and has the same
convergence factor, i.e., ρ(W −dcT/(cTd)) = ρ(f
Acknowledgments
The authors are grateful to Persi Diaconis who initiated our research on the fastest mixing
Markov chain problem, which motivated the research in this paper. We also thank Pablo
Parrilo for helpful discussions on exploiting graph symmetry in solving these problems.