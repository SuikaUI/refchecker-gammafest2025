Non-local Neural Networks
Xiaolong Wang1,2∗
Ross Girshick2
Abhinav Gupta1
Kaiming He2
1Carnegie Mellon University
2Facebook AI Research
Both convolutional and recurrent operations are building
blocks that process one local neighborhood at a time. In
this paper, we present non-local operations as a generic
family of building blocks for capturing long-range dependencies. Inspired by the classical non-local means method
 in computer vision, our non-local operation computes
the response at a position as a weighted sum of the features
at all positions. This building block can be plugged into
many computer vision architectures. On the task of video
classiﬁcation, even without any bells and whistles, our nonlocal models can compete or outperform current competition
winners on both Kinetics and Charades datasets. In static
image recognition, our non-local models improve object detection/segmentation and pose estimation on the COCO suite
of tasks. Code is available at 
facebookresearch/video-nonlocal-net.
1. Introduction
Capturing long-range dependencies is of central importance in deep neural networks. For sequential data (e.g.,
in speech, language), recurrent operations are the
dominant solution to long-range dependency modeling. For
image data, long-distance dependencies are modeled by the
large receptive ﬁelds formed by deep stacks of convolutional
operations .
Convolutional and recurrent operations both process a
local neighborhood, either in space or time; thus long-range
dependencies can only be captured when these operations
are applied repeatedly, propagating signals progressively
through the data. Repeating local operations has several
limitations. First, it is computationally inefﬁcient. Second,
it causes optimization difﬁculties that need to be carefully
addressed . Finally, these challenges make multihop dependency modeling, e.g., when messages need to be
delivered back and forth between distant positions, difﬁcult.
In this paper, we present non-local operations as an ef-
ﬁcient, simple, and generic component for capturing longrange dependencies with deep neural networks. Our proposed non-local operation is a generalization of the classical
non-local mean operation in computer vision. Intuitively,
∗Work done during an internship at Facebook AI Research.
Figure 1. A spacetime non-local operation in our network trained
for video classiﬁcation in Kinetics. A position xi’s response is
computed by the weighted average of the features of all positions
xj (only the highest weighted ones are shown here). In this example
computed by our model, note how it relates the ball in the ﬁrst frame
to the ball in the last two frames. More examples are in Figure 3.
a non-local operation computes the response at a position
as a weighted sum of the features at all positions in the input feature maps (Figure 1). The set of positions can be in
space, time, or spacetime, implying that our operations are
applicable for image, sequence, and video problems.
There are several advantages of using non-local operations: (a) In contrast to the progressive behavior of recurrent
and convolutional operations, non-local operations capture
long-range dependencies directly by computing interactions
between any two positions, regardless of their positional distance; (b) As we show in experiments, non-local operations
are efﬁcient and achieve their best results even with only
a few layers (e.g., 5); (c) Finally, our non-local operations
maintain the variable input sizes and can be easily combined
with other operations (e.g., convolutions as we will use).
We showcase the effectiveness of non-local operations in
the application of video classiﬁcation. In videos, long-range
interactions occur between distant pixels in space as well as
time. A single non-local block, which is our basic unit, can
directly capture these spacetime dependencies in a feedforward fashion. With a few non-local blocks, our architecures
called non-local neural networks are more accurate for video
classiﬁcation than 2D and 3D convolutional networks 
(including the inﬂated variant ). In addition, non-local
neural networks are more computationally economical than
their 3D convolutional counterparts. Comprehensive ablation studies are presented on the Kinetics and Charades
 datasets. Using RGB only and without any bells and
whistles (e.g., optical ﬂow, multi-scale testing), our method
achieves results on par with or better than the latest competitions winners on both datasets.
 
To demonstrate the generality of non-local operations,
we further present object detection/segmentation and pose
estimation experiments on the COCO dataset . On top of
the strong Mask R-CNN baseline , our non-local blocks
can increase accuracy on all three tasks at a small extra
computational cost. Together with the evidence on videos,
these image experiments show that non-local operations are
generally useful and can become a basic building block in
designing deep neural networks.
2. Related Work
Non-local image processing. Non-local means is a classical ﬁltering algorithm that computes a weighted mean of
all pixels in an image. It allows distant pixels to contribute to
the ﬁltered response at a location based on patch appearance
similarity. This non-local ﬁltering idea was later developed
into BM3D (block-matching 3D) , which performs ﬁltering on a group of similar, but non-local, patches. BM3D is
a solid image denoising baseline even compared with deep
neural networks . Block matching was used with neural
networks for image denoising . Non-local matching is also the essence of successful texture synthesis ,
super-resolution , and inpainting algorithms.
Graphical models. Long-range dependencies can be modeled by graphical models such as conditional random ﬁelds
(CRF) . In the context of deep neural networks, a
CRF can be exploited to post-process semantic segmentation predictions of a network . The iterative mean-ﬁeld
inference of CRF can be turned into a recurrent network
and trained . In contrast, our method is a
simpler feedforward block for computing non-local ﬁltering.
Unlike these methods that were developed for segmentation,
our general-purpose component is applied for classiﬁcation
and detection. These methods and ours are also related to a
more abstract model called graph neural networks .
Feedforward modeling for sequences. Recently there
emerged a trend of using feedforward (i.e., non-recurrent)
networks for modeling sequences in speech and language
 . In these methods, long-term dependencies
are captured by the large receptive ﬁelds contributed by
very deep 1-D convolutions. These feedforward models are
amenable to parallelized implementations and can be more
efﬁcient than widely used recurrent models.
Self-attention. Our work is related to the recent selfattention method for machine translation.
A selfattention module computes the response at a position in
a sequence (e.g., a sentence) by attending to all positions
and taking their weighted average in an embedding space.
As we will discuss in the next, self-attention can be viewed
as a form of the non-local mean , and in this sense our
work bridges self-attention for machine translation to the
more general class of non-local ﬁltering operations that are
applicable to image and video problems in computer vision.
Interaction networks. Interaction Networks (IN) 
were proposed recently for modeling physical systems. They
operate on graphs of objects involved in pairwise interactions.
Hoshen presented the more efﬁcient Vertex Attention
IN (VAIN) in the context of multi-agent predictive modeling.
Another variant, named Relation Networks , computes a
function on the feature embeddings at all pairs of positions
in its input. Our method also processes all pairs, as we will
explain (f(xi, xj) in Eq.(1)). While our non-local networks
are connected to these approaches, our experiments indicate
that the non-locality of the model, which is orthogonal to
the ideas of attention/interaction/relation (e.g., a network
can attend to a local region), is the key to their empirical
success. Non-local modeling, a long-time crucial element of
image processing (e.g., ), has been largely overlooked
in recent neural networks for computer vision.
Video classiﬁcation architectures. A natural solution to
video classiﬁcation is to combine the success of CNNs for
images and RNNs for sequences . In contrast, feedforward models are achieved by 3D convolutions (C3D)
 in spacetime, and the 3D ﬁlters can be formed by
“inﬂating” pre-trained 2D ﬁlters. In addition to endto-end modeling on raw video inputs, it has been found that
optical ﬂow and trajectories can be helpful.
Both ﬂow and trajectories are off-the-shelf modules that
may ﬁnd long-range, non-local dependency. A systematic
comparison of video architectures can be found in .
3. Non-local Neural Networks
We ﬁrst give a general deﬁnition of non-local operations
and then we provide several speciﬁc instantiations of it.
3.1. Formulation
Following the non-local mean operation , we deﬁne a
generic non-local operation in deep neural networks as:
f(xi, xj)g(xj).
Here i is the index of an output position (in space, time, or
spacetime) whose response is to be computed and j is the
index that enumerates all possible positions. x is the input
signal (image, sequence, video; often their features) and y
is the output signal of the same size as x. A pairwise function f computes a scalar (representing relationship such as
afﬁnity) between i and all j. The unary function g computes
a representation of the input signal at the position j. The
response is normalized by a factor C(x).
The non-local behavior in Eq.(1) is due to the fact that
all positions (∀j) are considered in the operation. As a
comparison, a convolutional operation sums up the weighted
input in a local neighborhood (e.g., i −1 ≤j ≤i + 1 in a
1D case with kernel size 3), and a recurrent operation at time
i is often based only on the current and the latest time steps
(e.g., j = i or i −1).
The non-local operation is also different from a fullyconnected (fc) layer. Eq.(1) computes responses based on
relationships between different locations, whereas fc uses
learned weights. In other words, the relationship between xj
and xi is not a function of the input data in fc, unlike in nonlocal layers. Furthermore, our formulation in Eq.(1) supports
inputs of variable sizes, and maintains the corresponding
size in the output. On the contrary, an fc layer requires a
ﬁxed-size input/output and loses positional correspondence
(e.g., that from xi to yi at the position i).
A non-local operation is a ﬂexible building block and can
be easily used together with convolutional/recurrent layers.
It can be added into the earlier part of deep neural networks,
unlike fc layers that are often used in the end. This allows us
to build a richer hierarchy that combines both non-local and
local information.
3.2. Instantiations
Next we describe several versions of f and g. Interestingly, we will show by experiments (Table 2a) that our nonlocal models are not sensitive to these choices, indicating
that the generic non-local behavior is the main reason for the
observed improvements.
For simplicity, we only consider g in the form of a linear
embedding: g(xj) = Wgxj, where Wg is a weight matrix
to be learned. This is implemented as, e.g., 1×1 convolution
in space or 1×1×1 convolution in spacetime.
Next we discuss choices for the pairwise function f.
Gaussian. Following the non-local mean and bilateral
ﬁlters , a natural choice of f is the Gaussian function. In
this paper we consider:
f(xi, xj) = exT
i xj is dot-product similarity. Euclidean distance as
used in is also applicable, but dot product is more
implementation-friendly in modern deep learning platforms.
The normalization factor is set as C(x) = P
∀j f(xi, xj).
Embedded Gaussian. A simple extension of the Gaussian
function is to compute similarity in an embedding space. In
this paper we consider:
f(xi, xj) = eθ(xi)T φ(xj).
Here θ(xi) = Wθxi and φ(xj) = Wφxj are two embeddings. As above, we set C(x) = P
∀j f(xi, xj).
We note that the self-attention module recently presented for machine translation is a special case of non-local
operations in the embedded Gaussian version. This can be
seen from the fact that for a given i,
C(x)f(xi, xj) becomes
the softmax computation along the dimension j. So we have
T×H×W×1024
T×H×W×1024
Figure 2. A spacetime non-local block. The feature maps are
shown as the shape of their tensors, e.g., T×H×W×1024 for
1024 channels (proper reshaping is performed when noted). “⊗”
denotes matrix multiplication, and “⊕” denotes element-wise sum.
The softmax operation is performed on each row. The blue boxes denote 1×1×1 convolutions. Here we show the embedded Gaussian
version, with a bottleneck of 512 channels. The vanilla Gaussian
version can be done by removing θ and φ, and the dot-product
version can be done by replacing softmax with scaling by 1/N.
y = softmax(xT W T
θ Wφx)g(x), which is the self-attention
form in . As such, our work provides insight by relating
this recent self-attention model to the classic computer vision
method of non-local means , and extends the sequential
self-attention network in to a generic space/spacetime
non-local network for image/video recognition in computer
Despite the relation to , we show that the attentional
behavior (due to softmax) is not essential in the applications
we study. To show this, we describe two alternative versions
of non-local operations next.
Dot product. f can be deﬁned as a dot-product similarity:
f(xi, xj) = θ(xi)T φ(xj).
Here we adopt the embedded version. In this case, we set the
normalization factor as C(x) = N, where N is the number of
positions in x, rather than the sum of f, because it simpliﬁes
gradient computation. A normalization like this is necessary
because the input can have variable size.
The main difference between the dot product and embedded Gaussian versions is the presence of softmax, which
plays the role of an activation function.
Concatenation. Concatenation is used by the pairwise function in Relation Networks for visual reasoning. We also
evaluate a concatenation form of f:
f(xi, xj) = ReLU(wT
f [θ(xi), φ(xj)]).
Here [·, ·] denotes concatenation and wf is a weight vector
that projects the concatenated vector to a scalar. As above,
we set C(x) = N. In this case, we adopt ReLU in f.
The above several variants demonstrate the ﬂexibility
of our generic non-local operation. We believe alternative
versions are possible and may improve results.
3.3. Non-local Block
We wrap the non-local operation in Eq.(1) into a non-local
block that can be incorporated into many existing architectures. We deﬁne a non-local block as:
zi = Wzyi + xi,
where yi is given in Eq.(1) and “+xi” denotes a residual
connection . The residual connection allows us to insert
a new non-local block into any pre-trained model, without
breaking its initial behavior (e.g., if Wz is initialized as zero).
An example non-local block is illustrated in Figure 2. The
pairwise computation in Eq.(2), (3), or (4) can be simply
done by matrix multiplication as shown in Figure 2; the
concatenation version in (5) is straightforward.
The pairwise computation of a non-local block is
lightweight when it is used in high-level, sub-sampled feature maps. For example, typical values in Figure 2 are
T = 4, H = W = 14 or 7. The pairwise computation
as done by matrix multiplication is comparable to a typical
convolutional layer in standard networks. We further adopt
the following implementations that make it more efﬁcient.
Implementation of Non-local Blocks. We set the number
of channels represented by Wg, Wθ, and Wφ to be half of
the number of channels in x. This follows the bottleneck
design of and reduces the computation of a block by
about a half. The weight matrix Wz in Eq.(6) computes a
position-wise embedding on yi, matching the number of
channels to that of x. See Figure 2.
A subsampling trick can be used to further reduce computation.
We modify Eq.(1) as:
∀j f(xi, ˆxj)g(ˆxj), where ˆx is a subsampled version
of x (e.g., by pooling). We perform this in the spatial domain, which can reduce the amount of pairwise computation
by 1/4. This trick does not alter the non-local behavior, but
only makes the computation sparser. This can be done by
adding a max pooling layer after φ and g in Figure 2.
We use these efﬁcient modiﬁcations for all non-local
blocks studied in this paper.
4. Video Classiﬁcation Models
To understand the behavior of non-local networks, we
conduct comprehensive ablation experiments on video classiﬁcation tasks. First we describe our baseline network architectures for this task, and then extend them into 3D ConvNets
 and our proposed non-local nets.
2D ConvNet baseline (C2D). To isolate the temporal effects of our non-local nets vs. 3D ConvNets, we construct
output size
7×7, 64, stride 2, 2, 2
16×112×112
3×3×3 max, stride 2, 2, 2
3×1×1 max, stride 2, 1, 1
global average pool, fc
Table 1. Our baseline ResNet-50 C2D model for video. The dimensions of 3D output maps and ﬁlter kernels are in T×H×W (2D
kernels in H×W), with the number of channels following. The
input is 32×224×224. Residual blocks are shown in brackets.
a simple 2D baseline architecture in which the temporal
dimension is trivially addressed (i.e., only by pooling).
Table 1 shows our C2D baseline under a ResNet-50 backbone. The input video clip has 32 frames each with 224×224
pixels. All convolutions in Table 1 are in essence 2D kernels that process the input frame-by-frame (implemented as
1×k×k kernels). This model can be directly initialized from
the ResNet weights pre-trained on ImageNet. A ResNet-101
counterpart is built in the same way.
The only operation involving the temporal domain are
the pooling layers. In other words, this baseline simply
aggregates temporal information.
Inﬂated 3D ConvNet (I3D). As done in , one can
turn the C2D model in Table 1 into a 3D convolutional
counterpart by “inﬂating” the kernels. For example, a 2D
k×k kernel can be inﬂated as a 3D t×k×k kernel that spans
t frames. This kernel can be initialized from 2D models (pretrained on ImageNet): each of the t planes in the t×k×k
kernel is initialized by the pre-trained k×k weights, rescaled
by 1/t. If a video consists of a single static frame repeated
in time, this initialization produces the same results as the
2D pre-trained model run on a static frame.
We study two cases of inﬂations: we either inﬂate the
3×3 kernel in a residual block to 3×3×3 (similar to ), or
the ﬁrst 1×1 kernel in a residual block to 3×1×1 (similar to
 ). We denote these as I3D3×3×3 and I3D3×1×1. As 3D
convolutions are computationally intensive, we only inﬂate
one kernel for every 2 residual blocks; inﬂating more layers
shows diminishing return. We inﬂate conv1 to 5×7×7.
The authors of have shown that I3D models are more
accurate than their CNN+LSTM counterparts.
Non-local network. We insert non-local blocks into C2D or
I3D to turn them into non-local nets. We investigate adding
1, 5, or 10 non-local blocks; the implementation details are
described in the next section in context.
Figure 3. Examples of the behavior of a non-local block in res3 computed by a 5-block non-local model trained on Kinetics. These examples
are from held-out validation videos. The starting point of arrows represents one xi, and the ending points represent xj. The 20 highest
weighted arrows for each xi are visualized. The 4 frames are from a 32-frame input, shown with a stride of 8 frames. These visualizations
show how the model ﬁnds related clues to support its prediction.
4.1. Implementation Details
Training. Our models are pre-trained on ImageNet .
Unless speciﬁed, we ﬁne-tune our models using 32-frame
input clips. These clips are formed by randomly cropping out
64 consecutive frames from the original full-length video and
then dropping every other frame. The spatial size is 224×224
pixels, randomly cropped from a scaled video whose shorter
side is randomly sampled in pixels, following .
We train on an 8-GPU machine and each GPU has 8 clips in a
mini-batch (so in total with a mini-batch size of 64 clips). We
train our models for 400k iterations in total, starting with a
learning rate of 0.01 and reducing it by a factor of 10 at every
150k iterations (see also Figure 4). We use a momentum
of 0.9 and a weight decay of 0.0001. We adopt dropout
 after the global pooling layer, with a dropout ratio of
0.5. We ﬁne-tune our models with BatchNorm (BN) 
enabled when it is applied. This is in contrast to common
practice of ﬁne-tuning ResNets, where BN was frozen.
We have found that enabling BN in our application reduces
overﬁtting.
We adopt the method in to initialize the weight layers
introduced in the non-local blocks. We add a BN layer right
after the last 1×1×1 layer that represents Wz; we do not add
BN to other layers in a non-local block. The scale parameter
of this BN layer is initialized as zero, following . This
ensures that the initial state of the entire non-local block is an
identity mapping, so it can be inserted into any pre-trained
networks while maintaining its initial behavior.
Inference. Following we perform spatially fullyconvolutional inference on videos whose shorter side is
rescaled to 256. For the temporal domain, in our practice we
sample 10 clips evenly from a full-length video and compute
the softmax scores on them individually. The ﬁnal prediction
is the averaged softmax scores of all clips.
5. Experiments on Video Classiﬁcation
We perform comprehensive studies on the challenging
Kinetics dataset . We also report results on the Charades
dataset to show the generality of our models.
5.1. Experiments on Kinetics
Kinetics contains ∼246k training videos and 20k
validation videos. It is a classiﬁcation task involving 400
human action categories. We train all models on the training
set and test on the validation set.
model, R50
C2D baseline
Gaussian, embed
dot-product
concatenation
(a) Instantiations: 1 non-local block
of different types is added into the C2D
baseline. All entries are with ResNet-
model, R50
(b) Stages: 1 non-local block is
added into different stages. All
entries are with ResNet-50.
(c) Deeper non-local models: we
compare 1, 5, and 10 non-local blocks
added to the C2D baseline. We show
ResNet-50 (top) and ResNet-101 (bottom) results.
space-only
space-only
(d) Space vs. time vs. spacetime: we
compare non-local operations applied
along space, time, and spacetime dimensions respectively. 5 non-local blocks
model, R101
params FLOPs
C2D baseline
NL C2D, 5-block
(e) Non-local vs. 3D Conv: A 5-block non-local C2D
vs. inﬂated 3D ConvNet (I3D) . All entries are with
ResNet-101. The numbers of parameters and FLOPs are
relative to the C2D baseline (43.2M and 34.2B).
C2D baseline
C2D baseline
(f) Non-local 3D ConvNet:
5 non-local
blocks are added on top of our best I3D models. These results show that non-local operations are complementary to 3D convolutions.
C2D baseline
C2D baseline
(g) Longer clips: we ﬁne-tune and test the
models in Table 2f on the 128-frame clips.
The gains of our non-local operations are consistent.
Table 2. Ablations on Kinetics action classiﬁcation. We show top-1 and top-5 classiﬁcation accuracy (%).
iterations (K)
C2D baseline (train)
C2D baseline (val)
NL C2D, 5-block (train)
NL C2D, 5-block (val)
Figure 4. Curves of the training procedure on Kinetics for the
ResNet-50 C2D baseline (blue) vs. non-local C2D with 5 blocks
(red). We show the top-1 training error (dash) and validation error
(solid). The validation error is computed in the same way as the
training error (so it is 1-clip testing with the same random jittering
at training time); the ﬁnal results are in Table 2c (R50, 5-block).
Figure 4 shows the curves of the training procedure of a
ResNet-50 C2D baseline vs. a non-local C2D with 5 blocks
(more details in the following). Our non-local C2D model
is consistently better than the C2D baseline throughout the
training procedure, in both training and validation error.
Figure 1 and Figure 3 visualize several examples of the
behavior of a non-local block computed by our models. Our
network can learn to ﬁnd meaningful relational clues regardless of the distance in space and time.
Table 2 shows the ablation results, analyzed as follows:
Instantiations. Table 2a compares different types of a single non-local block added to the C2D baseline (right before
the last residual block of res4). Even adding one non-local
block can lead to ∼1% improvement over the baseline.
Interestingly, the embedded Gaussian, dot-product, and
concatenation versions perform similarly, up to some random
variations (72.7 to 72.9). As discussed in Sec. 3.2, the nonlocal operations with Gaussian kernels become similar to the
self-attention module . However, our experiments show
that the attentional (softmax) behavior of this module is not
the key to the improvement in our applications; instead, it is
more likely that the non-local behavior is important, and it
is insensitive to the instantiations.
In the rest of this paper, we use the embedded Gaussian
version by default. This version is easier to visualize as its
softmax scores are in the range of .
Which stage to add non-local blocks? Table 2b compares
a single non-local block added to different stages of ResNet.
The block is added to right before the last residual block of a
stage. The improvement of a non-local block on res2, res3, or
res4 is similar, and on res5 is slightly smaller. One possible
explanation is that res5 has a small spatial size (7×7) and it
is insufﬁcient to provide precise spatial information. More
evidence of a non-local block exploiting spatial information
will be investigated in Table 2d.
top-1 test
top-5 test
I3D in 
2-Stream I3D in 
RGB baseline in 
Inception-ResNet-v2
3-stream late fusion 
Inception-ResNet-v2
RGB + ﬂow + audio
3-stream LSTM 
Inception-ResNet-v2
RGB + ﬂow + audio
3-stream SATT 
Inception-ResNet-v2
RGB + ﬂow + audio
NL I3D [ours]
ResNet-101
Table 3. Comparisons with state-of-the-art results in Kinetics, reported on the val and test sets. We include the Kinetics 2017 competition
winner’s results , but their best results exploited audio signals (marked in gray) so were not vision-only solutions. †: “avg” is the average
of top-1 and top-5 accuracy; individual top-1 or top-5 numbers are not available from the test server at the time of submitting this manuscript.
Going deeper with non-local blocks. Table 2c shows the
results of more non-local blocks. We add 1 block (to res4), 5
blocks (3 to res4 and 2 to res3, to every other residual block),
and 10 blocks (to every residual block in res3 and res4) in
ResNet-50; in ResNet-101 we add them to the corresponding
residual blocks. Table 2c shows that more non-local blocks
in general lead to better results. We argue that multiple
non-local blocks can perform long-range multi-hop communication. Messages can be delivered back and forth between
distant positions in spacetime, which is hard to do via local
It is noteworthy that the improvement of non-local blocks
is not just because they add depth to the baseline model.
To see this, we note that in Table 2c the non-local 5-block
ResNet-50 model has 73.8 accuracy, higher than the deeper
ResNet-101 baseline’s 73.1. However, the 5-block ResNet-
50 has only ∼70% parameters and ∼80% FLOPs of the
ResNet-101 baseline, and is also shallower. This comparison shows that the improvement due to non-local blocks is
complementary to going deeper in standard ways.
We have also tried to add standard residual blocks, instead
of non-local blocks, to the baseline models. The accuracy
is not increased. This again shows that the improvement of
non-local blocks is not just because they add depth.
Non-local in spacetime. Our method can naturally handle
spacetime signals. This is a nice property: related objects
in a video can present at distant space and long-term time
interval, and their dependency can be captured by our model.
In Table 2d we study the effect of non-local blocks applied
along space, time, or spacetime. For example, in the spaceonly version, the non-local dependency only happens within
the same frame: i.e., in Eq.(1) it only sums over the index j
in the same frame of the index i. The time-only version can
be set up similarly. Table 2d shows that both the space-only
and time-only versions improve over the C2D baseline, but
are inferior to the spacetime version.
Non-local net vs. 3D ConvNet. Table 2e compares our nonlocal C2D version with the inﬂated 3D ConvNets. Non-local
operations and 3D convolutions can be seen as two ways of
extending C2D to the temporal dimensions.
Table 2e also compares the number of parameters and
FLOPs, relative to the baseline. Our non-local C2D model
is more accurate than the I3D counterpart (e.g., 75.1 vs.
74.4), while having a smaller number of FLOPs (1.2× vs.
1.5×). This comparison shows that our method can be more
effective than 3D convolutions when used alone.
Non-local 3D ConvNet. Despite the above comparison,
non-local operations and 3D convolutions can model different aspects of the problem: 3D convolutions can capture
local dependency. Table 2f shows the results of inserting 5
non-local blocks into the I3D3×1×1 models. These non-local
I3D (NL I3D) models improve over their I3D counterparts
(+1.6 point accuracy), showing that non-local operations and
3D convolutions are complementary.
Longer sequences. Finally we investigate the generality
of our models on longer input videos. We use input clips
consisting of 128 consecutive frames without subsampling.
The sequences throughout all layers in the networks are thus
4× longer compared to the 32-frame counterparts. To ﬁt
this model into memory, we reduce the mini-batch size to 2
clips per GPU. As a result of using small mini-batches, we
freeze all BN layers in this case. We initialize this model
from the corresponding models trained with 32-frame inputs.
We ﬁne-tune on 128-frame inputs using the same number of
iterations as the 32-frame case (though the mini-batch size is
now smaller), starting with a learning rate of 0.0025. Other
implementation details are the same as before.
Table 2g shows the results of 128-frame clips. Comparing
with the 32-frame counterparts in Table 2f, all models have
better results on longer inputs. We also ﬁnd that our NL I3D
can maintain its gain over the I3D counterparts, showing that
our models work well on longer sequences.
Comparisons with state-of-the-art results. Table 3 shows
the results from the I3D authors and from the Kinetics
2017 competition winner . We note that these are comparisons of systems which can differ in many aspects. Nevertheless, our method surpasses all the existing RGB or RGB +
ﬂow based methods by a good margin. Without using optical
ﬂow and without any bells and whistles, our method is on par
with the heavily engineered results of the 2017 competition
trainval/test
2-Stream 
2-Stream +LSTM 
Asyn-TF 
I3D [ours]
NL I3D [ours]
Table 4. Classiﬁcation mAP (%) in the Charades dataset , on
the train/val split and the trainval/test split. Our results are based
on ResNet-101. Our NL I3D uses 5 non-local blocks.
5.2. Experiments on Charades
Charades is a video dataset with ∼8k training, ∼1.8k
validation, and ∼2k testing videos. It is a multi-label classiﬁcation task with 157 action categories. We use a per-category
sigmoid output to handle the multi-label property.
We initialize our models pre-trained on Kinetics (128frame). The mini-batch size is set to 1 clip per GPU. We train
our models for 200k iterations, starting from a learning rate
of 0.00125 and reducing it by 10 every 75k iterations. We use
a jittering strategy similar to that in Kinetics to determine the
location of the 224×224 cropping window, but we rescale
the video such that this cropping window outputs 288×288
pixels, on which we ﬁne-tune our network. We test on a
single scale of 320 pixels.
Table 4 shows the comparisons with the previous results
on Charades. The result of is the 2017 competition
winner in Charades, which was also ﬁne-tuned from models
pre-trained in Kinetics. Our I3D baseline is higher than
previous results. As a controlled comparison, our non-local
net improves over our I3D baseline by 2.3% on the test set.
6. Extension: Experiments on COCO
We also investigate our models on static image recognition. We experiment on the Mask R-CNN baseline 
for COCO object detection/segmentation and human
pose estimation (keypoint detection). The models are trained
on COCO train2017 and
tested on val2017 .
Object detection and instance segmentation. We modify
the Mask R-CNN backbone by adding one non-local block
(right before the last residual block of res4). All models
are ﬁne-tuned from ImageNet pre-training. We evaluate on
a standard baseline of ResNet-50/101 and a high baseline
of ResNeXt-152 (X152) . Unlike the original paper
 that adopted stage-wise training regarding RPN, we use
an improved implementation with end-to-end joint training
similar to , which leads to higher baselines than .
Table 5 shows the box and mask AP on COCO. We see
that a single non-local block improves all R50/101 and X152
baselines, on all metrics involving detection and segmentation. APbox is increased by ∼1 point in all cases (e.g., +1.3
point in R101). Our non-local block is complementary to
increasing the model capacity, even when the model is upmethod
APmask APmask
R101 baseline
X152 baseline
Table 5. Adding 1 non-local block to Mask R-CNN for COCO
object detection and instance segmentation. The backbone is
ResNet-50/101 or ResNeXt-152 , both with FPN .
R101 baseline
NL, +4 in head
NL, +4 in head, +1 in backbone
Table 6. Adding non-local blocks to Mask R-CNN for COCO
keypoint detection. The backbone is ResNet-101 with FPN .
graded from R50/101 to X152. This comparison suggests
that non-local dependency has not been sufﬁciently captured
by existing models despite increased depth/capacity.
In addition, the above gain is at a very small cost. The
single non-local block only adds <5% computation to the
baseline model. We also have tried to use more non-local
blocks to the backbone, but found diminishing return.
Keypoint detection. Next we evaluate non-local blocks in
Mask R-CNN for keypoint detection. In , Mask R-CNN
used a stack of 8 convolutional layers for predicting the
keypoints as 1-hot masks. These layers are local operations
and may overlook the dependency among keypoints across
long distance. Motivated by this, we insert 4 non-local blocks
into the keypoint head (after every 2 convolutional layers).
Table 6 shows the results on COCO. On a strong baseline
of R101, adding 4 non-local blocks to the keypoint head
leads to a ∼1 point increase of keypoint AP. If we add one
extra non-local block to the backbone as done for object
detection, we observe an in total 1.4 points increase of keypoint AP over the baseline. In particular, we see that the
stricter criterion of AP75 is boosted by 2.4 points, suggesting
a stronger localization performance.
7. Conclusion
We presented a new class of neural networks which capture long-range dependencies via non-local operations. Our
non-local blocks can be combined with any existing architectures. We show the signiﬁcance of non-local modeling
for the tasks of video classiﬁcation, object detection and
segmentation, and pose estimation. On all tasks, a simple
addition of non-local blocks provides solid improvement
over baselines. We hope non-local layers will become an
important component of future network architectures.
Acknowledgement: This work was partially supported by ONR MURI
N000141612007, Sloan, Okawa Fellowship to AG and NVIDIA Fellowship
to XW. We would also like to thank Haoqi Fan, Du Tran, Heng Wang,
Georgia Gkioxari and Piotr Dollar for many helpful discussions.