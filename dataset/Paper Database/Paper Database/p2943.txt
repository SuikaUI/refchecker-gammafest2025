Product-based Neural Networks for User Response
Prediction
Yanru Qu, Han Cai, Kan Ren, Weinan Zhang, Yong Yu
Shanghai Jiao Tong University
{kevinqu, hcai, kren, wnzhang, yyu}@apex.sjtu.edu.cn
Ying Wen, Jun Wang
University College London
{ying.wen, j.wang}@cs.ucl.ac.uk
Abstract—Predicting user responses, such as clicks and conversions, is of great importance and has found its usage in
many Web applications including recommender systems, web
search and online advertising. The data in those applications
is mostly categorical and contains multiple ﬁelds; a typical
representation is to transform it into a high-dimensional sparse
binary feature representation via one-hot encoding. Facing with
the extreme sparsity, traditional models may limit their capacity
of mining shallow patterns from the data, i.e. low-order feature
combinations. Deep models like deep neural networks, on the
other hand, cannot be directly applied for the high-dimensional
input because of the huge feature space. In this paper, we propose
a Product-based Neural Networks (PNN) with an embedding
layer to learn a distributed representation of the categorical data,
a product layer to capture interactive patterns between inter-
ﬁeld categories, and further fully connected layers to explore
high-order feature interactions. Our experimental results on two
large-scale real-world ad click datasets demonstrate that PNNs
consistently outperform the state-of-the-art models on various
I. INTRODUCTION
Learning and predicting user response now plays a crucial
role in many personalization tasks in information retrieval
(IR), such as recommender systems, web search and online
advertising. The goal of user response prediction is to estimate
the probability that the user will provide a predeﬁned positive
response, e.g. clicks, purchases etc., in a given context .
This predicted probability indicates the user’s interest on the
speciﬁc item such as a news article, a commercial item or
an advertising post, which inﬂuences the subsequent decision
making such as document ranking and ad bidding .
The data collection in these IR tasks is mostly in a multi-
ﬁeld categorical form, for example, [Weekday=Tuesday,
Gender=Male, City=London], which is normally transformed into high-dimensional sparse binary features via onehot encoding . For example, the three ﬁeld vectors with
one-hot encoding are concatenated as
 
Weekday=Tuesday
Gender=Male
[0, 0, 1, 0, . . . , 0, 0]
City=London
Many machine learning models, including linear logistic regression , non-linear gradient boosting decision trees 
and factorization machines , have been proposed to work
on such high-dimensional sparse binary features and produce
high quality user response predictions. However, these models
highly depend on feature engineering in order to capture highorder latent patterns .
Recently, deep neural networks (DNNs) have shown
great capability in classiﬁcation and regression tasks, including
computer vision , speech recognition and natural
language processing . It is promising to adopt DNNs
in user response prediction since DNNs could automatically
learn more expressive feature representations and deliver better
prediction performance. In order to improve the multi-ﬁeld
categorical data interaction, presented an embedding
methodology based on pre-training of a factorization machine.
Based on the concatenated embedding vectors, multi-layer
perceptrons (MLPs) were built to explore feature interactions.
However, the quality of embedding initialization is largely
limited by the factorization machine. More importantly, the
“add” operations of the perceptron layer might not be useful
to explore the interactions of categorical data in multiple ﬁelds.
Previous work , has shown that local dependencies
between features from different ﬁelds can be effectively explored by feature vector “product” operations instead of “add”
operations.
To utilize the learning ability of neural networks and mine
the latent patterns of data in a more effective way than MLPs,
in this paper we propose Product-based Neural Network
(PNN) which (i) starts from an embedding layer without pretraining as used in , and (ii) builds a product layer based on
the embedded feature vectors to model the inter-ﬁeld feature
interactions, and (iii) further distills the high-order feature
patterns with fully connected MLPs. We present two types of
PNNs, with inner and outer product operations in the product
layer, to efﬁciently model the interactive patterns.
We take CTR estimation in online advertising as the working example to explore the learning ability of our PNN model.
The extensive experimental results on two large-scale realworld datasets demonstrate the consistent superiority of our
model over state-of-the-art user response prediction models
 , , on various metrics.
II. RELATED WORK
The response prediction problem is normally formulated
as a binary classiﬁcation problem with prediction likelihood
or cross entropy as the training objective . Area under
ROC Curve (AUC) and Relative Information Gain (RIG) are
common evaluation metrics for response prediction accuracy
 
 . From the modeling perspective, linear logistic regression
(LR) , and non-linear gradient boosting decision trees
(GBDT) and factorization machines (FM) are widely
used in industrial applications. However, these models are
limited in mining high-order latent patterns or learning quality
feature representations.
Deep learning is able to explore high-order latent patterns
as well as generalizing expressive data representations .
The input data of DNNs are usually dense real vectors,
while the solution of multi-ﬁeld categorical data has not been
well studied. Factorization-machine supported neural networks
(FNN) was proposed in to learn embedding vectors
of categorical data via pre-trained FM. Convolutional Click
Prediction Model (CCPM) was proposed in to predict ad
click by convolutional neural networks (CNN). However, in
CCPM the convolutions are only performed on the neighbor
ﬁelds in a certain alignment, which fails to model the full
interactions among non-neighbor features. Recurrent neural
networks (RNN) was leveraged to model the user queries as
a series of user context to predict the ad click behavior .
Product unit neural network (PUNN) was proposed to
build high-order combinations of the inputs. However, neither
can PUNN learn local dependencies, nor produce bounded
outputs to ﬁt the response rate.
In this paper, we demonstrate the way our PNN models
learn local dependencies and high-order feature interactions.
III. DEEP LEARNING FOR CTR ESTIMATION
We take CTR estimation in online advertising as a
working example to formulate our model and explore the performance on various metrics. The task is to build a prediction
model to estimate the probability of a user clicking a speciﬁc
ad in a given context.
Each data sample consists of multiple ﬁelds of categorical
data such as user information (City, Hour, etc.), publisher
information (Domain, Ad slot, etc.) and ad information
(Ad creative ID, Campaign ID, etc.) . All the
information is represented as a multi-ﬁeld categorical feature
vector, where each ﬁeld (e.g. City) is one-hot encoded as
discussed in Section I. Such a ﬁeld-wise one-hot encoding
representation results in curse of dimensionality and enormous
sparsity . Besides, there exist local dependencies and
hierarchical structures among ﬁelds .
Thus we are seeking a DNN model to capture high-order
latent patterns in multi-ﬁeld categorical data. And we come up
with the idea of product layers to explore feature interactions
automatically. In FM, feature interaction is deﬁned as the inner
product of two feature vectors .
The proposed deep learning model is named as Productbased Neural Network (PNN). In this section, we present PNN
model in detail and discuss two variants of this model, namely
Inner Product-based Neural Network (IPNN), which has an
inner product layer, and Outer Product-based Neural Network
(OPNN) which uses an outer product expression.
Embedding Layer
Field-wisely Connected
Product Layer
Pair-wisely Connected
Hidden Layer 1
Fully Connected
Hidden Layer 2
Fully Connected
Fig. 1: Product-based Neural Network Architecture.
A. Product-based Neural Network
The architecture of the PNN model is illustrated in Figure 1.
From a top-down perspective, the output of PNN is a real
number ˆy ∈(0, 1) as the predicted CTR:
ˆy = σ(W3l2 + b3),
where W3 ∈R1×D2 and b3 ∈R are the parameters of the
output layer, l2 ∈RD2 is the output of the second hidden
layer, and σ(x) is the sigmoid activation function: σ(x) =
1/(1 + e−x). And we use Di to represent the dimension of
the i-th hidden layer.
The output l2 of the second hidden layer is constructed as
l2 = relu(W2l1 + b2),
where l1 ∈RD1 is the output of the ﬁrst hidden layer. The
rectiﬁed linear unit (relu), deﬁned as relu(x) = max(0, x), is
chosen as the activation function for hidden layer output since
it has outstanding performance and efﬁcient computation.
The ﬁrst hidden layer is fully connected with the product
layer. The inputs to it consist of linear signals lz and quadratic
signals lp. With respect to lz and lp inputs, separately, the
formulation of l1 is:
l1 = relu(lz + lp + b1),
where all lz, lp and the bias vector b1 ∈RD1.
Then, let us deﬁne the operation of tensor inner product:
where ﬁrstly element-wise multiplication is applied to A, B,
then the multiplication result is summed up to a scalar. After
that, lz and lp are calculated through z and p, respectively:
z, . . . , ln
z , . . . , lD1
p, . . . , ln
p , . . . , lD1
p are the weights in the product layer, and
their shapes are determined by z and p respectively.
By introducing a “1” constant signal, the product layer can
not only generate the quadratic signals p, but also maintaining
the linear signals z, as illustrated in Figure 1. More speciﬁcally,
 z1, z2, . . . , zN
 f1, f2, . . . , fN
p = {pi,j}, i = 1...N, j = 1...N,
is the embedding vector for ﬁeld i.
pi,j = g(fi, fj) deﬁnes the pairwise feature interaction. Our
PNN model can have different implementations by designing
different operation for g. In this paper, we propose two variants
of PNN, namely IPNN and OPNN, as will be discussed later.
The embedding vector fi of ﬁeld i, is the output of the
embedding layer:
0 x[starti : endi],
where x is the input feature vector containing multiple ﬁelds,
and x[starti : endi] represents the one-hot encoded vector for
ﬁeld i. W0 represents the parameters of the embedding layer,
0 ∈RM×(endi−starti+1) is fully connected with ﬁeld i.
Finally, supervised training is applied to minimize the log
loss, which is a widely used objective function capturing
divergence between two probability distributions:
L(y, ˆy) = −y log ˆy −(1 −y) log(1 −ˆy),
where y is the ground truth (1 for click, 0 for non-click), and
ˆy is the predicted CTR of our model as in Eq. (1).
B. Inner Product-based Neural Network
In this section, we demonstrate the Inner Product-based
Neural Network (IPNN). In IPNN, we ﬁrstly deﬁne the pairwise feature interaction as vector inner product : g(fi, fj) =
With the constant signal “1”, the linear information z is
preserved as:
z )i,jzi,j.
As for the quadratic information p, the pairwise inner
product terms of g(fi, fj) form a square matrix p
RN×N. Recalling the deﬁnition of lp in Eq. (5), ln
p )i,jpi,j and the commutative law in vector
inner product, p and W n
p should be symmetric.
Such pairwise connection expands the capacity of the neural
network, but also enormously increases the complexity. In this
case, the formulation of l1, described in Eq. (3), has the space
complexity of O(D1N(M + N)), and the time complexity of
O(N 2(D1 +M)), where D1 and M are the hyper-parameters
about network architecture, N is the number of input ﬁelds.
Inspired by FM , we come up with the idea of matrix
factorization to reduce complexity.
By introducing the assumption that W n
p = θnθnT , where
θn ∈RN, we can simplify l1’s formulation as:
j ⟨fi, fj⟩= ⟨
where, for convenience, we use δn
i ∈RM to denote a feature
vector fi weighted by θn
i , i.e. δn
i fi. And we also have
2 , . . . , δn
i , . . . , δn
With the ﬁrst order decomposition on n-th single node, we
give the lp complete form:
i ∥, . . . , ∥
i ∥, . . . , ∥
By reduction of lp in Eq. (12), the space complexity
of l1 becomes O(D1MN), and the time complexity is
also O(D1MN). In general, l1 complexity is reduced from
quadratic to linear with respect to N. This well-formed equation makes reusable for some intermediate results. Moreover,
matrix operations are easily accelerated in practice with GPUs.
More generally, we discuss K-order decomposition of W n
at the end of this section. We should point out that W n
n is only the ﬁrst order decomposition with a strong
assumption. The general matrix decomposition method can be
derived that:
n⟩⟨fi, fj⟩.
In this case, θi
n ∈RK. This general decomposition is more
expressive with weaker assumptions, but also leading to K
times model complexity.
C. Outer Product-based Neural Network
Vector inner product takes a pair of vectors as input and
outputs a scalar. Different from that, vector outer product takes
a pair of vectors and produces a matrix. IPNN deﬁnes feature
interaction by vector inner product, while in this section, we
discuss the Outer Product-based Neural Network (OPNN).
The only difference between IPNN and OPNN is the
quadratic term p. In OPNN, we deﬁne feature interaction as
g(fi, fj) = fif T
j . Thus for every element in p, pi,j ∈RM×M
is a square matrix.
For calculating l1, the space complexity is O(D1M 2N 2) ,
and the time complexity is also O(D1M 2N 2). Recall that D1
and M are the hyper-parameters of the network architecture,
and N is the number of the input ﬁelds, this implementation
is expensive in practice. To reduce the complexity, we propose
the idea of superposition.
By element-wise superposition, we can reduce the complexity by a large step. Speciﬁcally, we re-deﬁne p formulation as
j = fΣ(fΣ)T ,
where p ∈RM×M becomes symmetric, thus W n
p should also
be symmetric. Recall Eq. (5) that Wp ∈RD1×M×M. In this
case, the space complexity of l1 becomes O(D1M(M +N)),
and the time complexity is also O(D1M(M + N)).
D. Discussions
Compared with FNN , PNN has a product layer. If
removing lp part of the product layer, PNN is identical to
FNN. With the inner product operator, PNN is quite similar
with FM : if there is no hidden layer and the output layer
is simply summing up with uniform weight, PNN is identical
to FM. Inspired by Net2Net , we can ﬁrstly train a part
of PNN (e.g., the FNN or FM part) as the initialization, and
then start to let the back propagation go over the whole net.
The resulted PNN should at least be as good as FNN or FM.
In general, PNN uses product layers to explore feature
interactions. Vector products can be viewed as a series of
addition/multiplication operations. Inner product and outer
product are just two implementations. In fact, we can deﬁne
more general or complicated product layers, gaining PNN
better capability in exploration of feature interactions.
Analogous to electronic circuit, addition acts like “OR” gate
while multiplication acting like “AND” gate, and the product
layer seems to learn rules other than features. Reviewing
the scenario of computer vision, while pixels in images are
real-world raw features, categorical data in web applications
are artiﬁcial features with high levels and rich meanings.
Logic is a powerful tool in dealing with concepts, domains
and relationships. Thus we believe that introducing product
operations in neural networks will improve networks’ ability
for modeling multi-ﬁeld categorical data.
IV. EXPERIMENTS
In this section, we present our experiments in detail, including datasets, data processing, experimental setup, model
comparison, and the corresponding analysis1. In our experiments, PNN models outperform major state-of-the-art models
in the CTR estimation task on two real-world datasets.
A. Datasets
1) Criteo: Criteo 1TB click log2 is a famous ad tech
industry benchmarking dataset. We select 7 consecutive days
of samples for training, and the next 1 day for evaluation.
Because of the enormous data volume and high bias, we
apply negative down-sampling on this dataset. Deﬁne the
down-sampling ratio as w, the predicted CTR as p, the recalibrated CTR q should be q = p/(p + 1−p
w ) . After
down-sampling and feature mapping, we get a dataset, which
comprises 79.38M instances with 1.64M feature dimensions.
2) iPinYou: The iPinYou dataset3 is another real-world
dataset for ad click logs over 10 days. After one-hot encoding,
we get a dataset containing 19.50M instances with 937.67K
input dimensions. We keep the original train/test splitting
scheme, where for each advertiser the last 3-day data are used
as the test dataset while the rest as the training dataset.
1We release the repeatable experiment code on GitHub: 
Atomu2014/product-nets
2Criteo terabyte dataset download link: 
download-terabyte-click-logs/.
3iPinYou dataset download link: 
We only use the data from season 2 and 3 because of the same data schema.
B. Model Comparison
We compare 7 models in our experiments, which are
implemented with TensorFlow4, and trained with Stochastic
Gradient Descent (SGD).
LR: LR is the most widely used linear model in industrial
applications . It is easy to implement and fast to train,
however, unable to capture non-linear information.
FM: FM has many successful applications in recommender
systems and user response prediction tasks . FM explores
feature interactions, which is effective on sparse data.
FNN: FNN is proposed in , being able to capture highorder latent patterns of multi-ﬁeld categorical data.
CCPM: CCPM is a convolutional model for click prediction . This model learns local-global features efﬁciently.
However, CCPM highly relies on feature alignment, and is
lack of interpretation.
IPNN: PNN with inner product layer III-B.
OPNN: PNN with outer product layer III-C.
PNN*: This model has a product layer, which is a concatenation of inner product and outer product.
Additionally, in order to prevent over-ﬁtting, the popular
L2 regularization term is added to the loss function L(y, ˆy)
when training LR and FM. And we also employ dropout as
a regularization method to prevent over-ﬁtting when training
neural networks.
C. Evaluation Metrics
Four evaluation metrics are tested in our experiments. The
two major metrics are:
AUC: Area under ROC curve is a widely used metric
in evaluating classiﬁcation problems. Besides, some work
validates AUC as a good measurement in CTR estimation .
RIG: Relative Information Gain, RIG = 1 −NE, where
NE is the Normalized Cross Entropy .
Besides, we also employ Log Loss (Eq. (9)) and root mean
square error (RMSE) as our additional evaluation metrics.
D. Performance Comparison
Table I and II show the overall performance on Criteo
and iPinYou datasets, respectively. In FM, we employ 10order factorization and correspondingly, we employ 10-order
embedding in network models. CCPM has 1 embedding layer,
2 convolution layers (with max pooling) and 1 hidden layer
(5 layers in total). FNN has 1 embedding layer and 3 hidden
layers (4 layers in total). Every PNN has 1 embedding layer,
1 product layer and 3 hidden layers (5 layers in total). The
impact of network depth will be discussed later.
The LR and FM models are trained with L2 norm regularization, while FNN, CCPM and PNNs are trained with
dropout. By default, we set dropout rate at 0.5 on network
hidden layers, which is proved effective in Figure 2. Further
discussions about the network architecture will be provided in
Section IV-E.
4TensorFlow: 
TABLE I: Overall Performance on the Criteo Dataset.
TABLE II: Overall Performance on the iPinYou Dataset.
TABLE III: P-values under the Log Loss Metric.
Criteo AUC
Fig. 2: AUC Comparison of Dropout (OPNN).
Firstly, we focus on the AUC performance. The overall
results in Table I and II illustrate that (i) FM outperforms
LR, demonstrating the effectiveness of feature interactions; (ii)
Neural networks outperform LR and FM, which validates the
importance of high-order latent patterns; (iii) PNNs perform
the best on both Criteo and iPinYou datasets. As for log loss,
RMSE and RIG, the results are similar.
We also conduct t-test between our proposed PNNs and
the other compared models. Table III shows the calculated
p-values under log loss metric on both datasets. The results
verify that our models signiﬁcantly improve the performance
of user response prediction against the baseline models.
We also ﬁnd that PNN*, which is the combination of IPNN
and OPNN, has no obvious advantages over IPNN and OPNN
on AUC performance. We consider that IPNN and OPNN
are sufﬁcient to capture the feature interactions in multi-ﬁeld
categorical data.
Figure 3 shows the AUC performance with respect to the
training iterations on iPinYou dataset. We ﬁnd that network
Iterations
AUC on iPinYou
Fig. 3: Learning Curves on the iPinYou Dataset.
models converge more quickly than LR and FM. We also
observe that our two proposed PNNs have better convergence
than other network models.
E. Ablation Study on Network Architecture
In this section, we discuss the impact of neural network
architecture. For IPNN and OPNN, we take three hyperparameters (or settings) into consideration: (i) embedding layer
size, (ii) network depth and (iii) activation function. Since
CCPM shares few similarities with other neural networks and
PNN* is just a combination of IPNN and OPNN, we only
compare FNN, IPNN and OPNN in this section.
1) Embedding Layer: The embedding layer is to convert
sparse binary inputs to dense real-value vectors. Take word
embedding as an example , an embedding vector contains
the information of the word and its context, and indicates the
relationships between words.
We take the idea of embedding layer from . In this
paper, the latent vectors learned by FM are explained as
node representations, and the authors use a pre-trained FM to
initialize the embedding layers in FNN. Thus the factorization
order of FM keeps consistent with the embedding order.
The input units are fully connected with the embedding
layer within each ﬁeld. We compare different orders, like 2,
10, 50 and 100. However, when the order grows larger, it is
harder to ﬁt the parameters in memory, and the models are
much easier to over-ﬁt. In our experiments, we take 10-order
embedding in neural networks.
2) Network Depth: We also explore the impact of network
depth by adjusting the number of hidden layers in FNN and
PNNs. We compare different number of hidden layers: 1, 3,
5 and 7. Figure 4 shows the performance as network depth
grows. Generally speaking, the networks with 3 hidden layers
have better generalization on the test set.
For convenience, we call convolution layers and product
layers as representation layers. These layers can capture complex feature patterns using fewer parameters, thus are efﬁcient
in training, and generalize better on the test set.
Hidden Layers
AUC Performance
Hidden Layers
Fig. 4: Performance Comparison over Network Depths.
Criteo AUC
iPinYou AUC
Fig. 5: AUC Comparison over Various Activation Functions.
3) Activation Function: We compare three mainstream activation functions: sigmoid(x) =
1+e−x , tanh(x) = 1−e−2x
and relu(x) = max(0, x). Compared with the sigmoidal family, relu function has the advantages of sparsity and efﬁcient
gradient, which is possible to gain more beneﬁts on multi-ﬁeld
categorical data.
Figure 5 compares these activation functions on FNN,
IPNN and OPNN. From this ﬁgure, we ﬁnd that tanh has
better performance than sigmoid. This is supported by .
Besides tanh, we ﬁnd relu function also has good performance.
Possible reasons include: (i) Sparse activation, nodes with
negative outputs will not be activated; (ii) Efﬁcient gradient
propagation, no vanishing gradient problem or exploding effect; (iii) Efﬁcient computation, only comparison, addition and
multiplication.
V. CONCLUSION AND FUTURE WORK
In this paper, we proposed a deep neural network model
with novel architecture, namely Product-based Neural Network, to improve the prediction performance of DNN working
on categorical data. And we chose CTR estimation as our
working example. By exploration of feature interactions, PNN
is promising to learn high-order latent patterns on multi-ﬁeld
categorical data. We designed two types of PNN: IPNN based
on inner product and OPNN based on outer product. We
also discussed solutions to reduce complexity, making PNN
efﬁcient and scalable. Our experimental results demonstrated
that PNN outperformed the other state-of-the-art models in 4
metrics on 2 datasets. To sum up, we obtain the following
conclusions: (i) By investigating feature interactions, PNN
gains better capacity on multi-ﬁeld categorical data. (ii) Being
both efﬁcient and effective, PNN outperforms major stateof-the-art models. (iii) Analogous to “AND”/“OR” gates, the
product/add operations in PNN provide a potential strategy for
data representation, more speciﬁcally, rule representation.
In the future work, we will explore PNN with more general
and complicated product layers. Besides, we are interested in
explaining and visualizing the feature vectors learned by our
models. We will investigate their properties, and further apply
these node representations to other tasks.