SIAM J. ScI. COMPUT.
Vol. 17, No. 4, pp. 848-869, July 1996
() 1996 Society for Industrial and Applied Mathematics
EFFICIENT ALGORITHMS FOR COMPUTING
A STRONG RANK-REVEALING QR FACTORIZATION*
MING GU AND STANLEY C. EISENSTAT
Abstract. Given an m
n matrix M with m > n, it is shown that there exists a permutation FI and an integer k
such that the QR factorization
reveals the numerical rank of M: the k
k upper-triangular matrix Ak is well conditioned, IlCkll2 is small, and Bk
is linearly dependent on Ak with coefficients bounded by a low-degree polynomial in n. Existing rank-revealing QR
(RRQR) algorithms are related to such factorizations and two algorithms are presented for computing them. The new
algorithms are nearly as efficient as QR with column pivoting for most problems and take O (ran2) floating-point
operations in the worst case.
Key words, orthogonal factorization, rank-revealing factorization, numerical rank
AMS subject classifications. 65F25, 15A23, 65F35
1. Introduction. Given a matrix M 6 Rm n with m > n, we consider partial QR factorizations of the form
Rmm is orthogonal, A
Rk is upper triangular with nonnegative diagonal
elements, Bk
Rk(n-k), Ck
R(m-k)(n-k), and YI
Rnn is a permutation matrix chosen
to reveal linear dependence among the columns of M. Usually k is chosen to be the smallest
_< k _< n for which IICII2 is sufficiently small [24, p. 235].
Golub introduced these factorizations.and, with Businger , developed the first
algorithm (QR with column pivoting) for computing them. Applications include least-squares
computations , subset selection and linear dependency analysis , subspace tracking , rank determination , and nonsymmettic eigenproblems . Such factorizations are also related to condition estimation and the UR V and UL V decompositions
14, 41, 42].
1.1. RRQR factorizations. By the interlacing property of the singular values [24, Cor.
8.3.3], for any permutation YI we have
oi(Ak) <_ oi(M
o’j(Ck) >_ crk+j(M)
forl_<i_<kandl_<j_<n-k. Thus,
O’min(Ak) <_ ak(M)
O’max(Ck) >_ O’k+l(M).
Assume that crk(M > ak+l (M)
O, so that the numerical rank of M is k. Then we
would like to find a Fl for which O’min(Ak) is sufficiently large and O’max(Ck) is sufficiently
*Received by the editors May 13, 1994; accepted for publication (in revised form) March 8, 1995. This research
was supported in part by U. S. Army Research Office contract DAAL03-91=G-0032.
Department of Mathematics and Lawrence Berkeley Laboratory, University of California, Berkeley, CA 94720
( ,edu).
;Department of Computer Science, Yale University, P. O. Box 208285, New Haven, CT 06520-8285 ( ).
1Here oi(X), O-max(X), and O’min(X) denote the ith largest, the largest, and the smallest singular values of the
matrix X, respectively.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
small. We call the factorization (1) a rank-revealing QR (RRQR) factorization if it satisfies
O’min(Ak) >
O-max(Ck) < O-+l(M) p(k, n),
where p(k, n) is a function bounded by a low-degree polynomial in k and n . Other,
less restrictive definitions are discussed in and . The term "rank-revealing QR factorization" is due to Chan
The Businger and Golub algorithm works well in practice, but there are examples
where it fails to produce a factorization satisfying (4) (see Example
in 2). Other algorithms
fail on similar examples . Recently, Hong and Pan showed that there exist RRQR factorizations with p(k, n)
k) + min(k, n
k), and Chandrasekaran and Ipsen 
developed an algorithm that computes one efficiently in practice,2 given k.
1.2. Strong RRQR factorizations. In some applications it is necessary to find a basis for
the approximate right null space of M, as in rank-deficient least-squares computations 
and subspace tracking , or to separate the linearly independent columns of M from the
linearly dependent ones, as in subset selection and linear dependency analysis . The RRQR factorization does not lead to a stable algorithm because the elements of
A-1B can be very large (see Example 2 in 2).
In this paper we show that there exist QR factorizations that meet this need. We call the
factorization (1) a strong RRQR factorization if it satisfies (cf. (2))
O-j(Ck) < O-k+j(M) ql (k, n)
k, where ql (k, n) and q2(k, n) are functions bounded by
low-degree polynomials in k and n. Clearly a strong RRQR factorization is also a RRQR factorization. In addition, condition (6) makes
l-I( -A-IBk
an approximate right null space of M with a small residual independent of the condition
number of Ak, provided that Ak is not too ill conditioned [38, pp. 192-198]. See for
another application.
We show that there exists a permutation FI for which conditions (5) and (6) hold with
Since this permutation might take exponential time to compute, we present algorithms that,
given f > 1, find a 1-I for which (5) and (6) hold with
V/1 + f 2k(n
Here k can be either an input parameter (Algorithm 4) or the smallest integer for which O’max (Ck)
is sufficiently small (Algorithm 5). When f > 1, these algorithms require O ((m + n log/n)n2)
floating-point operations. In particular, when f is a small power of n (e.g.,
or n), they
take O(mn2) time (see 4.4).
2In the worst case the runtime might be exponential in k or n. The algorithm proposed by Golub, Klema, and
Stewart also computes an RRQR factorization , but requires an orthogonal basis for the right null space.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
MING GU AND STANLEY C. EISENSTAT
Recently, Pan and Tang presented an algorithm that, given f >
1, computes an
RRQR factorization with p(k, n)
k) + max(k, n
This algorithm can be
shown to be mathematically equivalent to Algorithm 5 and thus computes a strong RRQR factorization with q (k, n)
v/1 + f2k(n
k) and q:(k, n)
f. However, it is much less
efficient. Pan and Tang also present two practical modifications to their algorithm, but
they do not always compute strong RRQR factorizations.
1.3. Overview. In2 we review QR with column pivoting and the Chandrasekaran
and Ipsen algorithm for computing an RRQR factorization. In 3 we give a constructive
existence prooffor the strong RRQR factorization. In 4 we present an algorithm (Algorithm 5)
that computes a strong RRQR factorization and bound the total number of operations required
when f > 1; and in 5 we show that this algorithm is numerically stable. In 6 we report
the results of some numerical experiments.
In 7 we show that the concept of a strong
RRQR factorization is not completely new in that the QR factorizati0n given by the Businger
and Golub algorithm satisfies (5) and (6) with q (k, n) and q2(k, n) functions that grow
exponentially with k.
Finally, in 8 we present some extensions of this work, including a
version of Algorithm 5 that is nearly as fast as QR with column pivoting for most problems
and takes O (mn2) floating-point operations in the worst case.
1.4. Notation. By convention, Ak, /k 6 R
denote upper-triangular matrices with
nonnegative diagonal elements, and B, [
Rkx(n-k) and Ck,
R(m-k)(n-k) denote
general matrices.
In the partial QR factorization
X= Q(A c:B)
of a matrix X
Rmn (where the diagonal elements of Ak are nonnegative), we write
Jtk(X)=A/,,
and T(X)-(
For A, a nonsingular
x g matrix, 1/o)i(A) denotes the 2-norm of the ith row of Aand
oe(A))r. For C, a matrix with g columns, , (C) denotes the 2-norm
of the jth column of C and ,.(C)
17i,j denotes the permutation that interchanges the ith and jth columns of a matrix.
Aflop is a floating-point operation oe o, where oe and
are floating-point numbers and o
is one of +, -, x, and /. Taking the absolute value or comparing two floating-point numbers
is also counted as a flop.
. RRQR algorithms. QR with column pivoting is a modification ofthe ordinary
QR algorithm.
ALGORITHM 1. QR with column pivoting.
k’=0; R:=M; 1-I:=I;
while max <_j <n-k /j (Ck (R)) >
jmax :-- argmaxx_<j_<n_
Yj (C (R));
Compute R := 7-’:(R 1-Ik,kq_jmax_l) and I7 := 1-I 1-Ik,k_k_jmax_l;
When Algorithm
halts, we have
O’max (C:(M FI)) < /n
yj (C:(M 17)) < a/n
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
and if 3 is sufficiently small, then the numerical rank ofM is at most k. If the vector of column
norms V, (Ck (R)) is updated rather than recomputed from scratch each time, then Algorithm 1
takes about 4mnk
2kZ(m + n) + 4k3/3 flops [24, p. 236].
Algorithm 1 uses a greedy strategy for finding well-conditioned columns: having determined the first k columns, it picks a column from the remaining n
k columns that maximizes
det [,4+1 (R)] (see ). When there are only a few well-conditioned columns, this strategy
is guaranteed to find a strong RRQR factorization (see 7). It also works well in general, but
it fails to find an RRQR factorization for the following example.
Example 1 (Kahan ). Let M
S,K,,, where
with (p, ff > 0 and 2__
1. Then Algorithm 1 does not permute the
columns of M, yet it can be shown that
o(1 + o)’-
O’min (Ak)
and the right-hand side grows faster than any polynomial in k and n.
n and the numerical rank of M is close to n, Stewart suggests applying
Algorithm 1 to M-1.
Recently, Chandrasekaran and Ipsen combined these ideas to
construct an algorithm Hybrid-III(k) that is guaranteed to find an RRQR factorization, given
k. We present it in a different form here to motivate our constructive proof of the existence of
a strong RRQR factorization.
ALGORITHM 2.
Hybrid-Ill(k).
R :-- M; rI := I;
imin :--- argmin<i<
O) (4k(R));
if there exists a j such that det [,4k(R 1-Iimin,j+)] / det [.A(R)] > 1 then
Find such a j;
Compute R := (R I-Iimi,,j+
and PI :-- 1-I Flimi,,j+;
jmax := argmax_<j_<_ ,j (C (R));
if there exists an
such that det [.A(R rli,jmax+k) / det [.Ak(R)] > 1 then
Find such an i;
Compute R := 7k(R Fli,jmax+k and FI := FI Fli,jmax+k;
until no interchange occurs;
Since the objective is to find a permutation FI for which O’min (.A(M FI)) is sufficiently
large and O’max (C,(M I-I)) is sufficiently small, Algorithm 2 keeps interchanging the most
"dependent" of the first k columns (column imin) with one of the last n
k columns, and
interchanging the most "independent" of the last n
k columns (column jmax) with one of the
first k columns, as long as det [4(R)] strictly increases.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
MING GU AND STANLEY C. EISENSTAT
Since det [4(R)] strictly increases with every interchange, no permutation repeats; and
since there are only a finite number of permutations, Algorithm 2 eventually halts. Chandrasekaran and Ipsen also show that it computes an RRQR factorization, given k. Due to
efficiency considerations, they suggest that it be run as a postprocessor to Algorithm 1.
But Algorithm 2 may not compute a strong RRQR factorization either.
Example 2. Let k
where Sk-1 and Kk-1 are defined as in (7), c_l
7- E Rk-l, and
o)i(S_l K_I).
Then Algorithm 2 does not permute the columns of M (note that irnin
k and jmax
yet it can be shown that
93 (1 + qg)k-4
o(1 + qg)k-2,
and the right-hand sides grow faster than any polynomial in k and n.
Since Algorithm
does not permute the columns of M, this example also shows that Algorithm 2 may not compute a strong RRQR factorization even when it is run as a postprocessor
to Algorithm 1.
3. The existence of a strong RRQR factorization. A strong RRQR factorization satisfies three conditions: every singular value of A is sufficiently large, every singular value of
C is sufficiently small, and every element of A-
B is bounded. Since
Hffi(Ak)i-1
v/det(MTM)
a strong RRQR factorization also results in a large det(A).
Given k and f
1, Algorithm 3 below
constructs a strong RRQR factorization by using column interchanges to try
to maximize det(A).
ALGORITHM 3. Compute a strong RRQR factorization, given k.
R := 7Z(M);
while there exist
and j such that det(k))/det(a) > f,
Ak ckBk)andTk(RFlij+k)-- (
Find such an
Compute R := 7gk(R 17i,j+k) and I7 := FI 17i,j+k;
While Algorithm 2 interchanges either the most "dependent" column of Ak or the most
"independent" column of Ck, Algorithm 3 interchanges any pair of columns that sufficiently
increases det(Ag). As before, there are only a finite number of permutations and none can
repeat, so that it eventually halts.
3The algorithms in this section are only intended to prove the existence of a strong RRQR factorization. Efficient
algorithms will be presented in 4 and 8.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
To prove that Algorithm 3 computes a strong RRQR factorization, we first express
det(k)/det(Ak) in terms of o)i(Ak), yj(Ck), and (A-1Bk)i, j.
LEMMA 3.1. Let
where Ak has positive diagonal elements. Then
v/(A;1Bk)i2,j + (yj(Ck)/Coi(Ak))2
Proof. First, assume that
< k or that j > 1. Let Ak 1-Ii,k
QA be the QR factorization
of A Fli,k, let/
OTB I-Ii,j and
C 171,j, and let 1]
diag(I-l/,k, lql,j). Then
(AkI-Ii’k Bk171’J)( 0
is the QR factorization of R 1-]. Since bothA andk have positive diagonal elements, we have
FIA-1Bk171,j, we have (A-1Bk)i,j
(-1 k)k,1.
FI,A-IBO_ and postmultiplication by an orthogonal matrix leaves the 2norms of the rows unchanged, we have 09i(Ak)
09k(fk). Finally, we have yj(Cg)
Thus it suffices to consider the special case
Then coi(Ak)
Y1, ’j(Ck)
Y2, and (AlBk)i,j
fl/’l. But det(Ak)
det(Ak_l) ’1 and
det(Ak_) f12 +, so that
(fl/y1)2 + (y2/Y1)2: ((A;1Bk)i2,j + (yj(Ck)/i(Ak))2,
which is the result required.
]]vj’Ck’i’ak2"
Then by Lemma 3.1, Algorithm 3 can be rewritten as the following.
ALGORITHM 4. Compute a strong RRQR factorization, given k.
(R, k) > f d
Find/and j such that ](A B)i,j + (gj(C)/mi(A))
(A B):=(Ri,+)and’=i+;
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
MING GU AND STANLEY C. EISENSTAT
Since Algorithm 4 is equivalent to Algorithm 3, it eventually halts and finds a permutation
FI for which p(Tgk(M FI), k) < f. This implies (6) with q2(k, n)
f. Now we show that
this also implies (5) with q (k, n)
v/1 + f2k(n
k), i.e., that Algorithms 3 and 4 compute
a strong RRQR factorization, given k.
THEOREM 3.2. Let
satisfy p R k) < f Then
V/1 + f2k(n
aj(Ck) < aj+k(M) V/1 + f2k(n
Proof For simplicity we assume that M (and therefore R) has full column rank. Let
O’max(Ck)/Crmin(Ak), and write
Then by [29, Thm. 3.3.16],
ai(R) < ai(k) IlW]12,
Since O’min(Ak)
O’max(Ck/Ol), we have o’i(/1)
ri(Ak) for 1 <
< k. Moreover,
1/ IIA-BII22/
4- IIA-IBII2F 4-Ilfkll%llA-all2F
ZZ{ta; t i,j 4- /j(Ck)2/O)i(Ak)2 I!
1 + f2k(n-k),
so that IIW 112 _< 4’i / f2k(n
k). Plugging these relations into (10), we get (8). Similarly,
(Ak Bk) (Otlk -A-Bk) RW2.
aj+(R)IIW2112 _< aj+(M) V/1 + f2k(n
which is (9).
4. Computing a strong RRQR factorization. Given f >
and a tolerance 6 > 0,
Algorithm 5 below computes both k and a strong RRQR factorization. It is a combination of
the ideas in Algorithms 1 and 4 but uses
max {l(A-lBk)i,jl
’j(Ck)/o)i(Ak) ]
instead of p(R, k) and computes co.(Ak), ?’.(Ck), andA-
B recursively for greater efficiency.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
ALGORITHM 5. Compute k and a strong RRQR factorization.
Ck := M; FI:=I;
Initialize co,(Ak), y,(C), and A-1B;
while max <j <n-k Yj (Ck) >-do
jmax ": argmax <_j <_n-k
(ZkBk)’--Jk(Rr-lkk+jmax_l)andI-l:--I-lr-lk,k+jmax_l;
Update co,(Ak), y,(Ck), and A1Bk;
while t3(R, k) > f do
and j such thatl(A-lBk)i,j[ > f or yj(Ck)/Coi(Zk) > f;
(ZkBk).=J’k(RI-Ii,j+k)andI-I.--FIl-Iij+k;
Compute R --=
Modify co,(A), v,(C), and A-
Since its inner while-loop is essentially equivalent to Algorithm 4, Algorithm 5 must
eventually halt, having found k and a permutation I-I for which 3(R, k) _< f. This implies that
p(Tg(M YI), k) <_
f, so that (5) and (6) are satisfied with4 ql (k, n)
v/1 + 2fZk(n
and qz k, n)
Remark 1. Note that
O’max (Ck)
ql(k,n) 2 0"min(Ak)
1<_i<_, <_j<_n- coi(Ak)
cr+l(M) < O’max(Ck) < v/k(n_k)
l<i<k, l<j<n-k 09i(Ak)
Thus Algorithm 5 can detect a sufficiently large gap in the singular values of M if we change
the condition in the outer while-loop to
yj(Ck)/Coi(Ak) >_ ,
is some tolerance. This is useful when solving rank-deficient least-squares problems
using RRQR factorizations (see
11, 12] and the references therein):
In 4.1-4.3 we show how to update Ak, B, Ck, co,(Ak), y,(Ck), and A1B after k
increases and to modify them after an interchange.
In 4.4 we bound the total number of
interchanges and the total number of operations. We will discuss numerical stability in 5.
4.1. Updating formulas. Let
R=(Ak-1 Bk-1)
and J-k(Rl-lkk+jmax_l)=(
Assume that we have already computed Ak-, Bk-, Ck-, co,(Ak_), F, (Ck-), andA-_ Bk-.
In this subsection we show how to compute A, Bk, Ck, co,(Ak), F,(Ck), and A Bk. For
simplicity we assume that jniax
1, SO that ?’1 (Ck-1) >_ Fj(Ck-1) for
4To get ql (k, n)
dl + f2k(n
k) and q2(k, n)
f, replace 3(R, k) by p(R, k) or replace f by f/x/
(assuming that f > v) in Algorithm 5.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
MING GU AND STANLEY C. EISENSTAT
Let H E R(m-k)(m-k) be an orthogonal matrix that zeroes out the elements below the
diagonal in the first column of Ck-1, and let
Yl (Ck-1). Then
Let A-_l Bk-1
[dk_l) T andc
,1)n_k)T. Then co,(Ak) and ?,,(C) can be computed
1/coi(Ak)2
1/o)i(Ak_l)2 -+- [1i/
<_ kso that
Yj+I (Ck-1)2
The main cost of the updating procedure is in computing HC_I and U
hieT/, which
take about 4(m-k)(n-k) and 2k(n-k) flops, respectively, for a total ofabout 2(2m -k)(n-k)
Remark 2. Since f > 1, p(R, k
f, and V > Vj+l(Ck-1) > vj, for
k, we have
[(A-’Bk)i,jl < 2f
gj(Ck)/Coi(Ak) < ", f,
p(k(R 1-I,jmx), k) <_
This bound will be used in 5.1.
4.2. Reducing a general interchange to a special one. Assume that there is an interchange between the ith and (j + k)th columns of R. In this subsection we show how to reduce
this to the special case
If j > 1, then interchange the (k + 1)st and (k + j)th columns of R. This only interchanges
the corresponding columns in Bk, C, y. (C), and A1B. Henceforth we assume that
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
where A1,1 6 R(i-1)(i-1) and A2,2 6 R(k-i)(k-i) are upper triangular. Let I-Ik be the permutation that cyclically shifts the last k " +
columns of Ak to the left, so that
Note that Ak FIk is an upper-Hessenberg matrix with nonzero subdiagonal elements in columns
To retriangularize Ak 1-Ik, we apply Givens rotations to successively zero out the nonzero
subdiagonal elements in columns i, + 1
(see ). Let Q be the product of
these Givens rotations, so that QAk FIk is upper triangular.
diag(lqk, In-k), so that the ith column of R is the kth column of R F!. Then
R(-I= (AkFlk Bk)
k(R(-l)=-- (k k)
(QAkl-Ik QffBk)
Qk and postmultiplication by an orthogonal matrix leaves the 2-norms
of the rows unchanged, it follows that
1-I o9.(Ak),
lq (A-Bk).
The main cost of this reduction is in computing
Qk Ak FIk and Q Bk, which takes about
k)2) < 3k(2n
4.3. Modifying formulas. In this subsection we show howto modify Ak, Bk, Ck, co. (Ak),
F.(Ck), and A-
Bk when there is an interchange between the kth and (k + 1)st columns of R.
We assume that we have already zeroed out the elements below the diagonal in the (k 4- 1)st
,]-k+l(RYlkk+l)(k k)
V/lZ2 4- 1)2, }7
(#c1 4- 1)c2)/p, and 2
From the expression for R, we also have
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
MING GU AND STANLEY C. EISENSTAT
A-ll bl. Since Ak_l is upper triangular, we can compute u using back-substitution.
It follows that
Simplifying,
A-_I1-u/y)(b2 B)
We also have
-All b2/ )
--(Ul q" /ZU)/)7
(Ul -[u + ,cl
U + u (pCl
Plugging these relations into (11), we get
Then og,(Ak) and v,(Ck) can be computed from
Ooi(Ak)2 + ]Z /
The cost of zeroing out the elements below the diagonal in the (k + 1)st column is about
k) flops, the cost of computing u is about k2 flops, and the cost of computing
/-/ is about 4k(n
k) flops. Thus the total cost of the modification is about 4m(n
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
4.4. Efficiency. In this subsection we derive an upper bound on the total number of
interchanges and bound the total number of flops. We only consider the case f > 1.
Let r be the number of interchanges performed for a particular value of k (i.e., within the
inner while-loop), and let A be the determinant of A after these interchanges are complete
(by convention, A0
Since det(A)
A_I ?’jmax (C_1) before the interchanges, and
each interchange increases det(A) by at least a factor of f, it follows that
Ak-1 /jmax(Ck-1) fr.
By (3), we have
trl+l(M) < O’max (CI(M)) < IICz(M)IIF
/jmax (C(M)),
< n, so that
Ak >_ Ak-1
cry(M) f >
=1 Ti is the total number of interchanges up to this point. On the other hand,
from (2) we also have
Ak H o’i(A) <_ H cri(M).
Combining these relations, we have ft < (q/-), so that t < k logf V/ft.
The cost of the updating procedure is about 2(2m
k) flops (see 4.1), the cost
of the reduction procedure is at most about 3k(2n
k) flops (see 4.2), and the cost of the
modifying procedure is about 4m(n
k) + k2 flops (see 4.3). For each increase in k and each
interchange, the cost of finding 3(R, k) is about 2k(n
k) flops (taking k(n
k) absolute
values and making k(n
k) comparisons).
Let kf be the final value ofk when Algorithm 5 halts. Then the total number ofinterchanges
t is bounded by kf logf v/-ff, which is O (kf) when f is taken to be a small power of n (e.g.,
or n). Thus the total cost is at most about
k) 4- 2k(n
4- t max [3k(2n
k) 4- 4m(n
k) 4- k2 4- 2k(n
kf) 4- 4tzn(m 4- n)
flops. When f is taken to be a small power of n (e.g.,
or n), the total cost is O (mnkf)
flops. Normally the is quite small (see 6), and thus the cost is about 2mkf(2n
kf) flops.
When m >> n, Algorithm 5 is almost as fast as Algorithm 1; when m
n, Algorithm 5 is
about 50% more expensive. We will discuss efficiency further in 6 and 8.
5. Numerical stability. Since we update and modify co,(A), y,(C), and A-
than recompute them, we might expect some loss of accuracy. But since we only use these
quantities for deciding which pairs of columns to interchange, Algorithm 5 could only be
unstable if they were extremely inaccurate.
In 5.1 we give an upper bound for p(R, k) during the interchanges. Since this bound
grows slowly with k, Theorem 3.2 asserts that A can never be extremely ill conditioned,
provided that a(M) is not very much smaller than IIMII2. This implies that the elements of
A-1B cannot be too inaccurate. In 5.2 we discuss the numerical stability of updating and
modifying co,(Ak) and 9/,(Ck).
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
MING GU AND STANLEY C. EISENSTAT
5.1. An upper bound on p(R, k) during interchanges. We only consider the case
LEMMA 5.1. Let A, C, U
Rkk, where A is upper triangular with positive diagonal
elements and U
(ui,j). If
i, + ((c/o)(a)
<- , J <- ,
v/det[(AU)rAU + CTC] < det(A) (V/ f)k.
Proof. First, note that
v/det[(AU)rAU + CrC]
VIai ((AcU))
O’min(A), and write
W=-(AcU)=( A otis)(&)
By [29, Thm. 3.3.4], we have
Since ai (/)
o’i (A), for
< k, we have
1--I ri()) H cri(A)
Now, since zT"z is symmetric and positive definite,
V/det(r) <
and, since
_1 _-iiA_al[2 _< / max
l<i<k o)i(A
min o)i(A)’
llell] 2" + (c)---2 < z +
min oi(A)2i=1
The result follows immediately.
To derive an upper bound on p(R, k) during the interchanges, we use techniques similar
to those used by Wilkinson to bound the growth factor for Gaussian elimination with
complete pivoting,5 Let
5See for a connection between the growth factor for Gaussian elimination with partial pivoting and the
failure of RRQR algorithms.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
which is Wilkinson’s upper bound on the growth factor for Gaussian elimination with complete
pivoting on a r
r matrix. Although W(r) is not a polynomial in r, it grows rather slowly "
THEOREM 5.2. IfAlgorithm 5 performs r interchangesfor some k > 1, then
p(k(M H), k) < 2x/ f (r + 1) W(r + 1).
Proof Assume that Algorithm 5 will perform at least one interchange for this value of k;
otherwise the result holds trivially.
Let I-I (t) be the permutation after the first
interchanges, where 0 <
< r + 1. Partition
where a(l)
and ""-k 6
Assume that r/(/, r) columns ofM
+1) are from
Since there are r
+ 1 more interchanges, we have6
and that the rest are from
O(1, r) <r-l+l.
Without loss of generality, we assume that the first k
r/(l ) columns of ""k
the first k
0(l, z) columns of .,,k
and that the last r/(l z) columns of /t(+l)
are the first
r/(1 r) columns of a/t0)
Then we can write
(M Hq)) =--
where A2,2, CI,1 E Rr/(/’z)xr/(/’z) and the partition is such that
7"(M 1-I(+))
These relations imply that
det(Al,1) det(A2,2)
det(Ar+l))
det(Al,1) V//det [Bf,IB2,1 + Cr Cl,1]
p(Rq), k). By the definition of p(R, k), we have
v/(A-1B2,112
for 1 < i, j _< 0(1, r). Applying Lemma 5.1 and recalling that r/(l, r) < r
+ 1, we have
v/det [B2T,1B2,1 + CT C1,1] < det(A2,2)(v/2(r -1+ 1) f(l))
Combining with (12) and (13), we get
det(A (r+l)
det(A/)) (V/2(r
1+ l)f(/>)
6It is possible that r/(l, r) < r
since a column may be interchanged more than once.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
MING GU AND STANLEY C. EISENSTAT
On the other hand, Algorithm 5 ensures that
Comparing these two relations, we have
f(r) <_ (2r_/+
taking the product of the (r
+ 1)st root of (14) with
and the rth
root of (14) with
0, we have
(T- l’J- 1) 1/(r-t)
(f(5)m/(r-5
which simplifies to
f(r) < f(o)2
(r + 1) H sl/(-)
() (r + 1)lA2(r + 1).
Remark 2 at the end of 4.1 implies that f(0) _< V/ f. Plugging this into the last relation
proves the result.
From 4.4 we have rk _< k log/.v/ft. For example, when
< f < n, we have rk < k,
so that p(R, k) <_ 0 (n k l/V(k)).
5.2. Computing the row norms ofAand the eolurnn norms of Ck. In this section
we discuss the numerical stability of updating and modifying o),(A) and y,(C) as a result
of interchanges, assuming that f is a small power of n.
For any o > 0, we let (C)n(c) denote a positive number that is bounded by oe times
a slowly increasing function of n.
By Theorems 3.2 and 5.2, IIA-]]
and Ilfkll2
O (a/(M)) after each interchange. As Algorithm 5 progresses, IIA-II2
increases from On (1lain(M)) to On (1 while Ilfkll2 decreases from On (a(M))
to On (ak+(M)). A straightforward error analysis shows that the errors in 1/coi(Ak) 2 and
are boundedby On (/a’(M)) and On (e a?(M)), respectively, where e isthe machine
precision. Hence the error in 1/coi (A)2 is less serious than the error in yj (Ck)2, which can be
larger than IICk 112
2 when IICk 112 _< On (,/’g cr (M)).
Algorithm 5 uses the computed values of co, (Ak) and ?’, (Ck) only to decide which columns
to interchange. But although these values do not need to be very accurate, we do need to avoid
the situation where they have no accuracy at all. Thus we recompute rather than update or
modify y, (Ck) when maxm <_j <_n-k ’j (Ck)
On ( rl (M)). This needs to be done at most
twice if one wants to compute a strong RRQR factorization with Ak numerically nonsingular.
A similar approach is taken in xqp, the LAPACK
implementation of Algorithm 1.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
6. Numerical experiments. In this section we report some numerical results for a Fortran
implementation (SRRQR) of Algorithm 5 and the all-Fortran implementation (DGEQPF) of
Algorithm 1 in LAPACK . The computations were done on a SPARCstation/10 in double
precision where the machine precision is
We use the following sets of n
n test matrices:
1. Random: a random matrix with elements uniformly distributed in [-1, 1];
2. Scaled random: a random matrix whose ith row is scaled by the factor rli/n, where
3. GKS: an upper-triangular matrix whose jth diagonal element is l/v-] and whose
(i, j) element is -1//, for j >
(see Golub, Klema, and Stewart );
4. Kahan (see Example 1 in 2);
5. Extended Kahan: the matrix M
S3 R3 l, where
$31 --diag(1, g’, 9
is .a power of 2;
> 0, 0 > 1/41
1, and g.2 .3f_ q92
1; 0 < /z << 1; and
Rll is a symmetric Hadamard matrix (i.e., H
Ii and every component of
Hl is +1).
In particular, we chose r/= 20e, 99
0.285, and/x
20e/,v/ft.
In exact arithmetic Algorithm
does not perform any interchanges for the Kahan and
extended Kahan matrices.. To preserve this behavior in DGEQPF we scaled the jth columns
of these matrices by 1
100j and 1
10j e, respectively, for 1 < j < n. To prevent
DGEQPF from taking advantage of the upper-triangular structure we replaced all of the zero
entries by random numbers of the order e2.
For each test matrix, we took n
96, 192, and 384, and set f
10/-ff and 6
IIMII2 in SRRQR. For the extended Kahan matrix, we also used f
4/2cr21+1 (M); these results are labeled Extended Kahan*.
The results are summarized in Tables 1 and 2. Execution time is in seconds; rank is the
value of k computed by SRRQR; ts is the total number of interchanges in the inner while-loop
of SRRQR; and
v/1 + 2fZk(n
are the theoretical upper bounds on
l<_i<_k, l<_j<_n-k
<i <k, l_<j <n-k
respectively, for SRRQR.
The execution times confirm that Algorithm 5 is about 50% more expensive than Algorithm 1 on matrices that require only a small number ts of interchanges. And as predicted,
failed to reveal the numerical rank ofthe Kahan matrix. Finally, the results suggest
that the theoretical upper bounds ql (k, n) and q2(k, n) are much too large for 0 < k < n.
For the extended Kahan matrices with f
p21 there were no interchanges until the 2/th
step, when the ith column was interchanged with the (2/-t- i)th column for
n/3 column interchanges show that Algorithm 5 may have to perform O(n)
interchanges before finding a strong RRQR factorization for a given f (see 4.4) and can be
more than twice as expensive as Algorithm 1. However, the extended Kahan matrix is already
a strong RRQR factorization with f
104eft for the values of n used here, which is why no
interchanges were necessary.
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
MING GU AND STANLEY C. EISENSTAT
SRRQR versus DGEQPF: Execution time.
Execution time
SRRQR versus DGEQPF." Bounds.
max _AT1Bk_ij
3.92x 102.
1.91 x 103
2.71 x 103
6.27 x 103
1.25 x 104
1.96 x 102
2.51 x 104
6.65 x 102
7. Algorithm 1 and the strong RRQR factorization. Using the techniques developed
in 3, we now show that Algorithm 1 satisfies (5) and (6) with ql (k, n) and q2(k, n) functions
that grow exponentially with k. We need the following lemma.
LEMMA 7.1 (Faddeev, Kublanovskaya, and Faddeeva
16]). Let W
an upper-triangular matrix with toi,
1 and [wi,jl <
< j < n. Then
I(W-1)i,jl
_< i, j _< n,
IIW-1llF _< /4 + 6n-
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
THEOREM 7.2. Let FI be the permutation chosen by Algorithm 1, and let
(Ak Bk) =7"k(Ml-[).
aj(C) < ak+j(M) /n- k 2k,
forl i kandl j n-k.
Pro@ For simplicity we assume that M (and therefore R) has Nll rank.
(Ak ckBk)_ D (WI,1
Wj (WI,I__ ,)1
diag(d, d2
dm) is the diagonal of R, W,
Rkk is unit upper triangular,
Rkx(n-k), W2,2 G R(m-k)x(n-k), and wj
is the jth column of Wl,2.
would not cause any column interchanges if it were applied to R, it follows that
dk and that no component of Wj has absolute value large than 1.
(a[’ Bk)i,j. Then -ui,j is the (i, k + 1) component of W. Applying the
first result in Lemma 7.1 to the lower right (k
+ 2) submatrix of, we have
2k-i, which is (17).
As in the proof of Theorem 3.2, let
amax(Ck)/amin(Ak) and write
O’j+k(/2 < aj+k(R) IIW2112
aj+k(M) IIW2112.
-+-IIA[aBII-t-
..Ck.._..A
_,{U,j -+- (gj(Ck)/O)i(Ak))2}.
Since 1/o)i(A) < 1/(dko)i(Wl,1)) and vj(C) _< d, we have
i, + ((C)/i(A))
< (W21 i,k+l -I- 1/ogi(Wl,1
Using the second result in Lemma 7.1, it follows that
so that W211
k), which gives (16).
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
MING GU AND STANLEY C. EISENSTAT
Similarly, writing
A-lotln_kB ) _--/1 Wl,
r(R) < cry(k1) IIWIlI2
and noting that o’i(Ai) < cri(A:) by the interlacing property of the singular
values [24, Cor. 8.3.3], we get (15).
If R has very few linearly independent columns, then we can stop Algorithm 1 with a
small value of k and are guaranteed to have a strong RRQR factorization. Results similar to
Theorem 7.2 can be obtained for the RRQR algorithms in
10, 18, 25], and [3.9].
8. Some extensions. We have proved the existence of a strong RRQR factorization for
a matrix M 6 R
xn with rn > n and presented an efficient algorithm for computing it. In this
section, we describe some further improvements and extensions of these results.
Since Algorithm 1 seems to work well in practice , Algorithm 5 tends to
perform very few (and quite often no) interchanges in its inner while-loop.
This suggests
using Algorithm 1 as an initial phase (cf. and ), and then using Algorithm 4 to remove
any dependent columns from A, reducing k as needed (cf.
18]). In many respects
the resulting algorithm is equivalent to applying Algorithm 5 to M-1 (cf. Stewart ).
ALGORITHM 6. Compute k and a strong RRQR factorization.
Compute ?’, (C);
while max <_j <_n-k /j Ck
jmax "= argmax
:-- "fk(R Ilk k+jmax-1) and H
rI Il knt_jmax_l
Update 9/, (Ck);
Compute co,(A) and A-
while 3 (R, k) > f do
j such that [(a
-1 nk)i,j[ > f or yj(Ck)/Ogi(ak) > f;
(ak Bk) "--TP,k(Rl-Ii,j+k) and[-I’--l-IIlij+k;
Modify m,(A), v,(C), and A-
if minl<i< (.oi(A) <_ ( then
imin :-" argmin<i< 09i(Ak);
Downdate o,(A), ,,(C), and A
until k is unchanged;
Downloaded 12/30/12 to 150.135.135.70. Redistribution subject to SIAM license or copyright; see 
STRONG RANK-REVEALING QR FACTORIZATIONS
As before, Algorithm 6 eventually halts and finds k and a strong RRQR factorization.
The total number of interchanges t is bounded by (n
k) log/4eft, which is O (n
f is taken to be a small power of n (see 4.4). The formulas for downdating co,(A), v,(C),
and A-1B are analogous to those in 4.1.
Algorithm 6 initializes o),(A) and A-1B after the first while-loop, at a cost of O(kZn)
flops. However, since they are only used to decide which (if any) columns to interchange and
whether to decrease k, they do not need to be computed very accurately. To make the algorithm
more efficient, we could instead use the condition estimation techniques in , and
 to generate unit vectors u and v such that
Let the imaxth component of A-lu be the largest in absolute value. To find the smallest entry
in o).(A), we note that
1/O)imax(Ak)
max 1/o)i(A)
](A-lu)imaxl
Similarly, let the jmaxth component of B[A-rv be the largest in absolute value. To find the
largest entry of A-1B in absolute value, we compute the jmaxth column of A-1B and look
for the largest component in absolute value. Since the condition estimates cost O (n2) flops,
the resulting algorithm will take nearly the same number of flops as QR with column pivoting
when at most a few interchanges are needed. As Algorithm 6 could take O(n) interchanges
and all condition estimation techniques can fail, Algorithm 6 could be very inefficient and can
fail as well, although we believe that this is quite unlikely in practical applications.
Most of the floating-point operations in Algorithms 5 and 6 can be expressed as Level-2
BLAS. Using ideas similar to those in and , it should be straightforward to develop
block versions of these algorithms so that most of the floating-point operations are performed
as Level-3 BLAS.
The restriction m > n is not essential and can be removed with minor modifications to
Algorithms 5 and 6. Thus these algorithms can also be used to compute a strong RRQR factorization for Mr, which may be preferable when one wants to compute an orthogonal basis
for the right approximate null space.
Finally, the techniques developed in this paper can easily be adopted to compute rankrevealing LU factorizations . This result will be reported at a later date.
Acknowledgments. The authors thank Shivkumar Chandrasekaran and Ilse Ipsen for
many helpful discussions and suggestions, and Gene Golub, Per Christian Hansen, W. Kahan,
and Pete Stewart for suggestions that improved the presentation.