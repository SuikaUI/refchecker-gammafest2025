HAL Id: hal-00911179
 
Submitted on 13 Sep 2014
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of scientific research documents, whether they are published or not.
The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.
Learning and Transferring Mid-Level Image
Representations using Convolutional Neural Networks
Maxime Oquab, Léon Bottou, Ivan Laptev, Josef Sivic
To cite this version:
Maxime Oquab, Léon Bottou, Ivan Laptev, Josef Sivic. Learning and Transferring Mid-Level Image
Representations using Convolutional Neural Networks. IEEE Conference on Computer Vision and
Pattern Recognition, Jun 2014, Columbus, OH, United States. ￿hal-00911179v2￿
Learning and Transferring Mid-Level Image Representations
using Convolutional Neural Networks
Maxime Oquab1,∗
Leon Bottou2
Ivan Laptev1,∗
Josef Sivic1,∗
1INRIA, Paris, France
2MSR, New York, USA
Convolutional neural networks (CNN) have recently shown
outstanding image classiﬁcation performance in the largescale visual recognition challenge (ILSVRC2012). The success of CNNs is attributed to their ability to learn rich midlevel image representations as opposed to hand-designed
low-level features used in other image classiﬁcation methods. Learning CNNs, however, amounts to estimating millions of parameters and requires a very large number of
annotated image samples. This property currently prevents
application of CNNs to problems with limited training data.
In this work we show how image representations learned
with CNNs on large-scale annotated datasets can be efﬁciently transferred to other visual recognition tasks with
limited amount of training data. We design a method to
reuse layers trained on the ImageNet dataset to compute
mid-level image representation for images in the PASCAL
VOC dataset. We show that despite differences in image
statistics and tasks in the two datasets, the transferred representation leads to signiﬁcantly improved results for object
and action classiﬁcation, outperforming the current state of
the art on Pascal VOC 2007 and 2012 datasets. We also
show promising results for object and action localization.
1. Introduction
Object recognition has been a driving motivation for research in computer vision for many years. Recent progress
in the ﬁeld has allowed recognition to scale up from a few
object instances in controlled setups towards hundreds of
object categories in arbitrary environments. Much of this
progress has been enabled by the development of robust
image descriptors such as SIFT and HOG , bagof-features image representations as well
as deformable part models . Another enabling factor
has been the development of increasingly large and realistic image datasets providing object annotation for training
and testing, such as Caltech256 , Pascal VOC and
ImageNet .
Although being less common in recent years, neural net-
∗WILLOW project-team, D´epartement d’Informatique de l’´Ecole Normale Sup´erieure, ENS/Inria/CNRS UMR 8548, Paris, France.
diningtable
pottedplant
Figure 1: Recognition and localization results of our method for
a Pascal VOC test image. Output maps are shown for six object
categories with the highest responses.
works have a long history in visual recognition. Rosenblatt’s Mark I Perceptron arguably was one of the
ﬁrst computer vision systems. Inspired by the neural connectivity pattern discovered by Hubel and Wiesel ,
Fukushima’s Neocognitron extended earlier networks
with invariance to image translations. Combining the backpropagation algorithm with the Neocognitron architecture, convolutional neural networks quickly
achieved excellent results in optical character recognition
leading to large-scale industrial applications .
Convolutional neural networks (CNN) are high-capacity
classiﬁers with very large numbers of parameters that must
be learned from training examples. While CNNs have been
advocated beyond character recognition for other vision
tasks including generic object recognition ,
their performance was limited by the relatively small sizes
of standard object recognition datasets.
Notably, many successful image classiﬁcation pipelines
share aspects of the Neocognitron and convolutional neural
networks. Quantizing and spatially aggregating local descriptors arguably produces low-level image features comparable to those computed by the ﬁrst two layers
of the Neocognitron. It is therefore possible that these manually designed pipelines only outperformed earlier CNNs
because CNNs are hard to train using small datasets.
This situation has changed with the appearance of the
large-scale ImageNet dataset and the rise of GPU computing. Krizhevsky et al. achieve a performance leap
in image classiﬁcation on the ImageNet 2012 Large-Scale
Visual Recognition Challenge , and further
improve the performance by training a network on all 15
million images and 22,000 ImageNet classes. As much as
this result is promising and exciting, it is also worrysome.
Will we need to collect millions of annotated images for
each new visual recognition task in the future?
It has been argued that computer vision datasets have
signiﬁcant differences in image statistics .
For example, while objects are typically centered in Caltech256
and ImageNet datasets, other datasets such as Pascal VOC
and LabelMe are more likely to contain objects embedded in a scene (see Figure 3). Differences in viewpoints,
scene context, “background” (negative class) and other factors, inevitably affect recognition performance when training and testing across different domains . Similar phenomena have been observed in other areas such as
NLP . Given the “data-hungry” nature of CNNs and the
difﬁculty of collecting large-scale image datasets, the applicability of CNNs to tasks with limited amount of training
data appears as an important open problem.
To address this problem, we propose to transfer image representations learned with CNNs on large datasets to
other visual recognition tasks with limited training data. In
particular, we design a method that uses ImageNet-trained
layers of CNN to compute efﬁcient mid-level image representation for images in Pascal VOC. We analyze the transfer
performance and show signiﬁcant improvements on the Pascal VOC object and action classiﬁcation tasks, outperforming the state of the art. We also show promising results for
object and action localization. Results of object recognition
and localization by our method are illustrated in Figure 1.
In the following we discuss related work in Section 2.
Sections 3 and 4 present our method and experiments, respectively.
2. Related Work
Our method is related to numerous works on transfer
learning, image classiﬁcation, and deep learning, which we
brieﬂy discuss below.
Transfer learning.
Transfer learning aims to transfer
knowledge between related source and target domains .
In computer vision, examples of transfer learning include which try to overcome the deﬁcit of training
samples for some categories by adapting classiﬁers trained
for other categories. Other methods aim to cope with different data distributions in the source and target domains for
the same categories, e.g. due to lighting, background and
view-point variations . These and other related
methods adapt classiﬁers or kernels while using standard
image features. Differently to this work, we here transfer
image representations trained on the source task.
More similar to our work, trains CNNs on unsupervised pseudo-tasks. Differently to we pre-train the convolutional layers of CNNs on a large-scale supervised task
and address variations in scale and position of objects in
the image. Transfer learning with CNNs has been also explored for Natural Language Processing in a manner
closely related to our approach. Other recent efforts done in
parallel with our work also propose transferring image representations learnt from the large-scale fully-labelled ImageNet dataset using the convolutional neural network architecture of . However, they investigate transfer to other
visual recognition tasks such as Caltech256 image classi-
ﬁcation , scene classiﬁcation and object localization .
Visual object classiﬁcation.
Most of the recent image classiﬁcation methods follow the bag-of-features
pipeline . Densely-sampled SIFT descriptors are
typically quantized using unsupervised clustering (k-means,
GMM). Histogram encoding , spatial pooling 
and more recent Fisher Vector encoding are common
methods for feature aggregation. While such representations have been shown to work well in practice, it is unclear
whether they should be optimal for the task. This question
raised considerable interest in the subject of mid-level features , and feature learning in general .
The goal of this work is to show that convolutional network
layers provide generic mid-level image representations that
can be transferred to new tasks.
Deep Learning.
The recent revival of interest in multilayer neural networks was triggered by a growing number of
works on learning intermediate representations, either using
unsupervised methods, as in , or using more traditional supervised techniques, as in .
3. Transferring CNN weights
The CNN architecture of contains more than 60 million parameters. Directly learning so many parameters from
only a few thousand training images is problematic. The
key idea of this work is that the internal layers of the CNN
can act as a generic extractor of mid-level image representation, which can be pre-trained on one dataset (the source
task, here ImageNet) and then re-used on other target tasks
C1-C2-C3-C4-C5
African elephant
Wall clock
Green snake
Yorkshire terrier
Source task
Training images Sliding patches
Background
TV/monitor
Convolutional layers
Fully-connected layers
Source task labels
Target task labels
parameters
1 : Feature
2 : Feature
3 : Classifier
C1-C2-C3-C4-C5
Target task
Training images
New adaptation
layers trained
on target task
Figure 2: Transferring parameters of a CNN. First, the network is trained on the source task (ImageNet classiﬁcation, top row) with
a large amount of available labelled images. Pre-trained parameters of the internal layers of the network (C1-FC7) are then transferred to
the target tasks (Pascal VOC object or action classiﬁcation, bottom row). To compensate for the different image statistics (type of objects,
typical viewpoints, imaging conditions) of the source and target data we add an adaptation layer (fully connected layers FCa and FCb) and
train them on the labelled data of the target task.
(here object and action classiﬁcation in Pascal VOC), as illustrated in Figure 2. However, this is difﬁcult as the labels and the distribution of images (type of objects, typical
viewpoints, imaging conditions, etc.) in the source and target datasets can be very different, as illustrated in Figure 3.
To address these challenges we (i) design an architecture
that explicitly remaps the class labels between the source
and target tasks (Section 3.1), and (ii) develop training and
test procedures, inspired by sliding window detectors, that
explicitly deal with different distributions of object sizes,
locations and scene clutter in source and target tasks (Sections 3.2 and 3.3).
3.1. Network architecture
For the source task, we use the network architecture of Krizhevsky et al. .
The network takes as
input a square 224 × 224 pixel RGB image and produces a distribution over the ImageNet object classes.
This network is composed of ﬁve successive convolutional layers C1.. . C5 followed by three fully connected
layers FC6. . . FC8 (Figure 2, top).
Please refer to 
for the description of the geometry of the ﬁve convolutional layers and their setup regarding contrast normalization and pooling.
The three fully connected layers then
compute Y6 =σ(W6Y5 + B6), Y7 =σ(W7Y6 + B7),
and Y8 =ψ(W8Y7 + B8), where Yk denotes the output of the k-th layer, Wk, Bk are the trainable parameters of the k-th layer, and σ(X)[i]=max(0, X[i]) and
ψ(X)[i]=eX[i]/ P
j eX[j] are the “ReLU” and “SoftMax”
non-linear activation functions.
For target tasks (Pascal VOC object and action classiﬁcation) we wish to design a network that will output scores for
target categories, or background if none of the categories
are present in the image. However, the object labels in the
source task can be very different from the labels in the target task (also called a “label bias” ). For example, the
source network is trained to recognize different breeds of
dogs such as husky dog or australian terrier, but the
target task contains only one label dog. The problem becomes even more evident for the target task of action classi-
ﬁcation. What object categories in ImageNet are related to
the target actions reading or running ?
In order to achieve the transfer, we remove the output
layer FC8 of the pre-trained network and add an adaptation
layer formed by two fully connected layers FCa and FCb
(see Figure 2, bottom) that use the output vector Y7 of the
layer FC7 as input. Note that Y7 is obtained as a complex
non-linear function of potentially all input pixels and may
capture mid-level object parts as well as their high-level
conﬁgurations . The FCa and FCb layers compute
Ya =σ(WaY7 + Ba) and Yb =ψ(WbYa + Bb), where
Wa, Ba, Wb, Bb are the trainable parameters. In all our
experiments, FC6 and FC7 have equal sizes (either 4096 or
6144, see Section 4), FCa has size 2048, and FCb has a size
equal to the number of target categories.
The parameters of layers C1. . . C5, FC6 and FC7 are ﬁrst
trained on the source task, then transferred to the target task
and kept ﬁxed. Only the adaptation layer is trained on the
target task training data as described next.
Pascal VOC
Figure 3: Illustration of different dataset statistics between the
source (ImageNet) and target (Pascal VOC) tasks. Pascal VOC
data displays objects embedded in complex scenes, at various
scales (right), and in complex mutual conﬁgurations (middle).
Left: Image from ImageNet with label maltese terrier.
Middle and right: Images from Pascal VOC with label dog.
3.2. Network training
First, we pre-train the network using the code of on
the ImageNet classiﬁcation source task. Each image typically contains one object centered and occupying signiﬁcant
portion of the image with limited background clutter as illustrated in Figure 3(left). The network is trained to predict
the ImageNet object class label given the entire image as
input. Details are given in Section 4.
As discussed above, the network is pre-trained to classify source task images that depict single centered objects.
The images in the target task, however, often depict complex scenes with multiple objects at different scales and orientations with signiﬁcant amount of background clutter, as
illustrated in Figure 3 (middle and right). In other words,
the distribution of object orientations and sizes as well as,
for example, their mutual occlusion patterns is very different between the two tasks. This issue has been also called
“a dataset capture bias” . In addition, the target task
may contain many other objects in the background that are
not present in the source task training data (a “negative data
bias” ). To explicitly address these issues we train the
adaptation layer using a procedure inspired by training sliding window object detectors (e.g. ) described next.
We employ a sliding window strategy and extract around
500 square patches from each image by sampling eight different scales on a regularly-spaced grid with at least 50%
overlap between neighboring patches. More precisely, we
use square patches of width s = min(w, h)/λ pixels, where
w and h are the width and height of the image, respectively,
and λ ∈{1,1.3,1.6,2,2.4,2.8,3.2,3.6,4}. Each patch is rescaled
to 224 × 224 pixels to form a valid input for the network.
Sampled image patches may contain one or more objects, background, or only a part of the object. To label
patches in training images, we measure the overlap between
the bounding box of a patch P and ground truth bounding
boxes B of annotated objects in the image. The patch is labelled as a positive training example for class o if there exists a Bo corresponding to class o such that (i) Bo overlaps
sufﬁciently with the patch |P ∩Bo| ≥0.2|P|, (ii) the patch
contains large portion of the object |P ∩Bo| ≥0.6|Bo|,
and (iii) the patch overlaps with no more than one object.
In the above deﬁnitions |A| measures the area of the bound-
no overlap
background
2 labels : delete
background
Multi-scale
overlapping
input image :
no overlap
background
Figure 4: Generating training data for the target task. The
input image (top) is divided into multi-scale overlapping patches
(bottom). Each patch is labelled with an object label (green) or
as background (red) depending on the overlap with object bounding boxes. Note that object patches are similar in appearance to
the training data for the source task containing mostly centered
ing box A. Our labeling criteria are illustrated in Figure 4.
Dealing with background.
As discussed above, the target task has an additional background label for patches
that do not contain any object. One additional difﬁculty
is that the training data is unbalanced: most patches from
training images come from background. This can be addressed by re-weighting the training cost function, which
would amount to re-weighting its gradients during training. We opt for a slightly different procedure and instead
re-sample the training patches to balance the training data
distribution.
This resampled training set is then used to
form mini-batches for the stochastic gradient descent training. This is implemented by sampling a random 10% of the
training background patches.
3.3. Classiﬁcation
At test time we apply the network to each of the (approximately) 500 overlapping multi-scale patches extracted
from the test image. Examples of patch scores visualized
over entire images are shown in Figures 1 and 5. We use
the following aggregation formula to compute the overall
score for object Cn in the image
score(Cn) = 1
y(Cn|Pi)k,
where y(Cn|Pi) is the output of the network for class Cn
on image patch Pi, M is the number of patches in the image, and k ≥1 is a parameter. Higher values of k focus on
the highest scoring patches and attenuate the contributions
of low- and mid-scoring patches. The value of k = 5 was
optimized on the validation set and is ﬁxed in our experiments.
Note that patch scores could be computed much more
efﬁciently by performing large convolutions on adequately
subsampled versions of the full image, as described for instance in . This would permit a denser patch coverage
at a lower computation cost.
4. Experiments
In this section we ﬁrst describe details of training, and
discuss pre-training results for the source task of ImageNet
object classiﬁcation. We next show experimental results of
the proposed transfer learning method on the target Pascal
VOC object classiﬁcation task for both VOC 2007 and VOC
2012 datasets. We also investigate the dependency of results
on the overlap of source and target tasks by object classes.
Finally, we apply the proposed transfer learning method on
a very different task of action recognition in still images.
Training convolutional networks.
All our training sessions were carried out using the code provided by
Krizhevsky et al. and replicating their exact dropout
and jittering strategies. However, we do not alter the RGB
intensities and we use a single GeForce GTX Titan GPU
with 6GB of memory instead of the two GPUs of earlier
generation used in . The training procedure periodically
evaluates the cross-entropy objective function on a subset of
the training set and on a validation set. The initial learning
rates are set to 0.01 and the network is trained until the training cross-entropy is stabilized. The learning rates are then
divided by 10 and the training procedure repeats. We stop
training after three iterations. We have not tuned parameters for this part of the algorithm and we did not observe
overﬁtting on the validation set.
Image classiﬁcation on ImageNet.
We ﬁrst train a single
convolutional network on the 1000 classes and 1.2 million
images of the ImageNet 2012 Large Scale Visual Recognition Challenge . This network has exactly
the same structure as the network described in . Layers FC6 and FC7 have 4096 units. Training lasts about one
week. The resulting network achieves a 18% top-5 error
rate1, comparable to the 17% reported by for a single
network. This slight performace loss could be caused by the
absence of RGB intensity manipulation in our experiments.
Image classiﬁcation on Pascal VOC 2007.
We apply our
mid-level feature transfer scheme to the Pascal VOC 2007
object classiﬁcation task. Results are reported in Table 1.
Our transfer technique (PRE-1000C) demonstrates signiﬁcant improvements over previous results on this data outperforming the 2007 challenge winners (INRIA) by 18.3%
and the more recent work of (NUS-PSL) by 7.2%.
15 guesses are allowed.
Image classiﬁcation on Pascal VOC 2012.
We next apply our method to the Pascal VOC 2012 object classiﬁcation task. Results are shown in the row PRE-1000C of Table 2. Although these results are on average about 4% inferior to those reported by the winners of the 2012 challenge
(NUS-PSL ), our method outperforms on ﬁve out
of twenty classes. To estimate the performance boost provided by the feature transfer, we compare these results to
the performance of an identical network directly trained on
the Pascal VOC 2012 training data (NO PRETRAIN) without
using any external data from ImageNet. Notably, the performance drop of nearly 8% in the case of NO PRETRAIN
clearly indicates the positive effect of the proposed transfer.
Transfer learning and source/target class overlap.
source ILSVRC-2012 dataset contains target-related object
classes, in particular, 59 species of birds and 120 breeds of
dogs related to the bird and dog classes of Pascal VOC. To
understand the inﬂuence of this overlap on our results, we
have pre-trained the network on a source task data formed
by 1,000 ImageNet classes selected, this time, at random
among all the 22,000 available ImageNet classes. Results
of this experiment are reported in Table 2, row PRE-1000R.
The overall performance has decreased slightly, indicating
that the overlap between classes in the source and target domains may have a positive effect on the transfer. Given the
relatively small performance drop, however, we conclude
that our transfer procedure is robust to changes of source
and target classes. As the number of training images in this
experiment was about 25% smaller than in the ILSVRC-
2012 training set (PRE-1000C), this could have been another reason for the decrease of performance.
Conversely, we have augmented the 1,000 classes of the
ILSVRC-2012 training set with 512 additional ImageNet
classes selected to increase the overlap with speciﬁc
classes in the Pascal VOC target task.
We included all
the ImageNet classes located below the hoofed mammal
(276 classes), furniture (165), motor vehicle (48),
public transport (18),
bicycle (5) nodes of the
WordNet hierarchy.
In order to accommodate the larger
number of classes, we also increased the size of the FC6 and
FC7 layers from 4,096 to 6,144 dimensions. Training on the
resulting 1.6 million images achieves a 21.8% top-5 error
rate on the 1,512 classes. Using this pre-trained network we
have obtained further improvements on the target task, outperforming the winner of Pascal VOC 2012 on average
(row PRE-1512 in Table 2). In particular, improvements
are obtained for categories (cow, horse, sheep, sofa,
chair, table) related to the added classes in the source
task. By comparing results for PRE-1000R, PRE-1000C
and PRE-1512 setups, we also note the consistent improvement of all target classes. This suggests that the number of
images and classes in the source task might be decisive for
the performance in the target task. Hence, we expect further
improvements by our method using larger source tasks.
plane bike
chair cow table
horse moto pers plant sheep sofa train
INRIA 
63.6 56.1 71.9 33.1 60.6 78.0 58.8
50.6 79.2 53.2
NUS-PSL 
79.6 64.8 73.4 54.2 75.0 77.5 79.2
67.5 83.6 70.6
81.5 87.9 82.0 47.5 75.5 90.1 87.2
58.0 90.4 77.9
Table 1: Per-class results for object classiﬁcation on the VOC2007 test set (average precision %).
plane bike
chair cow table
horse moto pers plant sheep sofa train
NUS-PSL 
84.2 80.8 85.3 60.8 89.9 86.8 89.3
73.4 94.5 80.7
NO PRETRAIN
75.0 69.4 66.2 48.8 82.1 79.5 79.8
49.3 80.0 76.7
78.4 87.7 80.9 57.3 85.0 81.6 89.4
54.3 88.0 78.3
77.9 83.8 80.0 55.8 82.7 79.0 84.3
52.9 83.8 75.7
82.9 88.2 84.1 60.3 89.0 84.4 90.7
62.3 91.1 79.8
Table 2: Per-class results for object classiﬁcation on the VOC2012 test set (average precision %).
jumpphon instr read bike horse run photcompwalk mAP
STANFORD 75.7 44.8 66.6 44.4 93.2 94.2 87.6 38.4 70.6 75.6 69.1
OXFORD 
77.0 50.4 65.3 39.5 94.1 95.9 87.7 42.7 68.6 74.5 69.6
NO PRETRAIN 43.2 30.6 50.2 25.0 76.8 80.7 75.2 22.2 37.9 55.6 49.7
73.4 44.8 74.8 43.2 92.1 94.3 83.4 45.7 65.5 66.8 68.4
74.8 46.0 75.6 45.3 93.5 95.0 86.5 49.3 66.7 69.5 70.2
Table 3: Pascal VOC 2012 action classiﬁcation results (AP %).
Varying the number of adaptation layers.
We have also
tried to change the number of adaptation layers in the best
performing PRE-1512 training set-up. Using only one fully
connected adaptation layer FCb of size 21 (the number of
categories) results in about 1% drop in performance. Similarly, increasing the number of adaptation layers to three also results in about
1% drop in classiﬁcation performance.
Object localization.
Although our method has not been
explicitly designed for the task of localization, we have
observed strong evidence of object and action localization
provided by the network at test time. For qualitative assessment of localization results, we compute an output map
for each category by averaging the scores of all the testing
patches covering a given pixel of the test image. Examples
of such output maps are given in Figures 1 and 5 as well
as on the project webpage . This visualization clearly
demonstrates that the system knows the size and locations
of target objects within the image. Addressing the detection
task seems within reach.
Action recognition.
The Pascal VOC 2012 action recognition task consists of 4588 training images and 4569 test
images featuring people performing actions among ten categories such as jumping, phoning, playing instrument
or reading.
This ﬁne-grained task differs from the
object classiﬁcation task because it entails recognizing
ﬁne differences in human poses (e.g.
running v.s.
walking) and subtle interactions with objects (phoning
or taking photo). Training samples with multiple simultaneous actions are excluded from our training set.
To evaluate how our transfer method performs on this
very different target task, we use a network pre-trained
on 1512 ImageNet object classes and apply our transfer
methodology to the Pascal VOC action classiﬁcation task.
Since the bounding box of the person performing the action is known at testing time, both training and testing are
performed using a single square patch per sample, centered
on the person bounding box.
Extracting the patch possibly involves enlarging the original image by mirroring
pixels. The results are summarized in row PRE-1512 Table 3. The transfer method signiﬁcantly improves over the
NO PRETRAIN baseline where the CNN is trained solely on
the action images from Pascal VOC, without pretraining on
ImageNet. In particular, we obtain best results on challenging categories playing instrument and taking photo.
In order to better adapt the CNN to the subtleties of the
action recognition task, and inspired by , our last results were obtained by training the target task CNN without freezing the FC6 weights.
More precisely, we copy
the ImageNet-trained weights of layers C1. . . C5, FC6 and
FC7, we append the adaptation layers FCa and FCb, and
we retrain layers FC6, FCa, and FCb on the action recognition data. This strategy increases the performance on all
action categories (row PRE-1512U in Table 3), yielding, to
the best of our knowledge, the best average result published
on the Pascal VOC 2012 action recognition task.
To demonstrate that we can also localize the action in the
image, we train the network in a sliding window manner, as
described in Section 3. In particular, we use the ground truth
person bounding boxes during training, but do not use the
ground truth person bounding boxes at test time. Example
output maps shown in Figure 5 clearly demonstrate that the
network provides an estimate of the action location in the
Failure modes.
Top-ranked false positives in Figure 5
correspond to samples closely resembling target object
classes. Resolving some of these errors may require highlevel scene interpretation.
Our method may also fail to
recognize spatially co-occurring objects (e.g., person on a
chair) since patches with multiple objects are currently excluded from training.
This issue could be addressed by
changing the training objective to allow multiple labels per
sample. Recognition of very small or very large objects
could also fail due to the sparse sampling of patches in our
current implementation. As mentioned in Section 3.3 this
issue could be resolved using a more efﬁcient CNN-based
implementation of sliding windows.
5. Conclusion
Building on the performance leap achieved by on
ILSVRC-2012, we have shown how a simple transfer learning procedure yields state-of-the-art results on challenging
benchmark datasets of much smaller size. We have also
demonstrated the high potential of the mid-level features
extracted from an ImageNet-trained CNNs. Although the
performance of this setup increases when we augment the
source task data, using only 12% of the ImageNet corpus already leads to the best published results on the Pascal VOC
2012 classiﬁcation and action recognition tasks. Our work
is part of the recent evidence that convolutional neural networks provide means to learn rich mid-level
image features transferrable to a variety of visual recognition tasks. The code of our method is available at .
Acknowledgements.
The authors would like to thank Alex
Krizhevsky for making his convolutional neural network code
available.
This work is partly supported by the Quaero Programme, funded by OSEO, the MSR-INRIA laboratory, ERC
grant Activia, and the EIT ICT Labs.