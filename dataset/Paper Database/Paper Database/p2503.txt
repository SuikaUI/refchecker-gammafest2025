Mind the Class Weight Bias: Weighted Maximum Mean Discrepancy
for Unsupervised Domain Adaptation
Hongliang Yan1, Yukang Ding1, Peihua Li2, Qilong Wang2, Yong Xu3, Wangmeng Zuo1,∗
1School of Computer Science and Technology, Harbin Institute of Technology, Harbin, China
2School of Information and Communication Engineering, Dalian University of Technology, Dalian, China
3Bio-Computing Research Center, Shenzhen Graduate School, Harbin Institute of Technology, Shenzhen, China
 , , ,
 , , 
In domain adaptation, maximum mean discrepancy
(MMD) has been widely adopted as a discrepancy metric between the distributions of source and target domains.
However, existing MMD-based domain adaptation methods
generally ignore the changes of class prior distributions,
i.e., class weight bias across domains. This remains an
open problem but ubiquitous for domain adaptation, which
can be caused by changes in sample selection criteria and
application scenarios. We show that MMD cannot account
for class weight bias and results in degraded domain adaptation performance. To address this issue, a weighted MMD
model is proposed in this paper. Speciﬁcally, we introduce
class-speciﬁc auxiliary weights into the original MMD for
exploiting the class prior probability on source and target
domains, whose challenge lies in the fact that the class label
in target domain is unavailable. To account for it, our proposed weighted MMD model is deﬁned by introducing an
auxiliary weight for each class in the source domain, and
a classiﬁcation EM algorithm is suggested by alternating
between assigning the pseudo-labels, estimating auxiliary
weights and updating model parameters. Extensive experiments demonstrate the superiority of our weighted MMD
over conventional MMD for domain adaptation.
1. Introduction
Deep convolutional neural networks (CNNs) have
achieved great success in various computer vision tasks
such as image classiﬁcation , object detection and
semantic segmentation . Besides the inspiring progress
in model and learning, the achievement of CNN is undoubtedly attributed to the availability of massive labeled
∗Corresponding author.
Figure 1. Class prior distributions of three domains for digit recognition. As is shown, class bias exists across domains. It is natural
to see that the class weight of 0 and 1 are relatively high in postal
service (USPS), and the class weight of 1 and 2 are relatively high
in house numbers (SVHN).
datasets. For a CNN trained on large scale datasets ,
while the lower layers of features are safely transferable, the
learned features gradually moves from general to speciﬁc
along the network . When the source and target tasks
are signiﬁcantly diverse, the CNN pretrained on the source
task may not generalize well to the target task. Such scenario leads to an emerging topic to transfer the CNN from
the source task to the target task with the enhanced and discriminative representation . In this work, we study a special type of transfer learning task, i.e., domain adaptation
(DA) .
One of the most fruitful lines for DA is MMD-based
method .
Despite the great success
achieved, existing ones generally ignore the changes of
class prior distributions, dubbed by class weight bias. It
is ubiquitous for domain adaptation and can be caused by
changes in sample selection criteria and application
scenarios .
As shown in Fig. 1, the class prior distributions (i.e., class weights) vary with domains for digit
recognition. Moreover, a special case of class weight bias
Figure 2. Results of minimizing MMD and WMMD regularizer under class weight bias are illustrated in (a) and (b), respectively. Minimizing MMD preserves the class weights in source domain and thus the target samples will be wrongly estimated, as indicated by yellow
samples. On the contrary, the proposed weighted MMD removes the effect of class bias by ﬁrst reweighting source data.
is the imbalanced cross-domain data problem where
several classes in source domain do not appear in target domain, as shown in Fig. 2.
The Closest Common
Space Learning (CCSL) method in is suggested for
imbalanced and multiple cross-domain visual classiﬁcation. However, CCSL just combines conventional MMD
with domain-dependent MMD without explicitly considering class weight bias.
For MMD-based methods, the ignorance of class weight
bias can deteriorate the domain adaptation performance. In
the case of class weight bias, the MMD can be minimized
by either learning domain-invariant representation or preserving the class weights in source domain. As illustrated
in Fig. 2 (a), it is unreasonable for domain adaptation to require that the class weights in target domain should keep
the same as those in source domain. Our empirical experiments also reveal the limitation of MMD in coping with
class weight bias (See Fig. 4).
In this paper, we propose a weighted MMD (WMMD)
method to address the issue of class weight bias. As for
DA, the challenge is that the class labels in target domain
are unknown. So we ﬁrst introduce class-speciﬁc auxiliary weights to reweight the source samples. In this way,
the reweighted source data are expected to share the same
class weights with target data. The auxiliary weights estimation and model parameters learning are jointly optimized by minimizing the objective function of weighted
MMD. Different from MMD, the objective function based
on our weighted MMD involves additional weight parameters, and we present a classiﬁcation EM (CEM) scheme to
estimate it. Inspired by the semi-supervised logistic regression in , we propose a weighted Domain Adapation Network (WDAN) by both incorporating the weighted MMD
into CNN and taking into account the empirical loss on target samples. The CEM algorithm are developed for learning
WDAN in three steps, i.e., E-step, C-step, and M-step. In
the E-step and the C-step, we calculate the class posterior
probability, assign the pseudo-labels to the target samples,
and estimate the auxiliary weight. In the M-step, model
parameters are updated by minimizing the objective loss.
Experimental results show our weighted MMD can learn
better domain-invariant representation for domain adaptation. Moreover, the models based on weighted MMD also
outperforms the MMD-based counterparts. In summary, the
main contributions of this work are three-fold:
1. A weighted MMD model is proposed to alleviate the
effect of class weight bias in domain adaptation. By
taking class prior distributions into account, weighted
MMD can provide a better metric for domain discrepancy.
2. Using unbiased estimate of multi-kernel MMD , our proposed weighted MMD can be computed as
mean embedding matching with linear time complexity and be incorporated into CNN for unsupervised domain adaptation. We further develop a CEM algorithm
for training the weighted MMD model.
3. Experiments demonstrate that weighted MMD outperforms MMD for domain adaptation. The superiority of
weighted MMD over MMD has been veriﬁed on various CNN architectures and different datasets.
In the remainder of this paper, we begin with a brief
introduction to the preliminaries and related work in Section 2.
In Section 3, by considering class weight bias,
we propose weighted MMD on the basis of conventional
MMD. After that, in Section 4, we apply weighted MMD
to unsupervised domain adaptation and present a model
named WDAN. Extensive experimental results are given
in Section 5 to verify the effectiveness of our proposed
weighted MMD model and detailed empirical analysis to
our proposed model is provided. Finally, we conclude this
work in Section 6.
2. Preliminaries and Related Work
In this section, we ﬁrst review MMD and its application
in domain adaptation, and then survey several other methods used to measure domain discrepancy.
2.1. MMD and Its Application in Domain Adaptation
Domain adaptation aims at adapting the discriminative
model learned on source domain into target domain. Depending on the accessibility of class labels for target samples during training, research lines can be grouped into three
categories: supervised, semi-supervised, and unsupervised
domain adaptation.
In this paper, we focus on learning
transferable CNN features for unsupervised domain adaptation (UDA), where the labels of all target samples are unknown during training. Compared with the other settings,
UDA is more ubiquitous in real-world applications.
Due to the unavailability of labels in the target domain,
one commonly used strategy of UDA is to learn domain invariant representation via minimizing the domain distribution discrepancy. Maximum Mean Discrepancy (MMD) is
an effective non-parametric metric for comparing the distributions based on two sets of data . Given two distributions s and t, by mapping the data to a reproducing kernel
Hilbert space (RKHS) using function φ(·), the MMD between s and t is deﬁned as,
MMD2(s, t) =
Exs∼s [φ(xs)] −Ext∼t
where Exs∼s [·] denotes the expectation with regard to the
distribution s, and ∥φ∥H ≤1 deﬁnes a set of functions in the
unit ball of a RKHS H. Based on the statistical tests deﬁned
by MMD, we have MMD(s, t) = 0 iff s = t. Denote
by Ds = {xs
i=1 and Dt = {xt
i=1 two sets of samples
drawn i.i.d. from the distributions s and t, respectively. An
empirical estimate of MMD can be given by ,
MMD2(Ds, Dt) =
where φ(·) denotes the feature map associated with the kernel map k(xs, xt) = ⟨φ(xs), φ(xt)⟩.
k(xs, xt) is usually deﬁned as the convex combination of L basis kernels
kl(xs, xt) ,
k(xs, xt) =
βlkl(xs, xt), s.t.βl ≥0,
βl = 1. (3)
Most existing domain adaptation methods are based on the MMD deﬁned in Eqn. (2) and only
linear kernel is adopted for simplicity. Because the formulation of MMD in Eqn. (2) is based on pairwise similarity and is computed in quadratic time complexity, it is prohibitively time-consuming and unsuitable for using minibatch stochastic gradient descent (SGD) in CNN-based domain adaptation methods. Gretton et al. further suggest an unbiased approximation to MMDl with linear complexity. Without loss of generality, by assuming M = N,
MMDl can then be computed as,
l (s, t) = 2
where hl is an operator deﬁned on a quad-tuple zi =
hl(zi) =k(xs
2i) + k(xt
The approximation in Eqn. (4) takes a summation form and
is suitable for gradient computation in a mini-batch manner. Based on the work in , Long et al. propose
deep adaptation networks and residual transfer networks for
UDA by introducing MMDl based adaptation layers into
deep CNNs. However, the existing MMD-based UDA approaches all assume that the source and target data have the
same class prior distributions, which does not always hold
in real-world applications, as illustrated in Fig. 1. Our empirical experiments show that class weight bias can result in
performance degradation for MMD-based UDA.
2.2. Metrics for Domain Discrepancy
Besides MMD, there are several other metrics for measuring domain discrepancy. Baktashmotlagh et al. propose a distribution-matching embedding (DME) approach
for UDA, where both MMD and the Hellinger distance are
adopted to measure the discrepancy between the source
and target distributions.
Instead of embedding of distributions, discriminative methods such as domain classiﬁcation and domain confusion have also been introduced to learn domain invariant representation. However,
class weight bias is also not yet considered in these methods.
Several sample reweighting or selection methods are similar to our weighted MMD in spirit, and have
been proposed to match the source and target distributions.
These methods aim to learn sample-speciﬁc weights or select appropriate source samples for target data. Different
from them, our proposed weighted MMD alleviates class
weight bias by assigning class-speciﬁc weights to source
3. Weighted Maximum Mean Discrepancy
In this section, we will introduce the proposed weighted
MMD. Denote by ps(xs) and pt(xt) the probability density
functions of the source data xs and the target data xt, ys and
yt be the class labels of xs and xt, respectively. Actually,
both ps(xs) and pt(xt) can be further represented as the
mixtures of class conditional distributions,
pu(yu = c)pu(xu|yu = c)
c pu(xu|yu = c), u ∈{s, t},
c = ps(ys = c) and wt
c = pt(yt = c) denote the
class prior probability (i.e., class weights) of the source and
target samples, respectively, and C denotes the number of
Note that, the difference between the class conditional
distributions ps(xs|ys = c) and pt(xt|yt = c) serves as
a proper metric of domain discrepancy. However, due to
the unavailability of class labels for target data in UDA, the
MMD between ps(xs) and pt(xt) is usually adopted as a
domain discrepancy metric. When ws
c (c = 1, 2, ...,
C), we argue that it is a suitable alternative. Unfortunately,
as shown in Fig. 1, the assumption ws
c generally does
not hold. For this case, MMD cannot cope with class weight
bias across domains. We propose to construct a reference
source distribution ps,α(xs) for comparing the discrepancy
between the source and target domains. Speciﬁcally, we
require that ps,α(xs) has the same class weights with the
target domain but owns the class conditional distributions
in source domain. Let αc = wt
c. In order to eliminate
the effect of class weight bias, we deﬁne ps,α(xs) as,
ps,α(xs) =
cps(xs|ys = c).
Denote by Ds = {(xs
i=1 the training set from source
domain and Dt = {xt
j=1 the test set from the target domain. Given the class weights of the target samples, the empirical estimation of weighted MMD ps,α(xs) and pt(xt)
can be given by,
w(Ds, Dt) =
Assuming M = N, the linear time complexity approximation of weighted MMD can then be computed as,
l,w(Ds, Dt) = 2
where hl,w(zi) is an operator deﬁned on a quad-tuple zi =
hl,w(zi) = αys
2i) + k(xt
4. Weighted Domain Adaptation Network
By far, we have introduced our weighted MMD for measuring domain discrepancy. But there are two remained issues to be addressed. On one hand, the proposed weighted
MMD, similar to MMD, should be incorporated into some
classiﬁers for domain adaptation. On the other hand, the
class distribution on target domain is generally unknown
during training. In this section, we propose a weighted domain adaptation network (WDAN) model, which is in essential an extension of the semi-supervised logistic regression by adding the WMMD term and incorporating with
CNN. Meanwhile, we employ the CEM framework and
show how we optimize the proposed WDAN without the
label information of the target samples.
First, based on the research in , the features gradually become task speciﬁc as the layers go toward the top
one, resulting in increasing dataset bias for the higher layers
of features. Therefore, to generalize CNN for domain adaptation, the weighted MMD-based regularizers are added to
the higher layers of CNN. Second, the relationship between
semi-supervised learning and domain adaptation has been
studied in . To further exploit the unlabelled data on
target domain, we follow the semi-supervised CEM model
in , leading to the following WDAN model,
i ; W) + γ 1
where W denotes the model parameters to be learned, and
j=1 represent the assigned labels of target samples. λ
and γ are two tradeoff parameters. Dl
t denote the
l-th layer features of the source and target domains, respectively. ws
c is estimated based on the source data Dl
c = Mc/M, where Mc is the number of samples of the
c-th class. The ﬁrst two terms of Eqn. (11) are the soft-max
loss items on the source and target samples, respectively.
And the third term is the weighted MMD regularizers for
the l1 ∼l2-th layers deﬁned in Eqn. (8).
Next, we explain the optimization procedure of the proposed WDAN model. Following the CEM algorithm in ,
the WDAN model is optimized by alternating between:
(i) E-step: estimating the class posterior probability of
j=1, (ii) C-step: assigning pseudo-labels {ˆyj}N
estimating auxiliary weights α, (iii) M-step: updating the
model parameters W.
Given the model parameters W,
for each xt
j, we ﬁrst estimate the class posterior probability
based on the output of softmax classiﬁer. The pseudo-label
to ˆyj is assigned to xt
j based on the maximum posterior
probability, and the auxiliary weights α are then estimated
based on pseudo-labels. Given {ˆyj}N
j=1 and α, the conventional backpropagation algorithm is then deployed to update
W. In the following, we give more details on the E-step, Cstep, and M-step.
E-step: Fixed W, for each sample xt
j from target domain, the CNN output to the cth class is represented as
j; W). Here we simply deﬁne the class posterior probability p(yt
j) = gc(xt
C-step: With p(yt
j), we assign pseudo-label ˆyj
ˆyj = arg max
Let 1c(ˆyj) be an indicator function,
 1, if ˆyj = c
0, otherwise.
The class weight
can be estimated by
N, where N is the number of target samples.
Then the auxiliary weight can be updated with αc = ˆwt
M-step: Fixed α, the subproblem on W can be formulated as,
W L(W) = 1
i ; W) + γ 1
Since the gradients of the three terms in Eqn. (15) are computable, W can be updated with mini-batch SGD. Let zi =
2j) be a quad-tuple and zl
i,2 = f s,l
i,3 = f t,l
i,4 = f t,l
2i ) be the l-th layer
feature representation of zi. Given zi, the gradient with respect to the l-th layer parameter Wl can be written as,
∂ℓ(zi,j, yi,j; W)
∂ℓ(zi,j, ˆyi,j; W)
Taking k = 1 for example, ∂hl,w(zl
can be computed as,
2i−1, f s,l
2i−1, f t,l
Similarly,
can also be computed for other k
Thus, the model parameters can be updated via
backpropagaton with a mini-batch of quad-tuple. Moreover, following , the multiple kernel parameters β
can also be updated during training.
The algorithm described above actually is an extension
of classiﬁcation EM. The C-step in only assigns pseudolabel to each unlabeled sample, while in this work we further estimate the auxiliary weights α with the pseudo-labels.
As shown in , such a optimization procedure can converge to a stationary value. The experiment also empirically validate that our algorithm works well in estimating
the auxiliary weights α.
5. Experiments
In this section, we ﬁrst evaluate our proposed WDAN
on four widely used benchmarks in UDA, i.e., Ofﬁce-
10+Caltech-10 , Ofﬁce31 , ImageCLEF and
Digit Recognition. Moreover, we also provide empirical
analysis to our proposed WDAN model from three aspects, i.e., hyper-parameter sensitivity, robustness to class
weight bias, and feature visualization.
Following the common setting in UDA, we implement
our WDAN model based on four widely used CNN architectures, i.e., LeNet , AlexNet , GoogLeNet 
and VGGnet-16 .
As suggested in
 , we train
our method based on pre-trained AlexNet, VGGNet-16,
or GoogLeNet on ImageNet, with the layers from conv1
to conv3 ﬁxed for AlexNet and inception layers from
inc1 to inc3 ﬁxed for GoogLeNet. The WDAN (LeNet)
is trained from the scratch (random initialization).
addition, the auxiliary weight is initialized with αc = 1
for each class. For l1 and l2, we follow the setting in .
AlexNet 
LapCNN (AlexNet) 
DDC (AlexNet) 
DAN (AlexNet) 
WDAN (AlexNet)
WDAN⋆(AlexNet)
GoogLeNet 
DDC (GoogLeNet) 
DAN (GoogLeNet) 
WDAN (GoogLeNet)
VGGnet-16 
DAN (VGGnet-16) 
WDAN (VGGnet-16)
Table 1. Results (in %) of different methods based on AlexNet, GoogleNet and VGGnet-16 on Ofﬁce-10+Caltech-10. Note that the results
of LapCNN, DDC and DAN are duplicated from . ⋆indicates that the ground truth class distributions in both source and target domain
are used as prior.
Concretely, WMMD-based regularizers are added to the
last three fully connected layers for AlexNet, the last
inception and fully connected layers for GoogleNet, and
the last fully connected layer for LeNet. All experiments
are implemented by using Caffe Toolbox , and run
on a PC equipped with a NVIDIA GTX 1080 GPU and
32G RAM. We set the batch size to 64 for all methods,
and optimize the learning rate for each model independently.
The tradeoff parameters λ and γ are optimized
in sets {0, 0.03, 0.07, 0.1, 0.4, 0.7, 1.4, 1.7, 2} and
{0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0}
cross-validation,
respectively.
 
5.1. Comparison with State-of-the-arts
For UDA, we employ the standard protocols as , where all the samples in source and target domain are
used for training. The averaged results over 10 trials on
target domain set are reported for comparison.
Ofﬁce-10+Caltech-10
Ofﬁce-10+Caltech-10 is widely used for domain adaptation, which picks up 10 classes shared in Ofﬁce-31 
and Caltech-256 . It consists of four domains where
Amazon (A), Webcam (W) and DSLR (D) are from Ofﬁce-
31, and the another one is Caltech-256 (C). On this dataset,
we conduct experiments based on AlexNet, GoogLeNet and
VGGnet-16, and exploit the same setting as for performance comparison.
We compare our WDAN with several state-of-the-art
methods as listed in Table 1, including its MMD counterpart DAN . By AlexNet, GoogLeNet, and VGGnet-
16 we indicate to ﬁne-tune the pre-trained CNN models
for special tasks. LapCNN can be seen as a variant
of CNN, which ﬁrst shows deep structure learning can be
improved by jointly learning an embedding with the unlabeled data, and then exploits the embedding as a regularizer.
By embedding a single kernel MMD layer into CNN structure, DDC develops a uniﬁed deep framework to jointly
learn semantically meaningful feature and perform adaption
cross domain.
Numerical results in Table 1 show that our weighted
DAN achieves the best performance, independently of the
employed CNN structure. Moreover, the WDAN is superior
to DAN by 1.9%, 0.9% and 0.7%, respectively. We contribute this improvement to that our weighted MMD model
can alleviate the effect of class weight bias. In addition,
the superiority over other state-of-the-art methods demonstrate the effectiveness of the proposed WDAN. Finally, we
exploit the ground truth class distributions in both source
and target domains as prior of the proposed WDAN based
on AlexNet, which is indicated as WDAN⋆(AlexNet) in
Table 1. Although WDAN⋆can further improve the performance of WDAN, the smaller gap between them than one
between weighted DAN and DAN validate the effectiveness
of our proposed learning and estimation method.
ImageCLEF is developed for the ImageCLEF domain
adaptation task1.
This dataset collects images from ﬁve
widely used image benchmarks, including Caltech256 ,
Bing, PASCAL VOC2012 , ImageNet2012 and
1 
Table 2. Results (in %) of different methods based on GoogLeNet
on ImageCLEF dataset.
Table 3. Results (in %) of different methods based on LeNet on
Digit Classiﬁcation.
Table 4. Results (in %) of different methods based on AlexNet on
Ofﬁce-31 dataset.
SUN . This dataset is thought to be more difﬁcult, since
some domains contain low-quality images, making this
benchmark a good compliance to the Ofﬁce-10+Caltech-10,
where the domain is more similar. Different from the original experimental setting, in this paper, we use a subset of
ImageCLEF, which contains three datasets, i.e., Caltech256
(C), Bing (B) and PASCAL VOC2012 (P). Meanwhile, we
exploit all images in each subset rather than follow the standard protocol to sample the same number of images for each
class. Such setting results in six domain adaptation tasks.
We compare WDAN with three related methods based
on GoogLeNet, i.e., GoogLeNet, DDC and DAN. We implement them by using the codes released by authors2, and
try our best to optimize them. The results of the competing
methods are shown in Table 2, from which we can see that
our proposed weighted DAN obtains the best performance
in most of the cases, and achieves 1.4%, 1.2% and 0.9%
gains over GoogLeNet, DDC and DAN on average, respectively. The above results show the proposed weighted MMD
is helpful to improve the performance of domain adaptation
Digit Recognition
Furthermore, we conduct experiment on digit recognition,
which is usually adopted to domain adaptation. In this paper, we only considering training images of three benchmarks, i.e., MNIST (M), SVHN (S) and USPS (U) and conduct experiments on four tasks. As LeNet is usually
used for digit recognition, we implement our WDAN and
the competing methods based on it. Among them, SA 
proposes a subspace alignment method for domain adaptation, which aims at learning a feature mapping to align
2 
Figure 3. Performance (in %) of different methods w.r.t. λ.
source samples with target samples. For fair comparison,
we implement SA by using the features from the ﬁne-tuned
LeNet. The results reported in Table 3 clearly show that
our proposed WDAN achieves the best performance on all
tasks, and outperforms LeNet, SA and DAN by 11.7%,
10.4% and 3.7% on average, respectively. The signiﬁcant
improvements over competing methods show the proposed
weighted MMD model is effective and meaningful.
Finally, experiments are further conducted to assess WDAN
on datasets with more classes. We conduct experiments on
a dataset with 31 classes (i.e. Ofﬁce-31). There are three
domains, i.e., Amazon (A), Webcam (W) and DSLR (D),
in Ofﬁce-31.
In this part, we consider all the six UDA
tasks, and report the results using Alexnet. Table 4 shows
the results of AlexNet, DAN, and WDAN. It can be seen
that the proposed WMMD achieves better results than its
MMD counterpart, indicating that WMMD also works well
on dataset with more classes. To sum up, the promising
performance of our weighted MMD model can be veriﬁed
on various CNN architectures (i.e., AlexNet, GoogLeNet
and LeNet) and various datasets with different number of
5.2. Empirical Analysis
In this subsection, we perform empirical analysis of the
proposed WDAN from three aspects. Firstly, we evaluate
the effect of hyper-parameter λ on our proposed WDAN
model in Eqn. (11). Secondly, compared with its baselines,
i.e., Alexnet and DAN, we show our proposed WDAN is
robust to class weight bias. Finally, we make a visualization
of learned feature representations.
Effect of Parameter λ
The objective in Eqn. (11) of WDAN consists of three
terms, i.e., conventional empirical losses on the source
and target domains, and MMD-based regularizer. Generally speaking, the empirical risk term keeps the learned
deep feature to be discriminative on source domain while
the MMD-based regularizer encourages domain invariant
feature representation.
Both of this two aspects are of
essential importance for domain adaptation. The parameter λ in the objective Eqn. (11) makes a tradeoff between this two parts, and could greatly impact the performance of domain adaptation. To have a closer look at
this parameter, we evaluate our proposed WDAN based on
AlexNet on the task W→C from Ofﬁce-10+Caltech-10 under various λ. As suggested above, λ belongs to the set
{0.0, 0.03, 0.07, 0.1, 0.4, 0.7, 1, 1.4, 1.7, 2}. Meanwhile,
we also compared our WDAN model with DAN under various λ. AlexNet is reported as baseline and corresponds to
the case λ = 0. The results are illustrated in Fig. 3.
Obvious conclusions can be drawn from the results: (i)
our proposed WDAN consistently outperforms the DAN,
demonstrating that mining the class weight bias in MMD
is meaningful and beneﬁcial; (ii) WDAN and DAN achieve
the best results at λ = 0.4 and λ = 0.1, and outperforms the
baseline, i.e., AlexNet, when λ < 1.2 and λ < 1.0, respectively, indicating that an appropriate balance is important
and necessary.
Impact of Class Weight Bias
To further clarify the impact of class weight bias on MMDbased domain adaptation methods, we conduct experiments
on a variant of the task V→C from ImageCLEF based
on AlexNet. Speciﬁcally, we pick up two shared classes,
i.e., airplane and motorbike, in the source domain PASCAL
VOC2012 (V) and target domain Caltech256 (C), which
forms a two-class classiﬁcation problem.
Then we ﬁx the class weights as 0.5 for each class on
source domain and train different methods with gradually
changing the class distribution on target domain, which can
be interpreted as different level of the class weight bias
cross source and target domains. Fig. 4 show the results
of WDAN, DAN and AlexNet under different levels of the
class weighted bias. From it we can see that the class weight
bias has great inﬂuence on performance of MMD-based
domain adaptation methods. Moreover, the conventional
MMD-based methods (e.g., DAN) are limited in handling
the class weight bias, as its results signiﬁcantly degrade
with increasing class weighted bias. In addition, our proposed WDAN is more robust to class weighted bias.
Feature Visualization
Following the work in , we visualize the features
learned by WDAN and DAN on target domain in the D→C
task from Ofﬁce-10+Caltech-10. For feature visualization,
we employ the t-SNE visualization method whose
Figure 4. Performance (in %) of different methods w.r.t. class
weight bias.
Figure 5. The t-SNE visualization of learned features of different
source codes are provided3. The results of feature visualization for DAN and weighted DAN are illustrated in Fig. 5 (a)
and Fig. 5 (b), respectively. As shown in the orange boxes of
Fig. 5, features learned by the proposed WDAN can reserve
more class discrepancy distance than ones learned by DAN.
The underlying reason lies in the fact that WDAN, by considering a weighted MMD regularizer, does not minimize
the class weight bias as DAN does, which also accounts for
that weighted DAN can outperform DAN on a variety of
unsupervised domain adaptation tasks.
6. Conclusion
In this paper, we focus on the uninvestigated issue of
class weight bias in UDA, which has adverse effect on
MMD-based domain adaptation methods. We ﬁrst propose
a novel weighted MMD to reduce the effect of class weight
bias by constructing a reference source distribution based
on target distribution. For UDA, we present a weighted
DAN (WDAN) based on the proposed weighted MMD, and
develop modiﬁed the CEM learning algorithm to jointly assign pseudo-labels, estimate the auxiliary weights and learn
model parameters. Empirical results show that our proposed
WDAN outperforms its MMD counterpart, i.e., DAN, in
various domain adaptation tasks. In future, there remains
several issues to be investigated: (i) evaluation of weighted
3 
MMD on non-CNN based UDA models, (ii) applications to
other tasks (e.g., image generation) based on measuring the
discrepancy between distributions.
7. Acknowledgment
This work is supported in part by NSFC grant
(61671182, 61471082, and 61370163). The authors also
thank NVIDIA corporation for the donation of GTX 1080