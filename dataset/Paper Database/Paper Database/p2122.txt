Quantized Convolutional Neural Networks for Mobile Devices
Jiaxiang Wu, Cong Leng, Yuhang Wang, Qinghao Hu, Jian Cheng
National Laboratory of Patter Recognition
Institute of Automation, Chinese Academy of Sciences
{jiaxiang.wu, cong.leng, yuhang.wang, qinghao.hu, jcheng}@nlpr.ia.ac.cn
Recently, convolutional neural networks (CNN) have
demonstrated impressive performance in various computer
vision tasks. However, high performance hardware is typically indispensable for the application of CNN models
due to the high computation complexity, which prohibits
their further extensions. In this paper, we propose an efﬁcient framework, namely Quantized CNN, to simultaneously
speed-up the computation and reduce the storage and memory overhead of CNN models. Both ﬁlter kernels in convolutional layers and weighting matrices in fully-connected
layers are quantized, aiming at minimizing the estimation
error of each layer’s response. Extensive experiments on
the ILSVRC-12 benchmark demonstrate 4 ∼6× speed-up
and 15 ∼20× compression with merely one percentage
loss of classiﬁcation accuracy. With our quantized CNN
model, even mobile devices can accurately classify images
within one second.
1. Introduction
In recent years, we have witnessed the great success
of convolutional neural networks (CNN) in a wide
range of visual applications, including image classiﬁcation
 , object detection , age estimation ,
etc. This success mainly comes from deeper network architectures as well as the tremendous training data. However, as the network grows deeper, the model complexity is
also increasing exponentially in both the training and testing
stages, which leads to the very high demand in the computation ability. For instance, the 8-layer AlexNet involves
60M parameters and requires over 729M FLOPs1to classify
a single image. Although the training stage can be ofﬂine
carried out on high performance clusters with GPU acceleration, the testing computation cost may be unaffordable for
common personal computers and mobile devices. Due to
the limited computation ability and memory space, mobile
devices are almost intractable to run deep convolutional networks. Therefore, it is crucial to accelerate the computation
Time Consumption (s)
Storage Consumption (MB)
Memory Consumption (MB)
Top-5 Error Rate (%)
Figure 1. Comparison on the efﬁciency and classiﬁcation accuracy
between the original and quantized AlexNet and CNN-S 
on a Huawei
⃝Mate 7 smartphone.
and compress the memory consumption for CNN models.
For most CNNs, convolutional layers are the most timeconsuming part, while fully-connected layers involve massive network parameters.
Due to the intrinsical difference between them, existing works usually focus on improving the efﬁciency for either convolutional layers or
fully-connected layers.
In , lowrank approximation or tensor decomposition is adopted to
speed-up convolutional layers. On the other hand, parameter compression in fully-connected layers is explored in
 . Overall, the above-mentioned algorithms are able to achieve faster speed or less storage.
However, few of them can achieve signiﬁcant acceleration
and compression simultaneously for the whole network.
In this paper, we propose a uniﬁed framework for convolutional networks, namely Quantized CNN (Q-CNN), to
simultaneously accelerate and compress CNN models with
1FLOPs: number of FLoating-point OPerations required to classify one
image with the convolutional network.
only minor performance degradation.
With network parameters quantized, the response of both convolutional and
fully-connected layers can be efﬁciently estimated via the
approximate inner product computation. We minimize the
estimation error of each layer’s response during parameter
quantization, which can better preserve the model performance. In order to suppress the accumulative error while
quantizing multiple layers, an effective training scheme is
introduced to take previous estimation error into consideration. Our Q-CNN model enables fast test-phase computation, and the storage and memory consumption are also
signiﬁcantly reduced.
We evaluate our Q-CNN framework for image classi-
ﬁcation on two benchmarks, MNIST and ILSVRC-
12 . For MNIST, our Q-CNN approach achieves over
12× compression for two neural networks (no convolution), with lower accuracy loss than several baseline methods. For ILSVRC-12, we attempt to improve the test-phase
efﬁciency of four convolutional networks: AlexNet ,
CaffeNet , CNN-S , and VGG-16 . Generally,
Q-CNN achieves 4× acceleration and 15× compression
(sometimes higher) for each network, with less than 1%
drop in the top-5 classiﬁcation accuracy. Moreover, we implement the quantized CNN model on mobile devices, and
dramatically improve the test-phase efﬁciency, as depicted
in Figure 1. The main contributions of this paper can be
summarized as follows:
• We propose a uniﬁed Q-CNN framework to accelerate and compress convolutional networks. We demonstrate that better quantization can be learned by minimizing the estimation error of each layer’s response.
• We propose an effective training scheme to suppress
the accumulative error while quantizing the whole convolutional network.
• Our Q-CNN framework achieves 4 ∼6× speed-up
and 15 ∼20× compression, while the classiﬁcation
accuracy loss is within one percentage. Moreover, the
quantized CNN model can be implemented on mobile
devices and classify an image within one second.
2. Preliminary
During the test phase of convolutional networks, the
computation overhead is dominated by convolutional layers; meanwhile, the majority of network parameters are
stored in fully-connected layers. Therefore, for better testphase efﬁciency, it is critical to speed-up the convolution
computation and compress parameters in fully-connected
Our observation is that the forward-passing process of
both convolutional and fully-connected layers is dominated
by the computation of inner products. More formally, we
consider a convolutional layer with input feature maps S ∈
Rds×ds×Cs and response feature maps T ∈Rdt×dt×Ct,
where ds, dt are the spatial sizes and Cs, Ct are the number
of feature map channels. The response at the 2-D spatial
position pt in the ct-th response feature map is computed
(pk,ps)⟨Wct,pk, Sps⟩
where Wct ∈Rdk×dk×Cs is the ct-th convolutional kernel
and dk is the kernel size. We use ps and pk to denote the
2-D spatial positions in the input feature maps and convolutional kernels, and both Wct,pk and Sps are Cs-dimensional
vectors. The layer response is the sum of inner products at
all positions within the dk × dk receptive ﬁeld in the input
feature maps.
Similarly, for a fully-connected layer, we have:
T (ct) = ⟨Wct, S⟩
where S ∈RCs and T ∈RCt are the layer input and layer
response, respectively, and Wct ∈RCs is the weighting
vector for the ct-th neuron of this layer.
Product quantization is widely used in approximate
nearest neighbor search, demonstrating better performance
than hashing-based methods . The idea is to decompose the feature space as the Cartesian product of multiple subspaces, and then learn sub-codebooks for each subspace. A vector is represented by the concatenation of subcodewords for efﬁcient distance computation and storage.
In this paper, we leverage product quantization to implement the efﬁcient inner product computation. Let us consider the inner product computation between x, y ∈RD. At
ﬁrst, both x and y are split into M sub-vectors, denoted as
x(m) and y(m). Afterwards, each x(m) is quantized with a
sub-codeword from the m-th sub-codebook, then we have
m⟨y(m), x(m)⟩≈
m⟨y(m), c(m)
which transforms the O(D) inner product computation to
M addition operations (M ≤D), if the inner products between each sub-vector y(m) and all the sub-codewords in
the m-th sub-codebook have been computed in advance.
Quantization-based approaches have been explored in
several works .
These approaches mostly focus on compressing parameters in fully-connected layers
 , and none of them can provide acceleration for the
test-phase computation. Furthermore, require the
network parameters to be re-constructed during the testphase, which limit the compression to disk storage instead
of memory consumption. On the contrary, our approach
offers simultaneous acceleration and compression for both
convolutional and fully-connected layers, and can reduce
the run-time memory consumption dramatically.
3. Quantized CNN
In this section, we present our approach for accelerating
and compressing convolutional networks. Firstly, we introduce an efﬁcient test-phase computation process with the
network parameters quantized. Secondly, we demonstrate
that better quantization can be learned by directly minimizing the estimation error of each layer’s response. Finally,
we analyze the computation complexity of our quantized
CNN model.
3.1. Quantizing the Fully-connected Layer
For a fully-connected layer, we denote its weighting matrix as W ∈RCs×Ct, where Cs and Ct are the dimensions
of the layer input and response, respectively. The weighting
vector Wct is the ct-th column vector in W.
We evenly split the Cs-dimensional space (where Wct
lies in) into M subspaces, each of C′
s = Cs/M dimensions. Each Wct is then decomposed into M sub-vectors,
denoted as W (m)
. A sub-codebook can be learned for each
subspace after gathering all the sub-vectors within this subspace. Formally, for the m-th subspace, we optimize:
D(m)B(m) −W (m)
s.t. D(m) ∈RC′
s×K, B(m) ∈{0, 1}K×Ct
where W (m) ∈RC′
s×Ct consists of the m-th sub-vectors
of all weighting vectors. The sub-codebook D(m) contains
K sub-codewords, and each column in B(m) is an indicator vector (only one non-zero entry), specifying which subcodeword is used to quantize the corresponding sub-vector.
The optimization can be solved via k-means clustering.
The layer response is approximately computed as:
m⟨D(m)B(m)
ct , S(m)⟩
km(ct), S(m)⟩
where B(m)
is the ct-th column vector in B(m), and S(m) is
the m-th sub-vector of the layer input. km(ct) is the index
of the sub-codeword used to quantize the sub-vector W (m)
In Figure 2, we depict the parameter quantization and
test-phase computation process of the fully-connected layer.
By decomposing the weighting matrix into M sub-matrices,
M sub-codebookscan be learned, one per subspace. During
the test-phase, the layer input is split into M sub-vectors,
denoted as S(m). For each subspace, we compute the inner
products between S(m) and every sub-codeword in D(m),
and store the results in a look-up table. Afterwards, only M
addition operations are required to compute each response.
As a result, the overall time complexity can be reduced from
O(CsCt) to O(CsK + CtM). On the other hand, only
sub-codebooks and quantization indices need to be stored,
which can dramatically reduce the storage consumption.
Figure 2. The parameter quantization and test-phase computation
process of the fully-connected layer.
3.2. Quantizing the Convolutional Layer
Unlike the 1-D weighting vector in the fully-connected
layer, each convolutional kernel is a 3-dimensional tensor:
Wct ∈Rdk×dk×Cs. Before quantization, we need to determine how to split it into sub-vectors, i.e. apply subspace
splitting to which dimension. During the test phase, the input feature maps are traversed by each convolutional kernel
with a sliding window in the spatial domain. Since these
sliding windows are partially overlapped, we split each convolutional kernel along the dimension of feature map channels, so that the pre-computed inner products can be reused at multiple spatial locations. Speciﬁcally, we learn the
quantization in each subspace by:
D(m),{B(m)
s.t. D(m) ∈RC′
∈{0, 1}K×Ct
where W (m)
s×Ct contains the m-th sub-vectors of
all convolutional kernels at position pk. The optimization
can also be solved by k-means clustering in each subspace.
With the convolutional kernels quantized, we approximately compute the response feature maps by:
ct,pk, S(m)
m⟨D(m)B(m)
ct,pk, S(m)
km(ct,pk), S(m)
where S(m)
is the m-th sub-vector at position ps in the input feature maps, and km(ct, pk) is the index of the subcodeword to quantize the m-th sub-vector at position pk in
the ct-th convolutional kernel.
Similar to the fully-connected layer, we pre-compute the
look-up tables of inner products with the input feature maps.
Then, the response feature maps are approximately computed with (7), and both the time and storage complexity
can be greatly reduced.
3.3. Quantization with Error Correction
So far, we have presented an intuitive approach to quantize parameters and improve the test-phase efﬁciency of
convolutional networks. However, there are still two critical drawbacks. First, minimizing the quantization error
of model parameters does not necessarily give the optimal
quantized network for the classiﬁcation accuracy. In contrast, minimizing the estimation error of each layer’s response is more closely related to the network’s classiﬁcation performance. Second, the quantization of one layer is
independent of others, which may lead to the accumulation
of error when quantizing multiple layers. The estimation
error of the network’s ﬁnal response is very likely to be
quickly accumulated, since the error introduced by the previous quantized layers will also affect the following layers.
To overcome these two limitations, we introduce the idea
of error correction into the quantization of network parameters. This improved quantization approach directly minimizes the estimation error of the response at each layer,
and can compensate the error introduced by previous layers. With the error correction scheme, we can quantize the
network with much less performance degradation than the
original quantization method.
Error Correction for the Fully-connected Layer
Suppose we have N images to learn the quantization of a
fully-connected layer, and the layer input and response of
image In are denoted as Sn and Tn. In order to minimize
the estimation error of the layer response, we optimize:
{D(m)},{B(m)}
m(D(m)B(m))T S(m)
where the ﬁrst term in the Frobenius norm is the desired
layer response, and the second term is the approximated
layer response computed via the quantized parameters.
A block coordinate descent approach can be applied to
minimize this objective function. For the m-th subspace, its
residual error is deﬁned as:
m′̸=m(D(m′)B(m′))T S(m′)
and then we attempt to minimize the residual error of this
subspace, which is:
−(D(m)B(m))T S(m)
and the above optimization can be solved by alternatively
updating the sub-codebook and sub-codeword assignment.
Update D(m).
We ﬁx the sub-codeword assignment
B(m), and deﬁne Lk = {ct|B(m)(k, ct) = 1}. The optimization in (10) can be re-formulated as:
ct∈Lk[R(m)
(ct) −D(m)T
which implies that the optimization over one sub-codeword
does not affect other sub-codewords. Hence, for each subcodeword, we construct a least square problem from (11) to
update it.
Update B(m). With the sub-codebook D(m) ﬁxed, it
is easy to discover that the optimization of each column in
B(m) is mutually independent. For the ct-th column, its
optimal sub-codeword assignment is given by:
m(ct) = arg min
(ct) −D(m)T
Error Correction for the Convolutional Layer
We adopt the similar idea to minimize the estimation error
of the convolutional layer’s response feature maps, that is:
{D(m)},{B(m)
pk )T S(m)
The optimization also can be solved by block coordinate
descent. More details on solving this optimization can be
found in the supplementary material.
Error Correction for Multiple Layers
The above quantization method can be sequentially applied
to each layer in the CNN model. One concern is that the
estimation error of layer response caused by the previous
layers will be accumulated and affect the quantization of
the following layers. Here, we propose an effective training
scheme to address this issue.
We consider the quantization of a speciﬁc layer, assuming its previous layers have already been quantized. The
optimization of parameter quantization is based on the layer
input and response of a group of training images. To quantize this layer, we take the layer input in the quantized network as {Sn}, and the layer response in the original network (not quantized) as {Tn} in Eq. (8) and (13). In this
way, the optimization is guided by the actual input in the
quantized network and the desired response in the original
network. The accumulative error introduced by the previous layers is explicitly taken into consideration during optimization. In consequence, this training scheme can effectively suppress the accumulative error for the quantization
of multiple layers.
Another possible solution is to adopt back-propagation
to jointly update the sub-codebooks and sub-codeword assignments in all quantized layers. However, since the subcodeword assignments are discrete, the gradient-based optimization can be quite difﬁcult, if not entirely impossible.
Therefore, back-propagation is not adopted here, but could
be a promising extension for future work.
3.4. Computation Complexity
Now we analyze the test-phase computation complexity of convolutional and fully-connected layers, with or
without parameter quantization. For our proposed Q-CNN
model, the forward-passing through each layer mainly consists of two procedures: pre-computation of inner products,
and approximate computation of layer response. Both subcodebooks and sub-codeword assignments are stored for the
test-phase computation. We report the detailed comparison
on the computation and storage overhead in Table 1.
Table 1. Comparison on the computation and storage overhead of
convolutional and fully-connected layers.
kMCt log2 K
8MCt log2 K
As we can see from Table 1, the reduction in the computation and storage overhead largely depends on two hyperparameters, M (number of subspaces) and K (number of
sub-codewords in each subspace). Large values of M and
K lead to more ﬁne-grained quantization, but is less efﬁcient in the computation and storage consumption. In practice, we can vary these two parameters to balance the tradeoff between the test-phase efﬁciency and accuracy loss of
the quantized CNN model.
4. Related Work
There have been a few attempts in accelerating the testphase computation of convolutional networks, and many are
inspired from the low-rank decomposition. Denton et al.
 presented a series of low-rank decomposition designs
for convolutionalkernels. Similarly, CP-decomposition was
adopted in to transform a convolutional layer into multiple layers with lower complexity. Zhang et al. 
considered the subsequent nonlinear units while learning
the low-rank decomposition. applied group-wise pruning to the convolutional tensor to decompose it into the multiplications of thinned dense matrices. Recently, ﬁxed-point
based approaches are explored in . By representing
the connection weights (or even network activations) with
ﬁxed-point numbers, the computation can greatly beneﬁt
from hardware acceleration.
Another parallel research trend is to compress parameters in fully-connected layers. Ciresan et al. randomly
remove connection to reduce network parameters. Matrix
factorization was adopted in to decompose the weighting matrix into two low-rank matrices, which demonstrated
that signiﬁcant redundancy did exist in network parameters.
Hinton et al. proposed to use dark knowledge (the response of a well-trained network) to guide the training of
a much smaller network, which was superior than directly
training. By exploring the similarity among neurons, Srinivas et al. proposed a systematic way to remove redundant neurons instead of network connections. In , multiple fully-connected layers were replaced by a single “Fastfood” layer, which can be trained in an end-to-end style with
convolutional layers. Chen et al. randomly grouped
connection weights into hash buckets, and then ﬁne-tuned
the network with back-propagation. combined pruning, quantization, and Huffman coding to achieve higher
compression rate. Gong et al. adopted vector quantization to compress the weighing matrix, which was actually
a special case of our approach (apply Q-CNN without error
correction to fully-connected layers only).
5. Experiments
In this section, we evaluate our quantized CNN framework on two image classiﬁcation benchmarks, MNIST 
and ILSVRC-12 . For the acceleration of convolutional
layers, we compare with:
• CPD : CP-Decomposition;
• GBD : Group-wise Brain Damage;
• LANR : Low-rank Approximation of Non-linear
Responses.
and for the compression of fully-connected layers, we compare with the following approaches:
• RER : Random Edge Removal;
• LRD : Low-Rank Decomposition;
• DK : Dark Knowledge;
• HashNet : Hashed Neural Nets;
• DPP : Data-free Parameter Pruning;
• SVD : Singular Value Decomposition;
• DFC : Deep Fried Convnets.
For all above baselines, we use their reported results under
the same setting for fair comparison. We report the theoretical speed-up for more consistent results, since the realistic speed-up may be affected by various factors, e.g. CPU,
cache, and RAM. We compare the theoretical and realistic
speed-up in Section 5.4, and discuss the effect of adopting
the BLAS library for acceleration.
Our approaches are denoted as “Q-CNN” and “Q-CNN
(EC)”, where the latter one adopts error correction while the
former one does not. We implement the optimization process of parameter quantization in MATLAB, and ﬁne-tune
the resulting network with Caffe . Additional results of
our approach can be found in the supplementary material.
5.1. Results on MNIST
The MNIST dataset contains 70k images of hand-written
digits, 60k used for training and 10k for testing. To evaluate the compression performance, we pre-train two neural
networks, one is 3-layer and another one is 5-layer, where
each hidden layer contains 1000 units. Different compression techniques are then adopted to compress these two network, and the results are as depicted in Table 2.
Table 2. Comparison on the compression rates and classiﬁcation
error on MNIST, based on a 3-layer network (784-1000-10) and a
5-layer network (784-1000-1000-1000-10).
HashNets 
Q-CNN (EC)
In our Q-CNN framework, the trade-off between accuracy and efﬁciency is controlled by M (number of subspaces) and K (number of sub-codewrods in each subspace). Since M = Cs/C′
s is determined once C′
s is given,
we tune (C′
s, K) to adjust the quantization precision. In Table 2, we set the hyper-parameters as C′
s = 4 and K = 32.
From Table 2, we observe that our Q-CNN (EC) approach offers higher compression rates with less performance degradation than all baselines for both networks.
The error correction scheme is effective in reducing the accuracy loss, especially for deeper networks (5-layer). Also,
we ﬁnd the performance of both Q-CNN and Q-CNN (EC)
quite stable, as the standard deviation of ﬁve random runs is
merely 0.05%. Therefore, we report the single-run performance in the remaining experiments.
5.2. Results on ILSVRC-12
The ILSVRC-12 benchmark consists of over one million
training images drawn from 1000 categories, and a disjoint
validation set of 50k images. We report both the top-1 and
top-5 classiﬁcation error rates on the validation set, using
single-view testing (central patch only).
We demonstrate our approach on four convolutional networks: AlexNet , CaffeNet , CNN-S , and VGG-
16 . The ﬁrst two models have been adopted in several
related works, and therefore are included for comparison.
CNN-S and VGG-16 use a either wider or deeper structure
for better classiﬁcation accuracy, and are included here to
prove the scalability of our approach. We compare all these
networks’ computation and storage overhead in Table 3, together with their classiﬁcation error rates on ILSVRC-12.
Table 3. Comparison on the test-phase computation overhead
(FLOPs), storage consumption (Bytes), and classiﬁcation error
rates (Top-1/5 Err.) of AlexNet, CaffeNet, CNN-S, and VGG-16.
Top-1 Err.
Top-5 Err.
Quantizing the Convolutional Layer
To begin with, we quantize the second convolutional layer
of AlexNet, which is the most time-consuming layer during
the test-phase. In Table 4, we report the performance under several (C′
s, K) settings, comparing with two baseline
methods, CPD and GBD .
Table 4. Comparison on the speed-up rates and the increase of top-
1/5 error rates for accelerating the second convolutional layer in
AlexNet, with or without ﬁne-tuning (FT). The hyper-parameters
of Q-CNN, C′
s and K, are as speciﬁed in the “Para.” column.
Top-1 Err. ↑
Top-5 Err. ↑
From Table 4, we discover that with a large speed-up
rate (over 4×), the performance loss of both CPD and GBD
become severe, especially before ﬁne-tuning. The naive
parameter quantization method also suffers from the similar problem. By incorporating the idea of error correction,
our Q-CNN model achieves up to 6× speed-up with merely
0.6% drop in accuracy, even without ﬁne-tuning. The accuracy loss can be further reduced after ﬁne-tuning the subsequent layers. Hence, it is more effective to minimize the
estimation error of each layer’s response than minimize the
quantization error of network parameters.
Next, we take one step further and attempt to speed-up
all the convolutional layers in AlexNet with Q-CNN (EC).
Table 5. Comparison on the speed-up/compression rates and the increase of top-1/5 error rates for accelerating all the convolutional layers
in AlexNet and VGG-16.
Compression
Top-1 Err. ↑
Top-5 Err. ↑
Q-CNN (EC)
We ﬁx the quantization hyper-parameters (C′
s, K) across all
layers. From Table 5, we observe that the loss in accuracy
grows mildly than the single-layer case. The speed-up rates
reported here are consistently smaller than those in Table 4,
since the acceleration effect is less signiﬁcant for some layers (i.e. “conv 4” and “conv 5”). For AlexNet, our Q-CNN
s = 8, K = 128) can accelerate the computation
of all the convolutional layers by a factor of 4.27×, while
the increase in the top-1 and top-5 error rates are no more
than 2.5%. After ﬁne-tuning the remaining fully-connected
layers, the performance loss can be further reduced to less
In Table 5, we also report the comparison against LANR
 on VGG-16. For the similar speed-up rate (4×), their
approach outperforms ours in the top-5 classiﬁcation error
(an increase of 0.95% against 1.83%). After ﬁne-tuning, the
performance gap is narrowed down to 0.35% against 0.45%.
At the same time, our approach offers over 14× compression of parameters in convolutional layers, much larger than
theirs 2.7× compression2. Therefore, our approach is effective in accelerating and compressing networks with many
convolutional layers, with only minor performance loss.
Quantizing the Fully-connected Layer
For demonstration, we ﬁrst compress parameters in a single
fully-connected layer. In CaffeNet, the ﬁrst fully-connected
layer possesses over 37 million parameters (9216 × 4096),
more than 60% of whole network parameters. Our Q-CNN
approach is adopted to quantize this layer and the results are
as reported in Table 6. The performance loss of our Q-CNN
model is negligible (within 0.4%), which is much smaller
than baseline methods (DPP and SVD). Furthermore, error
correction is effective in preserving the classiﬁcation accuracy, especially under a higher compression rate.
Now we evaluate our approach’s performance for compressing all the fully-connected layers in CaffeNet in Table 7. The third layer is actually the combination of 1000
classiﬁers, and is more critical to the classiﬁcation accuracy.
Hence, we adopt a much more ﬁne-grained hyper-parameter
2The compression effect of their approach was not explicitly discussed
in the paper; we estimate the compression rate based on their description.
Table 6. Comparison on the compression rates and the increase of
top-1/5 error rates for compressing the ﬁrst fully-connected layer
in CaffeNet, without ﬁne-tuning.
Compression
Top-1 Err. ↑
Top-5 Err. ↑
setting (C′
s = 1, K = 16) for this layer. Although the
speed-up effect no longer exists, we can still achieve around
8× compression for the last layer.
Table 7. Comparison on the compression rates and the increase of
top-1/5 error rates for compressing all the fully-connected layers
in CaffeNet. Both SVD and DFC are ﬁne-tuned, while Q-CNN
and Q-CNN (EC) are not ﬁne-tuned.
Compression
Top-1 Err. ↑
Top-5 Err. ↑
From Table 7, we discover that with less than 1% drop in
accuracy, Q-CNN achieves high compression rates (12 ∼
20×), much larger than that of SVD3and DFC (< 4×).
Again, Q-CNN with error correction consistently outperforms the naive Q-CNN approach as adopted in .
3In Table 6, SVD means replacing the weighting matrix with the multiplication of two low-rank matrices; in Table 7, SVD means ﬁne-tuning the
network after the low-rank matrix decomposition.
Quantizing the Whole Network
So far, we have evaluated the performance of CNN models
with either convolutional or fully-connected layers quantized. Now we demonstrate the quantization of the whole
network with a three-stage strategy. Firstly, we quantize all
the convolutional layers with error correction, while fullyconnected layers remain untouched. Secondly, we ﬁne-tune
fully-connected layers in the quantized network with the
ILSVRC-12 training set to restore the classiﬁcation accuracy. Finally, fully-connected layers in the ﬁne-tuned network are quantized with error correction. We report the
performance of our Q-CNN models in Table 8.
Table 8. The speed-up/compression rates and the increase of top-
1/5 error rates for the whole CNN model. Particularly, for the
quantization of the third fully-connected layer in each network,
s = 1 and K = 16.
Compression
Top-1/5 Err. ↑
1.38% / 0.84%
1.46% / 0.97%
1.43% / 0.99%
1.54% / 1.12%
1.48% / 0.81%
1.64% / 0.85%
1.22% / 0.53%
1.35% / 0.58%
For convolutional layers, we let C′
s = 8 and K = 128
for AlexNet, CaffeNet, and CNN-S, and let C′
K = 128 for VGG-16, to ensure roughly 4 ∼6× speedup for each network. Then we vary the hyper-parameter
settings in fully-connected layers for different compression
levels. For the former two networks, we achieve 18× compression with about 1% loss in the top-5 classiﬁcation accuracy. For CNN-S, we achieve 5.78× speed-up and 20.16×
compression, while the top-5 classiﬁcation accuracy drop is
merely 0.85%. The result on VGG-16 is even more encouraging: with 4.06× speed-up and 20.34×, the increase of
top-5 error rate is only 0.58%. Hence, our proposed Q-CNN
framework can improve the efﬁciency of convolutional networks with minor performance loss, which is acceptable in
many applications.
5.3. Results on Mobile Devices
We have developed an Android application to fulﬁll
CNN-based image classiﬁcation on mobile devices, based
on our Q-CNN framework. The experiments are carried
out on a Huawei R⃝Mate 7 smartphone, equipped with an
1.8GHz Kirin 925 CPU. The test-phase computation is carried out on a single CPU core, without GPU acceleration.
In Table 9, we compare the computation efﬁciency and
classiﬁcation accuracy of the original and quantized CNN
models. Our Q-CNN framework achieves 3× speed-up for
AlexNet, and 4× speed-up for CNN-S. What’s more, we
compress the storage consumption by 20 ×, and the re-
Table 9. Comparison on the time, storage, memory consumption,
and top-5 classiﬁcation error rates of the original and quantized
AlexNet and CNN-S.
Top-5 Err.
quired run-time memory is only one quarter of the original
model. At the same time, the loss in the top-5 classiﬁcation
accuracy is no more than 1%. Therefore, our proposed approach improves the run-time efﬁciency in multiple aspects,
making the deployment of CNN models become tractable
on mobile platforms.
5.4. Theoretical vs. Realistic Speed-up
In Table 10, we compare the theoretical and realistic
speed-up on AlexNet. The BLAS library is used in
Caffe to accelerate the matrix multiplication in convolutional and fully-connected layers. However, it may not
always be an option for mobile devices. Therefore, we measure the run-time speed under two settings, i.e. with BLAS
enabled or disabled. The realistic speed-up is slightly lower
with BLAS on, indicating that Q-CNN does not beneﬁt as
much from BLAS as that of CNN. Other optimization techniques, e.g. SIMD, SSE, and AVX , may further improve
our realistic speed-up, and shall be explored in the future.
Table 10. Comparison on the theoretical and realistic speed-up on
AlexNet (CPU only, single-threaded). Here we use the ATLAS
library, which is the default BLAS choice in Caffe .
6. Conclusion
In this paper, we propose a uniﬁed framework to simultaneously accelerate and compress convolutional neural
networks. We quantize network parameters to enable ef-
ﬁcient test-phase computation. Extensive experiments are
conducted on MNIST and ILSVRC-12, and our approach
achieves outstanding speed-up and compression rates, with
only negligible loss in the classiﬁcation accuracy.
7. Acknowledgement
This work was supported in part by National Natural Science Foundation of China (Grant No. 61332016), and 863
program (Grant No. 2014AA015105).
4This is Caffe’s run-time speed. The code for the other three settings is
on