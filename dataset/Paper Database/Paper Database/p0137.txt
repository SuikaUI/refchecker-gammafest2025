Journal of Statistical Software
January 2010, Volume 33, Issue 1.
 
Regularization Paths for Generalized Linear Models
via Coordinate Descent
Jerome Friedman
Stanford University
Trevor Hastie
Stanford University
Rob Tibshirani
Stanford University
We develop fast algorithms for estimation of generalized linear models with convex
penalties. The models include linear regression, two-class logistic regression, and multinomial regression problems while the penalties include ℓ1 (the lasso), ℓ2 (ridge regression)
and mixtures of the two (the elastic net). The algorithms use cyclical coordinate descent,
computed along a regularization path. The methods can handle large problems and can
also deal eﬃciently with sparse features. In comparative timings we ﬁnd that the new
algorithms are considerably faster than competing methods.
Keywords: lasso, elastic net, logistic regression, ℓ1 penalty, regularization path, coordinatedescent.
1. Introduction
The lasso is a popular method for regression that uses an ℓ1 penalty to
achieve a sparse solution. In the signal processing literature, the lasso is also known as basis
pursuit .
This idea has been broadly applied, for example to generalized linear models and Cox’s proportional hazard models for survival data
 . In recent years, there has been an enormous amount of research activity
devoted to related regularization methods:
1. The grouped lasso , where variables are included
or excluded in groups.
2. The Dantzig selector , a slightly modiﬁed version
of the lasso.
3. The elastic net for correlated variables, which uses a penalty that
is part ℓ1, part ℓ2.
Regularization Paths for GLMs via Coordinate Descent
4. ℓ1 regularization paths for generalized linear models .
5. Methods using non-concave penalties, such as SCAD and Friedman’s
generalized elastic net , enforce more severe variable selection than the
6. Regularization paths for the support-vector machine .
7. The graphical lasso for sparse covariance estimation and undirected graphs.
Efron et al. developed an eﬃcient algorithm for computing the entire regularization
path for the lasso for linear regression models. Their algorithm exploits the fact that the coef-
ﬁcient proﬁles are piecewise linear, which leads to an algorithm with the same computational
cost as the full least-squares ﬁt on the data .
In some of the extensions above (items 2,3, and 6), piecewise-linearity can be exploited as in
Efron et al. to yield eﬃcient algorithms. Rosset and Zhu characterize the class
of problems where piecewise-linearity exists—both the loss function and the penalty have to
be quadratic or piecewise linear.
Here we instead focus on cyclical coordinate descent methods. These methods have been
proposed for the lasso a number of times, but only recently was their power fully appreciated.
Early references include Fu , Shevade and Keerthi and Daubechies et al. .
Van der Kooij independently used coordinate descent for solving elastic-net penalized
regression models. Recent rediscoveries include Friedman et al. and Wu and Lange
 . The ﬁrst paper recognized the value of solving the problem along an entire path of
values for the regularization parameters, using the current estimates as warm starts. This
strategy turns out to be remarkably eﬃcient for this problem. Several other researchers have
also re-discovered coordinate descent, many for solving the same problems we address in this
paper—notably Shevade and Keerthi , Krishnapuram and Hartemink , Genkin
et al. and Wu et al. .
In this paper we extend the work of Friedman et al. and develop fast algorithms
for ﬁtting generalized linear models with elastic-net penalties.
In particular, our models
include regression, two-class logistic regression, and multinomial regression problems. Our
algorithms can work on very large datasets, and can take advantage of sparsity in the feature
set. We provide a publicly available package glmnet implemented in
the R programming system . We do not revisit the wellestablished convergence properties of coordinate descent in convex problems in
this article.
Lasso procedures are frequently used in domains with very large datasets, such as genomics
and web analysis. Consequently a focus of our research has been algorithmic eﬃciency and
speed. We demonstrate through simulations that our procedures outperform all competitors
— even those based on coordinate descent.
In Section 2 we present the algorithm for the elastic net, which includes the lasso and ridge
regression as special cases. Section 3 and 4 discuss (two-class) logistic regression and multinomial logistic regression. Comparative timings are presented in Section 5.
Although the title of this paper advertises regularization paths for GLMs, we only cover three
important members of this family. However, exactly the same technology extends trivially to
Journal of Statistical Software
other members of the exponential family, such as the Poisson model. We plan to extend our
software to cover these important other cases, as well as the Cox model for survival data.
Note that this article is about algorithms for ﬁtting particular families of models, and not
about the statistical properties of these models themselves. Such discussions have taken place
elsewhere.
2. Algorithms for the lasso, ridge regression and elastic net
We consider the usual setup for linear regression. We have a response variable Y ∈R and
a predictor vector X ∈Rp, and we approximate the regression function by a linear model
E(Y |X = x) = β0 + x⊤β. We have N observation pairs (xi, yi). For simplicity we assume
the xij are standardized: PN
i=1 xij = 0,
ij = 1, for j = 1, . . . , p. Our algorithms
generalize naturally to the unstandardized case. The elastic net solves the following problem
(β0,β)∈Rp+1 Rλ(β0, β) =
(β0,β)∈Rp+1
(yi −β0 −x⊤
i β)2 + λPα(β)
ℓ2 + α||β||ℓ1
Pα is the elastic-net penalty , and is a compromise between the ridgeregression penalty (α = 0) and the lasso penalty (α = 1). This penalty is particularly useful
in the p ≫N situation, or any situation where there are many correlated predictor variables.1
Ridge regression is known to shrink the coeﬃcients of correlated predictors towards each
other, allowing them to borrow strength from each other. In the extreme case of k identical
predictors, they each get identical coeﬃcients with 1/kth the size that any single one would
get if ﬁt alone. From a Bayesian point of view, the ridge penalty is ideal if there are many
predictors, and all have non-zero coeﬃcients (drawn from a Gaussian distribution).
Lasso, on the other hand, is somewhat indiﬀerent to very correlated predictors, and will tend
to pick one and ignore the rest. In the extreme case above, the lasso problem breaks down.
The lasso penalty corresponds to a Laplace prior, which expects many coeﬃcients to be close
to zero, and a small subset to be larger and nonzero.
The elastic net with α = 1−ε for some small ε > 0 performs much like the lasso, but removes
any degeneracies and wild behavior caused by extreme correlations. More generally, the entire
family Pα creates a useful compromise between ridge and lasso. As α increases from 0 to 1,
for a given λ the sparsity of the solution to (1) (i.e., the number of coeﬃcients equal to zero)
increases monotonically from 0 to the sparsity of the lasso solution.
Figure 1 shows an example that demonstrates the eﬀect of varying α. The dataset is from
 , consisting of 72 observations on 3571 genes measured with DNA microarrays. The observations fall in two classes, so we use the penalties in conjunction with the
1Zou and Hastie called this penalty the naive elastic net, and preferred a rescaled version which they
called elastic net. We drop this distinction here.
Regularization Paths for GLMs via Coordinate Descent
Leukemia data: proﬁles of estimated coeﬃcients for three methods, showing only
ﬁrst 10 steps (values for λ) in each case. For the elastic net, α = 0.2.
Journal of Statistical Software
logistic regression models of Section 3. The coeﬃcient proﬁles from the ﬁrst 10 steps (grid
values for λ) for each of the three regularization methods are shown. The lasso penalty admits
at most N = 72 genes into the model, while ridge regression gives all 3571 genes non-zero
coeﬃcients. The elastic-net penalty provides a compromise between these two, and has the
eﬀect of averaging genes that are highly correlated and then entering the averaged gene into
the model. Using the algorithm described below, computation of the entire path of solutions
for each method, at 100 values of the regularization parameter evenly spaced on the log-scale,
took under a second in total. Because of the large number of non-zero coeﬃcients for the
ridge penalty, they are individually much smaller than the coeﬃcients for the other methods.
Consider a coordinate descent step for solving (1). That is, suppose we have estimates ˜β0 and
˜βℓfor ℓ̸= j, and we wish to partially optimize with respect to βj. We would like to compute
the gradient at βj = ˜βj, which only exists if ˜βj ̸= 0. If ˜βj > 0, then
|β=˜β = −1
xij(yi −˜βo −x⊤
i ˜β) + λ(1 −α)βj + λα.
A similar expression exists if ˜βj < 0, and ˜βj = 0 is treated separately. Simple calculus shows
 that the coordinate-wise update has the form
i=1 xij(yi −˜y(j)
1 + λ(1 −α)
ℓ̸=j xiℓ˜βℓis the ﬁtted value excluding the contribution from xij, and
hence yi −˜y(j)
the partial residual for ﬁtting βj.
Because of the standardization,
i=1 xij(yi −˜y(j)
i ) is the simple least-squares coeﬃcient when ﬁtting this partial
residual to xij.
 S(z, γ) is the soft-thresholding operator with value
sign(z)(|z| −γ)+ =
if z > 0 and γ < |z|
if z < 0 and γ < |z|
if γ ≥|z|.
The details of this derivation are spelled out in Friedman et al. .
Thus we compute the simple least-squares coeﬃcient on the partial residual, apply softthresholding to take care of the lasso contribution to the penalty, and then apply a proportional shrinkage for the ridge penalty. This algorithm was suggested by Van der Kooij
2.1. Naive updates
Looking more closely at (5), we see that
yi −ˆyi + xij ˜βj
ri + xij ˜βj,
Regularization Paths for GLMs via Coordinate Descent
where ˆyi is the current ﬁt of the model for observation i, and hence ri the current residual.
xij(yi −˜y(j)
xijri + ˜βj,
because the xj are standardized. The ﬁrst term on the right-hand side is the gradient of
the loss with respect to βj. It is clear from (8) why coordinate descent is computationally
eﬃcient. Many coeﬃcients are zero, remain zero after the thresholding, and so nothing needs
to be changed. Such a step costs O(N) operations— the sum to compute the gradient. On
the other hand, if a coeﬃcient does change after the thresholding, ri is changed in O(N) and
the step costs O(2N). Thus a complete cycle through all p variables costs O(pN) operations.
We refer to this as the naive algorithm, since it is generally less eﬃcient than the covariance
updating algorithm to follow.
Later we use these algorithms in the context of iteratively
reweighted least squares (IRLS), where the observation weights change frequently; there the
naive algorithm dominates.
2.2. Covariance updates
Further eﬃciencies can be achieved in computing the updates in (8). We can write the ﬁrst
term on the right (up to a factor 1/N) as
xijri = ⟨xj, y⟩−
⟨xj, xk⟩˜βk,
where ⟨xj, y⟩= PN
i=1 xijyi. Hence we need to compute inner products of each feature with y
initially, and then each time a new feature xk enters the model (for the ﬁrst time), we need
to compute and store its inner product with all the rest of the features (O(Np) operations).
We also store the p gradient components (9). If one of the coeﬃcients currently in the model
changes, we can update each gradient in O(p) operations. Hence with m non-zero terms in
the model, a complete cycle costs O(pm) operations if no new variables become non-zero, and
costs O(Np) for each new variable entered. Importantly, O(N) calculations do not have to
be made at every step. This is the case for all penalized procedures with squared error loss.
2.3. Sparse updates
We are sometimes faced with problems where the N ×p feature matrix X is extremely sparse.
A leading example is from document classiﬁcation, where the feature vector uses the socalled “bag-of-words” model. Each document is scored for the presence/absence of each of
the words in the entire dictionary under consideration (sometimes counts are used, or some
transformation of counts). Since most words are absent, the feature vector for each document
is mostly zero, and so the entire matrix is mostly zero. We store such matrices eﬃciently in
sparse column format, where we store only the non-zero entries and the coordinates where
they occur.
Coordinate descent is ideally set up to exploit such sparsity, in an obvious way. The O(N)
inner-product operations in either the naive or covariance updates can exploit the sparsity,
by summing over only the non-zero entries. Note that in this case scaling of the variables will
Journal of Statistical Software
not alter the sparsity, but centering will. So scaling is performed up front, but the centering
is incorporated in the algorithm in an eﬃcient and obvious manner.
2.4. Weighted updates
Often a weight wi (other than 1/N) is associated with each observation.
This will arise
naturally in later sections where observations receive weights in the IRLS algorithm. In this
case the update step (5) becomes only slightly more complicated:
i=1 wixij(yi −˜y(j)
ij + λ(1 −α)
If the xj are not standardized, there is a similar sum-of-squares term in the denominator
(even without weights). The presence of weights does not change the computational costs of
either algorithm much, as long as the weights remain ﬁxed.
2.5. Pathwise coordinate descent
We compute the solutions for a decreasing sequence of values for λ, starting at the smallest
value λmax for which the entire vector ˆβ = 0. Apart from giving us a path of solutions, this
scheme exploits warm starts, and leads to a more stable algorithm. We have examples where
it is faster to compute the path down to λ (for small λ) than the solution only at that value
When ˜β = 0, we see from (5) that ˜βj will stay zero if
N |⟨xj, y⟩| < λα. Hence Nαλmax =
maxℓ|⟨xℓ, y⟩|.
Our strategy is to select a minimum value λmin = ϵλmax, and construct a
sequence of K values of λ decreasing from λmax to λmin on the log scale. Typical values are
ϵ = 0.001 and K = 100.
2.6. Other details
Irrespective of whether the variables are standardized to have variance 1, we always center
each predictor variable. Since the intercept is not regularized, this means that ˆβ0 = ¯y, the
mean of the yi, for all values of α and λ.
It is easy to allow diﬀerent penalties λj for each of the variables. We implement this via a
penalty scaling parameter γj ≥0. If γj > 0, then the penalty applied to βj is λj = λγj.
If γj = 0, that variable does not get penalized, and always enters the model unrestricted at
the ﬁrst step and remains in the model. Penalty rescaling would also allow, for example, our
software to be used to implement the adaptive lasso .
Considerable speedup is obtained by organizing the iterations around the active set of features—
those with nonzero coeﬃcients. After a complete cycle through all the variables, we iterate
on only the active set till convergence. If another complete cycle does not change the active
set, we are done, otherwise the process is repeated. Active-set convergence is also mentioned
in Meier et al. and Krishnapuram and Hartemink .
Regularization Paths for GLMs via Coordinate Descent
3. Regularized logistic regression
When the response variable is binary, the linear logistic regression model is often used. Denote
by G the response variable, taking values in G = {1, 2} (the labeling of the elements is
arbitrary). The logistic regression model represents the class-conditional probabilities through
a linear function of the predictors
Pr(G = 1|x)
1 + e−(β0+x⊤β) ,
Pr(G = 2|x)
1 + e+(β0+x⊤β)
1 −Pr(G = 1|x).
Alternatively, this implies that
log Pr(G = 1|x)
Pr(G = 2|x) = β0 + x⊤β.
Here we ﬁt this model by regularized maximum (binomial) likelihood. Let p(xi) = Pr(G =
1|xi) be the probability (11) for observation i at a particular value for the parameters (β0, β),
then we maximize the penalized log likelihood
(β0,β)∈Rp+1
I(gi = 1) log p(xi) + I(gi = 2) log(1 −p(xi))
Denoting yi = I(gi = 1), the log-likelihood part of (13) can be written in the more explicit
ℓ(β0, β) = 1
yi · (β0 + x⊤
i β) −log(1 + e(β0+x⊤
a concave function of the parameters.
The Newton algorithm for maximizing the (unpenalized) log-likelihood (14) amounts to iteratively reweighted least squares.
Hence if the
current estimates of the parameters are (˜β0, ˜β), we form a quadratic approximation to the
log-likelihood (Taylor expansion about current estimates), which is
ℓQ(β0, β) = −1
wi(zi −β0 −x⊤
i β)2 + C(˜β0, ˜β)2
yi −˜p(xi)
˜p(xi)(1 −˜p(xi)),
(working response)
˜p(xi)(1 −˜p(xi)),
and ˜p(xi) is evaluated at the current parameters. The last term is constant. The Newton
update is obtained by minimizing ℓQ.
Our approach is similar. For each value of λ, we create an outer loop which computes the
quadratic approximation ℓQ about the current parameters (˜β0, ˜β). Then we use coordinate
descent to solve the penalized weighted least-squares problem
(β0,β)∈Rp+1 {−ℓQ(β0, β) + λPα(β)} .
This amounts to a sequence of nested loops:
Journal of Statistical Software
outer loop: Decrement λ.
middle loop: Update the quadratic approximation ℓQ using the current parameters (˜β0, ˜β).
inner loop: Run the coordinate descent algorithm on the penalized weighted-least-squares
problem (18).
There are several important details in the implementation of this algorithm.
 When p ≫N, one cannot run λ all the way to zero, because the saturated logistic
regression ﬁt is undeﬁned (parameters wander oﬀto ±∞in order to achieve probabilities
of 0 or 1). Hence the default λ sequence runs down to λmin = ϵλmax > 0.
 Care is taken to avoid coeﬃcients diverging in order to achieve ﬁtted probabilities of 0
or 1. When a probability is within ε = 10−5 of 1, we set it to 1, and set the weights to
ε. 0 is treated similarly.
 Our code has an option to approximate the Hessian terms by an exact upper-bound.
This is obtained by setting the wi in (17) all equal to 0.25 . Our code does not implement any checks for divergence; this would
slow it down, and when used as recommended we do not feel it is necessary. We have
a closed form expression for the starting solutions, and each subsequent solution is
warm-started from the previous close-by solution, which generally makes the quadratic
approximations very accurate. We have not encountered any divergence problems so
4. Regularized multinomial regression
When the categorical response variable G has K > 2 levels, the linear logistic regression
model can be generalized to a multi-logit model. The traditional approach is to extend (12)
to K −1 logits
log Pr(G = ℓ|x)
Pr(G = K|x) = β0ℓ+ x⊤βℓ, ℓ= 1, . . . , K −1.
Here βℓis a p-vector of coeﬃcients. As in Zhu and Hastie , here we choose a more
symmetric approach. We model
Pr(G = ℓ|x) =
k=1 eβ0k+x⊤βk
This parametrization is not estimable without constraints, because for any values for the
parameters {β0ℓ, βℓ}K
1 , {β0ℓ−c0, βℓ−c}K
1 give identical probabilities (20). Regularization
deals with this ambiguity in a natural way; see Section 4.1 below.
Regularization Paths for GLMs via Coordinate Descent
We ﬁt the model (20) by regularized maximum (multinomial) likelihood. Using a similar
notation as before, let pℓ(xi) = Pr(G = ℓ|xi), and let gi ∈{1, 2, . . . , K} be the ith response.
We maximize the penalized log-likelihood
1 ∈RK(p+1)
log pgi(xi) −λ
Denote by Y the N × K indicator response matrix, with elements yiℓ= I(gi = ℓ). Then we
can write the log-likelihood part of (21) in the more explicit form
ℓ({β0ℓ, βℓ}K
yiℓ(β0ℓ+ x⊤
i βℓ) −log
The Newton algorithm for multinomial regression can be tedious, because of the vector nature
of the response observations. Instead of weights wi as in (17), we get weight matrices, for
However, in the spirit of coordinate descent, we can avoid these complexities.
We perform partial Newton steps by forming a partial quadratic approximation to the loglikelihood (22), allowing only (β0ℓ, βℓ) to vary for a single class at a time. It is not hard to
show that this is
ℓQℓ(β0ℓ, βℓ) = −1
wiℓ(ziℓ−β0ℓ−x⊤
i βℓ)2 + C({˜β0k, ˜βk}K
where as before
yiℓ−˜pℓ(xi)
˜pℓ(xi)(1 −˜pℓ(xi)),
˜pℓ(xi)(1 −˜pℓ(xi)),
Our approach is similar to the two-class case, except now we have to cycle over the classes
as well in the outer loop. For each value of λ, we create an outer loop which cycles over ℓ
and computes the partial quadratic approximation ℓQℓabout the current parameters (˜β0, ˜β).
Then we use coordinate descent to solve the penalized weighted least-squares problem
(β0ℓ,βℓ)∈Rp+1 {−ℓQℓ(β0ℓ, βℓ) + λPα(βℓ)} .
This amounts to the sequence of nested loops:
outer loop: Decrement λ.
middle loop (outer): Cycle over ℓ∈{1, 2, . . . , K, 1, 2 . . .}.
middle loop (inner): Update the quadratic approximation ℓQℓusing the current parameters {˜β0k, ˜βk}K
inner loop: Run the co-ordinate descent algorithm on the penalized weighted-least-squares
problem (26).
Journal of Statistical Software
4.1. Regularization and parameter ambiguity
As was pointed out earlier, if {β0ℓ, βℓ}K
1 characterizes a ﬁtted model for (20), then {β0ℓ−
c0, βℓ−c}K
1 gives an identical ﬁt (c is a p-vector). Although this means that the log-likelihood
part of (21) is insensitive to (c0, c), the penalty is not. In particular, we can always improve
an estimate {β0ℓ, βℓ}K
1 (w.r.t. (21)) by solving
This can be done separately for each coordinate, hence
cj = arg min
2(1 −α)(βjℓ−t)2 + α|βjℓ−t|
Theorem 1 Consider problem (28) for values α ∈ . Let ¯βj be the mean of the βjℓ, and
a median of the βjℓ(and for simplicity assume ¯βj ≤βM
j . Then we have
cj ∈[¯βj, βM
with the left endpoint achieved if α = 0, and the right if α = 1.
The two endpoints are obvious. The proof of Theorem 1 is given in Appendix A. A consequence of the theorem is that a very simple search algorithm can be used to solve (28).
The objective is piecewise quadratic, with knots deﬁned by the βjℓ. We need only evaluate
solutions in the intervals including the mean and median, and those in between. We recenter
the parameters in each index set j after each inner middle loop step, using the the solution
cj for each j.
Not all the parameters in our model are regularized. The intercepts β0ℓare not, and with our
penalty modiﬁers γj (Section 2.6) others need not be as well. For these parameters we use
mean centering.
4.2. Grouped and matrix responses
As in the two class case, the data can be presented in the form of a N × K matrix miℓof
non-negative numbers. For example, if the data are grouped: at each xi we have a number
of multinomial samples, with miℓfalling into category ℓ. In this case we divide each row by
the row-sum mi = P
ℓmiℓ, and produce our response matrix yiℓ= miℓ/mi. mi becomes an
observation weight. Our penalized maximum likelihood algorithm changes in a trivial way.
The working response (24) is deﬁned exactly the same way (using yiℓjust deﬁned).
weights in (25) get augmented with the observation weight mi:
wiℓ= mi˜pℓ(xi)(1 −˜pℓ(xi)).
Equivalently, the data can be presented directly as a matrix of class proportions, along with
a weight vector. From the point of view of the algorithm, any matrix of positive numbers and
any non-negative weight vector will be treated in the same way.
Regularization Paths for GLMs via Coordinate Descent
5. Timings
In this section we compare the run times of the coordinate-wise algorithm to some competing
algorithms. These use the lasso penalty (α = 1) in both the regression and logistic regression
settings. All timings were carried out on an Intel Xeon 2.80GH processor.
We do not perform comparisons on the elastic net versions of the penalties, since there is not
much software available for elastic net. Comparisons of our glmnet code with the R package
elasticnet will mimic the comparisons with lars for the lasso, since
elasticnet is built on the lars package.
5.1. Regression with the lasso
We generated Gaussian data with N observations and p predictors, with each pair of predictors
Xj, Xj′ having the same population correlation ρ. We tried a number of combinations of N
and p, with ρ varying from zero to 0.95. The outcome values were generated by
Xjβj + k · Z
where βj = (−1)j exp(−2(j −1)/20), Z ∼N(0, 1) and k is chosen so that the signal-to-noise
ratio is 3.0. The coeﬃcients are constructed to have alternating signs and to be exponentially
decreasing.
Table 1 shows the average CPU timings for the coordinate-wise algorithm, and the lars procedure . All algorithms are implemented as R functions. The coordinate-wise
algorithm does all of its numerical work in Fortran, while lars does
much of its work in R, calling Fortran routines for some matrix operations. However comparisons in Friedman et al. showed that lars was actually faster than a version coded
entirely in Fortran. Comparisons between diﬀerent programs are always tricky: in particular
the lars procedure computes the entire path of solutions, while the coordinate-wise procedure
solves the problem for a set of pre-deﬁned points along the solution path. In the orthogonal
case, lars takes min(N, p) steps: hence to make things roughly comparable, we called the
latter two algorithms to solve a total of min(N, p) problems along the path. Table 1 shows
timings in seconds averaged over three runs. We see that glmnet is considerably faster than
lars; the covariance-updating version of the algorithm is a little faster than the naive version
when N > p and a little slower when p > N. We had expected that high correlation between
the features would increase the run time of glmnet, but this does not seem to be the case.
5.2. Lasso-logistic regression
We used the same simulation setup as above, except that we took the continuous outcome y,
deﬁned p = 1/(1 + exp(−y)) and used this to generate a two-class outcome z with Pr(z =
1) = p, Pr(z = 0) = 1 −p. We compared the speed of glmnet to the interior point method
l1logreg , Bayesian binary regression , and the lasso penalized logistic program LPL supplied by Ken Lange . The latter two methods also use a coordinate descent approach.
The BBR software automatically performs ten-fold cross-validation when given a set of λ
values. Hence we report the total time for ten-fold cross-validation for all methods using the
Journal of Statistical Software
Linear regression – Dense features
Correlation
N = 1000, p = 100
glmnet (type = "naive")
glmnet (type = "cov")
N = 5000, p = 100
glmnet (type = "naive")
glmnet (type = "cov")
N = 100, p = 1000
glmnet (type = "naive")
glmnet (type = "cov")
N = 100, p = 5000
glmnet (type = "naive")
glmnet (type = "cov")
N = 100, p = 20000
glmnet (type = "naive")
glmnet (type = "cov")
N = 100, p = 50000
glmnet (type = "naive")
glmnet (type = "cov")
Table 1: Timings (in seconds) for glmnet and lars algorithms for linear regression with lasso
penalty. The ﬁrst line is glmnet using naive updating while the second uses covariance
updating. Total time for 100 λ values, averaged over 3 runs.
same 100 λ values for all. Table 2 shows the results; in some cases, we omitted a method
when it was seen to be very slow at smaller values for N or p. Again we see that glmnet is
the clear winner: it slows down a little under high correlation. The computation seems to
be roughly linear in N, but grows faster than linear in p. Table 3 shows some results when
the feature matrix is sparse: we randomly set 95% of the feature values to zero. Again, the
glmnet procedure is signiﬁcantly faster than l1logreg.
Regularization Paths for GLMs via Coordinate Descent
Logistic regression – Dense features
Correlation
N = 1000, p = 100
N = 5000, p = 100
N = 100, 000, p = 100
N = 100, p = 1000
N = 100, p = 5000
N = 100, p = 100, 000
Timings (seconds) for logistic models with lasso penalty. Total time for tenfold
cross-validation over a grid of 100 λ values.
5.3. Real data
Table 4 shows some timing results for four diﬀerent datasets.
 Cancer : gene-expression data with 14 cancer classes. Here we
compare glmnet with BMR , a multinomial version of BBR.
 Leukemia : gene-expression data with a binary response indicating
type of leukemia—AML vs ALL. We used the preprocessed data of Dettling .
 InternetAd : document classiﬁcation problem with mostly binary
features. The response is binary, and indicates whether the document is an advertisement. Only 1.2% nonzero values in the predictor matrix.
Journal of Statistical Software
Logistic regression – Sparse features
Correlation
N = 1000, p = 100
N = 100, p = 1000
N = 10, 000, p = 100
N = 100, p = 10, 000
Timings (seconds) for logistic model with lasso penalty and sparse features (95%
zero). Total time for ten-fold cross-validation over a grid of 100 λ values.
 NewsGroup : document classiﬁcation problem. We used the training set
cultured from these data by Koh et al. . The response is binary, and indicates
a subclass of topics; the predictors are binary, and indicate the presence of particular
tri-gram sequences. The predictor matrix has 0.05% nonzero values.
All four datasets are available online with this publication as saved R data objects .
For the Leukemia and InternetAd datasets, the BBR program used fewer than 100 λ values
so we estimated the total time by scaling up the time for smaller number of values. The
InternetAd and NewsGroup datasets are both sparse: 1% nonzero values for the former,
0.05% for the latter. Again glmnet is considerably faster than the competing methods.
5.4. Other comparisons
When making comparisons, one invariably leaves out someones favorite method.
out our own glmpath extension of lars for GLMs , since it does not scale well to the size problems we consider here. Two referees of
Regularization Paths for GLMs via Coordinate Descent
InternetAd
Table 4: Timings (seconds, unless stated otherwise) for some real datasets. For the Cancer,
Leukemia and InternetAd datasets, times are for ten-fold cross-validation using 100 values
of λ; for NewsGroup we performed a single run with 100 values of λ, with λmin = 0.05λmax.
MacBook Pro
HP Linux server
Timings (seconds) for the Leukemia dataset, using 100 λ values. These timings
were performed on two diﬀerent platforms, which were diﬀerent again from those used in the
earlier timings in this paper.
an earlier draft of this paper suggested two methods of which we were not aware. We ran a
single benchmark against each of these using the Leukemia data, ﬁtting models at 100 values
of λ in each case.
 OWL-QN: Orthant-Wise Limited-memory Quasi-Newton Optimizer for ℓ1-regularized
Objectives . The software is written in C++, and available
from the authors upon request.
 The R package penalized , which ﬁts GLMs using a fast implementation of gradient ascent.
Table 5 shows these comparisons (on two diﬀerent machines); glmnet is considerably faster
in both cases.
6. Selecting the tuning parameters
The algorithms discussed in this paper compute an entire path of solutions (in λ) for any
particular model, leaving the user to select a particular solution from the ensemble. One
general approach is to use prediction error to guide this choice. If a user is data rich, they can
set aside some fraction (say a third) of their data for this purpose. They would then evaluate
the prediction performance at each value of λ, and pick the model with the best performance.
Journal of Statistical Software
log(Lambda)
Mean Squared Error
Gaussian Family
log(Lambda)
Binomial Family
log(Lambda)
Misclassification Error
Binomial Family
Ten-fold cross-validation on simulated data. The ﬁrst row is for regression with a
Gaussian response, the second row logistic regression with a binomial response. In both cases
we have 1000 observations and 100 predictors, but the response depends on only 10 predictors.
For regression we use mean-squared prediction error as the measure of risk.
For logistic
regression, the left panel shows the mean deviance (minus twice the log-likelihood on the
left-out data), while the right panel shows misclassiﬁcation error, which is a rougher measure.
In all cases we show the mean cross-validated error curve, as well as a one-standard-deviation
band. In each ﬁgure the left vertical line corresponds to the minimum error, while the right
vertical line the largest value of lambda such that the error is within one standard-error of
the minimum—the so called“one-standard-error”rule. The top of each plot is annotated with
the size of the models.
Regularization Paths for GLMs via Coordinate Descent
Alternatively, they can use K-fold cross-validation , where
the training data is used both for training and testing in an unbiased way.
Figure 2 illustrates cross-validation on a simulated dataset. For logistic regression, we sometimes use the binomial deviance rather than misclassiﬁcation error, since the latter is smoother.
We often use the “one-standard-error” rule when selecting the best model; this acknowledges
the fact that the risk curves are estimated with error, so errs on the side of parsimony . Cross-validation can be used to select α as well, although it is often viewed as a
higher-level parameter and chosen on more subjective grounds.
7. Discussion
Cyclical coordinate descent methods are a natural approach for solving convex problems
with ℓ1 or ℓ2 constraints, or mixtures of the two (elastic net). Each coordinate-descent step
is fast, with an explicit formula for each coordinate-wise minimization.
The method also
exploits the sparsity of the model, spending much of its time evaluating only inner products
for variables with non-zero coeﬃcients. Its computational speed both for large N and p are
quite remarkable.
An R-language package glmnet is available under general public licence (GPL-2) from the
Comprehensive R Archive Network at Sparse
data inputs are handled by the Matrix package. MATLAB functions are available
from 
Acknowledgments
We would like to thank Holger Hoeﬂing for helpful discussions, and Hui Jiang for writing the
MATLAB interface to our Fortran routines. We thank the associate editor, production editor
and two referees who gave useful comments on an earlier draft of this article.
Friedman was partially supported by grant DMS-97-64431 from the National Science Foundation. Hastie was partially supported by grant DMS-0505676 from the National Science
Foundation, and grant 2R01 CA 72028-07 from the National Institutes of Health. Tibshirani
was partially supported by National Science Foundation Grant DMS-9971405 and National
Institutes of Health Contract N01-HV-28183.