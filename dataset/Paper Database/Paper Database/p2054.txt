PointNet: Deep Learning on Point Sets for 3D Classiﬁcation and Segmentation
Charles R. Qi*
Kaichun Mo
Leonidas J. Guibas
Stanford University
Point cloud is an important type of geometric data
structure.
Due to its irregular format, most researchers
transform such data to regular 3D voxel grids or collections
of images.
This, however, renders data unnecessarily
voluminous and causes issues. In this paper, we design a
novel type of neural network that directly consumes point
clouds, which well respects the permutation invariance of
points in the input.
Our network, named PointNet, provides a uniﬁed architecture for applications ranging from
object classiﬁcation, part segmentation, to scene semantic
parsing. Though simple, PointNet is highly efﬁcient and
effective.
Empirically, it shows strong performance on
par or even better than state of the art.
Theoretically,
we provide analysis towards understanding of what the
network has learnt and why the network is robust with
respect to input perturbation and corruption.
1. Introduction
In this paper we explore deep learning architectures
capable of reasoning about 3D geometric data such as
point clouds or meshes. Typical convolutional architectures
require highly regular input data formats, like those of
image grids or 3D voxels, in order to perform weight
sharing and other kernel optimizations. Since point clouds
or meshes are not in a regular format, most researchers
typically transform such data to regular 3D voxel grids or
collections of images (e.g, views) before feeding them to
a deep net architecture. This data representation transformation, however, renders the resulting data unnecessarily
voluminous — while also introducing quantization artifacts
that can obscure natural invariances of the data.
For this reason we focus on a different input representation for 3D geometry using simply point clouds
– and name our resulting deep nets PointNets.
clouds are simple and uniﬁed structures that avoid the
combinatorial irregularities and complexities of meshes,
and thus are easier to learn from. The PointNet, however,
* indicates equal contributions.
Classification
Part Segmentation
Semantic Segmentation
Figure 1. Applications of PointNet. We propose a novel deep net
architecture that consumes raw point cloud (set of points) without
voxelization or rendering. It is a uniﬁed architecture that learns
both global and local point features, providing a simple, efﬁcient
and effective approach for a number of 3D recognition tasks.
still has to respect the fact that a point cloud is just a
set of points and therefore invariant to permutations of its
members, necessitating certain symmetrizations in the net
computation. Further invariances to rigid motions also need
to be considered.
Our PointNet is a uniﬁed architecture that directly
takes point clouds as input and outputs either class labels
for the entire input or per point segment/part labels for
each point of the input.
The basic architecture of our
network is surprisingly simple as in the initial stages each
point is processed identically and independently.
basic setting each point is represented by just its three
coordinates (x, y, z). Additional dimensions may be added
by computing normals and other local or global features.
Key to our approach is the use of a single symmetric
function, max pooling.
Effectively the network learns a
set of optimization functions/criteria that select interesting
or informative points of the point cloud and encode the
reason for their selection. The ﬁnal fully connected layers
of the network aggregate these learnt optimal values into the
global descriptor for the entire shape as mentioned above
(shape classiﬁcation) or are used to predict per point labels
(shape segmentation).
Our input format is easy to apply rigid or afﬁne transformations to, as each point transforms independently. Thus
we can add a data-dependent spatial transformer network
that attempts to canonicalize the data before the PointNet
processes them, so as to further improve the results.
 
We provide both a theoretical analysis and an experimental evaluation of our approach.
We show that
our network can approximate any set function that is
continuous. More interestingly, it turns out that our network
learns to summarize an input point cloud by a sparse set of
key points, which roughly corresponds to the skeleton of
objects according to visualization. The theoretical analysis
provides an understanding why our PointNet is highly
robust to small perturbation of input points as well as
to corruption through point insertion (outliers) or deletion
(missing data).
On a number of benchmark datasets ranging from shape
classiﬁcation, part segmentation to scene segmentation,
we experimentally compare our PointNet with state-ofthe-art approaches based upon multi-view and volumetric
representations. Under a uniﬁed architecture, not only is
our PointNet much faster in speed, but it also exhibits strong
performance on par or even better than state of the art.
The key contributions of our work are as follows:
• We design a novel deep net architecture suitable for
consuming unordered point sets in 3D;
• We show how such a net can be trained to perform
3D shape classiﬁcation, shape part segmentation and
scene semantic parsing tasks;
• We provide thorough empirical and theoretical analysis on the stability and efﬁciency of our method;
• We illustrate the 3D features computed by the selected
neurons in the net and develop intuitive explanations
for its performance.
The problem of processing unordered sets by neural nets
is a very general and fundamental problem – we expect that
our ideas can be transferred to other domains as well.
2. Related Work
Point Cloud Features
Most existing features for point
cloud are handcrafted towards speciﬁc tasks. Point features
often encode certain statistical properties of points and are
designed to be invariant to certain transformations, which
are typically classiﬁed as intrinsic or extrinsic
 . They can also be categorized as local
features and global features. For a speciﬁc task, it is not
trivial to ﬁnd the optimal feature combination.
Deep Learning on 3D Data
3D data has multiple popular
representations, leading to various approaches for learning.
Volumetric CNNs: are the pioneers applying
3D convolutional neural networks on voxelized shapes.
However, volumetric representation is constrained by its
resolution due to data sparsity and computation cost of
3D convolution.
FPNN and Vote3D proposed
special methods to deal with the sparsity problem; however,
their operations are still on sparse volumes, it’s challenging
for them to process very large point clouds.
CNNs: have tried to render 3D point cloud or
shapes into 2D images and then apply 2D conv nets to
classify them.
With well engineered image CNNs, this
line of methods have achieved dominating performance on
shape classiﬁcation and retrieval tasks . However, it’s
nontrivial to extend them to scene understanding or other
3D tasks such as point classiﬁcation and shape completion.
Spectral CNNs: Some latest works use spectral
CNNs on meshes. However, these methods are currently
constrained on manifold meshes such as organic objects
and it’s not obvious how to extend them to non-isometric
shapes such as furniture.
Feature-based DNNs: 
ﬁrstly convert the 3D data into a vector, by extracting
traditional shape features and then use a fully connected net
to classify the shape. We think they are constrained by the
representation power of the features extracted.
Deep Learning on Unordered Sets
From a data structure
point of view, a point cloud is an unordered set of vectors.
While most works in deep learning focus on regular input
representations like sequences (in speech and language
processing), images and volumes (video or 3D data), not
much work has been done in deep learning on point sets.
One recent work from Oriol Vinyals et al looks
into this problem. They use a read-process-write network
with attention mechanism to consume unordered input sets
and show that their network has the ability to sort numbers.
However, since their work focuses on generic sets and NLP
applications, there lacks the role of geometry in the sets.
3. Problem Statement
We design a deep learning framework that directly
consumes unordered point sets as inputs. A point cloud is
represented as a set of 3D points {Pi| i = 1, ..., n}, where
each point Pi is a vector of its (x, y, z) coordinate plus extra
feature channels such as color, normal etc. For simplicity
and clarity, unless otherwise noted, we only use the (x, y, z)
coordinate as our point’s channels.
For the object classiﬁcation task, the input point cloud is
either directly sampled from a shape or pre-segmented from
a scene point cloud. Our proposed deep network outputs
k scores for all the k candidate classes.
For semantic
segmentation, the input can be a single object for part region
segmentation, or a sub-volume from a 3D scene for object
region segmentation. Our model will output n × m scores
for each of the n points and each of the m semantic subcategories.
input points
point features
output scores
mlp (64,64)
mlp (64,128,1024)
(512,256,k)
global feature
mlp (512,256,128)
mlp (128,m)
output scores
Classification Network
Segmentation Network
Figure 2. PointNet Architecture. The classiﬁcation network takes n points as input, applies input and feature transformations, and then
aggregates point features by max pooling. The output is classiﬁcation scores for k classes. The segmentation network is an extension to the
classiﬁcation net. It concatenates global and local features and outputs per point scores. “mlp” stands for multi-layer perceptron, numbers
in bracket are layer sizes. Batchnorm is used for all layers with ReLU. Dropout layers are used for the last mlp in classiﬁcation net.
4. Deep Learning on Point Sets
The architecture of our network (Sec 4.2) is inspired by
the properties of point sets in Rn (Sec 4.1).
4.1. Properties of Point Sets in Rn
Our input is a subset of points from an Euclidean space.
It has three main properties:
• Unordered.
Unlike pixel arrays in images or voxel
arrays in volumetric grids, point cloud is a set of points
without speciﬁc order. In other words, a network that
consumes N 3D point sets needs to be invariant to N!
permutations of the input set in data feeding order.
• Interaction among points. The points are from a space
with a distance metric. It means that points are not
isolated, and neighboring points form a meaningful
Therefore, the model needs to be able to
capture local structures from nearby points, and the
combinatorial interactions among local structures.
• Invariance under transformations.
As a geometric
object, the learned representation of the point set
should be invariant to certain transformations.
example, rotating and translating points all together
should not modify the global point cloud category nor
the segmentation of the points.
4.2. PointNet Architecture
Our full network architecture is visualized in Fig 2,
where the classiﬁcation network and the segmentation
network share a great portion of structures. Please read the
caption of Fig 2 for the pipeline.
Our network has three key modules: the max pooling
layer as a symmetric function to aggregate information from
all the points, a local and global information combination
structure, and two joint alignment networks that align both
input points and point features.
We will discuss our reason behind these design choices
in separate paragraphs below.
Symmetry Function for Unordered Input
to make a model invariant to input permutation, three
strategies exist: 1) sort input into a canonical order; 2) treat
the input as a sequence to train an RNN, but augment the
training data by all kinds of permutations; 3) use a simple
symmetric function to aggregate the information from each
point. Here, a symmetric function takes n vectors as input
and outputs a new vector that is invariant to the input
order. For example, + and ∗operators are symmetric binary
functions.
While sorting sounds like a simple solution, in high
dimensional space there in fact does not exist an ordering
that is stable w.r.t.
point perturbations in the general
This can be easily shown by contradiction.
such an ordering strategy exists, it deﬁnes a bijection map
between a high-dimensional space and a 1d real line. It
is not hard to see, to require an ordering to be stable w.r.t
point perturbations is equivalent to requiring that this map
preserves spatial proximity as the dimension reduces, a task
that cannot be achieved in the general case.
Therefore,
sorting does not fully resolve the ordering issue, and it’s
hard for a network to learn a consistent mapping from
input to output as the ordering issue persists. As shown in
experiments (Fig 5), we ﬁnd that applying a MLP directly
on the sorted point set performs poorly, though slightly
better than directly processing an unsorted input.
The idea to use RNN considers the point set as a
sequential signal and hopes that by training the RNN
with randomly permuted sequences, the RNN will become
invariant to input order. However in “OrderMatters” 
the authors have shown that order does matter and cannot be
totally omitted. While RNN has relatively good robustness
to input ordering for sequences with small length (dozens),
it’s hard to scale to thousands of input elements, which is
the common size for point sets. Empirically, we have also
shown that model based on RNN does not perform as well
as our proposed method (Fig 5).
Our idea is to approximate a general function deﬁned on
a point set by applying a symmetric function on transformed
elements in the set:
f({x1, . . . , xn}) ≈g(h(x1), . . . , h(xn)),
RK × · · · × RK
→R is a symmetric function.
Empirically, our basic module is very simple:
approximate h by a multi-layer perceptron network and
g by a composition of a single variable function and a
max pooling function.
This is found to work well by
experiments. Through a collection of h, we can learn a
number of f’s to capture different properties of the set.
While our key module seems simple, it has interesting
properties (see Sec 5.3) and can achieve strong performace
(see Sec 5.1) in a few different applications. Due to the
simplicity of our module, we are also able to provide
theoretical analysis as in Sec 4.3.
Local and Global Information Aggregation
The output
from the above section forms a vector [f1, . . . , fK], which
is a global signature of the input set.
We can easily
train a SVM or multi-layer perceptron classiﬁer on the
shape global features for classiﬁcation.
However, point
segmentation requires a combination of local and global
knowledge. We can achieve this by a simple yet highly
effective manner.
Our solution can be seen in Fig 2 (Segmentation Network). After computing the global point cloud feature vector, we feed it back to per point features by concatenating
the global feature with each of the point features. Then we
extract new per point features based on the combined point
features - this time the per point feature is aware of both the
local and global information.
With this modiﬁcation our network is able to predict
per point quantities that rely on both local geometry and
global semantics. For example we can accurately predict
per-point normals (ﬁg in supplementary), validating that the
network is able to summarize information from the point’s
local neighborhood. In experiment session, we also show
that our model can achieve state-of-the-art performance on
shape part segmentation and scene segmentation.
Joint Alignment Network
The semantic labeling of a
point cloud has to be invariant if the point cloud undergoes
certain geometric transformations, such as rigid transformation. We therefore expect that the learnt representation by
our point set is invariant to these transformations.
A natural solution is to align all input set to a canonical
space before feature extraction.
Jaderberg et al. 
introduces the idea of spatial transformer to align 2D
images through sampling and interpolation, achieved by a
speciﬁcally tailored layer implemented on GPU.
Our input form of point clouds allows us to achieve this
goal in a much simpler way compared with . We do not
need to invent any new layers and no alias is introduced as in
the image case. We predict an afﬁne transformation matrix
by a mini-network (T-net in Fig 2) and directly apply this
transformation to the coordinates of input points. The mininetwork itself resembles the big network and is composed
by basic modules of point independent feature extraction,
max pooling and fully connected layers. More details about
the T-net are in the supplementary.
This idea can be further extended to the alignment of
feature space, as well. We can insert another alignment network on point features and predict a feature transformation
matrix to align features from different input point clouds.
However, transformation matrix in the feature space has
much higher dimension than the spatial transform matrix,
which greatly increases the difﬁculty of optimization. We
therefore add a regularization term to our softmax training
loss. We constrain the feature transformation matrix to be
close to orthogonal matrix:
Lreg = ∥I −AAT ∥2
where A is the feature alignment matrix predicted by a
mini-network. An orthogonal transformation will not lose
information in the input, thus is desired. We ﬁnd that by
adding the regularization term, the optimization becomes
more stable and our model achieves better performance.
4.3. Theoretical Analysis
Universal approximation
We ﬁrst show the universal
approximation ability of our neural network to continuous
set functions. By the continuity of set functions, intuitively,
a small perturbation to the input point set should not
greatly change the function values, such as classiﬁcation or
segmentation scores.
Formally, let X = {S : S ⊆ m and |S| = n}, f :
X →R is a continuous set function on X w.r.t to Hausdorff
distance dH(·, ·), i.e., ∀ϵ > 0, ∃δ > 0, for any S, S′ ∈X,
if dH(S, S′) < δ, then |f(S) −f(S′)| < ϵ. Our theorem
says that f can be arbitrarily approximated by our network
given enough neurons at the max pooling layer, i.e., K in
(1) is sufﬁciently large.
Partial Inputs
Complete Inputs
skateboard
Figure 3. Qualitative results for part segmentation.
visualize the CAD part segmentation results across all 16 object
categories. We show both results for partial simulated Kinect scans
(left block) and complete ShapeNet CAD models (right block).
Theorem 1. Suppose f
R is a continuous
set function w.r.t Hausdorff distance dH(·, ·).
0, ∃a continuous function h and a symmetric function
g(x1, . . . , xn) = γ ◦MAX, such that for any S ∈X,
xi∈S {h(xi)}
where x1, . . . , xn is the full list of elements in S ordered
arbitrarily, γ is a continuous function, and MAX is a vector
max operator that takes n vectors as input and returns a
new vector of the element-wise maximum.
The proof to this theorem can be found in our supplementary material. The key idea is that in the worst case the
network can learn to convert a point cloud into a volumetric
representation, by partitioning the space into equal-sized
voxels. In practice, however, the network learns a much
smarter strategy to probe the space, as we shall see in point
function visualizations.
Bottleneck dimension and stability
Theoretically and
experimentally we ﬁnd that the expressiveness of our
network is strongly affected by the dimension of the max
pooling layer, i.e., K in (1). Here we provide an analysis,
which also reveals properties related to the stability of our
We deﬁne u = MAX
xi∈S {h(xi)} to be the sub-network of f
which maps a point set in m to a K-dimensional vector.
The following theorem tells us that small corruptions or
extra noise points in the input set are not likely to change
the output of our network:
Theorem 2. Suppose u : X
→RK such that u =
xi∈S{h(xi)} and f = γ ◦u. Then,
(a) ∀S, ∃CS, NS ⊆X, f(T) = f(S) if CS ⊆T ⊆NS;
(b) |CS| ≤K
avg. class
3DShapeNets 
VoxNet 
Subvolume 
MVCNN 
Ours baseline
Ours PointNet
Table 1. Classiﬁcation results on ModelNet40. Our net achieves
state-of-the-art among deep nets on 3D input.
We explain the implications of the theorem. (a) says that
f(S) is unchanged up to the input corruption if all points
in CS are preserved; it is also unchanged with extra noise
points up to NS. (b) says that CS only contains a bounded
number of points, determined by K in (1). In other words,
f(S) is in fact totally determined by a ﬁnite subset CS ⊆S
of less or equal to K elements. We therefore call CS the
critical point set of S and K the bottleneck dimension of f.
Combined with the continuity of h, this explains the
robustness of our model w.r.t point perturbation, corruption
and extra noise points. The robustness is gained in analogy
to the sparsity principle in machine learning models.
Intuitively, our network learns to summarize a shape by
a sparse set of key points. In experiment section we see
that the key points form the skeleton of an object.
5. Experiment
Experiments are divided into four parts. First, we show
PointNets can be applied to multiple 3D recognition tasks
(Sec 5.1).
Second, we provide detailed experiments to
validate our network design (Sec 5.2). At last we visualize
what the network learns (Sec 5.3) and analyze time and
space complexity (Sec 5.4).
5.1. Applications
In this section we show how our network can be
trained to perform 3D object classiﬁcation, object part
segmentation and semantic scene segmentation 1.
though we are working on a brand new data representation
(point sets), we are able to achieve comparable or even
better performance on benchmarks for several tasks.
3D Object Classiﬁcation
Our network learns global
point cloud feature that can be used for object classiﬁcation.
We evaluate our model on the ModelNet40 shape
classiﬁcation benchmark. There are 12,311 CAD models
from 40 man-made object categories, split into 9,843 for
1More application examples such as correspondence and point cloud
based CAD model retrieval are included in supplementary material.
guitar knife
laptop motor
mug pistol rocket skate
Table 2. Segmentation results on ShapeNet part dataset. Metric is mIoU(%) on points. We compare with two traditional methods 
and and a 3D fully convolutional network baseline proposed by us. Our PointNet method achieved the state-of-the-art in mIoU.
training and 2,468 for testing.
While previous methods
focus on volumetric and mult-view image representations,
we are the ﬁrst to directly work on raw point cloud.
We uniformly sample 1024 points on mesh faces according to face area and normalize them into a unit sphere.
During training we augment the point cloud on-the-ﬂy by
randomly rotating the object along the up-axis and jitter the
position of each points by a Gaussian noise with zero mean
and 0.02 standard deviation.
In Table 1, we compare our model with previous works
as well as our baseline using MLP on traditional features
extracted from point cloud (point density, D2, shape contour
Our model achieved state-of-the-art performance
among methods based on 3D input (volumetric and point
cloud). With only fully connected layers and max pooling,
our net gains a strong lead in inference speed and can be
easily parallelized in CPU as well. There is still a small
gap between our method and multi-view based method
(MVCNN ), which we think is due to the loss of ﬁne
geometry details that can be captured by rendered images.
3D Object Part Segmentation
Part segmentation is a
challenging ﬁne-grained 3D recognition task. Given a 3D
scan or a mesh model, the task is to assign part category
label (e.g. chair leg, cup handle) to each point or face.
We evaluate on ShapeNet part data set from , which
contains 16,881 shapes from 16 categories, annotated with
50 parts in total. Most object categories are labeled with
two to ﬁve parts. Ground truth annotations are labeled on
sampled points on the shapes.
We formulate part segmentation as a per-point classiﬁcation problem. Evaluation metric is mIoU on points. For
each shape S of category C, to calculate the shape’s mIoU:
For each part type in category C, compute IoU between
groundtruth and prediction. If the union of groundtruth and
prediction points is empty, then count part IoU as 1. Then
we average IoUs for all part types in category C to get mIoU
for that shape. To calculate mIoU for the category, we take
average of mIoUs for all shapes in that category.
In this section, we compare our segmentation version
PointNet (a modiﬁed version of Fig 2, Segmentation
Network) with two traditional methods and that
both take advantage of point-wise geometry features and
correspondences between shapes, as well as our own
3D CNN baseline.
See supplementary for the detailed
modiﬁcations and network architecture for the 3D CNN.
In Table 2, we report per-category and mean IoU(%)
scores. We observe a 2.3% mean IoU improvement and our
net beats the baseline methods in most categories.
We also perform experiments on simulated Kinect scans
to test the robustness of these methods. For every CAD
model in the ShapeNet part data set, we use Blensor Kinect
Simulator to generate incomplete point clouds from six
random viewpoints. We train our PointNet on the complete
shapes and partial scans with the same network architecture
and training setting. Results show that we lose only 5.3%
mean IoU. In Fig 3, we present qualitative results on both
complete and partial data. One can see that though partial
data is fairly challenging, our predictions are reasonable.
Semantic Segmentation in Scenes
Our network on part
segmentation can be easily extended to semantic scene
segmentation, where point labels become semantic object
classes instead of object part labels.
We experiment on the Stanford 3D semantic parsing data
The dataset contains 3D scans from Matterport
scanners in 6 areas including 271 rooms. Each point in the
scan is annotated with one of the semantic labels from 13
categories (chair, table, ﬂoor, wall etc. plus clutter).
To prepare training data, we ﬁrstly split points by room,
and then sample rooms into blocks with area 1m by 1m.
We train our segmentation version of PointNet to predict
overall accuracy
Ours baseline
Ours PointNet
Table 3. Results on semantic segmentation in scenes. Metric is
average IoU over 13 classes (structural and furniture elements plus
clutter) and classiﬁcation accuracy calculated on points.
# instance
Armeni et al. 
Table 4. Results on 3D object detection in scenes. Metric is
average precision with threshold IoU 0.5 computed in 3D volumes.
Figure 4. Qualitative results for semantic segmentation. Top
row is input point cloud with color. Bottom row is output semantic
segmentation result (on points) displayed in the same camera
viewpoint as input.
per point class in each block. Each point is represented by
a 9-dim vector of XYZ, RGB and normalized location as
to the room (from 0 to 1). At training time, we randomly
sample 4096 points in each block on-the-ﬂy. At test time,
we test on all the points. We follow the same protocol as 
to use k-fold strategy for train and test.
We compare our method with a baseline using handcrafted point features. The baseline extracts the same 9dim local features and three additional ones: local point
density, local curvature and normal. We use standard MLP
as the classiﬁer.
Results are shown in Table 3, where
our PointNet method signiﬁcantly outperforms the baseline
method. In Fig 4, we show qualitative segmentation results.
Our network is able to output smooth predictions and is
robust to missing points and occlusions.
Based on the semantic segmentation output from our
network, we further build a 3D object detection system
using connected component for object proposal (see supplementary for details). We compare with previous stateof-the-art method in Table 4. The previous method is based
on a sliding shape method (with CRF post processing) with
SVMs trained on local geometric features and global room
context feature in voxel grids. Our method outperforms it
by a large margin on the furniture categories reported.
5.2. Architecture Design Analysis
In this section we validate our design choices by control
experiments. We also show the effects of our network’s
hyperparameters.
Comparison with Alternative Order-invariant Methods
As mentioned in Sec 4.2, there are at least three options for
consuming unordered set inputs. We use the ModelNet40
shape classiﬁcation problem as a test bed for comparisons
of those options, the following two control experiment will
also use this task.
The baselines (illustrated in Fig 5) we compared with
include multi-layer perceptron on unsorted and sorted
sequential model
symmetry function
Figure 5. Three approaches to achieve order invariance. Multilayer perceptron (MLP) applied on points consists of 5 hidden
layers with neuron sizes 64,64,64,128,1024, all points share a
single copy of MLP. The MLP close to the output consists of two
layers with sizes 512,256.
points as n×3 arrays, RNN model that considers input point
as a sequence, and a model based on symmetry functions.
The symmetry operation we experimented include max
pooling, average pooling and an attention based weighted
sum. The attention method is similar to that in , where
a scalar score is predicted from each point feature, then the
score is normalized across points by computing a softmax.
The weighted sum is then computed on the normalized
scores and the point features. As shown in Fig 5, maxpooling operation achieves the best performance by a large
winning margin, which validates our choice.
Effectiveness of Input and Feature Transformations
Table 5 we demonstrate the positive effects of our input
and feature transformations (for alignment). It’s interesting
to see that the most basic architecture already achieves
quite reasonable results. Using input transformation gives
a 0.8% performance boost.
The regularization loss is
necessary for the higher dimension transform to work.
By combining both transformations and the regularization
term, we achieve the best performance.
Robustness Test
We show our PointNet, while simple
and effective, is robust to various kinds of input corruptions.
We use the same architecture as in Fig 5’s max pooling
network. Input points are normalized into a unit sphere.
Results are in Fig 6.
As to missing points, when there are 50% points missing,
the accuracy only drops by 2.4% and 3.8% w.r.t. furthest
and random input sampling. Our net is also robust to outlier
input (3x3)
feature (64x64)
feature (64x64) + reg.
Table 5. Effects of input feature transforms. Metric is overall
classiﬁcation accuracy on ModelNet40 test set.
Accuracy (%)
Perturbation noise std
Accuracy (%)
Missing data ratio
Accuracy (%)
Outlier ratio
XYZ+density
Figure 6. PointNet robustness test.
The metric is overall
classiﬁcation accuracy on ModelNet40 test set.
Left: Delete
points. Furthest means the original 1024 points are sampled with
furthest sampling. Middle: Insertion. Outliers uniformly scattered
in the unit sphere. Right: Perturbation. Add Gaussian noise to
each point independently.
points, if it has seen those during training. We evaluate two
models: one trained on points with (x, y, z) coordinates; the
other on (x, y, z) plus point density. The net has more than
80% accuracy even when 20% of the points are outliers.
Fig 6 right shows the net is robust to point perturbations.
5.3. Visualizing PointNet
In Fig 7, we visualize critical point sets CS and upperbound shapes NS (as discussed in Thm 2) for some sample
shapes S. The point sets between the two shapes will give
exactly the same global shape feature f(S).
We can see clearly from Fig 7 that the critical point
sets CS, those contributed to the max pooled feature,
summarizes the skeleton of the shape. The upper-bound
shapes NS illustrates the largest possible point cloud that
give the same global shape feature f(S) as the input point
cloud S. CS and NS reﬂect the robustness of PointNet,
meaning that losing some non-critical points does not
change the global shape signature f(S) at all.
The NS is constructed by forwarding all the points in a
edge-length-2 cube through the network and select points p
whose point function values (h1(p), h2(p), · · · , hK(p)) are
no larger than the global shape descriptor.
Original Shape
Critical Point Sets
Upper-bound Shapes
Figure 7. Critical points and upper bound shape. While critical
points jointly determine the global shape feature for a given shape,
any point cloud that falls between the critical points set and the
upper bound shape gives exactly the same feature. We color-code
all ﬁgures to show the depth information.
5.4. Time and Space Complexity Analysis
Table 6 summarizes space (number of parameters in
the network) and time (ﬂoating-point operations/sample)
complexity of our classiﬁcation PointNet. We also compare
PointNet to a representative set of volumetric and multiview based architectures in previous works.
While MVCNN and Subvolume (3D CNN) 
achieve high performance, PointNet is orders more efﬁcient
in computational cost (measured in FLOPs/sample: 141x
and 8x more efﬁcient, respectively).
Besides, PointNet
is much more space efﬁcient than MVCNN in terms of
#param in the network (17x less parameters). Moreover,
PointNet is much more scalable – it’s space and time
complexity is O(N) – linear in the number of input points.
However, since convolution dominates computing time,
multi-view method’s time complexity grows squarely on
image resolution and volumetric convolution based method
grows cubically with the volume size.
Empirically, PointNet is able to process more than
one million points per second for point cloud classiﬁcation (around 1K objects/second) or semantic segmentation
(around 2 rooms/second) with a 1080X GPU on Tensor-
Flow, showing great potential for real-time applications.
FLOPs/sample
PointNet (vanilla)
Subvolume 
MVCNN 
Table 6. Time and space complexity of deep architectures for
3D data classiﬁcation.
PointNet (vanilla) is the classiﬁcation
PointNet without input and feature transformations.
stands for ﬂoating-point operation. The “M” stands for million.
Subvolume and MVCNN used pooling on input data from multiple
rotations or views, without which they have much inferior
performance.
6. Conclusion
In this work, we propose a novel deep neural network
PointNet that directly consumes point cloud. Our network
provides a uniﬁed approach to a number of 3D recognition
tasks including object classiﬁcation, part segmentation and
semantic segmentation, while obtaining on par or better
results than state of the arts on standard benchmarks. We
also provide theoretical analysis and visualizations towards
understanding of our network.
Acknowledgement.
The authors gratefully acknowledge
the support of a Samsung GRO grant, ONR MURI N00014-
13-1-0341 grant, NSF grant IIS-1528025, a Google Focused Research Award, a gift from the Adobe corporation
and hardware donations by NVIDIA.