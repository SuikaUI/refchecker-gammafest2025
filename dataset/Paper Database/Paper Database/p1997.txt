IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS—PART B: CYBERNETICS, VOL. 34, NO. 1, FEBRUARY 2004
Algorithmic Mechanism Design for Load Balancing
in Distributed Systems
Daniel Grosu, Student Member, IEEE, and Anthony T. Chronopoulos, Senior Member, IEEE
Abstract—Computational grids are promising next-generation
computing platforms for large-scale problems in science and engineering. Grids are large-scale computing systems composed of geographically distributed resources (computers, storage etc.) owned
by self interested agents or organizations. These agents may manipulate the resource allocation algorithm in their own benefit, and
their selfish behavior may lead to severe performance degradation
and poor efficiency.
In this paper, we investigate the problem of designing protocols
for resource allocation involving selfish agents. Solving this kind
of problems is the object of mechanism design theory. Using this
theory, we design a truthful mechanism for solving the static load
balancing problem in heterogeneous distributed systems. We prove
that using the optimal allocation algorithm the output function admits a truthful payment scheme satisfying voluntary participation.
We derive a protocol that implements our mechanism and present
experiments to show its effectiveness.
Index Terms—Distributed systems, game theory, mechanism design, static load balancing.
I. INTRODUCTION
N CURRENT distributed systems such as computational
grids, resources belong to different self interested agents or
organizations. These agents may manipulate the load allocation
algorithm in their own benefit, and their selfish behavior may
lead to severe performance degradation and poor efficiency.
Solving such problems involving selfish agents is the object of
mechanism design theory (also called implementation theory)
 . This theory helps design protocols in which the agents
are always forced to tell the truth and follow the rules. Such
mechanisms are called truthful or strategy-proof.
Each participating agent has a privately known function
called valuation which quantifies the agent benefit or loss.
The valuation depends on the outcome and is reported to a
centralized mechanism. The mechanism chooses an outcome
that maximizes a given objective function and makes payments
to the agents. The valuations and payments are expressed in
some common unit of currency. The payments are designed
and used to motivate the agents to report their true valuations.
Reporting the true valuations leads to an optimal value for the
Manuscript received June 11, 2002. This work was supported in part by research grants from NASA NAG 2-1383 , the State of Texas Higher
Education Coordinating Board under the Texas Advanced Research/Advanced
Technology Program ATP 003658-0442-1999, and the Center for Infrastructure
and Security at the University of Texas at San Antonio. This paper was recommended by Associate Editor S. Phoha.
The authors are with the Department of Computer Science, University of Texas at San Antonio, San Antonio, TX 78249 USA (e-mail:
 ; ).
Digital Object Identifier 10.1109/TSMCB.2002.805812
objective function. The goal of each agent is to maximize the
sum of her valuation and payment.
In this paper, we consider the mechanism design problem for
load balancing in distributed systems. A general formulation of
the load balancing problem is as follows: Given a large number
of jobs, find the allocation of jobs to computers optimizing a
given objective function (e.g., total execution time).
There are three typical approaches to load balancing problem
in distributed systems.
1) Global approach: In this case, there is only one decision maker that optimizes the response time of the entire system over all jobs and the operating point is called
social optimum. This is the classical approach and has
been studied extensively using different techniques such
as nonlinear optimization , and polymatroid optimization .
2) Cooperative approach: In this case, there are several
decision makers (e.g., jobs, computers) that cooperate
in making the decisions such that each of them will
operate at its optimum. Decision makers have complete
freedom of preplay communication to make joint agreements about their operating points. This situation can be
modeled as a cooperative game and game theory offers a
suitable modeling framework .
3) Noncooperative approach: In this case, each of infinitely
many jobs optimizes its own response time independently
of the others, and they all eventually reach an equilibrium.
This situation can be viewed as a noncooperative game
among jobs. The equilibrium is called Wardrop equilibrium . At the Wardrop equilibrium, a job cannot receive any further benefit by changing its own decision. If
the number of jobs are finite, the Wardrop equilibrium reduces to the well-known Nash equilibrium .
Our goal is to design a mechanism that uses the optimal
load balancing algorithm. The optimal algorithm belongs to
the global approach in the classification presented above.
To design our mechanism we use the framework derived by
Archer and Tardos in . We assume that each computer in
the distributed system is characterized by its processing rate,
and only computer
knows the true value of its processing rate.
Jobs arrive at the system with a given arrival rate. The optimal
algorithm finds the fraction of load that is allocated to each
computer such that the expected execution time is minimized.
The cost incurred by each computer is proportional to its
utilization. The mechanism will ask each agent (computer)
to report its processing rate and then compute the allocation
using the optimal algorithm. After computing the allocation the
mechanism hands payments to computers.
1083-4419/04$20.00 © 2004 IEEE
IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS—PART B: CYBERNETICS, VOL. 34, NO. 1, FEBRUARY 2004
Each computer goal is to chose a processing rate to report to
the mechanism such that its profit is maximized. The profit is
the difference between the payment handed by the mechanism
and the true cost of processing the allocated jobs. The payments
handed by the mechanism must motivate the computers to report their true value such that the expected response time of the
entire system is minimized. Thus we need to design a payment
function that guarantees this property.
Related Work: Recently, with the emergence of the Internet
as a global platform for computation and communication,
the need for efficient protocols that deals with self-interested
agents has increased. This motivated the use of mechanism
design theory in different settings such as market-based protocols for resource allocation in computational grids , ,
market-based protocols for scheduling , congestion control
 , routing , and mechanisms for trading CPU time .
A recent survey on distributed algorithmic mechanism design
is . For an introduction to general mechanism design theory,
The most important result in mechanism design theory is the
Vickrey–Clarke–Groves (VCG) mechanism , , . The
VCG mechanism allows arbitrary form for valuations and its
applicability is restricted to utilitarian objective functions (i.e.,
the objective function is the sum of agents’ valuations).
Nisan and Ronen studied the mechanism design problem
for several standard problems in computer science. Using the
VCG mechanism, they solved the shortest path problem in a
graph where each edge belongs to a different agent. For scheduling on unrelated machines, they designed an
-approximation truthful mechanism, where
is the number of agents. They
proved a lower bound of 2 to the approximation ratio of any
mechanism for this problem and conjectured that no truthful
mechanism can yield an approximation ratio better than
also gave a mechanism that solves exactly the problem of scheduling jobs on unrelated machines in a model where the mechanism has more information. In this extended model, the payments are given after jobs’ execution allowing the mechanism
to verify the agent’s declarations and penalize them for lying.
The computational feasibility of VCG mechanisms is
addressed in . The authors proved that all reasonable
approximations or heuristics for a wide class of minimization
problems yield nontruthful VCG-based mechanisms (i.e.,
mechanisms that use the VCG payment scheme and a suboptimal allocation algorithm). They showed that under reasonable
assumption any VCG-based mechanism can be made feasible
A polynomial VCG mechanism for shortest paths is proposed
in . Feigenbaum et al. studied two mechanisms for costsharing in multicast transmissions. Frugality of shortest paths
mechanisms is investigated in .
Archer and Tardos applied mechanism design theory to
several combinatorial optimization problems where agent’s secret data is represented by a single real valued parameter. They
provided a method to design mechanisms for general objective
functions and restricted form for valuations. For scheduling related parallel machines, they gave a three-approximation algorithm and used it to design a truthful mechanism. They also gave
truthful mechanisms for maximum flow, scheduling related machines to minimize the sum of completion times, optimizing
an affine function and special cases of uncapacitated facility
Our Contributions: We design a truthful mechanism for
solving the static load balancing problem in distributed systems.
We prove that using the optimal allocation algorithm the output
function admits a truthful payment scheme satisfying voluntary participation. We derive a protocol that implements our
mechanism and present experiments to show its effectiveness.
Organization: The paper is structured as follows. In Section II, we present the mechanism design terminology. In Section III, we present our distributed system model. In Section IV,
we design a truthful mechanism for load balancing in distributed
systems. In Section V, the effectiveness of our load balancing
mechanism is investigated. In Section VI, we draw conclusions
and present future directions.
II. MECHANISM DESIGN CONCEPTS
In this section, we introduce some important mechanism design concepts. We limit our description to mechanism design
problems for one parameter agents. In this type of mechanism
design problems each agent has some private data represented
by a single real valued parameter . In the following, we define such problem.
Definition 2.1 (Mechanism Design Problem): A mechanism
design problem for one parameter agents is characterized by the
following.
i) A finite set
of allowed outputs. The output is a vector
, computed
according to the agents’ bids
is the value (bid) reported by agent to the mechanism.
ii) Each agent , (
) has a privately known parameter
called her true value. The cost incurred by each
agent depends on the output and on her true value and is
denoted as
iii) Each agent goal is to maximize her profit. The profit of
is the payment handed by the mechanism to agent .
iv) The goal of the mechanism is to select an output
optimizes a given cost function
We assume that the cost functions have the following particular form:
represents the cost
per unit load.
Definition 2.2 (Mechanism): A mechanism is characterized
by two functions:
i) The output function
This function has as input the vector of agents’ bids
and returns an output
ii) The payment function
that gives the payment handed by the mechanism to each
Notation: In the rest of the paper, we denote by
the vector
of bids, not including the bid of agent . The vector
is represented as
Definition 2.3 (Truthful Mechanism): A mechanism is called
truthful if for every agent of type
and for every bids
GROSU AND CHRONOPOULOS: ALGORITHMIC MECHANISM DESIGN
Distributed system model.
other agents, the agent’s profit is maximized when she declares
her real type
. (i.e., truth-telling is a dominant strategy).
Definition 2.4 (Truthful Payment Scheme): We say that an
output function admits a truthful payment scheme if there exists
a payment function
such that the mechanism is truthful.
A desirable property of a mechanism is that the profit of a
truthful agent is always non-negative. The agents hope for a
profit by participating in the mechanism.
Definition 2.5 (Voluntary Participation Mechanism): We say
that a mechanism satisfies the voluntary participation condition
for every agent , true values
other agents’ bids
(i.e., truthful agents never incur a loss).
III. DISTRIBUTED SYSTEM MODEL
We consider a distributed system that consists of
heterogeneous computers connected by a communication network.
Computers have the same processing capabilities in the sense
that a job may be processed from start to finish at any computer in the system. We assume that each computer is modeled
as an M/M/1 queueing system (i.e., Poisson arrivals and exponentially distributed processing times) and is characterized
by its average processing rate
. Jobs are generated by users and arrive at the system according to a time invariant Poisson process with average rate
job arrival rate in the system. The total job arrival rate must
be less than the aggregate processing rate of the system (i.e.,
). The system model is presented in Fig. 1. The
system has to decide on how to distribute jobs to computers such
that it will operate optimally. We assume that the decision to distribute jobs to computers is static i.e., it does not depend on the
current state of the system. Thus we need to find the load
is assigned to computer
) such that the expected
response time of all jobs is minimized. The expected response
time at computer
is given by
Thus, the overall expected response time is given by
is the vector of loads assigned to
computers.
We assume that computers are agents and each of them has a
true value
represented by the inverse of its processing rate
. Only computer
. The mechanism will
ask each computer
to report its value
(the inverse of its
processing rate). The computers may not report the true value.
After all the computers report their values the mechanism computes an output function (i.e., the loads assigned to computers),
, according to the agents’ bids
such that the overall expected execution time is minimized. The
mechanism also hands a payment
to each computer. All
computers know the algorithm used to compute the output function (allocation) and the payment scheme.
Each computer incurs some cost:
The cost is equivalent to computer utilization. The greater the
utilization, the greater the cost. We assume each computer wants
to choose its strategy (what value
to report) such that its profit
is maximized. The profit for each computer is defined as the
payment received from the mechanism minus the cost incurred
in running the jobs allocated to it:
Our goal is to design a truthful mechanism that minimizes
the overall expected response time of the system. This involves
finding an allocation algorithm and a payment scheme that minimizes the overall expected response time according to the computer bids
and motivates all the computers to report their true
IV. DESIGNING THE MECHANISM
To design our load balancing mechanism we use the framework proposed by Archer and Tardos in . They provided a
method to design mechanisms where each agent’s true data is
represented by a single real valued parameter. According to this
method, to obtain a truthful mechanism we must find an output
function satisfying two conditions: a) It minimizes
it is decreasing in the bids. In addition, we want a mechanism
satisfying voluntary participation. To guarantee this property we
must find a payment function satisfying voluntary participation.
First, we are interested in finding an output function
that minimizes the expected execution time over all jobs
and produces a feasible allocation. Then we will show that this
output function is decreasing in the bids.
Definition 4.1 (Feasible Allocation): A feasible allocation
is a load allocation that satisfies the following conditions:
i) Positivity:
ii) Conservation:
iii) Stability:
IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS—PART B: CYBERNETICS, VOL. 34, NO. 1, FEBRUARY 2004
The optimal load allocation can be obtained solving the following nonlinear optimization problem:
subject to the constraints defined by the conditions i)-iii).
Thus, obtaining the solution to this problem involves minimizing the convex function
over a convex feasible region defined by the conditions i)-iii). In this case, the first order
Kuhn–Tucker conditions are necessary and sufficient for optimality .
denote the Lagrange multipliers . The Lagrangian function is
The Kuhn–Tucker conditions imply that
the optimal solution to our problem if and only if there exists
These conditions become
These are equivalent to
By solving these conditions, one can obtain the optimal algorithm but this is not our focus in this paper. Algorithms for
this kind of optimization problem were proposed in the past
 , . For the clarity of presentation, we describe a variant
of the algorithm in using our notations. Our derivation of
this algorithm is different from their approach and was partially
presented above because some of the equations will be used
to prove our results in Theorems 4.1 and 4.2 below. We now
present the algorithm.
OPTIM algorithm:
Input: Bids
submitted by
Total arrival rate:
Output: Load allocation:
1. Sort the computers in increasing order
of their bids
3. while (
Remark: In step 2, the coefficient
is computed. This coefficient is used in step 3 (while-loop) to determine which computers have slow processing rates. If
, then computer
is too slow and will not be used for the allocation (i.e.,
). The number of computers
is decremented by 1, and
is computed. Step 4 computes the loads
that will be
allocated to each computer.
allocation
that provides the overall optimum
for the expected execution time. This optimum is obtained
according to the bids reported by computers. If some of
the computers declare values different than their true values
), this optimum may not be the same as the “true
optimum” obtained when all the computers declare their true
values. Therefore, if some of the computers lie, we expect
worse performance (i.e., higher overall expected execution
We found an output function (given by OPTIM) that minimizes
. Now, we must prove that this output function admits a truthful mechanism. In the following we state and prove
two theorems: i) that the output function is decreasing in the
bids (thus guaranteeing truthfulness) and ii) that our mechanism
admits a truthful payment scheme satisfying voluntary participation.
Definition 4.2 (Decreasing Output Function): An output
is decreasing if
is a decreasing function of
Theorem 4.1: The output function
computed by the optimal algorithm is decreasing.
Proof: See the Appendix .
Theorem 4.2: The output function
computed by the optimal algorithm admits a truthful payment scheme satisfying
voluntary participation and the payment for each computer
) is given by
Proof: See the Appendix .
Remarks: Analogously to , we obtained
our mechanism. The first term
of the payment
function in (16) compensates the cost incurred by computer
GROSU AND CHRONOPOULOS: ALGORITHMIC MECHANISM DESIGN
. The second term
represents the expected
profit of computer . If computer
bids its true value
its profit
If computer
bids its true value, then the expected profit is
greater than in the case it bids other values. We can explain this
as follows. If computer
bids higher (
), then the expected profit
, we can express
the profit when computer
bids the true value as follows:
is decreasing in
, we have the following equation:
From this relation, it can be seen that
. The same argument applies to the case when computer
bids lower.
Because the optimal algorithm assumes a central dispatcher,
the mechanism will be implemented in a centralized way as part
of the dispatcher code. We assume that the dispatcher is run on
one of the computers and is able to communicate with all the
other computers in the distributed system.
In the following, we present the protocol that implements
our load balancing mechanism (LBM). This protocol has two
phases: bidding and completion.
Protocol LBM:
Phase I: Bidding
1) The dispatcher sends a request for bids message (ReqBid) to each computer in the system.
2) When a computer receives a ReqBid, it replies with
to the dispatcher.
Phase II: Completion
1) After the dispatcher collects all the bids, it does the
following:
1) Computes the allocation using OPTIM algorithm.
2) Computes the payments
for each computer
using (16).
to each computer .
2) Each computer receives its payment and evaluates its
This protocol is executed periodically or when there is a
change in the total job arrival rate. During two executions of
SYSTEM CONFIGURATION
this protocol, the jobs will be allocated to computers by the
dispatcher according to the allocation computed by OPTIM.
Computers will receive the maximum profit only when they
report the true value.
V. EXPERIMENTAL RESULTS
To study the effectiveness of our truthful mechanism, we
simulated a heterogeneous system consisting of 16 computers
with four different processing rates. In Table I, we present
the system configuration. The first row contains the relative
processing rates of each of the four computer types. Here, the
relative processing rate for computer
is defined as the ratio
of the processing rate of
to the processing rate of the slowest
computer in the system. The second row contains the number
of computers in the system corresponding to each computer
type. The last row shows the processing rate of each computer
type in the system. We choose 0.013 jobs/s as the processing
rate for the slowest computer because it is a value that can be
found in real distributed systems . In addition, we consider
only computers that are at most ten times faster than the slowest
because this is the case in most of the current heterogeneous
distributed systems.
We study the performance degradation due to false bids declarations. We define performance degradation (PD) as follows:
is the response time
of the system when one or more computers report false values;
is the “true” optimal response time of the system when
all computers report their true values. PD quantifies the increase
in the execution time due to false bidding. As we pointed out in
the previous section, if all the computers report their true values,
then the ”true” optimum is obtained and
. We expect
an increase in the response time and in PD when one or more
computers lie.
In our experiments we consider that the fastest computer
declares false bids.
as its true value.
In Fig. 2, we present the degradation in expected response time
of the system for different values of system utilization (ranging
from 10% to 90%) and two types of bidding: overbidding and
underbidding. System utilization ( ) is defined as the ratio of
total arrival rate to aggregate processing rate of the system:
. In the first experiment,
bids 7% lower than the
true value. In this case the performance degradation is around
2% for low and medium system utilization, increasing drastically (around 300%) for high system utilization. This increase
is due to computer
overloading. The overloading occurs because
bids lower, which means that it reports a higher value
for its processing rate. The algorithm will allocate more jobs to
, increasing its response time. This increase is reflected in the
expected response time of the system. In the second experiment,
IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS—PART B: CYBERNETICS, VOL. 34, NO. 1, FEBRUARY 2004
Performance degradation versus system utilization.
Fairness index versus system utilization.
bids 33% higher than the true value. In this case the performance degradation is about 6% at low system utilization, about
15% at medium system utilization, and more than 80% at high
system utilization. It can be observed that small deviations from
the true value of only one computer may lead to large values
of performance degradation. If we consider that more than one
computer does not report its true value then we expect very poor
performance. This justifies the need for a mechanism that will
force the computers to declare their true values. In Fig. 3, we
present the variations in the fairness index. The fairness index
was proposed in to quantify the fairness of load balancing
schemes. This index is a measure of the “equality” of execution
times at different computers. Therefore, it is a measure of load
balance. If all the computers have the same expected job execution times, then
, and the system is 100% fair to all jobs
and is load balanced. If the differences on
decreases, and the load balancing scheme favors only some tasks.
Profit for each computer (medium system load).
Payment structure for each computer (C bids higher).
It can be observed that in the case of underbidding the fairness index decreases drastically at high system loads. This is because
’s response time is much higher than that of the other
computers. The fairness index is maintained around 90% for all
other values. If more than one computer does not report its true
value, then we expect small variations in the fairness index. This
can also be seen from the definition of this index.
In Fig. 4, we present the profit for each computer at medium
system loads (
). It can be observed that the profit at
is maximum if it bids the true value, 3% lower if it bids
higher and 1% lower if it bids lower. The mechanism penalizes
if it does not report the true value. When
bids lower,
the other computer’s profits are lower because their payments
decrease. Computers
are not utilized when
underbids and when it reports the true value; therefore, they gain
). These computers
will be utilized in the case when
overbids, getting a small
profit. When
overbids, the profit for all the computers except
is higher than in the case when
bids the true value.
This is because the payments increase for these computers.
An important issue is the frugality of our mechanism. We say
that a mechanism is frugal if the mechanism’s payments are
small by some measure . This property gives us an idea of
how efficient a mechanism is. The mechanism is interested in
keeping its payments as small as possible. Each payment consists of an execution cost plus a profit for the computer which
runs the jobs. Our mechanism must preserve voluntary participation, so the lower bound on its payments is the total cost incurred by the computers.
In Figs. 5 and 6, we present the cost and profit as fractions
of the payment received by each computer at medium loads.
In these figures, we are interested to see how close to the cost
GROSU AND CHRONOPOULOS: ALGORITHMIC MECHANISM DESIGN
Payment structure for each computer (C bids lower).
Total payment versus system utilization.
is the payment to each computer. It can be observed that the
cost incurred by
when it bids higher is about 25% of the
payment. In the case when
bids lower, its cost is about 35%
of the payment. For the other computers, the cost is between
50 and 90% when
bids higher and between 53 and 100%
bids lower. For the distributed system considered in
these experiments (medium loads) the highest payment given to
a computer is about three times its cost.
In Fig. 7, we present the total cost and profit as fractions of the
total payment for different values of system utilization when
reports its true value. The total cost is about 21% of the payment
at 90% system utilization, which is the smallest percentage. The
percentage of cost increases to 40% at 10% system utilization.
At medium loads the mechanism pays less than three times the
total cost. When
bids lower and higher, the percentages are
similar and are not presented here. We expect that these values
are also valid considering other parameters of the distributed
VI. CONCLUSION
In current distributed systems such as computational grids,
resources belong to different self interested agents or organizations. These agents may manipulate the load allocation algorithm in their own benefit, and their selfish behavior may lead
to severe performance degradation and poor efficiency.
In this paper, we investigated the problem of designing protocols for resource allocation involving selfish agents. Solving
this kind of problems is the object of mechanism design theory.
Using this theory, we designed a truthful mechanism for solving
the load balancing problem in heterogeneous distributed systems. We proved that using the optimal allocation algorithm
the output function admits a truthful payment scheme satisfying
voluntary participation. We derived a protocol that implements
our mechanism and presented experiments to show its effectiveness.
Future work will address the implementation of our load balancing mechanism in a real distributed system as well as the
design of a distributed load balancing mechanism.
In this section, we present the proofs of the results used in the
A. Proof for Theorem 4.1
We fix the other bids and consider
as a single variable function of
be any two bids such that
. In terms of processing rates, we have
be the loads allocated by
the optimal algorithm when computer
, respectively. We must prove that
, i.e., the allocation function
computed by the optimal algorithm is decreasing in
Assume by contradiction that
. This implies
. This means that
is higher than
there must be a computer
the Kuhn–Tucker conditions for optimality (13),
(14) imply that
, the Kuhn–Tucker conditions for
optimality in (13) and (14) imply that
Combining (18)–(21), we obtain
. Also, using
, we obtain the following
This is a contradiction because
B. Proof of Theorem 4.2
We use the result of Archer and Tardos that states that
if the output function is decreasing in the bids then it admits a
truthful payment scheme. We proved in Theorem 4.1 that the
load function
is decreasing in the bids; therefore, it admits
a truthful mechanism.
We next use another result from , stating that if the area
under the work curve is finite, the mechanism admits voluntary
participation. For feasible bids, the area under the work curve is
finite, i.e.,
IEEE TRANSACTIONS ON SYSTEMS, MAN, AND CYBERNETICS—PART B: CYBERNETICS, VOL. 34, NO. 1, FEBRUARY 2004
is the bid that corresponds to
. Thus, our
mechanism admits voluntary participation and the payments are
given by (16).
ACKNOWLEDGMENT
The authors wish to express their thanks to the editor and the
anonymous referees for their helpful and constructive suggestions, which considerably improved the quality of the paper.