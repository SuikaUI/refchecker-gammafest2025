Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1832–1846
Vancouver, Canada, July 30 - August 4, 2017. c⃝2017 Association for Computational Linguistics
 
Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, pages 1832–1846
Vancouver, Canada, July 30 - August 4, 2017. c⃝2017 Association for Computational Linguistics
 
Gated-Attention Readers for Text Comprehension
Bhuwan Dhingra∗
Hanxiao Liu∗
Zhilin Yang
William W. Cohen
Ruslan Salakhutdinov
School of Computer Science
Carnegie Mellon University
{bdhingra,hanxiaol,zhiliny,wcohen,rsalakhu}@cs.cmu.edu
In this paper we study the problem of answering cloze-style questions over documents.
Our model, the Gated-Attention
(GA) Reader1, integrates a multi-hop architecture with a novel attention mechanism, which is based on multiplicative interactions between the query embedding
and the intermediate states of a recurrent
neural network document reader.
enables the reader to build query-speciﬁc
representations of tokens in the document
for accurate answer selection.
Reader obtains state-of-the-art results on
three benchmarks for this task–the CNN &
Daily Mail news stories and the Who Did
What dataset. The effectiveness of multiplicative interaction is demonstrated by an
ablation study, and by comparing to alternative compositional operators for implementing the gated-attention.
Introduction
A recent trend to measure progress towards machine reading is to test a system’s ability to answer questions about a document it has to comprehend.
Towards this end, several large-scale
datasets of cloze-style questions over a context
document have been introduced recently, which
allow the training of supervised machine learning
systems .
Such datasets can be easily constructed automatically and the unambiguous nature of their queries provides an objective
benchmark to measure a system’s performance at
text comprehension.
∗BD and HL contributed equally to this work.
1Source code is available on github:
github.com/bdhingra/ga-reader
Deep learning models have been shown to outperform traditional shallow approaches on text
comprehension tasks . The
success of many recent models can be attributed
primarily to two factors: (1) Multi-hop architectures , allow a model to scan the document and the question iteratively for multiple
passes. (2) Attention mechanisms, borrowed from the
machine translation literature , allow the model to focus on appropriate
subparts of the context document. Intuitively, the
multi-hop architecture allows the reader to incrementally reﬁne token representations, and the attention mechanism re-weights different parts in
the document according to their relevance to the
The effectiveness of multi-hop reasoning and
attentions have been explored orthogonally so far
in the literature. In this paper, we focus on combining both in a complementary manner, by designing a novel attention mechanism which gates
the evolving token representations across hops.
More speciﬁcally, unlike existing models where
the query attention is applied either token-wise
 or sentence-wise
 to
allow weighted aggregation, the Gated-Attention
(GA) module proposed in this work allows the
query to directly interact with each dimension of
the token embeddings at the semantic-level, and is
applied layer-wise as information ﬁlters during the
multi-hop representation learning process. Such a
ﬁne-grained attention enables our model to learn
conditional token representations w.r.t. the given
question, leading to accurate answer selections.
We show in our experiments that the proposed
GA reader, despite its relative simplicity, consis-
tently improves over a variety of strong baselines
on three benchmark datasets . Our key contribution, the GA module, provides a signiﬁcant improvement for large datasets.
Qualitatively, visualization of the attentions at intermediate layers of the GA reader shows that in each layer the
GA reader attends to distinct salient aspects of the
query which help in determining the answer.
Related Work
The cloze-style QA task involves tuples of the
form (d, q, a, C), where d is a document (context),
q is a query over the contents of d, in which a
phrase is replaced with a placeholder, and a is the
answer to q, which comes from a set of candidates
C. In this work we consider datasets where each
candidate c ∈C has at least one token which also
appears in the document. The task can then be
described as: given a document-query pair (d, q),
ﬁnd a ∈C which answers q. Below we provide an
overview of representative neural network architectures which have been applied to this problem.
LSTMs with Attention: Several architectures introduced in Hermann et al. employ LSTM
units to compute a combined document-query representation g(d, q), which is used to rank the candidate answers.
These include the DeepLSTM
Reader which performs a single forward pass
through the concatenated (document, query) pair
to obtain g(d, q); the Attentive Reader which ﬁrst
computes a document vector d(q) by a weighted
aggregation of words according to attentions based
on q, and then combines d(q) and q to obtain
their joint representation g(d(q), q); and the Impatient Reader where the document representation is built incrementally. The architecture of the
Attentive Reader has been simpliﬁed recently in
Stanford Attentive Reader, where shallower recurrent units were used with a bilinear form for the
query-document attention .
Attention Sum:
The Attention-Sum (AS)
Reader uses two bidirectional GRU networks to
encode both d and q into vectors. A probability
distribution over the entities in d is obtained by
computing dot products between q and the entity
embeddings and taking a softmax. Then, an aggregation scheme named pointer-sum attention is
further applied to sum the probabilities of the same
entity, so that frequent entities the document will
be favored compared to rare ones. Building on the
AS Reader, the Attention-over-Attention (AoA)
Reader introduces a two-way
attention mechanism where the query and the document are mutually attentive to each other.
Mulit-hop Architectures: Memory Networks
(MemNets) were proposed in Weston et al.
 , where each sentence in the document
is encoded to a memory by aggregating nearby
Attention over the memory slots given
the query is used to compute an overall memory
and to renew the query representation over multiple iterations, allowing certain types of reasoning
over the salient facts in the memory and the query.
Neural Semantic Encoders (NSE) extended MemNets by introducing a
write operation which can evolve the memory over
time during the course of reading. Iterative reasoning has been found effective in several more recent
models, including the Iterative Attentive Reader
 and ReasoNet . The latter allows dynamic reasoning steps
and is trained with reinforcement learning.
Other related works include Dynamic Entity Representation network (DER) , which builds dynamic representations of the candidate answers while reading the
document, and accumulates the information about
an entity by max-pooling; EpiReader consists of two networks, where one
proposes a small set of candidate answers, and the
other reranks the proposed candidates conditioned
on the query and the context; Bi-Directional
Attention Flow network (BiDAF) adopts a multi-stage hierarchical architecture along with a ﬂow-based attention mechanism;
Bajgar et al. showed a 10% improvement
on the CBT corpus by training the AS Reader on an augmented training set
of about 14 million examples, making a case for
the community to exploit data abundance. The focus of this paper, however, is on designing models
which exploit the available data efﬁciently.
Gated-Attention Reader
Our proposed GA readers perform multiple hops
over the document (context), similar to the Memory Networks architecture . Multi-hop architectures mimic the multistep comprehension process of human readers, and
have shown promising results in several recent
models for text comprehension . The
contextual representations in GA readers, namely
the embeddings of words in the document, are iteratively reﬁned across hops until reaching a ﬁnal attention-sum module 
which maps the contextual representations in the
last hop to a probability distribution over candidate answers.
The attention mechanism has been introduced
recently to model human focus, leading to significant improvement in machine translation and image captioning . In reading comprehension tasks, ideally,
the semantic meanings carried by the contextual
embeddings should be aware of the query across
hops. As an example, human readers are able to
keep the question in mind during multiple passes
of reading, to successively mask away information
irrelevant to the query. However, existing neural
network readers are restricted to either attend to
tokens 
or entire sentences , with the
assumption that certain sub-parts of the document
are more important than others. In contrast, we
propose a ﬁner-grained model which attends to
components of the semantic representation being
built up by the GRU. The new attention mechanism, called gated-attention, is implemented via
multiplicative interactions between the query and
the contextual embeddings, and is applied per hop
to act as ﬁne-grained information ﬁlters during the
multi-step reasoning. The ﬁlters weigh individual
components of the vector representation of each
token in the document separately.
The design of gated-attention layers is motivated by the effectiveness of multiplicative interaction among vector-space representations, e.g.,
in various types of recurrent units and in relational learning . While other types of compositional operators are possible, such as concatenation or addition
 , we ﬁnd that multiplication has strong empirical performance (section
4.3), where query representations naturally serve
as information ﬁlters across hops.
Model Details
Several components of the model use a Gated Recurrent Unit (GRU) which maps
an input sequence X = [x1, x2, . . . , xT ] to an
ouput sequence H = [h1, h2, . . . , hT ] as follows:
rt = σ(Wrxt + Urht−1 + br),
zt = σ(Wzxt + Uzht−1 + bz),
˜ht = tanh(Whxt + Uh(rt ⊙ht−1) + bh),
ht = (1 −zt) ⊙ht−1 + zt ⊙˜ht.
where ⊙denotes the Hadamard product or the
element-wise multiplication. rt and zt are called
the reset and update gates respectively, and ˜ht
the candidate output. A Bi-directional GRU (Bi-
GRU) processes the sequence in both forward and
backward directions to produce two sequences
2, . . . , hf
T ] and [hb
2, . . . , hb
T ], which are
concatenated at the output
GRU(X) = [hf
T , . . . , hf
GRU(X) denotes the full output of the
Bi-GRU obtained by concatenating each forward
i and backward state hb
T−i+1 at step i given
the input X. Note
GRU(X) is a matrix in R2nh×T
where nh is the number of hidden units in GRU.
Let X(0) = [x(0)
2 , . . . x(0)
|D|] denote the token embeddings of the document, which are also
inputs at layer 1 for the document reader below,
and Y = [y1, y2, . . . y|Q|] denote the token embeddings of the query. Here |D| and |Q| denote the
document and query lengths respectively.
Multi-Hop Architecture
Fig. 1 illustrates the Gated-Attention (GA) reader.
The model reads the document and the query over
K horizontal layers, where layer k receives the
contextual embeddings X(k−1) of the document
from the previous layer. The document embeddings are transformed by taking the full output of
a document Bi-GRU (indicated in blue in Fig. 1):
D (X(k−1))
At the same time, a layer-speciﬁc query representation is computed as the full output of a separate
query Bi-GRU (indicated in green in Figure 1):
Next, Gated-Attention is applied to D(k) and
Q(k) to compute inputs for the next layer X(k).
X(k) = GA(D(k), Q(k))
where GA is deﬁned in the following subsection.
Figure 1: Gated-Attention Reader. Dashed lines represent dropout connections.
Gated-Attention Module
For brevity, let us drop the superscript k in this
subsection as we are focusing on a particular layer.
For each token di in D, the GA module forms a
token-speciﬁc representation of the query ˜qi using
soft attention, and then multiplies the query representation element-wise with the document token
representation. Speciﬁcally, for i = 1, . . . , |D|:
αi = softmax(Q⊤di)
xi = di ⊙˜qi
In equation (6) we use the multiplication operator
to model the interactions between di and ˜qi. In
the experiments section, we also report results for
other choices of gating functions, including addition xi = di + ˜qi and concatenation xi = di∥˜qi.
Answer Prediction
T−ℓ+1 be an intermediate output of the ﬁnal layer query Bi-GRU at the location ℓof the cloze token in the query, and D(K) =
D (X(K−1)) be the full output of ﬁnal layer
document Bi-GRU. To obtain the probability that
a particular token in the document answers the
query, we take an inner-product between these
two, and pass through a softmax layer:
s = softmax((q(K)
where vector s deﬁnes a probability distribution
over the |D| tokens in the document. The probability of a particular candidate c ∈C as being the
answer is then computed by aggregating the probabilities of all document tokens which appear in c
and renormalizing over the candidates:
Pr(c|d, q) ∝
where I(c, d) is the set of positions where a token
in c appears in the document d. This aggregation
operation is the same as the pointer sum attention
applied in the AS Reader .
Finally, the candidate with maximum probability is selected as the predicted answer:
a∗= argmaxc∈C Pr(c|d, q).
During the training phase, model parameters of
GA are updated w.r.t. a cross-entropy loss between
the predicted probabilities and the true answers.
Further Enhancements
Character-level Embeddings: Given a token w
from the document or query, its vector space representation is computed as x = L(w)||C(w). L(w)
retrieves the word-embedding for w from a lookup
table L ∈R|V |×nl, whose rows hold a vector for
each unique token in the vocabulary. We also utilize a character composition model C(w) which
generates an orthographic embedding of the token.
Such embeddings have been previously shown to
be helpful for tasks like Named Entity Recognition
 and dealing with OOV tokens
at test time . The embedding
C(w) is generated by taking the ﬁnal outputs zf
nc of a Bi-GRU applied to embeddings from
a lookup table of characters in the token, and applying a linear transformation:
C(w) = Wz + b
Question Evidence Common Word Feature (qecomm): Li et al. recently proposed a simple token level indicator feature which signiﬁcantly boosts reading comprehension performance
in some cases. For each token in the document we
construct a one-hot vector fi ∈{0, 1}2 indicating
its presence in the query. It can be incorporated
into the GA reader by assigning a feature lookup
table F ∈RnF ×2 (we use nF = 2), taking the
feature embedding ei = fT
i F and appending it
to the inputs of the last layer document BiGRU
∥fi for all i. We conducted several experiments both with and without this feature and
observed some interesting trends, which are discussed below. Henceforth, we refer to this feature
as the qe-comm feature or just feature.
Experiments and Results
We evaluate the GA reader on ﬁve large-scale
datasets recently proposed in the literature. The
ﬁrst two, CNN and Daily Mail news stories2 consist of articles from the popular CNN and Daily
Mail websites . A query
over each article is formed by removing an entity from the short summary which follows the
article. Further, entities within each article were
anonymized to make the task purely a comprehension one.
N-gram statistics, for instance, computed over the entire corpus are no longer useful
in such an anonymized corpus.
The next two datasets are formed from two different subsets of the Children’s Book Test (CBT)3
 . Documents consist of 20 contiguous sentences from the body of a popular children’s book, and queries are formed by deleting a
token from the 21st sentence. We only focus on
subsets where the deleted token is either a common noun (CN) or named entity (NE) since simple
language models already give human-level performance on the other types ).
2 
3 
CBTest.tgz
The ﬁnal dataset is Who Did What4 (WDW)
 , constructed from the LDC
English Gigaword newswire corpus. First, article
pairs which appeared around the same time and
with overlapping entities are chosen, and then one
article forms the document and a cloze query is
constructed from the other. Missing tokens are always person named entities. Questions which are
easily answered by simple baselines are ﬁltered
out, to make the task more challenging. There are
two versions of the training set—a small but focused “Strict” version and a large but noisy “Relaxed” version.
We report results on both settings which share the same validation and test sets.
Statistics of all the datasets used in our experiments are summarized in the Appendix (Table 5).
Performance Comparison
Tables 1 and 3 show a comparison of the performance of GA Reader with previously published
results on WDW and CNN, Daily Mail, CBT
datasets respectively. The numbers reported for
GA Reader are for single best models, though
we compare to both ensembles and single models
from prior work. GA Reader-- refers to an earlier
version of the model, unpublished but described
in a preprint, with the following differences—(1)
it does not utilize token-speciﬁc attentions within
the GA module, as described in equation (5), (2)
it does not use a character composition model, (3)
it is initialized with word embeddings pretrained
on the corpus itself rather than GloVe. A detailed
analysis of these differences is studied in the next
section. Here we present 4 variants of the latest
GA Reader, using combinations of whether the
qe-comm feature is used (+feature) or not, and
whether the word lookup table L(w) is updated
during training or ﬁxed to its initial value. Other
hyperparameters are listed in Appendix A.
Interestingly, we observe that feature engineering leads to signiﬁcant improvements for WDW
and CBT datasets, but not for CNN and Daily Mail
datasets. We note that anonymization of the latter
datasets means that there is already some feature
engineering (it adds hints about whether a token
is an entity), and these are much larger than the
other four. In machine learning it is common to see
the effect of feature engineering diminish with increasing data size. Similarly, ﬁxing the word embeddings provides an improvement for the WDW
4 
Table 1: Validation/Test accuracy (%) on WDW dataset for both “Strict”
and “Relaxed” settings. Results with “†” are cf previously published works.
Attentive Reader †
AS Reader †
Stanford AR †
GA (update L(w))
GA (ﬁx L(w))
GA (+feature, update L(w))
GA (+feature, ﬁx L(w))
Table 2: Top: Performance of different gating
functions. Bottom: Effect of varying the number of hops K. Results on WDW without using
the qe-comm feature and with ﬁxed L(w).
Gating Function
Concatenate
and CBT, but not for CNN and Daily Mail. This
is not surprising given that the latter datasets are
larger and less prone to overﬁtting.
Comparing with prior work, on the WDW
dataset the basic version of the GA Reader outperforms all previously published models when
trained on the Strict setting. By adding the qecomm feature the performance increases by 3.2%
and 3.5% on the Strict and Relaxed settings respectively to set a new state of the art on this
dataset. On the CNN and Daily Mail datasets the
GA Reader leads to an improvement of 3.2% and
4.3% respectively over the best previous single
models. They also outperform previous ensemble models, setting a new state of that art for both
datasets. For CBT-NE, GA Reader with the qecomm feature outperforms all previous single and
ensemble models except the AS Reader trained on
the much larger BookTest Corpus . Lastly, on CBT-CN the GA Reader with
the qe-comm feature outperforms all previously
published single models except the NSE, and AS
Reader trained on a larger corpus. For each of the
4 datasets on which GA achieves the top performance, we conducted one-sample proportion tests
to test whether GA is signiﬁcantly better than the
second-best baseline. The p-values are 0.319 for
CNN, <0.00001 for DailyMail, 0.028 for CBT-
NE, and <0.00001 for WDW. In other words,
GA statistically signiﬁcantly outperforms all other
baselines on 3 out of those 4 datasets at the 5%
signiﬁcance level. The results could be even more
signiﬁcant under paired tests, however we did not
have access to the predictions from the baselines.
GA Reader Analysis
In this section we do an ablation study to see the
effect of Gated Attention. We compare the GA
Reader as described here to a model which is exactly the same in all aspects, except that it passes
document embeddings D(k) in each layer directly
to the inputs of the next layer without using the
GA module. In other words X(k) = D(k) for all
k > 0. This model ends up using only one query
GRU at the output layer for selecting the answer
from the document. We compare these two variants both with and without the qe-comm feature
on CNN and WDW datasets for three subsets of
the training data - 50%, 75% and 100%. Test set
accuracies for these settings are shown in Figure 2.
On CNN when tested without feature engineering,
we observe that GA provides a signiﬁcant boost
in performance compared to without GA. When
tested with the feature it still gives an improvement, but the improvement is signiﬁcant only with
100% training data. On WDW-Strict, which is a
third of the size of CNN, without the feature we
see an improvement when using GA versus without using GA, which becomes signiﬁcant as the
training set size increases. When tested with the
feature on WDW, for a small data size without GA
does better than with GA, but as the dataset size
increases they become equivalent. We conclude
that GA provides a boost in the absence of feature
engineering, or as the training set size increases.
Next we look at the question of how to gate intermediate document reader states from the query,
i.e. what operation to use in equation 6. Table
Table 3: Validation/Test accuracy (%) on CNN, Daily Mail and CBT. Results marked with “†” are cf previously published
works. Results marked with “‡” were obtained by training on a larger training set. Best performance on standard training sets
is in bold, and on larger training sets in italics.
Daily Mail
Humans (query) †
Humans (context + query) †
LSTMs (context + query) †
Deep LSTM Reader †
Attentive Reader †
Impatient Reader †
AS Reader †
DER Network †
Stanford AR (relabeling) †
Iterative Attentive Reader †
EpiReader †
AoA Reader †
ReasoNet †
MemNets (ensemble) †
AS Reader (ensemble) †
Stanford AR (relabeling,ensemble) †
Iterative Attentive Reader (ensemble) †
EpiReader (ensemble) †
AS Reader (+BookTest) † ‡
AS Reader (+BookTest,ensemble) † ‡
GA (update L(w))
GA (ﬁx L(w))
GA (+feature, update L(w))
GA (+feature, ﬁx L(w))
2 (top) shows the performance on WDW dataset
for three common choices – sum (x = d + q),
concatenate (x = d∥q) and multiply (x =
d⊙q). Empirically we ﬁnd element-wise multiplication does signiﬁcantly better than the other two,
which justiﬁes our motivation to “ﬁlter” out document features which are irrelevant to the query.
At the bottom of Table 2 we show the effect of
varying the number of hops K of the GA Reader
on the ﬁnal performance. We note that for K = 1,
our model is equivalent to the AS Reader without any GA modules. We see a steep and steady
rise in accuracy as the number of hops is increased
from K = 1 to 3, which remains constant beyond
that. This is a common trend in machine learning as model complexity is increased, however we
note that a multi-hop architecture is important to
achieve a high performance for this task, and provide further evidence for this in the next section.
Ablation Study for Model Components
Table 4 shows accuracy on WDW by removing
one component at a time.
The steepest reduction is observed when we replace pretrained GloVe
vectors with those pretrained on the corpus itself.
GloVe vectors were trained on a large corpus of
about 6 billion tokens ,
and provide an important source of prior knowl-
Figure 2: Performance in accuracy with and without the Gated-Attention module over different training
sizes. p-values for an exact one-sided Mcnemar’s test are given inside the parentheses for each setting.
CNN (w/o qe-comm feature)
With Gating
CNN (w qe-comm feature)
With Gating
WDW (w/o qe-comm feature)
With Gating
WDW (w qe-comm feature)
With Gating
Table 4: Ablation study on WDW dataset, without using
the qe-comm feature and with ﬁxed L(w). Results marked
with † are cf Onishi et al. .
−token-attentions (eq. 5)
−glove, +corpus
edge for the model. Note that the strongest baseline on WDW, NSE ,
also uses pretrained GloVe vectors, hence the
comparison is fair in that respect. Next, we observe a substantial drop when removing tokenspeciﬁc attentions over the query in the GA module, which allow gating individual tokens in the
document only by parts of the query relevant to
that token rather than the overall query representation. Finally, removing the character embeddings,
which were only used for WDW and CBT, leads
to a reduction of about 1% in the performance.
Attention Visualization
To gain an insight into the reading process employed by the model we analyzed the attention distributions at intermediate layers of the reader. Figure 3 shows an example from the validation set of
WDW dataset (several more are in the Appendix).
In each ﬁgure, the left and middle plots visualize
attention over the query (equation 5) for candidates in the document after layers 1 & 2 respectively. The right plot shows attention over candidates in the document of cloze placeholder (XXX)
in the query at the ﬁnal layer. The full document,
query and correct answer are shown at the bottom.
A generic pattern observed in these examples
is that in intermediate layers, candidates in the
document (shown along rows) tend to pick out
salient tokens in the query which provide clues
about the cloze, and in the ﬁnal layer the candidate with the highest match with these tokens is
selected as the answer. In Figure 3 there is a high
attention of the correct answer on financial
regulatory standards in the ﬁrst layer, and
on us president in the second layer. The incorrect answer, in contrast, only attends to one of
these aspects, and hence receives a lower score in
the ﬁnal layer despite the n-gram overlap it has
with the cloze token in the query. Importantly, different layers tend to focus on different tokens in
the query, supporting the hypothesis that the multihop architecture of GA Reader is able to combine
distinct pieces of information to answer the query.
Conclusion
We presented the Gated-Attention reader for answering cloze-style questions over documents.
The GA reader features a novel multiplicative gating mechanism, combined with a multi-hop architecture. Our model achieves the state-of-theart performance on several large-scale benchmark
datasets with more than 4% improvements over
competitive baselines. Our model design is backed
up by an ablation study showing statistically signiﬁcant improvements of using Gated Attention
as information ﬁlters.
We also showed empirically that multiplicative gating is superior to addi-
Figure 3: Layer-wise attention visualization of GA Reader trained on WDW-Strict. See text for details.
tion and concatenation operations for implementing gated-attentions, though a theoretical justiﬁcation remains part of future research goals. Analysis of document and query attentions in intermediate layers of the reader further reveals that the
model iteratively attends to different aspects of the
query to arrive at the ﬁnal answer. In this paper
we have focused on text comprehension, but we
believe that the Gated-Attention mechanism may
beneﬁt other tasks as well where multiple sources
of information interact.
Acknowledgments
This work was funded by NSF under CCF1414030
and Google Research.