SVDNet for Pedestrian Retrieval
Yifan Sun†, Liang Zheng‡, Weijian Deng§, Shengjin Wang†∗
†Tsinghua University
‡University of Technology Sydney
§University of Chinese Academy of Sciences
 , {liangzheng06, dengwj16}@gmail.com, 
This paper proposes the SVDNet for retrieval problems,
with focus on the application of person re-identiﬁcation (re-
ID). We view each weight vector within a fully connected
(FC) layer in a convolutional neuron network (CNN) as a
projection basis. It is observed that the weight vectors are
usually highly correlated. This problem leads to correlations among entries of the FC descriptor, and compromises
the retrieval performance based on the Euclidean distance.
To address the problem, this paper proposes to optimize the
deep representation learning process with Singular Vector
Decomposition (SVD). Speciﬁcally, with the restraint and
relaxation iteration (RRI) training scheme, we are able to
iteratively integrate the orthogonality constraint in CNN
training, yielding the so-called SVDNet. We conduct experiments on the Market-1501, CUHK03, and DukeMTMCreID datasets, and show that RRI effectively reduces the
correlation among the projection vectors, produces more
discriminative FC descriptors, and signiﬁcantly improves
the re-ID accuracy. On the Market-1501 dataset, for instance, rank-1 accuracy is improved from 55.3% to 80.5%
for CaffeNet, and from 73.8% to 82.3% for ResNet-50.
1. Introduction
This paper considers the problem of pedestrian retrieval,
also called person re-identiﬁcation (re-ID). This task aims at
retrieving images containing the same person to the query.
Person re-ID is different from image classiﬁcation in
that the training and testing sets contain entirely different classes. So a popular deep learning method for re-ID
consists of 1) training a classiﬁcation deep model on the
training set, 2) extracting image descriptors using the fullyconnected (FC) layer for the query and gallery images, and
3) computing similarities based on Euclidean distance before returning the sorted list .
Our work is motivated by the observation that after train-
∗Corresponding Author
Figure 1: A cartoon illustration of the correlation among
weight vectors and its negative effect. The weight vectors
are contained in the last fully connected layer, e.g., FC8
layer of CaffeNet or FC layer of ResNet-50 . There
are three training IDs in red, pink and blue clothes from the
DukeMTMC-reID dataset . The dotted green and black
vectors denote feature vectors of two testing samples before
the last FC layer. Under the baseline setting, the red and
the pink weight vectors are highly correlated and introduce
redundancy to the descriptors.
ing a convolutional neural network (CNN) for classiﬁcation,
the weight vectors within a fully-connected layer (FC) are
usually highly correlated. This problem can be attributed
to two major reasons.
The ﬁrst reason is related to the
non-uniform distribution of training samples. This problem
is especially obvious when focusing on the last FC layer.
The output of each neuron in the last FC layer represents
the similarity between the input image and a corresponding
identity. After training, neurons corresponding to similar
persons (i.e., the persons who wear red and pink clothes)
learns highly correlated weight vectors, as shown in Fig. 1.
The second is that during the training of CNN, there exists
few, if any, constraints for learning orthogonalization. Thus
the learned weight vectors may be naturally correlated.
Correlation among weight vectors of the FC layer comarXiv:1703.05693v4 [cs.CV] 6 Aug 2017
promises the descriptor signiﬁcantly when we consider the
retrieval task under the Euclidean distance. In fact, a critical
assumption of using Euclidean distance (or equivalently the
cosine distance after ℓ2-normalization) for retrieval is that
the entries in the feature vector should be possibly independent. However, when the weight vectors are correlated, the
FC descriptor – the projection on these weight vectors of
the output of a previous CNN layer – will have correlated
entries. This might ﬁnally lead to some entries of the descriptor dominating the Euclidean distance, and cause poor
ranking results. For example, during testing, the images
of two different persons are passed through the network to
generate the green and black dotted feature vectors and then
projected onto the red, pink and blue weight vectors to form
the descriptors, as shown in Fig. 1. The projection values
on both red and pink vectors are close, making the two descriptors appear similar despite of the difference projected
on the blue vector. As a consequence, it is of vital importance to reduce the redundancy in the FC descriptor to make
it work under the Euclidean distance.
To address the correlation problem, we proposes SVD-
Net, which is featured by an FC layer containing decorrelated weight vectors. We also introduce a novel three-step
training scheme. In the ﬁrst step, the weight matrix undergoes the singular vector decomposition (SVD) and is
replaced by the product of the left unitary matrix and the
singular value matrix. Second, we keep the orthogonalized
weight matrix ﬁxed and only ﬁne-tune the remaining layers. Third, the weight matrix is unﬁxed and the network is
trained for overall optimization. The three steps are iterated
to approximate orthogonality on the weight matrix. Experimental results on three large-scale re-ID datasets demonstrate signiﬁcant improvement over the baseline network,
and our results are on par with the state of the art.
2. Related Work
Deep learning for person re-ID. In person re-ID task,
deep learning methods can be classiﬁed into two classes:
similarity learning and representation learning. The former
is also called deep metric learning, in which image pairs or
triplets are used as input to the network .
In the two early works, Yi et al. and Li et al. use
image pairs and inject part priors into the learning process.
In later works, Varior et al. incorporate long short-term
memory (LSTM) modules into a siamese network. LSTMs
process image parts sequentially so that the spatial connections can be memorized to enhance the discriminative ability of the deep features. Varior et al. insert a gating
function after each convolutional layer to capture effective
subtle patterns between image pairs. The above-mentioned
methods are effective in learning image similarities in an
adaptive manner, but may have efﬁciency problems under
large-scale galleries.
The second type of CNN-based re-ID methods focuses
on feature learning, which categorizes the training samples
into pre-deﬁned classes and the FC descriptor is used for
retrieval . In , the classiﬁcation CNN
model is ﬁne-tuned using either the video frames or image bounding boxes to learn a discriminative embedding
for pedestrian retrieval. Xiao et al. propose learning
generic feature representations from multiple re-ID datasets
To deal with spatial misalignment, Zheng et al.
 propose the PoseBox structure similar to the pictorial structure to learn pose invariant embeddings. To
take advantage of both the feature learning and similarity
learning, Zheng et al. and Geng et al. combine
the contrastive loss and the identiﬁcation loss to improve
the discriminative ability of the learned feature embedding,
following the success in face veriﬁcation . This paper
adopts the classiﬁcation mode, which is shown to produce
competitive accuracy without losing efﬁciency potentials.
PCANet and truncated SVD for CNN. We clarify
the difference between SVDNet and several “look-alike”
works. The PCANet is proposed for image classiﬁcation. It is featured by cascaded principal component analysis (PCA) ﬁlters. PCANet is related to SVDNet in that it
also learns orthogonal projection directions to produce the
ﬁlters. The proposed SVDNet differs from PCANet in two
major aspects. First, SVDNet performs SVD on the weight
matrix of CNN, while PCANet performs PCA on the raw
data and feature. Second, the ﬁlters in PCANet are learned
in an unsupervised manner, which does not rely on back
propagation as in the case of SVDNet. In fact, SVDNet
manages a stronger connection between CNN and SVD.
SVDNet’s parameters are learned through back propagation
and decorrelated iteratively using SVD.
Truncated SVD is widely used for CNN model
compression. SVDNet departs from it in two aspects. First,
truncated SVD decomposes the weight matrix in FC layers
and reconstructs it with several dominant singular vectors
and values. SVDNet does not reconstruct the weight matrix
but replaces it with an orthogonal matrix, which is the product of the left unitary matrix and the singular value matrix.
Second, Truncated SVD reduces the model size and testing
time at the cost of acceptable precision loss, while SVDNet
signiﬁcantly improves the retrieval accuracy without impact
on the model size.
Orthogonality in the weight matrix. We note a concurrent work which also aims to orthogonalize the
CNN ﬁlters, yet our work is different from . In ,
the regularization effect of orthogonalization beneﬁts the
back-propagation of very deep networks, thus improving
the classiﬁcation accuracy. The regularization proposed in
 may not directly beneﬁt the embedding learning process. But in this paper, orthogonalization is used to generate
decorrelated descriptors suitable for retrieval. Our network
Figure 2: The architecture of SVDNet. It contains an Eigenlayer before the last FC layer of the backbone model. The
weight vectors of the Eigenlayer are expected to be orthogonal. In testing, either the Eigenlayer input feature or the
Eigenlayer output feature is employed for retrieval.
may not be suitable for improving classiﬁcation.
3. Proposed Method
This section describes the structure of SVDNet, its training strategy, and its working mechanism.
3.1. Architecture
SVDNet mostly follows the backbone networks, e.g.,
CaffeNet and ResNet-50. The only difference is that SVD-
Net uses the Eigenlayer as the second last FC layer, as
shown in Fig.
2, the Eigenlayer contains an orthogonal
weight matrix and is a linear layer without bias. The reason
for not using bias is that the bias will disrupt the learned
orthogonality. In fact, our preliminary experiments indicate
that adding the ReLU activation and the bias term slightly
compromises the re-ID performance, so we choose to implement the Eigenlayer based on a linear layer. The reason for positioning Eigenlayer at the second last FC layer,
rather than the last one is that the model fails to converge
when orthogonality is enforced on the last FC layer, which
might be due to that the correlation of weight vectors in the
last FC layer is determined by the training sample distribution, as explained in the introduction. During training, the
input feature from a previous layer is passed through the
Eigenlayer. Its inner products with the weight vectors of
the Eigenlayer form the output feature, which is fully connected to the last layer of c-dim, where c denotes the number
of training classes.
During testing, we extract the learned embeddings for
the query and gallery images. In this step, we can use either the input or the output of Eigenlayer for feature representation, as shown in Fig. 2. Our experiment shows that
using the two features can achieve similar performance, indicating that the orthogonality of Eigenlayer improves the
performance of not only output but also input. The reason
is a bit implicit, and we believe it originates from the backpropagation training of CNN, during which the orthogonal
characteristic of weight matrix within the Eigenlayer will
Algorithm 1: Training SVDNet
Input: a pre-trained CNN model, re-ID training data.
0. Add the Eigenlayer and ﬁne-tune the network.
for t ←1 to T do
1. Decorrelation: Decompose W with SVD
decomposition, and then update it: W ←US
2. Restraint: Fine-tune the network with the
Eigenlayer ﬁxed
3. Relaxation: Fine-tune the network with the
Eigenlayer unﬁxed
Output: a ﬁne-tuned CNN model, i.e., SVDNet.
directly impact the characteristic of its input feature.
3.2. Training SVDNet
The algorithm of training SVDNet is presented in Alg.
1. We ﬁrst brieﬂy introduce Step 0 and then describe the
restraint and relaxation Iteration (RRI) (Step 1, 2, 3).
Step 0. We ﬁrst add a linear layer to the network. Then
the network is ﬁne-tuned till convergence. Note that after
Step 0, the weight vectors in the linear layer are still highly
correlated. In the experiment, we will present the re-ID performance of the CNN model after Step 0. Various output
dimensions of the linear layer will be evaluated.
Restraint and Relaxation Iteration (RRI). It is the key
procedure in training SVDNet. Three steps are involved.
• Decorrelation. We perform SVD on the weight matrix
as follows:
W = USV T,
where W is the weight matrix of the linear layer, U is
the left-unitary matrix, S is the singular value matrix,
and V is the right-unitary matrix. After the decomposition, we replace W with US. Then the linear layer
uses all the eigenvectors of WW T as weight vectors
and is named as Eigenlayer.
• Restraint. The backbone model is ﬁne-tuned till convergence, but the Eigenlayer is ﬁxed.
• Relaxation. The ﬁne-tuning goes on for some more
epochs with Eigenlayer unﬁxed.
After Step 1 and Step 2, the weight vectors are orthogonal, i.e., in an eigen state. But after Step 3, i.e., relaxation
training, W shifts away from the eigen state. So the training procedure enters another iteration t (t = 1, . . . , T) of
“restraint and relaxation”.
Albeit simple, the mechanism behind the method is interesting. We will try to provide insight into the mechanism
in Section 3.3. During all the analysis involved, CaffeNet
pre-trained on ImageNet is chosen as the backbone.
3.3. Mechanism Study
Why is SVD employed? Our key idea is to ﬁnd a set of
orthogonal projection directions based on what CNN has already learned from training set. Basically, for a linear layer,
a set of basis in the range space of W (i.e., linear subspace
spanned by column vectors of W) is a potential solution. In
fact, there exists numerous sets of orthogonal basis. So we
decide to use the singular vectors of W as new projection directions and to weight the projection results with the corresponding singular values. That is, we replace W = USV T
with US. By doing this, the discriminative ability of feature
representation over the whole sample space will be maintained. We make a mathematical proof as follows:
Given two images xi and xj, we denote ⃗hi and ⃗hj as the
corresponding features before the Eigenlayer, respectively.
⃗fi and ⃗fj are their output features from the Eigenlayer. The
Euclidean distance Dij between the features of xi and xj is
calculated by:
hj)TWW T(#»
hj)TUSV TV STU T(#»
where U, S and V are deﬁned in Eq. 1. Since V is a unit
orthogonal matrix, Eq. 2 is equal to:
hj)TUSSTU T(#»
Eq. 3 suggests that when changing W = USV T to US,
Dij remains unchanged. Therefore, in Step 1 of Alg. 1,
the discriminative ability (re-ID accuracy) of the ﬁnetuned CNN model is 100% preserved.
There are some other decorrelation methods in addition
to SVD. But these methods do not preserve the discriminative ability of the CNN model. To illustrate this point, we
compare SVD with several competitors below.
1. Use the originally learned W (denoted by Orig).
2. Replace W with US (denoted by US).
3. Replace W with U (denoted by U).
4. Replace W with UV T (denoted by UV T).
5. Replace W = QR (Q-R decomposition) with QD,
where D is the diagonal matrix extracted from the upper triangle matrix R (denoted by QD).
Comparisons on Market-1501 are provided in Table
1. We replace the FC layer with a 1,024-dim linear layer
and ﬁne-tune the model till convergence (Step 0 in Alg. 1).
We then replace the ﬁne-tuned W with methods 2 - 5. All
the four decorrelation methods 2 - 5 update W to be an orthogonal matrix, but Table 1 indicates that only replacing
Table 1: Comparison of decorrelation methods in Step 1 of
Alg. 1. Market-1501 and CaffeNet are used. We replace
FC7 with a 1,024-dim linear layer. Rank-1 (%) and mAP
(%) are shown.
W with US retains the re-ID accuracy, while the others degrade the performance.
When does performance improvement happen? As
proven above, Step 1 in Alg. 1, i.e., replacing W = USV T
with US, does not bring an immediate accuracy improvement, but keeps it unchanged. Nevertheless, after this operation, the model has been pulled away from the original
ﬁne-tuned solution, and the classiﬁcation loss on the training set will increase by a certain extent. Therefore, Step 2
and Step 3 in Alg. 1 aim to ﬁx this problem. The major
effect of these two steps is to improve the discriminative
ability of the input feature as well as the output feature of
the Eigenlayer (Fig. 2). On the one hand, the restraint step
learns the upstream and downstream layers of the Eigenlayer, which still preserves the orthogonal property.
show in Fig. 5 that this step improves the accuracy. On
the other hand, the relaxation step will make the model deviate from orthogonality again, but it reaches closer to convergence. This step, as shown in Fig. 5, deteriorates the
performance. But within an RRI, the overall performance
improves. Interestingly, when educating children, an alternating rhythm of relaxation and restraint is also encouraged.
Correlation diagnosing. Till now, we have not provided
a metric how to evaluate vector correlations. In fact, the correlation between two vectors can be estimated by the correlation coefﬁcient. However, to the best of our knowledge, it
lacks an evaluation protocol for diagnosing the overall correlation of a vector set. In this paper, we propose to evaluate
the overall correlation as below. Given a weight matrix W,
we deﬁne the gram matrix of W as,
G = W TW =
where k is the number of weight vectors in W (k = 4,096 in
FC7 of CaffeNet), gij (i, j = 1, ..., k) are the entries in W,
and wi (i = 1, ..., k) are the weight vectors in W. Given W,
we deﬁne S(·) as a metric to denote the extent of correlation
between all the column vectors of W:
From Eq. 5, we can see that the value of S(W) falls within
k, 1]. S(W) achieves the largest value 1 only when W is
an orthogonal matrix, i.e., gij = 0, if i ̸= j. S(W) has
the smallest value 1
k when all the weight vectors are totally
the same, i.e., gij = 1, ∀i, j. So when S(W) is close to
1/k or is very small, the weight matrix has a high correlation extent. For example, in our baseline, when directly
ﬁne-tuning a CNN model (without SVDNet training) using
CaffeNet, S(WFC7) = 0.0072, indicating that the weight
vectors in the FC7 layer are highly correlated. As we will
show in Section 4.5, S is an effective indicator to the convergence of SVDNet training.
Convergence Criteria for RRI. When to stop RRI is a
non-trivial problem, especially in application. We employ
Eq. 5 to evaluate the orthogonality of W after the relaxation
step and ﬁnd that S(W) increases as the iteration goes on.
It indicates that the correlation among the weight vectors
in W is reduced step-by-step with RRI. So when S(W) becomes stable, the model converges, and RRI stops. Detailed
observations can be accessed in Fig. 5.
4. Experiment
4.1. Datasets and Settings
Datasets. This paper uses three datasets for evaluation,
i.e., Market-1501 , CUHK03 and DukeMTMCreID .
The Market-1501 dataset contains 1,501
identities, 19,732 gallery images and 12,936 training images captured by 6 cameras. All the bounding boxes are
generated by the DPM detector .
Most experiments
relevant to mechanism study are carried out on Market-
The CUHK03 dataset contains 13,164 images of
1,467 identities.
Each identity is observed by 2 cameras. CUHK03 offers both hand-labeled and DPM-detected
bounding boxes, and we use the latter in this paper. For
CUHK03, 20 random train/test splits are performed, and
the averaged results are reported. The DukeMTMC-reID
dataset is collected with 8 cameras and used for crosscamera tracking. We adopt its re-ID version benchmarked
in . It contains 1,404 identities (one half for training,
and the other for testing), 16,522 training images, 2,228
queries, and 17,661 gallery images. For Market-1501 and
DukeMTMC-reID, we use the evaluation packages provided by and , respectively.
For performance evaluation on all the 3 datasets, we use
both the Cumulative Matching Characteristics (CMC) curve
and the mean Average Precision (mAP).
Backbones. We mainly use two networks pre-trained on
ImageNet as backbones, i.e., CaffeNet and ResNet-
50 . When using CaffeNet as the backbone, we directly
replace the original FC7 layer with the Eigenlayer, in case
that one might argue that the performance gain is brought
by deeper architecture. When using ResNet-50 as the backbone, we have to insert the Eigenlayer before the last FC
layer because ResNet has no hidden FC layer and the inﬂuence of adding a layer into a 50-layer architecture can be
neglected. In several experiments on Market-1501, we additionally use VGGNet and a Tiny CaffeNet as backbones to demonstrate the effectiveness of SVDNet on different architectures. The Tiny CaffeNet is generated by reducing the FC6 and FC7 layers of CaffeNet to containing
1024 and 512 dimensions, respectively.
4.2. Implementation Details
Baseline. Following the practice in , baselines using CaffeNet and ResNet-50 are ﬁne-tuned with the default
parameter settings except that the output dimension of the
last FC layer is set to the number of training identities. The
CaffeNet Baseline is trained for 60 epochs with a learning
rate of 0.001 and then for another 20 epochs with a learning rate of 0.0001. The ResNet Baseline is trained for 60
epochs with learning rate initialized at 0.001 and reduced
by 10 on 25 and 50 epochs. During testing, the FC6 or FC7
descriptor of CaffeNet and the Pool5 or FC descriptor of
ResNet-50 are used for feature representation.
On Market-1501, CaffeNet and Resnet-50 achieves rank-
1 accuracy of 55.3% (73.8%) with the FC6 (Pool5) descriptor, which is consistent with the results in .
Detailed settings. CaffeNet-backboned SVDNet takes
25 RRIs to reach ﬁnal convergence. For both the restraint
stage and the relaxation stage within each RRI except the
last one, we use 2000 iterations and ﬁx the learning rate
at 0.001. For the last restraint training, we use 5000 iterations (learning rate 0.001) + 3000 iterations (learning rate
0.0001). The batch size is set to 64. ResNet-backboned
SVDNet takes 7 RRIs to reach ﬁnal convergence. For both
the restraint stage and the relaxation stage within each RRI,
we use 8000 iterations and divide the learning rate by 10
after 5000 iterations. The initial learning rate for the 1st to
the 3rd RRI is set to 0.001, and the initial learning rate for
the rest RRIs is set to 0.0001. The batch size is set to 32.
The output dimension of Eigenlayer is set to be 1024 in
all models, yet the inﬂuence of this hyper-parameter is to
be analyzed in Section 4.4. The reason of using different
times of RRIs for different backbones is to be illustrated in
Section 4.5.
Models & Features
Market-1501
DukeMTMC-reID
Baseline(C) FC6
Baseline(C) FC7
SVDNet(C) FC6
SVDNet(C) FC7
Baseline(R) Pool5
Baseline(R) FC
SVDNet(R) Pool5
SVDNet(R) FC
Table 2: Comparison of the proposed method with baselines. C: CaffeNet. R: ResNet-50. In ResNet Baseline, “FC” denotes
the last FC layer, and its output dimension N changes with the number of training identities, i.e., 751 on Market-1501, 1,160
on CUHK03 and 702 on DukeMTMC-reID. For SVDNet based on ResNet, the Eigenlayer is denoted by “FC”, and its output
dimension is set to 1,024.
Figure 3: Sample retrieval results on Market-1501. In each
row, images are arranged in descending order according to
their similarities with the query on the left. The true and
false matches are in the blue and red boxes, respectively.
4.3. Performance Evaluation
The effectiveness of SVDNet.
We comprehensively
evaluate the proposed SVDNet on all the three re-ID benchmarks. The overall results are shown in Table 2.
The improvements achieved on both backbones are signiﬁcant: When using CaffeNet as the backbone, the Rank-
1 accuracy on Market-1501 rises from 55.3% to 80.5%,
and the mAP rises from 30.4% to 55.9%. On CUHK03
(DukeMTMC-reID) dataset, the Rank-1 accuracy rises by
+26.3% (+20.7%), and the mAP rises by +24.7% (+17.5%).
When using ResNet as the backbone, the Rank-1 accuracy rises by +8.4%, +15.6% and +11.2% respectively
on Market-1501, CUHK03 and DukeMTMC-reID dataset.
The mAP rises by +14.2%, +13.7% and +12.7% correspondingly. Some retrieval examples on Market-1501 are
shown in Fig. 3.
Comparison with state of the art. We compare SVD-
Net with the state-of-the-art methods.
Comparisons on
Market-1501
LOMO+XQDA 
Null Space 
LSTM Siamese 
Gated SCNN 
ReRank (C) 
ReRank (R) 
PIE (A)* 
PIE (R)* 
SOMAnet (VGG)* 
DLCE (C)* 
DLCE (R)* 
Transfer (G)* 
SVDNet(R,1024-dim)
Table 3: Comparison with state of the art on Market-1501
(single query) and CUHK03. * denotes unpublished papers.
Base networks are annotated. C: CaffeNet, R: ResNet-50,
A: AlexNet, G: GoogleNet . The best, second and third
highest results are in blue, red and green, respectively.
Market-1501 and CUHK03 are shown in Table 3. Comparing with already published papers, SVDNet achieves competitive performance. We report rank-1 = 82.3%, mAP
= 62.1% on Market-1501, and rank-1 = 81.8%, mAP =
84.8% on CUHK03. The re-ranking method is higher
than ours in mAP on Market-1501, because re-ranking exploits the relationship among the gallery images and results
in a high recall. We speculate that this re-ranking method
will also bring improvement for SVDNet. Comparing with
(a) CaffeNet-backboned SVDNet
(b) ResNet-backboned SVDNet
Figure 4: Dimension comparison on (a) CaffeNet-backboned and (b) ResNet-backboned. The marker preﬁxed by “step0”
denotes that the corresponding model is trained without any RRI. The marker preﬁxed by “eigen” denotes that the corresponding model is trained with sufﬁcient RRIs to ﬁnal convergence. For (a), the output dimension of Eigenlayer is set to 16,
32, 64, 128, 256, 512, 1024, 2048 and 4096. For (b), the output dimension of Eigenlayer is set to 32, 64, 128, 256, 512, 1024
DukeMTMC-reID
BoW+kissme 
LOMO+XQDA 
Baseline (R)
GAN (R) 
PAN (R) 
SVDNet (C)
SVDNet (R)
Comparison with the state of the art on
DukeMTMC-reID and CUHK03-NP. Rank-1 accuracy (%)
and mAP (%) are shown. For fair comparison, all the results
are maintained without post-processing methods.
the unpublished Arxiv papers, (some of) our numbers are
slightly lower than and . Both works and 
combine the veriﬁcation and classiﬁcation losses, and we
will investigate into integrating this strategy into SVDNet.
Moreover, the performance of SVDNet based on relatively simple CNN architecture is impressive. On Market-
1501, CaffeNet-backboned SVDNet achieves 80.5% rank-1
accuracy and 55.9% mAP, exceeding other CaffeNet-based
methods by a large margin. Additionally, using VGGNet
and Tiny CaffeNet as backbone achieves 79.7% and 77.4%
rank-1 accuracy respectively.
On CUHK03, CaffeNetbackboned SVDNet even exceeds some ResNet-based competing methods except DLCE(R). This observation suggests
that our method can achieve acceptable performance with
high computing effectiveness.
In Table 4, comparisons on DukeMTMC-reID and
CUHK03 under a new training/testing protocol (denoted as
CUHK03-NP) raised by are summarized. Relatively
fewer results are reported because both DukeMTMC-reID
and CUHK03-NP have only been recently benchmarked.
On DukeMTMC-reID, this paper reports rank-1 = 76.7%,
mAP = 56.8%, which is higher than the several competing methods including a recent GAN approach . On
CUHK03-NP, this paper reports rank-1 = 41.5%, mAP =
37.3%, which is also the highest among all the methods.
4.4. Impact of Output Dimension
We vary the dimension of the output of Eigenlayer. Results of CaffeNet and ResNet-50 are drawn in Fig. 4.
When trained without RRI, the model has no intrinsic
difference with a baseline model. It can be observed that
the output dimension of the penultimate layer signiﬁcantly
inﬂuences the performance. As the output dimension increases, the re-ID performance ﬁrst increases, reaches a
peak and then drops quickly. In this scenario, we ﬁnd that
lowering the dimension is usually beneﬁcial, probably due
to the reduced redundancy in ﬁlters of FC layer.
The inﬂuence of the output dimension on the ﬁnal performance of SVDNet presents another trend. As the output
dimension increases, the performance gradually increases
until reaching a stable level, which suggests that our method
is immune to harmful redundancy.
4.5. RRI Boosting Procedure
This experiment reveals how the re-ID performance
changes after each restraint step and each relaxation step,
and how SVDNet reaches the stable performance step by
step. In our experiment, we use 25 epochs for both the re-
Figure 5: Rank-1 accuracy and S(W) (Eq. 5) of each intermediate model during RRI. Numbers on the horizontal axis denote
the end of each RRI. SVDNet based on CaffeNet and ResNet-50 take about 25 and 7 RRIs to converge, respectively. Results
before the 11th RRI is marked. S(W) of models trained without RRI is also plotted for comparison.
Table 5: Comparison of the decorrelation methods speci-
ﬁed in Section 3.3. Rank-1 accuracy (%) on Market-1501
is shown. Dimension of output feature of Eigenlayer is set
to 1024. We run sufﬁcient RRIs for each method.
straint phase and the relaxation phase in one RRI. The output dimension of Eigenlayer is set to 2,048. Exhaustively,
we test re-ID performance and S(W) values of all the intermediate CNN models. We also increase the training epochs
of baseline models to be equivalent of training SVDNet, to
compare S(W) of models trained with and without RRI.
Results are shown in Fig. 5, from which four conclusions
can be drawn.
First, within each RRI, rank-1 accuracy takes on a pattern of “increase and decrease” echoing the restraint and relaxation steps: When W is ﬁxed to maintain orthogonality
during restraint training, the performance increases, implying a boosting in the discriminative ability of the learned
feature. Then during relaxation training, W is unﬁxed, and
the performance stagnates or even decreases slightly. Second, as the RRI goes, the overall accuracy increases, and
reaches a stable level when the model converges. Third, it is
reliable to use S(W) – the degree of orthogonality – as the
convergence criteria for RRI. During RRI training, S(W)
gradually increases until reaching stability, while without
RRI training, S(W) ﬂuctuates slightly around a relatively
low value, indicating high correlation among weight vectors. Fourth, ResNet-backboned SVDNet needs much fewer
RRIs to converge than CaffeNet-backboned SVDNet.
4.6. Comparison of Decorrelation Methods
In Section 3.3, several decorrelation methods are introduced. We show that only the proposed method of replacing
W with US maintains the discriminative ability of the output feature of Eigenlayer, while all the other three methods
lead to performance degradation to some extent. Here, we
report their ﬁnal performance when RRI training is used.
Results on Market-1501 are shown in Table 5. It can be
observed that the proposed decorrelating method, i.e., replacing W with US, achieves the highest performance, followed by the “U”, “QD” and “UV T” methods. In fact, the
“UV T” method does not bring about observable improvement compared with “Orig”.
This experiment demonstrates that not only the orthogonality itself, but also the
decorrelation approach, are vital for SVDNet.
5. Conclusions
In this paper, SVDNet is proposed for representation
learning in pedestrian retrieval, or re-identiﬁcation. Decorrelation is enforced among the projection vectors in the
weight matrix of the FC layer. Through iterations of “restraint and relaxation”, the extent of vector correlation is
gradually reduced. In this process, the re-ID performance
undergoes iterative “increase and decrease”, and ﬁnally
reaches a stable accuracy. Due to elimination of correlation
of the weight vectors, the learned embedding better suits
the retrieval task under the Euclidean distance. Signiﬁcant
performance improvement is achieved on the Market-1501,
CUHK03, and DukeMTMC-reID datasets, and the re-ID
accuracy is competitive with the state of the art.
In the future study, we will investigate more extensions
of SVDNet to ﬁnd out more about its working mechanism.
We will also apply SVDNet on the generic instance retrieval