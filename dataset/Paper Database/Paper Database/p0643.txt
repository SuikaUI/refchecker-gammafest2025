VoxelNet: End-to-End Learning for Point Cloud Based 3D Object Detection
 
Oncel Tuzel
 
Accurate detection of objects in 3D point clouds is a
central problem in many applications, such as autonomous
navigation, housekeeping robots, and augmented/virtual reality. To interface a highly sparse LiDAR point cloud with a
region proposal network (RPN), most existing efforts have
focused on hand-crafted feature representations, for example, a bird’s eye view projection. In this work, we remove
the need of manual feature engineering for 3D point clouds
and propose VoxelNet, a generic 3D detection network that
uniﬁes feature extraction and bounding box prediction into
a single stage, end-to-end trainable deep network. Speciﬁcally, VoxelNet divides a point cloud into equally spaced 3D
voxels and transforms a group of points within each voxel
into a uniﬁed feature representation through the newly introduced voxel feature encoding (VFE) layer. In this way,
the point cloud is encoded as a descriptive volumetric representation, which is then connected to a RPN to generate
detections. Experiments on the KITTI car detection benchmark show that VoxelNet outperforms the state-of-the-art
LiDAR based 3D detection methods by a large margin. Furthermore, our network learns an effective discriminative
representation of objects with various geometries, leading
to encouraging results in 3D detection of pedestrians and
cyclists, based on only LiDAR.
1. Introduction
Point cloud based 3D object detection is an important
component of a variety of real-world applications, such as
autonomous navigation , housekeeping robots ,
and augmented/virtual reality . Compared to imagebased detection, LiDAR provides reliable depth information that can be used to accurately localize objects and
characterize their shapes .
However, unlike images, LiDAR point clouds are sparse and have highly variable point density, due to factors such as non-uniform
sampling of the 3D space, effective range of the sensors,
occlusion, and the relative pose.
To handle these challenges, many approaches manually crafted feature represen-
Figure 1. VoxelNet directly operates on the raw point cloud (no
need for feature engineering) and produces the 3D detection results using a single end-to-end trainable network.
tations for point clouds that are tuned for 3D object detection. Several methods project point clouds into a perspective view and apply image-based feature extraction techniques . Other approaches rasterize point clouds
into a 3D voxel grid and encode each voxel with handcrafted features . However, these manual design choices introduce an information bottleneck that
prevents these approaches from effectively exploiting 3D
shape information and the required invariances for the detection task. A major breakthrough in recognition and
detection tasks on images was due to moving from
hand-crafted features to machine-learned features.
Recently, Qi et al. proposed PointNet, an end-toend deep neural network that learns point-wise features directly from point clouds. This approach demonstrated impressive results on 3D object recognition, 3D object part
segmentation, and point-wise semantic segmentation tasks.
In , an improved version of PointNet was introduced
which enabled the network to learn local structures at different scales. To achieve satisfactory results, these two approaches trained feature transformer networks on all input
points (∼1k points). Since typical point clouds obtained
using LiDARs contain ∼100k points, training the architec-
 
Figure 2. VoxelNet architecture. The feature learning network takes a raw point cloud as input, partitions the space into voxels, and
transforms points within each voxel to a vector representation characterizing the shape information. The space is represented as a sparse
4D tensor. The convolutional middle layers processes the 4D tensor to aggregate spatial context. Finally, a RPN generates the 3D detection.
tures as in results in high computational and memory requirements. Scaling up 3D feature learning networks
to orders of magnitude more points and to 3D detection
tasks are the main challenges that we address in this paper.
Region proposal network (RPN) is a highly optimized algorithm for efﬁcient object detection . However, this approach requires data to be dense and
organized in a tensor structure (e.g. image, video) which
is not the case for typical LiDAR point clouds. In this paper, we close the gap between point set feature learning and
RPN for 3D detection task.
We present VoxelNet, a generic 3D detection framework
that simultaneously learns a discriminative feature representation from point clouds and predicts accurate 3D bounding
boxes, in an end-to-end fashion, as shown in Figure 2. We
design a novel voxel feature encoding (VFE) layer, which
enables inter-point interaction within a voxel, by combining point-wise features with a locally aggregated feature.
Stacking multiple VFE layers allows learning complex features for characterizing local 3D shape information. Specifically, VoxelNet divides the point cloud into equally spaced
3D voxels, encodes each voxel via stacked VFE layers, and
then 3D convolution further aggregates local voxel features,
transforming the point cloud into a high-dimensional volumetric representation. Finally, a RPN consumes the volumetric representation and yields the detection result. This
efﬁcient algorithm beneﬁts both from the sparse point structure and efﬁcient parallel processing on the voxel grid.
We evaluate VoxelNet on the bird’s eye view detection
and the full 3D detection tasks, provided by the KITTI
benchmark . Experimental results show that VoxelNet
outperforms the state-of-the-art LiDAR based 3D detection
methods by a large margin. We also demonstrate that Voxel-
Net achieves highly encouraging results in detecting pedestrians and cyclists from LiDAR point cloud.
1.1. Related Work
Rapid development of 3D sensor technology has motivated researchers to develop efﬁcient representations to detect and localize objects in point clouds. Some of the earlier
methods for feature representation are . These hand-crafted features yield satisfactory results when rich and detailed 3D shape information is
available. However their inability to adapt to more complex
shapes and scenes, and learn required invariances from data
resulted in limited success for uncontrolled scenarios such
as autonomous navigation.
Given that images provide detailed texture information,
many algorithms infered the 3D bounding boxes from 2D
images . However, the accuracy of
image-based 3D detection approaches are bounded by the
accuracy of the depth estimation.
Several LIDAR based 3D object detection techniques
utilize a voxel grid representation.
 encode each
nonempty voxel with 6 statistical quantities that are derived from all the points contained within the voxel. 
fuses multiple local statistics to represent each voxel. 
computes the truncated signed distance on the voxel grid.
 uses binary encoding for the 3D voxel grid. introduces a multi-view representation for a LiDAR point
cloud by computing a multi-channel feature map in the
bird’s eye view and the cylindral coordinates in the frontal
view. Several other studies project point clouds onto a perspective view and then use image-based feature encoding
schemes .
There are also several multi-modal fusion methods that
combine images and LiDAR to improve detection accuracy . These methods provide improved performance compared to LiDAR-only 3D detection, particularly
for small objects (pedestrians, cyclists) or when the objects
are far, since cameras provide an order of magnitude more
measurements than LiDAR. However the need for an additional camera that is time synchronized and calibrated with
the LiDAR restricts their use and makes the solution more
sensitive to sensor failure modes. In this work we focus on
LiDAR-only detection.
1.2. Contributions
• We propose a novel end-to-end trainable deep architecture for point-cloud-based 3D detection, VoxelNet,
that directly operates on sparse 3D points and avoids
information bottlenecks introduced by manual feature
engineering.
• We present an efﬁcient method to implement VoxelNet
which beneﬁts both from the sparse point structure and
efﬁcient parallel processing on the voxel grid.
• We conduct experiments on KITTI benchmark and
show that VoxelNet produces state-of-the-art results
in LiDAR-based car, pedestrian, and cyclist detection
benchmarks.
2. VoxelNet
In this section we explain the architecture of VoxelNet,
the loss function used for training, and an efﬁcient algorithm to implement the network.
2.1. VoxelNet Architecture
The proposed VoxelNet consists of three functional
blocks: (1) Feature learning network, (2) Convolutional
middle layers, and (3) Region proposal network , as illustrated in Figure 2. We provide a detailed introduction of
VoxelNet in the following sections.
Feature Learning Network
Voxel Partition Given a point cloud, we subdivide the 3D
space into equally spaced voxels as shown in Figure 2. Suppose the point cloud encompasses 3D space with range D,
H, W along the Z, Y, X axes respectively. We deﬁne each
voxel of size vD, vH, and vW accordingly. The resulting
3D voxel grid is of size D′ = D/vD, H′ = H/vH, W ′ =
W/vW . Here, for simplicity, we assume D, H, W are a
multiple of vD, vH, vW .
Grouping We group the points according to the voxel they
reside in. Due to factors such as distance, occlusion, object’s relative pose, and non-uniform sampling, the LiDAR
Fully Connected Neural Net
Point-wise
Point-wise
Element-wise Maxpool
Point-wise Concatenate
Aggregated
Point-wise
concatenated
Figure 3. Voxel feature encoding layer.
point cloud is sparse and has highly variable point density
throughout the space. Therefore, after grouping, a voxel
will contain a variable number of points. An illustration is
shown in Figure 2, where Voxel-1 has signiﬁcantly more
points than Voxel-2 and Voxel-4, while Voxel-3 contains no
Random Sampling
Typically a high-deﬁnition LiDAR
point cloud is composed of ∼100k points. Directly processing all the points not only imposes increased memory/efﬁciency burdens on the computing platform, but also
highly variable point density throughout the space might
bias the detection. To this end, we randomly sample a ﬁxed
number, T, of points from those voxels containing more
than T points. This sampling strategy has two purposes,
(1) computational savings (see Section 2.3 for details); and
(2) decreases the imbalance of points between the voxels
which reduces the sampling bias, and adds more variation
to training.
Stacked Voxel Feature Encoding The key innovation is
the chain of VFE layers. For simplicity, Figure 2 illustrates
the hierarchical feature encoding process for one voxel.
Without loss of generality, we use VFE Layer-1 to describe
the details in the following paragraph. Figure 3 shows the
architecture for VFE Layer-1.
Denote V = {pi = [xi, yi, zi, ri]T ∈R4}i=1...t as a
non-empty voxel containing t ≤T LiDAR points, where
pi contains XYZ coordinates for the i-th point and ri is the
received reﬂectance. We ﬁrst compute the local mean as
the centroid of all the points in V, denoted as (vx, vy, vz).
Then we augment each point pi with the relative offset w.r.t.
the centroid and obtain the input feature set Vin = {ˆpi =
[xi, yi, zi, ri, xi −vx, yi −vy, zi −vz]T ∈R7}i=1...t. Next,
each ˆpi is transformed through the fully connected network
(FCN) into a feature space, where we can aggregate information from the point features fi ∈Rm to encode the
shape of the surface contained within the voxel. The FCN
is composed of a linear layer, a batch normalization (BN)
layer, and a rectiﬁed linear unit (ReLU) layer. After obtaining point-wise feature representations, we use element-wise
MaxPooling across all fi associated to V to get the locally
aggregated feature ˜f ∈Rm for V. Finally, we augment
Conv2D(128, 128, 3, 2, 1) x 1
Conv2D(128, 128, 3, 1, 1) x 3
Conv2D(128, 128, 3, 2, 1) x 1
Conv2D(128, 128, 3, 1, 1) x 5
Conv2D(128, 256, 3, 2, 1) x 1
Conv2D(256, 256, 3, 1, 1) x 5
Deconv2D(128, 256, 3, 1, 0) x 1
Deconv2D(128, 256, 2, 2, 0) x 1
Deconv2D(256, 256, 4, 4, 0) x 1
Probability score map
Regression map
Conv2D(768, 14, 1, 1, 0) x 1
Conv2D(768, 2, 1, 1, 0) x 1
Figure 4. Region proposal network architecture.
each fi with ˜f to form the point-wise concatenated feature
i ,˜f T ]T ∈R2m. Thus we obtain the output
feature set Vout = {f out
}i...t. All non-empty voxels are
encoded in the same way and they share the same set of
parameters in FCN.
We use VFE-i(cin, cout) to represent the i-th VFE layer
that transforms input features of dimension cin into output
features of dimension cout. The linear layer learns a matrix of size cin ×(cout/2), and the point-wise concatenation
yields the output of dimension cout.
Because the output feature combines both point-wise
features and locally aggregated feature, stacking VFE layers encodes point interactions within a voxel and enables
the ﬁnal feature representation to learn descriptive shape
information. The voxel-wise feature is obtained by transforming the output of VFE-n into RC via FCN and applying element-wise Maxpool where C is the dimension of the
voxel-wise feature, as shown in Figure 2.
Sparse Tensor Representation
By processing only the
non-empty voxels, we obtain a list of voxel features, each
uniquely associated to the spatial coordinates of a particular non-empty voxel. The obtained list of voxel-wise features can be represented as a sparse 4D tensor, of size
C × D′ × H′ × W ′ as shown in Figure 2. Although the
point cloud contains ∼100k points, more than 90% of voxels typically are empty. Representing non-empty voxel features as a sparse tensor greatly reduces the memory usage
and computation cost during backpropagation, and it is a
critical step in our efﬁcient implementation.
Convolutional Middle Layers
We use ConvMD(cin, cout, k, s, p) to represent an Mdimensional convolution operator where cin and cout are
the number of input and output channels, k, s, and p are the
M-dimensional vectors corresponding to kernel size, stride
size and padding size respectively. When the size across the
M-dimensions are the same, we use a scalar to represent
the size e.g. k for k = (k, k, k).
Each convolutional middle layer applies 3D convolution,
BN layer, and ReLU layer sequentially. The convolutional
middle layers aggregate voxel-wise features within a progressively expanding receptive ﬁeld, adding more context
to the shape description. The detailed sizes of the ﬁlters in
the convolutional middle layers are explained in Section 3.
Region Proposal Network
Recently, region proposal networks have become an
important building block of top-performing object detection frameworks . In this work, we make several
key modiﬁcations to the RPN architecture proposed in ,
and combine it with the feature learning network and convolutional middle layers to form an end-to-end trainable
The input to our RPN is the feature map provided by
the convolutional middle layers. The architecture of this
network is illustrated in Figure 4. The network has three
blocks of fully convolutional layers. The ﬁrst layer of each
block downsamples the feature map by half via a convolution with a stride size of 2, followed by a sequence of convolutions of stride 1 (×q means q applications of the ﬁlter).
After each convolution layer, BN and ReLU operations are
applied. We then upsample the output of every block to a
ﬁxed size and concatanate to construct the high resolution
feature map. Finally, this feature map is mapped to the desired learning targets: (1) a probability score map and (2) a
regression map.
2.2. Loss Function
i }i=1...Npos be the set of Npos positive anchors and {aneg
j }j=1...Nneg be the set of Nneg negative
We parameterize a 3D ground truth box as
c , lg, wg, hg, θg), where xg
c represent the
center location, lg, wg, hg are length, width, height of the
box, and θg is the yaw rotation around Z-axis.
To retrieve the ground truth box from a matching positive anchor
parameterized as (xa
c , la, wa, ha, θa), we deﬁne the
residual vector u∗∈R7 containing the 7 regression targets corresponding to center location ∆x, ∆y, ∆z, three di-
Voxel Input
Feature Buffer
Voxel Coordinate
Voxel-wise
Memory Copy
Stacked VFE
Figure 5. Illustration of efﬁcient implementation.
mensions ∆l, ∆w, ∆h, and the rotation ∆θ, which are computed as:
∆l = log(lg
la ), ∆w = log(wg
wa ), ∆h = log(hg
∆θ = θg −θa
where da =
(la)2 + (wa)2 is the diagonal of the base
of the anchor box. Here, we aim to directly estimate the
oriented 3D box and normalize ∆x and ∆y homogeneously
with the diagonal da, which is different from . We deﬁne the loss function as follows:
i , 1) + β
Lreg(ui, u∗
where ppos
represent the softmax output for positive anchor apos
and negative anchor aneg
respectively, while
ui ∈R7 and u∗
∈R7 are the regression output and
ground truth for positive anchor apos
i . The ﬁrst two terms are
the normalized classiﬁcation loss for {apos
i }i=1...Npos and
j }j=1...Nneg, where the Lcls stands for binary cross entropy loss and α, β are postive constants balancing the relative importance. The last term Lreg is the regression loss,
where we use the SmoothL1 function .
2.3. Efﬁcient Implementation
GPUs are optimized for processing dense tensor structures. The problem with working directly with the point
cloud is that the points are sparsely distributed across space
and each voxel has a variable number of points. We devised
a method that converts the point cloud into a dense tensor
structure where stacked VFE operations can be processed
in parallel across points and voxels.
The method is summarized in Figure 5. We initialize a
K × T × 7 dimensional tensor structure to store the voxel
input feature buffer where K is the maximum number of
non-empty voxels, T is the maximum number of points
per voxel, and 7 is the input encoding dimension for each
point. The points are randomized before processing. For
each point in the point cloud, we check if the corresponding
voxel already exists. This lookup operation is done efﬁciently in O(1) using a hash table where the voxel coordinate is used as the hash key. If the voxel is already initialized we insert the point to the voxel location if there are less
than T points, otherwise the point is ignored. If the voxel
is not initialized, we initialize a new voxel, store its coordinate in the voxel coordinate buffer, and insert the point to
this voxel location. The voxel input feature and coordinate
buffers can be constructed via a single pass over the point
list, therefore its complexity is O(n). To further improve
the memory/compute efﬁciency it is possible to only store
a limited number of voxels (K) and ignore points coming
from voxels with few points.
After the voxel input buffer is constructed, the stacked
VFE only involves point level and voxel level dense operations which can be computed on a GPU in parallel. Note
that, after concatenation operations in VFE, we reset the
features corresponding to empty points to zero such that
they do not affect the computed voxel features.
using the stored coordinate buffer we reorganize the computed sparse voxel-wise structures to the dense voxel grid.
The following convolutional middle layers and RPN operations work on a dense voxel grid which can be efﬁciently
implemented on a GPU.
3. Training Details
In this section, we explain the implementation details of
the VoxelNet and the training procedure.
3.1. Network Details
Our experimental setup is based on the LiDAR speciﬁcations of the KITTI dataset .
Car Detection
For this task, we consider point clouds
within the range of [−3, 1] × [−40, 40] × [0, 70.4] meters
along Z, Y, X axis respectively. Points that are projected
outside of image boundaries are removed . We choose
a voxel size of vD = 0.4, vH = 0.2, vW = 0.2 meters,
which leads to D′ = 10, H′ = 400, W ′ = 352. We
set T = 35 as the maximum number of randomly sampled points in each non-empty voxel.
We use two VFE
layers VFE-1(7, 32) and VFE-2(32, 128). The ﬁnal FCN
maps VFE-2 output to R128. Thus our feature learning net
generates a sparse tensor of shape 128 × 10 × 400 × 352.
To aggregate voxel-wise features, we employ three convolution middle layers sequentially as Conv3D(128, 64, 3,
(2,1,1), (1,1,1)), Conv3D(64, 64, 3, (1,1,1), (0,1,1)), and
Conv3D(64, 64, 3, (2,1,1), (1,1,1)), which yields a 4D tensor of size 64 × 2 × 400 × 352. After reshaping, the input
to RPN is a feature map of size 128 × 400 × 352, where
the dimensions correspond to channel, height, and width of
the 3D tensor. Figure 4 illustrates the detailed network architecture for this task. Unlike , we use only one anchor
size, la = 3.9, wa = 1.6, ha = 1.56 meters, centered at
c = −1.0 meters with two rotations, 0 and 90 degrees.
Our anchor matching criteria is as follows: An anchor is
considered as positive if it has the highest Intersection over
Union (IoU) with a ground truth or its IoU with ground truth
is above 0.6 (in bird’s eye view). An anchor is considered
as negative if the IoU between it and all ground truth boxes
is less than 0.45. We treat anchors as don’t care if they have
0.45 ≤IoU ≤0.6 with any ground truth. We set α = 1.5
and β = 1 in Eqn. 2.
Pedestrian and Cyclist Detection
The input range1 is
[−3, 1] × [−20, 20] × meters along Z, Y, X axis respectively. We use the same voxel size as for car detection,
which yields D = 10, H = 200, W = 240. We set T = 45
in order to obtain more LiDAR points for better capturing
shape information. The feature learning network and convolutional middle layers are identical to the networks used
in the car detection task. For the RPN, we make one modiﬁcation to block 1 in Figure 4 by changing the stride size
in the ﬁrst 2D convolution from 2 to 1. This allows ﬁner
resolution in anchor matching, which is necessary for detecting pedestrians and cyclists. We use anchor size la =
0.8, wa = 0.6, ha = 1.73 meters centered at za
meters with 0 and 90 degrees rotation for pedestrian detection and use anchor size la = 1.76, wa = 0.6, ha = 1.73
meters centered at za
c = −0.6 with 0 and 90 degrees rotation for cyclist detection. The speciﬁc anchor matching criteria is as follows: We assign an anchor as postive if it has
the highest IoU with a ground truth, or its IoU with ground
truth is above 0.5. An anchor is considered as negative if its
IoU with every ground truth is less than 0.35. For anchors
having 0.35 ≤IoU ≤0.5 with any ground truth, we treat
them as don’t care.
During training, we use stochastic gradient descent
(SGD) with learning rate 0.01 for the ﬁrst 150 epochs and
decrease the learning rate to 0.001 for the last 10 epochs.
We use a batchsize of 16 point clouds.
3.2. Data Augmentation
With less than 4000 training point clouds, training our
network from scratch will inevitably suffer from overﬁtting.
To reduce this issue, we introduce three different forms of
data augmentation. The augmented training data are generated on-the-ﬂy without the need to be stored on disk .
1Our empirical observation suggests that beyond this range, LiDAR
returns from pedestrians and cyclists become very sparse and therefore
detection results will be unreliable.
Deﬁne set M = {pi = [xi, yi, zi, ri]T ∈R4}i=1,...,N as
the whole point cloud, consisting of N points. We parameterize a 3D bouding box bi as (xc, yc, zc, l, w, h, θ), where
xc, yc, zc are center locations, l, w, h are length, width,
height, and θ is the yaw rotation around Z-axis. We de-
ﬁne Ωi = {p|x ∈[xc −l/2, xc + l/2], y ∈[yc −w/2, yc +
w/2], z ∈[zc −h/2, zc + h/2], p ∈M} as the set containing all LiDAR points within bi, where p = [x, y, z, r]
denotes a particular LiDAR point in the whole set M.
The ﬁrst form of data augmentation applies perturbation
independently to each ground truth 3D bounding box together with those LiDAR points within the box. Speciﬁcally, around Z-axis we rotate bi and the associated Ωi with
respect to (xc, yc, zc) by a uniformally distributed random
variable ∆θ ∈[−π/10, +π/10]. Then we add a translation
(∆x, ∆y, ∆z) to the XYZ components of bi and to each
point in Ωi, where ∆x, ∆y, ∆z are drawn independently
from a Gaussian distribution with mean zero and standard
deviation 1.0. To avoid physically impossible outcomes, we
perform a collision test between any two boxes after the perturbation and revert to the original if a collision is detected.
Since the perturbation is applied to each ground truth box
and the associated LiDAR points independently, the network is able to learn from substantially more variations than
from the original training data.
Secondly, we apply global scaling to all ground truth
boxes bi and to the whole point cloud M. Speciﬁcally,
we multiply the XYZ coordinates and the three dimensions of each bi, and the XYZ coordinates of all points
in M with a random variable drawn from uniform distribution [0.95, 1.05]. Introducing global scale augmentation
improves robustness of the network for detecting objects
with various sizes and distances as shown in image-based
classiﬁcation and detection tasks .
Finally, we apply global rotation to all ground truth
boxes bi and to the whole point cloud M. The rotation
is applied along Z-axis and around (0, 0, 0). The global rotation offset is determined by sampling from uniform distribution [−π/4, +π/4]. By rotating the entire point cloud,
we simulate the vehicle making a turn.
4. Experiments
We evaluate VoxelNet on the KITTI 3D object detection
benchmark which contains 7,481 training images/point
clouds and 7,518 test images/point clouds, covering three
categories: Car, Pedestrian, and Cyclist. For each class,
detection outcomes are evaluated based on three difﬁculty
levels: easy, moderate, and hard, which are determined according to the object size, occlusion state, and truncation
level. Since the ground truth for the test set is not available and the access to the test server is limited, we conduct comprehensive evaluation using the protocol described
in and subdivide the training data into a training set
Pedestrian
Mono3D 
VeloFCN 
MV (BV+FV) 
MV (BV+FV+RGB) 
LiDAR+Mono
HC-baseline
Table 1. Performance comparison in bird’s eye view detection: average precision (in %) on KITTI validation set.
Pedestrian
Mono3D 
VeloFCN 
MV (BV+FV) 
MV (BV+FV+RGB) 
LiDAR+Mono
HC-baseline
Table 2. Performance comparison in 3D detection: average precision (in %) on KITTI validation set.
and a validation set, which results in 3,712 data samples for
training and 3,769 data samples for validation. The split
avoids samples from the same sequence being included in
both the training and the validation set . Finally we also
present the test results using the KITTI server.
For the Car category, we compare the proposed method
with several top-performing algorithms, including image
based approaches: Mono3D and 3DOP ; LiDAR
based approaches: VeloFCN and 3D-FCN ; and a
multi-modal approach MV . Mono3D , 3DOP and
MV use a pre-trained model for initialization whereas
we train VoxelNet from scratch using only the LiDAR data
provided in KITTI.
To analyze the importance of end-to-end learning, we
implement a strong baseline that is derived from the VoxelNet architecture but uses hand-crafted features instead of
the proposed feature learning network. We call this model
the hand-crafted baseline (HC-baseline). HC-baseline uses
the bird’s eye view features described in which are
computed at 0.1m resolution. Different from , we increase the number of height channels from 4 to 16 to capture more detailed shape information– further increasing
the number of height channels did not lead to performance
improvement.
We replace the convolutional middle layers of VoxelNet with similar size 2D convolutional layers,
which are Conv2D(16, 32, 3, 1, 1), Conv2D(32, 64, 3, 2,
1), Conv2D(64, 128, 3, 1, 1). Finally RPN is identical in
VoxelNet and HC-baseline. The total number of parameters in HC-baseline and VoxelNet are very similar. We train
the HC-baseline using the same training procedure and data
augmentation described in Section 3.
4.1. Evaluation on KITTI Validation Set
We follow the ofﬁcial KITTI evaluation protocol,
where the IoU threshold is 0.7 for class Car and is 0.5 for
class Pedestrian and Cyclist. The IoU threshold is the same
for both bird’s eye view and full 3D evaluation. We compare
the methods using the average precision (AP) metric.
Evaluation in Bird’s Eye View
The evaluation result is
presented in Table 1. VoxelNet consistently outperforms all
the competing approaches across all three difﬁculty levels.
HC-baseline also achieves satisfactory performance compared to the state-of-the-art , which shows that our base
region proposal network (RPN) is effective. For Pedestrian
and Cyclist detection tasks in bird’s eye view, we compare
the proposed VoxelNet with HC-baseline. VoxelNet yields
substantially higher AP than the HC-baseline for these more
challenging categories, which shows that end-to-end learning is essential for point-cloud based detection.
We would like to note that reported 88.9%, 77.3%,
and 72.7% for easy, moderate, and hard levels respectively,
but these results are obtained based on a different split of
6,000 training frames and ∼1,500 validation frames, and
they are not directly comparable with algorithms in Table 1.
Therefore, we do not include these results in the table.
Evaluation in 3D
Compared to the bird’s eye view detection, which requires only accurate localization of objects in the 2D plane, 3D detection is a more challenging task as it requires ﬁner localization of shapes in 3D
Table 2 summarizes the comparison.
class Car, VoxelNet signiﬁcantly outperforms all other approaches in AP across all difﬁculty levels.
Speciﬁcally,
using only LiDAR, VoxelNet signiﬁcantly outperforms the
Pedestrian
Figure 6. Qualitative results. For better visualization 3D boxes detected using LiDAR are projected on to the RGB images.
state-of-the-art method MV (BV+FV+RGB) based on
LiDAR+RGB, by 10.68%, 2.78% and 6.29% in easy, moderate, and hard levels respectively. HC-baseline achieves
similar accuracy to the MV method.
As in the bird’s eye view evaluation, we also compare
VoxelNet with HC-baseline on 3D Pedestrian and Cyclist
detection. Due to the high variation in 3D poses and shapes,
successful detection of these two categories requires better
3D shape representation. As shown in Table 2 the improved
performance of VoxelNet is emphasized for more challenging 3D detection tasks (from ∼8% improvement in bird’s
eye view to ∼12% improvement on 3D detection) which
suggests that VoxelNet is more effective in capturing 3D
shape information than hand-crafted features.
4.2. Evaluation on KITTI Test Set
We evaluated VoxelNet on the KITTI test set by submitting detection results to the ofﬁcial server. The results are
summarized in Table 3. VoxelNet, signiﬁcantly outperforms
the previously published state-of-the-art in all the tasks
(bird’s eye view and 3D detection) and all difﬁculties. We
would like to note that many of the other leading methods
listed in KITTI benchmark use both RGB images and Li-
DAR point clouds whereas VoxelNet uses only LiDAR.
We present several 3D detection examples in Figure 6.
For better visualization 3D boxes detected using LiDAR are
projected on to the RGB images. As shown, VoxelNet provides highly accurate 3D bounding boxes in all categories.
The inference time for the VoxelNet is 225ms where the
voxel input feature computation takes 5ms, feature learning net takes 20ms, convolutional middle layers take 170ms,
Car (3D Detection)
Car (Bird’s Eye View)
Pedestrian (3D Detection)
Pedestrian (Bird’s Eye View)
Cyclist (3D Detection)
Cyclist (Bird’s Eye View)
Table 3. Performance evaluation on KITTI test set.
and region proposal net takes 30ms on a TitanX GPU and
1.7Ghz CPU.
5. Conclusion
Most existing methods in LiDAR-based 3D detection
rely on hand-crafted feature representations, for example,
a bird’s eye view projection. In this paper, we remove the
bottleneck of manual feature engineering and propose VoxelNet, a novel end-to-end trainable deep architecture for
point cloud based 3D detection. Our approach can operate
directly on sparse 3D points and capture 3D shape information effectively. We also present an efﬁcient implementation of VoxelNet that beneﬁts from point cloud sparsity
and parallel processing on a voxel grid. Our experiments
on the KITTI car detection task show that VoxelNet outperforms state-of-the-art LiDAR based 3D detection methods
by a large margin. On more challenging tasks, such as 3D
detection of pedestrians and cyclists, VoxelNet also demonstrates encouraging results showing that it provides a better
3D representation. Future work includes extending Voxel-
Net for joint LiDAR and image based end-to-end 3D detection to further improve detection and localization accuracy.
Acknowledgement:
We are grateful to our colleagues
Russ Webb, Barry Theobald, and Jerremy Holland for their
valuable input.