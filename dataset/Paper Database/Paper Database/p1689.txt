Graph Neural Network for Traﬃc Forecasting: A
Weiwei Jiang∗
Department of Electronic Engineering, Tsinghua University, Beijing, 100084, China
Jiayun Luo∗∗
School of Computer Science and Engineering, Nanyang Technological University, 639798,
Traﬃc forecasting is important for the success of intelligent transportation systems. Deep learning models, including convolution neural networks and recurrent neural networks, have been extensively applied in traﬃc forecasting problems to model spatial and temporal dependencies. In recent years, to model the
graph structures in transportation systems as well as contextual information,
graph neural networks have been introduced and have achieved state-of-the-art
performance in a series of traﬃc forecasting problems. In this survey, we review
the rapidly growing body of research using diﬀerent graph neural networks, e.g.
graph convolutional and graph attention networks, in various traﬃc forecasting
problems, e.g. road traﬃc ﬂow and speed forecasting, passenger ﬂow forecasting
in urban rail transit systems, and demand forecasting in ride-hailing platforms.
We also present a comprehensive list of open data and source codes for each
problem and identify future research directions. To the best of our knowledge,
this paper is the ﬁrst comprehensive survey that explores the application of
graph neural networks for traﬃc forecasting problems. We have also created a
public GitHub repository where the latest papers, open data, and source codes
will be updated.
∗Corresponding author. E-mail address: 
∗∗E-mail address: 
 
February 23, 2022
 
Traﬃc Forecasting, Graph Neural Networks, Graph Convolution
Network, Graph Attention Network, Deep Learning
1. Introduction
Transportation systems are among the most important infrastructure in
modern cities, supporting the daily commuting and traveling of millions of people. With rapid urbanization and population growth, transportation systems
have become more complex. Modern transportation systems encompass road
vehicles, rail transport, and various shared travel modes that have emerged in
recent years, including online ride-hailing, bike-sharing, and e-scooter sharing.
Expanding cities face many transportation-related problems, including air pollution and traﬃc congestion. Early intervention based on traﬃc forecasting is
seen as the key to improving the eﬃciency of a transportation system and to
alleviate transportation-related problems. In the development and operation
of smart cities and intelligent transportation systems (ITSs), traﬃc states are
detected by sensors (e.g. loop detectors) installed on roads, subway and bus system transaction records, traﬃc surveillance videos, and even smartphone GPS
(Global Positioning System) data collected in a crowd-sourced fashion. Traﬃc
forecasting is typically based on consideration of historical traﬃc state data,
together with the external factors which aﬀect traﬃc states, e.g. weather and
Both short-term and long-term traﬃc forecasting problems for various transport modes are considered in the literature. This survey focuses on the datadriven approach, which involves forecasting based on historical data. The traﬃc
forecasting problem is more challenging than other time series forecasting problems because it involves large data volumes with high dimensionality, as well as
multiple dynamics including emergency situations, e.g. traﬃc accidents. The
traﬃc state in a speciﬁc location has both spatial dependency, which may not
be aﬀected only by nearby areas, and temporal dependency, which may be seasonal. Traditional linear time series models, e.g. auto-regressive and integrated
moving average (ARIMA) models, cannot handle such spatiotemporal forecasting problems. Machine learning (ML) and deep learning techniques have been
introduced in this area to improve forecasting accuracy, for example, by modeling the whole city as a grid and applying a convolutional neural network (CNN)
as demonstrated by Jiang & Zhang . However, the CNN-based approach
is not optimal for traﬃc foresting problems that have a graph-based form, e.g.
road networks.
In recent years, graph neural networks (GNNs) have become the frontier of
deep learning research, showing state-of-the-art performance in various applications . GNNs are ideally suited to traﬃc forecasting problems
because of their ability to capture spatial dependency, which is represented using non-Euclidean graph structures. For example, a road network is naturally a
graph, with road intersections as the nodes and road connections as the edges.
With graphs as the input, several GNN-based models have demonstrated superior performance to previous approaches on tasks including road traﬃc ﬂow
and speed forecasting problems. These include, for example, the diﬀusion convolutional recurrent neural network (DCRNN) and Graph
WaveNet models. The GNN-based approach has also been
extended to other transportation modes, utilizing various graph formulations
and models.
To the best of the authors’ knowledge, this paper presents the ﬁrst comprehensive literature survey of GNN-related approaches to traﬃc forecasting
problems. While several relevant traﬃc forecasting surveys exist , most of them are not
GNN-focused with only one exception . For this survey, we
reviewed 212 papers published in the years 2018 to 2020. Additionally, because
this is a very rapidly developing research ﬁeld, we also included preprints that
have not yet gone through the traditional peer review process (e.g., arXiv pa-
pers) to present the latest progress. Based on these studies, we identify the most
frequently considered problems, graph formulations, and models. We also investigate and summarize publicly available useful resources, including datasets,
software, and open-sourced code, for GNN-based traﬃc forecasting research and
application. Lastly, we identify the challenges and future directions of applying
GNNs to the traﬃc forecasting problem.
Instead of giving a whole picture of traﬃc forecasting, our aim is to provide
a comprehensive summary of GNN-based solutions. This paper is useful for
both the new researchers in this ﬁeld who want to catch up with the progress
of applying GNNs and the experienced researchers who are not familiar with
these latest graph-based solutions. In addition to this paper, we have created an
open GitHub repository on this topic 1, where relevant content will be updated
continuously.
Our contributions are summarized as follows:
1) Comprehensive Review: We present the most comprehensive review of
graph-based solutions for traﬃc forecasting problems in the past three years
 .
2) Resource Collection: We provide the latest comprehensive list of open
datasets and code resources for replication and comparison of GNNs in future
3) Future Directions: We discuss several challenges and potential future
directions for researchers in this ﬁeld, when using GNNs for traﬃc forecasting
The remainder of this paper is organized as follows. In Section 2, we compare
our work with other relevant research surveys.
In Section 3, we categorize
the traﬃc forecasting problems that are involved with GNN-based models. In
Section 4.1, we summarize the graphs and GNNs used in the reviewed studies.
In Section 5, we outline the open resources. Finally, in Section 6, we point out
challenges and future directions.
1 
2. Related Research Surveys
In this section, we introduce the most recent relevant research surveys . The diﬀerences between our study and these
existing surveys are pointed out when appropriate. We start with the surveys
addressing wider ITS topics, followed by those focusing on traﬃc prediction
problems and GNN application in particular.
Besides traﬃc forecasting, machine learning and deep learning methods have
been widely used in ITSs as discussed in Fan et al. ; Haghighat et al.
 ; Luca et al. . In Haghighat et al. , GNNs are only mentioned
in the task of traﬃc characteristics prediction. Among the major milestones of
deep-learning driven traﬃc prediction ), the state-of-the-art models after 2019 are all based on GNNs, indicating that GNNs are indeed the frontier of deep learning-based traﬃc prediction
Roughly speaking, ﬁve diﬀerent types of traﬃc prediction methods are identiﬁed and categorized in previous surveys , namely, statistics-based methods, traditional machine learning methods,
deep learning-based methods, reinforcement learning-based methods, and transfer learning-based methods. Some comparisons between diﬀerent categories have
been considered, e.g., statistics-based models have better model interpretability, whereas ML-based models are more ﬂexible as discussed in Boukerche et al.
 . Machine learning models for traﬃc prediction are further categorized
in Boukerche & Wang , which include the regression model, examplebased models (e.g., k-nearest neighbors), kernel-based models (e.g.
vector machine and radial basis function), neural network models, and hybrid
models. Deep learning models are further categorized into ﬁve diﬀerent generations in Lee et al. , in which GCNs are classiﬁed as the fourth generation
and other advanced techniques that have been considered but are not yet widely
applied are merged into the ﬁfth generation. These include transfer learning,
meta learning, reinforcement learning, and the attention mechanism. Before
these advanced techniques become mature in traﬃc prediction tasks, GNNs
remain the state-of-the-art technique.
Some of the relevant surveys only focus on the progress of deep learningbased methods , while the others prefer to compare them with the statistics-based and machine learning methods . In Tedjopurnomo et al. , 37 deep neural
networks for traﬃc prediction are reviewed, categorized, and discussed. The
authors conclude that encoder-decoder long short term-memory (LSTM) combined with graph-based methods is the state-of-the-art prediction technique.
A detailed explanation of various data types and popular deep neural network
architectures is also provided, along with challenges and future directions for
traﬃc prediction. Conversely, it is found that deep learning is not always the
best modeling technique in practical applications, where linear models and machine learning techniques with less computational complexity can sometimes be
preferable .
Additional research surveys consider aspects other than model selection.
In Pavlyuk , spatiotemporal feature selection and extraction pre-processing
methods, which may also be embedded as internal model processes, are reviewed.
A meta-analysis of prediction accuracy when applying deep learning methods
to transport studies is given in Varghese et al. . In this study, apart from
the models themselves, additional factors including sample size and prediction
time horizon are shown to have a signiﬁcant inﬂuence on prediction accuracy.
To the authors’ best knowledge, there are no existing surveys focusing on the
application of GNNs for traﬃc forecasting. Graph-based deep learning architectures are reviewed in Ye et al. , for a series of traﬃc applications, namely,
traﬃc congestion, travel demand, transportation safety, traﬃc surveillance, and
autonomous driving. Speciﬁc and practical guidance for constructing graphs in
these applications is provided. The advantages and disadvantages of both GNNs
and other deep learning models ,e.g. recurrent neural network (RNN), temporal convolutional network (TCN), Seq2Seq, and generative adversarial network
(GAN), are examined. While the focus is not limited to traﬃc prediction prob-
lems, the graph construction process is universal in the traﬃc domain when
GNNs are involved.
3. Problems
In this section, we discuss and categorize the diﬀerent types of traﬃc forecasting problems considered in the literature. Problems are ﬁrst categorized
by the traﬃc state to be predicted. Traﬃc ﬂow, speed, and demand problems
are considered separately while the remaining types are grouped together under
“other problems”. Then, the problem-types are further broken down into levels according to where the traﬃc states are deﬁned. These include road-level,
region-level, and station-level categories.
Diﬀerent problem types have diﬀerent modelling requirements for representing spatial dependency. For the road-level problems, the traﬃc data are usually
collected from sensors, which are associated with speciﬁc road segments, or
GPS trajectory data, which are also mapped into the road network with map
matching techniques. In this case, the road network topology can be seen as
the graph to use, which may contain hundreds or thousands of road segments
potentially. The spatial dependency may be described by the road network connectivity or spatial proximity. For the station-level problems, the metro or bus
station topology can be taken as the graph to use, which may contain tens or
hundreds of stations potentially. The spatial dependency may be described by
the metro lines or bus routes. For the region-level problem, the regular or irregular regions are used as the nodes in a graph. The spatial dependency between
diﬀerent regions can be extracted from the land use purposes, e.g., from the
points-of-interest data.
A full list of the traﬃc forecasting problems considered in the surveyed studies is shown in Table 1. Instead of giving the whole picture of traﬃc forecasting
research, only those problems with GNN-based solutions in the literature are
listed in Table 1.
Table 1: Traffic forecasting problems in the surveyed studies.
Relevant Studies
Road Traffic Flow
Bai et al. ; Boukerche & Wang ; Cao et al. ; Chen et al. ; Fang
et al. ; Fukuda et al. ; Guo et al. ; Huang et al. ;
Kang et al. ; Kong et al. ; Li & Zhu ; Li et al. ; Lu et al.
 ; Lv et al. ; Mallick et al. ; Pan et al. ; Qu et al. ; Song
et al. ; Sun et al. ; Tang et al. ; Tian et al. ; Wang et al. ; Wei & Sheng ; Wei et al. ; Wu et al. ; Xie et al. ;
Xin et al. ; Xu et al. ; Yin et al. ; Yu et al. ; Zhang
et al. ; Zhang & Guo ; Zhang et al. ; Zheng et al.
Road OD Flow
Ramadan et al. ; Xiong et al. 
Intersection Traffic
Throughput
S´anchez et al. 
Regional Taxi Flow
Chen et al. ; Peng et al. ; Qiu et al. ; Sun et al. ; Wang et al. ; Zhou et al. 
Regional Bike Flow
Sun et al. ; Wang et al. ; Zhou et al. 
Ridehailing Flow
Zhou et al. 
E-Scooter Flow
He & Shin 
Regional OD Taxi
Wang et al. ; Yeghikyan et al. 
Regional OD Bike
Wang et al. 
Regional OD Ridehailing Flow
Shi et al. ; Wang et al. 
Station-level
Fang et al. ; Han et al. ; Li et al. ; Liu et al. ; Ou
et al. ; Peng et al. ; Ren & Xie ; Ye et al. ; Zhang et al. ;
Zhao et al. 
Station-level
Passenger Flow
Fang et al. ; Peng et al. 
Station-level
Zhu et al. 
Station-level
Chai et al. ; He & Shin 
Station-level
He et al. 
Road Traffic Speed
Agafonov ; Bai et al. ; Bing et al. ; Bogaerts et al. ; Cai et al. ;
Chen et al. ; Cirstea et al. ; Cui et al. ; Diao et al. ;
Feng et al. ; Fu et al. ; Ge et al. ; Guo & Yuan ; Guo et al.
 ; Guopeng et al. ; James ; Jepsen et al. ; Jia
et al. ; Kim et al. ; Lee & Rhee ; Lewenfus et al. ; Li & Zhu
 ; Li et al. ; Liao et al. ; Liu et al. ; Lu et al. ; Lv et al. ; Maas & Bloem ; Mallick et al. ; Opolka et al.
 ; Oreshkin et al. ; Pan et al. ; Park et al. ; Shin & Yoon ;
Shleifer et al. ; Song et al. ; Sun et al. ; Tang et al. ; Wang et al.
 ; Wei et al. ; Wu et al. ; Xie et al. ; Xu et al. ;
Yang et al. ; Yin et al. ; Yu et al. ; Yu & Gu ; Zhang et al.
 ; Zhao et al. ; Zheng
et al. ; Zhou et al. ; Zhu et al. 
Road Travel Time
Fang et al. ; Guo et al. ; Hasanzadeh et al. ; Shao et al. ; Shen
et al. 
Traffic Congestion
Dai et al. ; Han et al. ; Mohanty & Pozdnukhov ; Mohanty et al. ;
Qin et al. 
Time of Arrival
Hong et al. 
Continued on next page
Table 1 – continued from previous page
Relevant Studies
Regional OD Taxi
Hu et al. 
Ride-hailing
Bai et al. ; Geng et al. ; Jin et al. ; Ke et al. ; Lee et al.
 ; Li & Axhausen ; Li et al. ; Pian & Wu 
Taxi Demand
Bai et al. ; Chen et al. ; Davis et al. ; Du et al. ; Hu et al. ;
Ke et al. ; Lee et al. ; Li & Moura ; Wu et al. ; Xu & Li ; Ye
et al. ; Zheng et al. 
Shared Vehicle Demand
Luo et al. 
Bike Demand
Bai et al. ; Chen et al. ; Du et al. ; Guo et al. ; Kim et al. ;
Lee et al. ; Lin et al. ; Qin et al. ; Wang et al. ; Xiao et al. ;
Ye et al. ; Yoshida et al. 
Traffic Accident
Yu et al. ; Zhang et al. ; Zhou et al. 
Traffic Anomaly
Liu et al. 
Availability
Yang et al. ; Zhang et al. 
Transportation Resilience
Wang et al. 
Xu et al. 
Railway Delay
Heglund et al. 
Lane Occupancy
Wright et al. 
Generally speaking, traﬃc forecasting problems are challenging, not only for
the complex temporal dependency, but only for the complex spatial dependency.
While many solutions have been proposed for dealing with the time dependency,
e.g., recurrent neural networks and temporal convolutional networks, the problem to capture and model the spatial dependency has not been fully solved.
The spatial dependency, which refers to the complex and nonlinear relationship between the traﬃc state in one particular location with other locations.
This location could be a road intersection, a subway station, or a city region.
The spatial dependency may not be local, e.g., the traﬃc state may not only
be aﬀected by nearby areas, but also those which are far away in the spatial
range but connected by a fast transportation tool. The graphs are necessary to
capture such kind of spatial information as we would discuss in the next section.
Before the usage of graph theories and GNNs, the spatial information is
usually extracted by multivariate time series models or CNNs. Within a multivariate time series model, e.g., vector autoregression, the traﬃc states collected
in diﬀerent locations or regions are combined together as multivariate time series. However, the multivariate time series models can only extract the linear
relationship among diﬀerent states, which is not enough for modeling the complex and nonlinear spatial dependency. CNNs take a step further by modeling
the local spatial information, e.g., the whole spatial range is divided into regular
grids as the two-dimensional image format and the convolution operation is performed in the neighbor grids. However, the CNN-based approach is bounded
to the case of Euclidean structure data, which cannot model the topological
structure of the subway network or the road network.
Graph neural networks bring new opportunities for solving traﬃc forecasting
problems, because of their strong learning ability to capture the spatial information hidden in the non-Euclidean structure data, which are frequently seen
in the traﬃc domain. Based on graph theories, both nodes and edges have their
own attributes, which can be used further in the convolution or aggregation operations. These attributes describe diﬀerent traﬃc states, e.g., volume, speed,
lane numbers, road level, etc. For the dynamic spatial dependency, dynamic
graphs can be learned from the data automatically. For the case of hierarchical
traﬃc problems, the concepts of super-graphs and sub-graphs can be deﬁned
and further used.
3.1. Traﬃc Flow
Traﬃc ﬂow is deﬁned as the number of vehicles passing through a spatial
unit, such as a road segment or traﬃc sensor point, in a given time period. An
accurate traﬃc ﬂow prediction is beneﬁcial for a variety of applications, e.g.,
traﬃc congestion control, traﬃc light control, vehicular cloud, etc . For example, traﬃc light control can reduce vehicle staying
time at the road intersections, optimizing the traﬃc ﬂow, and reducing traﬃc
congestion and vehicle emission.
We consider three levels of traﬃc ﬂow problems in this survey, namely, roadlevel ﬂow, region-level ﬂow, and station-level ﬂow.
Road-level ﬂow problems are concerned with traﬃc volumes on a road and
include road traﬃc ﬂow, road origin-destination (OD) Flow, and intersection
traﬃc throughput. In road traﬃc ﬂow problems, the prediction target is the
traﬃc volume that passes a road sensor or a speciﬁc location along the road
within a certain time period (e.g. ﬁve minutes). In the road OD ﬂow problem,
the target is the volume between one location (the origin) and another (the destination) at a single point in time. The intersection traﬃc throughput problem
considers the volume of traﬃc moving through an intersection.
Region-level ﬂow problems consider traﬃc volume in a region. A city may be
divided into regular regions (where the partitioning is grid-based) or irregular
regions (e.g.
road-based or zip-code-based partitions).
These problems are
classiﬁed by transport mode into regional taxi ﬂow, regional bike ﬂow, regional
ride-hailing ﬂow, regional dockless e-scooter ﬂow, regional OD taxi ﬂow, regional
OD bike ﬂow, and regional OD ride-hailing ﬂow problems.
Station-level ﬂow problems relate to the traﬃc volume measured at a physical station, for example, a subway or bus station. These problems are divided by
station type into station-level subway passenger ﬂow, station-level bus passenger
ﬂow, station-level shared vehicle ﬂow, station-level bike ﬂow, and station-level
railway passenger ﬂow problems.
Road-level traﬃc ﬂow problems are further divided into cases of unidirectional and bidirectional traﬃc ﬂow, whereas region-level and station-level traﬃc
ﬂow problems are further divided into the cases of inﬂow and outﬂow, based on
diﬀerent problem formulations.
While traﬃc sensors have been successfully used, data collection for traﬃc
ﬂow information is still a challenge when considering the high costs in deployment and maintenance of traﬃc sensors. Another potential approach is using
the pervasive mobile and IoT devices, which have a lower cost generally, e.g.,
GPS sensors. However, challenges still exist when considering the data quality
problems frequently seen in GPS data, e.g., missing data caused by unstable
communication links.
The traﬃc light is another source of challenges for various traﬃc prediction
tasks. Short-term traﬃc ﬂow ﬂuctuation and the spatial relation change between
two road segments can be caused by the traﬃc light. The way of controlling the
traﬃc light may be diﬀerent in diﬀerent time periods, causing an inconsistent
traﬃc ﬂow pattern.
3.2. Traﬃc Speed
Traﬃc speed is another important indicator of traﬃc state with potential
applications in ITS systems, which is deﬁned as the average speed of vehicles
passing through a spatial unit in a given time period. The speed value on the
urban road can reﬂect the crowdedness level of road traﬃc. For example, Google
Maps visualizes this crowdedness level from crowd-sourcing data collected from
individual mobile devices and in-vehicle sensors. A better traﬃc speed prediction is also useful for route navigation and estimation-of-arrival applications.
We consider two levels of traﬃc speed problems in this survey, namely, roadlevel and region-level problems.
We also include travel time and congestion
predictions in this category because they are closely correlated to traﬃc speed.
Travel time prediction is useful for passengers to plan their commuting time
and for drivers to select fast routes, respectively. Traﬃc congestion is one of
the most important and urgent transportation problems in cities, which brings
signiﬁcant time loss, air pollution and energy waste. The congestion prediction
results can be used to control the road conditions and optimize vehicle ﬂow,
e.g., with traﬃc signal control. In several studies, traﬃc congestion is judged
by a threshold-based speed inference.
The speciﬁc road-level speed problem
categories considered are road traﬃc speed, road travel time, traﬃc congestion,
and time of arrival problems; while the region-level speed problem considered
is regional OD taxi speed.
Traﬃc speed is concerned in both urban roads and freeways. However, the
challenges diﬀer in these two diﬀerent scenarios. Freeways have a few traﬃc signals or on/oﬀ-ramps, making the prediction easier than the urban case. And the
challenge mainly comes from the complex temporal dependency. More complex
traﬃc networks exist in urban roads with more complicated connection patterns
and abrupt changes. For example, diﬀerent road segments may have diﬀerent
speed limit values and the allowed vehicle types. Besides the complex temporal
dependency, modeling the spatial dependency becomes a bigger challenge for
urban traﬃc speed forecasting.
3.3. Traﬃc Demand
Traﬃc demand prediction is a key component for taxi and ride-hailing services to be successful, which beneﬁts these service providers to allocate limited
available transportation resources to those urban areas with a higher demand.
For passengers, traﬃc demand prediction encourages the consideration of various transportation forms, e.g., taking the public transit service when taxi or
ride-hailing services are in short supply.
Traﬃc demand refers to the potential demand for travel, which may or may
not be fulﬁlled completely. For example, on an online ride-hailing platform, the
ride requests sent by passengers represent the demand, whereas only a subset of
these requests may be served depending on the supply of drivers and vehicles,
especially during rush hours. Accurate prediction of travel demand is a key
element of vehicle scheduling systems (e.g. online ride-hailing or taxi dispatch
platforms). However, in some cases, it is diﬃcult to collect the potential travel
demand from passengers and a compromise method using transaction records as
an indication of the traﬃc demand is used. In such cases the real demand may
be underestimated.
Based on transport mode, the traﬃc demand problems
considered include ride-hailing demand, taxi demand, shared vehicle demand,
and bike demand.
3.4. Other Problems
In addition to the above three categories of traﬃc forecasting problems,
GNNs are also being applied to the following problems.
Traﬃc accident and Traﬃc anomaly: the target is to predict the traﬃc
accident number reported to the police system. Traﬃc anomaly is the major
cause of traﬃc delay and a timely detection and prediction would help the
administrators to identify the situation and turn the traﬃc situation back to
normal as quickly as possible. A traﬃc accident is usually an accident in road
traﬃc involving diﬀerent vehicles, which may cause signiﬁcant loss of life and
property. The traﬃc anomaly has a broader deﬁnition that deviates from the
normal traﬃc state, e.g., the traﬃc jam caused by a traﬃc accident or a public
procession.
Parking availability: the target is to predict the availability of vacant parking
space for cars in the streets or in a car parking lot.
Urban vehicle emission: while not directly related to traﬃc states, the prediction of urban vehicle emission is considered in Xu et al. .
vehicle emission refers to the emission produced by motor vehicles, e.g., those
use internal combustion engines. Urban vehicle emission is a major source of air
pollutants and its amount is aﬀected by diﬀerent traﬃc states, e.g., the excess
emission would be created in traﬃc congestion situations.
Railway delay: the delay time of speciﬁc routes in the railway system is
considered in Heglund et al. .
Lane occupancy: With simulated traﬃc data, lane occupancy has been measured and predicted .
4. Graphs and Graph Neural Networks
In this section, we summarize the types of graphs and GNNs used in the surveyed studies, focusing on GNNs that are frequently used for traﬃc forecasting
problems. The contributions of this section include an organized approach for
classifying the diﬀerent traﬃc graphs based on the domain knowledge, and a
summary of the common ways for constructing adjacency matrices, which may
not be encountered in other neural networks before and would be very helpful
for those who would like to use graph neural networks.
The diﬀerent GNN
structures already used for traﬃc forecasting problems are brieﬂy introduced in
this section too. For a wider and deeper discussion of GNNs, refer to Wu et al.
 ; Zhang et al. ; Zhou et al. .
4.1. Traﬃc Graphs
4.1.1. Graph Construction
A graph is the basic structure used in GNNs. It is deﬁned as G = (V, E, A),
where V is the set of vertices or nodes, E is the set of edges between the nodes,
and A is the adjacency matrix. Both nodes and edges can be associated with
diﬀerent attributes in diﬀerent GNN problems. Element aij of A represents the
“edge weight” between nodes i and j. For a binary connection matrix A, aij = 1
if there is an edge between nodes i and j in E, and aij = 0 otherwise. If A is
symmetric, the corresponding graph G is deﬁned as undirected. Otherwise, G
is directed, when the edge only exists in one direction between a node pair.
For simplicity, we assume that the traﬃc state is associated with the nodes.
The other case with edges can be derived similarly. In practice, the traﬃc state
is collected or aggregated in discrete time steps, e.g. ﬁve minutes or one hour,
depending on the speciﬁc scenario.
For a single time step t, we denote the node feature matrix as χt ∈RN×d,
where N is the number of nodes and d is the dimension of the node features,
i.e., the number of traﬃc state variables. Now we are ready to give a formal
deﬁnition of traﬃc graph.
Deﬁnition 4.1 (Traﬃc Graph). A traﬃc graph (with node features) is deﬁned
as a speciﬁc type of graph G = (V, E, A), where V is the node set, E is the edge
set, and A is the adjacency matrix. For a single time step t, the node feature
matrix χt ∈RN×d for G contains speciﬁc traﬃc states, where N is the number
of nodes and d is the number of traﬃc state variables.
Then we give a formal deﬁnition of graph-based traﬃc forecasting problem
without leveraging external factors ﬁrstly.
Deﬁnition 4.2 (Graph-based Traﬃc Forecasting). A graph-based traﬃc forecasting (without external factors) is deﬁned as follows: ﬁnd a function f which
generates y = f(χ; G), where y is the traﬃc state to be predicted, χ = {χ1, χ2, ..., χT }
is the historical traﬃc state deﬁned on graph G, and T is the number of time
steps in the historical window size.
In single step forecasting, the traﬃc state in the next time step only is predicted, whereas in multiple step forecasting the traﬃc state several time steps
later is the prediction target. As mentioned in Section 1, traﬃc states can be
highly aﬀected by external factors, e.g. weather and holidays. The forecasting
problem formulation, extended to incorporate these external factors, takes the
form y = f(χ, ε; G), where ε represents the external factors. Figure 1 demonstrates the graph-based traﬃc forecasting problem, where diﬀerent color patches
represent diﬀerent traﬃc variables.
External Factors
Figure 1: The single-step graph-based traﬃc forecasting problem. Adapted from Ye et al.
 with external factors added.
Various graph structures are used to model traﬃc forecasting problems depending on both the forecasting problem-type and the traﬃc datasets available.
These graphs can be pre-deﬁned static graphs, or dynamic graphs continuously
learned from the data. The static graphs can be divided into two types, namely,
natural graphs and similarity graphs. Natural graphs are based on a real-world
transportation system, e.g. the road network or subway system; whereas similarity graphs are based solely on the similarity between diﬀerent node attributes
where nodes may be virtual stations or regions.
We categorize the existing traﬃc graphs into the same three levels used in
Section 3, namely, road-level, region-level and station-level graphs.
Road-level graphs. These include sensor graphs, road segment graphs, road
intersection graphs, and road lane graphs. Sensor graphs are based on traﬃc
sensor data (e.g.
the PeMS dataset) where each sensor is a node, and the
edges are road connections. The other three graphs are based on road networks
with the nodes formed by road segments, road intersections, and road lanes,
respectively. The real-world case and example of road-level graphs are shown
in Figure 2. In some cases, road-level graphs are the most suitable format, e.g.,
when vehicles can move only through pre-deﬁned roads.
Edge: Directional Connection
Traffic Network
(with traffic flow directions)
Road Sensor
Sensor Graph
Road Segment
Road Segment Graph
Road Intersection
Road Intersection Graph
Figure 2: The real-world case and example of road-level graphs. (a) The road network in
the Performance Measurement System (PeMS) where each sensor is a node. Source: http:
//pems.dot.ca.gov/. (b) The road-level graph examples. Adapted from Ye et al. .
Region-level graphs.
These include irregular region graphs, regular region
graphs, and OD graphs. In both irregular and regular region graphs the nodes are
regions of the city. Regular region graphs, which have grid-based partitioning,
are listed separately because of their natural connection to previous widely
used grid-based forecasting using CNNs, in which the grids may be seen as
image pixels. Irregular region graphs include all other partitioning approaches,
e.g. road based, or zip code based Ke et al. . In the OD graph, the
nodes are origin region - destination region pairs. In these graphs, the edges are
usually deﬁned with a spatial neighborhood or other similarities, e.g., functional
similarity derived from point-of-interests (PoI) data. The real-world case and
example of region-level graphs are shown in Figure 3.
Regular Regions
Node: Region
Edge: Spatial Neighborhood
The real-world case and example of region-level graphs.
(a) The zip codes of
Manhattan where each zip code zone is a node.
 
manhattan-zip-code-map. (b) The region-level graph example.
Station-level graphs. These include subway station graphs, bus station graphs,
bike station graphs, railway station graphs, car-sharing station graphs, parking
lot graphs, and parking block graphs. Usually, there are natural links between
stations that are used to deﬁne the edges, e.g.
subway or railway lines, or
the road network. The real-world case and example of station-level graphs are
shown in Figure 4.
A full list of the traﬃc graphs used in the surveyed studies is shown in
Sensor graphs and road segment graphs are most frequently used
because they are compatible with the available public datasets as discussed
Node: Subway Station
Edge: Transportation Connectivity
Figure 4: The real-world case and example of station-level graphs. (a) The Beijing subway
system where each subway station is a node. Source: 
cityguides/beijing/transportation/subway.htm. (b) The station-level graph example.
in Section 5.
It is noted that in some studies multiple graphs are used as
simultaneous inputs and then fused to improve the forecasting performance .
Table 2: Traﬃc graphs in the surveyed studies.
Relevant Studies
Sensor Graph
Road Links
Bai et al. ; Boukerche & Wang ; Cai et al. ; Cao et al. ; Chen et al. ;
Cirstea et al. ; Cui et al. ; Feng et al. ; Fukuda et al. ; Ge et al. ;
Guo & Yuan ; Guo et al. ; Huang et al. ; Jia et al. ; Kang et al. ; Kong et al.
 ; Lewenfus et al. ; Li & Zhu ; Li et al. ; Lu et al. ;
Lv et al. ; Maas & Bloem ; Mallick et al. ; Opolka et al. ; Oreshkin et al. ;
Pan et al. ; Park et al. ; Shleifer et al. ; Song et al. ; Sun et al. ;
Tang et al. ; Tian et al. ; Wang et al. ; Wei & Sheng ; Wu et al. ;
Xie et al. ; Xin et al. ; Xiong et al. ; Xu et al. ; Yang et al. ; Yin et al.
 ; Yu et al. ; Zhang et al. ; Zhang & Guo ; Zhang
et al. ; Zhao et al. ; Zheng et al. ; Zhou et al. 
Road Segment Graph
Intersections
Agafonov ; Bai et al. ; Chen et al. ; Cui et al. ; Dai et al. ; Diao et al.
 ; Fang et al. ; Fu et al. ; Guo et al. ; Guopeng et al. ; Han et al.
 ; Hasanzadeh et al. ; Hong et al. ; James ; Jepsen et al. ; Kim et al. ;
Lee & Rhee ; Liao et al. ; Liu et al. ; Lu et al. ; Lv et al. ; Pan
et al. ; Qu et al. ; Ramadan et al. ; Shin & Yoon ; Wang et al. ; Xie et al. ; Yu et al. ; Yu & Gu ; Yu et al. ; Zhang et al. ; Zhao et al. ; Zhu et al. 
Road Intersection Graph
Intersections
Bogaerts et al. ; Fang et al. ; James ; Lu et al. ; Qin et al. ; S´anchez et al. ;
Shao et al. ; Wei et al. ; Wu et al. ; Xu et al. ; Zhang et al. 
Road Lane Graph
Road Lanes
Wright et al. 
Irregular Region Graph
Virtual Edges
Bai et al. ; Bing et al. ; Chen et al. ; Davis et al. ; Du et al. ; Hu et al. ; Ke et al. ; Li & Axhausen ; Li & Moura ; Liu et al. ; Mohanty & Pozdnukhov
 ; Mohanty et al. ; Sun et al. ; Ye et al. ; Zhang et al. ; Zheng et al. ; Zhou
et al. 
Regular Region Graph
Virtual Edges
Davis et al. ; Geng et al. ; He & Shin ; Jin et al. ; Lee et al. ; Li et al.
 ; Pan et al. ; Pian & Wu ; Qiu et al. ; Shen et al. ; Shi et al. ; Wang et al.
 ; Wu et al. ; Xu & Li ; Xu et al. ; Yeghikyan et al. ; Zhang et al.
 ; Zhou et al. 
Virtual Edges
Ke et al. ; Wang et al. 
Subway Station Graph
Subway Lines
Fang et al. ; Han et al. ; Li et al. ; Liu et al. ; Ou et al. ; Ren &
Xie ; Ye et al. ; Zhang et al. ; Zhao et al. 
Bus Station Graph
Bus Stations
Fang et al. 
Bike Station Graph
Bike Stations
Road Links
Chai et al. ; Chen et al. ; Du et al. ; Guo et al. ; He & Shin ; Kim et al. ;
Lin et al. ; Qin et al. ; Wang et al. ; Xiao et al. ; Yoshida et al. 
Railway Station Graph
Railway Lines
He et al. ; Heglund et al. 
Car-sharing Station Graph
Car-sharing
Road Links
Luo et al. ; Zhu et al. 
Parking Lot Graph
Parking Lots
Road Links
Zhang et al. 
Parking Block Graph
Road Links
Yang et al. 
4.1.2. Adjacency Matrix Construction
Adjacency matrices are seen as the key to capturing spatial dependency in
traﬃc forecasting . While nodes may be ﬁxed by physical constraints, the user typically has control over the design of the adjacency matrix,
which can even be dynamically trained from continuously evolving data. We
extend the categories of adjacency matrices used in previous studies and divide them into four types, namely, road-based, distance-based,
similarity-based, and dynamic matrices.
Road-based Matrix. This type of adjacency matrix relates to the road network and includes connection matrices, transportation connectivity matrices,
and direction matrices. A connection matrix is a common way of representing
the connectivity between nodes. It has a binary format, with an element value
of 1 if connected and 0 otherwise. The transportation connectivity matrix is
used where two regions are geographically distant but conveniently reachable by
motorway, highway, or subway . It also includes cases where
the connection is measured by travel time between diﬀerent nodes, e.g. if a
vehicle can travel between two intersections in less than 5 minutes then there is
an edge between the two intersections . The less commonly
used direction matrix takes the angle between road links into consideration.
Distance-based Matrix.
This widely used matrix-type represents the spatial closeness between nodes. It contains two sub-types, namely, neighbor and
distance matrices. In neighbor matrices, the element values are determined by
whether the two regions share a common boundary (if connected the value is set
to 1, generally, or 1/4 for grids, and 0 otherwise). In distance-based matrices,
the element values are a function of geometrical distance between nodes. This
distance may be calculated in various ways, e.g. the driving distance between
two sensors, the shortest path length along the road , or the proximity between locations calculated by the random walk
with restart (RWR) algorithm . One ﬂaw of distance-based
matrices is that the fail to take into account the similarity of traﬃc states be-
tween long-distance nodes, and the constructed adjacency matrix is static in
most cases.
Similarity-based Matrix. This type of matrix is divided into two sub-types,
namely, traﬃc pattern and functional similarity matrices. Traﬃc pattern similarity matrices represent the correlations between traﬃc states, e.g. similarities
of ﬂow patterns, mutual dependencies between diﬀerent locations, and traﬃc demand correlation in diﬀerent regions. Functional similarity matrices represent,
for example, the distribution of diﬀerent types of PoIs in diﬀerent regions.
Dynamic Matrix. This type of matrix is used when no pre-deﬁned static
matrices are used. Many studies have demonstrated the advantages of using
dynamic matrices, instead of a pre-deﬁned adjacency matrix, for various traﬃc
forecasting problems.
A full list of the adjacency matrices applied in the surveyed studies is shown
in Table 3. Dynamic matrices are listed at the bottom of the table, with no
further subdivisions. The connection and distance matrices are the most frequently used types, because of their simple deﬁnition and representation of
spatial dependency.
Table 3: Adjacency matrices in the surveyed studies.
Adjacency Matrix
Relevant Studies
Connection Matrix
aij = 1 when nodes i and j
are connected and aij
Agafonov ; Bai et al. ; Bing et al. ; Cao et al. ; Chen et al. ; Cui et al.
 ; Davis et al. ; Fang et al. ; Guo & Yuan ; Guo et al. ; He et al.
 ; Heglund et al. ; Hong et al. ; Huang et al. ; James ; Li et al. ; Liu et al.
 ; Lu et al. ; Opolka et al. ; Ou et al. ; Qin et al. ; Qu et al. ;
S´anchez et al. ; Shao et al. ; Shen et al. ; Song et al. ; Sun et al. ; Wang et al.
 ; Wei et al. ; Wu et al. ; Xie et al. ; Xiong et al. ; Xu
et al. ; Xu & Li ; Yin et al. ; Yu et al. ; Yu & Gu ; Yu et al. ; Zhang
et al. ; Zhang & Guo ; Zhang et al. ; Zhao et al. ;
Zhou et al. ; Zhu et al. 
Transportation Connectivity
aij = 1 when one can travel
from node i to node j and
aij = 0 otherwise
Geng et al. ; Luo et al. ; Lv et al. ; Pan et al. ; Wright et al. ; Wu et al.
 ; Ye et al. 
Direction Matrix
aij = the angle between two
road segments
Lee & Rhee ; Shin & Yoon 
Neighbor Matrix
= 1 when nodes i and
j are neighbors and aij = 0
Geng et al. ; Hu et al. ; Ke et al. ; Lee et al. ; Shi et al. ; Wang et al.
 ; Yeghikyan et al. ; Yoshida et al. ; Zheng et al. 
Distance Matrix
some distance between nodes
Bogaerts et al. ; Boukerche & Wang ; Cai et al. ; Chai et al. ; Chen et al. ; Feng et al. ; Ge et al. ; Geng et al. ; Guo et al. ; He &
Shin ; Huang et al. ; Jia et al. ; Jin et al. ; Kang et al. ; Ke et al. ;
Kim et al. ; Lee & Rhee ; Li & Axhausen ; Li & Zhu ; Li et al. ; Lin et al. ; Lu et al. ; Luo et al. ; Mallick et al. ; Mohanty & Pozdnukhov
 ; Mohanty et al. ; Pan et al. ; Ren & Xie ; Shin & Yoon ; Shleifer et al.
 ; Song et al. ; Sun et al. ; Tian et al. ; Wang et al. ; Wei & Sheng ;
Xiao et al. ; Xie et al. ; Xin et al. ; Xu et al. ; Yang et al. ; Yu et al.
 ; Zhang et al. ; Zhao et al. ; Zheng et al. ; Zhou et al. ; Zhu
et al. 
Similarity
correlation
coefficient of historical traffic
states of nodes i and j
Bai et al. ; Chai et al. ; Chen et al. ; Dai et al. ; Han et al. ; He & Shin
 ; Jin et al. ; Ke et al. ; Kim et al. ; Lewenfus et al. ; Li & Axhausen ;
Li & Zhu ; Li et al. ; Lin et al. ; Liu et al. ; Lu et al. ; Lv et al. ; Ren &
Xie ; Sun et al. ; Wang et al. ; Xu et al. ; Yoshida et al. ; Zhou et al. 
Functional Similarity Matrix
aij = the correlation coefficient of POI distributions in
regions i and j
Ge et al. ; Geng et al. ; He & Shin ; Jin et al. ; Ke et al. ; Luo et al.
 ; Lv et al. ; Shi et al. ; Zhang et al. ; Zhu et al. 
Dynamic Matrix
Bai et al. ; Chen et al. ; Diao et al. ; Du et al. ; Fang et al. ; Fu et al. ;
Guo et al. ; Kong et al. ; Li & Axhausen ; Li et al. ; Li & Moura ; Li
et al. ; Maas & Bloem ; Peng et al. ; Shi et al. ; Tang et al. ; Wu et al.
 ; Ye et al. ; Yu et al. ; Zhang et al. ; Zhou et al. 
4.2. Graph Neural Networks
Previous neural networks, e.g.
fully-connected neural networks (FNNs),
CNNs, and RNNs, could only be applied to Euclidean data (i.e. images, text,
and videos). As a type of neural network which directly operates on a graph
structure, GNNs have the ability to capture complex relationships between objects and make inferences based on data described by graphs.
been proven eﬀective in various node-level, edge-level, and graph-level prediction
tasks . As mentioned in Section 2, GNNs are currently considered
the state-of-the-art techniques for traﬃc forecasting problems. GNNs can be
roughly divided into four types, namely, recurrent GNNs, convolutional GNNs,
graph autoencoders, and spatiotemporal GNNs . Because
traﬃc forecasting is a spatiotemporal problem, the GNNs used in this ﬁeld can
all be categorized as the spatiotemporal GNNs. However, certain components
of the other types of GNNs have also been applied in the surveyed traﬃc forecasting studies.
To give the mathematical formulation of GCN, we further introduce some
notations. Give a graph G = (V, E, A), N(vi) is deﬁned as the neighbor node set
of a single node vi. D is deﬁned as the degree matrix, of which each element is
Dii = ∥N(vi)∥. L = D −A is deﬁned as the Laplacian matrix of an undirected
graph and ˜L = IN −D−1
2 is deﬁned as the normalized Laplacian matrix,
where IN is the identity matrix with size N. Without considering the time step
index, the node feature matrix of a graph is simpliﬁed as X ∈RN×d, where N
is the node number and d is the dimension of the node feature vector as before.
The basic notations used in this survey is summarized in Table 4.
When extending the convolution operation from Euclidean data to non-
Euclidean data, the basic idea of GNNs is to learn a function mapping for a
node to aggregate its own features and the features of its neighbors to generate
a new representation. GCNs are spectral-based convolutional GNNs, in which
the graph convolutions are deﬁned by introducing ﬁlters from graph signal processing in the spectral domain, e.g., the Fourier domain. The graph Fourier
transform is ﬁrstly used to transform the graph signal to the spectral domain
Table 4: Basic notations used in this study.
Description
Adjacency matrix
Node feature matrix w/o time step index t
Node number
Node feature dimension
Neighbor node set of a single node vi
Degree matrix
Laplacian matrix
Normalized Laplacian matrix
Identity matrix with size N
and the inverse graph Fourier transform is further used to transform the result
after the convolution operation back. Several spectral-based GCNs are introduced in the literature. Spectral convoluted neural networking assumes that the ﬁlter is a set of learnable parameters and considers
graph signals with multiple channels. GNN introduces a
parameterization with smooth coeﬃcients and makes the spectral ﬁlters spatially localized. Chebyshev’s spectral CNN (ChebNet) 
leverages a truncated expansion in terms of Chebyshev polynomials up to Kth
order to approximate the diagonal matrix.
GCN is a ﬁrst-order approximation of ChebNet,
which approximates the ﬁlter using the Chebyshev polynomials of the diagonal
matrix of eigenvalues. To avoid overﬁtting, K = 1 is used in GCN. Formally,
the graph convolution operation ∗G in GCN is deﬁned as follows:
X∗G = W(IN + D−1
where W is a learnable weight matrix, i.e., the model parameters. While in
practice, the graph convolution operation is further developed in order to alleviate the potential gradient explosion problem as follows:
X∗G = W( ˜D−1
where ˜A = A + IN and ˜Dii = P
The alternative approach is spatial-based convolutional GNNs, in which the
graph convolutions are deﬁned by information propagation.
Diﬀusion graph
convolution (DGC) , message passing neural network
(MPNN) , GraphSAGE , and graph
attention network (GAT) all follow this approach. The
graph convolution is modeled as a diﬀusion process with a transition probability
from one node to a neighboring node in DGC. An equilibrium is expected to be
obtained after several rounds of information transition. The general framework
followed is a message passing network, which models the graph convolutions
as an information-passing process from one node to another connected node
directly. To alleviate the computation problems caused by a large number of
neighbors, sampling is used to obtain a ﬁxed number of neighbors in Graph-
SAGE. Lastly, without using a predetermined adjacency matrix, the attention
mechanism is used to learn the relative weights between two connected nodes
MPNN uses message passing functions to unify diﬀerent spatial-based variants. MPNN operates in two stages, namely, a message passing phase and a
readout phase. The message passing phase is deﬁned as follows:
M(t)(X(t−1)
where m(t)
vi is the message aggregated from the neighbors of node vi, M(t)(·) is
the aggregation function in the t-th iteration, X(t)
is the hidden state of node
vi in the t-th iteration, and eij is the edge feature vector between node vi and
The readout phase is deﬁned as follows:
= U(t)(X(t−1)
where U(t)(·) is the readout function in the t-th iteration.
In GAT , the attention mechanism is incorporated into the propagation step and the multi-head attention
mechanism is further utilized with the aim of stabilizing the learning process.
The speciﬁc operation is deﬁned as follows:
)W(t−1)X(t−1)
where ∥is the concatenation operation, σ is the activation method, αk(·) is the
k-th attention mechanism.
A general spatiotemporal GNN structure is shown in Figure 5(b), in which
GCN is used to capture the spatial dependency and 1D-CNN is used to capture the temporal dependency. Both GCN and 1D-CNN components can be
replaced with other structures for other spatiotemporal GNNs. A multilayer
perceptron (MLP) component is used to generate the desired output. As for
comparison, a two-layer GCN is also shown in Figure 5(a), in which only the
spatial dependency is concerned.
Spatiotemporal GNNs can be further categorized based on the approach used
to capture the temporal dependency in particular. Most of the relevant studies
in the literature can be split into two types, namely, RNN-based and CNNbased spatiotemporal GNNs . The RNN-based approach is
used in Bai et al. ; Bogaerts et al. ; Boukerche &
Wang ; Chai et al. ; Chen et al. ; Cirstea et al.
 ; Cui et al. ; Davis et al. ; Du et al. ; Fang
et al. ; Fu et al. ; Fukuda et al. ; Geng et al. ; Guo
et al. ; Guopeng et al. ; He et al. ; Hu et al.
 ; Huang et al. ; Jin et al. ; Kang et al. ;
Ke et al. ; Lewenfus et al. ; Li & Zhu ; Li et al. ; Liao et al. ; Lin et al. ; Liu et al. ;
Lu et al. ; Luo et al. ; Lv et al. ; Mallick et al.
 ; Mohanty & Pozdnukhov ; Mohanty et al. ; Pan et al.
 ; Peng et al. ; Pian & Wu ; Qiu et al. ; Qu et al.
 ; Ramadan et al. ; Shao et al. ; Shen et al. ; Shi et al.
 ; Sun et al. ; Wang et al. ;
Wei & Sheng ; Wright et al. ; Wu et al. ; Xiao et al.
 ; Xie et al. ; Xin et al. ; Xu et al. ; Xu & Li
Activation
Activation
Figure 5: A comparison between a two-layer GCN model and a typical spatiotemporal GNN
structure (1D-CNN+GCN as an example). Adapted from Wang et al. . (a) a two-layer
GCN model; (b) a typical spatiotemporal GNN structure.
 ; Yang et al. ; Ye et al. ; Yin et al. ; Yu et al.
 ; Zhang et al. ; Zhang & Guo ; Zhang
et al. ; Zhao et al. ; Zhou et al. ; Zhu et al. ; while the CNN-based approach is
used in Chen et al. ; Dai et al. ; Diao et al. ; Fang et al.
 ; Feng et al. ; Guo & Yuan ; Guo et al. ; Heglund et al.
 ; Hong et al. ; Kong et al. ; Lee & Rhee ; Li et al.
 ; Lu et al. ; Maas & Bloem ; Ou et al. ; Song et al.
 ; Sun et al. ; Tang et al. ; Tian et al. ; Wang et al.
 ; Wu et al. ; Xie et al. ; Xu et al. ; Yu
et al. ; Zhang et al. ; Zhao et al. ; Zheng et al.
 ; Zhou et al. .
With the recent expansion of relevant studies, we add two sub-types of spatiotemporal GNNs in this survey, namely, attention-based and FNN-based. Attention mechanism is ﬁrstly proposed to memorize long source sentences in
neural machine translation . Then it is used for temporal
forecasting problems. As a special case, Transformer is built entirely upon attention mechanisms, which makes it possible to access any part of a sequence
regardless of its distance to the target . The attention-based approaches are used in Bai
et al. ; Cai et al. ; Chen et al. ; Fang et al. ; Jin
et al. ; Li & Moura ; Park et al. ; Wang et al. ; Xie
et al. ; Zhang et al. ; Zheng et al. ; Zhou et al. ,
while the simpler FNN-based approach is used in Agafonov ; Cao et al.
 ; Chen et al. ; Ge et al. ; Geng et al. ; Guo
et al. ; Han et al. ; He & Shin ; Kim et al. ; Li
et al. ; Qin et al. ; Ren & Xie ; Song et al. ; Sun
et al. ; Wei et al. ; Yeghikyan et al. ; Yu et al. ;
Zhang et al. . Apart from using neural networks to capture temporal dependency, other techniques that have also been combined with
GNNs include autoregression , Markov processes , and Kalman ﬁlters .
Among diﬀerent approaches for temporal modeling, RNNs suﬀer from timeconsuming iterations and gradient vanishing or explosion problem with long
sequences. CNNs demonstrate their superiority in terms of simple structure,
parallel computing and stable gradients. As for the traﬃc problems, the spatial and temporal dependencies are closely intertwined in reality. For example,
it is argued that the historical observations in diﬀerent locations at diﬀerent
times have varying impacts on central region in the future .
Some eﬀorts are put to jointly modeling the potential interaction between spatial and temporal features and one promising direction is the incorporate of
the graph convolution operations into RNNs to capture spatial-temporal correlations . For example, the localized spatio-temporal
correlation information is extracted simultaneously with the adjacency matrix
of localized spatio-temporal graph in Song et al. , in which a localized
spatio-temporal graph that includes both temporal and spatial attributes is
constructed ﬁrst and a spatial-based GCN method is applied then.
Of the additional GNN components adopted in the surveyed studies, convolutional GNNs are the most popular, while recurrent GNN and Graph Auto-Encoder (GAE) are used less
frequently. We further categorize convolutional GNNs into the following ﬁve
types: (1) GCN , (2) DGC ,
(3) MPNN , (4) GraphSAGE , and
(5) GAT . These relevant graph neural networks are
listed chronologically in Figure 6. While diﬀerent GNNs can be used for traﬃc
forecasting, a general design pipeline is proposed in and
suggested for future studies as follows:
1. Find graph structure. As discussed in Section IV, diﬀerent traﬃc graphs
are available.
2. Specify graph type and scale. The graphs can be further classiﬁed into different types if needed, e.g., directed/undirected graphs, homogeneous/heterogeneous
graphs, static/dynamic graphs. For most cases in traﬃc forecasting, the
graphs of the same type are used in a single study. As for the graph scale,
the graphs in the traﬃc domain are not as large as those for the social
networks or academic networks with millions of nodes and edges.
3. Design loss function. The training setting usually follows the supervised
approach, which means the GNN-based models are ﬁrstly trained on a
training set with labels and then evaluated on a test set. The forecasting
task is usually designed as the node-level regression problem. Based on
these considerations, the proper loss function and evaluation metrics can
be chosen, e.g., root mean square error (RMSE), mean absolute error
(MAE) and mean absolute percentage error (MAPE).
4. Build model using computational modules. The GNNs discussed in this
section are exactly those which have already been used as computational
modules to build forecasting models in the surveyed studies.
Recurrent GNN 
GAE 
DGC 
GCN 
GraphSAGE 
MPNN 
GAT 
Figure 6: The relevant graph neural networks in this survey.
A full list of the GNN components used in the surveyed studies is shown in
Table 5. Currently, the most widely used GNN is the GCN. However, we also
notice a growing trend in the use of GAT in traﬃc forecasting.
During the process of customizing GNNs for traﬃc forecasting, some classical models stand out in the literature.
The most famous one is diﬀusion
convolutional recurrent neural network (DCRNN) , which uses
diﬀusion graph convolutional networks and RNN to learn the representations of
spatial dependencies and temporal relations. DCRNN was originally proposed
for traﬃc speed forecasting and is now widely used as a baseline. To create
the traﬃc graph, the adjacency matrix is deﬁned as the thresholded pairwise
road network distances. Compared with other graph convolutional models that
can only operate on undirected graphs, e.g., ChebNet, DCRNN introduces the
Table 5: GNNs in the surveyed studies.
Relevant Studies
Recurrent GNN
Lu et al. ; Wang et al. 
Opolka et al. ; Shen et al. ; Xu et al. 
Agafonov ; Bai et al. ; Bing et al. ; Bogaerts et al.
 ; Boukerche & Wang ; Cai et al. ; Cao et al. ; Chai et al.
 ; Chen et al. ; Cui et al. ; Dai et al. ;
Davis et al. ; Diao et al. ; Du et al. ; Fang et al. ;
Feng et al. ; Fu et al. ; Ge et al. ; Geng et al. ;
Guo et al. ; Guopeng et al. ; Han et al. ;
He & Shin ; He et al. ; Heglund et al. ; Hong et al. ; Hu et al.
 ; Huang et al. ; James ; Jepsen et al. ; Jia
et al. ; Jin et al. ; Ke et al. ; Kim et al. ; Lee & Rhee
 ; Lewenfus et al. ; Li & Axhausen ; Li et al. ; Li &
Zhu ; Li et al. ; Li & Moura ; Li et al. ;
Liao et al. ; Lin et al. ; Liu et al. ; Lu et al. ; Luo
et al. ; Lv et al. ; Maas & Bloem ; Mohanty & Pozdnukhov ;
Mohanty et al. ; Peng et al. ; Qin et al. ; Qiu et al. ; Qu
et al. ; Ramadan et al. ; Ren & Xie ; Shao et al. ; Shi et al.
 ; Song et al. ; Sun et al. ; Sun et al. ; Tang et al.
 ; Wang et al. ; Wu et al. ; Xiao et al. ;
Xie et al. ; Xin et al. ; Xiong et al. ; Xu et al. ; Yang
et al. ; Ye et al. ; Yeghikyan et al. ; Yoshida et al. ;
Yu et al. ; Yu & Gu ; Yu et al. ; Zhang et al.
 ; Zhao
et al. ; Zheng et al. ; Zhou et al. ; Zhu
et al. 
Chen et al. ; Fukuda et al. ; Kim et al. ; Li et al. ;
Mallick et al. ; Ou et al. ; Wang et al. ; Xie et al. ;
Zhou et al. 
Wang et al. ; Wei et al. ; Xu et al. 
Liu et al. 
Cirstea et al. ; Fang et al. ; Guo & Yuan ; He & Shin ;
Huang et al. ; Jin et al. ; Kang et al. ; Kong et al. ; Pan
et al. ; Park et al. ; Pian & Wu ; Song et al. ; Tang
et al. ; Tian et al. ; Wei & Sheng ; Wright et al. ; Wu
et al. ; Xie et al. ; Xu & Li ; Yang et al. ; Yin et al.
 ; Zhang et al. ; Zhang & Guo ; Zhang et al. ;
Zheng et al. 
diﬀusion convolution (DC) operation for directed graph and is more suitable for
transportation scenarios, which is deﬁned as follows:
O A)k) + θk,2 , in which a uniﬁed method for constructing an RNN
based on an arbitrary graph convolution operator is proposed, instead of the
single RNN model used in DCRNN.
Spatio-temporal graph convolutional network (STGCN) 
stacks multiple spatio-temporal convolution blocks and each block concatenate
two temporal convolution and one graph convolution layer. ChebNet is chosen as the graph convolution operator in STGCN, after a comparison with its
ﬁrst-order approximation.
The usage of temporal convolution layers instead
of RNNs for temporal modeling accelerates the training phase of STGCN. Attention based Spatio-temporal graph convolutional network (ASTGCN) further introduces two attention layers in STGCN to capture the
dynamic correlations in spatial dimension and temporal dimension, respectively.
Graph WaveNet constructs a self-adaptive matrix to uncover unseen graph structures automatically from the data and WaveNet, which
is based on causal convolutions, is used to learn temporal relations. However,
the self-adaptive matrix in Graph WaveNet is ﬁxed after training, which is unable to be adjusted dynamically with the data characteristics.
5. Open Data and Source Codes
In this section, we summarize the open data and source code used in the
surveyed papers. These open data are suitable for GNN-related studies with
graph structures discussed in Section IV, which can be used to formulate different forecasting problems in Section III. We also list the GNN-related code
resources for those who want to replicate the previous GNN-based solutions as
baselines in the follow-up studies.
5.1. Open Data
We categorize the data used in the surveyed studies into three major types,
namely, graph-related data, historical traﬃc data, and external data. Graph-
related data refer to those data which exhibit a graph structure in the traﬃc
domain, i.e., transportation network data. Historical traﬃc data refer to those
data which record the historical traﬃc states, usually in diﬀerent locations and
time points. We further categorize the historical traﬃc data into sub-types as
follows. External data refer to the factors that would aﬀect the traﬃc states,
i.e., weather data and calendar data. Some of these data can be used in the
graph-based modeling directly, while the others may require some pre-processing
steps before being Incorporated into GNN-based models.
Transportation Network Data. These data represent the underlying transportation infrastructure, e.g., road, subway, and bus networks. They can be
obtained from government transportation departments or extracted from online
map services, e.g., OpenStreetMap. Based on their topology structure, these
data can be used to build the graphs directly, e.g., the road segments or the
stations are nodes and the road intersections or subway links are the edges.
While this modeling approach is straightforward, the disadvantage is that only
static graphs can be built from transportation network data.
Traﬃc Sensor Data. Traﬃc sensors, e.g. loop detectors, are installed on
roads to collect traﬃc information, e.g., traﬃc volume or speed. This type of
data is widely used for traﬃc prediction, especially road traﬃc ﬂow and speed
prediction problems. For graph-based modeling, each sensor can be used as a
node, with road connections as the edges. One advantage of using traﬃc sensor
data for graph-based modeling is that the captured traﬃc information can be
used directly as the node attributes, with little pre-processing overhead. One
exception is that the sensors are prone to hardware faults, which causes the
missing data or data noise problems and requires corresponding pre-processing
techniques, e.g., data imputation and denoising methods. Another disadvantage
of using traﬃc sensor data for graph-based modeling is that the traﬃc sensors
can only be installed in a limited number of locations for a series of reasons,
e.g., installation cost. With this constraint, only the part of the road networks
with traﬃc sensors can be incorporated into a graph, while the uncovered areas
are neglected.
GPS Trajectory Data. Diﬀerent types of vehicles (e.g. taxis, buses, online
ride-hailing vehicles, and shared bikes) can be equipped with GPS receivers,
which record GPS coordinates in 2-60 second intervals. The trajectory data
calculated from these GPS coordinate samples can be matched to road networks
and further used to derive traﬃc ﬂow or speed. The advantage of using GPS
trajectory data for graph-based modeling is both the low expense to collect
GPS data with smartphones and the wider coverage with the massive number
of vehicles, compared with traﬃc sensor data. However, GPS trajectory data
contain no direct traﬃc information, which can be derived with corresponding
deﬁnitions though. The data quality problems also remain with GPS trajectory
data and more pre-processing steps are required, e.g., map matching.
Location-based Service Data. GPS function is also embedded in smartphones,
which can be used to collect various types of location-related data, e.g., check-in
data, point-of-interest data, and route navigation application data. The pros
and cons of using location-based service data are similar with GPS trajectory
data. And the diﬀerence is that location-based service data are often collected
in a crowd-sourced approach, with more data providers but potentially a lower
data quality.
Trip Record Data. These include departure and arrival dates/times, departure and arrival locations, and other trip information. Traﬃc speed and demand
can derived from trip record data from various sources, e.g., taxis, ride-hailing
services, buses, bikes, or even dock-less e-scooters used in He & Shin .
These data can be collected in public transportation systems with mature methods, for example, by AFC (Automatic Fare Collection) in the subway and bus
systems. Trip record data have the advantage of being capable of constructing
multiple graph-based problems, e.g., station-level traﬃc ﬂow and demand problems. They are also easier to collect in existing public transportation systems.
Traﬃc Report Data. This type of data is often used for abnormal cases,
e.g., anomaly report data used in Liu et al. and traﬃc accident report
data used in Zhang et al. ; Zhou et al. . Traﬃc report data are
less used in graph-based modeling because of their sparsity in both spatial and
temporal dimensions, compared with trip record data.
Multimedia Data. This type of data can be used as an additional input to
deep learning models or for verifying the traﬃc status indicated by other data
sources. Multimedia data used in the surveyed studies include the Baidu streetview images used in Qin et al. for traﬃc congestion, as well as satellite
imagery data , and video surveillance data . Multimedia data are also less seen in graph-based modeling because of
their higher requirement for data collection, transmission and storage, compared
with traﬃc sensor data with similar functionalities. It is also more diﬃcult to
extract precise traﬃc information, e.g., vehicle counts, from images or videos
through image processing and object detection techniques.
Simulated Traﬃc Data.
In addition to observed real-world datasets, microscopic traﬃc simulators are also used to build virtual training and testing
datasets for deep learning models. Examples in the surveyed studies include the
MATES Simulator used in Fukuda et al. and INTEGRATION software
used in Ramadan et al. . With many real-world datasets available, simulated traﬃc data are rarely used in GNN-based and more broader ML-based
traﬃc forecasting studies. Traﬃc simulations have the potential of modeling
unseen graphs though, e.g., evaluating a planned road topology.
Weather Data. Traﬃc states are highly aﬀected by the meteorological factors
including temperature, humidity, precipitation, barometer pressure, and wind
Calendar Data. This includes the information on weekends and holidays. Because traﬃc patterns vary signiﬁcantly between weekdays and weekends/holidays,
some studies consider these two cases separately. Both weather and calendar
data have been proven useful for traﬃc forecasting in the literature and should
not be neglected in graph-based modeling as external factors.
While present road network and weather data can be easily found on the
Internet, it is much more diﬃcult to source historical traﬃc data, both due to
data privacy concerns and the transmission and storage requirements of large
data volumes. In Table 6 we present a list of the open data resources used in the
surveyed studies. Most of these open data are already cleaned or preprocessed
and can be readily used for benchmarking and comparing the performance of
diﬀerent models in future work.
5.1.1. Traﬃc Sensor Data
The relevant open traﬃc sensor data are listed as follows.
METR-LA 2: This dataset contains traﬃc speed and volume collected from
the highway of the Los Angeles County road network, with 207 loop detectors. The samples are aggregated in 5-minute intervals. The most frequently
referenced time period for this dataset is from March 1st to June 30th, 2012.
Performance Measurement System (PeMS) Data 3: This dataset contains
raw detector data from over 18,000 vehicle detector stations on the freeway
system spanning all major metropolitan areas of California from 2001 to 2019,
collected with various sensors including inductive loops, side-ﬁre radar, and
magnetometers. The samples are captured every 30 seconds and aggregated in
5-minute intervals. Each data sample contains a timestamp, station ID, district,
freeway ID, direction of travel, total ﬂow, and average speed. Diﬀerent subsets
of PeMS data have been used in previous studies, for example:
• PeMS-BAY 4: This subset contains data from 325 sensors in the Bay Area
from January 1st to June 30th, 2017.
• PeMSD3: This subset uses 358 sensors in the North Central Area. The frequently referenced time period for this dataset is September 1st to November 30th, 2018.
• PeMSD4: This subset uses 307 sensors in the San Francisco Bay Area.
The frequently referenced time period for this dataset is January 1st to
February 28th, 2018.
2Download link: 
3 
4Download link: 
Table 6: Open data for traﬃc prediction problems.
Dataset Name
Relevant Studies
Bai et al. ; Boukerche & Wang ; Cai et al. ; Cao et al. ;
Chen et al. ; Cirstea et al. ; Cui et al. ; Feng et al. ;
Jia et al. ; Li & Zhu ; Li et al. ; Lu et al. ; Opolka et al.
 ; Oreshkin et al. ; Pan et al. ; Park et al. ; Shleifer
et al. ; Song et al. ; Tian et al. ; Wang et al. ; Wu et al.
 ; Xie et al. ; Xu et al. ; Yang et al. ; Yu et al.
 ; Zhang et al. ; Zhang & Guo ; Zhang et al. ; Zhou
et al. 
Mallick et al. 
Boukerche & Wang ; Cai et al. ; Cao et al. ; Chen et al. ; Cui et al. ; Feng et al. ; Guo & Yuan ; Li & Zhu ; Li
et al. ; Oreshkin et al. ; Pan et al. ; Park et al. ;
Shleifer et al. ; Song et al. ; Tian et al. ; Wang et al. ;
Wu et al. ; Xie et al. ; Xu et al. ; Yu et al. ;
Zhang & Guo ; Zhang et al. ; Zheng et al. ; Zhou et al. 
Cao et al. ; Chen et al. ; Li & Zhu ; Song et al. ; Wang
et al. 
Bai et al. ; Cao et al. ; Chen et al. ; Ge et al. ;
Guo et al. ; Huang et al. ; Li & Zhu ; Li et al. ; Song et al. ; Tang et al. ; Wang et al. ; Wei & Sheng
 ; Xin et al. ; Xu et al. ; Yin et al. ; Zhang et al. ;
Zhao et al. 
Cao et al. ; Chen et al. ; Ge et al. ; Huang et al. ;
Li & Zhu ; Song et al. ; Sun et al. ; Tang et al. ; Wang
et al. ; Xie et al. ; Xin et al. ; Xu et al. ; Yu et al. ; Zhang et al. ; Zhao et al. 
Bai et al. ; Cao et al. ; Chen et al. ; Guo et al. ;
Huang et al. ; Li & Zhu ; Li et al. ; Song et al. ; Wang
et al. ; Wei & Sheng ; Yin et al. ; Zhang et al. 
Seattle Loop
Cui et al. ; Lewenfus et al. ; Sun et al. 
Pan et al. 
Guo et al. ; Wang et al. ; Zhang et al. 
Bai et al. ; Wang et al. ; Zhang et al. 
Bai et al. ; Zhao et al. 
Hu et al. 
Davis et al. ; Du et al. ; Hu et al. ; Jin et al. ; Li & Axhausen
 ; Li & Moura ; Sun et al. ; Xu & Li ; Ye et al. ; Zhang
et al. ; Zheng et al. ; Zhou et al. 
Jin et al. ; Ke et al. 
DiDiChengdu
Bogaerts et al. ; Li et al. ; Qu et al. ; Wang et al. ;
Zhang et al. ; Zhou et al. 
DiDiTTIChengdu
Lu et al. 
Bogaerts et al. ; Qu et al. 
DiDiHaikou
Jin et al. ; Pian & Wu 
Sun et al. ; Wang et al. 
Bai et al. ; Chai et al. ; Du et al. ; Guo et al. ; He & Shin
 ; Lee et al. ; Lin et al. ; Sun et al. ; Wang et al. ; Ye et al. ; Zhang et al. 
BikeChicago
Chai et al. 
Liu et al. 
Liu et al. 
• PeMSD7: This subset uses 883 sensors in the Los Angeles Area.
frequently referenced time period for this dataset is May to June, 2012.
• PeMSD8: This subset uses 170 sensors in the San Bernardino Area. The
frequently referenced time period for this dataset is July to August, 2016.
Seattle Loop 5: This dataset was collected by inductive loop detectors deployed on four connected freeways (I-5, I-405, I-90, and SR-520) in the Seattle
area, from January 1st to 31st, 2015. It contains the traﬃc speed data from 323
detectors. The samples are aggregated in 5-minute intervals.
5.1.2. Taxi Data
The open taxi datasets used in the surveyed studies are listed as follows.
T-drive : This dataset contains a large number of taxicab
trajectories collected by 30,000 taxis in Beijing from February 1st to June 2nd,
SHSpeed (Shanghai Traﬃc Speed) 6: This dataset contains 10-minute traﬃc speed data, derived from raw taxi trajectory data, collected from 1 to 30 April 2015, for 156 urban road segments in the central area
of Shanghai, China.
TaxiBJ : This dataset contains inﬂow and outﬂow data
derived from GPS data in more than 34,000 taxicabs in Beijing from four time
intervals: (1) July 1st to October 30th, 2013; (2) March 1st to June 30th, 2014;
(3) March 1st to June 30th, 2015; and (4) November 1st, 2015 to April 10th,
2016. The Beijing city map is divided into 32 × 32 grids and the time interval
of the ﬂow data is 30 minutes.
TaxiSZ 7: This dataset is derived from taxi trajectories
in Shenzhen from January 1st to 31st, 2015. It contains the traﬃc speed on 156
major roads of the Luohu District every 15 minutes.
TaxiCD 8: This dataset contains 1.4 billion GPS records from 14,864 taxis
collected from August 3rd to 30th, 2014 in Chengdu, China. Each GPS record
5Download link: 
6Download link: 
7Download link: 
8 
consists of a taxi ID, latitude, longitude, an indicator of whether the taxi is
occupied, and a timestamp.
TaxiNYC9: The taxi trip records in New York starting from 2009, in both yellow and green taxis. Each trip record contains pick-up and drop-oﬀdates/times,
pick-up and drop-oﬀlocations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts.
5.1.3. Ride-hailing Data
The open ride-hailing data used in the surveyed studies are listed as follows.
UberNYC 10: This dataset comes from Uber, which is one of the largest
online ride-hailing companies in the USA, and is provided by the NYC Taxi
& Limousine Commission (TLC). It contains data from over 4.5 million Uber
pickups in New York City from April to September 2014, and 14.3 million more
Uber pickups from January to June 2015.
Didi GAIA Open Data 11: This open data plan is supported by Didi Chuxing,
which is one of the largest online ride-hailing companies in China.
• DiDiChengdu: This dataset contains the trajectories of DiDi Express and
DiDi Premier drivers within Chengdu, China. The data contains trips
from October to November 2016.
• DiDiTTIChengdu: This dataset represents the DiDi Travel Time Index
Data in Chengdu, China in the year of 2018, which contains the average
speed of major roads every 10 minutes.
• DiDiXi’an: This dataset contains the trajectories of DiDi Express and
DiDi Premier drivers within Xi’an, China. The data contains trips from
October to November 2016.
• DiDiHaikou: The dataset contains DiDi Express and DiDi Premier orders from May 1st to October 31st, 2017 in the city of Haikou, China,
9 
10 
11 
including the coordinates of origins and destinations, pickup and drop-oﬀ
timestamps, as well as other information.
5.1.4. Bike Data
The open bike data used in the surveyed studies are listed as follows.
BikeNYC 12: This dataset is from the NYC Bike System, which contains 416
stations. The frequently referenced time period for this dataset is from 1st July,
2013 to 31th December, 2016.
BikeDC 13: This dataset is from the Washington D.C. Bike System, which
contains 472 stations. Each record contains trip duration, start and end station
IDs, and start and end times.
BikeChicago 14: This dataset is from the Divvy System Data in Chicago,
from 2015 to 2020.
5.1.5. Subway Data
The subway data referenced in the surveyed studies are listed as follows.
SHMetro 15: This dataset is derived from 811.8 million
transaction records of the Shanghai metro system collected from July 1st to
September 30th, 2016. It contains 288 metro stations and 958 physical edges.
The inﬂow and outﬂow of each station are provided in 15 minute intervals.
HZMetro 16: This dataset is similar to SHMetro, from
the metro system in Hangzhou, China, in January 2019. It contains 80 metro
stations and 248 physical edges, and the aggregation time length is also 15
5.2. Open Source Codes
Several open source frameworks for implementing general deep learning models, most of which are built with the Python programming language, can be
12 
13 
14 
15Download link: 
16Download link: 
accessed online, e.g. TensorFlow 17, Keras 18, PyTorch 19, and MXNet 20. Additional Python libraries designed for implementing GNNs are available. These
include DGL 21, pytorch geometric 22, and Graph Nets 23.
Many authors have also released open-source implementations of their proposed models. The open source projects for traﬃc ﬂow, traﬃc speed, traﬃc
demand, and other problems are summarized in Tables 7,
9, and 10, respectively. In these open source projects, TensorFlow and PyTorch are the two
frameworks that are used most frequently.
5.3. State-of-the-art Performance
It is known that diﬀerent works use diﬀerent datasets and it is very hard
to assess the relative performance of diﬀerent state-of-the-art models . Even for those studies using the same dataset, diﬀerent subsets may be used.
Diﬀerent preprocessing techniques, e.g., the missing data imputation method, and diﬀerent evaluation settings, e.g., the training/validation/test subset split ratio, also cause incomparable results. Considering these diﬃculties, we only summarize those comparable results for the most
frequently used datasets from the surveyed studies in this part.
Some commonly used evaluation metrics, namely, RMSE, MAE and MAPE,
are deﬁned as follows:
• RMSE(y, ˆy) =
i=1 (yi −ˆyi)2;
• MAE(y, ˆy) =
i=1 |yi −ˆyi|;
• MAPE(y, ˆy) =
17 
18 
19 
20 
21 
22 
23 
Table 7: Open source projects for traﬃc ﬂow related problems.
Zheng et al. 
TensorFlow
Road Traffic Speed
 
Bai et al. 
Road Traffic Flow
 
Song et al. 
Road Traffic Flow
 
Tang et al. 
TensorFlow
Road Traffic Flow
 
Wang et al. 
MXNet, PyTorch
Road Traffic Flow
 
Guo et al. 
Road Traffic Speed
 
Li & Zhu 
Road Traffic Speed
 
Tian et al. 
PyTorch, DGL
Road Traffic Flow
 
Xiong et al. 
TensorFlow
Road OD Flow
 
Peng et al. 
Road Station-level Subway
Station-level
 
Qiu et al. 
Regional Taxi Flow
 
Yeghikyan et al. 
Regional OD Taxi Flow
 
Mobility-Flows-Neural-Networks
Zhang et al. 
Station-level
Passenger Flow
 
Zhang et al. 
Station-level
Passenger Flow
 
Liu et al. 
Station-level
Passenger Flow
 
Ye et al. 
Station-level
Passenger Flow
 
Pan et al. 
MXNet, DGL
Road Traffic Speed
 
Guo et al. 
Road Traffic Flow
 
Guo et al. 
Road Traffic Flow
 
Wang et al. 
Road Traffic Flow
 
Yu et al. 
TensorFlow
Road Traffic Flow
 
Li et al. 
Station-level
Passenger Flow
 
Chai et al. 
TensorFlow
 
where y denotes the true values, ˆy denotes the predicted values, and M is the
number of values to predict. A lower RMSE or MAE value indicates a better
prediction performance. The summary for the state-of-the-art performance is
shown in Table 11, with all or some of the above evaluation metrics and best
values in bold. The default prediction time period is 60 minutes in Table 11
unless otherwise speciﬁed. Some classical baselines are also listed for comparison
if available, e.g., DCRNN , STGCN and Graph
WaveNet . Interested readers are recommended to check the
experimental details in relevant studies.
Table 8: Open source projects for traﬃc speed related problems.
Road Traffic Speed
 
Bai et al. 
TensorFlow
Road Traffic Speed
 
Yang et al. 
TensorFlow
Road Traffic Speed
 
Wu et al. 
Road Traffic Speed
 
TensorFlow
Road Traffic Speed
 
Road Traffic Speed
 
Lu et al. 
Road Traffic Speed
 
TensorFlow, Keras
Road Traffic Speed
 
forecasting
Shen et al. 
Road Travel Time
 
Hong et al. 
TensorFlow
Time of Arrival
 
Wu et al. 
Road Traffic Speed
 
Road Traffic Speed
 
Zhao et al. 
TensorFlow
Road Traffic Speed
 
Cui et al. 
TensorFlow
Road Traffic Speed
 
 
Road Traffic Speed
 
relational-fusion-networks
Li et al. 
TensorFlow
Road Traffic Speed
 
Li et al. 
Road Traffic Speed
 
Road Traffic Speed
 
Liao et al. 
TensorFlow
Road Traffic Speed
 
Mohanty & Pozdnukhov
TensorFlow
Traffic Congestion
 
Dynamic-Congestion-Prediction
Table 9: Open source projects for traﬃc demand related problems.
Hu et al. 
TensorFlow
Taxi Demand
 
Davis et al. 
TensorFlow, PyTorch
Taxi Demand
 
Ye et al. 
Taxi Demand, Bike Demand
 
Lee et al. 
TensorFlow, Keras
Ride-hailing
 
Ke et al. 
Taxi Demand
 
Table 10: Open source projects for other problems.
Zhou et al. 
TensorFlow
Traffic Accident
 
Yu et al. 
PyTorch, DGL
Traffic Accident
 
Zhang et al. 
PyTorch, DGL
Parking Availability
 
prediction-Pytorch
Wang et al. 
TensorFlow
Transportation
Resilience
 
Wright et al. 
TensorFlow, Keras
Lane Occupancy
 
Table 11: State-of-the-art performance for traﬃc prediction problems.
Relevant Studies
ST-UNet 
Graph WaveNet
SLCNN 
Traffic Transformer 
STFGNN 
SLCNN 
Graph WaveNet
GMAN 
Traffic Transformer 
STFGNN 
Graph WaveNet
STFGNN 
Graph WaveNet
AGCRN 
STFGNN 
Graph WaveNet
STFGNN 
Graph WaveNet
STFGNN 
AGCRN 
Seattle Loop
GLT-GCRNN 
Graph WaveNet
T-GCN 
AST-GCN 
A3T-GCN 
TaxiNYC (30 min)
Graph WaveNet
CCRNN 
BikeNYC (30 min)
Graph WaveNet
CCRNN 
Since the relevant studies of applying GNNs for traﬃc forecasting are growing everyday, the results listed in this part are not guaranteed to be the latest
ones and the readers are recommended to follow our Github repository to track
latest results.
6. Challenges and Future Directions
In this section, we discuss general challenges for traﬃc prediction problems
as well as speciﬁc new challenges when GNNs are involved. While GNNs achieve
a better forecasting performance, they are not the panacea. Some existing challenges from the border topic of traﬃc forecasting remain unsolved in current
graph-based studies. Based on these challenges, we discuss possible future directions as well as early attempts in these directions.
Some of these future
directions are inspired from the border traﬃc forecasting research and remain
insightful for the graph-based modeling approach. We would also highlight the
special opportunities with GNNs.
6.1. Challenges
6.1.1. Heterogeneous Data
Traﬃc prediction problems involve both spatiotemporal data and external
factors, e.g., weather and calendar information. Heterogeneous data fusion is
a challenge that is not limited to the traﬃc domain. GNNs have enabled signiﬁcant progress by taking the underlying graph structures into consideration.
However, some challenges remain; for example, geographically close nodes may
not be the most inﬂuential, both for CNN-based and GNN-based approaches.
Another special challenge for GNNs is that the underlying graph information
may not be correct or up to date. For example, the road topology data of Open-
StreetMap, an online map services, are collected in a crowd-sourced approach,
which may be inaccurate or lagged behind the real road network. The spatial
dependency relationship extracted by GNNs with these inaccurate data may
decrease the forecasting accuracy.
Data quality concerns present an additional challenge with problems such
as missing data, sparse data and noise potentially compromising forecasting
results. Most of the surveyed models are only evaluated with processed highquality datasets. A few studies do, however, take data quality related problems
into consideration, e.g., using the Kalman ﬁlter to deal with the sensor data
bias and noise , inﬁlling missing data with moving average
ﬁlters or linear interpolation . Missing data problem could be more common in GNNs, with the
potential missing phenomena happening with historical traﬃc data or underlying graph information, e.g., GCNs are proposed to ﬁll data gaps in missing OD
ﬂow problems .
Traﬃc anomalies (e.g., congestion) are an important external factor that may
aﬀect prediction accuracy and it has been proven that under congested traﬃc
conditions a deep neural network may not perform as well as under normal traﬃc
conditions . However, it remains a challenge to
collect enough anomaly data to train deep learning models (including GNNs)
in both normal and anomalous situations. The same concern applies for social
events, public holidays, etc.
Challenges also exist for data privacy in the transportation domain.
discussed in Section 5.1, many open data are collected from individual mobile
devices in a crowd sourcing approach. The data administrator must guarantee
the privacy of individuals who contribute their personal traﬃc data, as the basis
for encouraging a further contribution. Diﬀerent techniques may be used, e.g.,
privacy-preserving data publishing techniques and privacy-aware data structures
without personal identities.
6.1.2. Multi-task Performance
For the public service operation of ITSs, a multi-task framework is necessary to incorporate all the traﬃc information and predict the demand of multiple
transportation modes simultaneously. For example, knowledge adaption is proposed to adapt the relevant knowledge from an information-intensive source to
information-sparse sources for demand prediction . Related
challenges lie in data format incompatibilities as well as the inherent diﬀerences
in spatial or temporal patterns. While some of the surveyed models can be used
for multiple tasks, e.g., traﬃc ﬂow and traﬃc speed prediction on the same road
segment, most can only be trained for a single task at one time.
Multi-task forecasting is a bigger challenge in graph-based modeling because
diﬀerent tasks may use diﬀerent graph structures, e.g., road-level and stationlevel problems use diﬀerent graphs and thus are diﬃcult to be solved with a
single GNN model. Some eﬀorts that have been made in GNN-based models for
multi-task prediction include taxi departure ﬂow and arrival ﬂow , region-ﬂow and transition-ﬂow , crowd ﬂows, and
OD of the ﬂows . However, most of the existing attempts
are based on the same graph with multiple outputs generated by feed forward
Nonetheless, GNN-based multi-task prediction for diﬀerent types of
traﬃc forecasting problems is a research direction requiring signiﬁcant further
development, especially those requiring multiple graph structures.
6.1.3. Practical Implementation
A number of challenges prevent the practical implementation of the models
developed in the surveyed studies in city-scale ITSs.
First, there is signiﬁcant bias introduced by the small amount of data considered in the existing GNN-based studies which, in most cases, spans less than
one year. The proposed solutions are therefore not necessarily applicable to
diﬀerent time periods or diﬀerent places. If longer traﬃc data are to be used in
GNNs, the corresponding change of the underlying traﬃc infrastructures should
be recorded and updated, which increases both the expense and diﬃculty of the
associated data collection process in practice.
A second challenge is the computation scalability of GNNs. To avoid the
huge computation requirements of the large-scale real-world traﬃc network
graphs, only a subset of the nodes and edges are typically considered.
example, most studies only use a subset of the PeMS dataset when considering
the road traﬃc ﬂow or speed problems.
Their results can therefore only be
applied to the selected subsets. Graph partitioning and parallel computing infrastructures have been proposed for solving this problem. The traﬃc speed and
ﬂow of the entire PeMS dataset with 11,160 traﬃc sensor locations are predicted
simultaneously in Mallick et al. , using a graph-partitioning method that
decomposes a large highway network into smaller networks and trains a single
DCRNN model on a cluster with graphics processing units (GPUs). However,
increased modeling power can only improve the state-of-the-art results with narrow performance margins, compared to statistical and machine learning models
with less complex structures and computational requirements.
A third challenge is presented by changes in the transportation networks
and infrastructure, which are essential to build the graphs in GNNs. The realworld network graphs change when road segments or bus lines are added or
removed. Points-of-interest in a city also change when new facilities are built.
Static graph formulations are not enough for handling these situations. Some
eﬀorts have been made to solve this problem with promising results. For example, a dynamic Laplacian matrix estimator is proposed to ﬁnd the change
of Laplacian matrix, according to changes in spatial dependencies hidden in
the traﬃc data , and a Data Adaptive Graph Generation
(DAGG) module is proposed to infer the inter-dependencies between diﬀerent
traﬃc series automatically, without using pre-deﬁned graphs based on spatial
connections .
6.1.4. Model Interpretation
The challenge of model interpretation is a point of criticism for all “blackbox” machine learning or deep learning models, and traﬃc forecasting tasks
are no exception . While there
have been remarkable progresses for visualizing and explaining other deep neural
network structures, e.g., CNNs, the development of post-processing techniques
to explain the predictions made by GNNs is still in an early phase and the application of
these techniques to the traﬃc forecasting domain has not yet been addressed.
Compared with other similar forecasting problems in other domains, lack
of model interpretation may be a more severe problem in the transportation
domain, when complex data types and representations of heterogeneous traﬃc
data make it more challenging to design an interpretable deep learning model,
compared with other data formats, e.g., images and text. While some eﬀorts
have been made to incorporate the state space model to increase the model
interpretation for traﬃc forecasting , this problem has not fully
solved, especially for GNN-based models.
6.2. Future Directions
6.2.1. Centralized Data Repository
A centralized data repository for GNN-based traﬃc forecasting resources
would facilitate objective comparison of the performance of diﬀerent models
and be an invaluable contribution to the ﬁeld. This future direction is proposed
for the challenge of heterogeneous data as well as the data quality problem.
Another unique feature of this repository could be the inclusion of graph-related
data, which have not be provided directly in previous traﬃc forecasting studies.
Some criteria for building such data repositories, e.g. a uniﬁed data format, tracking of dataset versions, public code and ranked results, and suﬃcient
record lengths (longer than a year ideally), have been discussed in previous
surveys .
Compiling a centralized and standardized
data repository is particularly challenging for GNN-based models where natural
graphs are collected and stored in a variety of data formats (e.g. Esri Shapeﬁle
and OSM XML used by Openstreetmap are used for digital maps in the GIS
community) and various diﬀerent similarity graphs can be constructed from the
same traﬃc data in diﬀerent models.
Some previous attempts in this direction have been made in the machine
learning community, e.g. setting benchmarks for several traﬃc prediction tasks
in Papers With Code 24, and in data science competitions, e.g., the Traﬃc4cast
competition series 25. However, the realization of a centralized data repository
remains an open challenge.
A centralized data repository is also the basis for benchmarking traﬃc pre-
24 
25 
diction, which is previously discussed in Section 5.3.
With more and more
GNN-based models being proposed, it becomes even more diﬃcult to compare
diﬀerent models and validate the eﬀectiveness of new traﬃc forecasting methods without a considerable eﬀort, when a standardized benchmark dataset and
consistent experimental settings have not been established yet. The most close
one is the PeMS dataset, but it covers the road-level case only and more eﬀorts
are still needed, especially for the remaining cases.
6.2.2. Traﬃc Graph Design
While various graphs have been constructed in the surveyed studies as discussed in Section 4.1 and have been proven successful to some extent, most of
them are natural graphs based on a real-world transportation system, e.g. the
road network or subway system, as the current development status. And most
of the graphs used are static, instead of dynamic ones. One speciﬁc direction
that is not fully considered before is the design of transportation knowledge
As an important tool for knowledge integration, knowledge graph is
a complex relational network that consists of concepts, entities, entity relations and attributes . The transportation knowledge graph
helps to leverage the traﬃc semantic information to improve the forecasting
performance. And the challenge is to extract the hidden transportation domain
knowledge from multi-source and heterogeneous traﬃc data.
6.2.3. Combination with Other Techniques
GNNs may be combined with other advanced techniques to overcome some
of their inherent challenges and achieve better performance.
Data Augmentation. Data augmentation has been proven eﬀective for boosting the performance of deep learning models, e.g. in image classiﬁcation tasks
and time series prediction tasks. Data augmentation is proposed for the challenge of the possible forecasting bias introduced by the small amount of available
data. However, due to the complex structure of graphs, it is more challenging
to apply data augmentation techniques to GNNs. Recently, data augmentation
for GNNs has proven helpful in semi-supervised node classiﬁcation tasks . However, it remains a question whether data augmentation may
be eﬀective in traﬃc forecasting GNN applications.
Transfer Learning. Transfer learning utilizes knowledge or models trained
for one task to solve related tasks, especially those with limited data. In the
image classiﬁcation ﬁeld, pre-trained deep learning models from the ImageNet
or MS COCO datasets are widely used in other problems. In traﬃc prediction
problems, where a lack of historical data is a frequent problem, transfer learning
is a possible solution. For GNNs, transfer learning can be used from a graph
with more historical traﬃc data for the model training process to another graph
with less available data. Transfer learning can also be used for the challenge
caused by the changes in the transportation networks and infrastructure, when
new stations or regions have not accumulated enough historical traﬃc data to
train a GNN model. A novel transfer learning approach for DCRNN is proposed
in Mallick et al. , so that a model trained on data-rich regions of highway
network can be used to predict traﬃc on unseen regions of the highway network.
The authors demonstrated the eﬃcacy of model transferability between the San
Francisco and Los Angeles regions using diﬀerent parts of the California road
network from the PeMS.
Meta-learning. Meta-learning, or learning how to learn, has recently become
a potential learning paradigm that can absorb information from a task and
eﬀectively generalize it to an unseen task. Meta-learning is proposed for the
challenge of GNN-based multi-task prediction, especially those involving mutiple graphs. There are diﬀerent types of meta learning methods and some of them
are combined with graph structures for describing relationships between tasks
or data samples . Based on a deep
meta learning method called network weight generation, ST-MetaNet+ is proposed in Pan et al. , which leverages the meta knowledge extracted from
geo-graph attributes and dynamic traﬃc context learned from traﬃc states to
generate the parameter weights in graph attention networks and RNNs, so that
the inherent relationships between diverse types of spatiotemporal correlations
and geo-graph attributes can be captured.
Generative Adversarial Network (GAN) . GAN is
a machine learning framework that has two components, namely, a generator,
which learns to generate plausible data, and a discriminator, which learns to
distinguish the generator’s fake data from real data. After training to a state
of Nash equilibrium, the generator may generate undistinguished data, which
helps to expand the training data size for many problems, including GNN-based
traﬃc forecasting. GAN is proposed for the challenges caused by the small data
amount used in previous studies or the changes in the transportation networks
and infrastructure when not enough historical traﬃc data are available. In Xu
et al. , the road network is used directly as the graph, in which the
nodes are road state detectors and the edges are built based on their adjacent
links. DeepWalk is used to embed the graph and the road traﬃc state sensor
information is transferred into a low-dimensional space. Then, the Wasserstein
GAN (WGAN) is used to train the traﬃc state data distribution and generate predicted results. Both public traﬃc ﬂow (i.e., Caltrans
PeMSD7) and traﬃc speed (i.e., METR-LA) datasets are used for evaluation,
and the results demonstrate the eﬀectiveness of the GAN-based solution when
used in graph-based modeling.
Automated Machine Learning (AutoML). The application of machine learning requires considerable manual intervention in various aspects of the process,
including feature extraction, model selection, and parameter adjustment. AutoML automatically learns the important steps related to features, models, optimization, and evaluation, so that machine learning models can be applied
without manual intervention. AutoML would help to improve the implementation of machine learning models, including GNNs. AutoML is proposed for
the challenge for computational requirements in graph-based modeling, in which
case the hyper parameter tuning for GNNs can be more eﬃcient with state-ofthe-art AutoML techniques. An early attempt to combine AutoML with GNNs
for traﬃc prediction problems is an Auto-STGCN algorithm, proposed in Wang
et al. . This algorithm searches the parameter space for STGCN models
quickly based on reinforcement learning and generates optimal models automatically for speciﬁc scenarios.
Bayesian Network. Most of the existing studies aim for deterministic models that make mean predictions.
However, some traﬃc applications rely on
uncertainty estimates for the future situations. To tackle this gap, the Bayesian
network, which is a type of probabilistic graphical model using Bayesian inference for probability computations, is a promising solution. The combination of
GNNs with Bayesian networks is proposed for the challenge of GNN model interpretation. With probabilistic predictions, uncertainty estimates are generated
for the future situations, especially the chance of extreme traﬃc states. A similar alternative is Quantile Regression, which estimates the quantile function of
a distribution at chosen points, combined with Graph WaveNet for uncertainty
estimates .
6.2.4. Applications in Real-World ITS Systems
Last but not the least, most of the surveyed GNN-based studies are only
based on the simulations with historical traﬃc data, without being validated or
deployed in real-world ITS systems. However, there are a number of potential
applications, especially for GNN-based models with the better forecasting performance. To name a few potential cases, the GNN-based forecasting model can
be used for traﬃc light control in signalized intersections, when each intersection
is modeled as a node in the graph and the corresponding traﬃc ﬂow forecasting
result can be used to design the traﬃc light control strategy. Another example
is the application in map service and navigation applications, in which each
road segment is modeled as a node in the graph and the corresponding traﬃc
speed and travel time forecasting result can be used to calculate the estimated
time of arrival. A third example is the application in online ride-hailing service
providers, e.g., Uber and Lyft, in which each region is modeled as a node and
the corresponding ride-hailing demand forecasting can be used to design a more
proﬁtable vehicle dispatching and scheduling system. Inspired by these potential application scenarios, there are a lot of potential research opportunities for
researchers from both the academia and the industry.
7. Conclusion
In this paper, a comprehensive review of the application of GNNs for traﬃc
forecasting is presented. Three levels of traﬃc problems and graphs are summarized, namely, road-level, region-level and station-level. The usages of recurrent
GNNs, convolutional GNNs and graph autoencoders are discussed. We also give
the latest collection of open dataset and code resource for this topic. Challenges
and future directions are further pointed out for the follow-up research.