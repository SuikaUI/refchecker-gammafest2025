Detection of Traffic Congestion and Incidents from GPS
Trace Analysis
Eleonora D’Andrea and Francesco Marcelloni (corresponding author)
Dipartimento di Ingegneria dell’Informazione
University of Pisa
Largo Lucio Lazzarino 1, 56122 Pisa, Italy
{ , }
Eleonora D’Andrea, Ph.D.
Tel.: +39 050 2217467
Fax: +39 050 2217600
Email: 
Address: Dipartimento di Ingegneria dell’Informazione, University of Pisa, Largo Lucio Lazzarino 1, 56122 Pisa, Italy
Corresponding author:
Prof. Francesco Marcelloni
Tel.: +39 050 2217678
Fax: +39 050 2217600
Email: 
Address: Dipartimento di Ingegneria dell’Informazione, University of Pisa, Largo Lucio Lazzarino 1, 56122 Pisa, Italy
This paper presents an expert system for detecting traffic congestion and incidents from real-time GPS data collected from
GPS trackers or drivers’ smartphones. First, GPS traces are pre-processed and placed in the road map. Then, the system
assigns to each road segment of the map a traffic state based on the speeds of the vehicles. Finally, it sends to the users traffic
alerts based on a spatiotemporal analysis of the classified segments. Each traffic alert contains the affected area, a traffic state
(e.g., incident, slowed traffic, blocked traffic), and the estimated velocity of vehicles in the area. The proposed system is
intended to be a valuable support tool in traffic management for municipalities and citizens. The information produced by the
system can be successfully employed to adopt actions for improving the city mobility, e.g., regulate vehicular traffic, or can
be exploited by the users, who may spontaneously decide to modify their path in order to avoid the traffic jam. The
elaboration performed by the expert system is independent of the context (urban o non-urban) and may be directly employed
in several city road networks with almost no change of the system parameters, and without the need for a learning process or
historical data. The experimental analysis was performed using a combination of simulated GPS data and real GPS data from
the city of Pisa. The results on incidents show a detection rate of 91.6%, and an average detection time lower than 7 minutes.
Regarding congestion, we show how the system is able to recognize different levels of congestion depending on different
Keywords: Expert systems, GPS, incident detection, traffic congestion detection, urban mobility simulation.
Funding: This work is partially supported by the “SMARTY” project funded by “Programma Operativo Regionale (POR) 2007-2013”
- objective “Competitività regionale e occupazione” of the Tuscany Region”, and the project “Metodologie e Tecnologie per lo Sviluppo di
Servizi Informatici Innovativi per le Smart Cities” funded by “Progetti di Ricerca di Ateneo - PRA 2015” of the University of Pisa.
1. Introduction
Intelligent Transportation Systems (ITSs) are nowadays attracting growing attention due to the increasing number of
vehicles (mainly private cars) causing frequent traffic congestions, bottlenecks and incidents. An ITS is an infrastructure
which, by integrating ICTs (Information and Communication Technologies) with transport networks, vehicles and users,
allows improving safety and management of transport networks. ITSs provide, e.g., real-time information about weather,
traffic congestion and regulation, and/or plan efficient (e.g., shortest, fast driving, less polluting) routes 
 . A challenging issue in ITSs is to distinguish an
incident from a traffic congestion situation. An incident is defined in as “an
unexpected event that temporarily disrupts the traffic flow on a segment of a roadway”. An Incident Detection System (IDS)
represents a part of the ITSs, which has received significant attention in the last years. IDSs are designed to detect, by means
of several technologies, incidents, or unexpected situations causing traffic congestions and bottlenecks in order to plan
appropriate alternatives . An accurate and early detection of incidents becomes of
the utmost importance in traffic management .
Mainly, two types of ITS have been proposed. The first type is the most frequently used and exploits data collected from
fixed sensors placed in the road, such as closed-circuit cameras, video recognition cameras, infrared sensors, inductive loop
sensors, RFID sensors . The second type is based on sensor
technology within the vehicle (e.g., Global Positioning System (GPS), acceleration sensors, crash sensors, airbag activation
detection) and allows obtaining a greater amount of information than the first type . Indeed, fixed sensors placed in the road collect data related to the total volume of traffic on a certain road, while
mobile sensors collect data belonging to the trajectory of the single car , which leaves a trace, i.e., a
sequence of positions recorded in exact time instants. A GPS trace is a sequence of GPS points, each of which contains
location information coordinates (latitude and longitude), recording timestamp, and instantaneous velocity. Nowadays, thanks
to the growing number of GPS trackers installed in vehicles and to the widespread use of mobile devices (e.g., smartphones,
tablets) equipped with GPS receivers, we are able to collect directly and easily traces from vehicles. The use of GPS trackers
and mobile devices as sensor probes has several advantages. First, we can exploit the existing communication infrastructure
and the rapid spread of mobile devices with integrated GPS sensor. Second, the use of mobile devices as sensor probes is
independent of the device and the communication service provider . Third, we can overcome the main
drawbacks of traditional monitoring systems (e.g., fixed sensors), namely, limited coverage of the road network, and high
installation and maintenance costs .
In this paper we present an ITS able to detect in real-time traffic congestions and incidents from the analysis of GPS traces
belonging to moving vehicles. The proposed system exploits data mining (on spatiotemporal data) and expert system
technologies in order to detect the intensity of traffic congestion on segments of the road network, where an event (i.e., an
incident) is causing traffic difficulties. The proposed system is intended to be a valuable support tool in traffic management
for municipalities and citizens. Traces collected from vehicles moving in the city are analyzed in real-time by means of an
expert system, without the need for a learning process or historical data. The elaboration performed by the expert system is
independent of the context (urban o non-urban) and may be directly employed in several city road networks with almost no
change of the system parameters. The information produced by the system can be successfully employed to adopt actions for
improving the city mobility. In fact, the possibility of monitoring real-time events in the city road network may allow
municipalities and police to, e.g., regulate vehicular traffic in order to divert vehicles from the incident location, act on traffic
lights and speed limits, alert emergency services, adjust the demand and capacity of the road network, and dynamically
provide route information. Further, the information provided by the system may be useful also for the user, who once
registered to the system, receives alert notifications about traffic congestions or incidents and may spontaneously decide to
modify her/his path in order to avoid the traffic jam. For all the above reasons, the system may arise in the context of ITSs as
a simple (low-cost and low-complexity) yet effective model.
In the following, we highlight the possible challenges in building and using the proposed system, along with possible ways
to face them:
the first challenge regards the difficulty of obtaining GPS data from users moving in the city due to privacy
issues. However, recently the use of GPS trackers and GPS-equipped mobile devices (e.g., smartphones, tablets)
has dramatically grown, and, in a near future, GPS data should be more easily available, taking appropriate
actions aimed at respecting the users’ privacy. In particular, GPS trackers in vehicles include also black-boxes
installed by insurance companies. In U.S., about 96% of new cars are black-box equipped and, since September 1,
2014, every new vehicle must have one black-box installed . In Italy, about 3 millions of
black-boxes were installed in vehicles in 2014 , and this value is growing so much that the use of
black-boxes could become mandatory by 2017. Thus, collecting GPS data from black-boxes will not be a problem
in a near future. In addition, since the proposed ITS is supposed to be available to registered users (e.g., by means
of a smartphone app), GPS traces can also be collected directly from users, in exchange for receiving traffic alerts.
In fact, on registration, the user accepts the privacy policy associated with the service, according to which the
user’s GPS position is used only anonymously for the aim of the service;
ii) the second challenge is the capability to effectively distinguish an incident from a traffic congestion event.
Indeed, if the incident resolves in a very short time, the system may not be able to correctly detect the incident
event, since the incident itself can be considered not actually relevant for the impact on the city mobility. The
system, in this case, will detect and indicate instead a traffic congestion event. This is an effective way to face this
challenge. Indeed, the users will be notified in any case that a traffic bottleneck is occurring, allowing them, e.g.,
to modify their planned route to avoid it. Anyway, our system, by checking specific incident-related conditions
(as described in Section 4) is able to detect 91.6% of the incidents simulated with different time durations, and
takes into account the urban scenario, more challenging than the non-urban scenario ;
iii) the third challenge regards the scalability of the system: the bigger the size of the monitored city road network,
the higher the number of road segments to take into account in the elaboration. To cope with this challenge, the
system, designed and developed from the ground, has been implemented as a service of a wider service-oriented
platform in the context of the SMARTY project . The platform is built on a Service
Oriented Architecture (SOA), which allows exploiting two important peculiarities, i.e., scalability of the service
(e.g., by using a dedicated data elaboration server for each geographic area), and easy integration with other ITS
services (e.g., smart parking, weather information, bike sharing). Further, the scalability and availability of our
system are guaranteed by using a cloud computing architecture and different instances of the service for any
specific geographic area. The subdivision in geographic areas is mainly based on the size of the area, and on the
number of road segments in the area. Further it is dynamically adjusted based on the level of vehicles’ activity in
the area. In this way, the service is able to guarantee the fulfilment of minimum Quality of Service (QoS)
requirements, e.g., response time, availability, capacity. The instances of the services, by synchronizing and
communicating with each other, produce as output the traffic notifications, sent to the users. The users need only
to register to the service for receiving notifications.
To simulate traffic conditions as close as possible to reality, the GPS traces employed in the experiments were generated
exploiting the traffic simulator SUMO (Simulation of Urban Mobility) , based on a set of real-world
GPS traces collected from smartphones (or other tracking devices) belonging to people moving by car.
The remainder of this paper is organized as follows. Sections 2 and 3 discuss, respectively, related work and road network
representations. Section 4 presents the proposed system for incident and traffic congestion detection from GPS trace analysis.
Section 5 describes the generation of the GPS trace dataset employed in the experiments. In Section 6 the experimental
results are discussed. Lastly, Section 7 draws some concluding remark and future work.
2. Related Work
In the literature several types of algorithms for detecting incidents and traffic conditions in ITS systems exist, e.g.,
prediction algorithms, statistical methods, model-based identification algorithms, traffic flow models, computational
intelligence techniques, and rule-based expert systems . Moreover, some
approaches use only real-time collected data, while other approaches also need a historical database to build the model. In the
following we provide a brief description of the most relevant works existing in the literature, which propose methods for
incident detection and traffic monitoring based on GPS traces.
In , Liu et al. present a mobility-based clustering algorithm that uses some vehicles as sensor probes for
establishing the level of crowdedness of vehicles in nearby areas (spots) of the city. In , Li et al. propose a
density-based algorithm (FlowScan) to study the traffic flow on the road network and identify densely congested routes,
through a clustering of the road segments having similar traffic density. In ., Bacon et al. exploit real-time
traffic data coming from fixed and mobile sensors (buses are used as mobile sensor probes) to evaluate, using statistical
techniques, the level of traffic congestion in the city, and to provide citizens with traffic information. In , Kamran at al. use real-time GPS data obtained from vehicles to detect incidents. They divide roads into segments
whose size is set based on the type of road and on weather conditions. The segments presenting an abnormal traffic condition,
i.e., average traveling speed significantly lower than normal speed, are identified and further split into smaller segments with
the aim of isolating the potential incident area. If necessary, vehicles in the segment are analyzed individually in order to
identify abnormal behavior. The authors in detect blocked or congested road segments by using
information from GPS-equipped vehicles, and by considering a road congested if the average speed of the vehicles is below
10 km/h. The IDS proposed by Basnayake collects real-time GPS data from probe vehicles moving on a
road network subdivided into segments (with each segment being the part of road between two road intersections) in order to
detect incidents by analyzing travel time of segments and acceleration noise of vehicles through statistical techniques. In
 , Yoon et al. detect traffic conditions from GPS data, by employing speed and temporal features referred
to the segments identified on the road network; they can characterize unique traffic patterns on each road and identify traffic
states on a segment-by-segment basis. In , a traffic monitoring system for detecting incidents on highways by
means of dual-loop road sensors and GPS-equipped vehicles is presented. In , a neural network-based
model is trained on GPS data collected from inductive loop sensors in a 5.8 km city-bound area. In 
the authors adapt freeway incident detection algorithms to the urban scenario. They simulate incidents during rush hours, and
use traffic volume and traffic occupancy, as inputs to a support vector machine model.
GPS traces can be employed also to model or predict traffic conditions. In , the authors use the
historical data of one month collected from GPS sensors onboard 5000 taxis to construct a model of traffic density in order to
model and predict traffic conditions, and estimate the effects of emissions on air quality. The city is decomposed into disjoint
areas (segments) and the traffic density is computed for each segment. In , the authors employ
Markov chains and artificial neural networks for the prediction of road traffic conditions using data related to weather
conditions and road characteristics. In , the authors construct a Markov model to estimate future traffic
conditions and travel times of the user’s path, using both historical and real-time GPS data collected from taxi vehicles, along
with weather and driver behavior information. In , the authors propose a Gaussian
Process Dynamic Congestion Model to capture the dynamics and the uncertainty of traffic conditions, with the aim of
simplifying the adaptive routing of a fleet of cooperative vehicles. They exploit GPS traces collected along one year from
With respect to the current research aimed at detecting traffic congestion and incidents, the characteristics of our system can
be summarized as follows. We propose a system able to detect traffic congestion and incidents in real-time. The system
basically: 1) places the GPS traces in the road map, 2) assigns to each road segment of the map a traffic state based on the
speed of the vehicles travelling the segment and on the values of a few thresholds, and 3) sends traffic alerts based on a
spatiotemporal analysis of the classified segments. We can identify the following strengths of our system:
unlike the majority of works in the same field, it does not exploit statistical or clustering techniques. Thus it needs
neither historical data (e.g., GPS traces, weather information, typical traffic condition), nor a learning timeconsuming process. In fact, it exploits real-time GPS traces data consisting of position, velocity, and time, without
the need for any other vehicular data such as acceleration noise and travel times;
unlike other ITSs, it is not based on the use of sensor probe vehicles (e.g., taxis, buses) or fixed sensors (e.g.,
inductive loop sensors, video recognition cameras) deployed in the road network. In fact, the GPS traces can be
directly collected from smartphones or GPS trackers, resulting in a very low-cost framework in terms of
installation and maintenance costs, and elaboration of data;
regarding the representation of the city road network, it employs a digital map in which the length of each road
segment is not fixed (as in similar papers in the literature), but adapted to the particular conformation of the road,
on the basis of the segment’s speed limit;
it is developed as an event-driven infrastructure, built on an SOA architecture, and it allows directly providing
citizens with accurate and reliable information on traffic conditions. Using this architecture, it is able to directly
notify traffic events to the drivers registered to the system, by means of a traffic alert service, without the need for
them to access official news websites or radio traffic news channels. In addition, the SOA architecture allows
building scalable services (e.g., by using a dedicated data elaboration server for each geographic area), and
integrating new services (e.g., with other ITS services). In addition, the proposed system could be a valuable tool
for traffic and city administrations to regulate traffic and vehicular mobility. Moreover, it could be used together
with traffic sensors (e.g., loop detectors, cameras, infrared cameras) and ITS monitoring systems for the detection
of traffic difficulties. In this way, our system provides a low-cost wide coverage of the road network, especially in
those areas (e.g., urban and suburban) where traditional traffic sensors are missing, or less travelled by probe
Conversely, possible weaknesses are:
the inaccuracy (or the loss) of the GPS signal may lead to wrong positioning of vehicles in the case of very close
roads (e.g., an error of about 10 meters may dislocate the vehicle on the wrong road segment or even on the wrong
road). However, if the inaccuracy regards only one trace, the system is not seriously impacted, as we take into
account the total volume of moving vehicles, not the single vehicle. On the other hand, this is a problem affecting
all the ITSs that employ GPS traces for detecting incidents;
a considerable delay in detecting an incident in case of a low number of vehicles, which transmit their GPS
coordinates, in the segment. Indeed, with the aim of reducing the influence of personal drivers’ behaviors (for
instance, a driver stopping the vehicle for looking at the view) on the decision about the traffic state of a segment,
we associate a level of traffic congestion with a segment only if the number of vehicles in the segment is higher
than a pre-fixed threshold. Obviously, if the number of vehicles moving in the segment is very low, a long time
will be needed to detect the incident: the incident, however, will be detected by the system in any case as soon as a
sufficient number of vehicles accumulate in the road segment. Systems, which employ other types of data sources
in addition to GPS traces, could reduce this problem, but at a higher cost. We have to consider, however, that, as
the number of involved vehicles is low, the impact will not be dramatic for the urban mobility;
the choice of the thresholds used to determine the segment states can affect the performance of the system. In our
simulations, however, we have experimented with different traffic conditions and the chosen thresholds have
always proved to be effective. On the other hand, in general, the majority of the systems proposed in the literature
for incident detection need to adequately tune some parameter, e.g., during the learning process, or the model
calibration.
3. Road Network Representation
One of the most interesting problems when using GPS traces is the positioning of the vehicles on the map. The positioning
can be carried out in the continuous space if the vehicle has a precise absolute position corresponding to its GPS coordinates,
or in the discrete space if the vehicle belongs to a spot (e.g., areas, cell-grid areas, segments) identified on the map. The
continuous space positioning has two drawbacks: i) it is not suited for the aggregate analysis (of areas or road of a city),
typical of traffic monitoring systems, and ii) it may cause faults due to GPS accuracy errors.
In the discrete space positioning, the city is split into disjoint areas and a membership function of GPS traces is defined for
each area. The most used approach for the decomposition of a city according to the discrete space positioning exploits the use of digital maps. A digital map is a graph (V, E) composed of a set of vertices V, defined as GPS
positions, and a set of edges E, each one defined in terms of length, bearing and endpoint vertices. With this structure, a road
is described as the conjunction of consecutive edges (also called segments) identified in correspondence with intersections, or
changes in bearing of the road. The main disadvantages of this approach are the difficulty in finding a digital map and the
lack of some information in the map, such as the number of lanes of the roads, the orientation of the edges and the width of
the roads. For these reasons, several approaches have proposed to directly exploit GPS traces for the manual or automatic
construction of digital maps , or for the enrichment of existing digital maps
with useful information .
In this paper we refer to the discrete space positioning, as it represents the best compromise between accuracy and
simplicity. Moreover, by making this choice we are able to exploit existing digital maps, such as the ones provided by Open
Street Map (OSM) , the well-known open-source framework for digital maps. Furthermore, the
partition of roads into segments allows distinguishing different segments of road in the same area. In fact, each road segment
has its typical traffic flow and thus should be considered individually. One approach for the identification of segments on the
roads, frequently used in the literature and in existing digital maps, is to consider as endpoint vertices not only intersections
and changes in bearing, but also traffic lights, pedestrian crossings, and other relevant points. In this way, urban areas are
described by many segments of small size, while suburban areas are described by a small number of big segments . In the analysis of the extracted data collected from GPS sensors, it is important to consider both the spatial and the
temporal components of information. For example, detecting a low average speed of vehicles on a segment of road does not
necessarily indicate traffic congestion on the road, e.g., in the case of an urban road, the low speed may be due to the
presence of traffic lights and pedestrian crossings . On the contrary, in the case of a highway road, the low
average speed may indicate traffic congestion.
As said above, we exploited the digital map provided by OSM which combines data recorded by GPS devices, satellite
images, and other manually entered information to create a rich-information digital map . OSM is an open source, free-license project aimed at collecting geographic data to create freely available maps
of the world with free content. The map of an area (region, province, city, etc.) is implemented as an oriented graph
characterized by two main elements: nodes and ways. Nodes represent important positions on the map identified by GPS
coordinates (latitude and longitude), corresponding to Points Of Interest (POIs), intersections, points of change of direction
on the same road (curves), etc. Thus, between two nodes a linear segment is defined. Each node is associated with an id and
with a list of tags that describes the characteristics of the node. The number of nodes of a road depends on the type of road,
and on the number of relevant points on the road (typically urban roads are described by a higher number of nodes with
respect to highways). Ways are ordered sets of nodes constituting open or closed polygons, representing possible paths from
the start node to the end node. The nodes of a way are listed consecutively and this allows identifying stretches of
consecutive roads.
4. The Proposed System
The proposed system for detecting traffic congestion and incidents is based on an expert system and is characterized by a
service-oriented and event-driven architecture, composed of three main modules (Fig. 1).
Fig. 1. System architecture for traffic congestion detection and incident detection from GPS trace analysis.
The “Pre-Processing” module is devoted to match each GPS trace point (expressed in terms of latitude and longitude)
with the corresponding OSM map segment. This operation is not straightforward, as it presents two problems. First, it may
require a routing algorithm to perform the completion of incomplete routes in case of jumps/gaps or missing GPS points
 . Indeed, connectivity problems (e.g., a tunnel crossing) and accuracy errors caused by an
anomalous driving behavior or resulting from the sampling may cause a physical jump between two known positions, i.e.
segments of the map. The use of routing algorithms is needed to rebuild the vehicle route and remove the jumps. Second, an
algorithm is needed to define the travel directions of the vehicles in each segment. In fact, a point of a GPS trace indicates
only the position of the vehicle on a certain road, but not its travel direction. However, in the case of a unidirectional road,
the travel direction is provided by the OSM map itself, but in case of a bidirectional road at least two consecutive GPS points
of the same trace are required to identify the travel direction of the vehicle.
The second module “Segment Traffic Classification” aims to analyze the GPS traces belonging to the segments built on
city streets, and to assign a traffic state to each segment on the basis of considerations made on the traveling velocity of the
vehicles, the number of vehicles in the segment, and the traffic code speed limit on that segment. Obviously the mere traffic
state classification of the segments is not sufficient to understand the real traffic condition on the whole road, which depends
on spatial and temporal information. Thus, in the third module “Traffic Alert Notification”, the traffic states previously found
on the segments are analyzed in order to decide whether to send traffic alert messages related to a given area based on a
further spatial and temporal analysis.
More precisely, after the pre-processing phase, each segment of the map is observed for a time interval T sampled every f
Pre-Processing
- establish vehicles
travel direction,
- perform routing,
- match GPS
traces on digital
Segment Trafﬁc
Classiﬁcation
- assign a trafﬁc
label to each
Trafﬁc Alert
Notiﬁcation
- perform a spatiotemporal analysis
for trafﬁc and
incident detection
GPS traces
(latitude, longintude,
velocity, timestamp,
vehicle id )
Digital map
Trafﬁc alert
(magnitude,
estimated velocity,
congested segments)
seconds. At each sampling time in T, the traces of the vehicles, which have travelled the segment, are collected, processed,
and saved. The procedure is then repeated on each segment of the map in the following time interval, and so on. We denote
with Tt the t-th time interval analyzed. As in other papers , we set f = 30
seconds. This value represents a good trade-off between precision and complexity. Further, when the GPS traces are collected
by using a smartphone, we cannot adopt too short sampling times because these would consume too fast the battery. The
value of T is set to 2 minutes. We verified that this value allows us to have a reliable estimate of the average speed in the
segment when the number of vehicles is low. On the other hand, when the traffic is high, this value permits to manage the
corresponding complexity.
In the following, we explain in greater detail the steps performed in each module. First, we introduce some key concepts. A
segment of the map is denoted with sj, where j = 1, ..., S, is the index of the segment, and S is the total number of segments in
the map. A segment sj is characterized by the maximum speed 
 allowed on the portion of road corresponding to the
segment and the distance dj between the extremes of the segment. A vehicle is uniquely identified with a vehicle identifier. In
a generic segment sj, a vehicle is denoted as mj,i,t, where i = 1, ..., Mj,t, is the index of the vehicle within the segment sj, and
Mj,t is the number of vehicles travelling sj in Tt.
A GPS trace belonging to a vehicle is described by: i) the unique identifier of the vehicle, and ii) a set of GPS positions
(latitude, longitude) of the vehicle along with the corresponding timestamps and the corresponding speeds
h = 1, .., Qj,i,t is the index of the trace left from vehicle mj,i,t, and Qj,i,t is the number of traces left by vehicle mj,i,t during the
observed time interval Tt. Each vehicle in the segment can leave one or more traces depending on the speed of the vehicle and
the level of traffic congestion of the segment (e.g., in the case of blocked traffic, a vehicle travelling the segment will be
detected multiple times).
The analysis of the GPS traces is performed by using an OSM map appropriately modified. As mentioned above, segments
in OSM are identified by changes of curvature of the road, pedestrian crossings, intersections, traffic lights, etc. However, in
some cases the segments identified by pairs of nodes in OSM may be too long for the purposes of the proposed system; thus,
the digital map should be modified by splitting longer segments. This additional segmentation allows locating more precisely
a traffic event that happens on the road. Segments are split into sub-segments if the following condition holds:
where α = 3.6 is the conversion factor from km/h to m/s, f is the sampling period, c is a parameter and dj is the distance
between the extremes of the segment. The choice of the value of c affects, on the one side, the precision and, on the other
side, the complexity of the system. Indeed, the rules used in the expert system for determining the traffic state are based on
the knowledge of the direction of each vehicle. The direction of a vehicle is determined by comparing two subsequent
vehicle’s GPS positions. The direction is easily determined if the two subsequent positions lie on adjacent segments of the
map. On the contrary, determining the direction of the vehicle may be quite complex when the two subsequent positions lie
on not adjacent segments. In this case, a routing algorithm has to be executed for computing the direction. Low values of c
increase the precision by generating small segments. However, small segments may cause several jumps in the route,
especially when a low sampling frequency is used, and thus may require a more frequent execution of the routing algorithm.
Similarly, high values of c reduce the need for the routing algorithm, but result in an insufficient accuracy, due to longer
By considering the Italian speed limits on highways, non-urban and urban roads, which are 130 km/h, 90 km/h and 50
km/h, respectively, we decided to set c = 6. With this value of c, we have that the maximum segment length is 180, 125 and
69.44 meters for, respectively, highways, non-urban and urban roads. These values represent actually a good compromise
between precision and computational cost. On the other hand, other works in the literature employ fixed road segments with
lengths from 200 to 500 meters ) by focusing on highways. In our work, however, the length of
each segment is not fixed, but it adapts to the particular conformation of the road, since it depends on the speed limit on that
If the condition in Eq. (1) is met, the segment is split into two sub-segments identified by a new node centered between the
two original nodes. The condition in Eq. (1) is then checked on the two new sub-segments, and so on. At the end of this step,
we obtained an optimized digital map with segments having an average size of about 50 m, as we focused primarily on urban
4.1 Pre-Processing
The “Pre-Processing” module processes each GPS trace with the aim of obtaining: i) the segments corresponding to the
GPS positions that form the trace, ii) the travel directions of the vehicles in each segment (i.e., forward and backward), and
iii) the segments needed to reconstruct the vehicle route in case of jumps or missing GPS points.
The mapping of GPS traces on the segments of the map consists of defining a membership function of GPS traces to
segments or nodes of the map. A GPS trace is mapped, first, to the closest node of the map and then to the closest segment
(whose exact position is identified in terms of the GPS coordinates of its midpoint) among those segments, which arise from
the node. The mapping is performed by exploiting the GraphHopper API for Java . For
each GPS point of a trace, after detecting the corresponding segment in the map, the travel direction of the vehicle in the
segment is identified according to the following procedure:
if the GPS point is the first one coming from a given vehicle, and:
1.1. if the point belongs to a unidirectional segment, the travel direction is directly provided by the road network
map (see Fig. 2 (a));
1.2. if the point belongs to a bidirectional segment, we are not able to determine the travel direction. Thus, the
vehicle is temporarily placed in both the lists corresponding to the travel directions forward and backward for
that segment. The lists will be correctly updated afterwards by removing the vehicle from the incorrect travel
direction list (see Fig. 2 (b));
if the GPS point comes from a vehicle already moving in the map, we can determine the travel direction in the
corresponding segment (current segment), since we know the previous position of the vehicle, corresponding to the
previous segment in the trace. More precisely,
2.1. if the current segment is unidirectional, the travel direction is directly provided by the road network map (see
Fig. 2 (a));
2.2. if the current segment is bidirectional and the previous segment is unidirectional, the travel direction can be
inferred from the road network map;
2.3. if the current segment is bidirectional and the previous segment is bidirectional, it is necessary to check its
adjacency with the previous segment of the trace:
if current and previous segments are adjacent, the travel direction can be determined by exploiting a
feature of the OSM graph: If the adjacency regards the base node (i.e., the first extreme node) of the
current segment, the travel direction is forward, otherwise it is backward (see Fig. 3);
if current and previous segments are not adjacent, a gap exists and an appropriate routing algorithm
is needed to rebuild the missing path between the previous and the current segments. The routing
algorithm implemented is a modified version of the one provided by the GraphHopper API
 , and it generates the best approximate path between two nonadjacent segments, by giving priority to main streets in the map, and by choosing the shortest path
according to the classical Dijkstra’s algorithm for route planning . Once that a possible path has been built, the operations described in item 2.3.1 are repeated
first on the previous segment, and then backwards on the other segments of the approximate path
(see Fig. 4).
Any time the travel direction of the current segment in a trace is correctly determined, the travel direction of the previous
segment of the trace, if remained undetermined, can be updated by removing the vehicle from the incorrect travel direction
Fig. 2. Determining the travel direction on a segment for a new vehicle in the map: (a) unidirectional segment, (b) bidirectional segment.
Fig. 3. Determining the travel direction on a bidirectional segment for a vehicle already moving in the map, when current and previous segments are
adjacent: (a) forward travel direction, (b) backward travel direction.
Fig. 4. Determining the travel direction on a bidirectional segment for a vehicle already moving in the map, when current and previous segments are not
adjacent, by means of a routing algorithm. (a) before routing algorithm, (b) after routing algorithm.
4.2 Segment Traffic Classification
The aim of this module consists in analyzing the GPS traces collected in the current time interval Tt and in assigning to
each segment sj of the map a traffic state TSt in the set {absent, flowing, slowed, very slowed, and blocked}, and a
representative actual speed ,
 on the basis of the number and the speeds of the vehicles passing in the segment in Tt.
The choice of the possible traffic states has been performed according to the classification employed in well-known traffic
information systems, such as Google Traffic , and “Autostrade per l’Italia” , the main traffic news network in Italy. The two systems employ four traffic states (whose meaning matches with our
states flowing, slowed, very slowed, and blocked), to which we added the additional state absent. The state absent means that
there is no traffic event, and also indicates a total absence of vehicles. This state is used by our system during incident
detection.
More in detail, Google Traffic takes into account four traffic states: i) normal speed of traffic (green
color), ii) slower traffic conditions (yellow color), iii) congestion (red color), and iv) blocked or stop-and-go traffic (dark red
color). This classification matches with our classification, as follows: Google green color corresponds to our flowing state,
Google yellow color corresponds to our slowed state, Google red color corresponds to our very slowed state, and Google dark
red color corresponds to our blocked state. Similarly, the web site “Autostrade per l’Italia” 
provides an almost similar classification of four traffic states: i) no relevant traffic event (green color), ii) slowdowns (yellow
color), iii) criticalities (red color), and iv) blocked traffic (black color). Also in this case, the traffic states i), ii), iii), and iv)
correspond to our flowing, slowed, very slowed, and blocked traffic states, respectively.
The rules of the expert system are adapted to the number of vehicles that have crossed the considered segment in Tt in order
to avoid false alarms and manage potential outliers. The following two sections explain the rules of the Segment Traffic
Classification module, first in the case of an insufficient number of vehicles passing in the segment in Tt, and then in the case
of a sufficient number of vehicles. We have to consider separately the case of an insufficient number of vehicles because we
cannot be sure that the information extracted by analyzing these vehicles is dependent on the behaviors of the drivers or on
the traffic conditions. More precisely, if the number Mj,t of vehicles crossing the segment in Tt is below a certain threshold,
i.e., Mj,t < Mmin, special considerations have to be made in order to avoid an incorrect analysis.
We wish to point out that the system does not need a GPS trace from each vehicle moving in the road network in a given
time interval. Obviously, the higher the number of traces, the more reliable the classification. However, a minimum number
of vehicles is necessary for guaranteeing to distinguish a real traffic event from an anomalous driving behavior of an isolated
driver. We are confident that this minimum number is easily reachable today thanks to the growing number of GPS-equipped
vehicles (e.g., mounting insurance companies’ black-boxes, GPS navigation devices, and overall GPS-equipped
smartphones). Obviously, an incident or traffic event cannot be detected if there is not a sufficient number of vehicles
involved, since it would not produce traffic congestion.
1) Insufficient Number of Vehicles in Segment sj
If Mj,t < Mmin, the system can assign only two traffic states to the segment sj, namely absent and flowing, as follows:
1. if there are no traces, i.e., Mj,t = 0, the traffic state TSt is set to absent;
2. if 0 < Mj,t < Mmin, the traffic state TSt is set to flowing.
We consider just two traffic states because the number of vehicles is too low to reliably detect a traffic condition. Actually,
the traffic might be blocked, slowed or very slowed, but we cannot reliably infer these states because of the low number of
vehicles. On the other hand, a possible event causing traffic congestion will be detected whenever a sufficient amount of
vehicles will accumulate in the segment.
2) Sufficient Number of Vehicles in Segment sj
If Mj,t ≥ Mmin, the system is able to assign the traffic states flowing, slowed, very slowed, and blocked. First, the average
speed of each vehicle mj,i,t in the considered segment sj is calculated as:
̅,, = ∑
Next, the speeds ̅,, of the vehicles are ordered, and the median value ,, of these speeds is computed. By using the
median value, we reduce the effect of outliers.
Then, the module assigns the representative speed ,
 = ,, to the segment, and, by evaluating ,,, sets the traffic
state TSt as follows:
1. if ,, ≥!
, with P1 a percentage of the maximum speed 
 allowed on the segment sj, then the traffic
state is set to flowing;
2. if !" ∙
 ≤,, ≤!
, with P2 < P1 a percentage of the maximum speed 
 allowed on the segment sj, a
further analysis is required because the traffic condition is not clearly defined. Thus, the behavior of the majority
of vehicles is taken into account. The traffic state of the segment is set to:
flowing, if the majority of vehicles have an average velocity ̅,, ≥!
slowed, otherwise;
3. if $%
& ≤,, ≤!" ∙
, the traveling velocity in the segment is quite low, thus the traffic state is set to very
4. if ,, ≤$%
& , the traffic is still, thus the traffic state is set to blocked.
In the experiments, we set Mmin = 4, P1 = 50% and P2 = 40%. The value Mmin = 4 has been chosen for reducing the
influence of personal drivers’ behaviors on the decision about the traffic state of the segment. Indeed, a driver could decide to
stop the vehicle for drinking a coffee. If only this vehicle is travelling the segment in the time interval T, the traffic state
could be erroneously set to blocked. In our experiments, we verified that Mmin = 4 is a choice that guarantees, on the one side,
to limit the effect of personal drivers’ behaviors and, on the other side, to determine a state even if the traffic is not intense.
The values of P1 and P2 arise from considerations related to the classification of traffic events in traffic news channels . In fact, it is well known that there is no generally agreed definition of good or bad traffic states . We set the values of parameters P1 and P2, on the one hand, by trying to follow the typical classification of
traffic states provided by traffic news channels and, on the other hand, by trying to reduce the time needed to correctly detect
the traffic states. In addition, the values represent only a choice aimed at producing a possible traffic state classification as
done in other papers . Further, we set vblock = 3 km/h by adapting the suggestions in to the small urban network of Pisa.
At the end of the elaboration made in this module, for the considered time interval, the system has associated with each
segment of the map a representative speed and a traffic state (namely, absent, flowing, slowed, very slowed, blocked). The
segments having traffic state slowed, very slowed, and blocked will be taken into account by the Alert Notification module
with the aim of checking the presence of a traffic congestion or an incident.
Fig. 5 summarizes how the Segment Traffic Classification module works by using a flow chart.
4.3 Traffic Alert Notification
The Traffic Alert Notification module elaborates only segments having traffic state slowed, very slowed, and blocked, and
appropriately generates a series of traffic alerts on the basis of: i) a temporal analysis of the information associated with the
segments in a certain number N of time intervals previous the current one, and ii) a spatial analysis of the traffic condition in
segments adjacent to the considered one.
The choice of N affects, on the one side, the reliability of the alert and, on the other side, the responsiveness of the system.
Indeed, if, for instance, N = 0, we decide to launch an alert by considering only the current traffic state of the segment, but
this state could be affected by drivers’ behavior rather than by actual traffic difficulties. It might occur that a driver blocks the
road segment for a while waiting for a parking slot: in this case, considering just the current time interval would cause a
wrong alert. On the other hand, the larger the N value, the higher the delay for launching the alert. In the experiments, we
realized that N = 2 allows achieving a good trade-off between reliability and responsiveness.
A traffic alert contains the following information: i) the spatial extension of the event, i.e., the segment or the list of
segments associated with the traffic event, ii) the traffic event (traffic congestion magnitude or incident) which depends on
the classification of the segments previously made, iii) the average travelling speed associated with the segments involved in
the traffic event. An alert report contains the list of traffic alerts related to the current time interval. More precisely, since the
alert notification module uses the information related to N+1 time intervals (the N previous intervals and the current one), the
first alert report will be sent at least after N+1 time intervals, while the following ones will be sent at the end of each time
interval, i.e., every 2 minutes.
The traffic events of the “traffic alert” are:
alert for slowed traffic,
alert for slowed or very slowed traffic,
alert for very slowed traffic,
alert for blocked traffic,
and alert for incident, if the specific circumstances of an incident are recognized.
Fig. 5. The flowchart of the Segment Traffic Classification module.
The spatial extension of the event is initially expressed as a set of road segment ids, and is then converted to the city street
name by using the OSM tool Nominatim for reverse geocoding.
The processing carried out in this module consists of two steps: first we analyze the segments having traffic state blocked,
and then we analyze the segments having traffic state slowed or very slowed.
1) Segments with traffic state blocked
By exploiting spatial and temporal considerations, the system is able to determine situations of blocked traffic, or identify
possible incidents, if specific conditions are met.
Typically, when an “incident” occurs, the traffic congestion caused by the incident lasts for a quite long time and the
vehicles stuck in the queue are almost the same in subsequent time intervals. Two types of block may be identified: the
incident can block the whole roadway, or it can block only part of the roadway, allowing the transit of vehicles in its free
portion. In the former case, we will typically observe the “queue with head” (shown in Fig. 6), i.e., an almost total absence of
GPS traces ahead of the incident, and a queue of vehicles behind the incident, which tends to grow. In the latter case, it is
extremely hard to detect an incident and distinguish it from a blocked traffic condition. Thus, in this
paper, we will consider only incidents blocking the whole roadway.
Based on the above considerations we perform the following analysis. For each segment sj having traffic state blocked in
the current time interval, a spatiotemporal analysis is performed, taking into account segments adjacent to sj, and the traffic
condition in N previous time intervals.
First, with the aim of defining the spatial extension of the event, we iteratively check the state of all the segments adjacent
to sj (both in the forward and backward directions), and that of the segments adjacent to these, until we find a segment with
traffic state different from very slowed or blocked.
1. if the event is restricted to a single segment sj, i.e., the segments adjacent to sj have all traffic state slowed, absent, or
flowing, we perform a temporal analysis of the state of sj in N previous time intervals, with the aim of checking if the
event is relevant or not:
if sj had traffic state blocked or very slowed in all the N previous time intervals, the event is considered to be
relevant. Thus, we need to distinguish between a possible incident and a blocked traffic condition. More in
detail, we check whether the vehicles stuck in the queue are the same, or have changed, in consecutive time
intervals, as follows:
if a percentage P3 of vehicles present in the segment in N previous time intervals are the same, we
are dealing with an event that blocks the traffic in the entire roadway for a quite long period of
time. Thus, an alert for incident in sj is sent;
otherwise, an alert for blocked traffic on segment sj is sent;
otherwise, the event is considered to be not relevant, and no alert is sent;
2. if the event involves a set of segments around sj, i.e., the segments adjacent to sj have traffic state blocked or very
slowed, and,
if the condition of the “queue with head” is met, i.e., i) a segment (or a series of segments) immediately
behind sj have traffic state very slowed or blocked, and ii) a segment ahead of sj has traffic state absent, we
check the condition for an incident, that is, if the vehicles stuck in the queue are the same, or have changed,
in consecutive time intervals, as explained earlier (see conditions 1.1.1 and 1.1.2). Thus, the system may
send an alert for incident or an alert for blocked traffic, for the set of segments around sj;
if the condition of the “queue with head” is not met, we set the magnitude of the event on the basis of the
number and type of segments involved, as follows:
if the majority of segments involved have traffic state blocked, we check the condition for an
incident, as explained earlier (see conditions 1.1.1 and 1.1.2). Hence, the system sends an alert for
incident or an alert for blocked traffic for the set of segments around sj;
if the majority of segments involved have traffic state very slowed, the system sends an alert for
very slowed traffic for the set of segments around sj.
At the end of processing, the alert notification module generates an alert report describing the alerts found in the performed
Theoretically, the value of P3 should be 100% since, in case of traffic block, the same vehicles will remain in the same
positions for a while. Actually, it could occur that one or more vehicles decide to make a U-turn or to opt for another route,
taking a cross street. Thus, taking these situations into account, we did not set the value of P3 to 100%: since the number of
the vehicles, which decide to exit from the queue, is typically low and further the value of P3 has to be chosen high in order to
avoid false alarms, we set P3 to 90%. In our simulations, we verified that this value allows achieving remarkable incident
detection rates with a low number of false alarms.
Fig. 6. The situation corresponding to a “queue with head”, which may have been caused by an incident.
2) Segments with traffic state: slowed, very slowed
For each segment sj marked in the current time interval with the traffic states: slowed, or very slowed, a spatial and
temporal analysis is performed as follows:
right lane
1. if all the segments adjacent to sj in the current time interval have traffic state absent or flowing, the traffic event is
restricted to sj. To confirm it and decide the alert magnitude, the situation is analyzed in sj in the N previous time
intervals:
if sj had traffic state slowed, very slowed, or blocked in all the N time intervals, then an alert for slowed
traffic in sj or an alert for very slowed traffic in sj is sent, based on the more recent information (the traffic state in sj
in the current time interval);
otherwise, no alert is sent;
2. if at least one of the segments adjacent to sj has traffic state slowed, very slowed, or blocked, the traffic event affects
multiple segments:
for each segment adjacent to sj having a traffic state slowed, very slowed, or blocked, the state of its
adjacent segments is taken into account in order to define the spatial extension of the event, until we find a
segment with different traffic state. Thus a traffic alert related to the set of segments adjacent to sj is sent,
with a magnitude based on the number and type of segments involved:
if the majority of the segments have traffic state slowed, then an alert for slowed traffic is sent;
if the majority of the segments have traffic state very slowed, then an alert for very slowed traffic is
if the segments have traffic state slowed and very slowed in equal number, then an alert for slowed
or very slowed traffic is sent.
Fig. 7 summarizes how the Traffic Alert Notification module works by using a flow chart.
Fig. 7. The flowchart of the Traffic Alert Notification module.
5. Simulation of GPS Traces
Due to the difficulties (e.g., privacy or permission issues) to collect or obtain a reasonable number of real-world GPS
traces, traffic simulators are frequently used for
validating systems of detection of traffic congestion and incidents. In this work the GPS traces used for the development of
the traffic detection system were simulated using the well-known software SUMO .
SUMO allows creating multi-vehicular simulations of traffic flow by implementing the microscopic model of vehicular
mobility developed by Stefan Krauß , also known as car-following model, in which the
dynamics of each vehicle is governed by the dynamics of the preceding vehicle . The simulation is timediscrete, i.e., the time is marked by steps of 1 second, and space-continuous, i.e., each vehicle is modeled by a GPS position,
and its instantaneous velocity. At each step of the simulation, the velocity of each vehicle is adapted according to that of the
was trafﬁc in segment
sj before?
______________
was sj blocked or very
slowed in N previous time
intervals?
is trafﬁc restricted
to segment sj?
_______________
is trafﬁc state in segments
adjacent to sj is slowed,
absent, or ﬂowing in
vehicles are the same
_________________
is P3 of vehicles in queue
in N previous time
intervals the same?
Is the queue
"with head"?
_________________
is segment ahead of sj
absent? and segments
behind sj very slowed or
is majority of
is segment sj
blocked in
is trafﬁc restricted
to segment sj?
_________________
is trafﬁc state in
segments adjacent to sj
absent or ﬂowing ?
is segment sj
slowed or very
slowed in Tt ?
was trafﬁc in
segment sj before?
______________
was sj blocked, slowed or
very slowed
in N previous time
intervals?
no alert is
is segment sj
slowed inTt?
no alert is
check vehicle
ids in sj in N
previous time
check state
of segments
involved in
is majority of
is majority of
very slowed?
send alert
trafﬁc affects
check state in
adjacent to sj
send alert
trafﬁc affects
check state of
check vehicle
ids in queue in
N previous
time intervals
preceding vehicle, so as to avoid collisions with the preceding vehicle, and by respecting the speed limit of the road, and the
safety distance. SUMO requires: i) an underlying digital map representing the road network on which the traffic simulation
will take place, and ii) the traffic demand, i.e., the flows of vehicles that will travel on the road network. The traffic demand
is modeled in terms of vehicles, routes and flows. Vehicles are described in terms of physical characteristics (acceleration,
maximum speed, dimensions, etc.), and type (taxi, bus, private cars, motorbikes, etc.). Routes taken by vehicles contain the
sequence of edges crossed (from departure edge to arrival edge), and are generated on the basis of the rules of the digital map
(e.g., allowed path, speed limits, traffic lights, one ways). Flows are sets of vehicles joining the simulation at a given time,
with a given penetration rate, and following a certain route. The penetration rate of vehicles is determined by the value of the
parameter period of the flow in SUMO. This parameter determines the level of congestion of the route. It indicates how often
(in number of seconds) a new vehicle (belonging to the flow) is added to the simulation. Low values of the parameter indicate
a high flow rate (heavy traffic), while high values indicate a low flow rate (very light or flowing traffic). We have employed
values of this parameter ranging from 5 to 120.
SUMO does not allow to directly simulating the traffic dynamics after an incident event. However, it allows simulating
incidents by exploiting the bus stop feature. In fact, an incident can be represented by a vehicle that stops at a given location
for a quite long time. More in detail, to simulate an incident, we define a bus stop, and a route covered by a special vehicle.
The bus stop specifies the location and the duration of the incident. The special vehicle simulates the incident by stopping at
the bus stop for the incident duration. All the vehicles following the special vehicle will stop behind it in queue until the end
of the incident.
The dataset that we have simulated consists of the GPS traces of about 50,000 vehicles traveling in the city of Pisa, Italy,
in two different scenarios, namely working day and holiday. The area monitored corresponds to about 70 km2. To reproduce
the appropriate traffic dynamics, as close as possible to the real traffic condition in the city, we have exploited the typical
traffic conditions of Pisa in typical working day and holiday, extracted from Google Traffic , and the
real-world data collected from smartphone and other devices of voluntary drivers within a specific data collection campaign.
We wish to point out that the simulation of data was necessary, as real-world data collected by voluntary drivers are typically
insufficient. The real GPS data were used as reference to build the simulated data. More in detail, we built the simulated GPS
routes by combining the real GPS data collected from voluntary drivers with the information about traffic conditions
provided by Google Traffic and Here Map services. In particular, Here Map was
used to check the correspondence between typical traffic data and real-time traffic data. Thus, we adjusted real routes in order
to meet the corresponding typical traffic conditions of the time interval they belong to. We also added new routes, e.g., with
same starting and/or ending points of real routes, but following a different path (typically congested in the considered time
interval). The aim is to reproduce as best as possible the typical vehicle mobility and traffic at different time intervals in the
city of Pisa, Italy. Thus, we took into account 20 different real routes of vehicles crossing the city at different times, as it
typically happens in the two scenarios, and we obtained about 200 routes per scenario. The routes taken into account contain
mainly urban roads, but they contain also a few freeway roads. Regarding incident events, we have simulated several
incidents in the two scenarios at different times and places. The GPS traces were sampled every 30 seconds from 6 a.m. to 11
p.m. On average, about 1000 vehicles were involved in the simulations. To perform the experiments, we selected the most
relevant (e.g., the most frequently travelled or the most popular) routes and time intervals for the volunteer drivers involved
in collecting data in a typical working day and a typical holiday. In particular, we took into account rush hours and routes
involving main roads, by leaving out side roads, where the occurrence of a traffic event is extremely rare. The places for
simulating incidents and traffic congestions were chosen based on the following considerations. Regarding traffic
congestions, we selected roads where often a traffic event occurs (e.g., during rush hours), according to the services Google
Traffic and Here Map , which provide information about traffic conditions.
Regarding incidents’ locations, we employed information on incidents provided by the local administration and by local police reports for selecting places where incidents had occurred in the past. Thus, the simulation of traffic
congestion and incidents reproduce as faithfully as possible the traffic condition in Pisa, Italy.
6. Experiments
We have performed two types of experiments for evaluating the capability of the system of detecting, respectively,
incidents and traffic congestion. In the following, we present the results regarding incident and traffic events separately in
order to i) better understand the capability of the system in recognizing incidents and ii) make the results themselves
comparable with those from other incident detection systems. However, the experiments on incidents were performed by
adding incidents to the typical workday and holiday scenarios, which already contain traffic events. Thus, the performance
results are actually obtained by considering both incidents and traffic congestions.
6.1 Incident Detection
We simulated 24 incidents in different times and places, for the two different scenarios. The incidents have durations of 15,
20 and 30 minutes. In fact, an incident blocking the whole roadway typically takes more than 15 minutes to be resolved.
Anyhow, the average incident duration is estimated in 37, and 45 minutes, in Taiwan freeways, and U.S. cities, respectively
 .
The computation time needed by the system to produce an Alert Report is in the range 2-15 seconds, depending on the
considered time interval in the day. Indeed, in specific time intervals a very large number of vehicles are circulating in the
city, and the state of several segments is classified as slowed, very slowed, and blocked, thus increasing the computational
time of the system.
We evaluate the performance of the proposed system in terms of the following statistical measures:
Detection Rate (DR): the ratio between the number of correctly detected incidents and the number of simulated
incidents (it corresponds to the recall of the system);
Miss Rate (MR): the ratio between the number of not detected incidents and the number of simulated incidents,
Precision: the ratio between the number of correctly detected incidents, and the sum of detected incidents and false
F1-score: the weighted harmonic mean of precision and recall;
Number of false alarms (NFA): the number of erroneously detected incidents;
Mean Time to Detect (MTD): the mean time interval between the time of the incident and the time of its detection.
In both the scenarios, we were able to detect 22 incidents over 24. The two missed incidents may be due to the presence of
several access points along the road interested by the incident. From the access points new vehicles enter the road and join
the queue. We have verified, however, that in the case of the missed incidents, the system indicates that a congestion event is
occurring on the road, by sending an alert for blocked traffic, instead of an alert for incident. Regarding false alarms, the
system erroneously detected 3 incidents in both the scenarios. The overall simulation results are reported in Table 1, while
Tables 2 and 3 report the information about each simulated incident for the holiday, and the workday scenarios, respectively.
Higher values of the Time to Detect (TD) are due to light traffic conditions during the incident. This means that if the
vehicles involved are many, the incident will be detected in a very short time. Otherwise, if the vehicles involved are few, the
incident will be detected in any case, but in a longer time, depending on the number of vehicles travelling on the route of the
incident location (on the basis of the value of the parameter period of the flow in SUMO). Thus, DR does not depend on the
number of vehicles involved in the simulation: if the condition Mj,t ≥ Mmin on the minimum number of vehicles required to
detect a possible blocked traffic state on a segment si is verified, the incident will be detected. The only threshold that may
affect DR is the percentage value P3 of the same vehicles stuck in queue in N previous time intervals. However, by setting the
value P3 = 90%, we are able to achieve a DR of 91.6%.
In the following, we report the results shown in some papers in the literature where incident detection systems were
proposed. We highlight that these results are obtained on different datasets and in different scenarios. Thus, the aim of
presenting these results is only to show how the performance of our system is comparable with the ones reported in similar
works in the literature. In , the authors employ acceleration noise, travel times, and probe vehicles and use
simulated GPS traces of traffic volumes in early morning of a typical working day to simulate 30-minutes incidents. In the
experiment more similar to ours, they obtain a DR of 100%, a False Alarm Rate (FAR) of 18%, and an MTD of 70 seconds.
In , the authors, identify and isolate anomalous street segments, based on the speed of vehicles, and
study the behavior of vehicles in the anomalous segments, by means of a spatial and temporal analysis. They achieve a DR of
78.7%, an FAR of 1.18%, and an MTD of 2 seconds, employing 10 segments on a route of about 10 miles, and 10-20
vehicles per segment. In , a neural network-based model was trained on GPS data collected in a 5.8
km city-bound area from inductive loop sensors, obtaining a DR of 92%, an FAR of 0.69%, an MR of 8.27% and an MTD of
106 seconds on the test set. In , the best performing model for the urban scenario, i.e., a support
vector machine, achieves a DR of 87.31% and an MTD of 98.61s.
Regarding the MTD performance, we achieved worse results than the above mentioned approaches. On the other hand, TDs
strongly depend on the current traffic condition and on the average distance between the incident location and the starting
point of the vehicles’ routes. Regarding the number of false alarms generated, we would like to point out that only 3 false
alarms were generated by the system per scenario, despite heavy simulations were performed.
Although the achieved results are similar to those of several works in the literature, our scenario is more complex than the
scenarios employed in the cited papers. In fact, our system uses GPS data coming from a wider area (about 70 km2), involves
a larger number of road segments and vehicles, and uses less information (no need for, e.g., vehicle sensor probes, fixed
sensors, historical data, weather data). In addition, we would like to highlight that incident detection in urban road networks
is a more challenging task than incident detection on freeways , as urban and freeway road networks
have different traffic flows due, e.g., to different speed limits and access points.
Table 1. Experimental results of incident detection.
F1-score (%)
MTD (min.)
Table 2. Incident detection on holiday.
Incident information
Incident detection
Place and Time
Lungarno Galilei, 7:30 a.m.
Via V. Veneto, 7:30 a.m.
Via Contessa Matilde, 7:30 a.m.
Lungarno Galilei, 8:30 a.m.
Via V. Veneto, 8:30 a.m.
Via Contessa Matilde, 8:30 a.m.
Lungarno Gambacorti, 9:30 a.m.
Via Fiorentina, 9:30 a.m.
Via dell’Aeroporto, 9:30 a.m.
Via C. Battisti, 9:30 a.m.
FI-PI-LI Highway, 9:30 a.m.
Via C. Matteucci, 9:30 a.m.
Via Bonanno, 12:30 a.m.
Via Aurelia, 12:30 a.m.
Via dell’Aeroporto, 12:30 a.m.
Via Cisanello, 12:30 a.m.
FI-PI-LI Highway, 12:30 a.m.
Via Statale Abetone, 12:30 a.m.
Via Aurelia, 4:30 p.m.
Via delle Cascine, 4:30 p.m.
Via dell’Aeroporto, 4:30 p.m.
Via P. Nenni, 6:00 p.m.
Via S. G. Bosco, 6:00 p.m.
Via G. Moruzzi, 6:00 p.m.
Table 3. Incident detection on workday.
Incident information
Incident detection
Place and Time
Lungarno Galilei, 7:30 a.m.
Via V. Veneto, 7:30 a.m.
Via Contessa Matilde, 7:30 a.m.
Lungarno Galilei, 8:30 a.m.
Via V. Veneto, 8:30 a.m.
Via Contessa Matilde, 8:30 a.m.
Lungarno Gambacorti, 9:30 a.m.
Via Fiorentina, 9:30 a.m.
Viale Bonaini, 9:30 a.m.
Via C. Battisti, 9:30 a.m.
FI-PI-LI Highway, 9:30 a.m.
Via C. Matteucci, 9:30 a.m.
Via C. Battisti, 12:30 a.m.
FI-PI-LI Highway, 12:30 a.m.
Lungarno Sonnino, 12:30 a.m.
Via Bonanno, 12:30 a.m.
FI-PI-LI Highway, 12:30 a.m.
Via dell’Aeroporto, 12:30 a.m.
Via Aurelia, 4:30 p.m.
Via delle Cascine, 4:30 p.m.
Via dell’Aeroporto, 4:30 p.m.
Via P. Nenni, 6:00 p.m.
Via S. G. Bosco, 6:00 p.m.
Via G. Moruzzi, 6:00 p.m.
6.2 Traffic Congestion Detection
We simulated several traffic conditions at 6 different times and places usually congested, by testing, for each traffic event,
different levels of traffic magnitude, i.e., severity of the event in terms of congestion produced, in order to show how the
response of the system changes depending on the magnitude of the traffic event. The magnitude of each traffic event was
varied based on the period parameter associated with each flow. Each simulation involves 2 flows and has a duration of 30
minutes. For the sake of simplicity, we chose the same value of the period for the two flows. To verify the actual traffic
condition in the different simulations and to compare it with the Alert Notification module response, we took into account the
travel times of a probe vehicle for each flow. The probe vehicle joins the simulation a few minutes after its beginning, with
the aim of revealing the effective simulated traffic condition.
Table 4 shows the simulation of 6 traffic events with different traffic magnitudes. As the traffic magnitude increases (shown
by the increasing travel time of probe vehicles), the Alert Notification module is able to correctly detect all the simulated
traffic events both on the common portion of the routes, and also on the exclusive portion of the route.
In this case we do not compute exact performance measure, as objective criteria to define the actual traffic condition are
missing . Thus, the system only detects the presence of traffic congestion, by sending more serious alerts
with increasing road use.
Concluding, our experimental results show that our approach can be very effective in detecting traffic congestions and
incidents by using only GPS traces belonging to moving vehicles. Thus, the developed system can be integrated into classical
ITSs, allowing them to manage also those roads where monitoring supports are not available. Although today the percentage
of moving vehicles, which transmit their GPS coordinates, is quite low with respect to the total, it is rapidly increasing. We
expect in the near future that this percentage becomes so relevant to allow a reliable and effective use of our approach,
possibly improving the performance by tuning the parameters in different operating contexts.
7. Conclusions and Future Work
In this work we have presented a system for detecting traffic congestion and incidents from real-time GPS traces. The
system, implemented on a Service Oriented Architecture, assigns to each road segment of the city map a traffic state based on
the speeds of vehicles, and sends to the users traffic alerts, indicating the affected area, a traffic state, e.g., incident, slowed
traffic, blocked traffic, and the estimated velocity of vehicles in the area. The system only exploits a real-time spatiotemporal
analysis of the GPS traces and needs no learning phase. We presented and discussed some experiments performed using the
GPS traces generated exploiting the SUMO traffic simulator on the basis of a combination of simulated GPS data and real
GPS data collected in the city of Pisa. We achieved an incident detection rate of 91.6% and an average detection time shorter
than 7 minutes. Regarding traffic congestion detection, we showed how the proposed system is able to recognize different
levels of congestion depending on road use.
As future work, we would like to extend our system along the following directions:
the system could be integrated with a dynamic routing service in order to suggest to the user an alternative path to
follow for avoiding the incident/traffic congestion location;
ii) the confidence of the system could be increased by predicting typical traffic state. This can be achieved by
collecting the GPS traces and generating models of the traffic state, possibly taking into account other information
sources (e.g., weather, events scheduled in the city that may affect the normal mobility). More in detail, for
instance, by considering a main road of the city, we could predict the occurrence of traffic with higher magnitude,
e.g., during rush hours, in case of a bad weather forecasting report, or concurrently with an event (e.g., football
match, a concert, a flash-mob, a political demonstration) happening along the main road. We can therefore
compare the traffic state predicted by the model with the state inferred by the approach described in this paper.
The comparison will allow us to validate the outputs of our system, when these outputs coincide with the outputs
of the model, and to identify more easily unexpected traffic events (such as incidents) by detecting differences
between the output of the model and the output of the system;
iii) the system could be integrated with a service we have recently developed, which exploits the tweets to detect
traffic congestions . Once the system detects a traffic event by analyzing the GPS traces,
we could focus the search for relevant tweets on the specific geographical area where the event occurred with the
aim of confirming the event and possible extracting automatically information on its causes;
iv) the system could be integrated into a dashboard of services allowing to: 1) detect traffic and incidents, 2) predict
traffic state, 3) suggest alternative routes both by car and using other transport modality, 4) employ social
networks to detect traffic-related events, 5) show weather information.
Table 4. Traffic state detection.
period value
Probe vehicle’s travel
time on first route
Probe vehicle’s
travel time on
second route
Traffic detection on the
common portion of the
Traffic detection on the
exclusive portion of the
single routes
1. Traffic simulated in Via Gronchi at 7:30 a.m.
Yes – slowed, v. slowed,
Yes – slowed, v. slowed,
Yes – v. slowed, blocked
Yes – very slowed,
Yes – very slowed
very light
Yes – slowed, v. slowed
very light
Yes – v. slowed
very light
Yes – v. slowed
2. Traffic simulated in Via Cisanello at 8:00 a.m.
Yes – blocked
Yes – v. slowed, blocked
Yes – blocked
Yes – v. slowed, blocked
Yes – v. slowed, blocked
Yes – v. slowed
very light
yes – v. slowed
very light
very light
3. Traffic simulated in Lungarno Pacinotti at 7:30 a.m.
Yes – v. slowed, blocked
Yes – v. slowed, blocked
Yes – v. slowed, blocked
Yes – slowed, v. slowed,
Yes – v. slowed, blocked
very light
very light
very light
4. Traffic simulated in Via del Brennero at 8:00 a.m.
Yes – v. slowed, blocked
Yes – v. slowed, blocked
Yes – v. slowed, blocked
very light
very light
very light
5. Traffic simulated in Via C. Matilde at 4:30 p.m.
Yes – blocked
Yes – v. slowed, blocked
Yes – blocked
Yes – v. slowed, blocked
Yes – blocked
Yes – v. slowed, blocked
very light
Yes – blocked
Yes – blocked
very light
very light
6. Traffic simulated in Via Aurelia at 6:00 p.m.
Yes – v. slowed
Yes – slowed, v. slowed,
Yes – slowed
Yes – slowed, v. slowed,
Yes – v. slowed, blocked
very light
very light
very light