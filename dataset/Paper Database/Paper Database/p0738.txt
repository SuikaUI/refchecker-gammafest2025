Counter-ﬁtting Word Vectors to Linguistic Constraints
Nikola Mrkˇsi´c1, Diarmuid ´O S´eaghdha2, Blaise Thomson2, Milica Gaˇsi´c1
Lina Rojas-Barahona1, Pei-Hao Su1, David Vandyke1, Tsung-Hsien Wen1, Steve Young1
1 Department of Engineering, University of Cambridge, UK
2 Apple Inc.
{nm480,mg436,phs26,djv27,thw28,sjy}@cam.ac.uk
{doseaghdha, blaisethom}@apple.com
In this work, we present a novel counter-ﬁtting
method which injects antonymy and synonymy
constraints into vector space representations in
order to improve the vectors’ capability for
judging semantic similarity.
Applying this
method to publicly available pre-trained word
vectors leads to a new state of the art performance on the SimLex-999 dataset. We also
show how the method can be used to tailor the
word vector space for the downstream task of
dialogue state tracking, resulting in robust improvements across different dialogue domains.
Introduction
Many popular methods that induce representations
for words rely on the distributional hypothesis – the
assumption that semantically similar or related words
appear in similar contexts.
This hypothesis supports unsupervised learning of meaningful word representations from large corpora . Word vectors trained using
these methods have proven useful for many downstream tasks including machine translation and dependency parsing .
One drawback of learning word embeddings from
co-occurrence information in corpora is that it tends
to coalesce the notions of semantic similarity and conceptual association . Furthermore,
even methods that can distinguish similarity from
association (e.g., based on syntactic co-occurrences)
will generally fail to tell synonyms from antonyms
 . For example, words such
Australian
overpriced
inexpensive
overpriced
Table 1: Nearest neighbours for target words using GloVe
vectors before and after counter-ﬁtting
as east and west or expensive and inexpensive appear
in near-identical contexts, which means that distributional models produce very similar word vectors for
such words. Examples of such anomalies in GloVe
vectors can be seen in Table 1, where words such as
cheaper and inexpensive are deemed similar to (their
antonym) expensive.
A second drawback is that similarity and antonymy
can be application- or domain-speciﬁc. In our case,
we are interested in exploiting distributional knowledge for the dialogue state tracking task (DST). The
DST component of a dialogue system is responsible for interpreting users’ utterances and updating
the system’s belief state – a probability distribution
over all possible states of the dialogue. For example, a DST for the restaurant domain needs to detect
whether the user wants a cheap or expensive restaurant. Being able to generalise using distributional
information while still distinguishing between semantically different yet conceptually related words
 
(e.g. cheaper and pricey) is critical for the performance of dialogue systems. In particular, a dialogue
system can be led seriously astray by false synonyms.
We propose a method that addresses these two
drawbacks by using synonymy and antonymy relations drawn from either a general lexical resource
or an application-speciﬁc ontology to ﬁne-tune distributional word vectors. Our method, which we
term counter-ﬁtting, is a lightweight post-processing
procedure in the spirit of retroﬁtting . The second row of Table 1 illustrates the
results of counter-ﬁtting: the nearest neighbours capture true similarity much more intuitively than the
original GloVe vectors. The procedure improves
word vector quality regardless of the initial word vectors provided as input.1 By applying counter-ﬁtting
to the Paragram-SL999 word vectors provided by
Wieting et al. , we achieve new state-of-the-art
performance on SimLex-999, a dataset designed to
measure how well different models judge semantic
similarity between words . We
also show that the counter-ﬁtting method can inject knowledge of dialogue domain ontologies into
word vector space representations to facilitate the
construction of semantic dictionaries which improve
DST performance across two different dialogue domains. Our tool and word vectors are available at
github.com/nmrksic/counter-fitting.
Related Work
Most work on improving word vector representations using lexical resources has focused on bringing
words which are known to be semantically related
closer together in the vector space. Some methods
modify the prior or the regularization of the original
training procedure . Wieting et al. use
the Paraphrase Database 
to train word vectors which emphasise word similarity over word relatedness. These word vectors
achieve the current state-of-the-art performance on
the SimLex-999 dataset and are used as input for
counter-ﬁtting in our experiments.
1When we write “improve”, we refer to improving the vector
space for a speciﬁc purpose. We do not expect that a vector
space ﬁne-tuned for semantic similarity will give better results
on semantic relatedness. As Mohammad et al. observe,
antonymous concepts are related but not similar.
Recently, there has been interest in lightweight
post-processing procedures that use lexical knowledge to reﬁne off-the-shelf word vectors without requiring large corpora for (re-)training as the aforementioned “heavyweight” procedures do. Faruqui
et al.’s retroﬁtting approach uses similarity
constraints from WordNet and other resources to pull
similar words closer together.
The complications caused by antonymy for distributional methods are well-known in the semantics
community. Most prior work focuses on extracting
antonym pairs from text rather than exploiting them
 . The most common use of antonymy information is to provide features for systems that detect contradictions or logical entailment . As far as we are aware, there is no
previous work on exploiting antonymy in dialogue
systems. The modelling work closest to ours are
Liu et al. , who use antonymy and WordNet
hierarchy information to modify the heavyweight
Word2Vec training objective; Yih et al. , who
use a Siamese neural network to improve the quality of Latent Semantic Analysis vectors; Schwartz et
al. , who build a standard distributional model
from co-occurrences based on symmetric patterns,
with speciﬁed antonymy patterns counted as negative co-occurrences; and Ono et al. , who use
thesauri and distributional data to train word embeddings specialised for capturing antonymy.
Counter-ﬁtting Word Vectors to
Linguistic Constraints
Our starting point is an indexed set of word vectors V = {v1, v2, . . . , vN} with one vector for each
word in the vocabulary. We will inject semantic relations into this vector space to produce new word
vectors V ′ = {v′1, v′2, . . . , v′N}. For antonymy
and synonymy we have a set of constraints A and
S, respectively. The elements of each set are pairs
of word indices; for example, each pair (i, j) in S is
such that the i-th and j-th words in the vocabulary are
synonyms. The objective function used to counter-ﬁt
the pre-trained word vectors V to the sets of linguistic
constraints A and S contains three different terms:
1. Antonym Repel (AR): This term serves to push
antonymous words’ vectors away from each other in
the transformed vector space V ′:
where d(vi, vj) = 1−cos(vi, vj) is a distance derived
from cosine similarity and τ(x) ≜max(0, x) imposes a margin on the cost. Intuitively, δ is the “ideal”
minimum distance between antonymous words; in
our experiments we set δ = 1.0 as it corresponds to
vector orthogonality.
2. Synonym Attract (SA): The counter-ﬁtting
procedure should seek to bring the word vectors of
known synonymous word pairs closer together:
where γ is the “ideal” maximum distance between
synonymous words; we use γ = 0.
3. Vector Space Preservation (VSP): the topology of the original vector space describes relationships between words in the vocabulary captured using
distributional information from very large textual corpora. The VSP term bends the transformed vector
space towards the original one as much as possible in
order to preserve the semantic information contained
in the original vectors:
VSP(V, V ′) =
j) −d(vi, vj)
For computational efﬁciency, we do not calculate
distances for every pair of words in the vocabulary.
Instead, we focus on the (pre-computed) neighbourhood N(i), which denotes the set of words within
a certain radius ρ around the i-th word’s vector in
the original vector space V . Our experiments indicate that counter-ﬁtting is relatively insensitive to the
choice of ρ, with values between 0.2 and 0.4 showing
little difference in quality; here we use ρ = 0.2.
The objective function for the training procedure
is given by a weighted sum of the three terms:
C(V, V ′) = k1AR(V ′)+k2SA(V ′)+k3VSP(V, V ′)
where k1, k2, k3 ≥0 are hyperparameters that control the relative importance of each term. In our
experiments we set them to be equal: k1 = k2 = k3.
To minimise the cost function for a set of starting
vectors V and produce counter-ﬁtted vectors V ′, we
run stochastic gradient descent (SGD) for 20 epochs.
An end-to-end run of counter-ﬁtting takes less than
two minutes on a laptop with four CPUs.
Injecting Dialogue Domain Ontologies into
Vector Space Representations
Dialogue state tracking (DST) models capture users’
goals given their utterances. Goals are represented as
sets of constraints expressed by slot-value pairs such
as [food: Indian] or [parking: allowed]. The set of
slots S and the set of values Vs for each slot make up
the ontology of a dialogue domain.
In this paper we adopt the recurrent neural network
(RNN) framework for tracking suggested in . Rather than using a spoken language understanding (SLU) decoder to convert user utterances
into meaning representations, this model operates
directly on the n-gram features extracted from the
automated speech recognition (ASR) hypotheses. A
drawback of this approach is that the RNN model
can only perform exact string matching to detect the
slot names and values mentioned by the user. It cannot recognise synonymous words such as pricey and
expensive, or even subtle morphological variations
such as moderate and moderately. A simple way to
mitigate this problem is to use semantic dictionaries:
lists of rephrasings for the values in the ontology.
Manual construction of dictionaries is highly labourintensive; however, if one could automatically detect
high-quality rephrasings, then this capability would
come at no extra cost to the system designer.
To obtain a set of word vectors which can be used
for creating a semantic dictionary, we need to inject
the domain ontology into the vector space. This can
be achieved by introducing antonymy constraints between all the possible values of each slot (i.e. Chinese
and Indian, expensive and cheap, etc.). The remaining linguistic constraints can come from semantic
lexicons: the richer the sets of injected synonyms
and antonyms are, the better the resulting word representations will become.
Model / Word Vectors
Neural MT Model 
Symmetric Patterns 
Non-distributional Vectors 
GloVe vectors 
GloVe vectors + Retroﬁtting
GloVe + Counter-ﬁtting
Paragram-SL999 
Paragram-SL999 + Retroﬁtting
Paragram-SL999 + Counter-ﬁtting
Inter-annotator agreement
Annotator/gold standard agreement
Table 2: Performance on SimLex-999. Retroﬁtting uses
the code and (PPDB) data provided by the authors
Experiments
Word Vectors and Semantic Lexicons
Two different collections of pre-trained word vectors
were used as input to the counter-ﬁtting procedure:
1. Glove Common Crawl 300-dimensional vectors made available by Pennington et al. .
Paragram-SL999 300-dimensional vectors
made available by Wieting et al. .
The synonymy and antonymy constraints were obtained from two semantic lexicons:
1. PPDB 2.0 : the latest release of the Paraphrase Database. A new feature of this version is that it assigns relation
types to its word pairs. We identify the Equivalence relation with synonymy and Exclusion
with antonymy. We used the largest available
(XXXL) version of the database and only considered single-token terms.
2. WordNet : a well known semantic lexicon which contains vast amounts of high
quality human-annotated synonym and antonym
pairs. Any two words in our vocabulary which
had antonymous word senses were considered
antonyms; WordNet synonyms were not used.
In total, the lexicons yielded 12,802 antonymy and
31,828 synonymy pairs for our vocabulary, which
consisted of 76,427 most frequent words in Open-
Subtitles, obtained from invokeit.wordpress.
com/frequency-word-lists/.
Semantic Resource
Baseline (no linguistic constraints)
PPDB−(PPDB antonyms)
PPDB+ (PPDB synonyms)
WordNet−(WordNet antonyms)
PPDB−and PPDB+
WordNet−and PPDB−
WordNet−and PPDB+
WordNet−and PPDB−and PPDB+
Table 3: SimLex-999 performance when different sets of
linguistic constraints are used for counter-ﬁtting
Improving Lexical Similarity Predictions
In this section, we show that counter-ﬁtting pretrained word vectors with linguistic constraints improves their usefulness for judging semantic similarity. We use Spearman’s rank correlation coefﬁcient with the SimLex-999 dataset, which contains
word pairs ranked by a large number of annotators
instructed to consider only semantic similarity.
Table 2 contains a summary of recently reported
competitive scores for SimLex-999, as well as the
performance of the unaltered, retroﬁtted and counter-
ﬁtted GloVe and Paragram-SL999 word vectors. To
the best of our knowledge, the 0.685 ﬁgure reported
for the latter represents the current high score. This
ﬁgure is above the average inter-annotator agreement
of 0.67, which has been referred to as the ceiling
performance in most work up to now.
In our opinion, the average inter-annotator agreement is not the only meaningful measure of ceiling
performance. We believe it also makes sense to compare: a) the model ranking’s correlation with the gold
standard ranking to: b) the average rank correlation
that individual human annotators’ rankings achieved
with the gold standard ranking. The SimLex-999
authors have informed us that the average annotator
agreement with the gold standard is 0.78.2 As shown
in Table 2, the reported performance of all the models
and word vectors falls well below this ﬁgure.
Retroﬁtting pre-trained word vectors improves
GloVe vectors, but not the already semantically specialised Paragram-SL999 vectors. Counter-ﬁtting
substantially improves both sets of vectors, showing
that injecting antonymy relations goes a long way
2This ﬁgure is now reported as a potentially fairer ceiling
performance on the SimLex-999 website: 
cam.ac.uk/˜fh295/simlex.html.
False Synonyms
False Antonyms
sunset, sunrise
dumb, dense
forget, ignore
adult, guardian
girl, maid
polite, proper
happiness, luck
strength, might
south, north
water, ice
violent, angry
groom, bride
dinner, breakfast
laden, heavy
engage, marry
Table 4: Highest-error SimLex-999 word pairs using Paragram vectors (before counter-ﬁtting)
towards improving word vectors for the purpose of
making semantic similarity judgements.
Table 3 shows the effect of injecting different categories of linguistic constraints. GloVe vectors beneﬁt
from all three sets of constraints, whereas the quality
of Paragram vectors, already exposed to PPDB, only
improves with the injection of WordNet antonyms.
Table 4 illustrates how incorrect similarity predictions based on the original (Paragram) vectors can
be ﬁxed through counter-ﬁtting. The table presents
eight false synonyms and nine false antonyms: word
pairs with predicted rank in the top (bottom) 200
word pairs and gold standard rank 500 or more positions lower (higher). Eight of these errors are ﬁxed
by counter-ﬁtting: the difference between predicted
and gold-standard ranks is now 100 or less. Interestingly, ﬁve of the eight corrected word pairs do not
appear in the sets of linguistic constraints; these are
indicated by double ticks in the table. This shows
that secondary (i.e. indirect) interactions through the
three terms of the cost function do contribute to the
semantic content of the transformed vector space.
Improving Dialogue State Tracking
Table 5 shows the dialogue state tracking datasets
used for evaluation. These datasets come from the
Dialogue State Tracking Challenges 2 and 3 .
We used four different sets of word vectors to construct semantic dictionaries: the original GloVe and
Paragram-SL999 vectors, as well as versions counter-
ﬁtted to each domain ontology. The constraints used
for counter-ﬁtting were all those from the previous
section as well as antonymy constraints among the
set of values for each slot. We treated all vocabulary words within some radius t of a slot value as
Restaurants
Tourist Information
Table 5: Number of dialogues in the dataset splits used
for the Dialogue State Tracking experiments
Word Vector Space
Restaurants
Tourist Info
Baseline (no dictionary)
GloVe + Counter-ﬁtting
Paragram-SL999
Paragram-SL999 + Counter-ﬁtting
Table 6: Performance of RNN belief trackers (ensembles
of four models) with different semantic dictionaries
rephrasings of that value. The optimal value of t
was determined using a grid search: we generated a
dictionary and trained a model for each potential t,
then evaluated on the development set. Table 6 shows
the performance of RNN models which used the constructed dictionaries. The dictionaries induced from
the pre-trained vectors substantially improved tracking performance over the baselines (which used no
semantic dictionaries). The dictionaries created using the counter-ﬁtted vectors improved performance
even further. Contrary to the SimLex-999 experiments, starting from the Paragram vectors did not
lead to superior performance, which shows that injecting the application-speciﬁc ontology is at least as
important as the quality of the initial word vectors.
Conclusion
We have presented a novel counter-ﬁtting method
for injecting linguistic constraints into word vector
space representations. The method efﬁciently postprocesses word vectors to improve their usefulness
for tasks which involve making semantic similarity
judgements. Its focus on separating vector representations of antonymous word pairs lead to substantial
improvements on genuine similarity estimation tasks.
We have also shown that counter-ﬁtting can tailor
word vectors for downstream tasks by using it to
inject domain ontologies into word vectors used to
construct semantic dictionaries for dialogue systems.
Acknowledgements
We would like to thank Felix Hill for help with the
SimLex-999 evaluation. We also thank the anonymous reviewers for their helpful suggestions.