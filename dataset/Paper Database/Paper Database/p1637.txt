Greedy Layer-Wise Training of Deep Networks
Yoshua Bengio, Pascal Lamblin, Dan Popovici, Hugo Larochelle
Universit´e de Montr´eal
Montr´eal, Qu´ebec
{bengioy,lamblinp,popovicd,larocheh}@iro.umontreal.ca
Complexity theory of circuits strongly suggests that deep architectures can be much
more efﬁcient (sometimes exponentially) than shallow architectures, in terms of
computational elements required to represent some functions. Deep multi-layer
neural networks have many levels of non-linearities allowing them to compactly
represent highly non-linear and highly-varying functions. However, until recently
it was not clear how to train such deep networks, since gradient-based optimization
starting from random initialization appears to often get stuck in poor solutions. Hinton et al. recently introduced a greedy layer-wise unsupervised learning algorithm
for Deep Belief Networks (DBN), a generative model with many layers of hidden
causal variables. In the context of the above optimization problem, we study this algorithm empirically and explore variants to better understand its success and extend
it to cases where the inputs are continuous or where the structure of the input distribution is not revealing enough about the variable to be predicted in a supervised
task. Our experiments also conﬁrm the hypothesis that the greedy layer-wise unsupervised training strategy mostly helps the optimization, by initializing weights in a
region near a good local minimum, giving rise to internal distributed representations
that are high-level abstractions of the input, bringing better generalization.
Introduction
Recent analyses of modern nonparametric machine learning algorithms that are kernel machines, such as Support Vector Machines
(SVMs), graph-based manifold and semi-supervised learning algorithms suggest fundamental limitations of some learning algorithms. The problem is clear in kernel-based approaches when the kernel
is “local” (e.g., the Gaussian kernel), i.e., K(x, y) converges to a constant when ||x −y|| increases.
These analyses point to the difﬁculty of learning “highly-varying functions”, i.e., functions that have
a large number of “variations” in the domain of interest, e.g., they would require a large number of
pieces to be well represented by a piecewise-linear approximation. Since the number of pieces can be
made to grow exponentially with the number of factors of variations in the input, this is connected with
the well-known curse of dimensionality for classical non-parametric learning algorithms (for regression, classiﬁcation and density estimation). If the shapes of all these pieces are unrelated, one needs
enough examples for each piece in order to generalize properly. However, if these shapes are related
and can be predicted from each other, “non-local” learning algorithms have the potential to generalize
to pieces not covered by the training set. Such ability would seem necessary for learning in complex
domains such as Artiﬁcial Intelligence tasks (e.g., related to vision, language, speech, robotics).
Kernel machines (not only those with a local kernel) have a shallow architecture, i.e., only two
levels of data-dependent computational elements. This is also true of feedforward neural networks
with a single hidden layer ). A serious problem with shallow
architectures is that they can be very inefﬁcient in terms of the number of computational units (e.g.,
bases, hidden units), and thus in terms of required examples . One way to
represent a highly-varying function compactly (with few parameters) is through the composition of
many non-linearities, i.e., with a deep architecture. For example, the parity function with d inputs
requires O(2d) examples and parameters to be represented by a Gaussian SVM ,
O(d2) parameters for a one-hidden-layer neural network, O(d) parameters and units for a multi-layer
network with O(log2 d) layers, and O(1) parameters with a recurrent neural network. More generally,
boolean functions (such as the function that computes the multiplication of two numbers from their
d-bit representation) expressible by O(log d) layers of combinatorial logic with O(d) elements in
each layer may require O(2d) elements when expressed with only 2 layers . When the representation of a concept requires an exponential number of
elements, e.g., with a shallow circuit, the number of training examples required to learn the concept
may also be impractical. Formal analyses of the computational complexity of shallow circuits can be
found in or . They point in the same direction: shallow circuits are
much less expressive than deep ones.
However, until recently, it was believed too difﬁcult to train deep multi-layer neural networks. Empirically, deep networks were generally found to be not better, and often worse, than neural networks with
one or two hidden layers . As this is a negative result, it has not been much reported in
the machine learning literature. A reasonable explanation is that gradient-based optimization starting
from random initialization may get stuck near poor solutions. An approach that has been explored with
some success in the past is based on constructively adding layers. This was previously done using a
supervised criterion at each stage . Hinton,
Osindero, and Teh recently introduced a greedy layer-wise unsupervised learning algorithm for
Deep Belief Networks (DBN), a generative model with many layers of hidden causal variables. The
training strategy for such networks may hold great promise as a principle to help address the problem
of training deep networks. Upper layers of a DBN are supposed to represent more “abstract” concepts
that explain the input observation x, whereas lower layers extract “low-level features” from x. They
learn simpler concepts ﬁrst, and build on them to learn more abstract concepts. This strategy, studied
in detail here, has not yet been much exploited in machine learning. We hypothesize that three aspects
of this strategy are particularly important: ﬁrst, pre-training one layer at a time in a greedy way; second, using unsupervised learning at each layer in order to preserve information from the input; and
ﬁnally, ﬁne-tuning the whole network with respect to the ultimate criterion of interest.
We ﬁrst extend DBNs and their component layers, Restricted Boltzmann Machines (RBM), so that
they can more naturally handle continuous values in input. Second, we perform experiments to better
understand the advantage brought by the greedy layer-wise unsupervised learning. The basic question
to answer is whether or not this approach helps to solve a difﬁcult optimization problem. In DBNs,
RBMs are used as building blocks, but applying this same strategy using auto-encoders yielded similar
results. Finally, we discuss a problem that occurs with the layer-wise greedy unsupervised procedure
when the input distribution is not revealing enough of the conditional distribution of the target variable
given the input variable. We evaluate a simple and successful solution to this problem.
Deep Belief Nets
Let x be the input, and gi the hidden variables at layer i, with joint distribution
P(x, g1, g2, . . . , gℓ) = P(x|g1)P(g1|g2) · · · P(gℓ−2|gℓ−1)P(gℓ−1, gℓ),
where all the conditional layers P(gi|gi+1) are factorized conditional distributions for which computation of probability and sampling are easy. In Hinton et al. one considers the hidden layer gi
a binary random vector with ni elements gi
P(gi|gi+1) =
j|gi+1) with P(gi
j = 1|gi+1) = sigm(bi
where sigm(t) = 1/(1 + e−t), the bi
j are biases for unit j of layer i, and W i is the weight matrix for
layer i. If we denote g0 = x, the generative model for the ﬁrst layer P(x|g1) also follows (1).
Restricted Boltzmann machines
The top-level prior P(gℓ−1, gℓ) is a Restricted Boltzmann Machine (RBM) between layer ℓ−1
and layer ℓ. To lighten notation, consider a generic RBM with input layer activations v (for visible units) and hidden layer activations h (for hidden units). It has the following joint distribution:
P(v, h) = 1
Z eh′W v+b′v+c′h, where Z is the normalization constant for this distribution, b is the vector of biases for visible units, c is the vector of biases for the hidden units, and W is the weight matrix
for the layer. Minus the argument of the exponential is called the energy function,
energy(v, h) = −h′Wv −b′v −c′h.
We denote the RBM parameters together with θ = (W, b, c).
We denote Q(h|v) and P(v|h)
the layer-to-layer conditional distributions associated with the above RBM joint distribution.
The layer-to-layer conditionals associated with the RBM factorize like in (1) and give rise to
P(vk = 1|h) = sigm(bk + P
j Wjkhj) and Q(hj = 1|v) = sigm(cj + P
Gibbs Markov chain and log-likelihood gradient in an RBM
To obtain an estimator of the gradient on the log-likelihood of an RBM, we consider a Gibbs Markov
chain on the (visible units, hidden units) pair of variables. Gibbs sampling from an RBM proceeds by
sampling h given v, then v given h, etc. Denote vt for the t-th v sample from that chain, starting at
t = 0 with v0, the “input observation” for the RBM. Therefore, (vk, hk) for k →∞is a sample from
the joint P(v, h). The log-likelihood of a value v0 under the model of the RBM is
log P(v0) = log
P(v0, h) = log
e−energy(v0,h) −log
e−energy(v,h)
and its gradient with respect to θ = (W, b, c) is
∂log P(v0)
Q(h0|v0)∂energy(v0, h0)
P(vk, hk)∂energy(vk, hk)
An unbiased sample is −∂energy(v0, h0)
∂energy(vk, hk)
where h0 is a sample from Q(h0|v0) and (vk, hk) is a sample of the Markov chain, and the expectation can be easily computed thanks to P(hk|vk) factorizing. The idea of the Contrastive Divergence
algorithm is to take k small (typically k = 1). A pseudo-code for Contrastive Divergence training (with k = 1) of an RBM with binomial input and hidden units is presented in the
Appendix (Algorithm RBMupdate(x, ϵ, W, b, c)). This procedure is called repeatedly with v0 = x
sampled from the training distribution for the RBM. To decide when to stop one may use a proxy for
the training criterion, such as the reconstruction error −log P(v1 = x|v0 = x).
Greedy layer-wise training of a DBN
A greedy layer-wise training algorithm was proposed to train a DBN one layer at
a time. One ﬁrst trains an RBM that takes the empirical data as input and models it. Denote Q(g1|g0)
the posterior over g1 associated with that trained RBM (we recall that g0 = x with x the observed
input). This gives rise to an “empirical” distribution bp1 over the ﬁrst layer g1, when g0 is sampled
from the data empirical distribution bp: we have bp1(g1) =
bp(g0)Q(g1|g0).
Note that a 1-level DBN is an RBM. The basic idea of the greedy layer-wise strategy is that after
training the top-level RBM of a ℓ-level DBN, one changes the interpretation of the RBM parameters
to insert them in a (ℓ+ 1)-level DBN: the distribution P(gℓ−1|gℓ) from the RBM associated with
layers ℓ−1 and ℓis kept as part of the DBN generative model. In the RBM between layers ℓ−1
and ℓ, P(gℓ) is deﬁned in terms on the parameters of that RBM, whereas in the DBN P(gℓ) is deﬁned
in terms of the parameters of the upper layers. Consequently, Q(gℓ|gℓ−1) of the RBM does not
correspond to P(gℓ|gℓ−1) in the DBN, except when that RBM is the top layer of the DBN. However,
we use Q(gℓ|gℓ−1) of the RBM as an approximation of the posterior P(gℓ|gℓ−1) for the DBN.
The samples of gℓ−1, with empirical distribution bpℓ−1, are converted stochastically into samples of gℓ
with distribution bpℓthrough bpℓ(gℓ) = P
gℓ−1 bpℓ−1(gℓ−1)Q(gℓ|gℓ−1). Although bpℓcannot be represented explicitly it is easy to sample unbiasedly from it: pick a training example and propagate it
stochastically through the Q(gi|gi−1) at each level. As a nice side beneﬁt, one obtains an approximation of the posterior for all the hidden variables in the DBN, at all levels, given an input g0 = x.
Mean-ﬁeld propagation (see below) gives a fast deterministic approximation of posteriors P(gℓ|x).
Note that if we consider all the layers of a DBN from level i to the top, we have a smaller DBN,
which generates the marginal distribution P(gi) for the complete DBN. The motivation for the greedy
procedure is that a partial DBN with ℓ−i levels starting above level i may provide a better model for
P(gi) than does the RBM initially associated with level i itself.
The above greedy procedure is justiﬁed using a variational bound . As a consequence of that bound, when inserting an additional layer, if it is initialized appropriately and has
enough units, one can guarantee that initial improvements on the training criterion for the next layer
(ﬁtting bpℓ) will yield improvement on the training criterion for the previous layer (likelihood with
respect to bpℓ−1). The greedy layer-wise training algorithm for DBNs is quite simple, as illustrated by
the pseudo-code in Algorithm TrainUnsupervisedDBN of the Appendix.
Supervised ﬁne-tuning
As a last training stage, it is possible to ﬁne-tune the parameters of all the layers together. For example Hinton et al. propose to use the wake-sleep algorithm 
to continue unsupervised training. Hinton et al. also propose to optionally use a mean-ﬁeld approximation of the posteriors P(gi|g0), by replacing the samples gi−1
at level i −1 by their bit-wise
mean-ﬁeld expected value µi−1
, with µi = sigm(bi + W iµi−1). According to these propagation
rules, the whole network now deterministically computes internal representations as functions of the
network input g0 = x. After unsupervised pre-training of the layers of a DBN following Algorithm
TrainUnsupervisedDBN (see Appendix) the whole network can be further optimized by gradient
descent with respect to any deterministically computable training criterion that depends on these representations. For example, this can be used to ﬁne-tune a very deep
auto-encoder, minimizing a reconstruction error. It is also possible to use this as initialization of all
except the last layer of a traditional multi-layer neural network, using gradient descent to ﬁne-tune the
whole network with respect to a supervised training criterion.
Algorithm DBNSupervisedFineTuning in the appendix contains pseudo-code for supervised
ﬁne-tuning, as part of the global supervised learning algorithm TrainSupervisedDBN. Note that
better results were obtained when using a 20-fold larger learning rate with the supervised criterion
(here, squared error or cross-entropy) updates than in the contrastive divergence updates.
Extension to continuous-valued inputs
With the binary units introduced for RBMs and DBNs in Hinton et al. one can “cheat” and
handle continuous-valued inputs by scaling them to the (0,1) interval and considering each input continuous value as the probability for a binary random variable to take the value 1. This has worked
well for pixel gray levels, but it may be inappropriate for other kinds of input variables. Previous
work on continuous-valued input in RBMs include , in which noise is added
to sigmoidal units, and the RBM forms a special form of Diffusion Network . We concentrate here on simple extensions of the RBM framework in which only the
energy function and the allowed range of values are changed.
Linear energy: exponential or truncated exponential
Consider a unit with value y of an RBM, connected to units z of the other layer. p(y|z) can be
obtained from the terms in the exponential that contain y, which can be grouped in ya(z) for linear
energy functions as in (2), where a(z) = b+w′z with b the bias of unit y, and w the vector of weights
connecting unit y to units z. If we allow y to take any value in interval I, the conditional density
of y becomes p(y|z) =
exp(ya(z))1y∈I
v exp(va(z))1v∈Idv . When I = [0, ∞), this is an exponential density
with parameter a(z), and the normalizing integral equals −1/a(z), but only exists if ∀z, a(z) < 0
Computing the density, computing the expected value (= −1/a(z)) and sampling would all be easy.
Alternatively, if I is a closed interval (as in many applications of interest), or if we would like to
use such a unit as a hidden unit with non-linear expected value, the above density is a truncated
exponential. For simplicity we consider the case I = here, for which the normalizing integral,
which always exists, is exp(−a(z))−1
. The conditional expectation of u given z is interesting because
it has a sigmoidal-like saturating and monotone non-linearity: E[y|z] =
1−exp(−a(z)) −
sampling from the truncated exponential is easily obtained from a uniform sample U, using the inverse
cumulative F −1 of the conditional density y|z: F −1(U) = log(1−U×(1−exp(a(z))))
. In both truncated
and not truncated cases, the Contrastive Divergence updates have the same form as for binomial units
(input value times output value), since the updates only depend on the derivative of the energy with
respect to the parameters. Only sampling is changed, according to the unit’s conditional density.
Quadratic energy: Gaussian units
To obtain Gaussian-distributed units, one adds quadratic terms to the energy. Adding P
rise to a diagonal covariance matrix between units of the same layer, where yi is the continuous value
of a Gaussian unit and d2
i is a positive parameter that is equal to the inverse of the variance of yi. In
classification error on training set
Deep Network with no pre−training
DBN with partially supervised pre−training
DBN with unsupervised pre−training
Figure 1: Training classiﬁcation error vs training
iteration, on the Cotton price task, for deep network without pre-training, for DBN with unsupervised pre-training, and DBN with partially supervised pre-training. Illustrates optimization difﬁculty of deep networks and advantage of partially
supervised training.
1. Deep Network with no pre-training
2. Logistic regression
3. DBN, binomial inputs, unsupervised
4. DBN, binomial inputs, partially supervised
5. DBN, Gaussian inputs, unsupervised
6. DBN, Gaussian inputs, partially supervised
Table 1: Mean squared prediction error on Abalone task and classiﬁcation error on Cotton task,
showing improvement with Gaussian units.
this case the variance is unconditional, whereas the mean depends on the inputs of the unit: for a unit
y with inputs z and inverse variance d2, E[y|z] = a(z)
The Contrastive Divergence updates are easily obtained by computing the derivative of the energy
with respect to the parameters. For the parameters in the linear terms of the energy function (e.g., b
and w above), the derivatives have the same form (input unit value times output unit value) as for the
case of binomial units. For quadratic parameter d > 0, the derivative is simply 2dy2. Gaussian units
were previously used as hidden units of an RBM (with binomial or multinomial inputs) applied to an
information retrieval task . Our interest here is to use them for
continuous-valued inputs.
Using continuous-valued hidden units
Although we have introduced RBM units with continuous values to better deal with the representation of input variables, they could also be considered for use in the hidden layers, in replacement or
complementing the binomial units which have been used in the past. However, Gaussian and exponential hidden units have a weakness: the mean-ﬁeld propagation through a Gaussian unit gives rise
to a purely linear transformation. Hence if we have only such linear hidden units in a multi-layered
network, the mean-ﬁeld propagation function that maps inputs to internal representations would be
completely linear. In addition, in a DBN containing only Gaussian units, one would only be able
to model Gaussian data. On the other hand, combining Gaussian with other types of units could be
interesting. In contrast with Gaussian or exponential units, remark that the conditional expectation
of truncated exponential units is non-linear, and in fact involves a sigmoidal form of non-linearity
applied to the weighted sum of its inputs.
Experiment 1
This experiment was performed on two data sets: the UCI repository Abalone data set (split in 2177
training examples, 1000 validation examples, 1000 test examples) and a ﬁnancial data set. The latter
has real-valued input variables representing averages of returns and squared returns for which the binomial approximation would seem inappropriate. The target variable is next month’s return of a Cotton
futures contract. There are 13 continuous input variables, that are averages of returns over different
time-windows up to 504 days. There are 3135 training examples, 1000 validation examples, and 1000
test examples. The dataset is publicly available at 
fin_data/. In Table 1 (rows 3 and 5), we show improvements brought by DBNs with Gaussian
inputs over DBNs with binomial inputs (with binomial hidden units in both cases). The networks have
two hidden layers. All hyper-parameters are selected based on validation set performance.
Understanding why the layer-wise strategy works
A reasonable explanation for the apparent success of the layer-wise training strategy for DBNs is that
unsupervised pre-training helps to mitigate the difﬁcult optimization problem of deep networks by
better initializing the weights of all layers. Here we present experiments that support and clarify this.
Training each layer as an auto-encoder
We want to verify that the layer-wise greedy unsupervised pre-training principle can be applied when
using an auto-encoder instead of the RBM as a layer building block. Let x be the input vector
with xi ∈(0, 1). For a layer with weights matrix W, hidden biases column vector b and input
biases column vector c, the reconstruction probability for bit i is pi(x), with the vector of probabilities p(x) = sigm(c + Wsigm(b + W ′x)). The training criterion for the layer is the average
of negative log-likelihoods for predicting x from p(x). For example, if x is interpreted either as a
sequence of bits or a sequence of bit probabilities, we minimize the reconstruction cross-entropy:
i xi log pi(x) + (1 −xi) log(1 −pi(x)). We report several experimental results using this
training criterion for each layer, in comparison to the contrastive divergence algorithm for an RBM.
Pseudo-code for a deep network obtained by training each layer as an auto-encoder is given in Appendix (Algorithm TrainGreedyAutoEncodingDeepNet).
One question that arises with auto-encoders in comparison with RBMs is whether the auto-encoders
will fail to learn a useful representation when the number of units is not strictly decreasing from one
layer to the next (since the networks could theoretically just learn to be the identity and perfectly minimize the reconstruction error). However, our experiments suggest that networks with non-decreasing
layer sizes generalize well. This might be due to weight decay and stochastic gradient descent, preventing large weights: optimization falls in a local minimum which corresponds to a good transformation
of the input (that provides a good initialization for supervised training of the whole net).
Greedy layer-wise supervised training
A reasonable question to ask is whether the fact that each layer is trained in an unsupervised way is
critical or not. An alternative algorithm is supervised, greedy and layer-wise: train each new hidden
layer as the hidden layer of a one-hidden layer supervised neural network NN (taking as input the
output of the last of previously trained layers), and then throw away the output layer of NN and use the
parameters of the hidden layer of NN as pre-training initialization of the new top layer of the deep net,
to map the output of the previous layers to a hopefully better representation. Pseudo-code for a deep
network obtained by training each layer as the hidden layer of a supervised one-hidden-layer neural
network is given in Appendix (Algorithm TrainGreedySupervisedDeepNet).
Experiment 2.
We compared the performance on the MNIST digit classiﬁcation task obtained with ﬁve algorithms:
(a) DBN, (b) deep network whose layers are initialized as auto-encoders, (c) above described supervised greedy layer-wise algorithm to pre-train each layer, (d) deep network with no pre-training
(random initialization), (e) shallow network (1 hidden layer) with no pre-training.
The ﬁnal ﬁne-tuning is done by adding a logistic regression layer on top of the network and training the whole network by stochastic gradient descent on the cross-entropy with respect to the target
classiﬁcation. The networks have the following architecture: 784 inputs, 10 outputs, 3 hidden layers
with variable number of hidden units, selected by validation set performance (typically selected layer
sizes are between 500 and 1000). The shallow network has a single hidden layer. An L2 weight
decay hyper-parameter is also optimized. The DBN was slower to train and less experiments were
performed, so that longer training and more appropriately chosen sizes of layers and learning rates
could yield better results .
Experiment 2
Experiment 3
DBN, unsupervised pre-training
Deep net, auto-associator pre-training
Deep net, supervised pre-training
Deep net, no pre-training
Shallow net, no pre-training
Table 2: Classiﬁcation error on MNIST training, validation, and test sets, with the best hyperparameters according to validation error, with and without pre-training, using purely supervised or
purely unsupervised pre-training. In experiment 3, the size of the top hidden layer was set to 20.
On MNIST, differences of more than .1% are statistically signiﬁcant. The results in Table 2 suggest
that the auto-encoding criterion can yield performance comparable to the DBN when the layers are
ﬁnally tuned in a supervised fashion. They also clearly show that the greedy unsupervised layer-wise
pre-training gives much better results than the standard way to train a deep network (with no greedy
pre-training) or a shallow network, and that, without pre-training, deep networks tend to perform worse
than shallow networks. The results also suggest that unsupervised greedy layer-wise pre-training can
perform signiﬁcantly better than purely supervised greedy layer-wise pre-training. A possible explanation is that the greedy supervised procedure is too greedy: in the learned hidden units representation
it may discard some of the information about the target, information that cannot be captured easily by
a one-hidden-layer neural network but could be captured by composing more hidden layers.
Experiment 3
However, there is something troubling in the Experiment 2 results (Table 2): all the networks, even
those without greedy layer-wise pre-training, perform almost perfectly on the training set, which
would appear to contradict the hypothesis that the main effect of the layer-wise greedy strategy is
to help the optimization (with poor optimization one would expect poor training error). A possible
explanation coherent with our initial hypothesis and with the above results is captured by the following
hypothesis. Without pre-training, the lower layers are initialized poorly, but still allowing the top two
layers to learn the training set almost perfectly, because the output layer and the last hidden layer
form a standard shallow but fat neural network. Consider the top two layers of the deep network
with pre-training: it presumably takes as input a better representation, one that allows for better
generalization. Instead, the network without pre-training sees a “random” transformation of the input,
one that preserves enough information about the input to ﬁt the training set, but that does not help to
generalize. To test that hypothesis, we performed a second series of experiments in which we constrain
the top hidden layer to be small (20 hidden units). The Experiment 3 results (Table 2) clearly conﬁrm
our hypothesis. With no pre-training, training error degrades signiﬁcantly when there are only 20
hidden units in the top hidden layer. In addition, the results obtained without pre-training were found
to have extremely large variance indicating high sensitivity to initial conditions. Overall, the results
in the tables and in Figure 1 are consistent with the hypothesis that the greedy layer-wise procedure
essentially helps to better optimize the deep networks, probably by initializingthe hidden layers so that
they represent more meaningful representations of the input, which also yields to better generalization.
Continuous training of all layers of a DBN
With the layer-wise training algorithm for DBNs (TrainUnsupervisedDBN in Appendix), one
element that we would like to dispense with is having to decide the number of training iterations for
each layer. It would be good if we did not have to explicitly add layers one at a time, i.e., if we
could train all layers simultaneously, but keeping the “greedy” idea that each layer is pre-trained to
model its input, ignoring the effect of higher layers. To achieve this it is sufﬁcient to insert a line
in TrainUnsupervisedDBN, so that RBMupdate is called on all the layers and the stochastic
hidden values are propagated all the way up. Experiments with this variant demonstrated that it works
at least as well as the original algorithm. The advantage is that we can now have a single stopping
criterion (for the whole network). Computation time is slightly greater, since we do more computations
initially (on the upper layers), which might be wasted (before the lower layers converge to a decent
representation), but time is saved on optimizing hyper-parameters. This variant may be more appealing
for on-line training on very large data-sets, where one would never cycle back on the training data.
Dealing with uncooperative input distributions
In classiﬁcation problems such as MNIST where classes are well separated, the structure of the input
distribution p(x) naturally contains much information about the target variable y. Imagine a supervised learning task in which the input distribution is mostly unrelated with y. In regression problems,
which we are interested in studying here, this problem could be much more prevalent. For example
imagine a task in which x ∼p(x) and the target y = f(x)+noise (e.g., p is Gaussian and f = sinus)
with no particular relation between p and f. In such settings we cannot expect the unsupervised
greedy layer-wise pre-training procedure to help in training deep supervised networks. To deal with
such uncooperative input distributions, we propose to train each layer with a mixed training criterion
that combines the unsupervised objective (modeling or reconstructing the input) and a supervised objective (helping to predict the target). A simple algorithm thus adds the updates on the hidden layer
weights from the unsupervised algorithm (Contrastive Divergence or reconstruction error gradient)
with the updates from the gradient on a supervised prediction error, using a temporary output layer, as
with the greedy layer-wise supervised training algorithm. In our experiments it appeared sufﬁcient to
perform that partial supervision with the ﬁrst layer only, since once the predictive information about
the target is “forced” into the representation of the ﬁrst layer, it tends to stay in the upper layers. The
results in Figure 1 and Table 1 clearly show the advantage of this partially supervised greedy training
algorithm, in the case of the ﬁnancial dataset. Pseudo-code for partially supervising the ﬁrst (or later
layer) is given in Algorithm TrainPartiallySupervisedLayer (in the Appendix).
Conclusion
This paper is motivated by the need to develop good training algorithms for deep architectures, since
these can be much more representationally efﬁcient than shallow ones such as SVMs and one-hiddenlayer neural nets. We study Deep Belief Networks applied to supervised learning tasks, and the principles that could explain the good performance they have yielded. The three principal contributions
of this paper are the following. First we extended RBMs and DBNs in new ways to naturally handle
continuous-valued inputs, showing examples where much better predictive models can thus be obtained. Second, we performed experiments which support the hypothesis that the greedy unsupervised
layer-wise training strategy helps to optimize deep networks, but suggest that better generalization is
also obtained because this strategy initializes upper layers with better representations of relevant highlevel abstractions. These experiments suggest a general principle that can be applied beyond DBNs,
and we obtained similar results when each layer is initialized as an auto-associator instead of as an
RBM. Finally, although we found that it is important to have an unsupervised component to train each
layer (a fully supervised greedy layer-wise strategy performed worse), we studied supervised tasks in
which the structure of the input distribution is not revealing enough of the conditional density of y
given x. In that case the DBN unsupervised greedy layer-wise strategy appears inadequate and we
proposed a simple ﬁx based on partial supervision, that can yield signiﬁcant improvements.