Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 379–389,
Lisbon, Portugal, 17-21 September 2015. c⃝2015 Association for Computational Linguistics.
A Neural Attention Model for Sentence Summarization
Alexander M. Rush
Facebook AI Research /
Harvard SEAS
 
Sumit Chopra
Facebook AI Research
 
Jason Weston
Facebook AI Research
 
Summarization based on text extraction is
inherently limited, but generation-style abstractive methods have proven challenging to build.
In this work, we propose
a fully data-driven approach to abstractive sentence summarization. Our method
utilizes a local attention-based model that
generates each word of the summary conditioned on the input sentence. While the
model is structurally simple, it can easily be trained end-to-end and scales to a
large amount of training data. The model
shows signiﬁcant performance gains on
the DUC-2004 shared task compared with
several strong baselines.
Introduction
Summarization is an important challenge of natural language understanding. The aim is to produce
a condensed representation of an input text that
captures the core meaning of the original. Most
successful summarization systems utilize extractive approaches that crop out and stitch together
portions of the text to produce a condensed version. In contrast, abstractive summarization attempts to produce a bottom-up summary, aspects
of which may not appear as part of the original.
We focus on the task of sentence-level summarization.
While much work on this task has
looked at deletion-based sentence compression
techniques , among
many others), studies of human summarizers show
that it is common to apply various other operations
while condensing, such as paraphrasing, generalization, and reordering . Past work
has modeled this abstractive summarization problem either using linguistically-inspired constraints
 or with syntactic transformations of the input text (Cohn and
Example output of the attention-based summarization (ABS) system. The heatmap represents a soft alignment between the input (right) and the generated summary
(top). The columns represent the distribution over the input
after generating each word.
Lapata, 2008; Woodsend et al., 2010). These approaches are described in more detail in Section 6.
We instead explore a fully data-driven approach
for generating abstractive summaries. Inspired by
the recent success of neural machine translation,
we combine a neural language model with a contextual input encoder.
Our encoder is modeled
off of the attention-based encoder of Bahdanau et
al. in that it learns a latent soft alignment
over the input text to help inform the summary (as
shown in Figure 1). Crucially both the encoder
and the generation model are trained jointly on the
sentence summarization task. The model is described in detail in Section 3. Our model also incorporates a beam-search decoder as well as additional features to model extractive elements; these
aspects are discussed in Sections 4 and 5.
This approach to summarization, which we call
Attention-Based Summarization (ABS), incorporates less linguistic structure than comparable abstractive summarization approaches, but can easily
Input (x1, . . . , x18). First sentence of article:
russian defense minister ivanov called sunday for the creation of a joint front for combating global terrorism
Output (y1, . . . , y8). Generated headline:
russia calls for joint front against terrorism
g(terrorism, x, for, joint, front, against)
Figure 2: Example input sentence and the generated summary. The score of generating yi+1 (terrorism) is based on the
context yc (for . . . against) as well as the input x1 . . . x18. Note that the summary generated is abstractive which makes
it possible to generalize (russian defense minister to russia) and paraphrase (for combating to against),
in addition to compressing (dropping the creation of), see Jing for a survey of these editing operations.
scale to train on a large amount of data. Since our
system makes no assumptions about the vocabulary of the generated summary it can be trained
directly on any document-summary pair.1
allows us to train a summarization model for
headline-generation on a corpus of article pairs
from Gigaword consisting of
around 4 million articles. An example of generation is given in Figure 2, and we discuss the details
of this task in Section 7.
To test the effectiveness of this approach we
run extensive comparisons with multiple abstractive and extractive baselines, including traditional
syntax-based systems, integer linear programconstrained systems, information-retrieval style
approaches, as well as statistical phrase-based machine translation. Section 8 describes the results
of these experiments. Our approach outperforms
a machine translation system trained on the same
large-scale dataset and yields a large improvement
over the highest scoring system in the DUC-2004
competition.
Background
We begin by deﬁning the sentence summarization
task. Given an input sentence, the goal is to produce a condensed summary. Let the input consist of a sequence of M words x1, . . . , xM coming from a ﬁxed vocabulary V of size |V| = V .
We will represent each word as an indicator vector
xi ∈{0, 1}V for i ∈{1, . . . , M}, sentences as a
sequence of indicators, and X as the set of possible inputs. Furthermore deﬁne the notation x[i,j,k]
to indicate the sub-sequence of elements i, j, k.
A summarizer takes x as input and outputs a
shortened sentence y of length N < M. We will
assume that the words in the summary also come
from the same vocabulary V and that the output is
1In contrast to a large-scale sentence compression systems like Filippova and Altun which require monotonic aligned compressions.
a sequence y1, . . . , yN. Note that in contrast to
related tasks, like machine translation, we will assume that the output length N is ﬁxed, and that
the system knows the length of the summary before generation.2
generating
summaries.
({0, 1}V , . . . , {0, 1}V ) as all possible
sentences of length N, i.e. for all i and y ∈Y, yi
is an indicator. We say a system is abstractive if it
tries to ﬁnd the optimal sequence from this set Y,
under a scoring function s : X ×Y 7→R. Contrast
this to a fully extractive sentence summary3 which
transfers words from the input:
m∈{1,...M}N s(x, x[m1,...,mN]),
or to the related problem of sentence compression
that concentrates on deleting words from the input:
m∈{1,...M}N,mi−1<mi
s(x, x[m1,...,mN]).
While abstractive summarization poses a more dif-
ﬁcult generation challenge, the lack of hard constraints gives the system more freedom in generation and allows it to ﬁt with a wider range of training data.
In this work we focus on factored scoring functions, s, that take into account a ﬁxed window of
previous words:
g(yi+1, x, yc),
2For the DUC-2004 evaluation, it is actually the number
of bytes of the output that is capped. More detail is given in
Section 7.
3Unfortunately the literature is inconsistent on the formal
deﬁnition of this distinction. Some systems self-described as
abstractive would be extractive under our deﬁnition.
where we deﬁne yc ≜y[i−C+1,...,i] for a window
of size C.
In particular consider the conditional logprobability
s(x, y) = log p(y|x; θ). We can write this as:
log p(y|x; θ)
log p(yi+1|x, yc; θ),
where we make a Markov assumption on the
length of the context as size C and assume for
i < 1, yi is a special start symbol ⟨S⟩.
With this scoring function in mind, our main
focus will be on modelling the local conditional
distribution: p(yi+1|x, yc; θ).
The next section
deﬁnes a parameterization for this distribution, in
Section 4, we return to the question of generation
for factored models, and in Section 5 we introduce
a modiﬁed factored scoring function.
The distribution of interest, p(yi+1|x, yc; θ), is
a conditional language model based on the input sentence x. Past work on summarization and
compression has used a noisy-channel approach to
split and independently estimate a language model
and a conditional summarization model , i.e.,
log p(y|x) = arg max
log p(y)p(x|y)
where p(y) and p(x|y) are estimated separately.
Here we instead follow work in neural machine
translation and directly parameterize the original
distribution as a neural network. The network contains both a neural probabilistic language model
and an encoder which acts as a conditional summarization model.
Neural Language Model
The core of our parameterization is a language
model for estimating the contextual probability of
the next word.
The language model is adapted
from a standard feed-forward neural network language model (NNLM), particularly the class of
NNLMs described by Bengio et al. . The
full model is:
p(yi+1|yc, x; θ)
exp(Vh + Wenc(x, yc)),
[Eyi−C+1, . . . , Eyi],
tanh(U˜yc).
p(yi+1|x, yc; θ)
(a) A network diagram for the NNLM decoder
with additional encoder element. (b) A network diagram for
the attention-based encoder enc3.
The parameters are θ = (E, U, V, W) where
E ∈RD×V is a word embedding matrix, U ∈
R(CD)×H, V ∈RV ×H, W ∈RV ×H are weight
matrices,4 D is the size of the word embeddings,
and h is a hidden layer of size H. The black-box
function enc is a contextual encoder term that returns a vector of size H representing the input and
current context; we consider several possible variants, described subsequently. Figure 3a gives a
schematic representation of the decoder architecture.
Note that without the encoder term this represents
a standard language model. By incorporating in
enc and training the two elements jointly we crucially can incorporate the input text into generation. We discuss next several possible instantiations of the encoder.
Bag-of-Words Encoder
Our most basic model
simply uses the bag-of-words of the input sentence
embedded down to size H, while ignoring properties of the original order or relationships between
neighboring words. We write this model as:
enc1(x, yc)
[1/M, . . . , 1/M],
[Fx1, . . . , FxM].
Where the input-side embedding matrix F
RH×V is the only new parameter of the encoder
and p ∈ M is a uniform distribution over the
input words.
4Each of the weight matrices U, V, W also has a corresponding bias term. For readability, we omit these terms
throughout the paper.
For summarization this model can capture the
relative importance of words to distinguish content words from stop words or embellishments.
Potentially the model can also learn to combine
words; although it is inherently limited in representing contiguous phrases.
Convolutional Encoder
To address some of the
modelling issues with bag-of-words we also consider using a deep convolutional encoder for the
input sentence. This architecture improves on the
bag-of-words model by allowing local interactions
between words while also not requiring the context yc while encoding the input.
We utilize a standard time-delay neural network
(TDNN) architecture, alternating between temporal convolution layers and max pooling layers.
∀j, enc2(x, yc)j
∀i, l ∈{1, . . . L}, ˜xl
tanh(max{¯xl
∀i, l ∈{1, . . . L}, ¯xl
[i−Q,...,i+Q],
[Fx1, . . . , FxM].
Where F is a word embedding matrix and
QL×H×2Q+1 consists of a set of ﬁlters for each
layer {1, . . . L}. Eq. 7 is a temporal (1D) convolution layer, Eq. 6 consists of a 2-element temporal
max pooling layer and a pointwise non-linearity,
and ﬁnal output Eq. 5 is a max over time. At each
layer ˜x is one half the size of ¯x. For simplicity
we assume that the convolution is padded at the
boundaries, and that M is greater than 2L so that
the dimensions are well-deﬁned.
Attention-Based Encoder
While the convolutional encoder has richer capacity than bag-ofwords, it still is required to produce a single representation for the entire input sentence. A similar issue in machine translation inspired Bahdanau
et al. to instead utilize an attention-based
contextual encoder that constructs a representation
based on the generation context. Here we note that
if we exploit this context, we can actually use a
rather simple model similar to bag-of-words:
enc3(x, yc)
exp(˜xP˜y′
[Fx1, . . . , FxM],
[Gyi−C+1, . . . , Gyi],
Where G ∈RD×V is an embedding of the context, P ∈RH×(CD) is a new weight matrix parameter mapping between the context embedding
and input embedding, and Q is a smoothing window. The full model is shown in Figure 3b.
Informally we can think of this model as simply
replacing the uniform distribution in bag-of-words
with a learned soft alignment, P, between the input and the summary. Figure 1 shows an example of this distribution p as a summary is generated. The soft alignment is then used to weight
the smoothed version of the input ¯x when constructing the representation.
For instance if the
current context aligns well with position i then
the words xi−Q, . . . , xi+Q are highly weighted
by the encoder. Together with the NNLM, this
model can be seen as a stripped-down version
of the attention-based neural machine translation
The lack of generation constraints makes it possible to train the model on arbitrary input-output
Once we have deﬁned the local conditional model, p(yi+1|x, yc; θ), we can estimate
the parameters to minimize the negative loglikelihood of a set of summaries. Deﬁne this training set as consisting of J input-summary pairs
(x(1), y(1)), . . . , (x(J), y(J)).
The negative loglikelihood conveniently factors6 into a term for
each token in the summary:
log p(y(j)|x(j); θ),
log p(y(j)
i+1|x(j), yc; θ).
We minimize NLL by using mini-batch stochastic
gradient descent. The details are described further
in Section 7.
5To be explicit, compared to Bahdanau et al. 
our model uses an NNLM instead of a target-side LSTM,
source-side windowed averaging instead of a source-side bidirectional RNN, and a weighted dot-product for alignment
instead of an alignment MLP.
6This is dependent on using the gold standard contexts
yc. An alternative is to use the predicted context within a
structured or reenforcement-learning style objective.
Generating Summaries
We now return to the problem of generating summaries. Recall from Eq. 4 that our goal is to ﬁnd,
g(yi+1, x, yc).
Unlike phrase-based machine translation where
inference is NP-hard, it actually is tractable in theory to compute y∗. Since there is no explicit hard
alignment constraint, Viterbi decoding can be applied and requires O(NV C) time to ﬁnd an exact
solution. In practice though V is large enough to
make this difﬁcult.
An alternative approach is to approximate the
arg max with a strictly greedy or deterministic decoder. While decoders of this form can produce
very bad approximations, they have shown to be
relatively effective and fast for neural MT models
 .
A compromise between exact and greedy decoding is to use a beam-search decoder (Algorithm 1) which maintains the full vocabulary V
while limiting itself to K potential hypotheses at
each position of the summary. The beam-search
algorithm is shown here:
Algorithm 1 Beam Search
Input: Parameters θ, beam size K, input x
Output: Approx. K-best summaries
S = V if abstractive else {xi | ∀i}
for i = 0 to N −1 do
▷Generate Hypotheses
[y, yi+1]
y ∈π[i], yi+1 ∈S
▷Hypothesis Recombination
s(y, x) > s(y′, x)
∀y′ ∈N s.t. yc = y′
▷Filter K-Max
π[i + 1] ←K-arg max
g(yi+1, yc, x) + s(y, x)
return π[N]
As with Viterbi this beam search algorithm is
much simpler than beam search for phrase-based
MT. Because there is no explicit constraint that
each source word be used exactly once there is
no need to maintain a bit set and we can simply move from left-to-right generating words. The
beam search algorithm requires O(KNV ) time.
From a computational perspective though, each
round of beam search is dominated by computing
p(yi|x, yc) for each of the K hypotheses. These
can be computed as a mini-batch, which in practice greatly reduces the factor of K.
Extension: Extractive Tuning
While we will see that the attention-based model
is effective at generating summaries, it does miss
an important aspect seen in the human-generated
references.
In particular the abstractive model
does not have the capacity to ﬁnd extractive word
matches when necessary, for example transferring
unseen proper noun phrases from the input. Similar issues have also been observed in neural translation models particularly in terms of translating
rare words .
To address this issue we experiment with tuning
a very small set of additional features that tradeoff the abstractive/extractive tendency of the system. We do this by modifying our scoring function
to directly estimate the probability of a summary
using a log-linear model, as is standard in machine
translation:
p(y|x; θ, α)
f(yi+1, x, yc)).
Where α ∈R5 is a weight vector and f is a feature function. Finding the best summary under this
distribution corresponds to maximizing a factored
scoring function s,
α⊤f(yi+1, x, yc).
where g(yi+1, x, yc) ≜α⊤f(yi+1, x, yc) to satisfy Eq. 4. The function f is deﬁned to combine
the local conditional probability with some additional indicator featrues:
f(yi+1, x, yc) = [ log p(yi+1|x, yc; θ),
1{∃j. yi+1 = xj },
1{∃j. yi+1−k = xj−k ∀k ∈{0, 1}},
1{∃j. yi+1−k = xj−k ∀k ∈{0, 1, 2}},
1{∃k > j. yi = xk, yi+1 = xj} ].
These features correspond to indicators of unigram, bigram, and trigram match with the input as
well as reordering of input words. Note that setting α = ⟨1, 0, . . . , 0⟩gives a model identical to
standard ABS.
After training the main neural model, we ﬁx θ
and tune the α parameters. We follow the statistical machine translation setup and use minimumerror rate training (MERT) to tune for the summarization metric on tuning data . This
tuning step is also identical to the one used for the
phrase-based machine translation baseline.
Related Work
Abstractive sentence summarization has been traditionally connected to the task of headline generation. Our work is similar to early work of Banko
et al. who developed a statistical machine
translation-inspired approach for this task using a
corpus of headline-article pairs. We extend this
approach by: (1) using a neural summarization
model as opposed to a count-based noisy-channel
model, (2) training the model on much larger scale
(25K compared to 4 million articles), (3) and allowing fully abstractive decoding.
This task was standardized around the DUC-
2003 and DUC-2004 competitions . The TOPIARY system 
performed the best in this task, and is described in
detail in the next section. We point interested readers to the DUC web page ( 
gov/) for the full list of systems entered in this
shared task.
More recently, Cohn and Lapata give a
compression method which allows for more arbitrary transformations. They extract tree transduction rules from aligned, parsed texts and learn
weights on transfomations using a max-margin
learning algorithm. Woodsend et al. propose a quasi-synchronous grammar approach utilizing both context-free parses and dependency
parses to produce legible summaries.
these approaches differ from ours in that they directly use the syntax of the input/output sentences.
The latter system is W&L in our results; we attempted to train the former system T3 on this
dataset but could not train it at scale.
In addition to Banko et al. there has been
some work using statistical machine translation
directly for abstractive summary. Wubben et al.
 utilize MOSES directly as a method for text
simpliﬁcation.
Recently Filippova and Altun developed
a strictly extractive system that is trained on a relatively large corpora (250K sentences) of articletitle pairs. Because their focus is extractive compression, the sentences are transformed by a series
of heuristics such that the words are in monotonic
alignment. Our system does not require this alignment step but instead uses the text directly.
This work is closely related to recent work on neural network language models
(NNLM) and to work on neural machine translation. The core of our model is a NNLM based on
that of Bengio et al. .
Recently, there have been several papers about
models for machine translation . Of these our model is most closely related
to the attention-based model of Bahdanau et al.
 , which explicitly ﬁnds a soft alignment between the current position and the input source.
Most of these models utilize recurrent neural networks (RNNs) for generation as opposed to feedforward models. We hope to incorporate an RNN-
LM in future work.
Experimental Setup
We experiment with our attention-based sentence
summarization model on the task of headline generation. In this section we describe the corpora
used for this task, the baseline methods we compare with, and implementation details of our approach.
The standard sentence summarization evaluation
set is associated with the DUC-2003 and DUC-
2004 shared tasks .
data for this task consists of 500 news articles from the New York Times and Associated
Press Wire services each paired with 4 different
human-generated reference summaries (not actually headlines), capped at 75 bytes.
set is evaluation-only, although the similarly sized
DUC-2003 data set was made available for the
task. The expectation is for a summary of roughly
14 words, based on the text of a complete article (although we only make use of the ﬁrst sentence). The full data set is available by request at
 
For this shared task, systems were entered and
evaluated using several variants of the recalloriented ROUGE metric .
recall-only evaluation unbiased to length, output of all systems is cut-off after 75-characters
and no bonus is given for shorter summaries.
Unlike BLEU which interpolates various n-gram
matches, there are several versions of ROUGE
for different match lengths. The DUC evaluation
uses ROUGE-1 (unigrams), ROUGE-2 (bigrams),
and ROUGE-L (longest-common substring), all of
which we report.
In addition to the standard DUC-2014 evaluation, we also report evaluation on single reference headline-generation using a randomly heldout subset of Gigaword. This evaluation is closer
to the task the model is trained for, and it allows
us to use a bigger evaluation set, which we will include in our code release. For this evaluation, we
tune systems to generate output of the average title
For training data for both tasks, we utilize the
annotated Gigaword data set , which consists of standard
Gigaword, preprocessed with Stanford CoreNLP
tools . Our model only uses
annotations for tokenization and sentence separation, although several of the baselines use parsing
and tagging as well. Gigaword contains around 9.5
million news articles sourced from various domestic and international news services over the last
two decades.
For our training set, we pair the headline of each
article with its ﬁrst sentence to create an inputsummary pair. While the model could in theory be
trained on any pair, Gigaword contains many spurious headline-article pairs. We therefore prune
training based on the following heuristic ﬁlters:
(1) Are there no non-stop-words in common? (2)
Does the title contain a byline or other extraneous editing marks? (3) Does the title have a question mark or colon? After applying these ﬁlters,
the training set consists of roughly J = 4 million
title-article pairs. We apply a minimal preprocessing step using PTB tokenization, lower-casing, replacing all digit characters with #, and replacing
of word types seen less than 5 times with UNK.
We also remove all articles from the time-period
of the DUC evaluation. release.
The complete input training vocabulary consists
of 119 million word tokens and 110K unique word
types with an average sentence size of 31.3 words.
The headline vocabulary consists of 31 million tokens and 69K word types with the average title
of length 8.3 words (note that this is signiﬁcantly
shorter than the DUC summaries).
On average
there are 4.6 overlapping word types between the
headline and the input; although only 2.6 in the
ﬁrst 75-characters of the input.
Due to the variety of approaches to the sentence
summarization problem, we report a broad set of
headline-generation baselines.
From the DUC-2004 task we include the PRE-
FIX baseline that simply returns the ﬁrst 75characters of the input as the headline.
also report the winning system on this shared
task, TOPIARY .
merges a compression system using linguisticallymotivated transformations of the input with an unsupervised topic detection (UTD)
algorithm that appends key phrases from the full
article onto the compressed output. Woodsend et
al. (described above) also report results on
the DUC dataset.
The DUC task also includes a set of manual
summaries performed by 8 human summarizers
each summarizing half of the test data sentences
(yielding 4 references per sentence). We report the
average inter-annotater agreement score as REF-
ERENCE. For reference, the best human evaluator
scores 31.7 ROUGE-1.
We also include several baselines that have access to the same training data as our system. The
ﬁrst is a sentence compression baseline COM-
PRESS .
This model
uses the syntactic structure of the original sentence
along with a language model trained on the headline data to produce a compressed output.
syntax and language model are combined with a
set of linguistic constraints and decoding is performed with an ILP solver.
To control for memorizing titles from training,
we implement an information retrieval baseline,
IR. This baseline indexes the training set, and
gives the title for the article with highest BM-25
match to the input ).
Finally, we use a phrase-based statistical machine translation system trained on Gigaword
to produce summaries, MOSES+ . To improve the baseline for this task, we
augment the phrase table with “deletion” rules
mapping each article word to ϵ, include an additional deletion feature for these rules, and allow
for an inﬁnite distortion limit.
We also explicitly tune the model using MERT to target the 75byte capped ROUGE score as opposed to standard
Experimental results on the main summary tasks on various ROUGE metrics . Baseline models are described in
detail in Section 7.2. We report the percentage of tokens in the summary that also appear in the input for Gigaword as Ext %.
BLEU-based tuning. Unfortunately, one remaining issue is that it is non-trivial to modify the translation decoder to produce ﬁxed-length outputs, so
we tune the system to produce roughly the expected length.
Implementation
For training, we use mini-batch stochastic gradient
descent to minimize negative log-likelihood. We
use a learning rate of 0.05, and split the learning
rate by half if validation log-likelihood does not
improve for an epoch. Training is performed with
shufﬂed mini-batches of size 64. The minibatches
are grouped by input length. After each epoch, we
renormalize the embedding tables . Based on the validation set, we set hyperparameters as D = 200, H = 400, C = 5, L = 3,
and Q = 2.
Our implementation uses the Torch numerical
framework ( and will be
openly available along with the data pipeline. Crucially, training is performed on GPUs and would
be intractable or require approximations otherwise. Processing 1000 mini-batches with D =
200, H = 400 requires 160 seconds. Best validation accuracy is reached after 15 epochs through
the data, which requires around 4 days of training.
Additionally, as described in Section 5 we apply
a MERT tuning step after training using the DUC-
2003 data. For this step we use Z-MERT . We refer to the main model as ABS and the
tuned model as ABS+.
Our main results are presented in Table 1.
run experiments both using the DUC-2004 evaluation data set (500 sentences, 4 references, 75
bytes) with all systems and a randomly held-out
Gigaword test set .
We ﬁrst note that the baselines COMPRESS and IR
do relatively poorly on both datasets, indicating
that neither just having article information or language model information alone is sufﬁcient for the
task. The PREFIX baseline actually performs surprisingly well on ROUGE-1 which makes sense
given the earlier observed overlap between article
and summary.
than TOPIARY, particularly on ROUGE-2 and
ROUGE-L in DUC. The full model ABS+ scores
the best on these tasks, and is signiﬁcantly better
based on the default ROUGE conﬁdence level
than TOPIARY on all metrics, and MOSES+ on
ROUGE-1 for DUC as well as ROUGE-1 and
ROUGE-L for Gigaword. Note that the additional
extractive features bias the system towards retaining more input words, which is useful for the
underlying metric.
Next we consider ablations to the model and algorithm structure. Table 2 shows experiments for
the model with various encoders. For these experiments we look at the perplexity of the system as
a language model on validation data, which controls for the variable of inference and tuning. The
NNLM language model with no encoder gives a
gain over the standard n-gram language model.
Including even the bag-of-words encoder reduces
perplexity number to below 50. Both the convolutional encoder and the attention-based encoder
further reduce the perplexity, with attention giving
a value below 30.
We also consider model and decoding ablations
on the main summary model, shown in Table 3.
These experiments compare to the BoW encoding
models, compare beam search and greedy decoding, as well as restricting the system to be com-
Perplexity
KN-Smoothed 5-Gram
Feed-Forward NNLM
Bag-of-Word
Convolutional (TDNN)
Attention-Based (ABS)
Perplexity results on the Gigaword validation
set comparing various language models with C=5 and endto-end summarization models. The encoders are deﬁned in
Section 3.
Table 3: ROUGE scores on DUC-2003 development data
for various versions of inference. Greedy and Beam are described in Section 4. Ext. is a purely extractive version of the
system (Eq. 2)
plete extractive. Of these features, the biggest impact is from using a more powerful encoder (attention versus BoW), as well as using beam search to
generate summaries. The abstractive nature of the
system helps, but for ROUGE even using pure extractive generation is effective.
Finally we consider example summaries shown
in Figure 4.
Despite improving on the baseline scores, this model is far from human performance on this task. Generally the models are
good at picking out key words from the input,
such as names and places. However, both models
will reorder words in syntactically incorrect ways,
for instance in Sentence 7 both models have the
wrong subject. ABS often uses more interesting
re-wording, for instance new nz pm after election
in Sentence 4, but this can also lead to attachment
mistakes such a russian oil giant chevron in Sentence 11.
Conclusion
We have presented a neural attention-based model
for abstractive summarization, based on recent developments in neural machine translation.
combine this probabilistic model with a generation algorithm which produces accurate abstractive summaries.
As a next step we would like
to further improve the grammaticality of the summaries in a data-driven way, as well as scale this
system to generate paragraph-level summaries.
Both pose additional challenges in terms of efﬁcient alignment and consistency in generation.
I(1): a detained iranian-american academic accused of acting against
national security has been released from a tehran prison after a hefty
bail was posted , a to p judiciary ofﬁcial said tuesday .
G: iranian-american academic held in tehran released on bail
A: detained iranian-american academic released from jail after posting
A+: detained iranian-american academic released from prison after
hefty bail
I(2): ministers from the european union and its mediterranean neighbors
gathered here under heavy security on monday for an unprecedented
conference on economic and political cooperation .
G: european mediterranean ministers gather for landmark conference
by julie bradford
A: mediterranean neighbors gather for unprecedented conference on
heavy security
A+: mediterranean neighbors gather under heavy security for unprecedented conference
I(3): the death toll from a school collapse in a haitian shanty-town rose
to ## after rescue workers uncovered a classroom with ## dead students
and their teacher , ofﬁcials said saturday .
G: toll rises to ## in haiti school unk : ofﬁcial
A: death toll in haiti school accident rises to ##
A+: death toll in haiti school to ## dead students
I(4): australian foreign minister stephen smith sunday congratulated
new zealand ’s new prime minister-elect john key as he praised ousted
leader helen clark as a “ gutsy ” and respected politician .
G: time caught up with nz ’s gutsy clark says australian fm
A: australian foreign minister congratulates new nz pm after election
A+: australian foreign minister congratulates smith new zealand as
I(5): two drunken south african fans hurled racist abuse at the country
’s rugby sevens coach after the team were eliminated from the weekend
’s hong kong tournament , reports said tuesday .
G: rugby union : racist taunts mar hong kong sevens : report
A: south african fans hurl racist taunts at rugby sevens
A+: south african fans racist abuse at rugby sevens tournament
I(6): christian conservatives – kingmakers in the last two us presidential
elections – may have less success in getting their pick elected in #### ,
political observers say .
G: christian conservatives power diminished ahead of #### vote
A: christian conservatives may have less success in #### election
A+: christian conservatives in the last two us presidential elections
I(7): the white house on thursday warned iran of possible new sanctions
after the un nuclear watchdog reported that tehran had begun sensitive
nuclear work at a key site in deﬁance of un resolutions .
G: us warns iran of step backward on nuclear issue
A: iran warns of possible new sanctions on nuclear work
A+: un nuclear watchdog warns iran of possible new sanctions
I(8): thousands of kashmiris chanting pro-pakistan slogans on sunday
attended a rally to welcome back a hardline separatist leader who
underwent cancer treatment in mumbai .
G: thousands attend rally for kashmir hardliner
A: thousands rally in support of hardline kashmiri separatist leader
A+: thousands of kashmiris rally to welcome back cancer treatment
I(9): an explosion in iraq ’s restive northeastern province of diyala
killed two us soldiers and wounded two more , the military reported
G: two us soldiers killed in iraq blast december toll ###
A: # us two soldiers killed in restive northeast province
A+: explosion in restive northeastern province kills two us soldiers
I(10): russian world no. # nikolay davydenko became the ﬁfth withdrawal through injury or illness at the sydney international wednesday ,
retiring from his second round match with a foot injury .
G: tennis : davydenko pulls out of sydney with injury
A: davydenko pulls out of sydney international with foot injury
A+: russian world no. # davydenko retires at sydney international
I(11): russia ’s gas and oil giant gazprom and us oil major chevron have
set up a joint venture based in resource-rich northwestern siberia , the
interfax news agency reported thursday quoting gazprom ofﬁcials .
G: gazprom chevron set up joint venture
A: russian oil giant chevron set up siberia joint venture
A+: russia ’s gazprom set up joint venture in siberia
Example sentence summaries produced on Gigaword. I is the input, A is ABS, and G is the true headline.