Machine Learning, 54, 255–273, 2004
c⃝2004 Kluwer Academic Publishers. Manufactured in The Netherlands.
Is Combining Classiﬁers with Stacking
Better than Selecting the Best One?
SASO DˇZEROSKI
 
BERNARD ˇZENKO
 
Department of Knowledge Technologies, Joˇzef Stefan Institute, Jamova 39, SI-1000 Ljubljana, Slovenia
Editors: Christophe Giraud-Carrier, Ricardo Vilalta and Pavel Brazdil
We empirically evaluate several state-of-the-art methods for constructing ensembles of heterogeneous
classiﬁers with stacking and show that they perform (at best) comparably to selecting the best classiﬁer from the
ensemble by cross validation. Among state-of-the-art stacking methods, stacking with probability distributions and
multi-response linear regression performs best. We propose two extensions of this method, one using an extended
set of meta-level features and the other using multi-response model trees to learn at the meta-level. We show that
the latter extension performs better than existing stacking approaches and better than selecting the best classiﬁer
by cross validation.
multi-response model trees, stacking, combining classiﬁers, ensembles of classiﬁers, meta-learning
Introduction
An ensemble of classiﬁers is a set of classiﬁers whose individual predictions are combined
in some way (typically by voting) to classify new examples. One of the most active areas of
research in supervised learning has been to study methods for constructing good ensembles
of classiﬁers . The attraction that this topic exerts on machine learning
researchers is based on the premise that ensembles are often much more accurate than the
individual classiﬁers that make them up , such as decision tree learning or
neural network training. Different classiﬁers are generated by manipulating the training set
(as done in boosting or bagging), manipulating the input features, manipulating the output
targets or injecting randomness in the learning algorithm. The generated classiﬁers are then
typically combined by majority or weighted voting.
Another approach is to generate classiﬁers by applying different learning algorithms
(with heterogeneous model representations) to a single dataset .
More complicated methods for combining classiﬁers are typically used in this setting.
Stacking is often used to learn a combining method in addition to the
ensemble of classiﬁers. Voting is then used as a baseline method for combining classiﬁers against which the learned combiners are compared. Typically, much better
S. DˇZEROSKI AND B. ˇZENKO
performance is achieved by stacking as compared to voting .
The work presented in this paper is set in the stacking framework. We argue that selecting
the best of the classiﬁers in an ensemble generated by applying different learning algorithms
should be considered as a baseline to which the stacking performance should be compared.
Our empirical evaluation of several recent stacking approaches shows that they perform
comparably to the best of the individual classiﬁers as selected by cross validation, but not
The best among state-of-the-art methods is stacking with probability distributions (PDs)
and multi-response linear regression (MLR) . We propose two extensions of this method, one using an extended set of meta-level features and the other using
multi-response model trees to learn at the meta-level. We show that the latter extension
performs better than existing stacking approaches and selecting the best classiﬁer by cross
validation.
To place our work in a wider context, note that combining classiﬁers with stacking can
be considered as meta-learning. Literally, meta-learning means learning about learning. In
practice, meta-learning takes as input results produced by learning and generalizes over
them. The following meta-learning tasks have been considered within the machine learning
community: learning to select an appropriate learner, learning to dynamically select an
appropriate bias, and learning to combine predictions of base-level classiﬁers. Below we
brieﬂy describe each of these.
• Learning how to select the most appropriate learner. The appropriateness of a learner
for a given domain is assessed according to some criterion, which is usually predictive
acuracy. The general idea is that we describe each domain by a set of meta-features that are
relevant to the performance of learning algorithms. The descriptions of several domains
in terms of these meta-features, together with algorithm performances on these domains,
constitute a meta-domain to which a meta-learner is applied. The resulting meta-classiﬁer
should be able to recommend the most appropriate learner for a new domain.
• Learning how to dynamically select a bias for a learning algorithm. The goal here is to
construct a learning algorithm that would be able to modify its hypothesis space in order
to have better coverage of the domain at hand.
• Learning how to combine the predictions of base-level classiﬁers. The predictions of
base-level classiﬁers (or some properties thereof), together with the correct class values
constitute a meta-level dataset. This is the type of meta-learning addressed in this paper.
For more details on meta-learning, we refer the reader to the excellent review of different
aspects of meta-learning by Vilalta and Drissi .
The remainder of this paper is organized as follows. Section 2 ﬁrst summarizes the stacking framework, then describes stacking with probability distributions and multi-response
linear regression, and ﬁnally surveys some other recent stacking approaches and results.
Section 3 introduces our two extensions to stacking with PDs and MLR: the use of an
extended set of meta-level features and classiﬁcation via model trees at the meta-level. The
setup for the experimental comparison of several stacking methods, voting and selecting the
IS COMBINING CLASSIFIERS BETTER THAN SELECTING THE BEST ONE?
best classiﬁer is described in Section 4. Section 5 presents and discusses the experimental
results and Section 6 concludes.
Stacking: State-of-the-art
We ﬁrst give a brief introduction to the stacking framework, introduced by Wolpert .
We then describe the stacking approach proposed by Ting and Witten and review
severalrecentstudiesinstacking .
The stacking framework
Stackingisconcernedwithcombiningmultipleclassiﬁersgeneratedbyusingdifferentlearning algorithms L1, . . . , L N on a single dataset S, which consists of examples si = (xi, yi),
i.e., pairs of feature vectors (xi) and their classiﬁcations (yi). In the ﬁrst phase, a set
of base-level classiﬁers C1, C2, . . . , CN is generated, where Ci = Li(S). In the second phase, a meta-level classiﬁer is learned that combines the outputs of the base-level
classiﬁers.
To generate a training set for learning the meta-level classiﬁer, a leave-one-out or a
cross validation procedure is applied. For leave-one-out, we apply each of the base-level
learning algorithms to almost the entire dataset, leaving one example for testing: ∀i =
1, . . . , n : ∀k = 1, . . . , N : Ci
k = Lk(S −si). We then use the learned classiﬁers to
generate predictions for si: ˆyk
k(xi). The meta-level dataset consists of examples of the
form ((ˆy1
i , . . . , ˆyn
i ), yi), where the features are the predictions of the base-level classiﬁers
and the class is the correct class of the example at hand. When performing, say, 10-fold
cross validation, instead of leaving out one example at a time, subsets of size one-tenth
of the original dataset are left out and the predictions of the learned base-level classiﬁers
obtained on these.
In contrast to stacking, no learning takes place at the meta-level when combining classiﬁers by a voting scheme (such as plurality, probabilistic or weighted voting). The voting
scheme remains the same for all different training sets and sets of learning algorithms (or
base-level classiﬁers). The simplest voting scheme is the plurality vote. According to this
voting scheme, each base-level classiﬁer casts a vote for its prediction. The example is
classiﬁed in the class that collects the most votes.
Stacking with probability distributions and multi-response linear regression
Ting and Witten stack base-level classiﬁers whose predictions are probability distributions (PDs) over the set of class values, rather than single class values. The meta-level
attributes are thus the probabilities of each of the class values returned by each of the baselevel classiﬁers. The authors argue that this allows them to use not only the predictions, but
also the conﬁdence of the base-level classiﬁers.
S. DˇZEROSKI AND B. ˇZENKO
Each base-level classiﬁer predicts a PD over the possible class values. The prediction of
the base-level classiﬁer C applied to example x is a PD:
pC(x) = (pC(c1 | x), pC(c2 | x), . . . pC(cm | x)),
where {c1, c2, . . . cm} is the set of possible class values and pC(ci | x) denotes the probability
that example x belongs to class ci as estimated (and predicted) by classiﬁer C. The class
c j with the highest class probability pC(c j | x) is predicted by classiﬁer C. The meta-level
attributes are the probabilities predicted for each possible class by
each of the base-level classiﬁers, i.e.,
pC j(ci | x)
for i = 1, . . . , m and j = 1, . . . , N.
Multi-response linear regression (MLR) is recommended for meta-level learning, while
several other learning algorithms are shown not to be suitable for this task . MLR is an adaptation of linear regression. For a classiﬁcation problem with m class
values {c1, c2, . . . , cm}, m regression problems are formulated: for each class c j, a linear
equation LR j is constructed to predict a binary variable, which has value one if the class
value is c j and zero otherwise. Given a new example x to classify, LR j(x) is calculated for
all j, and the class k is predicted with maximum LRk(x).
Seewald recently proposed that MLR should use different sets of meta-level
attributes for each of the m binary prediction problems. Only the probabilities of class c j
predicted by the different classiﬁers, i.e., pCi(c j | x) for i = 1, . . . , N, are used to construct
equation LR j. Each of the meta-level learning problems thus has N instead of mN attributes.
Improved performance is reported over stacking with the full set of probability distributions.
Other recent advances in stacking
The most important issues in stacking are probably the choice of the features and the
algorithm for learning at the meta-level. Stacking with PDs and MLRs addresses both.
Below we review some other recent research on stacking that addresses these issues.
It is common knowledge that ensembles of diverse base-level classiﬁers (with weakly
correlated predictions) yield good performance. Merz proposes a stacking method
called SCANN that uses correspondence analysis to detect correlations between the predictions of base-level classiﬁers. The original meta-level feature space (the class-value
predictions) is transformed to remove these correlations, and a nearest neighbor method is
used as the meta-level classiﬁer on this new feature space.
Todorovski and Dˇzeroski introduce a new meta-level learning method for combining classiﬁers with stacking: meta decision trees (MDTs) have base-level classiﬁers in
the leaves, instead of class-value predictions. Properties of the probability distributions predicted by the base-level classiﬁers (such as entropy and maximum probability) are used as
meta-level attributes, rather than the distributions themselves. These properties reﬂect the
conﬁdence of the base-level classiﬁers and give rise to very small MDTs, which can (at
least in principle) be inspected and interpreted.
IS COMBINING CLASSIFIERS BETTER THAN SELECTING THE BEST ONE?
Todorovski and Dˇzeroski report that stacking with MDTs clearly outperforms
voting and stacking with decision trees, as well as boosting and bagging of decision trees.
On the other hand, MDTs perform only slightly better than SCANN and selecting the best
classiﬁer with cross validation (SelectBest). ˇZenko et al. report that MDTs perform
slightly worse as compared to stacking with MLR. Overall, SCANN, MDTs, stacking with
MLR and SelectBest seem to perform at about the same level.
It would seem natural to expect that ensembles of classiﬁers induced by stacking would
perform better than the best individual base-level classiﬁer: otherwise the extra work of
learning a meta-level classiﬁer doesn’t seem justiﬁed. The experimental results mentioned
above, however, do not show clear evidence of this. This has motivated us to investigate
the performance of state-of-the-art stacking methods in comparison to SelectBest and seek
new stacking methods that would be clearly superior to SelectBest.
Extending stacking with MLR
The experimental evidence mentioned above indicates that although SCANN, MDTs, stacking with MLR and SelectBest seem to perform at about the same level, stacking with MLR
has a slight advantage over the other methods. It would thus seem as a suitable starting point
in the search for better stacking approaches. Here we propose two extensions of stacking
with MLR, one along the dimension of meta-level features and the other along the dimension
of meta-level learning algorithms.
An extended set of meta-level features
Recall that Ting and Witten propose to use as meta-level features the probabilities
predicted for each possible class by each of the base-level classiﬁers, i.e.,
pC j(ci | x)
for i = 1, . . . , m and j = 1, . . . , N. They propose the use of MLR as the meta-level
learning algorithm.
In our ﬁrst extension, we use MLR at the meta-level, just like Ting and Witten. We use
the original set of pC j(ci | x) attributes, augmented with two additional sets of meta-level
attributes:
• the probability distributions multiplied by the maximum probability
PC j = pC j(ci | x) × MC j(x) = pC j(ci | x) ×
i=1 (pC j(ci | x))
for i = 1, . . . , m and j = 1, . . . , N and
• the entropies of the probability distributions
EC j(x) = −
pC j(ci | x) · log2 pC j(ci | x).
The total number of meta-level attributes in this approach is thus N(2m + 1).
S. DˇZEROSKI AND B. ˇZENKO
The motivation for considering these two additional sets of meta-level attributes is as
follows. Already Ting and Witten state that the use of probability distributions has
the advantage of capturing not only the predictions of the base-level classiﬁers, but also
their certainty. The attributes we have added try to capture the certainty of the predictions
more explicitly. Note that the attributes MC j and EC j are the only (ordinary) attributes
used in the construction of meta decision trees (MDTs) :
they are responsible for the good performance of MDTs and useful for learning at the
meta-level.
Entropy (as captured by the entropies EC j) is a measure of uncertainty. The higher the
entropy of a predicted probability distribution, the lower the certainty of the prediction.
The maximum probability in a predicted probability distribution MC j also contains information on the certainty of the prediction: a high value of MC j means we have a prediction
with high certainty, and a low value of MC j means we have an uncertain prediction. The
attributes PC j combine the the predictions themselves (the individual probabilities) and
the certainty of the predictions (as measured by the maximal probabilities MC j in a predicted distribution). We have added this combination in the hope that it will be easier to
use for the meta-level learning algorithm in combined form, as compared to the learning algorithm discovering that information on predictions and their certainty should be
It should be noted here that we have performed preliminary experiments using only
the attributes PC j and EC j (without the original probability distributions). The results of
these experiments showed no signiﬁcant improvement over using the original probability
distributions only. Any potential performance improvements thus result from the synergy
of using all three sets of attributes at the same time.
Stacking with multi-response model trees
In our second extension of the Ting and Witten approach, we keep the original set of
meta-level features, i.e., the probability distributions predicted by the base-level classiﬁers,
and consider an alternative to MLR for learning at the meta-level.
Stacking with MLR uses linear regression (LR) to perform classiﬁcation. Model trees
can be viewed as an extension of linear models to piece-wise linear modes, and model tree
induction as an extension of LR. When considering an alternative for MLR at the meta-level,
a natural direction to look into is thus the use of model trees. Model trees have been shown
to perform better than MLR for classiﬁcation via regression .
Recall that MLR formulates a binary classiﬁcation problem for each possible class value.
For each class c j, a linear equation LR j is constructed to predict a binary variable. Given a
new example x to classify, LR j(x) is calculated for all j, and the class k is predicted with
maximum LRk(x).
In our approach, we use model tree induction instead of linear regression and keep
everything else the same. Instead of m linear equations LR j, we induce m model trees MTj.
Given a new example x to classify, MTj(x) is calculated for all j, and the class k is predicted
with maximum MTk(x). We call our approach stacking with multi-response model trees,
analogously to stacking with MLR.
IS COMBINING CLASSIFIERS BETTER THAN SELECTING THE BEST ONE?
Experimental setup
In the experiments, we investigate the following issues:
• The (relative) performance of existing state-of-the-art stacking methods, especially in
comparison to SelectBest.
• The performance of stacking with an extended set of meta-level features relative to the
above methods.
• The performance of stacking with multi-response model trees relative to the above
• The inﬂuence of the number of base-level classiﬁers on the (relative) performance of the
above methods.
We look into the last topic because the recent studies mentioned above use different
numbers of base-level classiﬁers, ranging from three to eight. The Weka data mining suite
 was used for all experiments, within which all the base-level and
meta-level learning algorithms used in the experiments have been implemented. Ten-fold
cross validation is used to construct the meta-level s for all combining methods.
In order to evaluate the performance of the different combining algorithms, we perform
experiments on a collection of thirty datasets from the UCI Repository of machine learning
databases . These datasets have been widely used in other comparative studies. The datasets and their properties (number of examples, classes, (discrete/continuous)attributes,probabilityofthemajorityclass,entropyoftheclassprobability
distribution) are listed in Table 1.
Base-level algorithms
We performed two batches of experiments: one with three and one with seven base-level
learners. The set of three contains the following algorithms:
• J4.8: a Java re-implementation of the decision tree learning algorithm C4.5 and
• NB: the naive Bayes algorithm of John and Langley .
The second set of algorithms contains, in addition to the above three, also the following
four algorithms:
• K*: an instance-based algorithm which uses an entropic distance measure ,
• KDE: a simple kernel density estimation algorithm,
S. DˇZEROSKI AND B. ˇZENKO
The datasets used and their properties: number of examples, classes, (discrete/continuous) attributes,
probability of the majority class, and entropy of the class probability distribution.
Australian
Breast-cancer
Bridges-TD
Contraceptive
Ionosphere
Solar-ﬂare-C
Solar-ﬂare-M
Solar-ﬂare-X
Tic-tac-toe
Dataset source: UCI Repository of machine learning databases .
• DT: the decision table majority algorithm of Kohavi ,
• MLR: the multi-response linear regression algorithm, as used by Ting and Witten 
and described in Section 2.3.
All algorithms are used with their default parameter settings, with the exception of NB
algorithm which uses the kernel density estimator rather than assume normal distributions
for numeric attributes.
IS COMBINING CLASSIFIERS BETTER THAN SELECTING THE BEST ONE?
Meta-level algorithms
At the meta-level, we evaluate the performance of six different schemes for combining
classiﬁers (listed below), each applied with the two different sets of base-level algorithms
described above.
• VOTE: The simple plurality vote scheme (see Section 2.1),
• SELB: The SelectBest scheme )
selects the best of the base-level classiﬁers by cross validation.
• SMDT: Stacking with meta decision-trees as introduced by Todorovski and Dˇzeroski
 and brieﬂy described in Section 2.3.
• SMLR: Stacking with multi-response linear regression (MLR) as used by Ting and Witten
 and described in Section 2.2.
• SCMLR: Stacking with MLR and a reduced set of attributes as used by Seewald 
and described in Section 2.2.
• SMLRE: Stacking with MLR and an extended set of meta-level attributes, as proposed by
this paper and described in Section 3.1.
• SMM5: Stacking with multi-response model trees, as proposed by this paper and described
in Section 3.2. M5′ , a re-implementation of M5 
included in the data mining suite Weka , is used to induce the
model trees at the meta level.
Evaluating and comparing algorithms
This subsection describes several aspects of the evaluation of the different combining
schemes, or to be more precise, ensembles of learned base-level classiﬁers and a (learned)
combiner. The evaluation aspects include the estimation of error rates and pairwise comparisons of classiﬁers/ensembles.
4.4.1. Estimating error rates.
The classiﬁcation errors of the combining schemes are
estimated using ten-fold stratiﬁed cross validation. Cross validation is repeated ten times
using different random generator seeds resulting in ten different sets of folds. The same
folds (random generator seeds) are used in all experiments. The classiﬁcation error of a
classiﬁcation algorithm C for a given dataset as estimated by averaging over the ten runs
of ten-fold cross validation is denoted error(C). For pair-wise comparisons of classiﬁcation algorithms, we calculate the relative improvements and paired t-tests, as described
4.4.2. Relative improvement.
In order to evaluate the accuracy improvement achieved in
a given domain by using classiﬁer/combiner C1 as compared to using C2, we calculate
the relative improvement: 1−error(C1)/error(C2). The average relative improvement (ARI)
across all domains is calculated using the geometric mean of error reduction in individual
S. DˇZEROSKI AND B. ˇZENKO
domains: 1−geometric mean(error(C1)/error(C2)). Note that this comparison is not symmetric, i.e., ARI of C1 over C2 calculated as 1−geometric mean(error(C1)/error(C2)) may
be different from the negative value of ARI of C2 over C1 calculated as
geometric mean(error(C2)/error(C1)) −1.
TheclassiﬁcationerrorsofC1 andC2 averagedoverthetenrunsof10-foldcrossvalidation
are compared for each dataset (error(C1) and error(C2) refer to these averages).
4.4.3. Statistical signiﬁcance.
The statistical signiﬁcance of the difference in performance
is tested using a paired t-test (exactly the same folds are used for C1 and C2) with significance level of 95%: +/−to the right of a ﬁgure in the tables with results means that the
classiﬁer/ensemble C1 is signiﬁcantly better/worse than C2. Our earlier studies , as well as some other recent
studies ) used the pairs of error rates corresponding to each of the ten
repetitions of ten-fold cross validation. We refer to results of these tests as 10 × 10 t-test
However, in the ten repeats of ten-fold cross validation, we have overlapping test sets
as well as training sets. This is likely to lead to an underestimate of the true variance
of the algorithms, and therefore will tend to make Type I errors (report signiﬁcant differences when there are none). We thus consider two other variants of the t-test, whose
behavior for the purpose of comparing learning algorithms has been studied by Dietterich
In the ﬁrst, the pairs of error rates are taken from the ten folds of a single ten-fold cross
validation (1 × 10 t-test). While the training sets overlap, the test sets are independent, and
the test is less likely to make Type I errors. In the second, ﬁve two-fold cross validations are
performed, and the ﬁve pairs of error rates are taken to compare two learning algorithms
(5 × 2 t-test). Here the train and test sets do not overlap, and this test is less likely still
to make Type I errors. Unfortunately, it is also less sensitive (more likely not to detect
differences in performance when they actually exist).
We have performed all three types of tests. We will focus our presentation on the 1 × 10
t-test results, since this represents a reasonable compromise between the probability of
Type I error and sensitivity. We will mention results of the other two t-tests occasionally
for illustrative purposes.
Experimental results
The error rates of the 3-classiﬁer and 7-classiﬁer ensembles induced as described above
on the thirty datasets and combined with the different combining methods are given in
Tables 6 and 7. However, for the purpose of comparing the performance of different combining methods, Tables 2 and 3 are of much more interest: they give the average relative improvement of X over Y for each pair of combining methods X and Y, as well
as the number of signiﬁcant wins:losses (according to the 1 × 10 t-test). Tables 4 and 5
present a more detailed comparison (per dataset) of SMM5 (which turns out to perform
best) to the other combining methods. Below we highlight some of our more interesting
IS COMBINING CLASSIFIERS BETTER THAN SELECTING THE BEST ONE?
The relative performance of 3-classiﬁer ensembles with different combining methods. The entry in row
X and column Y gives the relative improvement of X over Y in % and the number of wins: losses (according to
the 1 × 10 t-test).
−20.28 2:7 −18.14 1:8 −22.71 1:8 −24.46 1:8 −18.70 0:9 −38.14 0:8
1.31 0:4 −14.85 0:4
−0.48 0:2 −16.93 0:4 12:11
3.26 0:3 −12.58 0:4 13:11
SCMLR 19.65 8:1
4.63 0:4 −10.99 0:4 14:11
SMLRE 15.76 9:0
−16.37 0:5
The relative performance of 7-classiﬁer ensembles with different combining methods. The entry in row
X and column Y gives the relative improvement of X over Y in % and the number of wins: losses (according to
the 1 × 10 t-test).
−15.72 1:10 −14.85 1:8 −18.18 0:8 −21.68
0:8 −12.77 0:9 −30.98 0:7
13.55 10:1
2.53 2:2 −13.20 2:4 18:12
1.85 1:2 −13.96 1:4 15:9
4.62 0:3 −10.73 1:4 12:15
SCMLR 17.77
−7.49 2:3 18:12
SMLRE 11.53
−15.41 1:2 18:8
State-of-the-art stacking methods
We ﬁrst focus on the existing stacking methods SMDT, SMLR and SCMLR. Inspecting Table 2
(three base-level classiﬁers), we ﬁnd that all of these combining approaches perform much
better than VOTE and so does SELB. The difference in performance is quite high: 15% to 20%
average relative improvement (ARI), 5 to 7 more wins than losses. While all three stacking
methods perform better than SELB, the difference in performance is slight. The wins-loss
difference ranges from 1 to 3, while the average relative improvement ranges from −2%
When we move from three to seven base-level classiﬁers (Table 3), it still holds that
the three stacking approaches and SELB perform much better than VOTE. However, the
difference in performance between the stacking approaches and SELB can now hardly be
characterized as positive. The wins:losses ratios wrt. SELB for SMDT, SMLR and SCMLR are
2:0, 2:2, and 1:2, and the ARI of SMDT over SELB is −1%.
In terms of ARI, SCMLR performs slightly better than SMLR, which in turn performs
slightly better than SMDT. This holds for both three and seven base-level classiﬁers, with
S. DˇZEROSKI AND B. ˇZENKO
the differences in performance being more pronounced in the latter case. However, the ARIs
are not large (6% at most) and are not consistent with the wins:losses ratios/differences. In
sum, the state-of-the-art stacking approaches perform comparably to each other and do not
perform better than selecting the best classiﬁer by cross validation.
Extended set of meta-level attributes
For three base-level classiﬁers, stacking with MLR and an extended set of meta-level attributes (SMLRE) performs better than the state-of-the-art stacking approaches and SELB in
terms of the wins-loss difference. It has no signiﬁcant losses and has two to four wins. It
performs worse, however, in terms of the ARI: It only has a positive relative improvement
over SMDT. For seven base-level classiﬁers, SMLRE has no positive ARI over any of the
state-of-the-art stacking methods and has 2:1 and 2:0 wins:losses wrt. SMDT and SMLR. In
sum, SMLRE does not perform clearly better than SELB or other state-of-the-art stacking
Multi-response model trees
Returning to Table 2, this time paying attention to the relative performance of SMM5 to the
other combining methods, we ﬁnd that SMM5 is in a league of its own. It clearly outperforms
all the other combining methods. It has no signiﬁcant losses and at least 4 wins wrt. each
other method. The ARI wrt. each other method is at least 10% (smallest when compared to
For seven base-level classiﬁers, SMM5 still has an ARI of over 7% over each other method.
However, the wins −losses difference wrt. SELB, SCMLR and SMLRE is only one (according
to the 1 × 10 t-test). On the other hand, according to the 5 × 2 t-test, the wins:losses ratios
of SMM5 to SELB, SMDT, SMLR, and SMLRE are all 2:0. The wins:losses ratio to the closest
competitor SCMLR is 4:0 according to the 5 × 2 t-test. In sum, SMM5 performs better than
SELB and other state-of-the-art stacking methods.
The inﬂuence of the number of base-level classiﬁers
Studying Tables 2 and 3, we can note that VOTE remains the worst and SMM5 remains
the best for both three and seven base-level classiﬁers. The relative performance of the
other combining methods is affected by the change of the number of base-level classiﬁers.
Looking at the total of wins −losses, SELB improves most in relative terms (from −9 for
three to +6 for seven base-level classiﬁers), followed by SMDT (from +1 to +6) and SCMLR
(from +3 to +6). On this metric, SMLR (from +2 to −3) and SMLRE (from +17 to +10)
perform worse for a larger number of base-level classiﬁers.
It is interesting to note that the performance of the individual stacking schemes increases
only slightly when we move from 3 to 7 base level classiﬁers (it increases most for voting and
least for SMM5: the wins:losses ratio is 1:0 in the latter case). It is even more interesting to
note that the performance of SMM5 with 3 base level classiﬁers is better than the performance
IS COMBINING CLASSIFIERS BETTER THAN SELECTING THE BEST ONE?
of the other stacking schemes with 7 base level classiﬁers. Its wins:losses ratios are almost
the same as for SMM5 with 7 base level classiﬁers.
Discussion of experimental results
Most of the combining methods we consider are variants of stacking with MLR. Seewald
 presents empirical evidence that stacking with MLR (SMLR) performs worse on
multi-class datasets (as compared to two-class datasets). He cites the dimensionality of
the meta-data as a probable cause, and argues that the reduction of this dimensionality by
reducing the set of meta-level features helps (making SCMLR perform better).
In our experiments, one way to increase the dimensionality of the meta-level data is to
add more base-level classiﬁers. Note that the (relative) performance of SMLR decreases and
that of SCMLR increases with the number of base-level classiﬁers. This is consistent with
the argument of Seewald about the dimensionality of the meta-data.
Another way to increase dimensionality is to add new meta-level attributes as in SMLRE.
With a small number of base-level classiﬁers the effect of providing additional information
about the certainty of predictions prevails. With a larger number of base-level classiﬁers,
however, this effect is countered by the adverse effect of the increase of dimensionality of
the meta-data. SMLRE thus provides only limited advantage over SMLR.
It is not a surprise that stacking with multi-response model trees performs better than
stacking with multi-response linear regression. The results of Frank et al. , who investigate classiﬁcation via regression, show that classiﬁcation via model trees performs
extremely well, i.e., better than multi-response linear regression and better than C5.0
 ), especially in domains with continuous attributes.
Given that the meta-level attributes are probabilities (and thus continuous), multi-response
model trees are a very suitable choice for learning at the meta-level. This is conﬁrmed by
our experimental results.
SMM5 performs better than SMLR, but also than SCMLR. The advantage of SCMLR over
SMLR derives from the reduction of the dimensionality problem, but note that some potentially useful information is thrown away (only the probabilities of one class value are kept).
Model tree induction (M5′) within SMM5 is apparently able to handle the dimensionality
problem well without throwing away, and indeed by making use of, this information. This
is why SMM5 performs best among the stacking approaches studied, including SMLRE.
Conclusions
We have empirically evaluated several state-of-the-art methods for constructing ensembles
of heterogeneous classiﬁers with stacking and shown that they perform (at best) comparably
to selecting the best classiﬁer from the ensemble by cross validation. We have proposed
two new methods for stacking, extending stacking with probability distributions and multiresponse linear regression: one uses an extended set of meta-level features, while the other
using multi-response model trees to learn at the meta-level. We show that the latter extension
performs better than existing stacking approaches and selecting the best classiﬁer from the
ensemble by cross validation.
S. DˇZEROSKI AND B. ˇZENKO
Note that our approach is intended for combining classiﬁers that are heterogeneous (derivedbydifferentlearningalgorithms,usingdifferentmodelrepresentations)andstrong(i.e.,
each of the base-level classiﬁers performs relatively well in its own right), rather than homogeneous and weak. It is not intended, for example, for combining many classiﬁers derived
by a single learning algorithm on subsamples of the original dataset. Given this, however,
our experimental results indicate that stacking with multi-response model trees is a good
choice for learning at the meta-level, regardless of the choice of the base-level classiﬁers.
While conducting this study and a few other recent studies , we have encountered quite a few contradictions between claims in the recent literature on stacking and our experimental results.
These are, however, most likely due to differences in the experimental methodology used
and possibly also the different collections of datasets considered. For example, while Merz
 claims that SCANN is clearly better than the oracle selecting the best classiﬁer
(which should perform even better than SelectBest), Todorovski and Dˇzeroski show
that it performs comparably to SelectBest, but not better. This is probably due to the fact
that Merz uses signiﬁcance tests on repeated hold-out experiments, a methodology that is
shown to be ﬂawed , as it has a high probability of reporting signiﬁcant
differences in performance even if there are none. Our comparative study includes a large
number of datasets and uses a carefully chosen experimental methodology: it thus provides
a clearer picture of the relative performance of different stacking approaches.
Appendix: Tables with Experimental Results
Relative improvement in accuracy (in %) of stacking with multi-response model trees (SMM5) as
compared to other combining algorithms and its signiﬁcance (+/−means signiﬁcantly better/worse, ‘.’ means
insigniﬁcant) for 3 base-level classiﬁers.
Australian
Breast-cancer
Bridges-TD
Contraceptive
(Continued on next page.)
IS COMBINING CLASSIFIERS BETTER THAN SELECTING THE BEST ONE?
(Continued).
Ionosphere
Solar-ﬂare-C
Solar-ﬂare-M
Solar-ﬂare-X
Tic-tac-toe
Relative improvement in accuracy (in %) of stacking with multi-response model trees (SMM5) as
compared to other combining algorithms and its signiﬁcance (+/−means signiﬁcantly better/worse, ‘.’ means
insigniﬁcant) for 7 base-level classiﬁers.
Australian
Breast-cancer
Bridges-TD
Contraceptive
(Continued on next page.)
S. DˇZEROSKI AND B. ˇZENKO
(Continued).
Ionosphere
Solar-ﬂare-C
Solar-ﬂare-M
Solar-ﬂare-X
Tic-tac-toe
Error rates (in %) of the learned ensembles of classiﬁers for 3 base-level classiﬁers.
Australian
Breast-cancer
Bridges-TD
Contraceptive
(Continued on next page.)
IS COMBINING CLASSIFIERS BETTER THAN SELECTING THE BEST ONE?
(Continued).
Ionosphere
Solar-ﬂare-C
Solar-ﬂare-M
Solar-ﬂare-X
Tic-tac-toe
Error rates (in %) of the learned ensembles of classiﬁers for 7 base-level classiﬁers.
Australian
Breast-cancer
Bridges-TD
Contraceptive
(Continued on next page.)
S. DˇZEROSKI AND B. ˇZENKO
(Continued).
Ionosphere
Solar-ﬂare-C
Solar-ﬂare-M
Solar-ﬂare-X
Tic-tac-toe
Bibliographic notes
This paper has it origins in three conference papers that propose and partly evaluate the
two new approaches to stacking: stacking with multi-response model trees is introduced
by Dˇzeroski and ˇZenko and the extended set of meta-level attributes is
introduced by ˇZenko and Dˇzeroski . However, this paper signiﬁcantly extends and
upgrades the work presented there. In particular: We consider both new approaches together
and provide a comparison; We include another very recent advance in stacking in the comparison; We consider a larger collection of datasets (thirty as compared
to twenty-one); We use a more carefully chosen experimental methodology (t-tests), which
results in some changes in the conclusions; We provide a much more comprehensive discussion of the experimental results.
Acknowledgments
Many thanks to Ljupˇco Todorovski for the cooperation on combining classiﬁers with metadecision trees and the many interesting and stimulating discussions related to this paper.
We acknowledge the support of the EU funded project METAL: ESPRIT IV No. 26.357.