Deep Image Retrieval:
Learning global representations for image search
Albert Gordo, Jon Almaz´an, Jerome Revaud, and Diane Larlus
Computer Vision Group, Xerox Research Center Europe
 
Abstract. We propose a novel approach for instance-level image retrieval. It produces a global and compact ﬁxed-length representation for
each image by aggregating many region-wise descriptors. In contrast to
previous works employing pre-trained deep networks as a black box to
produce features, our method leverages a deep architecture trained for
the speciﬁc task of image retrieval. Our contribution is twofold: (i) we
leverage a ranking framework to learn convolution and projection weights
that are used to build the region features; and (ii) we employ a region
proposal network to learn which regions should be pooled to form the ﬁnal global descriptor. We show that using clean training data is key to the
success of our approach. To that aim, we use a large scale but noisy landmark dataset and develop an automatic cleaning approach. The proposed
architecture produces a global image representation in a single forward
pass. Our approach signiﬁcantly outperforms previous approaches based
on global descriptors on standard datasets. It even surpasses most prior
works based on costly local descriptor indexing and spatial veriﬁcation1.
Keywords: deep learning, instance-level retrieval
Introduction
Since their ground-breaking results on image classiﬁcation in recent ImageNet
challenges , deep learning based methods have shined in many other computer vision tasks, including object detection and semantic segmentation .
Recently, they also rekindled highly semantic tasks such as image captioning 
and visual question answering . However, for some problems such as instancelevel image retrieval, deep learning methods have led to rather underwhelming
results. In fact, for most image retrieval benchmarks, the state of the art is currently held by conventional methods relying on local descriptor matching and
re-ranking with elaborate spatial veriﬁcation .
Recent works leveraging deep architectures for image retrieval are mostly
limited to using a pre-trained network as local feature extractor. Most eﬀorts
have been devoted towards designing image representations suitable for image
retrieval on top of those features. This is challenging because representations for
1 Additional material available at www.xrce.xerox.com/Deep-Image-Retrieval
 
A. Gordo, J. Almaz´an, J. Revaud, D. Larlus
retrieval need to be compact while retaining most of the ﬁne details of the images.
Contributions have been made to allow deep architectures to accurately represent
input images of diﬀerent sizes and aspect ratios or to address the lack
of geometric invariance of convolutional neural network (CNN) features .
In this paper, we focus on learning these representations. We argue that one
of the main reasons for the deep methods lagging behind the state of the art is
the lack of supervised learning for the speciﬁc task of instance-level image retrieval. At the core of their architecture, CNN-based retrieval methods often use
local features extracted using networks pre-trained on ImageNet for a classiﬁcation task. These features are learned to distinguish between diﬀerent semantic
categories, but, as a side eﬀect, are quite robust to intra-class variability. This is
an undesirable property for instance retrieval, where we are interested in distinguishing between particular objects – even if they belong to the same semantic
category. Therefore, learning features for the speciﬁc task of instance-level retrieval seems of paramount importance to achieve competitive results.
To this end, we build upon a recent deep representation for retrieval, the regional maximum activations of convolutions (R-MAC) . It aggregates several
image regions into a compact feature vector of ﬁxed length and is thus robust to
scale and translation. This representation can deal with high resolution images of
diﬀerent aspect ratios and obtains a competitive accuracy. We note that all the
steps involved to build the R-MAC representation are diﬀerentiable, and so its
weights can be learned in an end-to-end manner. Our ﬁrst contribution is thus
to use a three-stream Siamese network that explicitly optimizes the weights of
the R-MAC representation for the image retrieval task by using a triplet ranking
loss (Fig. 1).
To train this network, we leverage the public Landmarks dataset . This
dataset was constructed by querying image search engines with names of diﬀerent
landmarks and, as such, exhibits a very large amount of mislabeled and false
positive images. This prevents the network from learning a good representation.
We propose an automatic cleaning process, and show that on the cleaned data
learning signiﬁcantly improves.
Our second contribution consists in learning the pooling mechanism of the
R-MAC descriptor. In the original architecture of , a rigid grid determines
the location of regions that are pooled together. Here we propose to predict the
location of these regions given the image content. We train a region proposal
network with bounding boxes that are estimated for the Landmarks images
as a by-product of the cleaning process. We show quantitative and qualitative
evidence that region proposals signiﬁcantly outperform the rigid grid.
The combination of our two contributions produces a novel architecture that
is able to encode one image into a compact ﬁxed-length vector in a single forward
pass. Representations of diﬀerent images can be then compared using the dotproduct. Our method signiﬁcantly outperforms previous approaches based on
global descriptors. It even outperforms more complex approaches that involve
keypoint matching and spatial veriﬁcation at test time.
Learning global representations for image search
Fig. 1. Summary of the proposed CNN-based representation tailored for
retrieval. At training time, image triplets are sampled and simultaneously considered
by a triplet-loss that is well-suited for the task (top). A region proposal network (RPN)
learns which image regions should be pooled (bottom left). At test time (bottom right),
the query image is fed to the learned architecture to eﬃciently produce a compact global
image representation that can be compared with the dataset image representations with
a simple dot-product.
Finally, we would like to refer the reader to the recent work of Radenovic
et al. , concurrent to ours and published in these same proceedings, that
also proposes to learn representations for retrieval using a Siamese network on
a geometrically-veriﬁed landmark dataset.
The rest of the paper is organized as follows. Section 2 discusses related
works. Sections 3 and 4 present our contributions. Section 5 validates them on
ﬁve diﬀerent datasets. Finally Section 6 concludes the paper.
Related Work
We now describe previous works most related to our approach.
Conventional image retrieval. Early techniques for instance-level retrieval
are based on bag-of-features representations with large vocabularies and inverted
ﬁles . Numerous methods to better approximate the matching of the descriptors have been proposed, see e.g. . An advantage of these techniques is
that spatial veriﬁcation can be employed to re-rank a short-list of results ,
yielding a signiﬁcant improvement despite a signiﬁcant cost. Concurrently, methods that aggregate the local image patches have been considered. Encoding techniques, such as the Fisher Vector , or VLAD , combined with compression
 produce global descriptors that scale to larger databases at the cost of
reduced accuracy. All these methods can be combined with other post-processing
techniques such as query expansion .
A. Gordo, J. Almaz´an, J. Revaud, D. Larlus
CNN-based retrieval. After their success in classiﬁcation , CNN features
were used as oﬀ-the-shelf features for image retrieval . Although they
outperform other standard global descriptors, their performance is signiﬁcantly
below the state of the art. Several improvements were proposed to overcome their
lack of robustness to scaling, cropping and image clutter. performs region
cross-matching and accumulates the maximum similarity per query region. 
applies sum-pooling to whitened region descriptors. extends by allowing
cross-dimensional weighting and aggregation of neural codes. Other approaches
proposed hybrid models involving an encoding technique such as FV or
VLAD , potentially learnt as well as one of their components.
Tolias et al. propose R-MAC, an approach that produces a global image
representation by aggregating the activation features of a CNN in a ﬁxed layout
of spatial regions. The result is a ﬁxed-length vector representation that, when
combined with re-ranking and query expansion, achieves results close to the state
of the art. Our work extends this architecture by discriminatively learning the
representation parameters and by improving the region pooling mechanism.
Fine-tuning for retrieval. Babenko et al. showed that models pre-trained
on ImageNet for object classiﬁcation could be improved by ﬁne-tuning them on
an external set of Landmarks images. In this paper we conﬁrm that ﬁne-tuning
the pre-trained models for the retrieval task is indeed crucial, but argue that one
should use a good image representation (R-MAC) and a ranking loss instead of
a classiﬁcation loss as used in .
Localization/Region pooling. Retrieval methods that ground their descriptors in regions typically consider random regions or a rigid grid of regions . Some works exploit the center bias that benchmarks usually exhibit
to weight their regions accordingly . The spatial transformer network of 
can be inserted in CNN architectures to transform input images appropriately,
including by selecting the most relevant region for the task. In this paper, we
would like to bias our descriptor towards interesting regions without paying an
extra-cost or relying on a central bias. We achieve this by using a proposal
network similar in essence to the Faster R-CNN detection method .
Siamese networks and metric learning. Siamese networks have commonly
been used for metric learning , dimensionality reduction , learning image
descriptors , and performing face identiﬁcation . Recently triplet
networks (i.e. three stream Siamese networks) have been considered for metric
learning and face identiﬁcation . However, these Siamese networks
usually rely on simpler network architectures than the one we use here, which
involves pooling and aggregation of several regions.
This section introduces our method for retrieving images in large collections.
We ﬁrst revisit the R-MAC representation (Section 3.1) showing that, despite
its handcrafted nature, all of its components consist of diﬀerentiable operations.
From this it follows that one can learn the weights of the R-MAC representa-
Learning global representations for image search
tion in an end-to-end manner. To that aim we leverage a three-stream Siamese
network with a triplet ranking loss. We also describe how to learn the pooling
mechanism using a region proposal network (RPN) instead of relying on a rigid
grid (Section 3.2). Finally we depict the overall descriptor extraction process for
a given image (Section 3.3).
Learning to retrieve particular objects
R-MAC revisited. Recently, Tolias et al. presented R-MAC, a global image representation particularly well-suited for image retrieval. The R-MAC extraction process is summarized in any of the three streams of the network in
Fig. 1 (top). In a nutshell, the convolutional layers of a pre-trained network
(e.g. VGG16 ) are used to extract activation features from the images, which
can be understood as local features that do not depend on the image size or
its aspect ratio. Local features are max-pooled in diﬀerent regions of the image
using a multi-scale rigid grid with overlapping cells. These pooled region features
are independently ℓ2-normalized, whitened with PCA and ℓ2-normalized again.
Unlike spatial pyramids, instead of concatenating the region descriptors, they
are sum-aggregated and ℓ2-normalized, producing a compact vector whose size
(typically 256-512 dimensions) is independent of the number of regions in the
image. Comparing two image vectors with dot-product can then be interpreted
as an approximate many-to-many region matching.
One key aspect to notice is that all these operations are diﬀerentiable. In
particular, the spatial pooling in diﬀerent regions is equivalent to the Region of
Interest (ROI) pooling , which is diﬀerentiable . The PCA projection can
be implemented with a shifting and a fully connected (FC) layer, while the gradients of the sum-aggregation of the diﬀerent regions and the ℓ2-normalization are
also easy to compute. Therefore, one can implement a network architecture that,
given an image and the precomputed coordinates of its regions (which depend
only on the image size), produces the ﬁnal R-MAC representation in a single
forward pass. More importantly, one can backpropagate through the network architecture to learn the optimal weights of the convolutions and the projection.
Learning for particular instances. We depart from previous works on ﬁnetuning networks for image retrieval that optimize classiﬁcation using crossentropy loss . Instead, we consider a ranking loss based on image triplets.
It explicitly enforces that, given a query, a relevant element to the query and a
non-relevant one, the relevant one is closer to the query than the other one. To
do so, we use a three-stream Siamese network in which the weights of the streams
are shared, see Fig. 1 top. Note that the number and size of the weights in the
network (the convolutional ﬁlters and the shift and projection) is independent of
the size of the images, and so we can feed each stream with images of diﬀerent
sizes and aspect ratios.
Let Iq be a query image with R-MAC descriptor q, I+ be a relevant image
with descriptor d+, and I−be a non-relevant image with descriptor d−. We
A. Gordo, J. Almaz´an, J. Revaud, D. Larlus
deﬁne the ranking triplet loss as
L(Iq, I+, I−) = 1
2 max(0, m + ∥q −d+∥2 −∥q −d−∥2),
where m is a scalar that controls the margin. Given a triplet with non-zero loss,
the gradient is back-propagated through the three streams of the network, and
the convolutional layers together with the “PCA” layers – the shifting and the
fully connected layer – get updated.
This approach oﬀers several advantages. First and foremost, we directly optimize a ranking objective. Second, we can train the network using images at
the same (high) resolution that we use at test time2. Last, learning the optimal “PCA” can be seen as a way to perform discriminative large-margin metric
learning in which one learns a new space where relevant images are closer.
Beyond ﬁxed regions: proposal pooling
The rigid grid used in R-MAC to pool regions tries to ensure that the object
of interest is covered by at least one of the regions. However, this uniform sampling poses two problems. First, as the grid is independent of the image content,
it is unlikely that any of the grid regions accurately align with the object of interest. Second, many of the regions only cover background. This is problematic
as the comparison between R-MAC signatures can be seen as a many-to-many
region matching: image clutter will negatively aﬀect the performance. Note that
both problems are coupled: increasing the number of grid regions improves the
coverage, but also the number of irrelevant regions.
We propose to replace the rigid grid with region proposals produced by a
Region Proposal Network (RPN) trained to localize regions of interest in images.
Inspired by the approach of Ren et al. , we model this process with a fullyconvolutional network built on top of the convolutional layers of R-MAC (see
bottom-left part of Fig. 1). This allows one to get the region proposals at almost
zero cost. By using region proposals instead of the rigid grid we address both
problems. First, the region proposals typically cover the object of interest more
tightly than the rigid grid. Second, even if they do not overlap exactly with
the region of interest, most of the proposals do overlap signiﬁcantly with it (see
Section 5.3), which means that increasing the number of proposals per image not
only helps to increase the coverage but also helps in the many-to-many matching.
The main idea behind an RPN is to predict, for a set of candidate boxes
of various sizes and aspects ratio, and at all possible image locations, a score
describing how likely each box contains an object of interest. Simultaneously,
for each candidate box it performs regression to improve its location. This is
achieved by a fully-convolutional network consisting of a ﬁrst layer that uses
3 × 3 ﬁlters, and two sibling convolutional layers with 1 × 1 ﬁlters that predict,
for each candidate box in the image, both the objectness score and the regressed
2 By contrast, ﬁne-tuning networks such as VGG16 for classiﬁcation using highresolution images is not straightforward.
Learning global representations for image search
location. Non-maximum suppression is then performed on the ranked boxes to
produce k ﬁnal proposals per image that are used to replace the rigid grid.
To train the RPN, we assign a binary class label to each candidate box, depending on how much the box overlaps with the ground-truth region of interest,
and we minimize an objective function with a multi-task loss that combines a
classiﬁcation loss (log loss over object vs background classes) and a regression
loss (smooth ℓ1 ). This is then optimized by backpropagation and stochastic
gradient descent (SGD). For more details about the implementation and the
training procedure of the RPNs, we refer the reader to .
We note that one could, in principle, learn the RPN and the ranking of the
images simultaneously. However, preliminary experiments showed that correctly
weighting both losses was diﬃcult and led to unstable results. In our experiments,
we ﬁrst learn the R-MAC representation using a rigid grid, and only then we ﬁx
the convolutional layers and learn the RPN, which replaces the rigid grid.
Building a global descriptor
At test time, one can easily use this network to represent a high-resolution image.
One feeds the image to the network, which produces the region proposals, pools
the features inside the regions, embeds them into a more discriminative space,
aggregates them, and normalizes them. All these operations happen in a single
forward pass (see bottom-right part of Fig. 1). This process is also quite eﬃcient:
we can encode approximately 5 high-resolution (i.e. 724 pixels for the largest
side) images per second using a single Nvidia K40 GPU.
Leveraging large-scale noisy data
To train our network for instance-level image retrieval we leverage a large-scale
image dataset, the Landmarks dataset , that contains approximately 214K
images of 672 famous landmark sites. Its images were collected through textual
queries in an image search engine without thorough veriﬁcation. As a consequence, they comprise a large variety of proﬁles: general views of the site, closeups of details like statues or paintings, with all intermediate cases as well, but
also site map pictures, artistic drawings, or even completely unrelated images,
see Fig. 2.
We could only download a subset of all images due to broken URLs. After
manual inspection, we merged some classes together due to partial overlap. We
also removed classes with too few images. Finally, we meticulously removed all
classes having an overlap with the Oxford 5k, Paris 6k, and Holidays datasets, on
which we experiment, see Section 5. We obtained a set of about 192,000 images
divided into 586 landmarks. We refer to this set as Landmarks-full. For our
experiments, we use 168,882 images for the actual ﬁne-tuning, and the 20,668
remaining ones to validate parameters.
Cleaning the Landmarks dataset. As we have mentioned, the Landmarks
dataset present a large intra-class variability, with a wide variety of views and
A. Gordo, J. Almaz´an, J. Revaud, D. Larlus
Fig. 2. Left: random images from the “St Paul’s Cathedral” landmark. Green, gray and
red borders resp. denote prototypical, non-prototypical, and incorrect images. Right:
excerpt of the two largest connected components of the pairwise matching graph (corresponding to outside and inside pictures of the cathedral).
proﬁles, and a non-negligible amount of unrelated images (Fig. 2). While this
is not a problem when aiming for classiﬁcation (the network can accommodate
during training for this diversity and even for noise), for instance-level matching
we need to train the network with images of the same particular object or scene.
In this case, variability comes from diﬀerent viewing scales, angles, lighting conditions and image clutter. We pre-process the Landmarks dataset to achieve this
as follows.
We ﬁrst run a strong image matching baseline within the images of each landmark class. We compare each pair of images using invariant keypoint matching
and spatial veriﬁcation . We use the SIFT and Hessian-Aﬃne keypoint detectors and match keypoints using the ﬁrst-to-second neighbor ratio rule .
This is known to outperform approaches based on descriptor quantization .
Afterwards, we verify all matches with an aﬃne transformation model . This
heavy procedure is aﬀordable as it is performed oﬄine only once at training
Without loss of generality, we describe the rest of the cleaning procedure for
a single landmark class. Once we have obtained a set of pairwise scores between
all image pairs, we construct a graph whose nodes are the images and edges are
pairwise matches. We prune all edges which have a low score. Then we extract
the connected components of the graph. They correspond to diﬀerent proﬁles
of a landmark; see Fig. 2 that shows the two largest connected components
for St Paul’s Cathedral. In order to avoid any confusion, we only retain the
largest connected component and discard the rest. This cleaning process leaves
about 49,000 images (divided in 42,410 training and 6382 validation images) still
belonging to one of the 586 landmarks, referred to as Landmarks-clean.
Bounding box estimation. Our second contribution (Section 3.2) is to replace the uniform sampling of regions in the R-MAC descriptor by a learned
ROI selector. This selector is trained using bounding box annotations that we
automatically estimate for all landmark images. To that aim we leverage the data
obtained during the cleaning step. The position of veriﬁed keypoint matches is
a meaningful cue since the object of interest is consistently visible across the
Learning global representations for image search
Fig. 3. Left: the bounding box from image 1 is projected into its graph neighbors
using the aﬃne transformations (blue rectangles). The current bounding box estimates
(dotted red rectangles) are then updated accordingly. The diﬀusion process repeats
through all edges until convergence. Right: initial and ﬁnal bounding box estimates
(resp. dotted red and plain green rectangles).
landmark’s pictures, whereas distractor backgrounds or foreground objects are
varying and hence unmatched.
We denote the union of the connected components from all landmarks as a
graph S = {VS, ES}. For each pair of connected images (i, j) ∈ES, we have a set
of veriﬁed keypoint matches with a corresponding aﬃne transformation Aij. We
ﬁrst deﬁne an initial bounding box in both images i and j, denoted by Bi and Bj,
as the minimum rectangle enclosing all matched keypoints. Note that a single
image can be involved in many diﬀerent pairs. In this case, the initial bounding
box is the geometric median of all boxes3, eﬃciently computed with . Then,
we run a diﬀusion process, illustrated in Fig. 3, in which for a pair (i, j) we predict
the bounding box Bj using Bi and the aﬃne transform Aij (and conversely).
At each iteration, bounding boxes are updated as: B′
j = (α −1)Bj + αAijBi,
where α is a small update step (we set α = 0.1 in our experiments). Again, the
multiple updates for a single image are merged using geometric median, which
is robust against poorly estimated aﬃne transformations. This process iterates
until convergence. As can be seen in Fig. 3, the locations of the bounding boxes
are improved as well as their consistency across images.
Experiments
We now present our experimental results. We start by describing the datasets
and experimental details (Section 5.1). We then evaluate our proposed ranking
network (Section 5.2) and the region proposal pooling (Section 5.3). Finally, we
compare our results to the state of the art (Section 5.4).
Datasets and experimental details
Datasets. We evaluate our approach on ﬁve standard datasets. We experiment
mostly with the Oxford 5k building dataset and the Paris 6k dataset ,
3 Geometric median is robust to outlier boxes compared to e.g. averaging.
A. Gordo, J. Almaz´an, J. Revaud, D. Larlus
Table 1. Comparison of R-MAC , our reimplementation of it and the learned
versions ﬁne-tuned for classiﬁcation on the full and the clean sets (C-Full and C-Clean)
and ﬁne-tuned for ranking on the clean set (R-Clean). All these results use the initial
regular grid with no RPN.
Learned R-MAC
Oxford 5k PCA Paris
PCA Landmarks
PCA Oxford
PCA Landmarks
that contain respectively 5, 062 and 6, 412 images. For both datasets there are
55 query images, each annotated with a region of interest. To test instance-level
retrieval on a larger-scale scenario, we also consider the Oxford 105k and the
Paris 106k datasets that extend Oxford 5k and Paris 6k with 100k distractor
images from . Finally, the INRIA Holidays dataset is composed of 1,491
images and 500 diﬀerent scene queries.
Evaluation. For all datasets we use the standard evaluation protocols and report mean Average Precision (mAP). As is standard practice, in Oxford and
Paris one uses only the annotated region of interest of the query, while for Holidays one uses the whole query image. Furthermore, the query image is removed
from the dataset when evaluating on Holidays, but not on Oxford or Paris.
Experimental details. Our experiments use the very deep network (VGG16)
of Simonyan et al. pre-trained on the ImageNet ILSVRC challenge as a
starting point. All further learning is performed on the Landmarks dataset unless explicitly noted. To perform ﬁne-tuning with classiﬁcation we follow
standard practice and resize the images to multiple scales (shortest side in the
[256 −512] range) and extract random crops of 224×224 pixels. This ﬁne-tuning
process took approximately 5 days on a single Nvidia K40 GPU. When performing ﬁne-tuning with the ranking loss, it is crucial to mine hard triplets in an
eﬃcient manner, as random triplets will mostly produce easy triplets or triplets
with no loss. As a simple yet eﬀective approach, we ﬁrst perform a forward
pass on approximately ten thousand images to obtain their representations. We
then compute the losses of all the triplets involving those features (with margin
m = 0.1), which is fast once the representations have been computed. We ﬁnally
sample triplets with a large loss, which can be seen as hard negatives. We use
them to train the network with SGD with momentum, with a learning rate of
10−3 and weight decay of 5 · 10−5. Furthermore, as images are large, we can not
feed more than one triplet in memory at a time. To perform batched SGD we
accumulate the gradients of the backward passes and only update the weights
every n passes, with n = 64 in our experiments. To increase eﬃciency, we only
mine new hard triplets every 16 network updates. Following this process, we
could process approximately 650 batches of 64 triplets per day on a single K40
Learning global representations for image search
800 1000 1200 1400 1600
Number of iterations (BS=64)
C-Full → R-Clean
C-Full → R-Full
C-Clean → R-Clean
Number of proposals
Landmarks-clean
RPN IoU=0.3
RPN IoU=0.5
RPN IoU=0.7
R-MAC IoU=0.3
R-MAC IoU=0.5
R-MAC IoU=0.7
Fig. 4. Left: evolution of mAP when learning with a rank-loss for diﬀerent initializations and training sets. Middle: landmark detection recall of our learned RPN for
several IoU thresholds compared to the R-MAC ﬁxed grid. Right: heat-map of the
coverage achieved by our proposals on images from the Landmark and the Oxford 5k
datasets. Green rectangles are ground-truth bounding boxes.
GPU. We processed approximately 2000 batches in total, i.e. , 3 days of training.
To learn the RPN, we train the net for 200k iterations with a weight decay of
5 · 10−5 and a learning rate of 10−3, which is decreased by a factor of 10 after
100k iterations. This process took less than 24 hours.
Inﬂuence of ﬁne-tuning the representation
In this section we report retrieval experiments for the baselines and our ranking
loss-based approach. All results are summarized in Table 1. First of all, as can
be seen in the ﬁrst and second columns, the accuracy of our reimplementation
of R-MAC is identical to the one of the original paper. We would also like to
highlight the following points:
PCA learning. R-MAC learns the PCA on diﬀerent datasets depending
on the target dataset (i.e. learned on Paris when evaluating on Oxford and
vice versa). A drawback of this is that diﬀerent models need to be generated
depending on the target dataset. Instead, we use the Landmarks dataset to
learn the PCA. This leads to a slight decrease in performance, but allows us to
have a single universal model that can be used for all datasets.
Fine-tuning for classiﬁcation. We evaluate the approach of Babenko et al. ,
where the original network pre-trained on ImageNet is ﬁne-tuned on the Landmarks dataset on a classiﬁcation task. We ﬁne-tune the network with both the
complete and the clean versions of Landmarks, denoted by C-Full and C-Clean
in the table. This ﬁne-tuning already brings large improvements over the original
results. Also worth noticing is that, in this case, cleaning the dataset seems to
bring only marginal improvements over using the complete dataset.
Fine-tuning for retrieval. We report results using the proposed ranking loss
(Section 3.1) in the last column, denoted by R-Clean. We observe how this brings
consistent improvements over using the less-principled classiﬁcation ﬁne-tuning.
Contrary to the latter, we found of paramount importance to train our Siamese
network using the clean dataset, as the triplet-based training process is less
tolerant to outliers. Fig. 4 (left) illustrates these ﬁndings by plotting the mAP
obtained on Oxford 5k at several training epochs for diﬀerent settings. It also
A. Gordo, J. Almaz´an, J. Revaud, D. Larlus
Table 2. Proposals network. mAP results for Oxford 5k and Paris 6k obtained
with a ﬁxed-grid R-MAC, and our proposal network, for an increasingly large number
of proposals, before and after ﬁne-tuning with a ranking-loss. The rigid grid extracts,
on average, 20 regions per image.
# Region Proposals
shows the importance of initializing the network with a model that was ﬁrst
ﬁne-tuned for classiﬁcation on the full landmarks dataset. Even if C-Full and
C-Clean obtain very similar scores, we speculate that the model trained with the
full Landmark dataset has seen more diverse images so its weights are a better
starting point.
Image size. R-MAC ﬁnds important to use high resolution images (longest
side resized to 1024 pixels). In our case, after ﬁne-tuning, we found no noticeable
diﬀerence in accuracy between 1024 and 724 pixels. All further experiments resize
images to 724 pixels, signiﬁcantly speeding up the image encoding and training.
Evaluation of the proposal network
In this section we evaluate the eﬀect of replacing the rigid grid of R-MAC with
the regions produced by the proposal network.
Evaluating proposals. We ﬁrst evaluate the relevance of the regions predicted
by our proposal network. Fig. 4 (middle) shows the detection recall obtained in
the validation set of Landmarks-Clean for diﬀerent IoU (intersection over union)
levels as a function of the number of proposals, and compares it with the recall
obtained by the rigid grid of R-MAC. The proposals obtain signiﬁcantly higher
recall than the rigid grid even when their number is small. This is consistent with
the quantitative results (Table 2), where 32-64 proposals already outperform the
rigid regions. Fig. 4 (right) visualizes the proposal locations as a heat-map on
a few sample images of Landmarks and Oxford 5k. It clearly shows that the
proposals are centered around the objects of interest. For the Oxford 5k images,
the query boxes are somewhat arbitrarily deﬁned. In this case, as expected, our
proposals naturally align with the entire landmark in a query agnostic way.
Retrieval results. We now evaluate the proposals in term of retrieval performance, see Table 2. The use of proposals improves over using a rigid grid,
even with a baseline model only ﬁne-tuned for classiﬁcation (i.e. without ranking loss). On Oxford 5k, the improvements brought by the ranking loss and by
the proposals are complementary, increasing the accuracy from 74.8 mAP with
Learning global representations for image search
Table 3. Accuracy comparison with the state of the art. Methods marked with an *
use the full image as a query in Oxford and Paris instead of using the annotated region
of interest as is standard practice. Methods with a ▷manually rotate Holidays images
to ﬁx their orientation. † denotes our reimplementation. We do not report QE results
on Holidays as it is not a standard practice.
Oxf105k Par106k Holidays
Global descriptors
J´egou & Zisserman 
J´egou & Zisserman 
Gordo et al. 
Babenko et al. 
75.9/78.9▷
Gong et al. 
Babenko & Lempitsky 
Ng et al. 
Paulin et al. 
Perronnin & Larlus 
Tolias et al. 
85.2†/86.9†,▷
Kalantidis et al. 
Arandjelovic et al. 
83.1/87.5▷
Previous state of the art
71.6 83.0 63.3 75.7 84.9 
86.7/89.1▷
Matching / Spatial verif. / QE
Chum et al. 
Danfeng et al. 
Mikulik et al. 
Shen et al. 
Tao et al. 
Deng et al. 
Tolias et al. 
Tolias et al. 
Tolias & J´egou 
Xinchao et al. 
Kalantidis et al. 
Azizpour et al. 
Previous state of the art
89.4 86.5 85.3 
79.8 90.0 
the C-Full model and a rigid grid up to 83.1 mAP with ranking loss and 256
proposals per image.
Comparison with the state of the art
Finally we compare our results with the current state of the art in Table 3.
In the ﬁrst part of the table we compare our approach with other methods
A. Gordo, J. Almaz´an, J. Revaud, D. Larlus
that also compute global image representations without performing any form
of spatial veriﬁcation or query expansion at test time. These are the closest
methods to ours, yet our approach signiﬁcantly outperforms them on all datasets
– in one case by more than 15 mAP points. This demonstrates that a good
underlying representation is important, but also that using features learned for
the particular task is crucial.
In the second part of Table 3 we compare our approach with other methods
that do not necessarily rely on a global representation. Many of these methods
have larger memory footprints (e.g. ) and perform a costly spatial
veriﬁcation (SV) at test time (e.g. ). Most of them also perform query
expansion (QE), which is a comparatively cheap strategy that signiﬁcantly increases the ﬁnal accuracy. We also experiment with average QE , which has a
negligible cost (we use the 10 ﬁrst returned results), and show that, despite not
requiring a costly spatial veriﬁcation stage at test time, our method is on equal
foot or even improves the state of the art on most datasets. The only methods
above us are the ones of Tolias and J´egou (Oxford 5k) and Azizpour et
al. (Holidays). However, they are both hardly scalable as they require a lot
of memory storage and a costly veriﬁcation ( requires a slow spatial veriﬁcation that takes more than 1s per query, excluding the descriptor extraction time).
Without spatial veriﬁcation, the approach of Tolias and J´egou achieves 84.8
mAP in 200ms. In comparison, our approach reaches 89.1 mAP on Oxford 5k
for a runtime of 1ms per query and 2kB data per image. Other methods such
as are scalable and obtain good results, but perform some learning on
the target dataset, while in our case we use a single universal model.
Conclusions
We have presented an eﬀective and scalable method for image retrieval that
encodes images into compact global signatures that can be compared with the
dot-product. The proposed approach hinges upon two main contributions. First,
and in contrast to previous works , we deeply train our network for the
speciﬁc task of image retrieval. Second, we demonstrate the beneﬁt of predicting
and pooling the likely locations of regions of interest when encoding the images.
The ﬁrst idea is carried out in a Siamese architecture trained with a ranking
loss while the second one relies on the successful architecture of region proposal
networks . Our approach very signiﬁcantly outperforms the state of the art
in terms of retrieval performance when using global signatures, and is on par or
outperforms more complex methods while avoiding the need to resort to complex
pre- or post-processing.