SUN RGB-D: A RGB-D Scene Understanding Benchmark Suite
Shuran Song
Samuel P. Lichtenberg
Jianxiong Xiao
Princeton University
 
Although RGB-D sensors have enabled major breakthroughs for several vision tasks, such as 3D reconstruction, we have not attained the same level of success in highlevel scene understanding. Perhaps one of the main reasons is the lack of a large-scale benchmark with 3D annotations and 3D evaluation metrics. In this paper, we introduce an RGB-D benchmark suite for the goal of advancing
the state-of-the-arts in all major scene understanding tasks.
Our dataset is captured by four different sensors and contains 10,335 RGB-D images, at a similar scale as PASCAL
VOC. The whole dataset is densely annotated and includes
146,617 2D polygons and 64,595 3D bounding boxes with
accurate object orientations, as well as a 3D room layout
and scene category for each image. This dataset enables
us to train data-hungry algorithms for scene-understanding
tasks, evaluate them using meaningful 3D metrics, avoid
overﬁtting to a small testing set, and study cross-sensor
1. Introduction
Scene understanding is one of the most fundamental problems in computer vision.
Although remarkable
progress has been achieved in the past decades, generalpurpose scene understanding is still considered to be very
challenging. Meanwhile, the recent arrival of affordable
depth sensors in consumer markets enables us to acquire
reliable depth maps at a very low cost, stimulating breakthroughs in several vision tasks, such as body pose recognition , intrinsic image estimation , 3D modeling
 and SfM reconstruction .
RGB-D sensors have also enabled rapid progress for
scene understanding (e.g. ).
However, while we can crawl color images from the Internet easily, it is not possible to obtain large-scale RGB-D
data online. Consequently, the existing RGB-D recognition benchmarks, such as NYU Depth v2 , are an orderof-magnitude smaller than modern recognition datasets for
color images (e.g. PASCAL VOC ). Although these
(a) NYU Depth v2
(b) UW Object Dataset
Figure 1. Comparison of RGB-D recognition benchmarks.
Apart from 2D annotation, our benchmark provided high quality
3D annotation for both objects and room layout.
small datasets successfully bootstrapped initial progress in
RGB-D scene understanding in the past few years, the size
limit is now becoming the critical common bottleneck in advancing research to the next level. Besides causing overﬁtting of the algorithm during evaluation, they cannot support
training data-hungry algorithms that are currently the stateof-the-arts in color-based recognition (e.g. ). If a
large-scale RGB-D dataset were available, we could borrow
the same success to the RGB-D domain as well. Furthermore, although the RGB-D images in these datasets contain depth maps, the annotation and evaluation metrics are
mostly in 2D image domain, but not directly in 3D (Figure
1). Scene understanding is much more useful in the real
3D space for most applications. We desire to reason about
scenes and evaluate algorithms in 3D.
To this end, we introduce SUN RGB-D, a dataset containing 10,335 RGB-D images with dense annotations in
both 2D and 3D, for both objects and rooms. Based on
this dataset, we focus on six important recognition tasks
towards total scene understanding, which recognizes objects, room layouts and scene categories. For each task,
weight (pound)
size (inch)
5.2×0.25×0.75 7.1×1.4×2 11×2.3×2.7 9.8×2.7×2.7
depth resolution
color resolution
Table 1. Speciﬁcation of sensors. RealSense is very light, while
Kinect v2 is heavier and has much higher power consumption.
we propose metrics in 3D and evaluate baseline algorithms
derived from the state-of-the-arts. Since there are several
popular RGB-D sensors available, each with different size
and power consumption, we construct our dataset using four
different kinds of sensors to study how well the algorithms
generalize across sensors. By constructing a PASCAL-scale
dataset and deﬁning a benchmark with 3D evaluation metrics, we hope to lay the foundation for advancing RGB-D
scene understanding in the coming years.
1.1. Related work
There are many interesting works on RGB-D scene understanding, including semantic segmentation 
object classiﬁcation , object detection , context reasoning , mid-level recognition , and surface orientation and room layout estimation .
Having a solid benchmark suite to evaluate these tasks will
be very helpful in further advancing the ﬁeld.
There are many existing RGB-D datasets available . Figure 1 shows some of them. Here we will brieﬂy describe
several most relevant ones1. There are datasets that
capture objects on a turntable instead of real-world scenes.
For natural indoor scene datasets, NYU Depth v2 is
probably the most popular one. They labeled 1,449 selected
frames from short RGB-D videos using 2D semantic segmentation on the image domain. annotates each object
by aligning a CAD model with the 3D point cloud. However, the 3D annotation is quite noisy, and in our benchmark we reuse the 2D segmentation but recreate the 3D annotation by ourselves. Although this dataset is very good,
the size is still small compared to other modern recognition
datasets, such as PASCAL VOC or ImageNet . B3DO
 is another dataset with 2D bounding box annotations
on the RGB-D images. But its size is smaller than NYU
and it has many images with an unrealistic scene layouts
(e.g. snapshot of a computer mouse on the ﬂoor). The Cornell RGBD dataset contains 52 indoors scenes with
per-point annotations on the stitched point clouds. SUN3D
 contains 415 RGB-D video sequence with 2D polygon
annotation on some key frames. Although they stitched the
1 A full list with brief descriptions is available at 
ucl.ac.uk/staff/M.Firman/RGBDdatasets/.
Asus Xtion
Intel Realsense
reﬁned depth
raw points
reﬁned points
Figure 2. Comparison of the four RGB-D sensors.
depth map from Intel RealSense is noisier and has more missing
values. Asus Xtion and Kinect v1’s depth map have observable
quantization effect. Kinect v2 is more accurate to measure the details in depth, but it is more sensitive to reﬂection and dark color.
Across different sensors our depth improvement algorithm manages to robustly improve the depth map quality.
point cloud in 3D, the annotation is still purely in the 2D
image domain, and there are only 8 annotated sequences.
2. Dataset construction
The goal of our dataset construction is to obtain an image dataset captured by various RGB-D sensors at a similar
scale as the PASCAL VOC object detection benchmark. To
improve the depth map quality, we take short videos and
use multiple frames to obtain a reﬁned depth map. For each
image, we annotate the objects with both 2D polygons and
3D bounding boxes and the room layout with 3D polygons.
2.1. Sensors
Since there are several popular sensors available, with
different size and power consumption, we construct our
dataset using four kinds – Intel RealSense 3D Camera for
tablets, Asus Xtion LIVE PRO for laptops, and Microsoft
Kinect versions 1 and 2 for desktop. Table 1 shows each
sensor’s speciﬁcation. Figure 2 shows the example color
and depth images captured.
Intel RealSense is a lightweight, low power consuming
depth sensor designed for tablets. It will soon reach consumers; we obtained two pre-release samples from Intel. It
projects an IR pattern to the environment and uses stereo
matching to obtain the depth map. For outdoor environments, it can switch automatically to stereo matching withbedroom
dining room
home office
conference room
2D segmentation
3D annotaion
2D segmentation
3D annotaion
Figure 3. Example images with annotation from our dataset.
out IR pattern; however, we visually inspect the 3D point
cloud and believe the depth map quality is too low for use in
accurate object recognition for outdoors. We thus only use
this sensor to capture indoor scenes. Figure 2 shows its raw
depth is worse than that of other RGB-D sensors, and the
effective range for reliable depth is shorter (depth gets very
noisy around 3.5 meters). But this type of lightweight sensor can be embedded in portable devices and be deployed at
a massive scale in consumer markets, so it is important to
study algorithm performance with it.
Asus Xtion and Kinect v1 use a near-IR light pattern. Asus
Xtion is much lighter and powered by USB only, with worse
color image quality than Kinect v1’s. However, Kinect v1
requires an extra power source. The raw depth maps from
both sensors have an observable quantization effect.
Kinect v2 is based on time-of-ﬂight and also consumes signiﬁcant power. The raw depth map captured is more accurate, with high ﬁdelity to measure the detailed depth difference, but fails more frequently for black objects and slightly
reﬂective surfaces. The hardware supports long distance
depth range, but the ofﬁcial Kinect for Windows SDK cuts
the depth off at 4.5 meters and applies some ﬁltering that
tends to lose object details. Therefore, we wrote our own
driver and decoded the raw depth in GPU (Kinect v2 requires software depth decoding) to capture real-time video
without depth cutoffs or additional ﬁltering.
2.2. Sensor calibration
For RGB-D sensors, we must calibrate the camera intrinsic parameters and the transformation between the depth
and color cameras. For Intel RealSense, we use the default
factory parameters. For Asus Xtion, we rely on the default
parameters returned by OpenNI library without modeling
radial distortion. For Kinect v2, the radial distortion is very
strong. So we calibrate all cameras with standard calibration toolbox . We calibrate the depth cameras by computing the parameters with the IR image which is the same with
the depth camera. To see the checkerboard without overexposure on IR, we cover the emitter with a piece of paper.
We use the stereo calibration function to calibrate the transformation between the depth (IR) and the color cameras.
2.3. Depth map improvement
The depth maps from these cameras are not perfect, due
to measurement noise, view angle to the regularly reﬂective surface, and occlusion boundary. Because all the RGB-
D sensors operate as a video camera, we can use nearby
frames to improve the depth map, providing redundant data
to denoise and ﬁll in missing depth.
We propose a robust algorithm for depth map integration
from multiple RGB-D frames. For each nearby frame in a
time window, we project the points to 3D, get the triangulated mesh from nearby points, and estimate the 3D rotation
and translation between this frame and the target frame for
depth improvement. Using this estimated transformation,
we render the depth map of the mesh from the target frame
camera. After we obtain aligned and warped depth maps,
we integrate them to get a robust estimation. For each pixel
location, we compute the median depth and 25% and 75%
percentiles. If the raw target depth is missing or outside
the 25% −75% range and the median is computed from
at least 10 warped depth maps, we use the median depth
value. Otherwise, we keep the original value to avoid oversmoothing. Examples are shown in Figure 2. Our depth
map improvement algorithm, compared to which uses
a 3D voxel-based TSDF representation, requires much less
memory and runs faster at equal resolution, enabling much
bathroom(6.4%)
others(8.0%)
furniture store
bedroom(12.6%)
computer room(1.0%)
lecture theatre(1.2%)
library(1.4%)
study space(1.9%)
home office(1.9%)
discussion area(2.0%)
dining area(2.4%)
conference room(2.6%)
corridor(3.8%)
kitchen(5.6%)
living room(6.0%)
rest space(6.3%)
dining room(2.3%)
garbage_bin
sofa chair
side table
night stand
book shelf
kitchen cabinet
white board
coffee table
dining table
computer monitor
hanging cabinet
steel cabinet
carton box
SUN3D (ASUS Xtion)
NYUv2 (Kinect v1)
B3DO (Kinect v1)
Intel RealSense
(a) object distribution
(b) scene distribution
Figure 4. Statistics of semantic annotation in our dataset.
Figure 5. Data Capturing Process. (a) RealSense attached to laptop, (b) Kinect v2 with battery, (c) Capturing setup for Kinect v2.
high-resolution integration.
Robust estimation of an accurate 3D transformation between a nearby frame and target frame is critical for this
algorithm. To do this, we ﬁrst use SIFT to obtain point-topoint correspondences between the two color images, obtain the 3D coordinates for the SIFT keypoints from the
raw depth map, and then estimate the rigid 3D rotation and
translation between these two sparse 3D SIFT clouds using RANSAC with three points. To obtain a more accurate
estimation, we would like to use the full depth map to do
dense alignment with ICP, but depending on the 3D structure, ICP can have severe drifting. Therefore, we ﬁrst use
the estimation from SIFT+RANSAC to initialize the transformation for ICP, and calculate the percentage of points
for ICP matching. Using the initialization and percentage
threshold, we run point-plane ICP until convergence, then
check the 3D distances with the original SIFT keypoint inliers from RANSAC. If the distances signiﬁcantly increase,
it means ICP makes the result drift away from the truth; we
will use the original RANSAC estimation without ICP. Otherwise, we use the ICP result.
2.4. Data acquisition
To construct a dataset at the PASCAL VOC scale, we
capture a signiﬁcant amount of new data by ourselves and
combine some existing RGB-D datasets. We capture 3,784
images using Kinect v2 and 1,159 images using Intel RealSense.
We included the 1,449 images from the NYU
Depth V2 , and also manually selected 554 realistic
scene images from the Berkeley B3DO Dataset , both
captured by Kinect v1. We manually selected 3,389 distinguished frames without signiﬁcant motion blur from the
SUN3D videos captured by Asus Xtion. In total, we
obtain 10,335 RGB-D images.
As shown in Figure 5, we attach an Intel RealSense to
a laptop and carry it around to capture data. For Kinect v2
we use a mobile laptop harness and camera stabilizer. Because Kinect v2 consumes a signiﬁcant amount of power,
we use a 12V car battery and a 5V smartphone battery to
power the sensor and the adaptor circuit. The RGB-D sensors only work well for indoors. And we focus on universities, houses, and furniture stores in North America and
Asia. Some example images are shown in Figure 3.
2.5. Ground truth annotation
For each RGB-D image, we obtain LabelMe-style 2D
polygon annotations, 3D bounding box annotations for objects, and 3D polygon annotations for room layouts. To ensure annotation quality and consistency, we obtain our own
ground truth labels for images from other datasets; the only
exception is NYU, whose 2D segmentation we use.
For 2D polygon annotation, we developed a LabelMestyle tool for Amazon Mechanical Turk. To ensure
high label quality, we add automatic evaluation in the tool.
To ﬁnish the HIT, each image must have at least 6 objects
labeled; the union of all object polygons must cover at least
80% of the total image. To prevent workers from cheating by covering everything with big polygons, the union
of the small polygons (area < 30% of the image) must
cover at least 30% of the total image area. Finally, the authors visually inspect the labeling result and manually correct the layer ordering when necessary. Low quality labelings are sent back for relabeling. We paid $0.10 per image;
some images required multiple labeling iterations to meet
our quality standards.
For 3D annotation, the point clouds are ﬁrst rotated to
align with the gravity direction using an automatic algorithm. We estimate the normal direction for each 3D point
with the 25 closest 3D points. Then we accumulate a histogram on a 3D half-sphere and pick the maximal count
from it to obtain the ﬁrst axis. For the second axis, we pick
the maximal count from the directions orthogonal to the ﬁrst
RGB (19.7)
RGB-D (23.0)
RGB (35.6)
RGB-D (37.2)
RGB (38.1)
RGB-D (39.0)
computer room
conference room
dining area
dining room
discussion area
furniture store
lecture theatre
living room
rest space
study space
(a) GIST + RBF kernel SVM
(b) Places-CNN + Linear SVM
(c) Places-CNN + RBF kernel SVM
Figure 6. Confusion matrices for various scene recognition algorithms. Each combination of features and classiﬁers is run on RGB, D
and RGB-D. The numbers inside the parentheses are the average accuracy for classiﬁcation.
Effective free space
Outside the room
Inside some objects
Beyond cutoff distance
Figure 7. Free space evaluation. The free space is the gray area
inside the room, outside any object bounding boxes, and within
the effective minimal and maximal range [0.5m-5.5m]. For evaluation, we use IoU between the gray areas of the ground truth and
the prediction as the criteria.
axis. In this way, we obtain the rotation matrix to rotate the
point cloud to align with the gravity direction. We manually
adjust the rotation when the algorithm fails.
We design a web-based annotation tool and hire oDesk
workers to annotate objects and room layouts in 3D. For objects, the tool requires drawing a rectangle on the top view
with an orientation arrow, and adjusting the top and bottom
to inﬂate it to 3D. For room layouts, the tool allows arbitrary
polygon on the top view to describe the complex structure
of the room (Figure 3). Our tool also shows the projection of the 3D boxes to the image in real time, to provide
intuitive feedback during annotation. We hired 18 oDesk
workers and trained them over Skype. The average hourly
rate is $3.90, and they spent 2,051 hours in total. Finally,
all labeling results are thoroughly checked and corrected by
the authors. For scene categories, we manually classify the
images into basic-level scene categories.
2.6. Label statistics
For the 10,335 RGB-D images, we have 146,617 2D
polygons and 64,595 3D bounding boxes (with accurate orientations for objects) annotated. Therefore, there are 14.2
objects in each image on average. In total, there are 47
scene categories and about 800 object categories. Figure 4
shows the statistics for the semantic annotation of the major
object and scene categories.
3. Benchmark design
To evaluate the whole scene understanding pipeline, we
select six tasks, including both popular existing tasks and
new but important tasks, both single-object based tasks and
scene tasks, as well as a ﬁnal total scene understanding task
that integrates everything.
Scene Categorization
Scene categorization is a very popular task for scene understanding . In this task, we are
given an RGB-D image, classify the image into one of the
predeﬁned scene categories, and use the standard average
categorization accuracy for evaluation.
Semantic Segmentation
Semantic segmentation in the
2D image domain is currently the most popular task for
RGB-D scene understanding. In this task, the algorithm
outputs a semantic label for each pixel in the RGB-D image. We use the standard average accuracy across object
categories for evaluation.
Object Detection
Object detection is another important
step for scene understanding. We evaluate both 2D and 3D
approaches by extending the standard evaluation criteria for
2D object detection to 3D. Assuming the box aligns with
the gravity direction, we use the 3D intersection over union
of the predicted and ground truth boxes for 3D evaluation.
Object Orientation
Besides predicting the object location and category, another important vision task is to estimate its pose. For example, knowing the orientation of a
chair is critical to sit on it properly. Because we assume that
an object bounding box is aligned with gravity, there is only
one degree of freedom in estimating the yaw angle for orientation. We evaluate the prediction by the angle difference
between the prediction and the ground truth.
Room Layout Estimation
The spatial layout of the entire
space of the scene allows more precise reasoning about free
space (e.g., where can I walk?) and improved object reasoning. It is a popular but challenging task for color-based
scene understanding (e.g. ). With the extra depth
information in the RGB-D image, this task is considered to
be much more feasible . We evaluate the room layout
estimation in 3D by calculating the Intersection over Union
(IoU) between the free space from the ground truth and the
free space predicted by the algorithm output.
As shown in Figure 7, the free space is deﬁned as the
space that satisﬁes four conditions: 1) within camera ﬁeld
of view, 2) within effective range, 3) within the room, and
4) outside any object bounding box (for room layout estimation, we assume empty rooms without objects). In terms
of implementation, we deﬁne a voxel grid of 0.1×0.1×0.1
45.03 27.89 16.89 18.51 21.77 1.06
9.65 21.51 12.47 6.44
RGB-D NN 45.78 35.75 19.86 19.29 23.3
47.22 39.14 17.21 20.43 21.53 1.49
Depth 43.83 13.9 22.31 12.88
RGB-D 48.25 49.18 20.8 20.92 23.61 1.83
0.77 10.05
RGB-D 78.64 84.51 33.15 34.25 42.52 25.01 35.74 35.71 36.33
Table 2. Semantic segmentation. We evaluate performance for 37
object categories. Here shows 8 selected ones: ﬂoor, ceiling, chair,
table, bed, nightstand, books, and person. The mean accuracy is
for all the 37 categories. A full table is in the supp. material.
Sliding Shapes 
Table 3. 3D object detection.
meter3 over the space and choose the voxels that are inside
the ﬁeld of view of the camera and fall between 0.5 and 5.5
meters from the camera, which is an effective range for most
RGB-D sensors. For each of these effective voxels, given a
room layout 3D polygon, we check whether the voxel is inside. In this way, we can compute the intersection and the
union by counting 3D voxels.
This evaluation metric directly measures the free space
prediction accuracy. However, we care only about the space
within a 5.5 meter range; if a room is too big, all effective
voxels will be in the ground truth room. If an algorithm predicts a huge room beyond 5.5 meters, then the IoU will be
equal to one, which introduces bias: algorithms will favor
a huge room. To address this issue, we only evaluate algorithms on the rooms with reasonable size (not too big), since
none of the RGB-D sensors can see very far either. If the
percentage of effective 3D voxels in the ground truth room
is bigger than 95%, we discard the room in our evaluation.
Total Scene Understanding
The ﬁnal task for our scene
understanding benchmark is to estimate the whole scene including objects and room layout in 3D . This task is also
referred to “Basic Level Scene Understanding” in . We
propose this benchmark task as the ﬁnal goal to integrate
both object detection and room layout estimation to obtain
a total scene understanding, recognizing and localizing all
the objects and the room structure.
We evaluate the result by comparing the ground truth objects and the predicted objects. To match the prediction with
ground truth, we compute the IoU between all pairs of predicted boxes and ground truth boxes, and we sort the IoU
scores in a descending order. We choose each available pair
with the largest IoU and mark the two boxes as unavailable. We repeat this process until the IoU is lower than
a threshold τ (τ = 0.25 in this case). For each matched
pair between ground truth and prediction, we compare their
object label in order to know whether it is a correct predic-
Angle: 12.6 IoU: 0.7
Angle: 87.4 IoU: 0.4
Angle: 31.4 IoU: 0.24
Angle: 8.6 IoU: 0.7
Angle: 3.54 IoU: 0.66
Angle: 49.5 IoU: 0.6
Angle: 1.6 IoU: 0.6
Angle: 2.4 IoU: 0.7
Figure 8. Example results for 3D object detection and orientation prediction. We show the angle difference and IoU between
predicted boxes (blue) and ground truth (red).
angle difference in degree
angle difference in degree
Sliding Shapes
Examplar SVM
angle difference in degree
angle difference in degree
Figure 9. Object orientation estimation. Here we show the distribution of the orientation errors for all true positive detections.
tion or not. Let |G| be the number of ground truth boxes,
|P| be the number of prediction boxes, |M| be the number of matched pairs with IoU> τ, and |C| be the number
of matched pairs with a correct label. We evaluate the algorithms by computing three numbers: Rr = |C| / |G| to
measure the recall of recognition for both semantics and geometry, Rg = |M|/|G| to measure the geometric prediction
recall, and Pg = |M|/|P| to measure the geometric prediction precision. We also evaluate the free space by using a
similar scheme as for room layout: counting the visible 3D
voxels for the free space, i.e. inside the room polygon but
outside any object bounding box. Again, we compute the
IoU between the free space of ground truth and prediction.
4. Experimental evaluation
We choose some state-of-the-art algorithms to evaluate
each task. For the tasks without existing algorithm or implementation, we adapt popular algorithms from other tasks.
For each task, whenever possible, we try to evaluate algorithms using color, depth, as well as RGB-D images to
study the relative importance of color and depth, and gauge
to what extent the information from both is complementary.
Various evaluation results show that we can apply standard
techniques designed for color (e.g. hand craft features, deep
learning features, detector, sift ﬂow label transfer) to depth
domain and it can achieve comparable performance for various tasks. In most of cases, when we combining these two
RGB-D ESVM
7.38 12.95 7.44
0.09 12.47 0.02
6.19 14.02 11.89 0.75 14.79 5.86
34.23 54.74 14.40 0.45 29.30 0.87
1.82 13.25 23.38 11.99 23.39 9.36 15.59 21.62 24.04 8.73 23.79 16.64
RGB-D RCNN 49.56 75.97 34.99 5.78 41.22 8.08 16.55 4.17 31.38 46.83 21.98 10.77 37.17 16.5 41.92 42.2 43.02 32.92 69.84 35.20
Table 4. Evaluation of 2D object detection. We evaluate on 19 popular object categories using Average Precision (AP): bathtub, bed,
bookshelf, box, chair, counter, desk, door, dresser, garbage bin, lamp, monitor, night stand, pillow, sink, sofa, table, tv and toilet.
Manhattan Box (0.99)
Ground Truth
Geometric Context (0.27)
Convex Hull (0.90)
Convex Hull (0.85)
Geometric Context (0.61)
Convex Hull (0.43)
Manhattan Box (0.72)
Geometric Context (0.57)
Ground Truth
Ground Truth
Manhattan Box (0.811)
Figure 10. Example visualization to compare the three 3D room
layout estimation algorithms.
source of information, the performance get improved.
For evaluation, we carefully split the data into training
and testing set, ensuring each sensor has around half for
training and half for testing, Since some images are captured from the same building or house with similar furniture styles, to ensure fairness, we carefully split the training
and testing sets by making sure that those images from the
same building either all go into the training set or the testing
set and do not spread across both sets. For data from NYU
Depth v2 , we use the original split.
Scene Categorization
For this task, we use the 19 scene
categories with more than 80 images. We choose GIST 
with a RBF kernel one-vs-all SVM as the baseline. We also
choose the state-of-the-art Places-CNN scene feature,
which achieves the best performance in color-based scene
classiﬁcation on the SUN database . This feature is
learned using a Deep Convolutional Neural Net (AlexNet
 ) with 2.5 million scene images . We use both linear
SVM and RBF kernel SVM with this CNN feature. Also,
empirical experiments suggest that both traditional image features and deep learning features for color image can
be used to extract powerful features for depth maps as well.
Therefore, we also compute the GIST and Places-CNN on
the depth images. We also evaluate the concatenation of
depth and color features. The depth image is encoded as
HHA image as in before extract the feature. Figure 6
reports the accuracy for these experiments. We can see that
the deep learning features indeed perform much better, and
the combination of color and depth features also helps.
Semantic Segmentation
We run the state-of-the-art algorithm for semantic segmentation on our benchmark and
report the result on Table 2. Since our dataset is quite large,
we expect non-parametric label transfer to work well. We
ﬁrst use Places-CNN features to ﬁnd the nearest neighbor and directly copy its segmentation as the result. We sur-
RGB-D RCNN
Sliding Shapes
Table 5. Evaluation of total scene understanding. With the objects detection result from Sliding Shape and RCNN and Manhattan Box for room layout estimation, we evaluate four ways to
integrate object detection and room layout: (1) directly combine
(2) constrain the object using room. (3) adjust room base on the
objects (4) adjust the room and objects together.
prisingly found that this simple method performs quite well,
especially for big objects (e.g. ﬂoor, bed). We then adapt
the SIFT-ﬂow algorithm , on both color and depth to
estimation ﬂow. But it only slightly improves performance.
Object Detection
We evaluate four state-of-the-art algorithms for object detection: DPM , Exemplar SVM
 , RGB-D RCNN , and Sliding Shapes . For
DPM and Exemplar SVM, we use the depth as another
image channel and concatenate HOG computed from that
and from color images. To evaluate the ﬁrst three 2D algorithms, we use 2D IoU with a threshold of 0.5 and the
results are reported in Table 4. The 2D ground truth box is
obtained by projecting the points inside the 3D ground truth
box back to 2D and ﬁnding a tight box that encompasses
these 2D points. For 3D detection, we evaluate the stateof-the-art Sliding Shapes algorithm, using the CAD models
originally used in , and evaluate the algorithm for their
ﬁve categories. We use 3D boxes for evaluation with 0.25
for the IoU as in , results are reported in Table 3.
Object Orientation
We evaluate two exemplar-based approaches: Exemplar SVM and Sliding Shapes . We
transfer the orientations from the training exemplars to the
predicted bounding boxes. Some categories (e.g. round table) do not have well-deﬁned orientations and are not included for evaluation. Figure 8 shows example results, and
Figure 9 shows the distribution of prediction error.
Room Layout Estimation
Although there exists an algorithm for this task , we could not ﬁnd an open source
implementation. Therefore, we design three baselines: the
simplest baseline (named Convex Hull) computes the ﬂoor
and ceiling heights by taking the 0.1 and 99.9 percentiles
of the 3D points along the gravity direction, and computes
the convex hull of the point projection onto the ﬂoor plane
IoU 50.7 Rr: 0.333 Rg: 0.333 Pg : 0.375
IoU: 53.1 Rr: 0.333 Rg: 0.333 Pg: 0.125
IoU: 57.3 Rr :0.33 Rg: 0.667 Pg:0.125
IoU: 53.1 Rr: 0.111 Rg : 0.111 Pg: 0.5
IoU 72.9 Rr: 0.333 Rg: 0.667 Pg: 0.667
IoU 63.9 Rr: 0.333 Rg: 0.667 Pg:1
IoU: 77.0 Rr: 0.25 Rg: 0.25 Pg: 0.5
IoU: 78.8 Rr: 1 Rg: 1 Pg: 0.5
Ground truth
Sliding Shapes
IoU: 54.6 Rr : 0.333 Rg : 0.333 Pg: 0.125
IoU:60 Rr: 0.50 Rg : 0.0.50 Pg: 0.5
garbage bin
night stand
Figure 11. Visualization of total scene understanding results.
to estimate the walls. Our stronger baseline (named Manhattan Box) uses plane ﬁtting to estimate a 3D rectangular
room box. We ﬁrst estimate the three principal directions of
the point cloud based on the histogram of normal directions
(see Section 2.5). We then segment the point cloud based on
the normal orientation and look for the planes with furthest
distance from center to form a box for the room layout. To
compare with the color-based approach, we run Geometric
Context on the color image to estimate the room layout
in 2D. We then use the camera tilt angle from gravity direction estimation and the focal length from the sensor to reconstruct the layout in 3D with single-view geometry, using
the estimated ﬂoor height to scale the 3D layout properly.
Figure 10 shows examples of the results of these algorithms.
Average IoU for Geometric Context is 0.442, Convex Hull
is 0.713, and Manhattan Box is 0.734 performs best.
Total Scene Understanding
We use RGB-D RCNN and
Sliding Shapes for object detection and combine them with
Manhattan Box for room layout estimation. We do nonmaximum suppression across object categories. For RGB-
D RCNN, we estimate the 3D bounding boxes of objects
from the 2D detection results. To get the 3D box we ﬁrst
project the points inside the 2D window to 3D. Along each
major direction of the room we build a histogram of the
point count. Starting from the median of the histogram, we
set the box boundary at the ﬁrst discontinuous location. We
also set a threshold of detection conﬁdence and maximum
number of objects in a room to further reduce the number
of detections. With the objects and room layout in hand
we propose four simple ways to integrate them: (1) directly
combines them; (2) remove the object detections that fall
outside the estimated room layout; (3) adjust room to en-
Percent drop (%)
Kinect v2 18.07 22.15 24.46 18.93 22.28 24.77 -4.76 -0.60
12.28 16.80 15.31 15.86 13.71 23.76 29.22 -18.39 55.23
Kinect v2 15.45 30.54 29.53 16.34 8.74 18.69 -5.78 71.38 36.70
8.13 24.39 28.38 14.95 18.33 24.30 45.64 -33.05 -16.79
Table 6. Cross-sensor bias.
compass 90 % the objects; (4) adjust the room according
to majority of objects and remove the out-of-room objects.
Figure 11 and Table 5 show the results.
Cross sensor
Because real data likely come from different sensors, it is important that an algorithm can generalize
across them. Similar to dataset bias , we study sensor
bias for different RGB-D sensors. We conduct an experiment to train a DPM object detector using data captured by
one sensor and test on data captured by another to evaluate
the cross-sensor generality. To separate out the dataset biases, we do this experiment on a subset of our data, where
a Xtion and a Kinect v2 are mounted on a rig with large
overlapping views of the same places. From the result in
Table 6, we can see that sensor bias does exist. Both color
and depth based algorithms exhibit some performance drop.
We hope this benchmark can stimulate the development of
RGB-D algorithms with better sensor generalization ability.
5. Conclusions
We introduce a RGB-D benchmark suite at PASCAL
VOC scale with annotation in both 2D and 3D. We propose 3D metrics and evaluate algorithms for all major tasks
towards total scene understanding. We hope that our benchmarks will enable signiﬁcant progress for RGB-D scene understanding in the coming years.
Acknowledgement.
This work is supported by gift funds
from Intel Corporation. We thank Thomas Funkhouser, Jitendra Malik, Alexi A. Efros and Szymon Rusinkiewicz for
valuable discussion. We also thank Linguang Zhang, Fisher
Yu, Yinda Zhang, Luna Song, Zhirong Wu, Pingmei Xu,
Guoxuan Zhang and others for data capturing and labeling.