Sparseness Meets Deepness: 3D Human Pose Estimation from Monocular Video
Xiaowei Zhou†∗, Menglong Zhu†∗, Spyridon Leonardos†, Konstantinos G. Derpanis‡, Kostas Daniilidis†
† University of Pennsylvania
‡ Ryerson University
This paper addresses the challenge of 3D full-body human pose estimation from a monocular image sequence.
Here, two cases are considered: (i) the image locations of
the human joints are provided and (ii) the image locations
of joints are unknown. In the former case, a novel approach
is introduced that integrates a sparsity-driven 3D geometric
prior and temporal smoothness. In the latter case, the former case is extended by treating the image locations of the
joints as latent variables to take into account considerable
uncertainties in 2D joint locations. A deep fully convolutional network is trained to predict the uncertainty maps
of the 2D joint locations. The 3D pose estimates are realized via an Expectation-Maximization algorithm over the
entire sequence, where it is shown that the 2D joint location uncertainties can be conveniently marginalized out
during inference. Empirical evaluation on the Human3.6M
dataset shows that the proposed approaches achieve greater
3D pose estimation accuracy over state-of-the-art baselines. Further, the proposed approach outperforms a publicly available 2D pose estimation baseline on the challenging PennAction dataset.
1. Introduction
This paper is concerned with the challenge of recovering
the 3D full-body human pose from a monocular RGB image
sequence. Potential applications of the presented research
include human-computer interaction (cf. ), surveillance,
video browsing and indexing, and virtual reality.
From a geometric perspective, 3D articulated pose recovery is inherently ambiguous from monocular imagery
 . Further difﬁculties are raised due to the large variation
in human appearance (e.g., clothing, body shape, and illumination), arbitrary camera viewpoint, and obstructed visibility due to external entities and self-occlusions. Notable
successes in pose estimation consider the challenge of 2D
pose recovery using discriminatively trained 2D part models coupled with 2D deformation priors, e.g., ,
and more recently using deep learning, e.g., . Here,
∗The ﬁrst two authors contributed equally to this work.
Figure 1. Overview of the proposed approach.
(top-left) Input
image sequence, (top-right) CNN-based heat map outputs representing the soft localization of 2D joints, (bottom-left) 3D pose
dictionary, and (bottom-right) the recovered 3D pose sequence reconstruction.
the 3D pose geometry is not leveraged. Combining robust
image-driven 2D part detectors, expressive 3D geometric
pose priors and temporal models to aggregate information
over time is a promising area of research that has been given
limited attention, e.g., . The challenge posed is how
to seamlessly integrate 2D, 3D and temporal information to
fully account for the model and measurement uncertainties.
This paper presents a 3D pose recovery framework that
consists of a novel synthesis between discriminative imagebased and 3D reconstruction approaches. In particular, the
approach reasons jointly about image-based 2D part location estimates and model-based 3D pose reconstruction, so
that they can beneﬁt from each other. Further, to improve
the approach’s robustness against detector error, occlusion,
and reconstruction ambiguity, temporal smoothness is imposed on the 3D pose and viewpoint parameters. Figure 1
provides an overview of the proposed approach. Given the
input video (Fig. 1, top-left), 2D joint heat maps are generated with a deep convolutional neural network (CNN) (Fig.
1, top-right). These heat maps are combined with a sparse
model of 3D human pose (Fig. 1, bottom-left) within an
Expectation-Maximization (EM) framework to recover the
3D pose sequence (Fig. 1, bottom-right).
 
Considerable research has addressed the challenge of human motion capture from imagery . This
work includes 2D human pose recovery in both single images (e.g., ) and video, e.g., . In the current work, focus is placed on 3D pose
recovery in video, where the pose model and prior are expressed in their natural 3D domain.
Early research on 3D monocular pose estimation in
videos largely centred on incremental frame-to-frame pose
tracking, e.g., . These approaches rely on a given
pose and dynamic model to constrain the pose search space.
Notable drawbacks of this approach include: the requirement that the initialization be provided and their inability to
recover from tracking failures. To address these limitations,
more recent approaches have cast the tracking problem as
one of data association across frames, i.e., “tracking-bydetection”, e.g., . Here, candidate poses are ﬁrst detected
in each frame and subsequently a linking process attempts
to establish temporally consistent poses.
Another strand of research has focused on methods that
predict 3D poses by searching a database of exemplars
 or via a discriminatively learned mapping from
the image directly or image features to human joint locations . Recently, deep convolutional networks (CNNs) have emerged as a common element behind
many state-of-the-art approaches, including human pose estimation, e.g., .
Here, two general approaches can be distinguished. The ﬁrst approach casts the
pose estimation task as a joint location regression problem from the input image .
The second approach uses a CNN architecture for body part detection
 and then typically enforces the 2D spatial relationship between body parts as a subsequent processing step. Similar to the latter approaches, the proposed
approach uses a CNN-based architecture to regress conﬁdence heat maps of 2D joint position predictions. The current work departs from these approaches by enforcing 3D
spatial part relationships rather than 2D ones.
Most closely related to the present paper are generic factorization approaches for recovering 3D non-rigid shapes
from image sequences captured with a single camera , i.e., non-rigid structure from motion (NRSFM),
and human pose recovery models based on known skeletons or sparse representations . Much of this work has been realized by assuming manually labeled 2D joint locations; however, there is
some recent work that has used a 2D pose detector to automatically provide the input joints or solved 2D and
3D pose estimation jointly .
Contributions: The proposed approach advances the stateof-the-art in the following three ways. First, in contrast to
prediction methods (e.g., ), the proposed approach
does not require synchronized 2D-3D data, as captured by
motion capture systems. The proposed approach only requires readily available annotated 2D imagery (e.g., the “inthe-wild” PennAction dataset ) to train a CNN part detector and a separate 3D motion capture dataset (e.g., the
CMU MoCap database) for the pose dictionary. Second,
in comparison to other 3D reconstruction methods (e.g.,
 ), the proposed approach considers an arbitrary pose
uncertainty. Finally, in contrast to prior work that consider
two disjoint steps (i.e., detection of 2D joints and subsequent lifting the detections to 3D), the current approach
combines these steps by casting the 2D joint locations as latent variables. This allows us to leverage the 3D geometric
prior to help 2D joint localization and to rigorously handle
the 2D estimation uncertainty in a statistical framework.
In this section, the models that describe the relationships
between 3D poses, 2D poses and images are introduced.
2.1. Sparse representation of 3D poses
The 3D human pose is represented by the 3D locations
of a set of p joints, which is denoted by St ∈R3×p for
frame t. To reduce the ambiguity for 3D reconstruction, it
is assumed that a 3D pose can be represented as a linear
combination of predeﬁned basis poses:
where Bi ∈R3×p denotes a basis pose and cit the corresponding weight. The basis poses are learned from training
poses provided by a motion capture (MoCap) dataset. Instead of using the conventional active shape model ,
where the basis set is small, a sparse representation is
adopted which has proven in recent work to be capable of
modelling the large variability of human pose, e.g., . That is, an overcomplete dictionary, {B1, · · · , Bk},
is learned with a relatively large number of basis poses, k,
where the coefﬁcients, cit, are assumed to be sparse. In the
remainder of this paper, ct denotes the coefﬁcient vector
[c1t, · · · , ckt]⊤for frame t and C denotes the matrix composed of all ct.
2.2. Dependence between 2D and 3D poses
The dependence between a 3D pose and its imaged 2D
pose is modelled with a weak perspective camera model:
W t = RtSt + T t1⊤,
where W t ∈R2×p denotes the 2D pose in frame t, and
Rt ∈R2×3 and T t ∈R2 the camera rotation and translation, respectively. Note, the scale parameter in the weak
perspective model is removed because the 3D structure, St,
can itself be scaled. In the following, W , R and T denote
the collections of W t, Rt and T t for all t, respectively.
Considering the observation noise and model error, the
conditional distribution of the 2D poses given the 3D pose
parameters is modelled as
Pr(W |θ) ∝e−L(θ;W ),
where θ = {C, R, T } is the union of all the 3D pose parameters and the loss function, L(θ; W ), is deﬁned as
L(θ; W ) = ν
citBi −T t1⊤
with ∥· ∥F denoting the Frobenius norm. The model in (3)
states that, given the 3D poses and camera parameters, the
2D location of each joint belongs to a Gaussian distribution
with a mean equal to the projection of its 3D counterpart
and a precision (i.e., the inverse variance) equal to ν.
2.3. Dependence between pose and image
When 2D poses are given, it is assumed that the distribution of 3D pose parameters is conditionally independent of
the image data. Therefore, the likelihood function of θ can
be factorized as
Pr(I, W |θ) = Pr(I|W )Pr(W |θ),
where I = {I1, · · · , In} denotes the input images and
Pr(W |θ) is given in (3). Pr(I|W ) is difﬁcult to directly
model, but it is proportional to Pr(W |I) by assuming uniform priors on W and I, and Pr(W |I) can be learned from
Given the image data, the 2D distribution of each joint is
assumed to be only dependent on the current image. Thus,
Pr(I|W ) ∝Pr(W |I) = ΠtΠjhj(wjt; It),
where wjt denotes the image location of joint j in frame
t, and hj(·; Y ) represents a mapping from an image Y to
a probability distribution of the joint location (termed heat
map). For each joint j, the mapping hj is approximated
by a CNN learned from training data. The details of CNN
learning are described in Section 4.
2.4. Prior on model parameters
The following penalty function on the model parameters
is introduced:
R(θ) = α∥C∥1 + β
where ∥· ∥1 denotes the ℓ1-norm (i.e., the sum of absolute
values), and ∇t the discrete temporal derivative operator.
The ﬁrst term penalizes the cardinality of the pose coefﬁcients to induce a sparse pose representation. The second
and third terms impose ﬁrst-order smoothness on both the
pose coefﬁcients and rotations.
3. 3D pose inference
In this section, the proposed approach to 3D pose inference is described. Here, two cases are distinguished: (i) the
image locations of the joints are provided (Section 3.1) and
(ii) the joint locations are unknown (Section 3.2).
3.1. Given 2D poses
When the 2D poses, W , are given, the model parameters, θ, are recovered via penalized maximum likelihood
estimation (MLE):
θ∗= argmax
ln Pr(W |θ) −R(θ)
L(θ; W ) + R(θ).
The problem in (8) is solved via block coordinate descent,
i.e., alternately updating C, R or T while ﬁxing the others.
The update of C needs to solve:
L(C; W ) + α∥C∥1 + β
where the objective is the composite of two differentiable
functions plus an ℓ1 penalty. The problem in (9) is solved by
accelerated proximal gradient (APG) . Since the problem in (9) is convex, global optimality is guaranteed. The
update of R needs to solve:
L(R; W ) + γ
where the objective is differentiable and the variables are rotations restricted to SO(3). Here, manifold optimization is
adopted to update the rotations using the trust-region solver
in the Manopt toolbox . The update of T has the following closed-form solution:
T t ←row mean
The entire algorithm for 3D pose inference given the 2D
poses is summarized in Algorithm 1. The iterations are terminated once the objective value has converged. Since in
each step the objective function is non-increasing, the algorithm is guaranteed to converge; however, since the problem
in (8) is nonconvex, the algorithm requires a suitably chosen
initialization (described in Section 3.3).
3.2. Unknown 2D poses
If the 2D poses are unknown, W is treated as a latent
variable and is marginalized during the estimation process.
The marginalized likelihood function is
Pr(I, W |θ)dW ,
Algorithm 1: Block coordinate descent to solve (8).
Input: W ;
// 2D joint locations
Output: C, R, T ;
// pose parameters
1 initialize the parameters ;
// Section 3.3
2 while not converged do
update C by (9) with APG;
update R by (10) with Manopt;
update T by (11);
where Pr(I, W |θ) is given in (5).
Direct marginalization of (12) is extremely difﬁcult. Instead, an EM algorithm is developed to compute the penalized MLE. In the expectation step, the expectation of the
penalized log-likelihood is calculated with respect to the
conditional distribution of W given the image data and the
previous estimate of all the 3D pose parameters, θ′:
{ln Pr(I, W |θ) −R(θ)} Pr(W |I, θ′)dW
{ln Pr(I|W ) + ln Pr(W |θ) −R(θ)} Pr(W |I, θ′)dW
L(θ; W )Pr(W |I, θ′)dW −R(θ).
It can be easily shown that
L(θ; W )Pr(W |I, θ′)dW = L(θ; E [W |I, θ′]) + const,
where E [W |I, θ′] is the expectation of W given I and θ′:
E [W |I, θ′] =
Pr(W |I, θ′) W dW
Z Pr(I|W )Pr(W |θ′)
and Z is a scalar that normalizes the probability. The derivation of (14) and (15) is given in the supplementary material. Both Pr(I|W ) and Pr(W |θ′) given in (6) and (3), respectively, are products of marginal probabilities of wjt.
Therefore, the expectation of each wjt can be computed
separately. In particular, the expectation of each wjt is efﬁciently approximated by sampling over the pixel grid.
In the maximization step, the following is computed:
L(θ; E [W |I, θ′]) + R(θ),
which can be solved by Algorithm 1.
The entire EM algorithm is summarized in Algorithm 2
with the initialization scheme described next in Section 3.3.
Algorithm 2: The EM algorithm for pose from video.
Input: hj(·; It), ∀j, t ;
// heat maps
Output: θ = {C, R, T } ;
// pose parameters
1 initialize the parameters ;
// Section 3.3
2 while not converged do
// Compute the expectation of W
E [W |I, θ′] =
Z Pr(I|W )Pr(W |θ′) W dW ;
// Update θ by Algorithm 1
θ = argminθ L(θ; E [W |I, θ′]) + R(θ) ;
3.3. Initialization
A convex relaxation approach is used to initialize the parameters. In , a convex formulation was
proposed to solve the single frame pose estimation problem given 2D correspondences, which is a special case of
(8). The approach was later extended to handle 2D correspondence outliers . If the 2D poses are given, the
model parameters are initialized for each frame separately
with the convex method proposed in . Alternatively, if
the 2D poses are unknown, for each joint, the image location with the maximum heat map value is used. Next, the
robust estimation algorithm from is applied to initialize
the parameters.
4. CNN-based joint uncertainty regression
A CNN is used to learn the mapping Y 7→hj(·; Y ),
where Y denotes an input image and hj(·; Y ) represents a
heat map for joint j. Instead of learning p networks for p
joints, a fully convolutional neural network is trained
to regress p joint distributions simultaneously by taking into
account the full-body information.
During training, a rectangular patch is extracted around
the subject from each image and is resized to 256×256 pixels. Random shifts are applied during cropping and RGB
channel-wise random noise is added for data augmentation.
Channel-wise RGB mean values are computed from the
dataset and subtracted from the images for data normalization. The training labels to be regressed are multi-channel
heat maps with each channel corresponding to the image
location uncertainty distribution for each joint. The uncertainty is modelled by a Gaussian centered at the annotated
joint location with variance σ = 1.5. The heat map resolution is reduced to 32 × 32 to decrease the CNN model
size which allows a large batch size in training and prevents
overﬁtting.
The CNN architecture used is similar to the SpatialNet
model proposed elsewhere but without any spatial fu-
sion or temporal pooling. The network consists of seven
convolutional layers with 5 × 5 ﬁlters followed by ReLU
layers and a last convolutional layer with 1 × 1 × p ﬁlters to
provide dense prediction for all joints. A 2×2 max pooling
layer is inserted after each of the ﬁrst three convolutional
layers. The network is trained by minimizing the l2 loss
between the prediction and the label with the open source
Caffe framework . Stochastic gradient descent (SGD)
with momentum of 0.9 and a mini-batch size of 128 is used.
During testing, consistent with previous 3D pose methods (e.g., ), a bounding box around the subject is
assumed and the image patch in the bounding box It is
cropped in frame t and fed forward through the network
to predict the heat maps, hj(·; It), ∀j = 1, . . . , n.
5. Empirical evaluation
5.1. Datasets and implementation details
Empirical evaluation was performed on two datasets –
Human3.6M and PennAction .
The Human3.6M dataset is a recently published
large-scale dataset for 3D human sensing. It includes millions of 3D human poses acquired from a MoCap system
with corresponding images from calibrated cameras. This
setup provides synchronized videos and 2D-3D pose data
for evaluation. It includes 11 subjects performing 15 actions, such as eating, sitting and walking. The same data
partition protocol as in previous work was used :
the data from ﬁve subjects (S1, S5, S6, S7, S8) was used
for training and the data from two subjects (S9, S11) was
used for testing. The original frame rate is 50 fps and is
downsampled to 10 fps.
The PennAction dataset is a recently introduced inthe-wild human action dataset containing 2326 challenging
consumer videos. The dataset consists of 15 actions, such
as golf swing, bowling, and tennis swing. Each of the video
sequences is manually annotated frame-by-frame with 13
human body joints in 2D. In evaluation, PennAction’s training and testing split was used which consists of an even split
of the videos between training and testing.
The algorithm in was used to learn the pose dictionaries. The dictionary size was set to K = 64 for actionspeciﬁc dictionaries and K = 128 for the nonspeciﬁc action
case. For all experiments, the parameters of the proposed
model were ﬁxed (α = 0.1, β = 5, γ = 0.5, ν = 4 in a
normalized 2D coordinate system).
5.2. Evaluation with known 2D poses
First, the evaluation of the 3D reconstructability of the
proposed method with known 2D poses is presented. The
generic approach to 3D reconstruction from 2D correspondences across a sequence is NRSFM. The proposed method
is compared to the state-of-the-art method for NRSFM 
Synthesized
NRSFM 
Single frame initialization
Optimization by Algorithm 1
Table 1. 3D reconstruction given 2D poses. Two input cases are
considered: original 2D pose data from Human3.6M and synthesized 2D pose data with artiﬁcial camera motion. The numbers are
the mean per joint errors (mm) in 3D.
on the Human3.6M dataset. A recent baseline method for
single-view pose reconstruction Projected Matching Pursuit
(PMP) is also included in comparison.
The sequences of S9 and S11 from the ﬁrst camera in the
Human 3.6M dataset were used for evaluation and frames
beyond 30 seconds were truncated for each sequence. The
2D orthographic projections of the 3D poses provided in the
dataset were used as the input. Performance was evaluated
by the mean per joint error (mm) in 3D by comparing the
reconstructed pose against the ground truth. As the standard
protocol for evaluating NRSFM, the error was calculated up
to a similarity transformation via the Procrustes analysis. To
demonstrate the generality of the proposed approach, a single pose dictionary from all the training pose data, irrespective of the action type, was used, i.e., a non-action speciﬁc
model. The method from Dai et al. requires a prede-
ﬁned rank K. Here, various values of K were considered
with the best result for each sequence reported.
The results are shown in the second column of Table 1.
The proposed method clearly outperforms the NRSFM
The reason is that the videos are captured by
stationary cameras. Although the subject is occasionally
rotating, the “baseline” between frames is generally small,
and neighboring views provide insufﬁcient geometric constraints for 3D reconstruction. In other words, NRSFM is
very difﬁcult to compute with slow camera motion. This
observation is consistent with prior ﬁndings in the NRSFM
literature, e.g., . To validate this issue, an artiﬁcial rotation was applied to the 3D poses by 15 degrees per second
and the 2D joint locations were synthesized by projecting
the rotated 3D poses into 2D. The corresponding results are
presented in the third column of Table 1. In this case, the
performance of NRSFM improved dramatically. Overall,
the experiments demonstrate that the structure prior (even a
non-action speciﬁc one) from existing pose data is critical
for reconstruction. This is especially true for videos with
small camera motion, which is common in real world applications. The temporal smoothness helps but the change
is not signiﬁcant since the single frame initialization is very
stable with known 2D poses. Nevertheless, in the next section it is shown that the temporal smoothness is important
when 2D poses are not given.
Directions
Discussion
LinKDE 
Li et al. 
Tekin et al. 
SittingDown
WalkTogether
LinKDE 
Li et al. 
Tekin et al. 
Table 2. Quantitative comparison on Human 3.6M datasets. The numbers are the mean per joint errors (mm) in 3D evaluated for different
actions of Subjects 9 and 11.
2D (pixel)
Single frame initialization
Optimization by Algorithm 2
Perspective adjustment
No smoothness
No action label
Table 3. The estimation errors after separate steps and under additional settings. The numbers are the average per joint errors for all
testing data in both 3D and 2D.
5.3. Evaluation with unknown poses: Human3.6M
Next, results on the Human3.6M dataset are reported
when 2D poses are not given. The proposed method is compared to three recent baseline methods. The ﬁrst baseline
method is LinKDE which is provided with the Human3.6M
dataset . This baseline is based on single frame regression. The second one is from Tekin et al. which extends
the ﬁrst baseline method by exploring motion information
in a short sequence. The third one is a recently published
CNN-based method from Li et al. .
In this experiment, the sequences of S9 and S11 from
all cameras were used for evaluation. The standard evaluation protocol of the Human3.6M dataset was adopted, i.e.,
the mean per joint error (mm) in 3D is calculated between
the reconstructed pose and the ground truth in the camera
frame with their root locations aligned. Note that the Procrustes alignment is not allowed here. In general, it is impossible to determine the scale of the object in monocular
images. The baseline methods learned the scale from training subjects. For a fair comparison, the reconstructed pose
by the proposed method was scaled such that the mean limb
length of the reconstructed pose was identical to the average value of all training subjects. As the alignment to the
ground truth was not allowed, the joint error was largely affected by the camera rotation estimate, and empirically the
misalignment was largely due to the adopted weak perspective camera model. To compensate the misalignment, the
rotation estimate was reﬁned for each frame with a perspective camera model (the 2D and 3D human pose estimates
were ﬁxed) by a perspective-n-point (PnP) algorithm 
The results are summarized in Table 2. The table shows
that the proposed method achieves the best results on most
of the actions except for “walk” and “walk together”, which
involve very predictable and repetitive motions and might
favor the direct regression approach . In addition, the
results of the proposed approach have the smallest variation
across all actions with a standard deviation of 28.75 versus
37.80 from Tekin et al.
In Table 3, 3D reconstruction and 2D joint localization results are provided under several setup variations of
the proposed approach. Note that the 2D errors are with
respect to the normalized bounding box size 256 × 256.
The table shows that the convex initialization provides suitable initial estimates, which are further improved by the
EM algorithm that integrates joint detection uncertainty and
temporal smoothness. The perspective adjustment is important under the Human3.6M evaluation protocol, where
Procrustes alignment to the ground truth is not allowed.
The proposed approach was also evaluated under two additional settings. In the ﬁrst setting, the smoothness constraint was removed from the proposed model by setting
β = γ = 0. As a result, the average error signiﬁcantly
increased. This demonstrates the importance of incorporating temporal smoothness. In the second setting, a single
CNN and pose dictionary was learned from all training data.
These models were then applied to all testing data without
distinguishing the videos by their action class. As a result,
the estimation error increased, which is attributed to the fact
that the 3D reconstruction ambiguity is greatly enlarged if
the pose prior is not restricted to an action class.
Figure 2. Example frame results on Human3.6M, where the errors in the 2D heat maps are corrected after considering the pose and temporal
smoothness priors. Each row includes two examples from two actions. The ﬁgures from left-to-right correspond to the heat map (all joints
combined), the 2D pose by greedily locating each joint separately according to the heat map, the estimated 2D pose by the proposed EM
algorithm, and the estimated 3D pose visualized in a novel view. The original viewpoint is also shown.
Figure 2 visualizes the results of some example frames.
While the heat maps may be erroneous due to occlusion,
left-right ambiguity, and other uncertainty from the detectors, the proposed EM algorithm can largely correct the
errors by leveraging the pose prior, integrating temporal
smoothness, and modelling the uncertainty.
5.4. Evaluation with unknown poses: PennAction
Finally, the applicability of the proposed approach for
pose estimation with in-the-wild videos is demonstrated.
Results are reported using two actions from the PennAction dataset: “golf swing” and “tennis forehand”, both of
which are very challenging due to large pose variability,
self-occlusion, and image blur caused by fast motion. For
the proposed approach, the CNN was trained using the annotated training images from the PennAction dataset, while
the pose dictionary was learned with publicly available Mo-
Cap data1. Due to the lack of 3D ground truth, quantitative
2D pose estimation results are reported and compared with
the publicly available 2D pose detector from Yang and Ramanan . The baseline was retrained on the PennAction
dataset. Note that the baseline methods considered in Section 5.3 are not applicable here since they require synchronized 2D image and 3D pose data for training.
To measure joint localization accuracy, both the widely
used per joint distance errors and the probability of correct
keypoint (PCK) metrics are used. The PCK metric measures the fraction of correctly located joints with respect to
a threshold. Here, the threshold is set to 10 pixels which is
roughly the half length of a head segment.
Table 4 summarizes the quantitative results. The initial-
1Data sources:
 and http://
www.motioncapturedata.com
Figure 3. Example results on PennAction. Each row includes two examples. In each example, the ﬁgures from left-to-right correspond
to the ground truth superimposed on the image, the estimated pose using the baseline approach , the estimated pose by the proposed
approach, and the estimated 3D pose visualized in a novel view. The original viewpoint is also shown.
24.78 / 0.38
18.73 / 0.45
14.03 / 0.54
29.15 / 0.40
25.75 / 0.42
20.99 / 0.45
Table 4. 2D pose errors on PennAction. Each pair of numbers correspond to the per joint distance error (pixels) and the PCK metric.
The baseline is the retrained model from Yang and Ramanan .
The last two columns correspond to the errors after initialization
and EM optimization in the proposed approach.
ization step alone outperformed the baseline. This demonstrates the effectiveness of CNN-based approaches, which
has been shown in many recent works, e.g., . The
proposed EM algorithm further improves upon the initialization results by a large margin by integrating the geometric and smoothness priors. Several example results are
shown in Figure 3. It can be seen that the proposed method
successfully recovers the poses for various subjects under a
variety of viewpoints. In particular, compared to the baseline, the proposed method does not suffer from the wellknown “double-counting” problem for tree-based models
 due to the holistic 3D pose prior.
5.5. Running time
The experiments were performed on a desktop with an
Intel i7 3.4G CPU, 8G RAM and a TitanZ GPU. The running times for CNN-based heat map generation and convex
initialization were roughly 1s and 0.6s per frame, respectively; both steps can be easily parallelized. The EM algorithm usually converged in 20 iterations with a CPU time
less than 100s for a sequence of 300 frames.
6. Summary
In summary, a 3D pose estimation framework from video
has been presented that consists of a novel synthesis between a deep learning-based 2D part regressor, a sparsitydriven 3D reconstruction approach and a 3D temporal
smoothness prior. This joint consideration combines the
discriminative power of state-of-the-art 2D part detectors,
the expressiveness of 3D pose models and regularization by
way of aggregating information over time. In practice, alternative joint detectors, pose representations and temporal models can be conveniently integrated in the proposed
framework by replacing the original components. Experiments demonstrated that 3D geometric priors and temporal
coherence can not only help 3D reconstruction but also improve 2D joint localization. Future extensions may include
incremental algorithms for online tracking-by-detection and
handling multiple subjects.
Supplementary material: The MATLAB code, evaluation on
the HumanEva I dataset, demonstration videos, and other supplementary materials are available at: 
edu/˜xiaowz/monocap.html.
Acknowledgments:
The authors are grateful for support
through the following grants:
NSF-DGE-0966142, NSF-IIS-
1317788, NSF-IIP-1439681, NSF-IIS-1426840, ARL MAST-
CTA W911NF-08-2-0004,
ARL RCTA W911NF-10-2-0016,
ONR N000141310778, and NSERC Discovery.