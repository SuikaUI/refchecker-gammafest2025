Dreaming to Distill: Data-free Knowledge Transfer via DeepInversion
Hongxu Yin1,2:∗, Pavlo Molchanov1˚, Zhizhong Li1,3:, Jose M. Alvarez1,
Arun Mallya1, Derek Hoiem3, Niraj K. Jha2, and Jan Kautz1
1NVIDIA, 2Princeton University, 3University of Illinois at Urbana-Champaign
{hongxuy, jha}@princeton.edu, {zli115, dhoiem}@illinois.edu,
{pmolchanov, josea, amallya, jkautz}@nvidia.com
Pretrained model (fixed), e.g. ResNet50
propagation
Input (updated)
Feature distribution
regularization
Teacher logits
Shannon (JS)
divergence
Target class
Noise ⟶ Image
Inverted from a pretrained ImageNet ResNet-50 classifier
(more examples in Fig. 5 and Fig. 6)
Pretrained model (fixed)
Kullback–Leibler
divergence
Adaptive DeepInversion
DeepInversion
Synthesized Images
Student model (fixed)
Student model
propagation
Knowledge Distillation
Figure 1: We introduce DeepInversion, a method that optimizes random noise into high-ﬁdelity class-conditional images given just a
pretrained CNN (teacher), in Sec. 3.2. Further, we introduce Adaptive DeepInversion (Sec. 3.3), which utilizes both the teacher and
application-dependent student network to improve image diversity. Using the synthesized images, we enable data-free pruning (Sec. 4.3),
introduce and address data-free knowledge transfer (Sec. 4.4), and improve upon data-free continual learning (Sec. 4.5).
We introduce DeepInversion, a new method for synthesizing images from the image distribution used to train a deep
neural network. We “invert” a trained network (teacher) to
synthesize class-conditional input images starting from random noise, without using any additional information on the
training dataset. Keeping the teacher ﬁxed, our method optimizes the input while regularizing the distribution of intermediate feature maps using information stored in the batch normalization layers of the teacher. Further, we improve the diversity of synthesized images using Adaptive DeepInversion,
which maximizes the Jensen-Shannon divergence between
the teacher and student network logits. The resulting synthesized images from networks trained on the CIFAR-10 and
ImageNet datasets demonstrate high ﬁdelity and degree of realism, and help enable a new breed of data-free applications
– ones that do not require any real images or labeled data.
We demonstrate the applicability of our proposed method to
three tasks of immense practical importance – (i) data-free
network pruning, (ii) data-free knowledge transfer, and (iii)
data-free continual learning. Code is available at https:
//github.com/NVlabs/DeepInversion
∗Equal contribution.
: Work done during an internship at NVIDIA.
Work supported in part by ONR MURI N00014-16-1-2007.
1. Introduction
The ability to transfer learned knowledge from a trained
neural network to a new one with properties desirable for the
task at hand has many appealing applications. For example,
one might want to use a more resource-efﬁcient architecture
for deployment on edge inference devices , or to
adapt the network to the inference hardware , or
for continually learning to classify new image classes , etc. Most current solutions for such knowledge transfer
tasks are based on the concept of knowledge distillation ,
wherein the new network (student) is trained to match its
outputs to that of a previously trained network (teacher).
However, all such methods have a signiﬁcant constraint –
they assume that either the previously used training dataset is
available , or some real images representative
of the prior training dataset distribution are available . Even methods not based on distillation 
assume that some additional statistics about prior training is
made available by the pretrained model provider.
The requirement for prior training information can be
very restrictive in practice. For example, suppose a very deep
network such as ResNet-152 was trained on datasets
with millions or even billions of images , and we
wish to distill its knowledge to a lower-latency model such
 
as ResNet-18. In this case, we would need access to these
datasets, which are not only large but difﬁcult to store, transfer, and manage. Further, another emerging concern is that
of data privacy. While entities might want to share their
trained models, sharing the training data might not be desirable due to user privacy, security, proprietary concerns, or
competitive disadvantage.
In the absence of prior data or metadata, an interesting
question arises – can we somehow recover training data from
the already trained model and use it for knowledge transfer?
A few methods have attempted to visualize what a trained
deep network expects to see in an image . The
most popular and simple-to-use method is DeepDream .
It synthesizes or transforms an input image to yield high
output responses for chosen classes in the output layer of
a given classiﬁcation model. This method optimizes the
input (random noise or a natural image), possibly with some
regularizers, while keeping the selected output activations
ﬁxed, but leaves intermediate representations constraint-free.
The resulting “dreamed” images lack natural image statistics
and can be quite easily identiﬁed as unnatural. These images
are also not very useful for the purposes of transferring
knowledge, as our extensive experiments in Section 4 show.
In this work, we make an important observation about
deep networks that are widely used in practice – they all
implicitly encode very rich information about prior training
data. Almost all high-performing convolutional neural networks (CNNs), such as ResNets , DenseNets , or
their variants, use the batch normalization layer . These
layers store running means and variances of the activations
at multiple layers. In essence, they store the history of previously seen data, at multiple levels of representation. By
assuming that these intermediate activations follow a Gaussian distribution with mean and variance equal to the running
statistics, we show that we can obtain “dreamed” images that
are realistic and much closer to the distribution of the training
dataset as compared to prior work in this area.
Our approach, visualized in Fig. 1, called DeepInversion,
introduces a regularization term for intermediate layer activations of dreamed images based on just the two layer-wise
statistics: mean and variance, which are directly available
with trained models. As a result, we do not require any training data or metadata to perform training image synthesis.
Our method is able to generate images with high ﬁdelity and
realism at a high resolution, as can be seen in the middle
section of Fig. 1, and more samples in Fig. 5 and Fig. 6.
We also introduce an application-speciﬁc extension of
DeepInversion, called Adaptive DeepInversion, which can
enhance the diversity of the generated images. More specifically, it exploits disagreements between the pretrained
teacher and the in-training student network to expand the
coverage of the training set by the synthesized images. It
does so by maximizing the Jensen-Shannon divergence between the responses of the two networks.
In order to show that our dataset synthesis method is useful in practice, we demonstrate its effectiveness on three
different use cases. First, we show that the generated images
support knowledge transfer between two networks using distillation, even with different architectures, with a minimal
accuracy loss on the simple CIFAR-10 as well as the large
and complex ImageNet dataset. Second, we show that we
can prune the teacher network using the synthesized images
to obtain a smaller student on the ImageNet dataset. Finally,
we apply DeepInversion to continual learning that enables
the addition of new classes to a pretrained CNN without the
need for any original data. Using our DeepInversion technique, we empower a new class of “data-free” applications
of immense practical importance, which need neither any
natural image nor labeled data.
Our main contributions are as follows:
• We introduce DeepInversion, a new method for synthesizing class-conditional images from a CNN trained for
image classiﬁcation (Sec. 3.2). Further, we improve synthesis diversity by exploiting student-teacher disagreements via Adaptive DeepInversion (Sec. 3.3).
• We enable data-free and hardware-aware pruning that
achieves performance comparable to the state-of-theart (SOTA) methods that rely on the training dataset
(Sec. 4.3).
• We introduce and address the task of data-free knowledge
transfer between a teacher and a randomly initialized
student network (Sec. 4.4).
• We improve prior work on data-free continual (a.k.a.
incremental) learning, and achieve results comparable to
oracle methods given the original data (Sec. 4.5).
2. Related Work
Knowledge distillation. Transfer of knowledge from one
model to another was ﬁrst introduced by Breiman and
Shang when they learned a single decision tree to approximate the outputs of multiple decision trees .
Similar ideas are explored in neural networks by Bucilua et
al. , Ba and Caruana , and Hinton et al. . Hinton et al. formulate the problem as “knowledge distillation,” where a compact student mimics the output distributions of expert teacher models . These methods and
improved variants enable teaching students with goals such as quantization , compact
neural network architecture design , semantic segmentation , self-distillation , and un-/semi-supervised
learning . All these methods still rely on images
from the original or proxy datasets. More recent research has
explored data-free knowledge distillation. Lopes et al. 
synthesize inputs based on pre-stored auxiliary layer-wise
statistics of the teacher network. Chen et al. train a new
generator network for image generation while treating the
teacher network as a ﬁxed discriminator. Despite remarkable
insights, scaling to tasks such as ImageNet classiﬁcation,
remains difﬁcult for these methods.
Image synthesis.
Generative adversarial networks
(GANs) have been at the forefront of generative image modeling, yielding high-ﬁdelity images, e.g.,
using BigGAN . Though adept at capturing the image
distribution, training a GAN’s generator requires access to
the original data.
An alternative line of work in security focuses on image
synthesis from a single CNN. Fredrikson et al. propose
the model inversion attack to obtain class images from a
network through a gradient descent on the input. Followup works have improved or expanded the approach to new
threat scenarios . These methods have only been
demonstrated on shallow networks, or require extra information (e.g., intermediate features).
In vision, researchers visualize neural networks to understand their properties. Mahendran et al. explore inversion, activation maximization, and caricaturization to synthesize “natural pre-images” from a trained network .
Nguyen et al. use a trained GAN’s generator as a prior to
invert trained CNNs to images, and its followup Plug
& Play further improves image diversity and quality
via latent code prior. Bhardwaj et al. use the training data
cluster centroids to improve inversion . These methods
still rely on auxiliary dataset information or additional pretrained networks. Of particular relevance to this work is
DeepDream by Mordvintsev et al., which has enabled
the “dreaming” of new object features onto natural images
given a single pretrained CNN. Despite notable progress,
synthesizing high-ﬁdelity and high-resolution natural images from a deep network remains challenging.
Our new data-free knowledge distillation framework consists of two steps: (i) model inversion, and (ii) applicationspeciﬁc knowledge distillation. In this section, we brieﬂy
discuss the background and notation, and then introduce our
DeepInversion and Adaptive DeepInversion methods.
3.1. Background
Knowledge distillation. Distillation is a popular technique for knowledge transfer between two models. In its
simplest form, ﬁrst, the teacher, a large model or ensemble
of models, is trained. Second, a smaller model, the student,
is trained to mimic the behavior of the teacher by matching
the temperature-scaled soft target distribution produced by
the teacher on training images (or on other images from the
same domain). Given a trained model pT and a dataset X,
the parameters of the student model, WS, can be learned by
KLppT pxq, pSpxqq,
where KLp¨q refers to the Kullback-Leibler divergence and
pT pxq “ ppx, WT q and pSpxq “ ppx, WSq are the output
distributions produced by the teacher and student model,
respectively, typically obtained using a high temperature on
the softmax inputs .
Note that ground truths are not required. Despite its
efﬁcacy, the process still relies on real images from the same
domain. Below, we focus on methods to synthesize a large
set of images ˆx P ˆ
X from noise that could replace x P X.
DeepDream . Originally formulated by Mordvintsev et
al. to derive artistic effects on natural images, DeepDream is
also suitable for optimizing noise into images. Given a randomly initialized input (ˆx P RHˆW ˆC, H, W, C being the
height, width, and number of color channels) and an arbitrary
target label y, the image is synthesized by optimizing
ˆx Lpˆx, yq ` Rpˆxq,
where Lp¨q is a classiﬁcation loss (e.g., cross-entropy), and
Rp¨q is an image regularization term. DeepDream uses an
image prior to steer ˆx away from unrealistic
images with no discernible visual information:
Rpriorpˆxq “ αtvRTVpˆxq ` αℓ2Rℓ2pˆxq,
where RTV and Rℓ2 penalize the total variance and ℓ2 norm
of ˆx, respectively, with scaling factors αtv, αℓ2. As both
prior work and we empirically observe, image
prior regularization provides more stable convergence to
valid images. However, these images still have a distribution
far different from natural (or original training) images and
thus lead to unsatisfactory knowledge distillation results.
3.2. DeepInversion (DI)
We improve DeepDream’s image quality by extending
image regularization Rpˆxq with a new feature distribution
regularization term. The image prior term deﬁned previously
provides little guidance for obtaining a synthetic ˆx P
that contains similar low- and high-level features as x P
X. To effectively enforce feature similarities at all levels,
we propose to minimize the distance between feature map
statistics for ˆx and x. We assume that feature statistics follow
the Gaussian distribution across batches and, therefore, can
be deﬁned by mean µ and variance σ2. Then, the feature
distribution regularization term can be formulated as:
Rfeaturepˆxq “
|| µlpˆxq ´ Epµlpxq|Xq ||2`
l pˆxq ´ Epσ2
l pxq|Xq ||2,
where µlpˆxq and σ2
l pˆxq are the batch-wise mean and variance
estimates of feature maps corresponding to the lth convolutional layer. The Ep¨q and ||¨||2 operators denote the expected
value and ℓ2 norm calculations, respectively.
It might seem as though a set of training images would be
required to obtain Epµlpxq|Xq and Epσ2
l pxq|Xq, but the running average statistics stored in the widely-used BatchNorm
(BN) layers are more than sufﬁcient. A BN layer normalizes the feature maps during training to alleviate covariate
shifts . It implicitly captures the channel-wise means
and variances during training, hence allows for estimation
of the expectations in Eq. 4 by:
» BNlprunning meanq,
» BNlprunning varianceq.
As we will show, this feature distribution regularization
substantially improves the quality of the generated images.
We refer to this model inversion method as DeepInversion
´ a generic approach that can be applied to any trained deep
CNN classiﬁer for the inversion of high-ﬁdelity images. Rp¨q
(corr. to Eq. 2) can thus be expressed as
RDIpˆxq “ Rpriorpˆxq ` αfRfeaturepˆxq.
3.3. Adaptive DeepInversion (ADI)
In addition to quality, diversity also plays a crucial role
in avoiding repeated and redundant synthetic images. Prior
work on GANs has proposed various techniques, such as minmax training competition and the truncation trick .
These methods rely on the joint training of two networks
over original data and therefore are not applicable to our
problem. We propose Adaptive DeepInversion, an enhanced
image generation scheme based on a novel iterative competition scheme between the image generation process and
the student network. The main idea is to encourage the synthesized images to cause student-teacher disagreement. For
this purpose, we introduce an additional loss Rcompete for
image generation based on the Jensen-Shannon divergence
that penalizes output distribution similarities,
Rcompetepˆxq
1 ´ JSppT pˆxq, pSpˆxqq,
JSppT pˆxq, pSpˆxqq “ 1
KLppT pˆxq, Mq ` KLppSpˆxq, Mq
where M “ 1
pT pˆxq`pSpˆxq
is the average of the teacher
and student distributions.
During optimization, this new term leads to new images
the student cannot easily classify whereas the teacher can.
As illustrated in Fig. 2, our proposal iteratively expands the
distributional coverage of the image distribution during the
learning process. With competition, regularization Rp¨q from
Eq. 7 is updated with an additional loss scaled by αc as
RADIpˆxq “ RDIpˆxq ` αcRcompetepˆxq.
original image
distribution
original image
distribution
original image
distribution
original image
distribution
Figure 2: Illustration of the Adaptive DeepInversion competition
scheme to improve image diversity. Given a set of generated images
(shown as green stars), an intermediate student can learn to capture
part of the original image distribution. Upon generating new images
(shown as red stars), competition encourages new samples out of
student’s learned knowledge, improving distributional coverage and
facilitating additional knowledge transfer. Best viewed in color.
3.4. DeepInversion vs. Adaptive DeepInversion
DeepInversion is a generic method that can be applied
to any trained CNN classiﬁer. For knowledge distillation, it
enables a one-time synthesis of a large number of images
given the teacher, to initiate knowledge transfer. Adaptive
DeepInversion, on the other hand, needs a student in the loop
to enhance image diversity. Its competitive and interactive
nature favors constantly-evolving students, which gradually
force new image features to emerge, and enables the augmentation of DeepInversion, as shown in our experiments.
4. Experiments
We demonstrate our inversion methods on datasets of
increasing size and complexity. We perform a number of
ablations to evaluate each component in our method on the
simple CIFAR-10 dataset (32 ˆ 32 pixels, 10 classes). Then,
on the complex ImageNet dataset (224 ˆ 224 pixels, 1000
classes), we show the success of our inversion methods on
three different applications under the data-free setting: (a)
pruning, (b) knowledge transfer, and (c) continual (classincremental) learning. In all experiments, image pixels are
initialized i.i.d. from Gaussian noise of µ “ 0 and σ “ 1.
4.1. Results on CIFAR-10
For validating our design choices, we consider the task of
data-free knowledge distillation, where we teach a student
network randomly initialized from scratch.
Implementation details. We use VGG-11-BN and ResNet-
34 networks pretrained on CIFAR-10 as the teachers. For
all image synthesis in this section, we use Adam for optimization (learning rate 0.05). We generate 32 ˆ 32 images
in batches of 256. Each image batch requires 2k gradient
updates. After a simple grid search optimizing for student
accuracy, we found αtv “ 2.5 ¨ 10´5, αℓ2 “ 3 ¨ 10´8, and
αf “ t1.0, 5.0, 10.0, 100.0u work best for DeepInversion,
and αc “ 10.0 for Adaptive DeepInversion. See supplementary materials for more details.
Baselines – Noise & DeepDream . From Table 1, we
observe that optimized noise, Noise (L), does not provide
any support for knowledge distillation ´ a drastic change
Teacher Network
Student Network
Teacher accuracy
`Rprior (DeepDream )
`Rfeature (DeepInversion)
`Rcompete (ADI)
Table 1: Data-free knowledge transfer to various students on
CIFAR-10. For ADI, we generate one new batch of images every
50 knowledge distillation iterations and merge the newly generated
images into the existing set of generated images.
(a) Noise (opt)
(b) DeepDream 
(c) DAFL 
(d) DeepInversion (DI)
(e) Adaptive DI (ADI)
Figure 3: 32 ˆ 32 images generated by inverting a ResNet-34
trained on CIFAR-10 with different methods. All images are correctly classiﬁed by the network, clockwise: cat, dog, horse, car.
in input distribution disrupts the teacher and impacts the
validity of the transferred knowledge. Adding Rprior, like in
DeepDream, slightly improves the student’s accuracy.
Effectiveness of DeepInversion (Rfeature). Upon adding
Rfeature, we immediately ﬁnd large improvements in accuracy of 40%-69% across all the teaching scenarios. DeepInversion images (Fig. 3(d)) are vastly superior in realism, as
compared to the baselines (Fig. 3(a,b)).
Effectiveness of Adaptive DeepInversion (Rcompete). Using competition-based inversion further improves accuracy
by 1%-10%, bringing the student accuracy very close to that
of the teacher trained on real images from the CIFAR-10
dataset (within 2%). The training curves from one of the runs
are shown in Fig. 4. Encouraging teacher-student disagreements brings in additional “harder” images during training
(shown in Fig. 3(e)) that remain correct for the teacher, but
have a low student accuracy, as can be seen from Fig. 4 (left).
Comparison with DAFL .
We further compare our
method with DAFL , which trains a new generator network to convert noise into images using a ﬁxed teacher. As
can be seen from Fig. 3(c), we notice that these images are
“unrecognizable,” reminiscent of “fooling images” . Our
method enables higher visual ﬁdelity of images and eliminates the need for an additional generator network, while
gaining higher student accuracy under the same setup.
Student accuracy on test split, %
DeepInversion
Adaptive DI
Inversion iteration
Student accuracy on inverted data, %
Figure 4: Progress of knowledge transfer from trained VGG-11-BN
(92.34% acc.) to freshly initialized VGG-11-BN network (student)
using inverted images. Plotted are accuracies on generated (left)
and real (right) images. Final student accuracies shown in Table 1.
4.2. Results on ImageNet
After successfully demonstrating our method’s abilities
on the small CIFAR-10 dataset, we move on to examine its
effectiveness on the large-scale ImageNet dataset . We
ﬁrst run DeepInversion on networks trained on ImageNet,
and perform quantitative and qualitative analyses. Then,
we show the effectiveness of synthesized images on three
different tasks of immense importance: data-free pruning,
data-free knowledge transfer, and data-free continual learning.
Implementation details. For all experiments in this section,
we use the publicly available pretrained ResNet-{18, 50}
from PyTorch as the ﬁxed teacher network, with top-1
accuracy of {69.8%, 76.1%}.
For image synthesis, we
use Adam for optimization (learning rate 0.05). We set
αtv “ 1 ¨ 10´4, αℓ2 “ t0, 1 ¨ 10´2u, αf “ 1 ¨ 10´2 for
DeepInversion, and αc “ 0.2 for Adaptive DeepInversion.
We synthesize 224 ˆ 224 images in batches of 1, 216 using 8 NVIDIA V100 GPUs and automatic-mixed precision
(AMP) acceleration. Each image batch receives 20k
updates over 2h.
Analysis of DeepInversion Images
Fig. 5 shows images generated by DeepInversion from an
ImageNet-pretrained ResNet-50. Remarkably, given just the
model, we observe that DeepInversion is able to generate
images with high ﬁdelity and resolution. It also produces
detailed image features and textures around the target object,
e.g., clouds surrounding the target balloon, water around a
catamaran, forest below the volcano, etc.
Generalizability. In order to verify that the generated images do not overﬁt to just the inverted model, we obtain
predictions using four other ImageNet networks. As can
be seen from Table 2, images generated using a ResNet-50
generalize to a range of models and are correctly classiﬁed.
Further, DeepInversion outperforms DeepDream by a large
margin. This indicates robustness of our generated images
while being transferred across networks.
Inception score (IS). We also compare the IS of our
generated images with other methods in Table 3. Again,
Figure 5: Class-conditional 224 ˆ 224 samples obtained by DeepInversion, given only a ResNet-50 classiﬁer trained on ImageNet and no
additional information. Note that the images depict classes in contextually correct backgrounds, in realistic scenarios. Best viewed in color.
DeepInversion
top-1 acc. (%)
top-1 acc. (%)
Inception-V3
MobileNet-V2
Table 2: Classiﬁcation accuracy of ResNet-50 synthesized images
by other ImageNet-trained CNNs.
DeepInversion substantially outperforms DeepDream with
an improvement of 54.2. Without sophisticated training,
DeepInversion even beats multiple GAN baselines that have
limited scalability to high image resolutions.
4.3. Application I: Data-free Pruning
Pruning removes individual weights or entire ﬁlters (neurons) from a network such that the metric of interest (e.g.,
accuracy, precision) does not drop signiﬁcantly. Many techniques have been proposed to successfully compress neural
networks . All these methods
require images from the original dataset to perform pruning.
We build upon the pruning method of Molchanov et al. ,
which uses the Taylor approximation of the pruning loss
for a global ranking of ﬁlter importance over all the layers.
We extend this method by applying the KL divergence loss,
computed between the teacher and student output distributions. Filter importance is estimated from images inverted
with DeepInversion and/or Adaptive DeepInversion, making
pruning data-free. We follow the pruning and ﬁnetuning (30
epochs) setup from . All experiments on pruning are
performed with ResNet-50.
Hardware-aware loss. We further consider actual latency
Resolution
Inception Score
BigGAN 
178.0 / 202.6`
DeepInversion (Ours)
SAGAN 
SNGAN 
WGAN-GP 
DeepDream *
Table 3: Inception Score (IS) obtained by images synthesized by
various methods on ImageNet. SNGAN ImageNet score from .
*: our implementation. `: BigGAN-deep.
on the target hardware for a more efﬁcient pruning. To
achieve this goal, the importance ranking of ﬁlters needs to
reﬂect not only accuracy but also latency, quantiﬁed by:
ISpWq “ IS,errpWq ` η IS,latpWq,
where IS,err and IS,lat, respectively, focus on absolute
changes in network error and inference latency, speciﬁcally,
when the ﬁlter group s P S is zeroed out from the set of
neural network parameters W. η balances their importance.
We approximate the latency reduction term, IS,lat, via precomputed hardware-aware look-up tables of operation costs
(details in the Appendix).
Data-free pruning evaluation. For better insights, we study
four image sources: (i) partial ImageNet with 0.1M original images; (ii) unlabeled images from the proxy dataset,
MS COCO (127k images), and PASCAL VOC 
(9.9k images) datasets; (iii) 100k generated images from
the BigGAN-deep model, and (iv) a data-free setup with
the proposed methods: we ﬁrst generate 165k images via
DeepInversion, and then add to the set an additional 24k/26k
images through two competition rounds of Adaptive Deep-
Inversion, given pruned students at 61.9%/73.0% top-1 acc.
The visualization of the diversity increase due to compe-
Image Source
Top-1 acc. (%)
´50% ﬁlters
´20% ﬁlters
´71% FLOPs
´37% FLOPs
No ﬁnetune
Partial ImageNet
0.1M images / 0 label
Proxy datasets
PASCAL VOC
Generator, BigGAN
Noise (Ours)
DeepInversion (DI)
Adaptive DeepInversion (ADI)
Table 4: ImageNet ResNet-50 pruning results for the knowledge
distillation setup, given different types of input images.
ImageNet data
Top-1 acc. (%)
Base model
Taylor 
2.7 (1.5ˆ) 4.38 (1.1ˆ)
2.8 (1.5ˆ)
ThiNet-70 
2.6 (1.6ˆ)
NISP-50-A 
3.0 (1.4ˆ)
Hardware-Aware (HA)
3.1 (1.3ˆ)
4.24 (1.2ˆ)
ADI (Data-free)
2.7 (1.5ˆ)
4.36 (1.1ˆ)
2.9 (1.4ˆ)
4.22 (1.2ˆ)
Table 5: ImageNet ResNet-50 pruning comparison with prior work.
tition loss (Eq. 8) in Adaptive DeepInversion is shown in
Section C.5 of the Appendix.
Results of pruning and ﬁne-tuning are summarized in
Table 4. Our approach boosts the top-1 accuracy by more
than 54% given inverted images. Adaptive DeepInversion
performs relatively on par with BigGAN. Despite beating
VOC, we still observe a gap between synthesized images
(Adaptive DeepInversion and BigGAN) and natural images
(MS COCO and ImageNet), which narrows as fewer ﬁlters
are pruned.
Comparisons with SOTA. We compare data-free pruning
against SOTA methods in Table 5 for the setting in which
20% of ﬁlters are pruned away globally. We evaluate three setups for our approach: (i) individually applying the hardwareaware technique (HA), (ii) data-free pruning with DeepInversion and Adaptive DeepInversion (ADI), and (iii) jointly
applying both (ADI+HA). First, we evaluate the hardwareaware loss on the original dataset, and achieve a 16% faster
inference with zero accuracy loss compared to the base
model, we also observe improvements in inference speed
and accuracy over the pruning baseline . In a data-free
setup, we achieve a similar post-pruned model performance
compared to prior works (which use the original dataset),
while completely removing the need for any images/labels.
The data-free setup demonstrates a 2.8% loss in accuracy
with respect to the base model. A ﬁnal combination of both
data-free and hardware-aware techniques (ADI+HA) closes
this gap to only 2.1%, with faster inference.
Image source
Real images
Data amount
Top-1 acc.
Base model
Knowledge Transfer, 90 epochs
Generator, BigGAN
DeepInversion (DI)
Knowledge Transfer, 250 epochs, with mixup
DeepInversion (DI)
Table 6: Knowledge transfer from the trained ResNet50v1.5 to the
same network initialized from scratch.
4.4. Application II: Data-free Knowledge Transfer
In this section, we show that we can distill information
from a teacher network to a student network without using any real images at all. We apply DeepInversion to a
ResNet50v1.5 trained on ImageNet to synthesize images. Using these images, we then train another randomly
initialized ResNet50v1.5 from scratch. Below, we describe
two practical considerations: a) image clipping, and b) multiresolution synthesis, which we ﬁnd can greatly help boost
accuracy while reducing run-time. A set of images generated
by DeepInversion on the pretrained ResNet50v1.5 is shown
in Fig. 6. The images demonstrate high ﬁdelity and diversity.
a) Image clipping. We ﬁnd that enforcing the synthesized
images to conform to the mean and variance of the data
preprocessing step helps improve accuracy. Note that commonly released networks use means and variances computed
on ImageNet. We clip synthesized images to be in the
r´m{s, m{ss range, with m representing the per channel
mean, and s per channel standard deviation.
b) Multi-resolution synthesis. We ﬁnd that we can speed
up DeepInversion by employing a multi-resolution optimization scheme. We ﬁrst optimize the input of resolution
112 ˆ 112 for 2k iterations. Then, we up-sample the image via nearest neighbor interpolation to 224 ˆ 224, and
then optimize for an additional 1k iterations. This speeds up
DeepInversion to 84 images per 6 minutes on an NVIDIA
V100 GPU. Hyperparameters are given in the Appendix.
Knowledge transfer. We synthesize 140k images via Deep-
Inversion on ResNet50v1.5 to train a student network
with the same architecture from scratch. Our teacher is a pretrained ResNet50v1.5 that achieves 77.26% top-1 accuracy.
We apply knowledge distillation for 90/250 epochs, with
temperature τ “ 3, initial learning rate of 1.024, batch size
of 1024 split across eight V100 GPUs, and other settings the
same as in the original setup . Results are summarized
in Table 6. The proposed method, given only the trained
ResNet50v1.5 model, can teach a new model from scratch
to achieve a 73.8% accuracy, which is only 3.46% below the
accuracy of the teacher.
4.5. Application III: Data-free Continual Learning
Data-free continual learning is another scenario that beneﬁts from the image generated from DeepInversion. The
Figure 6: Class-conditional 224 ˆ 224 images obtained by DeepInversion given a ResNet50v1.5 classiﬁer pretrained on ImageNet. Classes
top to bottom: brown bear, quill, trolleybus, cheeseburger, cup, volcano, daisy, cardoon.
main idea of continual learning is to add new classiﬁcation
classes to a pretrained model without comprehensive access
to its original training data. To the best of our knowledge,
only LwF and LwF.MC achieve data-free continual
learning. Other methods require information that can only
be obtained from the original dataset, e.g., a subset of data
(iCaRL ), parameter importance estimations (in the form
of Fisher matrix in EWC , contribution to loss change in
SI , posterior of network weights in VCL ), or training data representation (encoder , GAN ). Some
methods rely on network modiﬁcations, e.g., Packnet 
and Piggyback . In comparison, DeepInversion does not
need network modiﬁcations or the original (meta-)data, as
BN statistics are inherent to neural networks.
In the class-incremental setting, a network is initially
trained on a dataset with classes Co, e.g., ImageNet .
Given new class data pxk, ykq, yk P Ck, e.g., from CUB ,
the pretrained model is now required to make predictions
in a combined output space Co Y Ck. Similar to prior work,
we take a trained network
denoted pop¨q, effectively as
, make a copy
denoted pkp¨q, effectively as a
, and then add new randomly initialized neurons to
pkp¨q’s ﬁnal layer to output logits for the new classes. We
train pkp¨q to classify simultaneously over all classes, old
and new, while network pop¨q remains ﬁxed.
Continual learning loss. We formulate a new loss with
DeepInversion images as follows.
We use same-sized
batches of DeepInversion data pˆx, popˆxqq and new class
Top-1 acc. (%)
Combined ImageNet CUB
ImageNet + CUB (1000 Ñ 1200 outputs)
LwF.MC 
DeepDream 
DeepInversion (Ours)
Oracle (distill)
Oracle (classify)
ImageNet + Flowers (1000 Ñ 1102 outputs)
LwF.MC 
DeepDream 
DeepInversion (Ours)
Oracle (distill)
Oracle (classify)
ImageNet + CUB + Flowers (1000 Ñ 1200 Ñ 1302 outputs)
LwF.MC 
DeepInversion (Ours)
Oracle (distill)
Oracle (classify)
Table 7: Continual learning results that extend the network output
space, adding new classes to ResNet-18. Accuracy over combined
classes Co Y Ck reported on individual datasets. Average over
datasets also shown (datasets treated equally regardless of size,
hence ImageNet samples have less weight than CUB or Flowers
real data pxk, ykq for each training iteration. For ˆx, we
use the original model to compute its soft labels popˆxq,
i.e., class probability among old classes, and then concatenate it with additional zeros as new class probabilities. We
use a KL-divergence loss between predictions popˆxq and
pkpˆxq on DeepInversion images for prior memory, and a
cross-entropy (CE) loss between one-hot yk and prediction
pkpxkq on new class images for emerging knowledge. Similar to prior work , we also use a third KL-divergence
term between the new class images’ old class predictions
pkpxk|y P Coq and their original model predictions popxkq.
This forms the loss
popˆxq, pkpˆxq
yk, pkpxkq
popxk|y P Coq, pkpxk|y P Coq
Evaluation results. We add new classes from the CUB ,
Flowers , and both CUB and Flowers datasets to a
ResNet-18 classiﬁer trained on ImageNet . Prior to
each step of addition of new classes, we generate 250 Deep-
Inversion images per old category. We compare our results
with prior class-incremental learning work LwF.MC 
as opposed to the task-incremental LwF that cannot
distinguish between old and new classes. We further compare results with oracle methods that break the data-free
constraint: we use the same number of real images from old
datasets in place of ˆx, with either their ground truth for classi-
ﬁcation loss or their soft labels from pop¨q for KL-divergence
distillation loss. The third KL-divergence term in Eq. 11 is
omitted in this case. Details are given in the Appendix.
Results are shown in Table 7. Our method signiﬁcantly
outperforms LwF.MC in all cases and leads to consistent performance improvements over DeepDream in most scenarios.
Our results are very close to the oracles (and occasionally
outperform them), showing DeepInversion’s efﬁcacy in replacing ImageNet images for continual learning. We verify
results on VGG-16 and discuss limitations in the Appendix.
5. Discussion
We next provide additional discussions on data-free
quantization, and the limitations of the proposed method.
Data-free quantization. While we have studied three datafree tasks in this work, the proposed paradigm of data-free
knowledge distillation via model inversion easily scales to
other applications, such as the task of data-free network
quantization as independently studied in . Haroush et
al. explore The Knowledge Within a trained network
for inverted images towards the 4- and 8-bit quantization
of ResNet-18, MobileNet V2, and DenseNet-121 networks.
Cai et al. propose the ZeroQ framework based on only
inverted images and knowledge distillation for data-free
and zero-shot quantization. ZeroQ demonstrates less than
0.2% accuracy loss when quantizing networks such as
ResNets, MobileNet V2, Inception, SqueezeNets, etc., over
MS COCO and ImageNet datasets. Both methods lead to
efﬁcient quantized models without the need of original data
or any natural images.
Limitations. We discuss the limitations of the proposed
approach as follows:
• Image synthesis time. Generating 215K ImageNet samples of 224ˆ224 resolution for a ResNet-50 takes 2.8K
NVIDIA V100 GPU-hours, or 22 hours on 128 GPUs.
This time scales linearly with the number of synthesized
images. The multi-resolution scheme described in Section 4.4 reduces this time by 10.7ˆ (0.26K GPU-hours /
4 hours on 64 GPUs).
• Image color and background similarity. We believe
there are two possible reasons for this similarity. 1) The
method uncovers and visualizes the unique discriminative characteristics of a CNN classiﬁer, which can guide
future work on neural network understanding and interpretation. Post-training, the network learns to capture only
the informative visual representations to make a correct
classiﬁcation. For example, the key features of a target
object are retained, e.g., detailed bear heads in Fig. 6
or the fur color/patterns of penguins and birds in Fig. 5,
whereas the background information is mostly simpliﬁed,
e.g., green for grass or blue for ocean. 2) For all the images synthesized in this work, we use a default Gaussian
distribution with zero mean and unit variance to initialize
all the pixels, which may lead to unimodal behaviors. We
have also observed that the style varies with the choice of
the optimization hyperparameters.
• Continual learning class similarity. We implemented
DeepInversion on iCIFAR and iILSVRC (two splits)
and observed statistically equivalent or slightly worse
performance compared to LwF.MC. We suspect that the
synthesized images are more effective in replacing old
class images that are different from the new images, compared to a case where the old and new images are similar
(e.g., random subsets of a pool of classes).
Conclusions
We have proposed DeepInversion for synthesizing training images with high resolution and ﬁdelity given just a
trained CNN. Further, by using a student-in-the-loop, our
Adaptive DeepInversion method improves image diversity.
Through extensive experiments, we have shown that our
methods are generalizable, effective, and empower a new
class of “data-free” tasks of immense practical signiﬁcance.
Acknowledgments
We would like to thank Arash Vahdat, Ming-Yu Liu, and
Shalini De Mello for in-depth discussions and comments.