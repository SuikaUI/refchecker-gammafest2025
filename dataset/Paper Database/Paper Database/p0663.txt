End-to-End Learning of Communications Systems
Without a Channel Model
Fayçal Ait Aoudia and Jakob Hoydis
Nokia Bell Labs, Paris-Saclay, 91620 Nozay, France
{faycal.ait_aoudia, jakob.hoydis}@nokia-bell-labs.com
Abstract—The idea of end-to-end learning of communications
systems through neural network (NN)-based autoencoders has the
shortcoming that it requires a differentiable channel model. We
present in this paper a novel learning algorithm which alleviates
this problem. The algorithm iterates between supervised training
of the receiver and reinforcement learning (RL)-based training
of the transmitter. We demonstrate that this approach works
as well as fully supervised methods on additive white Gaussian
noise (AWGN) and Rayleigh block-fading (RBF) channels. Surprisingly, while our method converges slower on AWGN channels
than supervised training, it converges faster on RBF channels.
Our results are a ﬁrst step towards learning of communications
systems over any type of channel without prior assumptions.
I. INTRODUCTION
End-to-end learning of communications systems is a fascinating novel concept whose goal is to learn full transmitter and receiver implementations which are optimized for
a speciﬁc performance metric and channel model. This can
be achieved by representing transmitter and receiver as neural
networks (NNs) and by interpreting the whole system as an
autoencoder which can be trained in a supervised manner
using stochastic gradient descent (SGD). Although a theoretically very appealing idea, its biggest drawback hindering
practical implementation is that a channel model or, more
precisely, the gradient of the instantaneous channel transfer
function, must be known. For an actual system, this is hardly
the case since the channel is generally a black box for which
only inputs and outputs can be observed. A simple workaround proposed in consists in ﬁne-tuning of the receiver
based on measured data after initial learning on a channel
model. However, with this approach, the transmitter cannot be
ﬁne-tuned, resulting in sub-optimal performance.
In this work, we investigate if methods from the ﬁeld of
(deep) reinforcement learning (RL) can be used to circumvent
the problem of a missing channel gradient. In essence, RL
provides a theoretical foundation for obtaining an estimate
of the gradient of an arbitrary loss function with respect
to (w.r.t.) actions taken by an agent . In our case, this
agent is the transmitter and the loss is a performance metric
provided by the receiver. The main contribution of this paper
is to show that knowledge of the channel model and the
instantaneous channel transfer function is indeed not needed.
This implies that the autoencoder can be trained from pure
observations alone without any knowledge of the underlying
channel model. The key to achieve this is the well-known
technique of policy learning . Inspired by this technique,
Fig. 1. A typical communications system operating over an unknown channel.
End-to-end learning describes the process of jointly optimizing the transmitter
and the receiver w.r.t. a speciﬁc performance metric.
we develop a novel algorithm for end-to-end training which
iterates between two phases: (i) supervised training of the
receiver and (ii) RL-based training of the transmitter based
on an estimated gradient of the loss. Comparison with the
fully supervised training method of on additive white
Gaussian noise (AWGN) and Rayleigh block-fading (RBF)
channels reveals essentially identical performance. Although
our method requires considerably more training iterations on
AWGN channels, it converges faster on RBF channels. This
is surprising as our scheme relies on noisy gradient estimates.
The idea of autoencoder-based end-to-end learning of
communications systems was pioneered in , and the
ﬁrst proof-of-concept using off-the-shelf software-deﬁned radios was described in . Since then, numerous extensions
of the original idea towards channel coding , orthogonal frequency-division multiplexing (OFDM) , , and
multiple-input multiple-output (MIMO) have been made,
which all demonstrate the versatility of this approach. Another
line of work considers the autoencoder idea for joint sourcechannel coding , but without learning of low-level physical
layer tasks. The idea of training an NN-based transmitter using
a policy gradient was explored in for a non-differentiable
receiver which treats detection as a clustering problem.
Notations: Boldface upper- and lower-case letters denote
matrices and column vectors. R and C denote the sets of real
and complex numbers. The gradient and Jacobian operators
w.r.t. the set of parameters θ are both denoted ∇θ; p¨qT is the
transpose operator. The complex Gaussian distribution with
mean m and covariane matrix S is denoted by CNpm, Sq.
II. LEARNING END-TO-END COMMUNICATIONS SYSTEMS
A point-to-point communications system consists of two
nodes that aim to reliably exchange information over a channel. The channel acts as a stochastic system, whose output
y follows a probability distribution conditional on its input
x, i.e., y „ Ppy|xq. The task of the transmitter is to
communicate messages m drawn from a ﬁnite discrete set
 
M “ t1, . . . , Mu, while the receiver aims to detect the sent
messages from the received signals, as illustrated in Fig. 1.
Typically, the design of communications systems relies
on dividing the transmitter and the receiver into individual
blocks, each performing one task such as modulation or
channel coding. However, it is unclear if this componentwise approach enables the best possible performance, and the
attempts to jointly optimize these revealed intractable or too
computationally complex to be practical . This motivates
the use of machine learning (ML) to enable optimization of
communications systems for end-to-end performance, without
the need for compartmentalization of transmitter and receiver.
The key idea of the approach proposed in this work is to
implement transmitter and receiver as two separate parametric
functions that are jointly optimized to meet application speciﬁc
performance requirements. The transmitter is represented by
: M Ñ CN, where N is the number of channel uses,
and θT is the set of parameters. The receiver is implemented
i“1 pi “ 1
, where θR is
the set of parameters and p a probability vector over the
messages. The purpose of the receiver is to predict m given
y by estimating the conditional probability Ppm | yq. This is
done by learning the conditional log-likelihood estimator 
R “ arg min
where L is the cross-entropy (CE) deﬁned as
loooooooooooooomoooooooooooooon
which assumes that the training examples are independent and
identically distributed (i.i.d.), S is the size of the training set,
mpiq is the ith training example, lpiq is the per-example loss,
and ypiq is the corresponding received signal.
A. Training Process Overview
Unlike previous approaches that represent transmitter, channel, and receiver as a single parametric function during the
training , we implement transmitter and receiver by two
different parametric functions that can be independently optimized. While the former approach requires a differentiable
channel model that must match the actual channel over which
the system is supposed to communicate, the training process
we propose here does not require any channel model at all.
Next, we walk through the full training process which
is provided in Algorithm 1. It is assumed that transmitter
and receiver have access to a sequence of training examples
T , i “ 1, 2, . . . . This can be achieved through pseudorandom number generators initialized with the same seed. An
iteration of the training algorithm is made of two phases,
one for the receiver (Sec. II-B), and one for the transmitter
(Sec. II-C). This training process is carried out until a stop
criterion is satisﬁed (e.g., a ﬁxed number of iterations, a ﬁxed
number of iterations during which the loss has not decreased,
etc.). As the training algorithm alternates between training of
receiver and transmitter, respectively, it is referred to as the
alternating training algorithm. The intuition behind this process is that, at each iteration, the receiver is improved for ﬁxed
transmitter parameters θT , then the transmitter is improved for
ﬁxed receiver parameters θR. By iteratively carrying out this
process, the end-to-end system should improve. Formal study
of the convergence of this approach is under investigation.
We assume that f pT q
θR are differentiable w.r.t. their
parameters which are adjusted through gradient descent on
the loss function. The most widely used algorithm to perform
this task is SGD , or one of its numerous variants, which
iteratively updates the parameters as follows:
θpj`1q “ θpjq ´ η∇θ rLpθpjqq
where η ą 0 is the learning rate, and ∇θ rL is an approximation
of the loss function gradient. With SGD, the training dataset
is sampled at each iteration to constitute a minibatch, and
the gradient of L is approximated using this minibatch. SGD
is used in both phases of the alternating training scheme to
optimize the parameters of the transmitter and the receiver.
The rest of this section details these two stages.
B. Receiver Training
Receiver training is a supervised learning task, since we
assume that the receiver has access to the messages sent for
training. The receiver training process is illustrated in Fig. 2a,
and the pseudocode is given by the function TRAINRECEIVER
in Algorithm 1. First, the transmitter generates a minibatch of
size BR of training messages, encodes each training message
into N channel symbols, and transmits the minibatch over the
channel (lines 10–12). X is a BR-by-N complex matrix which
contains for each example of the minibatch the corresponding complex symbol representation. The receiver obtains the
altered symbols Y, and generates for each training example
a probability distribution over M (lines 14–15). Finally, an
optimization step is performed using SGD (or a variant) on
the CE loss function (2) (lines 16–17).
C. Transmitter Training
The transmitter’s objective is to generate channel symbols
that minimize a scalar loss provided by the receiver. This
training scheme corresponds to an RL approach. A short
background on RL is provided in the Appendix. The message
set M corresponds to the state space, and CN corresponds
to the action space. To enable exploration, the input of the
channel is relaxed to a random variable xp „ πψp¨|xq,
which constitutes the stochastic RL policy (see Sec. IV for an
example). The parameter vector ψ contains parameters speciﬁc
to the policy distribution, which are only relevant at training
time. When not training the transmitter, xp “ x. The loss
function L (see Appendix) is an indication of the end-to-end
performance and depends on the channel dynamics. L is only
known through the received per-example losses l (2) provided
by the receiver over an additional reliable channel which is
needed during the training process.
(a) Receiver training is a supervised learning task, as the
desired outputs are available.
(b) Transmitter training is an RL task, as the it aims to minimize a
scalar loss provided by the receiver.
Fig. 2. The two phases of an iteration of the training algorithm: receiver training and transmitter training
Algorithm 1 Alternating training algorithm
1: Ź Main loop
2: while Stop criterion not met do
TRAINRECEIVER()
TRAINTRANSMITTER()
5: end while
6: Ź Receiver training
7: function TRAINRECEIVER()
Ź Transmitter:
mT Ð TRAININGSOURCEpBRq
X Ð f pT q
Ź Receiver:
Y Ð RECEIVEpq
mT Ð TRAININGSOURCEpq
SGDpθR, mT , Pq
until Stop criterion is met
19: end function
20: Ź Transmitter training
21: function TRAINTRANSMITTER()
Ź Transmitter:
mT Ð TRAININGSOURCEpBT q
X Ð f pT q
Xp Ð SAMPLEPOLICYpXq
Ź Receiver:
Y Ð RECEIVEpq
mT Ð TRAININGSOURCEpq
l Ð PEREXAMPLELOSSESpmT , Pq
SENDPEREXAMPLELOSSESplq
Ź Transmitter:
l Ð RECEIVEPEREXAMPLELOSSESpq
SGDpθT , ψ, lq
until Stop criterion is met
38: end function
The pseudocode of the transmitter training process is shown
in the function TRAINTRANSMITTER of Algorithm 1, and
illustrated in Fig. 2b. First, training examples forming a
minibatch mT of size BT are encoded into channel symbols
X. The stochastic policy is then sampled to generate the
channel symbols Xp (lines 24–26). The channel symbols are
sent over the channel, the receiver obtains the altered symbols
Y, and generates for each training example a probability
vector over M (lines 27–30). Per-example losses l P RBT are
then computed based on these vectors and the sent messages
mT (lines 31–32). Next, the per-example losses are sent to
the transmitter over a reliable channel, present only during
the training (lines 33–35). Finally, an optimization step is
performed, using SGD or a variant, where the loss gradient
is estimated by
∇θT ,ψ rJpmT , l, Xpq
lpiq∇θT ,ψ log
The number of iterations carried out for training of the
transmitter and the receiver at each main iteration of the
alternating scheme can either be ﬁxed (as parameters of the
algorithm), or can depend on some stop criterion, e.g., stop
when no more signiﬁcant progress is observed.
III. GENERIC TRANSMITTER AND RECEIVER
ARCHITECTURES
Although the alternating training algorithm works for any
pair of differentiable parametric functions f pT q
θT , f pRq
choose to implement them here as NNs. Only feedforward
NNs, i.e., NNs in which connections between units, also
called neurons, do not form cycles, are considered in this
work. A feedforward NN of K layers is a parametric function
fθ : RN0 Ñ RNK, which maps an input vector r0 P RN0 to an
output vector rK P RNK through K successive layers. Each
layer computes an intermediate outcome or activation vector
rk “ fθk,kprk´1q,
k “ 1, . . . , K
where fθk,k Ñ RNk is the computation realized by the kth
layer, and θk is the set of parameters for this layer. The set
of parameters of the entire NN is simply the union of all the
layers’ parameters: θ “ tθ1, . . . , θKu.
The architectures of the transmitter and the receiver can take
multiple forms. However, in the context of communications
(a) Generic transmitter architecture
(b) Generic receiver architecture
Fig. 3. Generic architectures of the transmitter and receiver
systems, complex baseband symbols are transmitted over the
communication channel, and the transmitter must ensure the
fulﬁllment of power constraints. Therefore, the penultimate
layer of the transmitter converts the real outputs of the previous
layer into an N-dimensional complex-valued vector, and the
last layer performs normalization. Normalization guarantees
that the average energy per symbol or average energy per
message is 1. The transmitter architecture is shown in Fig. 3a.
The receiver task is to reconstruct the message sent by
the transmitter from the received signal. The function f pRq
performs soft detection by outputting a probability distribution
p over M, and then hard decoding is done by choosing the
message with highest probability. The ﬁrst layer of the receiver
converts the received N complex-valued vector y into 2N
real scalars, which are fed to a succession of layers that can
be arbitrarily chosen. The last layer of f pRq
is a softmax
layer to ensure that the output activations form a probability
distribution over M . Finally, the message with highest
probability is chosen as a reconstruction of the sent message.
IV. EVALUATION
Next, we compare the performance of the proposed alternating training scheme with that of the fully supervised
approach of , which has been shown to achieve performance
close to the best baselines in some scenarios. However, this
latter approach relies on the consideration of transmitter,
channel, and receiver as a single deep NN and, therefore,
requires a differentiable model of the channel. This model
should at least approximately match the channel on which the
communications system is planned to be used. The proposed
alternating algorithm does not have such a requirement. Thus,
the system can be trained directly over the targeted medium.
Evaluations are performed on AWGN and RBF channels.
The signal-to-noise ratio (SNR) is deﬁned as
is the expected energy per complex symbol,
and σ2 is the noise variance. The transmitter was set to perform
normalization such that E
=1, leading to SNR “
RL exploration is performed by adding a zero-mean complex normal perturbation w to the output of the transmitter,
i.e., xp “
1 ´ σ2πx ` w where w ∼CNp0, σ2
πIq, I is the
identity matrix of size N, and σπ P p0, 1q is ﬁxed, i.e., not
learned during training. Scaling of the transmitter NN output is
performed so that the average energy per symbol remains equal
to one. The transmitter RL policy πψ is therefore a Gaussian
policy with mean
1 ´ σ2πf pT q
and covariance matrix σ2
so that ψ is the empty set:
πpxp | f pT q
pπσ2πqN exp
1 ´ σ2πf pT q
This leads to
∇θT log pπpxp | mqq
∇θT f pT q
1 ´ σ2πf pT q
which is required to estimate the gradient of the objective
function (4). The functions f pT q
θT and f pRq
θR are implemented as
deep NNs as described in the last section.
Training of the communications systems was done using the
Adam optimizer, with an SNR set to 10 dB (20 dB) for
the AWGN (RBF) channel. The size of M was set to M “
256, and the number of channel uses N was set to 4. For the
alternating training approach, we used σ2
A. Transmitter and Receiver Architectures
We implement transmitter and receiver as feedforward NNs
that leverage only dense layers. Dense layers form a simple
and widely used type of layer, sometimes also called fullyconnected layer. The kth layer is deﬁned as
rk “ gpWkrk´1 ` bkq
where Wk P RNk´1 ˆ RNk is the weight matrix, bk P RNk is
the bias vector, and g : R Ñ R is the activation function which
is applied elementwise. The trainable parameters of a dense
layer are θk “ tWk, bku. The activation function is usually
chosen to be nonlinear, which is fundamental to obtain NNs
that can approximate a wide range of functions.
The transmitter consists of an M ˆ M embedding with
ELU activation functions , followed by a dense layer of
2N units with linear activations. This layer outputs 2N reals
which are then converted into N complex symbols, and ﬁnally
normalized as shown in Fig. 3a.
Regarding the receiver, the ﬁrst layer is a C2R layer
which converts the received N complex symbols into 2N
real symbols, while the last layer is a dense layer of M
units with softmax activations which outputs a probability
distribution over M, as shown in Fig. 3b. In the AWGN
channel case, a single dense layer with M units and ReLu
activation function was used as hidden layer.
In the case of RBF channel, using a single dense layer
as hidden layer led to poor performance and, therefore, an
architecture which incorporates some knowledge about the
channel behavior was used [1, Sec. III C.]. It is well known
in ML that incorporating expert knowledge through the NN
architecture can heavily improve the performance of learning
Fig. 4. Receiver architecture used for RBF channels. After complex-to-real
conversion of the received signal, the ﬁrst two layers estimate the channel
response, while the last two layers generate a probability distribution over M.
Iterations
Error Rate
AWGN – Supervised training
AWGN – Alternating training
RBF – Supervised training
RBF – Alternating training
Fig. 5. Evolution of the error rate during the 500 ﬁrst training iterations
systems. Accordingly, the two ﬁrst hidden layers aim to
calculate a value which can be interpreted as an estimate ph P C
of the channel response h P C. The received signal is then
divided by this value, and the so obtained signal is fed to a
network identical to the one used for the AWGN channel, as
shown in Fig. 4
B. Evaluation Results
The evolutions of the error rates of both the supervised
and the alternating approach during the ﬁrst 500 training
iterations are shown in Fig. 5, averaged over 200 seeds.
Shaded areas around the curves correspond to one standard
deviation in each direction. For the AWGN channel, the
supervised method leads to faster convergence compared to
the alternating method. This is expected since exact gradients
are pushed from the receiver to the transmitter through the
simulated communication channel. This provides more ﬁnegrained feedback to the transmitter as compared to the RLbased approach which provides only feedback of the raw losses
(from which a noisy gradient is estimated). However, this can
only be done if a differentiable model of the communication
medium is available at training, that approximates well the
real channel. After approximately 400 training iterations, no
signiﬁcant performance difference is observed. Surprisingly,
for the RBF channel, the alternating method enables faster
convergence, and with signiﬁcantly less variance. This can
be explained by the fact that, when pushing the gradient
through the channel as done with the supervised approach,
the gradient is directly impacted by the channel response,
which is random and therefore leads to high gradient variance.
However, with the alternating method, the per-example losses
provided to the transmitter are less impacted by the random
channel response. Fig. 6 shows the achieved error rates for
both training methods on the AWGN (Fig. 6a) and RBF
channel (Fig. 6b). This conﬁrms that the alternating training
method without channel model enables similar performance to
that of the fully supervised approach.
V. CONCLUSION AND ONGOING WORK
We have presented a novel method to train fully differentiable communications systems from end-to-end and showed
that it achieves similar performance to the fully supervised
approach in . However, our method does not require any
mathematical model of the channel and can therefore be
applied to any type of channel without prior analysis. Our
algorithm currently requires an additional reliable channel
during training to feedback losses from the receiver to the
transmitter. We are currently working on a training scheme
which does not require such a dedicated feedback channel.
Other future investigations include optimizing the introduced
scheme using more advanced RL techniques to possibly increase the convergence speed. The proposed method can be
easily extended to other tasks than error-free communication
of messages, e.g., by including source coding and considering
end-to-end reconstruction of raw data (e.g., images) or endto-end classiﬁcation of raw data observed on remote devices.
BACKGROUND ON REINFORCEMENT LEARNING
RL aims to optimize the behavior of agents that interact with
an environment by taking actions in order to minimize a loss.
An agent in a state s P S, takes an action a P A according to
some policy π. After taking an action, the agent receives a perexample loss l. The expected per-example loss given a state
and an action is denoted by Lps, aq, i.e., Lps, aq “ E rl|s, as.
L is assumed to be unknown, and the aim of the agent is to
ﬁnd a policy which minimizes the per-example loss.
During the agent’s training, the policy π is usually chosen
to be stochastic, i.e., πp¨|sq is a probability distribution over
the action space A conditional on a state s. Using a stochastic
policy enables exploration of the agent’s environment, which
is fundamental in RL. Indeed, training in RL is similar to a tryand-fail process: the agent takes an action chosen according to
its state, and afterwards improves its policy according to the
loss received from the environment. Using a stochastic policy,
the agent aims to minimize the loss Jps, πq, deﬁned as
πpa|sqLps, aq da.
Policy gradient methods are considered in this work, in which
the agent optimizes a parametric policy πψ , ψ being the
Error Rate
Supervised training
Alternating training
(a) AWGN channel
Error Rate
Supervised training
Alternating training
(b) RBF channel
Fig. 6. Error rate achieved by the alternating and supervised approaches on AWGN and RBF channels
set of parameters. The agent optimizes the policy by gradient
descent on the loss J with respect to ψ, which requires
estimating the gradient of J with respect to ψ:
∇ψJps, πψq “
Lps, aq∇ψπψpa|sq da
πψpa|sqLps, aq∇ψ log pπψpa|sqq da
Lps, aq∇ψ log pπψpa|sqq
where the second equality follows from ∇log puq “ ∇u
exchange of integration and differentiation is valid provided
some regularity conditions, discussed, for example, in .