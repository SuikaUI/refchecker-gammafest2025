Real-Time Human Pose Recognition in Parts from Single Depth Images
Jamie Shotton
Andrew Fitzgibbon
Toby Sharp
Mark Finocchio
Richard Moore
Alex Kipman
Andrew Blake
Microsoft Research Cambridge & Xbox Incubation
We propose a new method to quickly and accurately predict 3D positions of body joints from a single depth image,
using no temporal information. We take an object recognition approach, designing an intermediate body parts representation that maps the difﬁcult pose estimation problem
into a simpler per-pixel classiﬁcation problem. Our large
and highly varied training dataset allows the classiﬁer to
estimate body parts invariant to pose, body shape, clothing,
etc. Finally we generate conﬁdence-scored 3D proposals of
several body joints by reprojecting the classiﬁcation result
and ﬁnding local modes.
The system runs at 200 frames per second on consumer
hardware. Our evaluation shows high accuracy on both
synthetic and real test sets, and investigates the effect of several training parameters. We achieve state of the art accuracy in our comparison with related work and demonstrate
improved generalization over exact whole-skeleton nearest
neighbor matching.
1. Introduction
Robust interactive human body tracking has applications including gaming, human-computer interaction, security, telepresence, and even health-care. The task has recently been greatly simpliﬁed by the introduction of realtime depth cameras . However, even
the best existing systems still exhibit limitations. In particular, until the launch of Kinect , none ran at interactive
rates on consumer hardware while handling a full range of
human body shapes and sizes undergoing general body motions. Some systems achieve high speeds by tracking from
frame to frame but struggle to re-initialize quickly and so
are not robust. In this paper, we focus on pose recognition
in parts: detecting from a single depth image a small set of
3D position candidates for each skeletal joint. Our focus on
per-frame initialization and recovery is designed to complement any appropriate tracking algorithm 
that might further incorporate temporal and kinematic coherence. The algorithm presented here forms a core component of the Kinect gaming platform .
Illustrated in Fig. 1 and inspired by recent object recognition work that divides objects into parts (e.g. ),
our approach is driven by two key design goals: computational efﬁciency and robustness. A single input depth image
is segmented into a dense probabilistic body part labeling,
with the parts deﬁned to be spatially localized near skeletal
depth image
body parts
3D joint proposals
Figure 1. Overview. From an single input depth image, a per-pixel
body part distribution is inferred. (Colors indicate the most likely
part labels at each pixel, and correspond in the joint proposals).
Local modes of this signal are estimated to give high-quality proposals for the 3D locations of body joints, even for multiple users.
joints of interest. Reprojecting the inferred parts into world
space, we localize spatial modes of each part distribution
and thus generate (possibly several) conﬁdence-weighted
proposals for the 3D locations of each skeletal joint.
We treat the segmentation into body parts as a per-pixel
classiﬁcation task (no pairwise terms or CRF have proved
necessary). Evaluating each pixel separately avoids a combinatorial search over the different body joints, although
within a single part there are of course still dramatic differences in the contextual appearance. For training data,
we generate realistic synthetic depth images of humans of
many shapes and sizes in highly varied poses sampled from
a large motion capture database.
We train a deep randomized decision forest classiﬁer which avoids overﬁtting
by using hundreds of thousands of training images. Simple, discriminative depth comparison image features yield
3D translation invariance while maintaining high computational efﬁciency. For further speed, the classiﬁer can be run
in parallel on each pixel on a GPU . Finally, spatial
modes of the inferred per-pixel distributions are computed
using mean shift resulting in the 3D joint proposals.
An optimized implementation of our algorithm runs in
under 5ms per frame (200 frames per second) on the Xbox
360 GPU, at least one order of magnitude faster than existing approaches. It works frame-by-frame across dramatically differing body shapes and sizes, and the learned discriminative approach naturally handles self-occlusions and
poses cropped by the image frame. We evaluate on both real
and synthetic depth images, containing challenging poses of
a varied set of subjects. Even without exploiting temporal
or kinematic constraints, the 3D joint proposals are both accurate and stable. We investigate the effect of several training parameters and show how very deep trees can still avoid
overﬁtting due to the large training set. We demonstrate
that our part proposals generalize at least as well as exact
nearest-neighbor in both an idealized and realistic setting,
and show a substantial improvement over the state of the
art. Further, results on silhouette images suggest more general applicability of our approach.
Our main contribution is to treat pose estimation as object recognition using a novel intermediate body parts representation designed to spatially localize joints of interest
at low computational cost and high accuracy. Our experiments also carry several insights: (i) synthetic depth training data is an excellent proxy for real data; (ii) scaling up
the learning problem with varied synthetic data is important
for high accuracy; and (iii) our parts-based approach generalizes better than even an oracular exact nearest neighbor.
Related Work. Human pose estimation has generated a
vast literature (surveyed in ). The recent availability
of depth cameras has spurred further progress .
Grest et al. use Iterated Closest Point to track a skeleton of a known size and starting position. Anguelov et al.
 segment puppets in 3D range scan data into head, limbs,
torso, and background using spin images and a MRF. In
 , Zhu & Fujimura build heuristic detectors for coarse
upper body parts (head, torso, arms) using a linear programming relaxation, but require a T-pose initialization to size
the model. Siddiqui & Medioni hand craft head, hand,
and forearm detectors, and show data-driven MCMC model
ﬁtting outperforms ICP. Kalogerakis et al. classify and
segment vertices in a full closed 3D mesh into different
parts, but do not deal with occlusions and are sensitive to
mesh topology. Most similar to our approach, Plagemann
et al. build a 3D mesh to ﬁnd geodesic extrema interest points which are classiﬁed into 3 parts: head, hand, and
foot. Their method provides both a location and orientation
estimate of these parts, but does not distinguish left from
right and the use of interest points limits the choice of parts.
Advances have also been made using conventional intensity cameras, though typically at much higher computational cost. Bregler & Malik track humans using twists
and exponential maps from a known initial pose. Ioffe &
Forsyth group parallel edges as candidate body segments and prune combinations of segments using a projected classiﬁer.
Mori & Malik use the shape context descriptor to match exemplars. Ramanan & Forsyth
 ﬁnd candidate body segments as pairs of parallel lines,
clustering appearances across frames. Shakhnarovich et al.
 estimate upper body pose, interpolating k-NN poses
matched by parameter sensitive hashing. Agarwal & Triggs
 learn a regression from kernelized image silhouettes features to pose. Sigal et al. use eigen-appearance template detectors for head, upper arms and lower legs proposals. Felzenszwalb & Huttenlocher apply pictorial
structures to estimate pose efﬁciently. Navaratnam et al.
 use the marginal statistics of unlabeled data to improve pose estimation. Urtasun & Darrel proposed a
local mixture of Gaussian Processes to regress human pose.
Auto-context was used in to obtain a coarse body part
labeling but this was not deﬁned to localize joints and classifying each frame took about 40 seconds. Rogez et al. 
train randomized decision forests on a hierarchy of classes
deﬁned on a torus of cyclic human motion patterns and camera angles. Wang & Popovi´c track a hand clothed in a
colored glove. Our system could be seen as automatically
inferring the colors of an virtual colored suit from a depth
image. Bourdev & Malik present ‘poselets’ that form
tight clusters in both 3D pose and 2D image appearance,
detectable using SVMs.
Pose estimation research has often focused on techniques
to overcome lack of training data , because of two problems. First, generating realistic intensity images using computer graphics techniques is hampered by the
huge color and texture variability induced by clothing, hair,
and skin, often meaning that the data are reduced to 2D silhouettes . Although depth cameras signiﬁcantly reduce
this difﬁculty, considerable variation in body and clothing
shape remains. The second limitation is that synthetic body
pose images are of necessity fed by motion-capture (mocap)
data. Although techniques exist to simulate human motion
(e.g. ) they do not yet produce the range of volitional
motions of a human subject.
In this section we review depth imaging and show how
we use real mocap data, retargetted to a variety of base character models, to synthesize a large, varied dataset. We believe this dataset to considerably advance the state of the art
in both scale and variety, and demonstrate the importance
of such a large dataset in our evaluation.
2.1. Depth imaging
Depth imaging technology has advanced dramatically
over the last few years, ﬁnally reaching a consumer price
point with the launch of Kinect . Pixels in a depth image
indicate calibrated depth in the scene, rather than a measure
of intensity or color. We employ the Kinect camera which
gives a 640x480 image at 30 frames per second with depth
resolution of a few centimeters.
Depth cameras offer several advantages over traditional
intensity sensors, working in low light levels, giving a calibrated scale estimate, being color and texture invariant, and
resolving silhouette ambiguities in pose. They also greatly
synthetic (train & test)
real (test)
Figure 2. Synthetic and real data. Pairs of depth image and ground truth body parts. Note wide variety in pose, shape, clothing, and crop.
simplify the task of background subtraction which we assume in this work. But most importantly for our approach,
it is straightforward to synthesize realistic depth images of
people and thus build a large training dataset cheaply.
2.2. Motion capture data
The human body is capable of an enormous range of
poses which are difﬁcult to simulate. Instead, we capture a
large database of motion capture (mocap) of human actions.
Our aim was to span the wide variety of poses people would
make in an entertainment scenario. The database consists of
approximately 500k frames in a few hundred sequences of
driving, dancing, kicking, running, navigating menus, etc.
We expect our semi-local body part classiﬁer to generalize somewhat to unseen poses. In particular, we need not
record all possible combinations of the different limbs; in
practice, a wide range of poses proves sufﬁcient. Further,
we need not record mocap with variation in rotation about
the vertical axis, mirroring left-right, scene position, body
shape and size, or camera pose, all of which can be added
in (semi-)automatically.
Since the classiﬁer uses no temporal information, we
are interested only in static poses and not motion. Often,
changes in pose from one mocap frame to the next are so
small as to be insigniﬁcant. We thus discard many similar,
redundant poses from the initial mocap data using ‘furthest
neighbor’ clustering where the distance between poses
p1 and p2 is deﬁned as maxj ∥pj
2∥2, the maximum Euclidean distance over body joints j. We use a subset of 100k
poses such that no two poses are closer than 5cm.
We have found it necessary to iterate the process of motion capture, sampling from our model, training the classi-
ﬁer, and testing joint prediction accuracy in order to reﬁne
the mocap database with regions of pose space that had been
previously missed out. Our early experiments employed
the CMU mocap database which gave acceptable results
though covered far less of pose space.
2.3. Generating synthetic data
We build a randomized rendering pipeline from which
we can sample fully labeled training images. Our goals in
building this pipeline were twofold: realism and variety. For
the learned model to work well, the samples must closely
resemble real camera images, and contain good coverage of
the appearance variations we hope to recognize at test time.
While depth/scale and translation variations are handled explicitly in our features (see below), other invariances cannot
be encoded efﬁciently. Instead we learn invariance from the
data to camera pose, body pose, and body size and shape.
The synthesis pipeline ﬁrst randomly samples a set of
parameters, and then uses standard computer graphics techniques to render depth and (see below) body part images
from texture mapped 3D meshes. The mocap is retargetting to each of 15 base meshes spanning the range of body
shapes and sizes, using .
Further slight random variation in height and weight give extra coverage of body
shapes. Other randomized parameters include the mocap
frame, camera pose, camera noise, clothing and hairstyle.
We provide more details of these variations in the supplementary material. Fig. 2 compares the varied output of the
pipeline to hand-labeled real camera images.
3. Body Part Inference and Joint Proposals
In this section we describe our intermediate body parts
representation, detail the discriminative depth image features, review decision forests and their application to body
part recognition, and ﬁnally discuss how a mode ﬁnding algorithm is used to generate joint position proposals.
3.1. Body part labeling
A key contribution of this work is our intermediate body
part representation. We deﬁne several localized body part
labels that densely cover the body, as color-coded in Fig. 2.
Some of these parts are deﬁned to directly localize particular skeletal joints of interest, while others ﬁll the gaps or
could be used in combination to predict other joints. Our intermediate representation transforms the problem into one
that can readily be solved by efﬁcient classiﬁcation algorithms; we show in Sec. 4.3 that the penalty paid for this
transformation is small.
The parts are speciﬁed in a texture map that is retargetted
to skin the various characters during rendering. The pairs of
depth and body part images are used as fully labeled data for
learning the classiﬁer (see below). For the experiments in
this paper, we use 31 body parts: LU/RU/LW/RW head, neck,
L/R shoulder, LU/RU/LW/RW arm, L/R elbow, L/R wrist, L/R
hand, LU/RU/LW/RW torso, LU/RU/LW/RW leg, L/R knee,
L/R ankle, L/R foot (Left, Right, Upper, loWer). Distinct
Figure 3. Depth image features. The yellow crosses indicates the
pixel x being classiﬁed. The red circles indicate the offset pixels
as deﬁned in Eq. 1. In (a), the two example features give a large
depth difference response. In (b), the same two features at new
image locations give a much smaller response.
parts for left and right allow the classiﬁer to disambiguate
the left and right sides of the body.
Of course, the precise deﬁnition of these parts could be
changed to suit a particular application. For example, in an
upper body tracking scenario, all the lower body parts could
be merged. Parts should be sufﬁciently small to accurately
localize body joints, but not too numerous as to waste capacity of the classiﬁer.
3.2. Depth image features
We employ simple depth comparison features, inspired
by those in . At a given pixel x, the features compute
fθ(I, x) = dI
where dI(x) is the depth at pixel x in image I, and parameters θ = (u, v) describe offsets u and v. The normalization
of the offsets by
dI(x) ensures the features are depth invariant: at a given point on the body, a ﬁxed world space offset
will result whether the pixel is close or far from the camera.
The features are thus 3D translation invariant (modulo perspective effects). If an offset pixel lies on the background
or outside the bounds of the image, the depth probe dI(x′)
is given a large positive constant value.
Fig. 3 illustrates two features at different pixel locations
x. Feature fθ1 looks upwards: Eq. 1 will give a large positive response for pixels x near the top of the body, but a
value close to zero for pixels x lower down the body. Feature fθ2 may instead help ﬁnd thin vertical structures such
as the arm.
Individually these features provide only a weak signal
about which part of the body the pixel belongs to, but in
combination in a decision forest they are sufﬁcient to accurately disambiguate all trained parts. The design of these
features was strongly motivated by their computational efﬁciency: no preprocessing is needed; each feature need only
read at most 3 image pixels and perform at most 5 arithmetic
operations; and the features can be straightforwardly implemented on the GPU. Given a larger computational budget,
one could employ potentially more powerful features based
on, for example, depth integrals over regions, curvature, or
local descriptors e.g. .
Figure 4. Randomized Decision Forests. A forest is an ensemble
of trees. Each tree consists of split nodes (blue) and leaf nodes
(green). The red arrows indicate the different paths that might be
taken by different trees for a particular input.
3.3. Randomized decision forests
Randomized decision trees and forests have
proven fast and effective multi-class classiﬁers for many
tasks , and can be implemented efﬁciently on the
GPU . As illustrated in Fig. 4, a forest is an ensemble
of T decision trees, each consisting of split and leaf nodes.
Each split node consists of a feature fθ and a threshold τ.
To classify pixel x in image I, one starts at the root and repeatedly evaluates Eq. 1, branching left or right according
to the comparison to threshold τ. At the leaf node reached
in tree t, a learned distribution Pt(c|I, x) over body part labels c is stored. The distributions are averaged together for
all trees in the forest to give the ﬁnal classiﬁcation
P(c|I, x) = 1
Pt(c|I, x) .
Training. Each tree is trained on a different set of randomly
synthesized images. A random subset of 2000 example pixels from each image is chosen to ensure a roughly even distribution across body parts. Each tree is trained using the
following algorithm :
1. Randomly propose a set of splitting candidates φ =
(θ, τ) (feature parameters θ and thresholds τ).
2. Partition the set of examples Q = {(I, x)} into left
and right subsets by each φ:
{ (I, x) | fθ(I, x) < τ }
3. Compute the φ giving the largest gain in information:
H(Qs(φ)) (6)
where Shannon entropy H(Q) is computed on the normalized histogram of body part labels lI(x) for all
(I, x) ∈Q.
4. If the largest gain G(φ⋆) is sufﬁcient, and the depth in
the tree is below a maximum, then recurse for left and
right subsets Ql(φ⋆) and Qr(φ⋆).
Figure 5. Example inferences. Synthetic (top row); real (middle); failure modes (bottom). Left column: ground truth for a neutral pose as
a reference. In each example we see the depth image, the inferred most likely body part labels, and the joint proposals show as front, right,
and top views (overlaid on a depth point cloud). Only the most conﬁdent proposal for each joint above a ﬁxed, shared threshold is shown.
To keep the training times down we employ a distributed
implementation. Training 3 trees to depth 20 from 1 million
images takes about a day on a 1000 core cluster.
3.4. Joint position proposals
Body part recognition as described above infers per-pixel
information. This information must now be pooled across
pixels to generate reliable proposals for the positions of 3D
skeletal joints. These proposals are the ﬁnal output of our
algorithm, and could be used by a tracking algorithm to selfinitialize and recover from failure.
A simple option is to accumulate the global 3D centers
of probability mass for each part, using the known calibrated depth. However, outlying pixels severely degrade
the quality of such a global estimate. Instead we employ a
local mode-ﬁnding approach based on mean shift with
a weighted Gaussian kernel.
We deﬁne a density estimator per body part as
where ˆx is a coordinate in 3D world space, N is the number
of image pixels, wic is a pixel weighting, ˆxi is the reprojection of image pixel xi into world space given depth dI(xi),
and bc is a learned per-part bandwidth. The pixel weighting
wic considers both the inferred body part probability at the
pixel and the world surface area of the pixel:
wic = P(c|I, xi) · dI(xi)2 .
This ensures density estimates are depth invariant and gave
a small but signiﬁcant improvement in joint prediction accuracy. Depending on the deﬁnition of body parts, the posterior P(c|I, x) can be pre-accumulated over a small set of
parts. For example, in our experiments the four body parts
covering the head are merged to localize the head joint.
Mean shift is used to ﬁnd modes in this density efﬁciently. All pixels above a learned probability threshold λc
are used as starting points for part c. A ﬁnal conﬁdence estimate is given as a sum of the pixel weights reaching each
mode. This proved more reliable than taking the modal density estimate.
The detected modes lie on the surface of the body. Each
mode is therefore pushed back into the scene by a learned
z offset ζc to produce a ﬁnal joint position proposal. This
simple, efﬁcient approach works well in practice. The bandwidths bc, probability threshold λc, and surface-to-interior
z offset ζc are optimized per-part on a hold-out validation
set of 5000 images by grid search. (As an indication, this
resulted in mean bandwidth 0.065m, probability threshold
0.14, and z offset 0.039m).
4. Experiments
In this section we describe the experiments performed to
evaluate our method. We show both qualitative and quantitative results on several challenging datasets, and compare with both nearest-neighbor approaches and the state
of the art . We provide further results in the supplementary material. Unless otherwise speciﬁed, parameters
below were set as: 3 trees, 20 deep, 300k training images
per tree, 2000 training example pixels per image, 2000 candidate features θ, and 50 candidate thresholds τ per feature.
Test data. We use challenging synthetic and real depth images to evaluate our approach. For our synthetic test set,
we synthesize 5000 depth images, together with the ground
truth body part labels and joint positions. The original mocap poses used to generate these images are held out from
the training data. Our real test set consists of 8808 frames of
real depth images over 15 different subjects, hand-labeled
with dense body parts and 7 upper body joint positions. We
also evaluate on the real depth data from . The results
suggest that effects seen on synthetic data are mirrored in
the real data, and further that our synthetic test set is by far
the ‘hardest’ due to the extreme variability in pose and body
shape. For most experiments we limit the rotation of the
user to ±120◦in both training and synthetic test data since
the user is facing the camera (0◦) in our main entertainment
scenario, though we also evaluate the full 360◦scenario.
Error metrics. We quantify both classiﬁcation and joint
prediction accuracy. For classiﬁcation, we report the average per-class accuracy, i.e. the average of the diagonal of
the confusion matrix between the ground truth part label and
the most likely inferred part label. This metric weights each
Average per-class accuracy
Maximum probe offset (pixel meters)
Real test data
Synthetic test data
Depth of trees
Real Test Set
900k training images
15k training images
Average per-class accuracy
Num. training images (log scale)
Synthetic test set
Real test set
Silhouette (scale)
Silhouette (no scale)
Average per-class accuracy
Depth of trees
Synthetic Test Set
900k training images
15k training images
Figure 6. Training parameters vs. classiﬁcation accuracy. (a) Number of training images. (b) Depth of trees. (c) Maximum probe offset.
body part equally despite their varying sizes, though mislabelings on the part boundaries reduce the absolute numbers.
For joint proposals, we generate recall-precision curves
as a function of conﬁdence threshold. We quantify accuracy
as average precision per joint, or mean average precision
(mAP) over all joints.The ﬁrst joint proposal within D meters of the ground truth position is taken as a true positive,
while other proposals also within D meters count as false
positives. This penalizes multiple spurious detections near
the correct position which might slow a downstream tracking algorithm. Any joint proposals outside D meters also
count as false positives. Note that all proposals (not just the
most conﬁdent) are counted in this metric. Joints invisible
in the image are not penalized as false negatives. We set
D = 0.1m below, approximately the accuracy of the handlabeled real test data ground truth. The strong correlation
of classiﬁcation and joint prediction accuracy (c.f. the blue
curves in Figs. 6(a) and 8(a)) suggests the trends observed
below for one also apply for the other.
4.1. Qualitative results
Fig. 5 shows example inferences of our algorithm. Note
high accuracy of both classiﬁcation and joint prediction
across large variations in body and camera pose, depth in
scene, cropping, and body size and shape (e.g. small child
vs. heavy adult). The bottom row shows some failure modes
of the body part classiﬁcation. The ﬁrst example shows
a failure to distinguish subtle changes in the depth image
such as the crossed arms. Often (as with the second and
third failure examples) the most likely body part is incorrect, but there is still sufﬁcient correct probability mass in
distribution P(c|I, x) that an accurate proposal can still be
generated. The fourth example shows a failure to generalize
well to an unseen pose, but the conﬁdence gates bad proposals, maintaining high precision at the expense of recall.
Note that no temporal or kinematic constraints (other
than those implicit in the training data) are used for any
of our results. Despite this, per-frame results on video sequences in the supplementary material show almost every
joint accurately predicted with remarkably little jitter.
4.2. Classiﬁcation accuracy
We investigate the effect of several training parameters
on classiﬁcation accuracy. The trends are highly correlated
between the synthetic and real test sets, and the real test
set appears consistently ‘easier’ than the synthetic test set,
probably due to the less varied poses present.
Number of training images. In Fig. 6(a) we show how
test accuracy increases approximately logarithmically with
the number of randomly generated training images, though
starts to tail off around 100k images. As shown below, this
saturation is likely due to the limited model capacity of a 3
tree, 20 deep decision forest.
Silhouette images. We also show in Fig. 6(a) the quality
of our approach on synthetic silhouette images, where the
features in Eq. 1 are either given scale (as the mean depth)
or not (a ﬁxed constant depth). For the corresponding joint
prediction using a 2D metric with a 10 pixel true positive
threshold, we got 0.539 mAP with scale and 0.465 mAP
without. While clearly a harder task due to depth ambiguities, these results suggest the applicability of our approach
to other imaging modalities.
Depth of trees. Fig. 6(b) shows how the depth of trees affects test accuracy using either 15k or 900k images. Of all
the training parameters, depth appears to have the most signiﬁcant effect as it directly impacts the model capacity of
the classiﬁer. Using only 15k images we observe overﬁtting
beginning around depth 17, but the enlarged 900k training
set avoids this. The high accuracy gradient at depth 20 suggests even better results can be achieved by training still
deeper trees, at a small extra run-time computational cost
and a large extra memory penalty. Of practical interest is
that, until about depth 10, the training set size matters little,
suggesting an efﬁcient training strategy.
Maximum probe offset. The range of depth probe offsets
allowed during training has a large effect on accuracy. We
show this in Fig. 6(c) for 5k training images, where ‘maximum probe offset’ means the max. absolute value proposed
for both x and y coordinates of u and v in Eq. 1. The concentric boxes on the right show the 5 tested maximum off-
L. Shoulder
R. Shoulder
Average precision
Joint prediction from ground truth body parts
Joint prediction from inferred body parts
Figure 7. Joint prediction accuracy. We compare the actual performance of our system (red) with the best achievable result (blue)
given the ground truth body part labels.
sets calibrated for a left shoulder pixel in that image; the
largest offset covers almost all the body. (Recall that this
maximum offset scales with world depth of the pixel). As
the maximum probe offset is increased, the classiﬁer is able
to use more spatial context to make its decisions, though
without enough data would eventually risk overﬁtting to this
context. Accuracy increases with the maximum probe offset, though levels off around 129 pixel meters.
4.3. Joint prediction accuracy
In Fig. 7 we show average precision results on the synthetic test set, achieving 0.731 mAP. We compare an idealized setup that is given the ground truth body part labels
to the real setup using inferred body parts. While we do
pay a small penalty for using our intermediate body parts
representation, for many joints the inferred results are both
highly accurate and close to this upper bound. On the real
test set, we have ground truth labels for head, shoulders, elbows, and hands. An mAP of 0.984 is achieved on those
parts given the ground truth body part labels, while 0.914
mAP is achieved using the inferred body parts. As expected,
these numbers are considerably higher on this easier test set.
Comparison with nearest neighbor. To highlight the need
to treat pose recognition in parts, and to calibrate the dif-
ﬁculty of our test set for the reader, we compare with
two variants of exact nearest-neighbor whole-body matching in Fig. 8(a). The ﬁrst, idealized, variant matches the
ground truth test skeleton to a set of training exemplar skeletons with optimal rigid translational alignment in 3D world
space. Of course, in practice one has no access to the test
skeleton. As an example of a realizable system, the second
variant uses chamfer matching to compare the test image to the training exemplars. This is computed using depth
edges and 12 orientation bins. To make the chamfer task
easier, we throw out any cropped training or test images.
We align images using the 3D center of mass, and found
that further local rigid translation only reduced accuracy.
Our algorithm, recognizing in parts, generalizes better
than even the idealized skeleton matching until about 150k
training images are reached. As noted above, our results
may get even better with deeper trees, but already we robustly infer 3D body joint positions and cope naturally with
cropping and translation. The speed of nearest neighbor
chamfer matching is also drastically slower (2 fps) than our
algorithm. While hierarchical matching is faster, one
would still need a massive exemplar set to achieve comparable accuracy.
Comparison with . The authors of provided their
test data and results for direct comparison. Their algorithm
uses body part proposals from and further tracks the
skeleton with kinematic and temporal information. Their
data comes from a time-of-ﬂight depth camera with very
different noise characteristics to our structured light sensor. Without any changes to our training data or algorithm,
Fig. 8(b) shows considerably improved joint prediction average precision. Our algorithm also runs at least 10x faster.
Full rotations and multiple people. To evaluate the full
360◦rotation scenario, we trained a forest on 900k images
containing full rotations and tested on 5k synthetic full rotation images (with held out poses). Despite the massive
increase in left-right ambiguity, our system was still able
to achieve an mAP of 0.655, indicating that our classiﬁer
can accurately learn the subtle visual cues that distinguish
front and back facing poses. Residual left-right uncertainty
after classiﬁcation can naturally be propagated to a tracking algorithm through multiple hypotheses. Our approach
can propose joint positions for multiple people in the image,
since the per-pixel classiﬁer generalizes well even without
explicit training for this scenario. Results are given in Fig. 1
and the supplementary material.
Faster proposals. We also implemented a faster alternative approach to generating the proposals based on simple
bottom-up clustering. Combined with body part classiﬁcation, this runs at ∼200 fps on the Xbox GPU, vs. ∼50 fps
using mean shift on a modern 8 core desktop CPU. Given
the computational savings, the 0.677 mAP achieved on the
synthetic test set compares favorably to the 0.731 mAP of
the mean shift approach.
5. Discussion
We have seen how accurate proposals for the 3D locations of body joints can be estimated in super real-time from
single depth images. We introduced body part recognition
as an intermediate representation for human pose estimation. Using a highly varied synthetic training set allowed
us to train very deep decision forests using simple depthinvariant features without overﬁtting, learning invariance to
both pose and shape. Detecting modes in a density function
gives the ﬁnal set of conﬁdence-weighted 3D joint proposals. Our results show high correlation between real and synthetic data, and between the intermediate classiﬁcation and
the ﬁnal joint proposal accuracy. We have highlighted the
importance of breaking the whole skeleton into parts, and
show state of the art accuracy on a competitive test set.
As future work, we plan further study of the variability
Mean average precision
Number of training images (log scale)
Ground truth skeleton NN
Chamfer NN
Our algorithm
L. Shoulder
R. Shoulder
Average precision
Our result (per frame)
Ganapathi et al. (tracking)
Figure 8. Comparisons. (a) Comparison with nearest neighbor matching. (b) Comparison with . Even without the kinematic and
temporal constraints exploited by , our algorithm is able to more accurately localize body joints.
in the source mocap data, the properties of the generative
model underlying the synthesis pipeline, and the particular
part deﬁnitions. Whether a similarly efﬁcient approach that
can directly regress joint positions is also an open question.
Perhaps a global estimate of latent variables such as coarse
person orientation could be used to condition the body part
inference and remove ambiguities in local pose estimates.
Acknowledgements.
We thank the many skilled engineers in
Xbox, particularly Robert Craig, Matt Bronder, Craig Peeper, Momin Al-
Ghosien, and Ryan Geiss, who built the Kinect tracking system on top
of this research. We also thank John Winn, Duncan Robertson, Antonio
Criminisi, Shahram Izadi, Ollie Williams, and Mihai Budiu for help and
valuable discussions, and Varun Ganapathi and Christian Plagemann for
providing their test data.