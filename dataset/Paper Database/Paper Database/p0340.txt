Context Encoding for Semantic Segmentation
Hang Zhang 1,2
Kristin Dana 1
Jianping Shi 3
Zhongyue Zhang 2
Xiaogang Wang 4
Ambrish Tyagi 2
Amit Agrawal 2
1Rutgers University 2Amazon Inc 3SenseTime 4The Chinese University of Hong Kong
{zhang.hang@,kdana@ece.}rutgers.edu, 
 , {zhongyue,ambrisht,aaagrawa}@amazon.com,
Recent work has made signiﬁcant progress in improving
spatial resolution for pixelwise labeling with Fully Convolutional Network (FCN) framework by employing Dilated/Atrous convolution, utilizing multi-scale features and
reﬁning boundaries. In this paper, we explore the impact
of global contextual information in semantic segmentation
by introducing the Context Encoding Module, which captures the semantic context of scenes and selectively highlights class-dependent featuremaps. The proposed Context
Encoding Module signiﬁcantly improves semantic segmentation results with only marginal extra computation cost
over FCN. Our approach has achieved new state-of-theart results 51.7% mIoU on PASCAL-Context, 85.9% mIoU
on PASCAL VOC 2012. Our single model achieves a ﬁnal score of 0.5567 on ADE20K test set, which surpasses
the winning entry of COCO-Place Challenge 2017. In addition, we also explore how the Context Encoding Module
can improve the feature representation of relatively shallow
networks for the image classiﬁcation on CIFAR-10 dataset.
Our 14 layer network has achieved an error rate of 3.45%,
which is comparable with state-of-the-art approaches with
over 10× more layers. The source code for the complete
system are publicly available1.
1. Introduction
Semantic segmentation assigns per-pixel predictions of
object categories for the given image, which provides a
comprehensive scene description including the information
of object category, location and shape.
State-of-the-art
semantic segmentation approaches are typically based on
the Fully Convolutional Network (FCN) framework .
The adaption of Deep Convolutional Neural Networks
1Links can be found at 
Labeling a scene with accurate per-pixel labels is a challenge for semantic segmentation algorithms.
Even humans ﬁnd the task challenging. However, narrowing the list of probable categories based on scene context
makes labeling much easier. Motivated by this, we introduce the Context Encoding Module which selectively highlights the class-dependent featuremaps and makes the semantic segmentation easier for the network.
from ADE20K .)
(CNNs) beneﬁts from the rich information of object
categories and scene semantics learned from diverse set of
images . CNNs are able to capture the informative representations with global receptive ﬁelds by stacking convolutional layers with non-linearities and downsampling. For
conquering the problem of spatial resolution loss associated with downsampling, recent work uses Dilated/Atrous
convolution strategy to produce dense predictions from pretrained networks . However, this strategy also isolates
the pixels from the global scene context, leading to misclassiﬁed pixels. For example in the 3rd row of Figure 4, the
 
baseline approach classiﬁes some pixels in the windowpane
Recent methods have achieved state-of-the-art performance by enlarging the receptive ﬁeld using multiresolution pyramid-based representations.
For example,
PSPNet adopts Spatial Pyramid Pooling that pools the featuremaps into different sizes and concatenates them the after upsampling and Deeplab proposes an Atrous Spatial Pyramid Pooling that employs large rate dilated/atrous
convolutions . While these approaches do improve performance, the context representations are not explicit, leading to the questions: Is capturing contextual information the
same as increasing the receptive ﬁeld size? Consider labeling a new image for a large dataset (such as ADE20K 
containing 150 categories) as shown in Figure 1. Suppose
we have a tool allowing the annotator to ﬁrst select the semantic context of the image, (e.g. a bedroom). Then, the
tool could provide a much smaller sublist of relevant categories (e.g. bed, chair, etc.), which would dramatically reduce the search space of possible categories. Similarly, if
we can design an approach to fully utilize the strong correlation between scene context and the probabilities of categories, the semantic segmentation becomes easier for the
Classic computer vision approaches have the advantage
of capturing semantic context of the scene. For a given input image, hand-engineered features are densely extracted
using SIFT or ﬁlter bank responses . Then a visual vocabulary (dictionary) is often learned and the global
feature statistics are described by classic encoders such as
Bag-of-Words (BoW) , VLAD or Fisher
Vector . The classic representations encode global contextual information by capturing feature statistics. While
the hand-crafted feature were improved greatly by CNN
methods, the overall encoding process of traditional methods was convenient and powerful. Can we leverage the context encoding of classic approaches with the power of deep
learning? Recent work has made great progress in generalizing traditional encoders in a CNN framework .
Zhang et al. introduces an Encoding Layer that integrates
the entire dictionary learning and residual encoding pipeline
into a single CNN layer to capture orderless representations.
This method has achieved state-of-the-art results on texture
classiﬁcation . In this work, we extend the Encoding
Layer to capture global feature statistics for understanding
semantic context.
As the ﬁrst contribution of this paper, we introduce a
Context Encoding Module incorporating Semantic Encoding Loss (SE-loss), a simple unit to leverage the global scene
context information. The Context Encoding Module integrates an Encoding Layer to capture global context and selectively highlight the class-dependent featuremaps. For intuition, consider that we would want to de-emphasize the
probability of a vehicle to appear in an indoor scene. Standard training process only employs per-pixel segmentation
loss, which does not strongly utilize global context of the
scene. We introduce Semantic Encoding Loss (SE-loss) to
regularize the training, which lets the network predict the
presence of the object categories in the scene to enforce network learning of semantic context. Unlike per-pixel loss,
SE-loss gives an equal contributions for both big and small
objects and we ﬁnd the performance of small objects are
often improved in practice. The proposed Context Encoding Module and Semantic Encoding Loss are conceptually
straight-forward and compatible with existing FCN based
approaches.
The second contribution of this paper is the design and
implementation of a new semantic segmentation framework
Context Encoding Network (EncNet). EncNet augments a
pre-trained Deep Residual Network (ResNet) by including a Context Encoding Module as shown in Figure 2.
We use dilation strategy of pre-trained networks. The
proposed Context Encoding Network achieves state-of-theart results 85.9% mIoU on PASCAL VOC 2012 and 51.7%
on PASCAL in Context. Our single model of EncNet-101
has achieved a score of 0.5567 which surpass the winning
entry of COCO-Place Challenge 2017 . In addition to
semantic segmentation, we also study the power of our Context Encoding Module for visual recognition on CIFAR-10
dataset and the performance of shallow network is signiﬁcantly improved using the proposed Context Encoding
Module. Our network has achieved an error rate of 3.96%
using only 3.5M parameters. We release the complete system including state-of-the-art approaches together with our
implementation of synchronized multi-GPU Batch Normalization and memory-efﬁcient Encoding Layer .
2. Context Encoding Module
We refer to the new CNN module as Context Encoding
Module and the components of the module are illustrated in
Context Encoding
Understanding and utilizing contextual information is very important for semantic segmentation.
For a network pre-trained on a diverse set
of images , the featuremaps encode rich information
what objects are in the scene. We employ the Encoding
Layer to capture the feature statistics as a global semantic context. We refer to the output of Encoding Layer
as encoded semantics. For utilizing the context, a set of
scaling factors are predicted to selectively highlight the
class-dependent featuremaps. The Encoding Layer learns
an inherent dictionary carrying the semantic context of the
dataset and outputs the residual encoders with rich contextual information. We brieﬂy describe the prior work of Encoding Layer for completeness.
Figure 2: Overview of the proposed EncNet. Given an input image, we ﬁrst use a pre-trained CNN to extract dense convolutional featuremaps. We build a Context Encoding Module on top, including an Encoding Layer to capture the encoded
semantics and predict scaling factors that are conditional on these encoded semantics. These learned factors selectively highlight class-dependent featuremaps (visualized in colors). In another branch, we employ Semantic Encoding Loss (SE-loss) to
regularize the training which lets the Context Encoding Module predict the presence of the categories in the scene. Finally, the
representation of Context Encoding Module is fed into the last convolutional layer to make per-pixel prediction. (Notation:
FC fully connected layer, Conv convolutional layer, Encode Encoding Layer , N channel-wise multiplication.)
Figure 3: Dilation strategy and losses. Each cube denotes
different network stages. We apply dilation strategy to the
stage 3 and 4. The Semantic Encoding Losses (SE-loss)
are added to both stage 3 and 4 of the base network. (D
denotes the dilation rate, Seg-loss represents the per-pixel
segmentation loss.)
Encoding Layer considers an input featuremap with the
shape of C × H × W as a set of C-dimensional input features X = {x1, ...xN}, where N is total number of features given by H × W, which learns an inherent codebook
D = {d1, ...dK} containing K number of codewords (visual centers) and a set of smoothing factor of the visual centers S = {s1, ...sK}. Encoding Layer outputs the residual
encoder by aggregating the residuals with soft-assignment
weights ek = PN
i=1 eik, where
exp(−sk∥rik∥2)
j=1 exp(−sj∥rij∥2)
and the residuals are given by rik = xi −dk. We apply
aggregation to the encoders instead of concatenation. That
is, e = PK
k=1 φ(ek), where φ denotes Batch Normalization with ReLU activation, avoid making K independent
encoders to be ordered and also reduce the dimensionality
of the feature representations.
Featuremap Attention
To make use of the encoded semantics captured by Encoding Layer, we predict scaling
factors of featuremaps as a feedback loop to emphasize or
de-emphasize class-dependent featuremaps. We use a fully
connected layer on top of the Encoding Layer and a sigmoid as the activation function, which outputs predicted
featuremap scaling factors γ = δ(We), where W denotes
the layer weights and δ is the sigmoid function. Then the
module output is given by Y = X ⊗γ a channel wise multiplication ⊗between input featuremaps X and scaling factor
γ. This feedback strategy is inspired by prior work in style
transfer and a recent work SE-Net that tune
featuremap scale or statistics. As an intuitive example of
the utility of the approach, consider emphasizing the probability of an airplane in a sky scene, but de-emphasizing that
of a vehicle.
Semantic Encoding Loss
In standard training process of
semantic segmentation, the network is learned from isolated
pixels (per-pixel cross-entropy loss for given input image
and ground truth labels). The network may have difﬁculty
understanding context without global information. To regularize the training of Context Encoding Module, we introduce Semantic Encoding Loss (SE-loss) which forces the
network to understand the global semantic information with
very small extra computation cost. We build an additional
fully connected layer with a sigmoid activation function on
top of the Encoding Layer to make individual predictions
for the presences of object categories in the scene and learn
with binary cross entropy loss. Unlike per-pixel loss, SEloss considers big and small objects equally. In practice, we
ﬁnd the segmentation of small objects are often improved.
In summary, the Context Encoding Module shown in Fig-
ure 2 captures the semantic context to predict a set of scaling factors that selectively highlights the class-dependent
featuremap for semantic segmentation.
2.1. Context Encoding Network (EncNet)
With the proposed Context Encoding Module, we build
a Context Encoding Network (EncNet) with pre-trained
ResNet . We follow the prior work using dilated network strategy on pre-trained network at stage 3
and 42, as shown in Figure 3. We build our proposed Context Encoding Module on top of convolutional layers right
before the ﬁnal prediction, as shown in Figure 2. For further
improving the performance and regularizing the training of
Context Encoding Module, we make a separate branch to
minimize the SE-loss that takes the encoded semantics as
input and predicts the presence of the object classes. As
the Context Encoding Module and SE-loss are very light
weight, we build another Context Encoding Module on top
of stage 3 to minimize the SE-loss as an additional regularization, similar to but much cheaper than the auxiliary loss
of PSPNet . The ground truths of SE-loss are directly
generated from the ground-truth segmentation mask without any additional annotations.
Our Context Encoding Module is differentiable and inserted in the existing FCN pipeline without any extra training supervision or modiﬁcation of the framework.
terms of computation, the proposed EncNet only introduces
marginal extra computation to the original dilated FCN network.
2.2. Relation to Other Approaches
Segmentation Approaches
CNN has become de facto
standard in computer vision tasks including semantic segmentation.
The early approaches generate segmentation
masks by classifying region proposals . Fully Convolutional Neural Network (FCN) pioneered the era of endto-end segmentation . However, recovering detailed information from downsampled featuremaps is difﬁcult due to
the use of pre-trained networks that are originally designed
for image classiﬁcation. To address this difﬁculty, one way
is to learn the upsampling ﬁlters, i.e. fractionally-strided
convolution or decoders . The other path is to employ
Atrous/Dilated convolution strategy to the network 
which preserves the large receptive ﬁeld and produces dense
predictions. Prior work adopts dense CRF taking FCN outputs to reﬁne the segmentation boundaries , and CRF-
RNN achieves end-to-end learning of CRF with FCN .
Recent FCN-based work dramatically boosts performance
by increasing the receptive ﬁeld with larger rate atrous
convolution or global/pyramid pooling . However, these strategies have to sacriﬁce the efﬁciency of the
2We refer to the stage with original featuremap size 1/16 as stage 3 and
size 1/32 as stage 4.
Table 1: Ablation study on PASCAL-Context dataset. Encoding represents Context Encoding Module, SE-loss is the
proposed Semantic Segmentation loss, MS means multisize evaluation. Notably, applying Context Encoding Module only introduce marginal extra computation, but the performance is signiﬁcantly improved. (PixAcc and mIoU calculated on 59 classes w/o background.)
model, for example PSPNet applies convolutions on
ﬂat featuremaps after Pyramid Pooling and upsampling and
DeepLab employs large rate atrous convolution that will
degenerate to 1 × 1 convolution in extreme cases. We propose the Context Encoding Module to efﬁciently leverage
global context for semantic segmentation, which only requires marginal extra computation costs. In addition, the
proposed Context Encoding Module as a simple CNN unit
is compatible with all existing FCN-based approaches.
Featuremap Attention and Scaling
The strategy of
channel-wise featuremap attention is inspired by some pioneering work. Spatial Transformer Network learns an
in-network transformation conditional on the input which
provides a spatial attention to the featuremaps without extra
supervision. Batch Normalization makes the normalization of the data mean and variance over the mini-batch as
part of the network, which successfully allows larger learning rate and makes the network less sensitive to the initialization method. Recent work in style transfer manipulates
the featuremap mean and variance or second order
statistics to enable in-network style switch . A very recent work SE-Net explores the cross channel information
to learn a channel-wise attention and has achieved state-ofthe-art performance in image classiﬁcation . Inspired
by these methods, we use encoded semantics to predict scaling factors of featuremap channels, which provides a mechanism to assign saliency by emphasizing or de-emphasizing
individual featuremaps conditioned on scene context.
3. Experimental Results
In this section, we ﬁrst provide implementation details for EncNet and baseline approach, then we conduct
a complete ablation study on Pascal-Context dataset ,
and ﬁnally we report the performances on PASCAL VOC
2012 and ADE20K datasets. In addition to semantic segmentation, we also explore how the Context Encoding Module can improve the image classiﬁcation performance of shallow network on CIFAR-10 dataset in Sec 3.5.
(b) Ground Truth
(c) FCN (baseline)
(d) EncNet (ours)
(e) Legend
Figure 4: Understanding contextual information of the scene is important for semantic segmentation. For example, baseline
FCN classiﬁes sand as earth without knowing the context as in 1st example. building, house and skyscraper are hard to
distinguish without the semantics as in 2nd and 4th rows. In the 3rd example, FCN identify windowpane as door due to
classifying isolated pixels without a global sense/view. (Visual examples from ADE20K dataset.)
3.1. Implementation Details
Our experiment system including pre-trained models are
based on open source toolbox PyTorch . We apply dilation strategy to stage 3 and 42 of the pre-trained networks
with the output size of 1/8 . The output predictions
are upsampled 8 times using bilinear interpolation for calculating the loss . We follow prior work to use the
learning rate scheduling lr = baselr ∗(1−
total iter)power.
The base learning rate is set to 0.01 for ADE20K dataset
and 0.001 for others and the power is set to 0.9. The momentum is set to 0.9 and weight decay is set to 0.0001.
The networks are training for 50 epochs on PASCAL-
Context and PASCAL VOC 2012 , and 120 epochs
on ADE20K . We randomly shufﬂe the training samples and discard the last mini-batch. For data augmentation,
we randomly ﬂip and scale the image between 0.5 to 2 and
then randomly rotate the image between -10 to 10 degree
and ﬁnally crop the image into ﬁx size using zero padding
if needed. For evaluation, we average the network prediction in multiple scales following .
In practice, larger crop size typically yields better performance for semantic segmentation, but also consumes
larger GPU memory which leads to much smaller working batchsize for Batch Normalization and degrades
the training. To address this difﬁculty, we implement Synchronized Cross-GPU Batch Normalization in PyTorch using NVIDIA CUDA & NCCL toolkit, which increases the
working batchsize to be global mini-batch size (discussed
in Appendix A). We use the mini-batch size of 16 during the training. For comparison with our work, we use
dilated ResNet FCN as baseline approaches. For training
EncNet, we use the number of codewords 32 in Encoding
Layers. The ground truth labels for SE-loss are generated
Figure 5: Ablation study of SE-loss and number of codewords. Left: mIoU and pixAcc as a function of SE-loss
weight α. Empirically, the SE-loss works best with α =
0.2. Right: mIoU and pixAcc as a function of number of
codewords K in Encoding Layer, K = 0 denotes using
global average pooling. The results are tested using single
scale evaluation. (Note: the axes are different on left and
right sides. )
FCN-8s 
CRF-RNN 
ParseNet 
BoxSup 
HO CRF 
Piecewise 
VeryDeep 
DeepLab-v2 
Res101-COCO
ReﬁneNet 
EncNet (ours)
Table 2: Segmentation results on PASCAL-Context dataset.
(Note: mIoU on 60 classes w/ background.)
by “unique” operation ﬁnding the categories presented in
the given ground-truth segmentation mask. The ﬁnal loss is
given by a weighted sum of per-pixel segmentation loss and
Evaluation Metrics We use standard evaluation metrics of pixel accuracy (pixAcc) and mean Intersection of
Union (mIoU). For object segmentation in PASCAL VOC
2012 dataset, we use the ofﬁcial evaluation server that calculates mIoU considering the background as one of the categories. For whole scene parsing datasets PASCAL-Context
and ADE20K, we follow the standard competition benchmark to calculate mIoU by ignoring background pixels.
3.2. Results on PASCAL-Context
PASCAL-Context dataset provides dense semantic
labels for the whole scene, which has 4,998 images for
training and 5105 for test. We follow the prior work to use the semantic labels of the most frequent 59
object categories plus background (60 classes in total). We
use the pixAcc and mIoU for 59 classes as evaluation met-
(b) Ground Truth
(d) EncNet (ours)
Figure 6: Visual examples in PASCAL-Context dataset.
EncNet produce more accurate predictions.
rics in the ablation study of EncNet. For comparing to prior
work, we also report the mIoU using 60 classes in Table 2
(considering the background as one of the classes).
Ablation Study.
To evaluate the performance of EncNet,
we conduct experiments with different settings as shown
in Table 1. Comparing to baseline FCN, simply adding a
Context Encoding Module on top yields results of 78.1/47.6
(pixAcc and mIoU), which only introduces around 3%-5%
extra computation but dramatically outperforms the baseline results of 73.4/41.0. To study the effect of SE-loss,
we test different weights of SE-loss α ={0.0, 0.1, 0.2,
0.4, 0.8}, and we ﬁnd α = 0.2 yields the best performance as shown in Figure 5 (left). We also study effect
of the number of codewords K in Encoding Layer in Figure 5 (right), we use K = 32 because the improvement
gets saturated (K = 0 means using global average pooling instead). Deeper pre-trained network provides better
feature representations, EncNet gets additional 2.5% improvement in mIoU employing ResNet101. Finally, multisize evaluation yields our ﬁnal scores of 81.2% pixAcc and
52.6% mIoU, which is 51.7% including background. Our
proposed EncNet outperform previous state-of-the-art approaches without using COCO pre-training or deeper
model (ResNet152) (see results in Table 2 and Figure 6).
3.3. Results on PASCAL VOC 2012
We also evaluate the performance of proposed Enc-
Net on PASCAL VOC 2012 dataset , one of gold
standard benchmarks for semantic segmentation. Following , We use the augmented annotation set ,
horse mbike person plant sheep
DeepLabv2 
CRF-RNN 
DeconvNet 
Piecewise 
ResNet38 
PSPNet 
EncNet (ours)3
With COCO Pre-training
CRF-RNN 
Dilation8 
Piecewise 
DeepLabv2 
ReﬁneNet 
ResNet38 
PSPNet 
DeepLabv3 
EncNet (ours)4
Table 3: Per-class results on PASCAL VOC 2012 testing set. EncNet outperforms existing approaches and achieves 82.9%
and 85.9% mIoU w/o and w/ pre-training on COCO dataset. (The best two entries in each columns are marked in gray color.
Note: the entries using extra than COCO data are not included .)
consisting of 10,582, 1,449 and 1,456 images in training,
validation and test set. The models are trained on train+val
set and then ﬁnetuned on the original PASCAL training set.
EncNet has achieved 82.9% mIoU3 outperforming all previous work without COCO data and achieve superior performance in many categories, as shown in Table 3.
comparison with state-of-the-art approaches, we follow the
procedure of pre-training on MS-COCO dataset . From
the training set of MS-COCO dataset, we select with images containing the 20 classes shared with PASCAL dataset
with more than 1,000 labeled pixels, resulting in 6.5K images. All the other classes are marked as background. Our
model is pre-trained using a base learning rate of 0.01 and
then ﬁne-tuned on PASCAL dataset using aforementioned
setting. EncNet achieves the best result of 85.9% mIoU4 as
shown in Table 3. Comparing to state-of-the-art approaches
of PSPNet and DeepLabv3 , the EncNet has less
computation complexity.
3.4. Results on ADE20K
ADE20K dataset is a recent scene parsing benchmark containing dense labels of 150 stuff/object category
labels. The dataset includes 20K/2K/3K images for training, validation and set. We train our EncNet on the training set and evaluate it on the validation set using Pix-
Acc and mIoU. Visual examples are shown in Figure 4.
The proposed EncNet signiﬁcantly outperforms the baseline
FCN. EncNet-101 achieves comparable results with stateof-the-art PSPNet-269 using much shallower base network
3 
4 
SegNet 
DilatedNet 
CascadeNet 
ReﬁneNet 
PSPNet 
PSPNet 
FCN (baseline)
EncNet (ours)
EncNet (ours)
Table 4: Segmentation results on ADE20K validation set.
Final Score
(EncNet-101, single model ours)
CASIA IVA JD
WinterIsComing
(PSPNet-269, single model) 
Table 5: Result on ADE20K test set, ranks in COCO-Place
challenge 2017. Our single model surpass PSP-Net-269 and the winning entry of COCO-Place challenge 2017 .
as shown in Table 4. We ﬁne-tune the EncNet-101 for additional 20 epochs on train-val set and submit the results
on test set. The EncNet achieves a ﬁnal score of 0.55675,
which surpass PSP-Net-269 and all entries in COCO Place Challenge 2017 (shown in Table 5).
5Evaluation provided by the ADE20K organizers.
ResNet (pre-act) 
Wide ResNet 28×10 
ResNeXt-29 16×64d 
DenseNet-BC (k=40) 
ResNet 64d (baseline)
Se-ResNet 64d (baseline)
EncNet 16k64d (ours)
EncNet 32k128d (ours)
Table 6: Comparison of model depth, number of parameters
(M), test errors (%) on CIFAR-10. d denotes the dimensions/channels at network stage-1, and k denotes number of
codewords in Encoding Net.
3.5. Image Classiﬁcation Results on CIFAR-10
In addition to semantic segmentation, we also conduct
studies of Context Encoding Module for image recognition on CIFAR-10 dataset consisting of 50K training
images and 10K test images in 10 classes. State-of-theart methods typically rely on very deep and large models . In this section, we explore how much
Context Encoding Module will improve the performance of
a relatively shallow network, a 14-layer ResNet .
Implementation Details.
For comparison with our
work, we ﬁrst implement a wider version of pre-activation
ResNet and a recent work Squeeze-and-Excitation Networks (SE-Net) as our baseline approaches. ResNet
consists a 3×3 convolutional layer with 64 channels, followed by 3 stages with 2 basicblocks in each stage and
ends up with a global average pooling and a 10-way fullyconnected layer. The basicblock consists two 3×3 convolutional layers with an identity shortcut. We downsample
twice at stage 2 and 3, the featuremap channels are doubled
when downsampling happens. We implement SE-Net 
by adding a Squeeze-and-Excitation unit on top of each basicblocks of ResNet (to form a SE-Block), which uses the
cross channel information as a feedback loop. We follow
the original paper using a reduction factor of 16 in SE-
Block. For EncNet, we build Context Encoding Module
on top of each basicblocks in ResNet, which uses the global
context to predict the scaling factors of residuals to preserve
the identity mapping along the network. For Context Encoding Module, we ﬁrst use a 1×1 convolutional layer to
reduce the channels by 4 times, then apply Encoding Layer
with concatenation of encoders and followed by a L2 normalization.
For training, we adopt the MSRA weight initialization and use Batch Normalization with weighted
layers. We use a weight decay of 0.0005 and momentum of
0.9. The models are trained with a mini-batch size of 128
on two GPUs using a cosine learning rate scheduling 
for 600 epochs. We follow the standard data augmenta-
Figure 7: Train and validation curves of EncNet-32k64d
and the baseline Se-ResNet-64d on CIFAR-10 dataset, plotting error rate as a function of epochs.
tion for training, which pads the image by 4 pixels
along each border and random crops into the size of 32×32.
During the training of EncNet, we collect the statistics of
the scaling factor of Encoding Layers sk and ﬁnd it tends
to be 0.5 with small variance. In practice, when applying
a dropout /shakeout like regularization to sk can
improve the training to reach better optimum, by randomly
assigning the scaling factors sk in Encoding Layer during
the forward and backward passes of the training, drawing a
uniform distribution between 0 and 1, and setting sk = 0.5
for evaluation.
We ﬁnd our training process (larger training epochs with
cosine lr schedule) is likely to improve the performance
of all approaches.
EncNet outperforms the baseline approaches with similar model complexity. The experimental results demonstrate that Context Encoding Module improves the feature representations of the network at an early
stage using global context, which is hard to learn for a
standard network architecture only consisting convolutional
layers, non-linearities and downsamplings.
Our experiments shows that a shallow network of 14 layers with Context Encoding Module has achieved 3.45% error rate on CI-
FAR10 dataset as shown in Table 6, which is comparable
performance with state-of-the art approaches .
4. Conclusion
To capture and utilize the contextual information for
semantic segmentation, we introduce a Context Encoding
Module, which selectively highlights the class-dependent
featuremap and “simpliﬁes” the problem for the network.
The proposed Context Encoding Module is conceptually
straightforward, light-weight and compatible with existing
FCN base approaches. The experimental results has demonstrated superior performance of the proposed EncNet. We
hope the strategy of Context Encoding and our state-ofthe-art implementation (including baselines, Synchronized
Cross-GPU Batch Normalization and Encoding Layer) can
be beneﬁcial to scene parsing and semantic segmentation
work in the community.
Acknowledgement
The authors would like to thank Sean Liu from Amazon
Lab 126, Sheng Zha and Mu Li from Amazon AI for helpful
discussions and comments. We thank Amazon Web Service
(AWS) for providing free EC2 access.
A. Implementation Details on Synchronized
Cross-GPU Batch Normalization
We implement synchronized cross-gpu batch normalization (SyncBN) on PyTorch using NVIDIA NCCL
Toolkit. Concurrent work also implement SyncBN by ﬁrst
calculating the global mean and then the variance, which
requires synchronizing twice in each iteration . Instead, our implementation only requires synchronizing one
time by applying a simple strategy: for the N number of
given input samples X = {x1, ...xN}, the variance can be
represented by
i=1(xi −µ)2
. We ﬁrst calculate P xi and P x2
i individually on each device, then the global sums are calculated
by applying all reduce operation. The global mean and variance are calculated using Equation 2 and the normalization
is performed for each sample yi = γ xi−µ
σ2+ϵ + β . Similarly, we synchronize once for the gradients of P xi and
i during the back-propagation.