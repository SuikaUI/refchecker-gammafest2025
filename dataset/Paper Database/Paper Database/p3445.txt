HAL Id: hal-01242052
 
Submitted on 23 May 2016
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of scientific research documents, whether they are published or not.
The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destinée au dépôt et à la diffusion de documents
scientifiques de niveau recherche, publiés ou non,
émanant des établissements d’enseignement et de
recherche français ou étrangers, des laboratoires
publics ou privés.
NetVLAD: CNN architecture for weakly supervised
place recognition
Relja Arandjelovic, Petr Gronat, Akihiko Torii, Tomas Pajdla, Josef Sivic
To cite this version:
Relja Arandjelovic, Petr Gronat, Akihiko Torii, Tomas Pajdla, Josef Sivic. NetVLAD: CNN architecture for weakly supervised place recognition. CVPR 2016 - 29th IEEE Conference on Computer
Vision and Pattern Recognition, Jun 2016, Las Vegas, United States. ￿hal-01242052v3￿
NetVLAD: CNN architecture for weakly supervised place recognition
Relja Arandjelovi´c
Petr Gronat
Akihiko Torii
Tokyo Tech †
Tomas Pajdla
CTU in Prague ‡
Josef Sivic
We tackle the problem of large scale visual place recognition, where the task is to quickly and accurately recognize the location of a given query photograph. We present
the following three principal contributions. First, we develop a convolutional neural network (CNN) architecture
that is trainable in an end-to-end manner directly for the
place recognition task. The main component of this architecture, NetVLAD, is a new generalized VLAD layer, inspired by the “Vector of Locally Aggregated Descriptors”
image representation commonly used in image retrieval.
The layer is readily pluggable into any CNN architecture
and amenable to training via backpropagation. Second, we
develop a training procedure, based on a new weakly supervised ranking loss, to learn parameters of the architecture
in an end-to-end manner from images depicting the same
places over time downloaded from Google Street View Time
Machine. Finally, we show that the proposed architecture
signiﬁcantly outperforms non-learnt image representations
and off-the-shelf CNN descriptors on two challenging place
recognition benchmarks, and improves over current stateof-the-art compact image representations on standard image retrieval benchmarks.
1. Introduction
Visual place recognition has received a signiﬁcant
amount of attention in the past years both in computer vision and robotics
communities motivated by, e.g., applications in autonomous driving , augmented reality 
or geo-localizing archival imagery .
The place recognition problem, however, still remains
extremely challenging. How can we recognize the same
street-corner in the entire city or on the scale of the entire country despite the fact it can be captured in different
∗WILLOW project, Departement d’Informatique de l’´Ecole Normale
Sup´erieure, ENS/INRIA/CNRS UMR 8548.
†Department of Mechanical and Control Engineering, Graduate School
of Science and Engineering, Tokyo Institute of Technology
‡Center for Machine Perception, Department of Cybernetics, Faculty
of Electrical Engineering, Czech Technical University in Prague
(a) Mobile phone query
(b) Retrieved image of same place
Figure 1. Our trained NetVLAD descriptor correctly recognizes
the location (b) of the query photograph (a) despite the large
amount of clutter (people, cars), changes in viewpoint and completely different illumination (night vs daytime). Please see appendix C for more examples.
illuminations or change its appearance over time? The fundamental scientiﬁc question is what is the appropriate representation of a place that is rich enough to distinguish similarly looking places yet compact to represent entire cities
or countries.
The place recognition problem has been traditionally
cast as an instance retrieval task, where the query image
location is estimated using the locations of the most visually similar images obtained by querying a large geotagged database .
Each database
image is represented using local invariant features 
such as SIFT that are aggregated into a single vector
representation for the entire image such as bag-of-visualwords , VLAD or Fisher vector . The
resulting representation is then usually compressed and efﬁciently indexed . The image database can be further
augmented by 3D structure that enables recovery of accurate camera pose .
In the last few years convolutional neural networks
(CNNs) have emerged as powerful image representations for various category-level recognition tasks such as
object classiﬁcation , scene recognition 
or object detection . The basic principles of CNNs are
known from 80’s and the recent successes are a
combination of advances in GPU-based computation power
together with large labelled image datasets . While it
has been shown that the trained representations are, to some
extent, transferable between recognition tasks , a direct application of CNN representations trained
for object classiﬁcation as black-box descriptor extractors has so far yielded limited improvements in performance
on instance-level recognition tasks . In this
work we investigate whether this gap in performance can
be bridged by CNN representations developed and trained
directly for place recognition. This requires addressing the
following three main challenges. First, what is a good CNN
architecture for place recognition? Second, how to gather
sufﬁcient amount of annotated data for the training? Third,
how can we train the developed architecture in an end-toend manner tailored for the place recognition task? To address these challenges we bring the following three innovations.
First, building on the lessons learnt from the current
well performing hand-engineered object retrieval and place
recognition pipelines we develop a convolutional neural network architecture for place recognition
that aggregates mid-level (conv5) convolutional features extracted from the entire image into a compact single vector
representation amenable to efﬁcient indexing. To achieve
this, we design a new trainable generalized VLAD layer,
NetVLAD, inspired by the Vector of Locally Aggregated
Descriptors (VLAD) representation that has shown excellent performance in image retrieval and place recognition. The layer is readily pluggable into any CNN architecture and amenable to training via backpropagation. The
resulting aggregated representation is then compressed using Principal Component Analysis (PCA) to obtain the ﬁnal
compact descriptor of the image.
Second, to train the architecture for place recognition,
we gather a large dataset of multiple panoramic images depicting the same place from different viewpoints over time
from the Google Street View Time Machine.
is available for vast areas of the world, but provides only
weak form of supervision: we know the two panoramas are
captured at approximately similar positions based on their
(noisy) GPS but we don’t know which parts of the panoramas depict the same parts of the scene.
Third, we develop a learning procedure for place recognition that learns parameters of the architecture in an endto-end manner tailored for the place recognition task from
the weakly labelled Time Machine imagery. The resulting
representation is robust to changes in viewpoint and lighting conditions, while simultaneously learns to focus on the
relevant parts of the image such as the building fac¸ades and
the skyline, while ignoring confusing elements such as cars
and people that may occur at many different places.
We show that the proposed architecture signiﬁcantly
outperforms non-learnt image representations and off-theshelf CNN descriptors on two challenging place recognition benchmarks, and improves over current state-of-the-art
compact image representations on standard image retrieval
benchmarks.
1.1. Related work
While there have been many improvements in designing better image retrieval and place recognition 
systems, not many works have performed learning for these
tasks. All relevant learning-based approaches fall into one
or both of the following two categories: (i) learning for an
auxiliary task (e.g. some form of distinctiveness of local features ), and (ii) learning on top
of shallow hand-engineered descriptors that cannot be ﬁnetuned for the target task . Both of these are
in spirit opposite to the core idea behind deep learning that
has provided a major boost in performance in various recognition tasks: end-to-end learning. We will indeed show in
section 5.2 that training representations directly for the endtask, place recognition, is crucial for obtaining good performance.
Numerous works concentrate on learning better local descriptors or metrics to compare them , but even though some of them show results
on image retrieval, the descriptors are learnt on the task of
matching local image patches, and not directly with image
retrieval in mind. Some of them also make use of handengineered features to bootstrap the learning, i.e. to provide
noisy training data .
Several works have investigated using CNN-based features for image retrieval. These include treating activations
from certain layers directly as descriptors by concatenating
them , or by pooling . However, none of
these works actually train the CNNs for the task at hand,
but use CNNs as black-box descriptor extractors. One exception is the work of Babenko et al. in which the network is ﬁne-tuned on an auxiliary task of classifying 700
landmarks. However, again the network is not trained directly on the target retrieval task.
Finally, recently and performed end-to-end
learning for different but related tasks of ground-to-aerial
matching and camera pose estimation .
2. Method overview
Building on the success of current place recognition systems (e.g. ), we cast place
recognition as image retrieval. The query image with unknown location is used to visually search a large geotagged
image database, and the locations of top ranked images are
used as suggestions for the location of the query. This is
generally done by designing a function f which acts as the
“image representation extractor”, such that given an image
Ii it produces a ﬁxed size vector f(Ii). The function is used
to extract the representations for the entire database {Ii},
which can be done ofﬂine, and to extract the query image
representation f(q), done online. At test time, the visual
search is performed by ﬁnding the nearest database image to
the query, either exactly or through fast approximate nearest
neighbour search, by sorting images based on the Euclidean
distance d(q, Ii) between f(q) and f(Ii).
handengineered image representations (e.g. f(I) corresponds
to extracting SIFT descriptors , followed by pooling
into a bag-of-words vector or a VLAD vector ),
here we propose to learn the representation f(I) in an
end-to-end manner, directly optimized for the task of
place recognition.
The representation is parametrized
with a set of parameters θ and we emphasize this fact
by referring to it as fθ(I). It follows that the Euclidean
distance dθ(Ii, Ij) = ∥fθ(Ii) −fθ(Ij)∥also depends on
the same parameters.
An alternative setup would be to
learn the distance function itself, but here we choose to ﬁx
the distance function to be Euclidean distance, and to pose
our problem as the search for the explicit feature map fθ
which works well under the Euclidean distance.
In section 3 we describe the proposed representation fθ
based on a new deep convolutional neural network architecture inspired by the compact aggregated image descriptors
for instance retrieval. In section 4 we describe a method to
learn the parameters θ of the network in an end-to-end manner using weakly supervised training data from the Google
Street View Time Machine.
3. Deep architecture for place recognition
This section describes the proposed CNN architecture
fθ, guided by the best practices from the image retrieval
community. Most image retrieval pipelines are based on (i)
extracting local descriptors, which are then (ii) pooled in an
orderless manner. The motivation behind this choice is that
the procedure provides signiﬁcant robustness to translation
and partial occlusion. Robustness to lighting and viewpoint
changes is provided by the descriptors themselves, and scale
invariance is ensured through extracting descriptors at multiple scales.
In order to learn the representation end-to-end, we design a CNN architecture that mimics this standard retrieval
pipeline in an uniﬁed and principled manner with differentiable modules. For step (i), we crop the CNN at the last
convolutional layer and view it as a dense descriptor extractor. This has been observed to work well for instance
retrieval and texture recognition . Namely,
the output of the last convolutional layer is a H × W × D
map which can be considered as a set of D-dimensional descriptors extracted at H × W spatial locations. For step
(ii) we design a new pooling layer inspired by the Vector
of Locally Aggregated Descriptors (VLAD) that pools
extracted descriptors into a ﬁxed image representation and
its parameters are learnable via back-propagation. We call
this new pooling layer “NetVLAD” layer and describe it in
the next section.
3.1. NetVLAD: A Generalized VLAD layer (fV LAD)
Vector of Locally Aggregated Descriptors (VLAD) 
is a popular descriptor pooling method for both instance
level retrieval and image classiﬁcation . It captures
information about the statistics of local descriptors aggregated over the image. Whereas bag-of-visual-words aggregation keeps counts of visual words, VLAD stores
the sum of residuals (difference vector between the descriptor and its corresponding cluster centre) for each visual
Formally, given N D-dimensional local image descriptors {xi} as input, and K cluster centres (“visual words”)
{ck} as VLAD parameters, the output VLAD image representation V is K×D-dimensional. For convenience we will
write V as a K ×D matrix, but this matrix is converted into
a vector and, after normalization, used as the image representation. The (j, k) element of V is computed as follows:
V (j, k) =
ak(xi) (xi(j) −ck(j)) ,
where xi(j) and ck(j) are the j-th dimensions of the i-th
descriptor and k-th cluster centre, respectively. ak(xi) denotes the membership of the descriptor xi to k-th visual
word, i.e. it is 1 if cluster ck is the closest cluster to descriptor xi and 0 otherwise. Intuitively, each D-dimensional
column k of V records the sum of residuals (xi −ck) of descriptors which are assigned to cluster ck. The matrix V is
then L2-normalized column-wise (intra-normalization ),
converted into a vector, and ﬁnally L2-normalized in its entirety .
In order to proﬁt from years of wisdom produced in
image retrieval, we propose to mimic VLAD in a CNN
framework and design a trainable generalized VLAD layer,
NetVLAD. The result is a powerful image representation
trainable end-to-end on the target task (in our case place
recognition). To construct a layer amenable to training via
backpropagation, it is required that the layer’s operation is
differentiable with respect to all its parameters and the input. Hence, the key challenge is to make the VLAD pooling
differentiable, which we describe next.
The source of discontinuities in VLAD is the hard assignment ak(xi) of descriptors xi to clusters centres ck. To
make this operation differentiable, we replace it with soft
assignment of descriptors to multiple clusters
e−α∥xi−ck∥2
k′ e−α∥xi−ck′∥2 ,
which assigns the weight of descriptor xi to cluster ck proportional to their proximity, but relative to proximities to
conv (w,b)
VLAD core (c)
intranormalization
normalization
soft-assignment
NetVLAD layer
Convolutional Neural Network
WxHxD map interpreted as
NxD local descriptors x
CNN architecture with the NetVLAD layer. The layer can be implemented using standard CNN layers (convolutions,
softmax, L2-normalization) and one easy-to-implement aggregation layer to perform aggregation in equation (4) (“VLAD core”), joined
up in a directed acyclic graph. Parameters are shown in brackets.
other cluster centres. ¯ak(xi) ranges between 0 and 1, with
the highest weight assigned to the closest cluster centre. α is
a parameter (positive constant) that controls the decay of the
response with the magnitude of the distance. Note that for
α →+∞this setup replicates the original VLAD exactly
as ¯ak(xi) for the closest cluster would be 1 and 0 otherwise.
By expanding the squares in (2), it is easy to see that
the term e−α∥xi∥2 cancels between the numerator and the
denominator resulting in a soft-assignment of the following
k′xi+bk′ ,
where vector wk = 2αck and scalar bk = −α∥ck∥2. The
ﬁnal form of the NetVLAD layer is obtained by plugging
the soft-assignment (3) into the VLAD descriptor (1) resulting in
V (j, k) =
k′xi+bk′ (xi(j) −ck(j)) ,
where {wk}, {bk} and {ck} are sets of trainable parameters
for each cluster k. Similarly to the original VLAD descriptor, the NetVLAD layer aggregates the ﬁrst order statistics
of residuals (xi −ck) in different parts of the descriptor
space weighted by the soft-assignment ¯ak(xi) of descriptor xi to cluster k. Note however, that the NetVLAD layer
has three independent sets of parameters {wk}, {bk} and
{ck}, compared to just {ck} of the original VLAD. This
enables greater ﬂexibility than the original VLAD, as explained in ﬁgure 3. Decoupling {wk, bk} from {ck} has
been proposed in as a means to adapt the VLAD to a
new dataset. All parameters of NetVLAD are learnt for the
speciﬁc task in an end-to-end manner.
As illustrated in ﬁgure 2 the NetVLAD layer can be visualized as a meta-layer that is further decomposed into basic CNN layers connected up in a directed acyclic graph.
First, note that the ﬁrst term in eq. (4) is a soft-max function σk(z) =
k′ exp(zk′). Therefore, the soft-assignment
of the input array of descriptors xi into K clusters can be
seen as a two step process: (i) a convolution with a set of K
ﬁlters {wk} that have spatial support 1×1 and biases {bk},
Beneﬁts of supervised VLAD. Red and green circles are local descriptors from two different images, assigned to
the same cluster (Voronoi cell). Under the VLAD encoding, their
contribution to the similarity score between the two images is the
scalar product (as ﬁnal VLAD vectors are L2-normalized) between
the corresponding residuals, where a residual vector is computed
as the difference between the descriptor and the cluster’s anchor
point. The anchor point ck can be interpreted as the origin of a
new coordinate system local to the the speciﬁc cluster k. In standard VLAD, the anchor is chosen as the cluster centre (×) in order
to evenly distribute the residuals across the database. However, in
a supervised setting where the two descriptors are known to belong to images which should not match, it is possible to learn a
better anchor (⋆) which causes the scalar product between the new
residuals to be small.
producing the output sk(xi) = wT
k xi + bk; (ii) the convolution output is then passed through the soft-max function
σk to obtain the ﬁnal soft-assignment ¯ak(xi) that weights
the different terms in the aggregation layer that implements
eq. (4). The output after normalization is a (K × D) × 1
descriptor.
Relations to other methods. Other works have proposed to
pool CNN activations using VLAD or Fisher Vectors (FV)
 , but do not learn the VLAD/FV parameters nor the
input descriptors. The most related method to ours is the
one of Sydorov et al. , which proposes to learn FV parameters jointly with an SVM for the end classiﬁcation objective. However, in their work it is not possible to learn the
input descriptors as they are hand-engineered (SIFT), while
our VLAD layer is easily pluggable into any CNN architecture as it is amenable to backpropagation. “Fisher Networks” stack Fisher Vector layers on top of each other,
but the system is not trained end-to-end, only hand-crafted
features are used, and the layers are trained greedily in a
bottom-up fashion. Finally, our architecture is also related
to bilinear networks , recently developed for a different
Google Street View Time Machine examples. Each
column shows perspective images generated from panoramas from
nearby locations, taken at different times. A well designed method
can use this source of imagery to learn to be invariant to changes
in viewpoint and lighting (a-c), and to moderate occlusions (b).
It can also learn to suppress confusing visual information such as
clouds (a), vehicles and people (b-c), and to chose to either ignore
vegetation or to learn a season-invariant vegetation representation
(a-c). More examples are given in appendix B.
task of ﬁne-grained category-level recognition.
Max pooling (fmax).
We also experiment with Maxpooling of the D-dimensional features across the H × W
spatial locations, thus producing a D-dimensional output
vector, which is then L2-normalized. Both of these operations can be implemented using standard layers in public
CNN packages. This setup mirrors the method of ,
but a crucial difference is that we will learn the representation (section 4) while only use pretrained networks. Results will show (section 5.2) that simply using
CNNs off-the-shelf results in poor performance, and
that training for the end-task is crucial. Additionally, VLAD
will prove itself to be superior to the Max-pooling baseline.
4. Learning from Time Machine data
In the previous section we have designed a new CNN architecture as an image representation for place recognition.
Here we describe how to learn its parameters in an end-toend manner for the place recognition task. The two main
challenges are: (i) how to gather enough annotated training
data and (ii) what is the appropriate loss for the place recognition task. To address theses issues, we will ﬁrst show that
it is possible to obtain large amounts of weakly labelled imagery depicting the same places over time from the Google
Street View Time Machine. Second, we will design a new
weakly supervised triplet ranking loss that can deal with
the incomplete and noisy position annotations of the Street
View Time Machine imagery. The details are below.
Weak supervision from the Time Machine. We propose
to exploit a new source of data – Google Street View Time
Machine – which provides multiple street-level panoramic
images taken at different times at close-by spatial locations
on the map. As will be seen in section 5.2, this novel data
source is precious for learning an image representation for
place recognition. As shown in ﬁgure 4, the same locations are depicted at different times and seasons, providing
the learning algorithm with crucial information it can use to
discover which features are useful or distracting, and what
changes should the image representation be invariant to, in
order to achieve good place recognition performance.
The downside of the Time Machine imagery is that it
provides only incomplete and noisy supervision. Each Time
Machine panorama comes with a GPS tag giving only its approximate location on the map, which can be used to identify close-by panoramas but does not provide correspondences between parts of the depicted scenes. In detail, as
the test queries are perspective images from camera phones,
each panorama is represented by a set of perspective images
sampled evenly in different orientations and two elevation
angles . Each perspective image is labelled
with the GPS position of the source panorama. As a result,
two geographically close perspective images do not necessarily depict the same objects since they could be facing different directions or occlusions could take place (e.g. the two
images are around a corner from each other), etc. Therefore, for a given training query q, the GPS information can
only be used as a source of (i) potential positives {pq
images that are geographically close to the query, and (ii)
deﬁnite negatives {nq
j}, i.e. images that are geographically
far from the query.1
Weakly supervised triplet ranking loss. We wish to learn
a representation fθ that will optimize place recognition performance. That is, for a given test query image q, the goal
is to rank a database image Ii∗from a close-by location
higher than all other far away images Ii in the database. In
other words, we wish the Euclidean distance dθ(q, I) between the query q and a close-by image Ii∗to be smaller
than the distance to far away images in the database Ii, i.e.
dθ(q, Ii∗) < dθ(q, Ii), for all images Ii further than a certain distance from the query on the map. Next we show
how this requirement can be translated into a ranking loss
between training triplets {q, Ii∗, Ii}.
From the Google Street View Time Machine data, we
obtain a training dataset of tuples (q, {pq
j}), where
for each training query image q we have a set of potential
positives {pq
i } and the set of deﬁnite negatives {nq
1Note that even faraway images can depict the same object. For example, the Eiffel Tower can be visible from two faraway locations in Paris.
But, for the purpose of localization we consider in this paper such image
pairs as negative examples because they are not taken from the same place.
set of potential positives contains at least one positive image
that should match the query, but we do not know which one.
To address this ambiguity, we propose to identify the best
matching potential positive image pq
i∗= argmin
for each training tuple (q, {pq
j}). The goal then becomes to learn an image representation fθ so that distance dθ(q, pq
i∗) between the training query q and the best
matching potential positive pq
i∗is smaller than the distance
j) between the query q and all negative images qj:
i∗) < dθ(q, nq
Based on this intuition we deﬁne a weakly supervised ranking loss Lθ for a training tuple (q, {pq
i ) + m −d2
where l is the hinge loss l(x) = max(x, 0), and m is a constant parameter giving the margin. Note that equation (7) is
a sum of individual losses for negative images nq
j. For each
negative, the loss l is zero if the distance between the query
and the negative is greater by a margin than the distance between the query and the best matching positive. Conversely,
if the margin between the distance to the negative image and
to the best matching positive is violated, the loss is proportional to the amount of violation. Note that the above loss
is related to the commonly used triplet loss ,
but adapted to our weakly supervised scenario using a formulation (given by equation (5)) similar to multiple instance
learning .
We train the parameters θ of the representation fθ using
Stochastic Gradient Descent (SGD) on a large set of training tuples from Time Machine data. Details of the training
procedure are given in appendix A.
5. Experiments
In this section we describe the used datasets and evaluation methodology (section 5.1), and give quantitative (section 5.2) and qualitative (section 5.3) results to validate our
approach. Finally, we also test the method on the standard
image retrieval benchmarks (section 5.4).
5.1. Datasets and evaluation methodology
We report results on two publicly available datasets.
Pittsburgh (Pitts250k) contains 250k database images
downloaded from Google Street View and 24k test queries
generated from Street View but taken at different times,
years apart. We divide this dataset into three roughly equal
parts for training, validation and testing, each containing
around 83k database images and 8k queries, where the division was done geographically to ensure the sets contain
independent images. To facilitate faster training, for some
experiments, a smaller subset (Pitts30k) is used, containing 10k database images in each of the train/val(idation)/test
sets, which are also geographically disjoint.
Tokyo 24/7 contains 76k database images and 315
query images taken using mobile phone cameras. This is an
extremely challenging dataset where the queries were taken
at daytime, sunset and night, while the database images
were only taken at daytime as they originate from Google
Street View as described above. To form the train/val sets
we collected additional Google Street View panoramas of
Tokyo using the Time Machine feature, and name this set
TokyoTM; Tokyo 24/7 (=test) and TokyoTM train/val are
all geographically disjoint. Further details on the splits are
given in appendix B.
Evaluation metric. We follow the standard place recognition evaluation procedure . The query
image is deemed correctly localized if at least one of the top
N retrieved database images is within d = 25 meters from
the ground truth position of the query. The percentage of
correctly recognized queries (Recall) is then plotted for different values of N. For Tokyo 24/7 we follow and perform spatial non-maximal suppression on ranked database
images before evaluation.
Implementation details. We use two base architectures
which are extended with Max pooling (fmax) and our
NetVLAD (fV LAD) layers: AlexNet and VGG-16
 ; both are cropped at the last convolutional layer
(conv5), before ReLU. For NetVLAD we use K = 64 resulting in 16k and 32k-D image representations for the two
base architectures, respectively. The initialization procedure, parameters used for training, procedure for sampling
training tuples and other implementation details are given
in appendix A. All training and evaluation code, as well as
our trained networks, are online at .
5.2. Results and discussion
Baselines and state-of-the-art. To assess beneﬁts of our
approach we compare our representations trained for place
recognition against “off-the-shelf” networks pretrained on
other tasks.
Namely, given a base network cropped at
conv5, the baselines either use Max pooling (fmax), or aggregate the descriptors into VLAD (fV LAD), but perform
no further task-speciﬁc training. The three base networks
are: AlexNet , VGG-16 , both are pretrained for
ImageNet classiﬁcation , and Places205 , reusing
the same architecture as AlexNet but pretrained for scene
classiﬁcation . Pretrained networks have been recently
used as off-the-shelf dense descriptor extractors for instance
retrieval and the untrained fmax network
corresponds to the method of .
f VLAD ours (V)+white
f VLAD ours (V)
f VLAD ours (A)+white
f VLAD ours (A)
f max ours (V)
f max ours (A)
Torii et al. CVPR15 
RootSIFT+VLAD+white
RootSIFT+VLAD
f VLAD VGG-16 (V)
f VLAD AlexNet (A)
f VLAD Places205 (A)
f max VGG-16 (V)
f max AlexNet (A) 
f max Places205 (A)
N - Number of top database candidates
Recall@N (%)
(a) Pitts250k-test
N - Number of top database candidates
Recall@N (%)
(b) TokyoTM-val
N - Number of top database candidates
Recall@N (%)
(c) Tokyo 24/7 all queries
N - Number of top database candidates
Recall@N (%)
(d) Tokyo 24/7 sunset/night
Comparison of our methods versus off-the-shelf networks and state-of-the-art. The base CNN architecture is denoted in
brackets: (A)lexNet and (V)GG-16. Trained representations (red and magenta for AlexNet and VGG-16) outperform by a large margin offthe-shelf ones (blue, cyan, green for AlexNet, Places205, VGG-16), fV LAD (-o-) works better than fmax (-x-), and our fV LAD+whitening
(-∗-) representation based on VGG-16 sets the state-of-the-art on all datasets. only evaluated on Tokyo 24/7 as the method relies on
depth data not available in other datasets. Additional results are shown in appendix C.
Furthermore we compare our CNN representations
trained for place recognition against the state-of-the-art local feature based compact descriptor, which consists of
VLAD pooling with intra-normalization on top
of densely extracted RootSIFTs .
The descriptor is optionally reduced to 4096 dimensions using PCA
(learnt on the training set) combined with whitening and
L2-normalization ; this setup together with view synthesis yields the state-of-the-art results on the challenging
Tokyo 24/7 dataset (c.f. ).
In the following we discuss ﬁgure 5, which compares
place recognition performance of our method to the baselines outlined above on the Pittsburgh and Tokyo 24/7
benchmarks.
Dimensionality reduction. We follow the standard stateof-the-art procedure to perform dimensionality reduction of
VLAD, as described earlier, i.e. the reduction into 4096-D
is performed using PCA with whitening followed by L2normalization . Figure 5 shows that the lower dimensional fV LAD (-∗-) performs similarly to the full size
vector (-o-).
Beneﬁts of end-to-end training for place recognition.
Representations trained on the end-task of place recognition consistently outperform by a large margin off-theshelf CNNs on both benchmarks.
For example, on the
Pitts250k-test our trained AlexNet with (trained) NetVLAD
aggregation layer achieves recall@1 of 81.0% compared to
only 55.0% obtained by off-the-shelf AlexNet with standard VLAD aggregation, i.e. a relative improvement in recall of 47%.
Similar improvements can be observed on
all three datasets. This conﬁrms two important premises
of this work: (i) our approach can learn rich yet compact
image representations for place recognition, and (ii) the
popular idea of using pretrained networks “off-the-shelf”
 is sub-optimal as the networks trained for
object or scene classiﬁcation are not necessary suitable for
the end-task of place recognition. We believe this could be
attributed to the fact that “off-the-shelf ” conv5 activations
are not trained to be comparable using Euclidean distance.
Comparison with state-of-the-art. Figure 5 also shows
that our trained fV LAD representation with whitening based
on VGG-16 (magenta -∗-) convincingly outperforms Root-
SIFT+VLAD+whitening, as well as the method of Torii et
al. , and therefore sets the state-of-the-art for compact
descriptors on all benchmarks. Note that these are strong
baselines that outperform most off-the-shelf CNN descriptors on the place recognition task.
VLAD versus Max.
By comparing fV LAD (-o-) methods with their corresponding fmax (-x-) counterparts it
is clear that VLAD pooling is much better than Max
pooling for both off-the-shelf and trained representations.
NetVLAD performance decreases gracefully with dimensionality: 128-D NetVLAD performs similarly to 512-D
Max (42.9% vs 38.4% recall@1 on Tokyo 24/7), resulting
in four times more compact representation for the same performance. Furthermore, NetVLAD+whitening outperforms
Max pooling convincingly when reduced to the same dimensionality (60%). See appendix C for more details.
Which layers should be trained? In Table 1 we study the
beneﬁts of training different layers for the end-task of place
recognition. The largest improvements are thanks to training the NetVLAD layer, but training other layers results in
further improvements, with some overﬁtting occurring below conv2.
Importance of Time Machine training. Here we examine
whether the network can be trained without the Time Machine (TM) data. In detail, we have modiﬁed the training
query set for Pitts30k-train to be sampled from the same
set as the training database images, i.e. the tuples of query
and database images used in training were captured at the
same time. Recall@1 with fmax on Pitts30k-val for the offthe-shelf AlexNet is 33.5%, and training without TM im-
Lowest trained
r@1 r@5 r@10
r@1 r@5 r@10
none (off-the-shelf)
conv1 (full)
Table 1. Partial training. Effects of performing backpropagation
only down to a certain layer of AlexNet, e.g. ‘conv4’ means that
weights of layers from conv4 and above are learnt, while weights
of layers below conv4 are ﬁxed to their pretrained state; r@N signiﬁes recall@N. Results are shown on the Pitts30k-val dataset.
What has been learnt? Each column corresponds
to one image (top row) and the emphasis various networks (under
fmax) give to different patches. Each pixel in the heatmap corresponds to the change in representation when a large gray occluding
square (100 × 100) is placed over the image in the same position;
all heatmaps have the same colour scale. Note that the original
image and the heatmaps are not in perfect alignment as nearby
patches overlap 50% and patches touching an image edge are discarded to prevent border effects. All images are from Pitts250kval that the network hasn’t seen at training. Further examples are
given in appendix C.
proves this to 38.7%. However, training with TM obtains
68.5% showing that Time Machine data is crucial for good
place recognition accuracy as without it the network does
not generalize well. The network learns, for example, that
recognizing cars is important for place recognition, as the
same parked cars appear in all images of a place.
5.3. Qualitative evaluation
To visualize what is being learnt by our place recognition architectures, we adapt the method of Zeiler and Fergus for examining occlusion sensitivity of classiﬁcation networks. It can be seen in ﬁgure 6 that off-the-shelf
AlexNet (pretrained on ImageNet) focuses very much on
categories it has been trained to recognize (e.g. cars) and
certain shapes, such as circular blobs useful for distinguishing 12 different ball types in the ImageNet categories. The
Place205 network is fairly unresponsive to all occlusions as
it does not aim to recognize speciﬁc places but scene-level
categories, so even if an important part of the image is occluded, such as a characteristic part of a building fac¸ade,
it still provides a similar output feature which corresponds
to an uninformative “a building fac¸ade” image descriptor.
In contrast to these two, our network trained for speciﬁc
place recognition automatically learns to ignore confusing
features, such as cars and people, which are not discriminative for speciﬁc locations, and instead focuses on describing
building fac¸ades and skylines. More qualitative examples
are provided in appendix C.
5.4. Image retrieval
We use our best performing network (VGG-16, fV LAD
with whitening down to 256-D) trained completely on Pittsburgh, to extract image representations for standard object
and image retrieval benchmarks. Our representation sets the
state-of-the-art for compact image representations (256-D)
by a large margin on all three datasets, obtaining an mAP of
63.5%, 73.5% and 79.9% on Oxford 5k , Paris 6k ,
Holidays , respectively; for example, this is a +20%
relative improvement on Oxford 5k. Appendix C contains
more detailed results.
6. Conclusions
We have designed a new convolutional neural network
architecture that is trained for place recognition in an endto-end manner from weakly supervised Street View Time
Machine data. Our trained representation signiﬁcantly outperforms off-the-shelf CNN models and signiﬁcantly improves over the state-of-the-art on the challenging 24/7
Tokyo dataset, as well as on the Oxford and Paris image retrieval benchmarks. The two main components of our architecture – (i) the NetVLAD pooling layer and (ii) weakly supervised ranking loss – are generic CNN building blocks applicable beyond the place recognition task. The NetVLAD
layer offers a powerful pooling mechanism with learnable
parameters that can be easily plugged into any other CNN
architecture. The weakly supervised ranking loss opens up
the possibility of end-to-end learning for other ranking tasks
where large amounts of weakly labelled data are available,
for example, images described with natural language .
Acknowledgements. This work was partly supported by RVO13000 -
Conceptual development of research organization, the ERC grant LEAP
(no. 336845), ANR project Semapolis (ANR-13-CORD-0003), JSPS
KAKENHI Grant Number 15H05313, the Inria CityLab IPL, and the Intelligence Advanced Research Projects Activity (IARPA) via Air Force Research Laboratory, contract FA8650-12-C-7212. The U.S. Government is
authorized to reproduce and distribute reprints for Governmental purposes
notwithstanding any copyright annotation thereon. Disclaimer: The views
and conclusions contained herein are those of the authors and should not
be interpreted as necessarily representing the ofﬁcial policies or endorsements, either expressed or implied, of IARPA, AFRL, or the U.S. Government.