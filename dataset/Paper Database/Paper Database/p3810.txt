Training data-efﬁcient image transformers
& distillation through attention
Hugo Touvron⋆,†
Matthieu Cord†
Matthijs Douze⋆
Francisco Massa⋆
Alexandre Sablayrolles⋆
Herv´e J´egou⋆
⋆Facebook AI
†Sorbonne University
Recently, neural networks purely based on attention were shown to address image understanding tasks such as image classiﬁcation. These highperforming vision transformers are pre-trained with hundreds of millions
of images using a large infrastructure, thereby limiting their adoption.
In this work, we produce competitive convolution-free transformers by
training on Imagenet only. We train them on a single computer in less than
3 days. Our reference vision transformer (86M parameters) achieves top-1
accuracy of 83.1% (single-crop) on ImageNet with no external data.
More importantly, we introduce a teacher-student strategy speciﬁc to
transformers.
It relies on a distillation token ensuring that the student
learns from the teacher through attention. We show the interest of this
token-based distillation, especially when using a convnet as a teacher. This
leads us to report results competitive with convnets for both Imagenet
(where we obtain up to 85.2% accuracy) and when transferring to other
tasks. We share our code and models.
Introduction
Convolutional neural networks have been the main design paradigm for image
understanding tasks, as initially demonstrated on image classiﬁcation tasks.
One of the ingredient to their success was the availability of a large training set,
namely Imagenet . Motivated by the success of attention-based models in Natural Language Processing , there has been increasing interest
in architectures leveraging attention mechanisms within convnets .
More recently several researchers have proposed hybrid architecture transplanting transformer ingredients to convnets to solve vision tasks .
The vision transformer (ViT) introduced by Dosovitskiy et al. is an architecture directly inherited from Natural Language Processing , but ap-
 
Figure 1: Throughput and accuracy on Imagenet of our methods compared to
EfﬁcientNets, trained on Imagenet1k only. The throughput is measured as the
number of images processed per second on a V100 GPU. DeiT-B is identical to
VIT-B, but the training is more adapted to a data-starving regime. It is learned
in a few days on one machine. The symbol ⚗refers to models trained with our
transformer-speciﬁc distillation. See Table 5 for details and more models.
plied to image classiﬁcation with raw image patches as input. Their paper presented excellent results with transformers trained with a large private labelled
image dataset (JFT-300M , 300 millions images). The paper concluded that
transformers “do not generalize well when trained on insufﬁcient amounts of data”,
and the training of these models involved extensive computing resources.
In this paper, we train a vision transformer on a single 8-GPU node in two
to three days (53 hours of pre-training, and optionally 20 hours of ﬁne-tuning)
that is competitive with convnets having a similar number of parameters and
efﬁciency. It uses Imagenet as the sole training set. We build upon the visual transformer architecture from Dosovitskiy et al. and improvements
included in the timm library . With our Data-efﬁcient image Transformers
(DeiT), we report large improvements over previous results, see Figure 1. Our
ablation study details the hyper-parameters and key ingredients for a successful training, such as repeated augmentation.
We address another question: how to distill these models? We introduce
a token-based strategy, speciﬁc to transformers and denoted by DeiT⚗, and
show that it advantageously replaces the usual distillation.
In summary, our work makes the following contributions:
• We show that our neural networks that contains no convolutional layer
can achieve competitive results against the state of the art on ImageNet
with no external data. They are learned on a single node with 4 GPUs in
three days1. Our two new models DeiT-S and DeiT-Ti have fewer parameters and can be seen as the counterpart of ResNet-50 and ResNet-18.
• We introduce a new distillation procedure based on a distillation token,
which plays the same role as the class token, except that it aims at reproducing the label estimated by the teacher. Both tokens interact in the
transformer through attention. This transformer-speciﬁc strategy outperforms vanilla distillation by a signiﬁcant margin.
• Interestingly, with our distillation, image transformers learn more from a
convnet than from another transformer with comparable performance.
• Our models pre-learned on Imagenet are competitive when transferred to
different downstream tasks such as ﬁne-grained classiﬁcation, on several
popular public benchmarks: CIFAR-10, CIFAR-100, Oxford-102 ﬂowers,
Stanford Cars and iNaturalist-18/19.
This paper is organized as follows: we review related works in Section 2,
and focus on transformers for image classiﬁcation in Section 3. We introduce
our distillation strategy for transformers in Section 4. The experimental section 5 provides analysis and comparisons against both convnets and recent
transformers, as well as a comparative evaluation of our transformer-speciﬁc
distillation. Section 6 details our training scheme. It includes an extensive ablation of our data-efﬁcient training choices, which gives some insight on the
key ingredients involved in DeiT. We conclude in Section 7.
Related work
Image Classiﬁcation
is so core to computer vision that it is often used as a
benchmark to measure progress in image understanding. Any progress usually translates to improvement in other related tasks such as detection or segmentation. Since 2012’s AlexNet , convnets have dominated this benchmark and have become the de facto standard. The evolution of the state of the
art on the ImageNet dataset reﬂects the progress with convolutional neural
network architectures and learning .
Despite several attempts to use transformers for image classiﬁcation , until now their performance has been inferior to that of convnets. Nevertheless
hybrid architectures that combine convnets and transformers, including the
self-attention mechanism, have recently exhibited competitive results in image
classiﬁcation , detection , video processing , unsupervised object discovery , and uniﬁed text-vision tasks .
1We can accelerate the learning of the larger model DeiT-B by training it on 8 GPUs in two days.
Recently Vision transformers (ViT) closed the gap with the state of the
art on ImageNet, without using any convolution. This performance is remarkable since convnet methods for image classiﬁcation have beneﬁted from years
of tuning and optimization . Nevertheless, according to this study ,
a pre-training phase on a large volume of curated data is required for the
learned transformer to be effective. In our paper we achieve a strong performance without requiring a large training dataset, i.e., with Imagenet1k only.
The Transformer architecture,
introduced by Vaswani et al. for machine
translation are currently the reference model for all natural language processing (NLP) tasks. Many improvements of convnets for image classiﬁcation are
inspired by transformers. For example, Squeeze and Excitation , Selective
Kernel and Split-Attention Networks exploit mechanism akin to transformers self-attention (SA) mechanism.
Knowledge Distillation
(KD), introduced by Hinton et al. , refers to the
training paradigm in which a student model leverages “soft” labels coming
from a strong teacher network. This is the output vector of the teacher’s softmax
function rather than just the maximum of scores, wich gives a “hard” label.
Such a training improves the performance of the student model (alternatively,
it can be regarded as a form of compression of the teacher model into a smaller
one – the student). On the one hand the teacher’s soft labels will have a similar
effect to labels smoothing . On the other hand as shown by Wei et al. 
the teacher’s supervision takes into account the effects of the data augmentation, which sometimes causes a misalignment between the real label and the
image. For example, let us consider image with a “cat” label that represents a
large landscape and a small cat in a corner. If the cat is no longer on the crop
of the data augmentation it implicitly changes the label of the image. KD can
transfer inductive biases in a soft way in a student model using a teacher
model where they would be incorporated in a hard way. For example, it may
be useful to induce biases due to convolutions in a transformer model by using
a convolutional model as teacher. In our paper we study the distillation of a
transformer student by either a convnet or a transformer teacher. We introduce
a new distillation procedure speciﬁc to transformers and show its superiority.
Vision transformer: overview
In this section, we brieﬂy recall preliminaries associated with the vision transformer , and further discuss positional encoding and resolution.
Multi-head Self Attention layers (MSA).
The attention mechanism is based
on a trainable associative memory with (key, value) vector pairs. A query vector
q ∈Rd is matched against a set of k key vectors (packed together into a matrix
K ∈Rk×d) using inner products. These inner products are then scaled and
normalized with a softmax function to obtain k weights. The output of the
attention is the weighted sum of a set of k value vectors (packed into V ∈Rk×d).
For a sequence of N query vectors (packed into Q ∈RN×d), it produces an
output matrix (of size N × d):
Attention(Q, K, V ) = Softmax(QK⊤/
where the Softmax function is applied over each row of the input matrix and
d term provides appropriate normalization.
In , a Self-attention layer is proposed.
Query, key and values matrices
are themselves computed from a sequence of N input vectors (packed into
X ∈RN×D): Q = XWQ, K = XWK, V = XWV, using linear transformations
WQ, WK, WV with the constraint k = N, meaning that the attention is in between all the input vectors.
Finally, Multi-head self-attention layer (MSA) is deﬁned by considering h attention “heads”, ie h self-attention functions applied to the input. Each head
provides a sequence of size N × d. These h sequences are rearranged into a
N × dh sequence that is reprojected by a linear layer into N × D.
Transformer block for images.
To get a full transformer block as in , we
add a Feed-Forward Network (FFN) on top of the MSA layer. This FFN is
composed of two linear layers separated by a GeLu activation . The ﬁrst
linear layer expands the dimension from D to 4D, and the second layer reduces
the dimension from 4D back to D. Both MSA and FFN are operating as residual
operators thank to skip-connections, and with a layer normalization .
In order to get a transformer to process images, our work builds upon the
ViT model . It is a simple and elegant architecture that processes input
images as if they were a sequence of input tokens. The ﬁxed-size input RGB
image is decomposed into a batch of N patches of a ﬁxed size of 16 × 16 pixels
(N = 14 × 14). Each patch is projected with a linear layer that conserves its
overall dimension 3 × 16 × 16 = 768.
The transformer block described above is invariant to the order of the patch
embeddings, and thus does not consider their relative position. The positional
information is incorporated as ﬁxed or trainable positional embeddings. They are added before the ﬁrst transformer block to the patch tokens,
which are then fed to the stack of transformer blocks.
The class token
is a trainable vector, appended to the patch tokens before the
ﬁrst layer, that goes through the transformer layers, and is then projected with
a linear layer to predict the class. This class token is inherited from NLP ,
and departs from the typical pooling layers used in computer vision to predict
the class. The transformer thus process batches of (N + 1) tokens of dimension
D, of which only the class vector is used to predict the output. This architecture
forces the self-attention to spread information between the patch tokens and
the class token: at training time the supervision signal comes only from the
class embedding, while the patch tokens are the model’s only variable input.
Fixing the positional encoding across resolutions.
Touvron et al. show
that it is desirable to use a lower training resolution and ﬁne-tune the network
at the larger resolution. This speeds up the full training and improves the accuracy under prevailing data augmentation schemes. When increasing the resolution of an input image, we keep the patch size the same, therefore the number
N of input patches does change. Due to the architecture of transformer blocks
and the class token, the model and classiﬁer do not need to be modiﬁed to process more tokens. In contrast, one needs to adapt the positional embeddings,
because there are N of them, one for each patch. Dosovitskiy et al. interpolate the positional encoding when changing the resolution and demonstrate
that this method works with the subsequent ﬁne-tuning stage.
Distillation through attention
In this section we assume we have access to a strong image classiﬁer as a
teacher model. It could be a convnet, or a mixture of classiﬁers. We address
the question of how to learn a transformer by exploiting this teacher. As we
will see in Section 5 by comparing the trade-off between accuracy and image
throughput, it can be beneﬁcial to replace a convolutional neural network by
a transformer. This section covers two axes of distillation: hard distillation
versus soft distillation, and classical distillation versus the distillation token.
Soft distillation
 minimizes the Kullback-Leibler divergence between
the softmax of the teacher and the softmax of the student model.
Let Zt be the logits of the teacher model, Zs the logits of the student model.
We denote by τ the temperature for the distillation, λ the coefﬁcient balancing the Kullback–Leibler divergence loss (KL) and the cross-entropy (LCE) on
ground truth labels y, and ψ the softmax function. The distillation objective is
Lglobal = (1 −λ)LCE(ψ(Zs), y) + λτ 2KL(ψ(Zs/τ), ψ(Zt/τ)).
Hard-label distillation.
We introduce a variant of distillation where we take
the hard decision of the teacher as a true label. Let yt = argmaxcZt(c) be the
hard decision of the teacher, the objective associated with this hard-label distillation is:
LhardDistill
2LCE(ψ(Zs), y) + 1
2LCE(ψ(Zs), yt).
For a given image, the hard label associated with the teacher may change
depending on the speciﬁc data augmentation. We will see that this choice is
better than the traditional one, while being parameter-free and conceptually
simpler: The teacher prediction yt plays the same role as the true label y.
Note also that the hard labels can also be converted into soft labels with
label smoothing , where the true label is considered to have a probability
of 1 −ε, and the remaining ε is shared across the remaining classes. We ﬁx this
parameter to ε = 0.1 in our all experiments that use true labels.
self-attention
distillation
Figure 2: Our distillation procedure: we simply include a new distillation token.
It interacts with the class and patch tokens through the self-attention layers.
This distillation token is employed in a similar fashion as the class token, except that on output of the network its objective is to reproduce the (hard) label
predicted by the teacher, instead of true label. Both the class and distillation
tokens input to the transformers are learned by back-propagation.
Distillation token.
We now focus on our proposal, which is illustrated in
Figure 2. We add a new token, the distillation token, to the initial embeddings
(patches and class token). Our distillation token is used similarly as the class
token: it interacts with other embeddings through self-attention, and is output
by the network after the last layer. Its target objective is given by the distillation
component of the loss. The distillation embedding allows our model to learn
from the output of the teacher, as in a regular distillation, while remaining
complementary to the class embedding.
Interestingly, we observe that the learned class and distillation tokens converge towards different vectors: the average cosine similarity between these
tokens equal to 0.06. As the class and distillation embeddings are computed
at each layer, they gradually become more similar through the network, all the
way through the last layer at which their similarity is high (cos=0.93), but still
lower than 1. This is expected since as they aim at producing targets that are
similar but not identical.
We veriﬁed that our distillation token adds something to the model, compared to simply adding an additional class token associated with the same target label: instead of a teacher pseudo-label, we experimented with a transformer with two class tokens. Even if we initialize them randomly and independently, during training they converge towards the same vector (cos=0.999),
and the output embedding are also quasi-identical. This additional class token
does not bring anything to the classiﬁcation performance. In contrast, our distillation strategy provides a signiﬁcant improvement over a vanilla distillation
baseline, as validated by our experiments in Section 5.2.
Fine-tuning with distillation.
We use both the true label and teacher prediction during the ﬁne-tuning stage at higher resolution. We use a teacher with the
same target resolution, typically obtained from the lower-resolution teacher by
the method of Touvron et al . We have also tested with true labels only but
this reduces the beneﬁt of the teacher and leads to a lower performance.
Classiﬁcation with our approach: joint classiﬁers.
At test time, both the
class or the distillation embeddings produced by the transformer are associated with linear classiﬁers and able to infer the image label. Yet our referent
method is the late fusion of these two separate heads, for which we add the
softmax output by the two classiﬁers to make the prediction. We evaluate these
three options in Section 5.
Experiments
This section presents a few analytical experiments and results. We ﬁrst discuss
our distillation strategy. Then we comparatively analyze the efﬁciency and
accuracy of convnets and vision transformers.
Transformer models
As mentioned earlier, our architecture design is identical to the one proposed
by Dosovitskiy et al. with no convolutions. Our only differences are the
training strategies, and the distillation token. Also we do not use a MLP head
for the pre-training but only a linear classiﬁer. To avoid any confusion, we refer
to the results obtained in the prior work by ViT, and preﬁx ours by DeiT. If not
speciﬁed, DeiT refers to our referent model DeiT-B, which has the same architecture as ViT-B. When we ﬁne-tune DeiT at a larger resolution, we append the
resulting operating resolution at the end, e.g, DeiT-B↑384. Last, when using
our distillation procedure, we identify it with an alembic sign as DeiT⚗.
The parameters of ViT-B (and therefore of DeiT-B) are ﬁxed as D = 768,
h = 12 and d = D/h = 64. We introduce two smaller models, namely DeiT-S
and DeiT-Ti, for which we change the number of heads, keeping d ﬁxed. Table 1
summarizes the models that we consider in our paper.
Table 1: Variants of our DeiT architecture. The larger model, DeiT-B, has the
same architecture as the ViT-B . The only parameters that vary across models are the embedding dimension and the number of heads, and we keep the
dimension per head constant (equal to 64). Smaller models have a lower parameter count, and a faster throughput. The throughput is measured for images at resolution 224×224.
throughput
resolution
Table 2: We compare on ImageNet the performance (top-1 acc., %) of the
student as a function of the teacher model used for distillation.
Student: DeiT-B ⚗
RegNetY-4GF
RegNetY-8GF
RegNetY-12GF
RegNetY-16GF
Distillation
Our distillation method produces a vision transformer that becomes on par
with the best convnets in terms of the trade-off between accuracy and throughput, see Table 5. Interestingly, the distilled model outperforms its teacher in
terms of the trade-off between accuracy and throughput. Our best model on
ImageNet-1k is 85.2% top-1 accuracy outperforms the best Vit-B model pretrained on JFT-300M at resolution 384 (84.15%). For reference, the current state
of the art of 88.55% achieved with extra training data was obtained by the ViT-
H model (600M parameters) trained on JFT-300M at resolution 512. Hereafter
we provide several analysis and observations.
Convnets teachers.
We have observed that using a convnet teacher gives better performance than using a transformer. Table 2 compares distillation results
with different teacher architectures. The fact that the convnet is a better teacher
is probably due to the inductive bias inherited by the transformers through
distillation, as explained in Abnar et al. . In all of our subsequent distillation experiments the default teacher is a RegNetY-16GF (84M parameters)
that we trained with the same data and same data-augmentation as DeiT. This
teacher reaches 82.9% top-1 accuracy on ImageNet.
Table 3: Distillation experiments on Imagenet with DeiT, 300 epochs of pretraining. We report the results for our new distillation method in the last three
rows. We separately report the performance when classifying with only one of
the class or distillation embeddings, and then with a classiﬁer taking both of
them as input. In the last row (class+distillation), the result correspond to the
late fusion of the class and distillation classiﬁers.
Supervision
ImageNet top-1 (%)
DeiT– no distillation
DeiT– usual distillation
DeiT– hard distillation
DeiT⚗: class embedding
DeiT⚗: distil. embedding
DeiT⚗: class+distillation
Comparison of distillation methods.
We compare the performance of different distillation strategies in Table 3. Hard distillation signiﬁcantly outperforms
soft distillation for transformers, even when using only a class token: hard distillation reaches 83.0% at resolution 224×224, compared to the soft distillation
accuracy of 81.8%. Our distillation strategy from Section 4 further improves
the performance, showing that the two tokens provide complementary information useful for classiﬁcation: the classiﬁer on the two tokens is signiﬁcantly
better than the independent class and distillation classiﬁers, which by themselves already outperform the distillation baseline.
The distillation token gives slightly better results than the class token. It
is also more correlated to the convnets prediction. This difference in performance is probably due to the fact that it beneﬁts more from the inductive bias
of convnets. We give more details and an analysis in the next paragraph. The
distillation token has an undeniable advantage for the initial training.
Agreement with the teacher & inductive bias?
As discussed above, the architecture of the teacher has an important impact. Does it inherit existing inductive bias that would facilitate the training? While we believe it difﬁcult to
formally answer this question, we analyze in Table 4 the decision agreement
between the convnet teacher, our image transformer DeiT learned from labels
only, and our transformer DeiT⚗.
Our distilled model is more correlated to the convnet than with a transformer learned from scratch. As to be expected, the classiﬁer associated with
the distillation embedding is closer to the convnet that the one associated with
the class embedding, and conversely the one associated with the class embedding is more similar to DeiT learned without distillation. Unsurprisingly, the
joint class+distil classiﬁer offers a middle ground.
Table 4: Disagreement analysis between convnet, image transformers and distillated transformers: We report the fraction of sample classiﬁed differently for
all classiﬁer pairs, i.e., the rate of different decisions. We include two models
without distillation (a RegNetY and DeiT-B), so that we can compare how our
distilled models and classiﬁcation heads are correlated to these teachers.
groundtruth
no distillation
DeiT⚗student (of the convnet)
distillation
groundtruth
convnet (RegNetY)
DeiT⚗– class only
DeiT⚗– distil. only
DeiT⚗– class+distil.
Number of epochs.
Increasing the number of epochs signiﬁcantly improves
the performance of training with distillation, see Figure 3. With 300 epochs,
our distilled network DeiT-B⚗is already better than DeiT-B. But while for the
latter the performance saturates with longer schedules, our distilled network
clearly beneﬁts from a longer training time.
Efﬁciency vs accuracy: a comparative study with convnets
In the literature, the image classiﬁcaton methods are often compared as a compromise between accuracy and another criterion, such as FLOPs, number of
parameters, size of the network, etc.
We focus in Figure 1 on the tradeoff between the throughput (images processed per second) and the top-1 classiﬁcation accuracy on ImageNet. We focus
on the popular state-of-the-art EfﬁcientNet convnet, which has beneﬁted from
years of research on convnets and was optimized by architecture search on the
ImageNet validation set.
Our method DeiT is slightly below EfﬁcientNet, which shows that we have
almost closed the gap between vision transformers and convnets when training
with Imagenet only. These results are a major improvement (+6.3% top-1 in a
comparable setting) over previous ViT models trained on Imagenet1k only .
Furthermore, when DeiT beneﬁts from the distillation from a relatively weaker
RegNetY to produce DeiT⚗, it outperforms EfﬁcientNet. It also outperforms
by 1% (top-1 acc.) the Vit-B model pre-trained on JFT300M at resolution 384
(85.2% vs 84.15%), while being signiﬁcantly faster to train.
Table 5 reports the numerical results in more details and additional evaluations on ImageNet V2 and ImageNet Real, that have a test set distinct from
the ImageNet validation, which reduces overﬁtting on the validation set. Our
results show that DeiT-B⚗and DeiT-B⚗↑384 outperform, by some margin, the
state of the art on the trade-off between accuracy and inference time on GPU.
image throughput
ResNet-18 
ResNet-50 
ResNet-101 
ResNet-152 
RegNetY-4GF ⋆
RegNetY-8GF ⋆
RegNetY-16GF ⋆
EfﬁcientNet-B0 
EfﬁcientNet-B1 
EfﬁcientNet-B2 
EfﬁcientNet-B3 
EfﬁcientNet-B4 
EfﬁcientNet-B5 
EfﬁcientNet-B6 
EfﬁcientNet-B7 
EfﬁcientNet-B5 RA 
EfﬁcientNet-B7 RA 
KDforAA-B8
Transformers
ViT-B/16 
ViT-L/16 
DeiT-B↑384
DeiT-Ti⚗/ 1000 epochs
DeiT-S⚗/ 1000 epochs
DeiT-B⚗/ 1000 epochs
DeiT-B⚗↑384
DeiT-B⚗↑384 / 1000 epochs
Table 5: Throughput on and accuracy on Imagenet , Imagenet Real and
Imagenet V2 matched frequency of DeiT and of several state-of-the-art
convnets, for models trained with no external data. The throughput is measured as the number of images that we can process per second on one 16GB
V100 GPU. For each model we take the largest possible batch size for the usual
resolution of the model and calculate the average time over 30 runs to process
that batch. With that we calculate the number of images processed per second.
Throughput can vary according to the implementation: for a direct comparison
and in order to be as fair as possible, we use for each model the deﬁnition in
the same GitHub repository.
⋆: Regnet optimized with a similar optimization procedure as ours, which boosts the
results. These networks serve as teachers when we use our distillation strategy.
Figure 3: Distillation on ImageNet with DeiT-B: performance as a function of the number of training epochs. We provide the performance without
distillation (horizontal dotted line) as it saturates after 400 epochs.
Transfer learning: Performance on downstream tasks
Although DeiT perform very well on ImageNet it is important to evaluate them
on other datasets with transfer learning in order to measure the power of generalization of DeiT. We evaluated this on transfer learning tasks by ﬁne-tuning
on the datasets in Table 6. Table 7 compares DeiT transfer learning results to
those of ViT and state of the art convolutional architectures . DeiT is
on par with competitive convnet models, which is in line with our previous
conclusion on ImageNet.
Comparison vs training from scratch.
We investigate the performance when
training from scratch on a small dataset, without Imagenet pre-training. We
get the following results on the small CIFAR-10, which is small both w.r.t. the
number of images and labels:
RegNetY-16GF
For this experiment, we tried we get as close as possible to the Imagenet
pre-training counterpart, meaning that (1) we consider longer training sched-
Table 6: Datasets used for our different tasks.
Train size
ImageNet 
iNaturalist 2018 
iNaturalist 2019 
Flowers-102 
Stanford Cars 
CIFAR-100 
CIFAR-10 
Table 7: We compare Transformers based models on different transfer learning
task with ImageNet pre-training. We also report results with convolutional
architectures for reference.
Graﬁt ResNet-50 
Graﬁt RegNetY-8GF 
ResNet-152 
EfﬁcientNet-B7 
ViT-B/32 
ViT-B/16 
ViT-L/32 
ViT-L/16 
DeiT-B↑384
DeiT-B⚗↑384
ules (up to 7200 epochs, which corresponds to 300 Imagenet epochs) so that
the network has been fed a comparable number of images in total; (2) we rescale images to 224 × 224 to ensure that we have the same augmentation. The
results are not as good as with Imagenet pre-training (98.5% vs 99.1%), which
is expected since the network has seen a much lower diversity. However they
show that it is possible to learn a reasonable transformer on CIFAR-10 only.
Training details & ablation
In this section we discuss the DeiT training strategy to learn vision transformers in a data-efﬁcient manner. We build upon PyTorch and the timm library 2. We provide hyper-parameters as well as an ablation study in which
we analyze the impact of each choice.
Initialization and hyper-parameters.
Transformers are relatively sensitive to
initialization. After testing several options in preliminary experiments, some
2The timm implementation already included a training procedure that improved the accuracy
of ViT-B from 77.91% to 79.35% top-1, and trained on Imagenet-1k with a 8xV100 GPU machine.
top-1 accuracy
Ablation on ↓
Pre-training
Fine-tuning
Rand-Augment
Stoch. Depth
Repeated Aug.
Exp. Moving Avg.
pre-trained 2242
ﬁne-tuned 3842
none: DeiT-B
augmentation
regularization
Table 8: Ablation study on training methods on ImageNet . The top row
(”none”) corresponds to our default conﬁguration employed for DeiT. The
symbols  and  indicates that we use and do not use the corresponding
method, respectively. We report the accuracy scores (%) after the initial training at resolution 224×224, and after ﬁne-tuning at resolution 384×384. The
hyper-parameters are ﬁxed according to Table 9, and may be suboptimal.
* indicates that the model did not train well, possibly because hyper-parameters are not adapted.
of them not converging, we follow the recommendation of Hanin and Rolnick to initialize the weights with a truncated normal distribution.
Table 9 indicates the hyper-parameters that we use by default at training
time for all our experiments, unless stated otherwise. For distillation we follow
the recommendations from Cho et al. to select the parameters τ and λ. We
take the typical values τ = 3.0 and λ = 0.1 for the usual (soft) distillation.
Data-Augmentation.
Compared to models that integrate more priors (such
as convolutions), transformers require a larger amount of data. Thus, in order
to train with datasets of the same size, we rely on extensive data augmentation.
We evaluate different types of strong data augmentation, with the objective to
reach a data-efﬁcient training regime.
Auto-Augment , Rand-Augment
 , and random erasing improve the results. For the two latter we use the timm customizations, and
after ablation we choose Rand-Augment instead of AutoAugment. Overall our
experiments conﬁrm that transformers require a strong data augmentation: almost all the data-augmentation methods that we evaluate prove to be useful.
One exception is dropout, which we exclude from our training procedure.
ViT-B 
Batch size
learning rate
0.0005 × batchsize
Learning rate decay
Weight decay
Warmup epochs
Label smoothing ε
Stoch. Depth
Repeated Aug
Gradient Clip.
Rand Augment
Mixup prob.
Cutmix prob.
Erasing prob.
Table 9: Ingredients and hyper-parameters for our method and Vit-B.
Regularization & Optimizers.
We have considered different optimizers and
cross-validated different learning rates and weight decays. Transformers are
sensitive to the setting of optimization hyper-parameters. Therefore, during
cross-validation, we tried 3 different learning rates (5.10−4, 3.10−4, 5.10−5) and
3 weight decay (0.03, 0.04, 0.05). We scale the learning rate according to the
batch size with the formula: lrscaled =
512 × batchsize, similarly to Goyal et
al. except that we use 512 instead of 256 as the base value.
The best results use the AdamW optimizer with the same learning rates as
ViT but with a much smaller weight decay, as the weight decay reported
in the paper hurts the convergence in our setting.
We have employed stochastic depth , which facilitates the convergence
of transformers, especially deep ones . For vision transformers, they
were ﬁrst adopted in the training procedure by Wightman . Regularization
like Mixup and Cutmix improve performance. We also use repeated
augmentation , which provides a signiﬁcant boost in performance and is
one of the key ingredients of our proposed training procedure.
Exponential Moving Average (EMA).
We evaluate the EMA of our network
obtained after training. There are small gains, which vanish after ﬁne-tuning:
the EMA model has an edge of is 0.1 accuracy points, but when ﬁne-tuned the
two models reach the same (improved) performance.
Fine-tuning at different resolution.
We adopt the ﬁne-tuning procedure from
Touvron et al. : our schedule, regularization and optimization procedure
are identical to that of FixEfﬁcientNet but we keep the training-time data aug-
image throughput
Imagenet 
acc. top-1
acc. top-1
acc. top-1
Table 10: Performance of DeiT trained at size 2242 for varying ﬁnetuning sizes
on ImageNet-1k, ImageNet-Real and ImageNet-v2 matched frequency.
mentation (contrary to the dampened data augmentation of Touvron et al. ).
We also interpolate the positional embeddings: In principle any classical image
scaling technique, like bilinear interpolation, could be used. However, a bilinear interpolation of a vector from its neighbors reduces its ℓ2-norm compared
to its neighbors. These low-norm vectors are not adapted to the pre-trained
transformers and we observe a signiﬁcant drop in accuracy if we employ use
directly without any form of ﬁne-tuning. Therefore we adopt a bicubic interpolation that approximately preserves the norm of the vectors, before ﬁne-tuning
the network with either AdamW or SGD. These optimizers have a similar
performance for the ﬁne-tuning stage, see Table 8.
By default and similar to ViT we train DeiT models with at resolution
224 and we ﬁne-tune at resolution 384. We detail how to do this interpolation
in Section 3. However, in order to measure the inﬂuence of the resolution we
have ﬁnetuned DeiT at different resolutions. We report these results in Table 10.
Training time.
A typical training of 300 epochs takes 37 hours with 2 nodes
or 53 hours on a single node for the DeiT-B.As a comparison point, a similar
training with a RegNetY-16GF (84M parameters) is 20% slower. DeiT-S and
DeiT-Ti are trained in less than 3 days on 4 GPU. Then, optionally we ﬁne-tune
the model at a larger resolution. This takes 20 hours on a single node (8 GPU)
to produce a FixDeiT-B model at resolution 384×384, which corresponds to 25
epochs. Not having to rely on batch-norm allows one to reduce the batch size
without impacting performance, which makes it easier to train larger models.
Note that, since we use repeated augmentation with 3 repetitions, we
only see one third of the images during a single epoch3.
Conclusion
In this paper, we have introduced DeiT, which are image transformers that
do not require very large amount of data to be trained, thanks to improved
3Formally it means that we have 100 epochs, but each is 3x longer because of the repeated
augmentations. We prefer to refer to this as 300 epochs in order to have a direct comparison on the
effective training time with and without repeated augmentation.
training and in particular a novel distillation procedure. Convolutional neural networks have optimized, both in terms of architecture and optimization
during almost a decade, including through extensive architecture search that
is prone to overﬁting, as it is the case for instance for EfﬁcientNets . For
DeiT we have started the existing data augmentation and regularization strategies pre-existing for convnets, not introducing any signiﬁcant architectural beyond our novel distillation token. Therefore it is likely that research on dataaugmentation more adapted or learned for transformers will bring further gains.
Therefore, considering our results, where image transformers are on par
with convnets already, we believe that they will rapidly become a method of
choice considering their lower memory footprint for a given accuracy.
We provide an open-source implementation of our method. It is available
at 
Acknowledgements
Many thanks to Ross Wightman for sharing his ViT code and bootstrapping
training method with the community, as well as for valuable feedback that
helped us to ﬁx different aspects of this paper. Thanks to Vinicius Reis, Mannat
Singh, Ari Morcos, Mark Tygert, Gabriel Synnaeve, and other colleagues at
Facebook for brainstorming and some exploration on this axis. Thanks to Ross
Girshick and Piotr Dollar for constructive comments.