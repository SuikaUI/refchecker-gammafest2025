Proceedings of the 21st Conference on Computational Natural Language Learning , pages 442–451,
Vancouver, Canada, August 3 - August 4, 2017. c⃝2017 Association for Computational Linguistics
Natural Language Generation for Spoken Dialogue System
using RNN Encoder-Decoder Networks
Van-Khanh Tran1,2 and Le-Minh Nguyen1
1Japan Advanced Institute of Science and Technology, JAIST
1-1 Asahidai, Nomi, Ishikawa, 923-1292, Japan
{tvkhanh, nguyenml}@jaist.ac.jp
2University of Information and Communication Technology, ICTU
Thai Nguyen University, Vietnam
 
Natural language generation (NLG) is a
critical component in a spoken dialogue
system. This paper presents a Recurrent
Neural Network based Encoder-Decoder
architecture, in which an LSTM-based decoder is introduced to select, aggregate semantic elements produced by an attention
mechanism over the input elements, and
to produce the required utterances.
proposed generator can be jointly trained
both sentence planning and surface realization to produce natural language sentences. The proposed model was extensively evaluated on four different NLG
datasets. The experimental results showed
that the proposed generators not only consistently outperform the previous methods
across all the NLG domains but also show
an ability to generalize from a new, unseen domain and learn from multi-domain
Introduction
Natural Language Generation (NLG) plays a critical role in Spoken Dialogue Systems (SDS) with
task is to convert a meaning representation produced by the Dialogue Manager into natural language utterances. Conventional approaches still
rely on comprehensive hand-tuning templates and
rules requiring expert knowledge of linguistic representation, including rule-based , corpus-based n-gram models , and a trainable generator .
Recently, Recurrent Neural Networks (RNNs)
based approaches have shown promising performance in tackling the NLG problems. The RNNbased models have been applied for NLG as a joint
training model and an endto-end training model . A recurring problem in such systems is requiring annotated datasets for particular dialogue acts1 (DAs).
To ensure that the generated utterance representing
the intended meaning of the given DA, the previous RNN-based models were further conditioned
on a 1-hot vector representation of the DA. Wen
et al. introduced a heuristic gate to ensure that all the slot-value pair was accurately captured during generation. Wen et al. subsequently proposed a Semantically Conditioned
Long Short-term Memory generator (SC-LSTM)
which jointly learned the DA gating signal and
language model.
Encoder-Decoder
 , especially
the attentional based models have been explored to solve
the NLG tasks. The Attentional RNN Encoder-
Decoder (ARED) based
approaches have also shown improved performance on a variety of tasks, e.g., image captioning
 , text summarization .
While the RNN-based generators with DA
gating-vector can prevent the undesirable semantic repetitions, the ARED-based generators show
signs of better adapting to a new domain. However, none of the models show signiﬁcant advantage from out-of-domain data. To better analyze
model generalization to an unseen, new domain
as well as model leveraging the out-of-domain
sources, we propose a new architecture which is
an extension of the ARED model.
In order to
better select, aggregate and control the semantic information, a Reﬁnement Adjustment LSTMbased component (RALSTM) is introduced to the
1A combination of an action type and a set of slot-value
pairs. e.g. inform(name=’Bar crudo’; food=’raw food’)
decoder side. The proposed model can learn from
unaligned data by jointly training the sentence
planning and surface realization to produce natural
language sentences. We conducted experiments
on four different NLG domains and found that
the proposed methods signiﬁcantly outperformed
the state-of-the-art methods regarding BLEU and slot error rate ERR scores
 .
The results also showed
that our generators could scale to new domains by
leveraging the out-of-domain data. To sum up, we
make three key contributions in this paper:
• We present an LSTM-based component
called RALSTM cell applied on the decoder
side of an ARED model, resulting in an endto-end generator that empirically shows signiﬁcant improved performances in comparison with the previous approaches.
• We extensively conduct the experiments to
evaluate the models training from scratch on
each in-domain dataset.
• We empirically assess the models’ ability to:
learn from multi-domain datasets by pooling all available training datasets; and adapt
to a new, unseen domain by limited feeding
amount of in-domain data.
We review related works in Section 2. Following
a detail of proposed model in Section 3, Section 4
describes datasets, experimental setups, and evaluation metrics. The resulting analysis is presented
in Section 5. We conclude with a brief summary
and future work in Section 6.
Related Work
RNNs-based
promising performance in tackling the NLG
Zhang and Lapata proposed
a generator using RNNs to create Chinese poetry.
Xu et al. ; Karpathy and Fei-Fei
 ; Vinyals et al. also used RNNs in
a multi-modal setting to solve image captioning
The RNN-based Sequence to Sequence
models have applied to solve variety of tasks:
conversational modeling , machine translation 
For task-oriented dialogue systems, Wen et al.
 combined a forward RNN generator, a
CNN reranker, and a backward RNN reranker to
generate utterances. Wen et al. proposed
SC-LSTM generator which introduced a control
sigmoid gate to the LSTM cell to jointly learn the
gating mechanism and language model. A recurring problem in such systems is the lack of sufﬁcient domain-speciﬁc annotated data. Wen et al.
 proposed an out-of-domain model which
was trained on counterfeited data by using semantically similar slots from the target domain instead of the slots belonging to the out-of-domain
dataset. The results showed that the model can
achieve a satisfactory performance with a small
amount of in-domain data by ﬁne tuning the target domain on the out-of-domain trained model.
More recently, RNN encoder-decoder based
models with attention mechanism have shown improved performances
in various tasks. Yang et al. proposed a
review network to the image captioning, which
reviews all the information encoded by the encoder and produces a compact thought vector.
Mei et al. proposed RNN encoder-decoderbased model by using two attention layers to
jointly train content selection and surface realization. More close to our work, Wen et al. 
proposed an attentive encoder-decoder based generator which computed the attention mechanism
over the slot-value pairs.
The model showed a
domain scalability when a very limited amount of
data is available.
Moving from a limited domain dialogue system
to an open domain dialogue system raises some
issues. Therefore, it is important to build an open
domain dialogue system that can make as much
use of existing abilities of functioning from other
domains. There have been several works to tackle
this problem, such as using
RNN-based networks for multi-domain dialogue
state tracking, using a procedure to train multi-domain via multiple adaptation steps, or 
adapting of SDS components to new domains.
Recurrent Neural Language Generator
The recurrent language generator proposed in this
paper is based on a neural language generator
 , which consists of three main
components: (i) an Encoder that incorporates the
target meaning representation (MR) as the model
inputs, (ii) an Aligner that aligns and controls the
semantic elements, and (iii) an RNN Decoder that
Unrolled presentation of the RNNsbased neural language generator.
The Encoder
part is a BiLSTM, the Aligner is an attention
mechanism over the encoded inputs, and the Decoder is the proposed RALSTM model conditioned on a 1-hot representation vector s. The fading color of the vector s indicates retaining information for future computational time steps.
generates output sentences. The generator architecture is shown in Figure 1. The Encoder ﬁrst encodes the MR into input semantic elements which
are then aggregated and selected by utilizing an
attention-based mechanism by the Aligner. The
input to the RNN Decoder at each time step is a
1-hot encoding of a token2 wt and an attentive DA
representation dt. At each time step t, RNN Decoder also computes how much the feature value
vector st−1 retained for the next computational
steps, and adds this information to the RNN output
which represents the probability distribution of the
next token wt+1. At generation time, we can sample from this conditional distribution to obtain the
next token in a generated sentence, and feed it as
the next input to the RNN Decoder. This process
ﬁnishes when an end sign is generated , or some constraints are
reached . The model can
produce a sequence of tokens which can ﬁnally be
lexicalized3 to form the required utterance.
2Input texts are delexicalized where slot values are replaced by its corresponding slot tokens.
3The process in which slot token is replaced by its value.
Figure 2: The RALSTM cell proposed in this paper, which consists of three components: an Re-
ﬁnement Cell, a traditional LSTM Cell, and an
Adjustment Cell. At time step t, while the Reﬁnement cell computes new input tokens xt based on
the original input tokens and the attentional DA
representation dt, the Adjustment Cell calculates
how much information of the slot-value pairs can
be generated by the LSTM Cell.
The slots and values are separated parameters used
in the encoder side. This embeds the source information into a vector representation zi which is a
concatenation of embedding vector representation
of each slot-value pair, and is computed by:
zi = ui ⊕vi
where ui, vi are the i-th slot and value embedding
vectors, respectively, and ⊕is vector concatenation. The i index runs over the L given slot-value
pairs. In this work, we use a 1-layer, Bidirectional
LSTM (Bi-LSTM) to encode the sequence of slotvalue pairs4 embedding. The Bi-LSTM consists
of forward and backward LSTMs which read the
sequence of slot-value pairs from left-to-right and
right-to-left to produce forward and backward sequence of hidden states (−!
e1, .., −!
eL), and ( −
respectively. We then obtain the sequence of encoded hidden states E = (e1, e2, .., eL) where ei
4We treated the set of slot-value pairs as a sequence and
use the order speciﬁed by slot’s name (e.g., slot address
comes ﬁrst, food follows address). We have tried treating
slot-value pairs as a set with natural order as in the given DAs.
However, this yielded even worse results.
is a sum of the forward hidden state −!
ei and the
backward one −
ei as follows:
The Aligner utilizes attention mechanism to calculate the DA representation as follows:
j exp et,j
et,i = a(ei, ht−1)
and βt,i is the weight of i-th slot-value pair calculated by the attention mechanism. The alignment
model a is computed by:
a(ei, ht−1) = v>
a tanh(Waei + Uaht−1)
where va, Wa, Ua are the weight matrices to learn.
Finally, the Aligner calculates dialogue act embedding dt as follows:
where a is vector embedding of the action type.
RALSTM Decoder
The proposed semantic RALSTM cell applied for
Decoder side consists of three components: a Re-
ﬁnement cell, a traditional LSTM cell, and an Adjustment cell:
Firstly, instead of feeding the original input token wt into the RNN cell, the input is recomputed
by using a semantic gate as follows:
rt = σ(Wrddt + Wrhht−1)
xt = rt ⊙wt
Element-wise multiplication ⊙plays a part in
word-level matching which not only learns the
vector similarity, but also preserves information
about the two vectors. Wrh acts like a key phrase
detector that learns to capture the pattern of generation tokens or the relationship between multiple
tokens. In other words, the new input xt consists
of information of the original input token wt, the
DA representation dt, and the hidden context ht−1.
rt is called a Reﬁnement gate because the input tokens are reﬁned by a combination gating information of the attentive DA representation dt and the
previous hidden state ht−1. By this way, we can
represent the whole sentence based on the reﬁned
Secondly, the traditional LSTM network proposed by Hochreiter and Schmidhuber in
which the input gate ii, forget gate ft and output
gates ot are introduced to control information ﬂow
and computed as follows:
where n is hidden layer size, W4n,4n is model parameters. The cell memory value ct is modiﬁed to
depend on the DA representation as:
ct = ft ⊙ct−1 + it ⊙ˆct + tanh(Wcrrt)
˜ht = ot ⊙tanh(ct)
where ˜ht is the output.
Thirdly, inspired by work of Wen et al. 
in which the generator was further conditioned on
a 1-hot representation vector s of given dialogue
act, and work of Lu et al. that proposed a
visual sentinel gate to make a decision on whether
the model should attend to the image or to the sentinel gate, an additional gating cell is introduced
on top of the traditional LSTM to gate another
controlling vector s. Figure 6 shows how RAL-
STM controls the DA vector s. First, starting from
the 1-hot vector of the DA s0, at each time step t
the proposed cell computes how much the LSTM
output ˜ht affects the DA vector, which is computed
as follows:
at = σ(Waxxt + Wah˜ht)
st = st−1 ⊙at
where Wax, Wah are weight matrices to be
learned. at is called an Adjustment gate since its
task is to control what information of the given DA
have been generated and what information should
be retained for future time steps. Second, we consider how much the information preserved in the
DA st can be contributed to the output, in which
an additional output is computed by applying the
output gate ot on the remaining information in st
as follows:
ca = Wosst
˜ha = ot ⊙tanh(ca)
where Wos is a weight matrix to project the DA
presentation into the output space, ˜ha is the Adjustment cell output.
Final RALSTM output is
a combination of both outputs of the traditional
LSTM cell and the Adjustment cell, and computed
as follows:
ht = ˜ht + ˜ha
Finally, the output distribution is computed by
applying a softmax function g, and the distribution
can be sampled to obtain the next token,
P(wt+1 | wt, ...w0, DA) = g(Whoht)
wt+1 ⇠P(wt+1 | wt, wt−1, ...w0, DA)
where DA = (s, z).
The objective function was the negative loglikelihood and computed by:
where: yt is the ground truth token distribution, pt
is the predicted token distribution, T is length of
the input sentence. The proposed generators were
trained by treating each sentence as a mini-batch
with l2 regularization added to the objective function for every 5 training examples. The models
were initialized with a pretrained Glove word embedding vectors and optimized by using stochastic gradient descent and
back propagation through time .
Early stopping mechanism was implemented to
prevent over-ﬁtting by using a validation set as
suggested in .
The decoding consists of two phases: (i) overgeneration, and (ii) reranking.
In the overgeneration, the generator conditioned on both representations of the given DA use a beam search
to generate a set of candidate responses. In the
reranking phase, cost of the generator is computed
to form the reranking score R as follows:
R = F(✓) + λERR
where λ is a trade off constant and is set to a
large value in order to severely penalize nonsensical outputs. The slot error rate ERR, which is the
number of slots generated that is either missing or
redundant, and is computed by:
ERR = p + q
where N is the total number of slots in DA, and
p, q is the number of missing and redundant slots,
respectively.
Experiments
We extensively conducted a set of experiments to
assess the effectiveness of the proposed models by
using several metrics, datasets, and model architectures, in order to compare to prior methods.
We assessed the proposed models on four different NLG domains: ﬁnding a restaurant, ﬁnding
a hotel, buying a laptop, and buying a television.
The Restaurant and Hotel were collected in , while the Laptop and TV datasets
have been released by with a
much larger input space but only one training example for each DA so that the system must learn
partial realization of concepts and be able to recombine and apply them to unseen DAs.
makes the NLG tasks for the Laptop and TV domains become much harder. The dataset statistics
are shown in Table 1.
Table 1: Dataset statistics.
Restaurant
# validation
# distinct DAs
# DA types
Experimental Setups
The generators were implemented using the TensorFlow library and trained
with training, validation and testing ratio as 3:1:1.
The hidden layer size, beam size were set to be
80 and 10, respectively, and the generators were
trained with a 70% of dropout rate. We performed
5 runs with different random initialization of the
network and the training is terminated by using
early stopping. We then chose a model that yields
the highest BLEU score on the validation set as
shown in Table 2. Since the trained models can
Table 2: Performance comparison on four datasets in terms of the BLEU and the error rate ERR(%)
scores. The results were produced by training each network on 5 random initialization and selected
model with the highest validation BLEU score. ] denotes the Attention-based Encoder-Decoder model.
The best and second best models highlighted in bold and italic face, respectively.
Restaurant
Table 3: Performance comparison of the proposed models on four datasets in terms of the BLEU and the
error rate ERR(%) scores. The results were averaged over 5 randomly initialized networks. bold denotes
the best model.
Restaurant
differ depending on the initialization, we also report the results which were averaged over 5 randomly initialized networks. Note that, except the
results reported in Table 2, all the results shown
were averaged over 5 randomly initialized networks. We set λ to 1000 to severely discourage the
reranker from selecting utterances which contain
either redundant or missing slots. For each DA,
we over-generated 20 candidate sentences and selected the top 5 realizations after reranking. Moreover, in order to better understand the effectiveness
of our proposed methods, we: (i) performed an ablation experiments to demonstrate the contribution
of each proposed cells (Tables 2, 3), (ii) trained the
models on the Laptop domain with varied proportion of training data, starting from 10% to 100%
(Figure 3), (iii) trained general models by merging all the data from four domains together and
tested them in each individual domain (Figure 4),
and (iv) trained adaptation models on merging data
from restaurant and hotel domains, then ﬁne tuned
the model on laptop domain with varied amount of
adaptation data (Figure 5).
Evaluation Metrics and Baselines
The generator performance was assessed on the
two evaluation metrics: the BLEU and the slot
error rate ERR by adopting code from an open
source benchmark toolkit for Natural Language
Generation5.
We compared the proposed models against three strong baselines which have been
recently published as state-of-the-art NLG benchmarks5.
• HLSTM proposed by Wen et al. 
which used a heuristic gate to ensure that all
of the slot-value information was accurately
captured when generating.
• SCLSTM proposed by Wen et al. 
which can jointly learn the gating signal and
language model.
• Enc-Dec proposed by Wen et al. 
which applied the attention-based encoderdecoder architecture.
Results and Analysis
We conducted extensive experiments on our models and compared against the previous methods.
Overall, the proposed models consistently achieve
the better performance regarding both evaluation
metrics across all domains in all test cases.
Model Comparison in an Unseen Domain
The ablation studies (Tables 2, 3) demonstrate
the contribution of different model components
5 
Figure 3: Performance comparison of the models trained on Laptop domain.
Figure 4: Performance comparison of the general models on four different domains.
Figure 5: Performance on Laptop domain with varied amount of the adaptation training data when adapting models trained on Restaurant+Hotel dataset.
in which the models were assessed without Adjustment cell (w/o A), or without Reﬁnement cell
(w/o R). It clearly sees that the Adjustment cell
contributes to reducing the slot error rate ERR
score since it can effectively prevent the undesirable slot-value pair repetitions by gating the DA
vector s. A comparison between the ARED-based
models (denoted by ] in Table 2) shows that the
proposed models not only have better performance
with higher the BLEU score but also signiﬁcantly
reduce the slot error rate ERR score by a large
margin about 2% to 4% in every datasets. Moreover, a comparison between the models with gating the DA vector also indicates that the proposed
models (w/o R, RALSTM) have signiﬁcant improved performance on both the evaluation metrics
across the four domains compared to the SCLSTM
The RALSTM cell without the Reﬁnement cell is similar as the SCLSTM cell. However, it obtained the results much better than the
SCLSTM baselines.
This stipulates the necessary of the LSTM encoder and the Aligner in effectively partial learning the correlated order between slot-value representation in the DAs, especially for the unseen domain where there is only
one training example for each DA. Table 3 further demonstrates the stable strength of our models since the results’ pattern stays unchanged compared to those in Table 2.
Figure 3 shows a comparison of three models
(Enc-Dec, SCLSTM, and RALSTM) which were
trained from scratch on the unseen laptop domain
in varied proportion of training data, from 1% to
100%. It clearly shows that the RALSTM outperforms the previous models in all cases, while the
Enc-Dec has a much greater ERR score comparing
to the two models.
A comparison of top responses generated for
some input DAs between different models are
shown in Table 4. While the previous models still
Table 4: Comparison of top responses generated for some input dialogue acts between different models.
Errors are marked in color (missing, misplaced information). All2* are general models.
Generated Responses from Laptop Domain
?compare(name=”satellite notus 19”, pricerange=”budget”, drive=”500 gb”, name=”portege thanatos 98”,
pricerange=”expensive”, drive=”128 gb”)
the satellite notus 19 has a 500 gb drive and is in the budget price range . on the other hand the portege thanatos 98
has a 128 gb drive and is in the expensive price range . which would you prefer
the satellite notus 19 is a budget priced laptop with a 500 gb drive and a 128 gb drive . which one do you prefer
[portege thanatos 98, expensive]
the satellite notus 19 is in the budget price range . the portege thanatos 98 has a 500 gb drive and is in the expensive
price range . which one do you prefer [128 gb]
the satellite notus 19 is in the budget price range and has a 500 gb drive and the portege thanatos 98 has a 128 gb
drive . which one do you prefer [expensive]
the satellite notus 19 is in the budget price range with a 500 gb drive , while the portege thanatos 98 is in the
expensive price range and has a 128 gb drive . which one do you prefer
All2Laptop
the satellite notus 19 is a budget price range with a 500 gb drive and the portege thanatos 98 has a 128 gb drive and
is in the expensive price range . which one do you prefer
Generated Responses from TV Domain
inform count(count=”73”, type=”television”, hasusbport=”dontcare”, hdmiport=”2”, screensizerange=”dontcare”)
there are 73 televisions if you do not care about whether it has usb port or not, with 2 hdmi ports and if you do not
care about the screen size
there are 73 televisions with 2 hdmi ports and if you do not care about the number of usb ports [screensizerange]
there are 73 televisions with 2 hdmi ports if you do not care about usb ports [screensizerange]
there are 73 televisions with 2 hdmi ports if you do not care about the screen size and if you do not care about the
number of usb ports
there are 73 televisions with 2 hdmi ports if you do not care about screen size or usb ports
there are 73 televisions with 2 hdmi ports if you do not care about screen size or usb ports
produce some errors (missing and misplaced information), the proposed models (RALSTM and
the models All2* trained by pooling all datasets
together) can generate appropriate sentences. We
also found that the proposed models tend to generate more complete and concise sentences than the
other models.
All these prove the importance of the proposed
components: the Reﬁnement cell in aggregating
and selecting the attentive information, and the
Adjustment cell in controlling the feature vector
(see Examples in Figure 6).
General Models
Figure 4 shows a comparison performance of general models as described in Section 4.2. The results are consistent with the Figure 3, in which the
RALSTM has better performance than the Enc-Dec
and SCLSTM on all domains in terms of the BLEU
and the ERR scores, while the Enc-Dec has difﬁculties in reducing the ERR score. This indicates
the relevant contribution of the proposed component Reﬁnement and Adjustment cells to the original ARED architecture, in which the Reﬁnement
with attentional gating can effectively select and
aggregate the information before putting them into
the traditional LSTM cell, while the Adjustment
with gating DA vector can effectively control the
(a) An example from the Laptop domain.
(b) An example from the TV domain.
Figure 6: Example showing how RALSTM drives
down the DA feature value vector s step-by-step,
in which the model generally shows its ability to
detect words and phases describing a corresponding slot-value pair.
information ﬂow during generation.
Adaptation Models
Figure 5 shows domain scalability of the three
models in which the models were ﬁrst trained on
the merging out-of-domain Restaurant and Hotel
datasets, then ﬁne tuned the parameters with varied amount of in-domain training data (laptop domain). The RALSTM model outperforms the previous model in both cases where the sufﬁcient indomain data is used (as in Figure 5-left) and the
limited in-domain data is used (Figure 5-right).
The Figure 5-right also indicates that the RALSTM
model can adapt to a new, unseen domain faster
than the previous models.
Conclusion and Future Work
We present an extension of ARED model, in
which an RALSTM component is introduced to
select and aggregate semantic elements produced
by the Encoder, and to generate the required sentence. We assessed the proposed models on four
NLG domains and compared to the state-of-theart generators. The proposed models empirically
show consistent improvement over the previous
methods in both the BLEU and ERR evaluation
metrics. The proposed models also show an ability to extend to a new, unseen domain no matter how much the in-domain training data was
fed. In the future, it would be interesting to apply the proposed model to other tasks that can be
modeled based on the encoder-decoder architecture, i.e., image captioning, reading comprehension, and machine translation.
Acknowledgements
This work was supported by JSPS Kakenhi
Grant Number JP15K16048 and JST CREST JP-
MJCR1513. The ﬁrst author would like to thank
the Vietnamese Government Scholarship (911