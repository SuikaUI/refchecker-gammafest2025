Learning Physical Intuition of Block Towers by Example
Adam Lerer
 
Facebook AI Research
 
Facebook AI Research
Rob Fergus
 
Facebook AI Research
Wooden blocks are a common toy for infants, allowing them to develop motor skills and gain intuition about the physical behavior of the world.
In this paper, we explore the ability of deep feedforward models to learn such intuitive physics.
Using a 3D game engine, we create small towers
of wooden blocks whose stability is randomized
and render them collapsing (or remaining upright). This data allows us to train large convolutional network models which can accurately predict the outcome, as well as estimating the block
trajectories. The models are also able to generalize in two important ways: (i) to new physical
scenarios, e.g. towers with an additional block
and (ii) to images of real wooden blocks, where
it obtains a performance comparable to human
1. Introduction
Interaction with the world requires a common-sense understanding of how it operates at a physical level. For example,
we can quickly assess if we can walk over a surface without
falling, or how an object will behave if we push it. Making
such judgements does not require us to invoke Newton’s
laws of mechanics – instead we rely on intuition, built up
through interaction with the world.
In this paper, we explore if a deep neural network can capture this type of knowledge. While DNNs have shown remarkable success on perceptual tasks such as visual recognition and speech understanding
 , they have been rarely applied to problems involving higher-level reasoning, particularly those
involving physical understanding. However, this is needed
to move beyond object classiﬁcation and detection to a true
understanding of the environment, e.g. “What will happen
next in this scene?” Indeed, the fact that humans develop
such physical intuition at an early age , well
before most other types of high-level reasoning, suggests
its importance in comprehending the world.
To learn this common-sense understanding, a model needs
a way to interact with the physical world. A robotic platform is one option that has been explored e.g. , but inherent complexities limit the diversity
and quantity of data that can be acquired. Instead, we use
Unreal Engine 4 (UE4) , a platform for
modern 3D game development, to provide a realistic environment. We chose UE4 for its realistic physics simulation,
modern 3D rendering, and open source license. We integrate the Torch machine learning
framework directly into the UE4 game loop, allowing for
online interaction with the UE4 world.
One of the ﬁrst toys encountered by infants, wooden blocks
provide a simple setting for the implicit exploration of basic
Newtonian concepts such as center-of-mass, stability and
momentum. By asking deep models to predict the behavior of the blocks, we hope that they too might internalize
such notions. Another reason for selecting this scenario is
that it is possible to construct real world examples, enabling
the generalization ability of our models to be probed (see
Two tasks are explored: (i) will the blocks fall over or not?
and (ii) where will the blocks end up? The former is a binary classiﬁcation problem, based on the stability of the
block conﬁguration. For the latter we predict image masks
that show the location of each block. In contrast to the
ﬁrst task, this requires the models to capture the dynamics of the system. Both tasks require an effective visual
system to analyze the conﬁguration of blocks. We explore
models based on contemporary convolutional networks architectures , notably Googlenet , DeepMask and
 
Learning Physical Intuition of Block Towers by Example
Figure 1. Block tower examples from the synthetic (left) and real
(right) datasets. The top and bottom rows show the ﬁrst and last
frames respectively.
ResNets . While designed for classiﬁcation or segmentation, we adapt them to our novel task, using an integrated approach where the lower layers perceive
the arrangement of blocks and the upper layers implicitly
capture their inherent physics.
Our paper makes the following contributions:
Convnet-based Prediction of Static Stability: We show
that standard convnet models, reﬁned on synthetic data, can
accurately predict the stability of stacks of blocks. Crucially, these models successfully generalize to (i) new images of real-world blocks and (ii) new physical scenarios,
not encountered during training. These models are purely
bottom-up in nature, in contrast to existing approaches
which rely on complex top-down graphics engines.
Prediction of Dynamics: The models are also able to predict with reasonably accuracy the trajectories of the blocks
as they fall, showing that they capture notions of acceleration and momentum, again in a purely feed-forward manner.
Comparison to Human Subjects: Evaluation of the test
datasets by participants shows that our models match their
performance on held-out real data (and are signiﬁcantly
better on synthetic data). Furthermore, the model predictions have a reasonably high correlation with human judgements.
UETorch: We introduce an open-source combination of
the Unreal game engine and the Torch deep learning environment, that is simple and efﬁcient to use. UETorch
is a viable environment for a variety of machine learning
experiments in vision, physical reasoning, and embodied
1.1. Related Work
The most closely related work to ours is who explore the physics involved with falling blocks.
A generative simulation model is used to predict the outcome of a variety of block conﬁgurations with varying
physical properties, and is found to closely match human
This work complements ours in that it uses
a top-down approach, based on a sophisticated graphics
engine which incorporates explicit prior knowledge about
Newtonian mechanics.
In contrast, our model is purely
bottom-up, estimating stability directly from image pixels
and is learnt from examples.
Our pairing of top-down rendering engines for data generation with high capacity feed-forward regressors is similar in
spirit to the Kinect body pose estimation work of , although the application is quite different.
 recently investigated the learning of simple kinematics, in the context of objects sliding down
ramps. Similar to , they also used
a top-down 3D physics engine to map from a hypothesis of
object mass, shape, friction etc. to image space. Inference
relies on MCMC, initialized to the output of convnet-based
estimates of the attributes. As in our work, their evaluations are performed on real data and the model predictions
correlate reasonably with human judgement.
Prior work in reinforcement learning has used synthetic
data from games to train bottom-up models. In particular, and trained
deep convolutional networks with reinforcement learning
directly on image pixels from simulations to learn policies
for Atari games and the TORCS driving simulator, respectively.
A number of works in cognitive science have explored intuitive physics, for example, in the context of liquid dynamics
 , ballistic motion and
gears and pulleys . The latter ﬁnds that people perform “mental simulation” to answer questions about
gears, pulleys, etc., but some form of implicit bottom-up
reasoning is involved too.
In computer vision, a number of works have used physical
reasoning to aid scene understanding . For example, 
ﬁt cuboids to RGBD data and use their centroids to search
for scene interpretations that are statically stable.
Learning Physical Intuition of Block Towers by Example
Figure 2. Recorded screenshots and masks at 1-second intervals
from the Unreal Engine block simulation.
2. Methods
2.1. UETorch
UETorch is a package that embeds the Lua/Torch machine
learning environment directly into the UE4 game loop, allowing for ﬁne-grained scripting and online control of UE4
simulations through Torch. Torch is well-suited for game
engine integration because Lua is the dominant scripting
language for games, and many games including UE4 support Lua scripting. UETorch adds additional interfaces to
capture screenshots, segmentation masks, optical ﬂow data,
and control of the game through user input or direct modiﬁcation of game state. Since Torch runs inside the UE4
process, new capabilities can be easily added through FFI
without deﬁning additional interfaces/protocols for interprocess communication. UETorch simulations can be run
faster than real time, aiding large-scale training.
UETorch package can be downloaded freely at http:
//github.com/facebook/UETorch.
2.2. Data Collection
A simulation was developed in UETorch that generated vertical stacks of 2, 3, or 4 colored blocks in random conﬁgurations. The block position and orientation, camera position, background textures, and lighting were randomized
at each trial to improve the transferability of learned features. In each simulation, we recorded the outcome (did it
fall?) and captured screenshots and segmentation masks at
8 frames/sec. Frames and masks from a representative 4block simulation are shown in Fig. 2. A total of 180,000
simulations were performed, balanced across number of
blocks and stable/unstable conﬁgurations. 12,288 examples were reserved for testing.
Will the blocks fall? (q = No, p = Yes)
Prediction: stay; INCORRECT
Figure 3. The interface used for human experiments. At each turn,
the subject is shown an image on the left and tries to predict if the
stack will fall or not. No time limit is imposed. During training phase, the subject receives feedback on their prediction, by
showing them the outcome image on the right.
Four wooden cubes were fabricated and spray painted red,
green, blue and yellow respectively. Manufacturing imperfections added a certain level of randomness to the stability
of the real stacked blocks, and we did not attempt to match
the physical properties of the real and synthetic blocks. The
blocks were manually stacked in conﬁgurations 2, 3 and 4
high against a white bedsheet. A tripod mounted DSLR
camera was used to ﬁlm the blocks falling at 60 frames/sec.
A white pole was held against the top block in each example, and was then rapidly lifted upwards, allowing unstable
stacks to fall (the stick can be see in Fig. 1, blurred due to
its rapid motion). Note that this was performed even for
stable conﬁgurations, to avoid bias. Motion of the blocks
was only noticeable by the time the stick was several inches
away from top block. 493 examples were captured, balanced between stable/unstable conﬁgurations. The totals
for 2, 3 and 4 block towers were 115, 139 and 239 examples respectively.
2.3. Human Subject Methodology
To better understand the challenge posed about our
datasets, real and synthetic, we asked 10 human subjects
to evaluate the images in a controlled experiment.
Participants were asked to give a binary prediction regarding
the outcome of the blocks (i.e. falling or not). During the
training phase, consisting of 50 randomly drawn examples,
participants were shown the ﬁnal frame of each example,
along with feedback as to whether their choice was correct
or not (see Fig. 3). Subsequently, they were tested using
100 randomly drawn examples (disjoint from the training
set). During the test phase, no feedback was provided to
the individuals regarding the correctness of their responses.
2.4. Model Architectures
We trained several convolutional network (CNN) architectures on the synthetic blocks dataset. We trained some ar-
Learning Physical Intuition of Block Towers by Example
chitectures on the binary fall prediction task only, and others on jointly on the fall prediction and mask prediction
Fall Prediction
We trained the ResNet-34 and Googlenet
 networks on the fall prediction task.
These models were pre-trained on the Imagenet dataset
 . We replaced the ﬁnal linear
layer with a single logistic output and ﬁne-tuned the entire
network with SGD on the blocks dataset. Grid search was
performed over learning rates.
Fall+Mask Prediction
We used deep mask networks to predict the segmentation trajectory of falling blocks at multiple future times
(0s,1s,2s,4s) based on an input image. Each mask pixel is
a multi-class classiﬁcation across a background class and
four foreground (block color) classes. A fall prediction is
also computed.
DeepMask is an existing mask prediction network trained for instance segmentation, and has
the appropriate architecture for our purposes. We replaced
the binary mask head with a multi-class SoftMax, and replicated this N times for mask prediction at multiple points in
We also designed our own mask prediction network, Phys-
Net, that was suited to mask prediction rather than just
segmentation. For block masks, we desired (i) spatially
local and translation-invariant (i.e. convolutional) upsampling from coarse image features to masks, and (ii) more
network depth at the coarsest spatial resolution, so the
network could reason about block movement. Therefore,
PhysNet take the 7 × 7 outputs from ResNet-34, and performs alternating upsampling and convolution to arrive at
56×56 masks. The PhysNet architecture is shown in Fig. 4.
We use the Resnet-34 trunk in PhysNet for historical reasons, but our experiments show comparable results with a
Googlenet trunk.
The training loss for mask networks is the sum of a binary
cross-entropy loss for fall prediction and a pixelwise multiclass cross-entropy loss for each mask. A hyperparameter
controls the relative weight of these losses.
Baselines As a baseline, we perform logistic regression either directly on image pixels, or on pretrained Googlenet
features, to predict fall and masks. To reduce the number
of parameters, the pixels-to-mask matrix is factored with an
intermediate dimension 128. For fall prediction, we also try
k-Nearest-Neighbors (k = 10) using Googlenet last-layer
image features.
2.5. Evaluation
We compare fall prediction accuracy on synthetic and real
images, both between models and also between model and
human performance. We also train models with a held-out
block tower size and test them on the held out tower size,
to evaluate the transfer learning capability of these models
models to different block tower sizes.
We evaluate mask predictions with two criteria: mean mask
IoU and log likelihood per pixel. We deﬁne mean mask IoU
as the intersection-over-union of the mask label with the
binarized prediction for the t = 4s mask, averaged over
each foreground class present in the mask label.
MIoU(m, q) = 1
IoU(mnc, ˆqnc)
where mnc is the set of pixels of class c in mask n, Cn =
{c : c ∈{1, 2, 3, 4} ∧|mnc| > 0} is the set of foreground classes present in mask n, ˆqnc is the set of pixels
in model output n for which c is the highest-scoring class,
and IoU(m1, m2) = |m1∩m2|
The mask IoU metric is intuitive but problematic because
it uses binarized masks. For example, if the model predicts
a mask with 40% probability in a region, the Mask IoU for
that block will be 0 whether or not the block fell in that
region. The quality of the predicted mask conﬁdences is
better captured by log likelihood.
The log likelihood per pixel is deﬁned as the log likelihood
of the correct ﬁnal mask under the predicted (SoftMax) distribution, divided by the number of pixels. This is essentially the negative mask training loss.
Since the real data has a small number of examples (N =
493 across all blocks sizes), we report an estimated conﬁdence interval for the model prediction on real examples.
We estimate this interval as the standard deviation of a binomial distribution with p approximated by the observed
accuracy of the model.
3. Results
3.1. Fall Prediction Results
Table 1 compares the accuracy for fall prediction of several deep networks and baselines described in Section 2.4.
Convolutional networks perform well at fall prediction,
whether trained in isolation or jointly with mask prediction. The best accuracy on synthetic data is achieved with
PhysNet, which is jointly trained on masks and fall prediction. Accuracy on real data for all convnets is within their
standard deviation.
As an ablation study, we also measured the performance
Learning Physical Intuition of Block Towers by Example
Figure 4. Architecture of the PhysNet network.
Fall Acc. (%)
Fall Acc. (%)
(synthetic)
50.0 ± 2.2
Pixel Log. Reg
49.3 ± 2.2
Googlenet Log. Reg.
62.5 ± 2.2
Googlenet kNN
50.9 ± 2.2
Classiﬁcation Models
67.1 ± 2.1
69.0 ± 2.1
59.2 ± 2.2
(no pretraining)
Mask Prediction Models
66.1 ± 2.1
66.7 ± 2.1
Table 1. Fall prediction accuracy of convolutional networks on
synthetic and real data.
The models substantially outperform
baselines, and all have similar performance whether trained singly
or jointly with the mask prediction task. Training Googlenet without Imagenet pretraining does not affect performance on synthetic
examples, but degrades generalization to real examples. Baselines
are described in Section 2.4.
of Googlenet without Imagenet pretraining. Interestingly,
while the model performed equally well on synthetic data
with and without pretraining, only the pretrained model
generalized well to real images (Table 1).
Occlusion Experiments
We performed occlusion experiments to determine which
regions of the block images affected the models’ fall predictions. A Gaussian patch of gray pixels with standard deviation 20% of the image width was superimposed on the
image in a 14 × 14 sliding window to occlude parts of the
image, as shown in Fig. 5A. The PhysNet model was evaluated on each occluded image, and the difference in the fall
probability predicted from the baseline and occluded images were used to produce heatmaps, shown in Fig. 5B-D.
These ﬁgures suggest that the model makes its prediction
based on relevant local image features rather than memorizing the particular scene. For example, in Fig. 5B, the
model prediction is only affected by the unstable interface
between the middle and top blocks.
Model vs. Human Performance
Fig. 6 compares PhysNet to 10 human subjects on the same
set of synthetic and real test images. ROC curves comparing human and model performance are generated by using
the fraction of test subjects predicting a fall as a proxy for
conﬁdence, and comparing this to model conﬁdences.
Overall, the model convincingly outperforms the human
subjects on synthetic data, and is comparable on real
Interestingly, the correlation between human and
model conﬁdences on both real and synthetic data (ρ =
(0.69, 0.45)) is higher than between human conﬁdence and
ground truth (ρ = (0.60, 0.41)), showing that our model
agrees quite closely with human judgement.
3.2. Mask Prediction Results
Table 2 compares mask prediction accuracy of the Deep-
Mask and PhysNet networks described in Section 2.4.
PhysNet achieves the best performance on both Mean Mask
IoU and Log Likelihood per pixel (see Section 2.5), substantially outperforming DeepMask and baselines. Predicting the mask as equal to the initial (t = 0) mask has a high
Mask IoU due to the deﬁciencies in that metric described
in Section 2.5.
Examples of PhysNet mask outputs on synthetic and real
data are shown in Fig. 7. We only show masks for examples that are predicted to fall, because predicting masks for
Learning Physical Intuition of Block Towers by Example
Figure 7. PhysNet mask predictions for synthetic (A–F) and real (G–L) towers of 2, 3, and 4 blocks. The image at the left of each
example is the initial frame shown to the model. The top row of masks are the ground truth masks from simulation, at 0, 1, 2, and 4
seconds. The bottom row are the model predictions, with the color intensity representing the predicted probability. PhysNet correctly
predicts fall direction and occlusion patterns for most synthetic examples, while on real examples, PhysNet overestimates stability (H,L).
In difﬁcult cases, Physnet produces diffuse masks due to uncertainty (D–F,I). B is particularly notable, as PhysNet predicts the red block
location from the small patch visible in the initial image.
Learning Physical Intuition of Block Towers by Example
Figure 5. A: Example of Gaussian occlusion mask, applied in
a sliding window to generate fall prediction heatmaps.
Heatmaps of predictions from occluded images. A green overlay means that an occlusion in this region increases the predicted
probability of falling, while a red overlay means the occlusion
decreases the predicted probability of falling. The model focuses
on unstable interfaces (B,C), or stabilizing blocks that prevent the
tower from falling (D).
stable towers is easy and the outputs are typically perfect.
The mask outputs from PhysNet are typically quite reasonable for falling 2- and 3-block synthetic towers, but have
more errors and uncertainty on 4-block synthetic towers
and most real examples. In these cases, the masks are often
highly diffuse, showing high uncertainty about the trajectory. On real examples, model predictions and masks are
also skewed overstable, likely because of different physical
properties of the real and simulated blocks.
3.3. Evaluation on Held-Out Number of Blocks
Table 3 compares the performance of networks that had either 3- or 4-block conﬁgurations excluded from the training
set. While the accuracy of these networks is lower on the
untrained class relative to a fully-trained model, it’s still
relatively high – comparable to human performance. The
predicted masks on the untrained number of blocks also
continue to capture the fall dynamics with reasonably accuracy. Some examples are shown in Fig. 8.
p(False positive rate)
p(True positive rate)
Synthetic test examples
p(False positive rate)
p(True positive rate)
Real test examples
Figure 6. Plots comparing PhysNet accuracy to human performance on real (Top) and synthetic (Bottom) test examples. Left:
ROC plot comparing human and model predictions.
breakdown of the performance for differing numbers of blocks.
For humans, the mean performance is shown, along with the performance of individual subjects (green circles). Overall, the Phys-
Net model is better than even the best performing of the human
subjects on synthetic data. On real data, PhysNet performs similarly to humans.
Mask IoU (%)
Log Likelihood/px
(synthetic)
(synthetic)
Pixel Log. Reg.
Googlenet Log. Reg.
Mask @ t = 0
Class-Constant
Table 2. Mask prediction accuracy of DeepMask and our PhysNet
network. The metrics used are described in Section 2.5; baselines
are described in Section 2.4. As an additional IoU baseline we
evaluate the t = 0 mask as a prediction of the ﬁnal mask, and
as a log likelihood baseline we predict each pixel as the average
likelihood of that class in the data. The PhysNet network provides
the highest accuracy in both metrics. Mask examples are shown
in Fig. 7.
Learning Physical Intuition of Block Towers by Example
Accuracy (%) (synth.)
Accuracy (%) (real)
Mask Log Likelihood/px (synth.)
69.6 ± 4.3
69.8 ± 3.9
69.9 ± 3.0
65.2 ± 4.4
66.9 ± 4.0
69.0 ± 3.0
69.6 ± 4.3
66.9 ± 4.0
70.7 ± 2.9
66.1 ± 4.4
65.5 ± 4.0
73.2 ± 2.9
60.0 ± 4.6
64.0 ± 4.1
70.1 ± 2.9
55.7 ± 4.6
67.6 ± 4.0
69.9 ± 3.0
Table 3. Fall prediction accuracy for Googlenet and PhysNet trained on subsets of the block tower sizes, and tested on the held-out block
tower size (blue cells). Prediction accuracy on the held-out class is reduced, but is still comparable to human performance (see Fig. 6).
On real block data, performance on the held out class is equivalent to the fully-trained model, to within standard deviation. PhysNet
mask predictions for held-out classes are only moderately degraded, and log likelihood scores are still superior to DeepMask predictions
(Table 1). Physnet masks for the held-out class are shown in Fig. 8.
Figure 8. PhysNet mask predictions on a tower size (3 or 4
blocks) that the network was not trained on. Mask predictions
for 3 blocks (A–B) still capture the dynamics well even though
the network never saw towers of 3 blocks. Mask predictions for 4
blocks capture some of the dynamics but show some degradation.
4. Discussion
Our results indicate that bottom-up deep CNN models can
attain human-level performance at predicting how towers
of blocks will fall. We also ﬁnd that these models’ performance generalizes well to real images if the models are
pretrained on real data (Table 1).
Several experiments provide evidence that the deep models
we train are gaining knowledge about the dynamics of the
block towers, rather than simply memorizing a mapping
from conﬁgurations to outcomes. Most convincingly, the
relatively small degradation in performance of the models
on a tower size that is not shown during training (Table 3
& Fig. 8) demonstrates that the model must be making its
prediction based on local features rather than memorized
exact block conﬁgurations. The occlusion experiments in
Fig. 5 also suggest that models focus on particular regions
that confer stability or instability to a block conﬁguration.
Finally, the poor performance of k-nearest-neighbors on
Googlenet features in Table 1 suggests that nearby conﬁgurations in Googlenet’s pretrained feature space are not predictive of the stability of a given conﬁguration.
Compared to top-down, simulation-based models such as
 , deep models require far more training data – many thousands of examples – to achieve a high
level of performance.
Deep models also have difﬁculty
generalizing to examples far from their training data. These
difﬁculties arise because deep models must learn physics
from scratch, whereas simulation-based models start with
strong priors encoded in the physics simulation engine.
Bottom-up and top-down approaches each have their advantages, and the precise combination of these systems in
human reasoning is the subject of debate and ). Our results
suggest that deep models show promise for directly capturing common-sense physical intuitions about the world that
could lead to more powerful visual reasoning systems.
We believe that synthetic data from realistic physical sim-
Learning Physical Intuition of Block Towers by Example
ulations in UETorch are useful for other machine learning
experiments in vision, physics, and agent learning. The
combination of synthetic data and mask prediction constitutes a general framework for learning concepts such as
object permanence, 3D extent, occlusion, containment, solidity, gravity, and collisions, that may be explored in the
Acknowledgements
The authors would like to thank: Soumith Chintala and
Arthur Szlam for early feedback on experimental design;
Sainbayar Sukhbaatar for assistance collecting the realworld block examples; Y-Lan Boureau for useful advice
regarding the human subject experiments; and Piotr Dollar
for feedback on the manuscript.
Learning Physical Intuition of Block Towers by Example