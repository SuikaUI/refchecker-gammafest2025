Population Based Augmentation:
Efﬁcient Learning of Augmentation Policy Schedules
Daniel Ho 1 2 Eric Liang 1 Ion Stoica 1 Pieter Abbeel 1 3 Xi Chen 1 3
A key challenge in leveraging data augmentation for neural network training is choosing an
effective augmentation policy from a large search
space of candidate operations. Properly chosen
augmentation policies can lead to signiﬁcant generalization improvements; however, state-of-theart approaches such as AutoAugment are computationally infeasible to run for the ordinary user.
In this paper, we introduce a new data augmentation algorithm, Population Based Augmentation
(PBA), which generates nonstationary augmentation policy schedules instead of a ﬁxed augmentation policy. We show that PBA can match the performance of AutoAugment on CIFAR-10, CIFAR-
100, and SVHN, with three orders of magnitude
less overall compute. On CIFAR-10 we achieve
a mean test error of 1.46%, which is a slight improvement upon the current state-of-the-art. The
code for PBA is open source and is available at
 
1. Introduction
Data augmentation techniques such as cropping, translation,
and horizontal ﬂipping are commonly used to train large
neural networks . Augmentation transforms
images to increase the diversity of image data. While deep
neural networks can be trained on enormous numbers of
data examples to exhibit excellent performance on tasks
such as image classiﬁcation, they contain a likewise enormous number of parameters, which causes overﬁtting. Data
augmentation acts as a regularizer to combat this. However,
most approaches used in training state-of-the-art networks
only use basic types of augmentation. While neural network
1EECS, UC Berkeley, Berkeley, California, USA 2Current
afﬁliation: X, Mountain View, California, USA 3covariant.ai,
Berkeley, California, USA. Correspondence to:
< >.
Proceedings of the 36 th International Conference on Machine
Learning, Long Beach, California, PMLR 97, 2019. Copyright
2019 by the author(s).
Test error (%)
PyramidNet
AutoAugment
Population Based Augmentation
Figure 1. PBA matches AutoAugment’s classiﬁcation accuracy
across a range of different network models on the CIFAR-10
dataset, while requiring 1,000x less GPU hours to run. For the full
set of results, refer to Table 2. Assuming an hourly GPU cost of
$1.5, producing a new augmentation policy costs around $7.5 for
PBA vs $7,500 with AutoAugment. The same scaling holds for
the SVHN dataset as well.
architectures have been investigated in depth , less focus has been put into
discovering strong types of data augmentation and data augmentation policies that capture data invariances.
A key consideration when applying data augmentation is
picking a good set of augmentation functions, since redundant or overly aggressive augmentation can slow down training and introduce biases into the dataset .
Many recent methods learn augmentation policies to apply different functions to image data. Among these, AutoAugment stands out with state-of-theart results in CIFAR-10 , CIFAR-100
 , and ImageNet . Using a method inspired by Neural Architecture Search , Cubuk et al. learn a distilled list of augmentation functions and associated probability-magnitude values,
resulting in a distribution of possible augmentations which
can be applied to each batch of data. However, the search
technique used in the work is very computationally expensive, and code has not been released to reproduce it. In this
work, we address these issues with a simple and efﬁcient
algorithm for augmentation policy learning.
 
Population Based Augmentation
Table 1. Comparison of pre-computation costs and test set error
(%) between this paper, AutoAugment (AA), and the previous best
published results. Previous results did not pre-compute augmentation policies. AutoAugment reported estimated cost in Tesla P100
GPU hours, while PBA measured cost in Titan XP GPU hours.
Besides PBA, all metrics are cited from . For
more detail, see Table 2. *CIFAR-100 models are trained with the
policies learned on CIFAR-10 data.
Previous Best
Test Error
Test Error
Test Error
Our formulation of data augmentation policy search, Population Based Augmentation (PBA), reaches similar levels
of ﬁnal performance on a variety of neural network models while utilizing orders of magnitude less compute. We
learn a robust augmentation policy on CIFAR-10 data in ﬁve
hours using one NVIDIA Titan XP GPU, and we visualize
its performance in Figure 1. Relative to the several days
it takes to train large CIFAR-10 networks to convergence,
the cost of running PBA beforehand is marginal and significantly enhances results. These results are summarized in
Table 1. PBA leverages the Population Based Training algorithm to generate an augmentation
schedule that deﬁnes the best augmentation policy for each
epoch of training. This is in contrast to a ﬁxed augmentation
policy that applies the same transformations independent of
the current epoch number.
We release code to run and evaluate our augmentation search algorithm at 
arcelien/pba. This allows an ordinary workstation
user to easily experiment with the search algorithm and augmentation operations. A particularly interesting use case
would be to introduce new augmentation operations, perhaps targeted towards a particular dataset or image modality,
and be able to quickly produce a tailored, high performing
augmentation schedule. Our code uses the Ray implementation of PBT, which allows for easy
parallelization across and within GPUs and CPUs.
This paper is organized as follows: First, we cover relevant background and AutoAugment (Section 2). We then
introduce the PBA algorithm (Section 3). We describe the
augmentation schedules PBA discovers and its performance
on several datasets. Finally, we seek to understand the
efﬁciency gains of PBA through ablation studies and comparison with baseline methods (Section 4).
2. Background
2.1. Related Work
We ﬁrst review types of data augmentation for image recognition, which improve generalization with limited data by
applying transformations to generate additional samples.
Common techniques such as random cropping, ﬂipping, rotating, scaling, and translating are used by top performing
models for training on MINST, CIFAR-10, and ImageNet
datasets . Some additional approaches to
generate augmented data include image combining , elastic distortions , and generative adversarial networks or non-supervised learning approaches .
Several papers have attempted to automate the generation
of data augmentations with data-driven learning. These use
methods such as manifold learning ,
Bayesian Optimization , and generative adversarial networks which generate transformation sequences
 . Additionally, 
uses a network to combine pairs of images to train a target
network, and injects noise and
interpolates images in an autoencoder learned feature space.
AutoAugment uses reinforcement learning to optimize for accuracy in a discrete search space of
augmentation policies.
Our approach was inspired by work in hyperparameter optimization. There has been much previous work to welltune hyperparameters, especially in Bayesian Optimization , which are sequential in
nature and expensive computationally. Other methods incorporate parallelization or use non-bayesian techniques
 but
still either require multiple rounds of optimization or large
amounts of compute. These issues are resolved in Population Based Training , which builds
upon both evolutionary strategies and
random search to generate nonstationary, adaptive hyperparameter schedules in a single
round of model training.
Population Based Augmentation
augmentation policy fc1..c5(x)
sub-policy ci(x)
RNN controller
trained with Proximal Policy
Optimization over 15,000
child models
augmentation policy fp(x)
pinit = (op,mag=0,prob=0) x 30
fixed augmentation
policy fc1..c5
augmentation policy
schedule fp0...pT(x, t)
single run of Population Based
Training on 16 child models
(b) Population Based Augmentation
(a) AutoAugment
sub-policy ci(x)
sub-policy ci(x)
sub-policy ci(x)
sub-policy gop,mag,prob
sampled policy
Figure 2. Comparison of AutoAugment and PBA augmentation
strategies. In contrast to AutoAugment, PBA learns a schedule
instead of a ﬁxed policy. It does so in a short amount of time
by using the PBT algorithm to jointly optimize augmentation
policy parameters with the child model. PBA generates a single
augmentation function f(x, t) where x is an input image and
t the current epoch, compared to AutoAugment’s ensemble of
augmentation policies f i(x), each of which has several further
sub-policies.
2.2. AutoAugment
Cubuk et al. shows that using a diverse, stochastic mix of
augmentation operations can signiﬁcantly reduce generalization error. They automate the search over the space of data
augmentation policies in a method called AutoAugment,
which signiﬁcantly improves neural network model accuracy on a variety of image datasets. AutoAugment follows
an approach similar to work in the neural architecture search
area where a controller
RNN network is trained via reinforcement learning to output augmentation policies maximizing for accuracy (Figure
2). However, this approach is expensive in both time and
compute, as the signal for the controller has to be generated
by training thousands of models to convergence on different augmentation policies and evaluating ﬁnal validation
Cubuk et al. curated an augmentation policy search space
based on operations from the PIL python library. These include ShearX/Y, TranslateX/Y, Rotate, AutoContrast, Invert,
Equalize, Solarize, Posterize, Contrast, Color, Brightness,
Sharpness, Cutout , and Sample-
Pairing . Each operation has two associated
parameters: probability and magnitude. The authors used
discrete probability values from 0% to 100%, in increments
of 10%. Magnitude can range from 0 to 9 inclusive, but a
few operations ignore this value and apply a constant effect.
Figure 3. Augmentations applied to a CIFAR-10 “car” class image,
at various points in our augmentation schedule learned on Reduced
CIFAR-10 data. The maximum number of operations applied is
sampled from 0 to 2. Each operation is formatted with name,
probability, and magnitude value respectively.
A policy would then consist of ﬁve sub-policies, each consisting of two operations and associated parameters. For
every batch of data, one randomly selected sub-policy would
be applied. In total, the ﬁnal policy for AutoAugment concatenated the ﬁve best performing polices for a total of 25
sub-policies.
To learn an augmentation policy, 15,000 sampled policies
were evaluated on a Wide-ResNet-40-2 (40 layers, widening
factor of 2) child model by
taking the validation accuracy after training for 120 epochs
on a “reduced” dataset. For CIFAR-10, this consists of 4,000
images from the training set, and for SVHN, 1,000 images.
CIFAR-100 is trained with a transferred augmentation policy
from CIFAR-10.
3. Population Based Augmentation
In this section we introduce the design and implementation
of the PBA algorithm.
3.1. Why Augmentation Schedules?
The end goal of PBA is to learn a schedule of augmentation
policies as opposed to a ﬁxed policy. As we will see, this
choice is responsible for much of the efﬁciency gains of PBA
(Section 4). Though the search space for schedules over
training epochs is larger than that of ﬁxed policies f ∈F by
a factor of |F||epochs|, counter-intuitively, PBA shows that
it is far more efﬁcient to search for a good schedule than a
Population Based Augmentation
ﬁxed policy. Several factors contribute to this.
First, estimating the ﬁnal test error of a ﬁxed augmentation
policy is difﬁcult without running the training of a child
model to completion. This is true in particular because the
choice of regularizing hyperparameters (e.g., data augmentation functions) primarily impacts the tail end of training.
Therefore, estimating the ﬁnal performance of a given ﬁxed
augmentation policy requires training a model almost to
completion. In contrast, it is straightforward to reuse prior
computations to estimate the performance of two variants
of a schedule that share a preﬁx.
Second, there is reason to believe that it is easier to ﬁnd
a good augmentation policy when searching in the space
of schedules. An augmentation function that can reduce
generalization error at the end of training is not necessarily
a good function at initial phases. Such functions would
be selected out when holding the augmentation function
ﬁxed for the entirely of training. And though the space
of schedules is large, most good schedules are necessarily
smooth and hence easily discoverable through evolutionary
search algorithms such as PBT.
3.2. Learning a Schedule
In PBA we consider the augmentation policy search problem
as a special case of hyperparameter schedule learning. Thus,
we leverage Population Based Training (PBT) : a hyperparameter search algorithm which
optimizes the parameters of a network jointly with their
hyperparameters to maximize performance. The output of
PBT is not an optimal hyperparameter conﬁguration but
rather a trained model and schedule of hyperparameters. In
PBA, we are only interested in the learned schedule and
discard the child model result (similar to AutoAugment).
This learned augmentation schedule can then be used to
improve the training of different (i.e., larger and costlier to
train) models on the same dataset.
PBT executes as follows. To start, a ﬁxed population of
models are randomly initialized and trained in parallel. At
certain intervals, an “exploit-and-explore” procedure is applied to the worse performing population members, where
the model clones the weights of a better performing model
(i.e., exploitation) and then perturbs the hyperparameters of
the cloned model to search in the hyperparameter space (i.e.,
exploration). Because the weights of the models are cloned
and never reinitialized, the total computation required is the
computation to train a single model times the population
The Ray framework includes a
parallelized implementation of PBT ( 
readthedocs.io/en/latest/tune.html) which
handles the exploit-and-explore process in the backend. This
Algorithm 1 The PBA augmentation policy template, the
parameters of which are optimized by PBT. The parameter
vector is a vector of (op, prob, mag) tuples. There are two
instances of each op in the vector, and this parameter cannot
be changed. PBT learns a schedule for the prob and mag
parameters during the course of training a population of
child models.
Input: data x, parameters p, [list of (op, prob, mag)]
Shufﬂe parameters
Set count = with probability [0.2, 0.3, 0.5]
for (op, prob, mag) in p do
if count = 0 then
if random(0, 1) < prob then
count = count −1
x = op(x, mag)
implementation allows a user to deploy multiple trials on
the same GPU, provided there is enough GPU memory.
When the models only require a fraction of the computation
resources and memory of an entire GPU, as in this work,
training is sped up by fully utilizing the GPU.
3.3. Policy Search Space
In Algorithm 1, we describe the augmentation policy function used in PBA and the optimization strategy we adapt
from PBT. The challenge here is deﬁning a smooth parameterization of the augmentation policy so that PBT can incrementally adopt good augmentations, while still allowing
good coverage of the search space within a limited number
of perturbations.
To make PBA more directly comparable with AutoAugment,
we attempt to preserve the qualities of the AutoAugment
formulation when possible, using the same augmentation
functions, a similar number of total augmentation functions
in the policy, and the same set of magnitude variants per
function as applicable. Our augmentation policy search
space consists of the augmentation operations from AutoAugment, less SamplePairing , for a total of
15 operations. We use the same code and magnitude options
derived from PIL operations to ensure a fair comparison
based on search algorithm performance.
We deﬁne a set of hyperparameters consisting of two magnitude and probability values for each operation, with discrete
possibilities for each. This gives us 30 operation-magnitudeprobability tuples for a total of 60 hyperparameters. Like
AutoAugment, we have 10 possibilities for magnitude and
Population Based Augmentation
Algorithm 2 The PBA explore function. Probability parameters have possible values from 0% to 100% in increments
of 10%, and magnitdue parameters have values from 0 to 9
inclusive.
Input: Params p, list of augmentation hyperparameters
for param in p do
if random(0, 1) < 0.2 then
Resample param uniformly from domain
amt = uniformly at random
if random(0, 1) < 0.5 then
param = param + amt
param = param −amt
Clip param to stay in domain
11 possibilities for probability. When we apply augmentations to data, we ﬁrst shufﬂe all operations and then apply
operations in turn until a limit is reached. This limit can
range from 0 to 2 operations.
Similar to the AutoAugment policy, PBA allows for two
of the same augmentation operations to be applied to a single batch of data. Due to the use of a schedule, a single
operation the PBA search space includes (10 × 11)30 ≈
1.75 × 1061 possibilities, compared to 2.8 × 1032 for AutoAugment. For discussion about the hyperparameter priors
encoded within this policy template, see Section 4.3. Our
policy template formulation is primarily motivated by the
need to directly compare results with AutoAugment rather
than optimizing for the best possible policy template.
3.4. PBA Implementation
We describe the formulation of our search in the format of
PBT experiments .
Step: In each iteration we run an epoch of gradient descent.
Eval: We evaluate a trial on a validation set not used for
PBT training and disjoint from the ﬁnal test set.
Ready: A trial is ready to go through the exploit-andexplore process once 3 steps/epochs have elapsed.
Exploit: We use Truncation Selection , where a trial in the bottom 25% of the population
clones the weights and hyperparameters of a model in the
Explore: See Algorithm 2 for the exploration function. For
each hyperparameter, we either uniformly resample from
all possible values or perturb the original value.
4. Experiments and Analysis
In this section, we describe experiments we ran to better
understand the performance and characteristics of the PBA
algorithm. We seek to answer the following questions:
1. How does classiﬁcation accuracy and computational
cost of PBA compare to state-of-the-art and random
search baselines?
2. Where does the performance gain of PBA come from –
does having a schedule of augmentations really matter,
or is a stationary distribution sufﬁcient?
3. How does PBA performance scale with the amount of
computation used?
4. How sensitive is PBA to the hyperparameters of the
optimization procedure – did we just move part of the
optimization process into hyperparameter selection?
4.1. Comparison with Baselines
Accuracy (CIFAR-10, CIFAR-100, SVHN) We ﬁrst compare PBA to other state-of-the-art methods on the CIFAR-10
 and SVHN datasets.
Following , we search over a “reduced”
dataset of 4,000 and 1,000 training images for CIFAR-10
and SVHN respectively. Comparatively, CIFAR-10 has a total of 50,000 training images and SVHN has 73,257 training
images with an additional 531,131 “extra” training images.
PBA is run with 16 total trials on the Wide-ResNet-40-2
model to generate augmentation schedules.
For the augmentation policy, we initialize all magnitude
and probability values to 0, as we hypothesize that less augmentation is required early in training when the validation
accuracy is close to training accuracy. However, since training error decreases faster than validation error as training
progresses, more regularization should be required, so we
expect the probability and magnitude values to increase as
training progresses. This would counteract overﬁtting as we
introduce the model to more diverse data.
We then train models on the full training datasets, using
the highest performing augmentation schedules discovered
on the reduced datasets. The schedule learned on reduced
CIFAR-10 is used to train ﬁnal models on reduced CIFAR-
10, CIFAR-10, and CIFAR-100. The schedule learned on
reduced SVHN is used to train ﬁnal models on reduced
SVHN and SVHN. We report results in Table 2. Each model
is evaluated ﬁve times with different random initializations,
and we report both the mean and standard deviation test set
error in %.
The models we evaluate on include: Wide-ResNet-28-10
 , Shake-Shake (26 2x32d)
Population Based Augmentation
Table 2. Test set error (%) on CIFAR-10, CIFAR-100, and SVHN. Lower is better. The baseline applies regular random crop and horizontal
ﬂip operations. Cutout is applied on top of the baseline, and PBA/AutoAugment are applied on top of Cutout. We report the mean ﬁnal
test error of 5 random model initializations. We used the models: Wide-ResNet-28-10 , Shake-Shake
(26 2x32d) , Shake-Shake (26 2x96d) , Shake-Shake (26 2x112d) , and PyramidNet
with ShakeDrop . Code for AA eval on SVHN was not released, so differences between our
implementations could impact results. Thus, we report AA* from our re-evaluation.
Wide-ResNet-28-10
2.58 ± 0.062
Shake-Shake (26 2x32d)
2.54 ± 0.10
Shake-Shake (26 2x96d)
2.03 ± 0.11
Shake-Shake (26 2x112d)
2.03 ± 0.080
PyramidNet+ShakeDrop
1.46 ± 0.077
Reduced CIFAR-10
Wide-ResNet-28-10
12.82 ± 0.26
Shake-Shake (26 2x96d)
10.64 ± 0.22
Wide-ResNet-28-10
16.73 ± 0.15
Shake-Shake (26 2x96d)
15.31 ± 0.28
PyramidNet+ShakeDrop
10.94 ± 0.094
Wide-ResNet-28-10
1.13 ± 0.024
1.18 ± 0.022
Shake-Shake (26 2x96d)
1.10 ± 0.032
1.13 ± 0.029
Reduced SVHN
Wide-ResNet-28-10
7.83 ± 0.22
Shake-Shake (26 2x96d)
6.46 ± 0.13
 , Shake-Shake (26 2x96d) ,
Shake-Shake (26 2x112d) , and Pyramid-
Net with ShakeDrop .
PyramidNet with Shake-Drop uses a batch size of 64, and
all other models use a batch size of 128. For Wide-ResNet-
28-10 and Wide-ResNet-40-2 trained on SVHN, we use the
step learning rate schedule proposed in , and for all others we use a cosine learning rate with
one annealing cycle . For all
models, we use gradient clipping with magnitude 5. For
speciﬁc learning rate and weight decay values, see the supplementary materials.
Additionally, we report Baseline, Cutout, and AutoAugment
(AA) results found in . For baseline,
standard horizontal ﬂipping and cropping augmentations
were used. The training data is also normalized by the respective dataset statistics. For Cutout, a patch of size 16x16
is used for all CIFAR datasets, and size 20x20 for SVHN
datasets. This applied with 100% chance to each image. AutoAugment and PBA apply additional augmentations on top
of the Cutout set (note that this possibly includes a second
application of Cutout). The exception is Reduced SVHN,
where the ﬁrst 16x16 Cutout operation is removed as it was
found to reduce performance.
CIFAR-10 On Reduced CIFAR-10, we run PBA for 200
epochs, creating a policy schedule deﬁned over 200 epochs.
To extend the policy to Shake-Shake and PyramidNet models trained for 1800 epochs, we scale the length of the original schedule linearly.
While model accuracy on Reduced CIFAR-10 would have
likely been improved with hyperparamater tuning for the
reduced dataset size and smaller Wide-ResNet-40-2 model,
our result shows that no hyperparameter tuning is required
for high performance.
Overall, the PBA learned schedule leads AutoAugment
slightly on PyramidNet and Wide-ResNet-28-10, and performs comparably on Shake-Shake models, showing that
the learned schedule is competitive with state-of-the-art.
We visualize the discovered schedule used in training our
ﬁnal CIFAR models in Figure 4. For the AutoContrast,
Equalize, and Invert augmentations, magnitude values were
ignored. From the probability values, our schedule seems to
contain all augmentations to at least a moderate degree at
some point, which is reasonable given our random perturb
exploration method. However, there is emphasis on Cutout,
Posterize, Invert, Equalize, and AutoContrast throughout
the schedule.
 suggests that color-based transformations are more useful on CIFAR compared to geometric
ones, and our results also indicate this. However, they also
found that the Invert transformation is almost never used,
while it was very common in our schedule. A possible
explanation may be that a model is able to better adapt to
Invert when using a nonstationary policy. PBA may be exploring systematically different parts of the design space
than AutoAugment. Alternatively, it may be that by the
randomness in PBA, Cutout was introduced and impacted
performance. It may be fruitful to explore combinations
Population Based Augmentation
(a) Operation magnitudes increase rapidly in the initial phase of
training, eventually reaching a steady state around epoch 130.
(b) Normalized plot of operation probability parameters over time.
The distribution ﬂattens out towards the end of training.
Figure 4. Plots showing the evolution of PBA operation parameters
in the discovered schedule for CIFAR-10. Note that each operation
actually appears in the parameter list twice; we take the mean
parameter value for each operation in this visualization.
of PBA and AutoAugment to design nonstationary policies
with more precision from a RNN Controller.
CIFAR-100 We additionally evaluate on CIFAR-100 using
the same augmentation schedule discovered using Reduced
CIFAR-10. We ﬁnd that these results are also competitive
with AutoAugment and signiﬁcantly better than Baseline or
only applying Cutout.
SVHN We ran PBA for 160 epochs on a 1,000 image Reduced SVHN dataset to discover an augmentation policy
schedule without tuning any parameters of the algorithm.
See the appendix for a visualization of an example PBA
policy on the SVHN dataset.
We then trained models on both the Reduced SVHN and
SVHN Full (core training data with extra data), using the
discovered schedule. Except for the Wide-ResNet-28-10
model on Reduced SVHN, training was done without tuning,
Figure 5. Plot of the expected best child test accuracy after a given
number of random trials on Wide-ResNet-40-2. Random policy
schedules were generated by randomly selecting intervals of length
between 1 and 40, and then selecting a random policy for the
interval. All values were selected uniformly from the domain.
using the hyperparamters from AutoAugment. We were
able to obtain a policy comparable with AutoAugment. This
demonstrates the robustness of the PBA algorithm across
Examining the learned policy schedule, we observe that
Cutout, Translate Y, Shear X, and Invert stand out as being present with high probability across all epochs. This
ﬁts with the ﬁndings of , indicating
that Invert and geometric transformations are successful in
SVHN because it is important to learn invariances to these
augmentations. From another perspective, all of the augmentations appear with reasonable probability at some point
in the schedule, which suggests that using a preliminary
strategy like AutoAugment to ﬁlter out poor performing
augmentations would be an interesting direction to explore.
Computational Cost AutoAugment samples and evaluates
∼15,000 distinct augmentation policies on child models,
which requires about 15000∗120 = 1.8m epochs of training.
In comparison, PBA leverages PBT to learn a schedule with
a population of 16 child models. PBA uses 200 epochs of
training per child model, for a total of 3200 epochs, or over
500x less compute than AutoAugment.
As a second baseline, we also train 250 child models with
randomly selected augmentation policies, and 250 child
models with randomly selected augmentation schedules. In
Figure 5, we use this data to plot the expected maximum
child model test accuracy after a given number of random
trials. As shown, it takes over 250 trials for the expected
child accuracy, which is strongly correlated with ﬁnal accuracy, to approach that reached by a single 16-trial PBA
run. Hence, PBA still provides over an order of magnitude
speedup here.
Population Based Augmentation
Table 3. Ablation study: We evaluate models on CIFAR-10 using a ﬁxed policy (the last policy of the PBA schedule learned on Reduced
CIFAR-10), shufﬂed schedule order, and a fully collapsed schedule, comparing to results with the original PBA schedule. See Section 4.2
for further explanation. We evaluate each model once, and some combinations were not evaluated due to cost considerations.
Fixed Policy
Order-shufﬂed
Fully-shufﬂed
Wide-ResNet-28-10
2.576 ± 0.062
Shake-Shake (26 2x32d)
2.54 ± 0.10
Shake-Shake (26 2x96d)
2.03 ± 0.11
Shake-Shake (26 2x112d)
2.03 ± 0.080
PyramidNet+ShakeDrop
1.46 ± 0.077
Real-time Overhead Since PBT trains all members of its
population simultaneously, the minimal real-time overhead
is just the time it takes to train one child model. In practice, there is a slight overhead from the mutation procedures
triggered by PBT, but the overall search time is still small
compared to the time to train the primary model. In contrast, AutoAugment leverages reinforcement-learning based
techniques, in which a Recurrent Neural Network (RNN)
controller is trained with the reinforcement learning algorithm Proximal Policy Optimization (PPO) . Using this strategy, new augmentation policies can
only be sampled and trained after the previous batch of samples has completed, so parallelization is limited to the batch
size of the PPO update.
4.2. Does having a schedule matter?
PBA distinguishes itself from AutoAugment by learning
a augmentation policy schedule, where the distribution of
augmentation functions can vary as a function of the training epoch. To check whether a schedule contributes to
performance, we try training the model using (1) the last
augmentation policy of the PBA schedule as a ﬁxed policy,
(2) the augmentation schedule with the order of policies
shufﬂed but the duration of each policy ﬁxed, and (3) the
augmentation schedule collapsed into a time-independent
stationary distribution of augmentations (i.e., a policy is
sampled independently for each batch of data, where each
policy is weighted by its duration).
In Table 3, we see that training with the PBA Fixed Policy
degrades accuracy by ∼10% percent on average, which
is signiﬁcantly worse than training with the full schedule. Compared to using Cutout, the ﬁxed policy gives up
∼50% of gains on Wide-ResNet-28-10, Shake-Shake 32,
and Shake-Shake 96, and ∼10% of gains on Shake-Shake
112 and PyramidNet. This shows that the augmentation
schedule improves accuracy over a ﬁxed policy, especially
on smaller models.
Similarly, when we evaluated the shufﬂed schedules (only
on Wide-ResNet-28-10), accuracy is also signiﬁcantly lower,
showing that a stationary distribution derived from the schedule does not emulate the schedule. We hypothesize that
schedule improves training by allowing ”easy” augmentations in the initial phase of training while still allowing
”harder” augmentations to be added later on.
4.3. Hyperparameter Tuning and Sensitivity
We did not tune the discrete space for magnitude or probability options to keep our policy easy to compare to AutoAugment. We have two copies of each operation, as the
AutoAugment sub-policy is able to contain two copies of
the same operation as well.
For the search algorithm, we lightly tuned the explore function and the distribution for count in Algorithm 1, the maximum number of augmentation functions to apply for each
batch of data. While we keep the maximum value of count
at 2 in line with AutoAugment’s length 2 subpolicy, there
may be room for performance improvement by carefully
tuning the distribution.
We tried perturbation intervals of 2 and 4 once, but did not
ﬁnd this value to be sensitive. We also tried to run PBT for
100 epochs, but found this to slightly decrease performance
when evaluated on models for 200 epochs.
It may be interesting to consider training a larger child
model (e.g, Shake-Shake) for 1,800 epochs to generate a
schedule over the full training duration and eliminate the
need to stretch the schedule. In a similar vein, an experiment
to use PBT directly on the full CIFAR-10 dataset or Wide-
ResNet-28-10 model may lead to better performance, and is
computationally feasible with PBA.
5. Conclusion
This paper introduces PBA, a novel formulation of data
augmentation search which quickly and efﬁciently learns
state-of-the-art augmentation policy schedules. PBA is simple to implement within any PBT framework, and we release
the code for PBA as open source.
Population Based Augmentation
Acknowledgements
We thank Richard Liaw, Dogus Cubuk, Quoc Le, and the
ICML reviewers for helpful discussion.