Deep Clustering via Joint Convolutional Autoencoder Embedding and Relative
Entropy Minimization
Kamran Ghasedi Dizaji†, Amirhossein Herandi‡, Cheng Deng♯, Weidong Cai♮, Heng Huang†∗
†Electrical and Computer Engineering, University of Pittsburgh, USA
‡Computer Science and Engineering, University of Texas at Arlington, USA
♯School of Electronic Engineering, Xidian University, China
♮School of Information Technologies, University of Sydney, Australia
 , , 
 , 
Image clustering is one of the most important computer
vision applications, which has been extensively studied in
literature. However, current clustering methods mostly suffer from lack of efﬁciency and scalability when dealing with
large-scale and high-dimensional data. In this paper, we
propose a new clustering model, called DEeP Embedded
RegularIzed ClusTering (DEPICT), which efﬁciently maps
data into a discriminative embedding subspace and precisely predicts cluster assignments. DEPICT generally consists of a multinomial logistic regression function stacked
on top of a multi-layer convolutional autoencoder. We de-
ﬁne a clustering objective function using relative entropy
(KL divergence) minimization, regularized by a prior for
the frequency of cluster assignments. An alternating strategy is then derived to optimize the objective by updating
parameters and estimating cluster assignments. Furthermore, we employ the reconstruction loss functions in our
autoencoder, as a data-dependent regularization term, to
prevent the deep embedding function from overﬁtting. In
order to beneﬁt from end-to-end optimization and eliminate the necessity for layer-wise pretraining, we introduce a
joint learning framework to minimize the uniﬁed clustering
and reconstruction loss functions together and train all network layers simultaneously. Experimental results indicate
the superiority and faster running time of DEPICT in realworld clustering tasks, where no labeled data is available
for hyper-parameter tuning.
1. Introduction
Clustering is one of the fundamental research topics in
machine learning and computer vision research, and it has
∗Corresponding Author.
This work was
partially supported by U.S. NIH R01 AG049371, NSF IIS 1302675, IIS
1344152, DBI 1356628, IIS 1619308, IIS 1633753.
(a) Raw Data
(b) NonJoint DEPICT
(c) Joint DEPICT
Figure 1: Visualization to show the discriminative capability of embedding subspaces using MNIST-test data. (a)
The space of raw data. (b) The embedding subspace of
non-joint DEPICT using standard stacked denoising autoencoder (SdA). (c) The embedding subspace of joint DE-
PICT using our joint learning approach (MdA).
gained signiﬁcant attention for discriminative representation of data points without any need for supervisory signals. The clustering problem has been extensively studied in
various applications; however, the performance of standard
clustering algorithms is adversely affected when dealing
with high-dimensional data, and their time complexity dramatically increases when working with large-scale datasets.
Tackling the curse of dimensionality, previous studies often initially project data into a low-dimensional manifold,
and then cluster the embedded data in this new subspace
 . Handling large-scale datasets, there are also
several studies which select only a subset of data points to
accelerate the clustering process .
However, dealing with real-world image data, existing
clustering algorithms suffer from different issues: 1) Using
inﬂexible hand-crafted features, which do not depend on the
input data distribution; 2) Using shallow and linear embedding functions, which are not able to capture the non-linear
nature of data; 3) Non-joint embedding and clustering processes, which do not result in an optimal embedding subarXiv:1704.06327v3 [cs.LG] 9 Aug 2017
space for clustering; 4) Complicated clustering algorithms
that require tuning the hyper-parameters using labeled data,
which is not feasible in real-world clustering tasks.
To address the mentioned challenging issues, we propose
a new clustering algorithm, called deep embedded regularized clustering (DEPICT), which exploits the advantages of
both discriminative clustering methods and deep embedding
models. DEPICT generally consists of two main parts, a
multinomial logistic regression (soft-max) layer stacked on
top of a multi-layer convolutional autoencoder. The softmax layer along with the encoder pathway can be considered as a discriminative clustering model, which is trained
using the relative entropy (KL divergence) minimization.
We further add a regularization term based on a prior distribution for the frequency of cluster assignments. The regularization term penalizes unbalanced cluster assignments
and prevents allocating clusters to outlier samples.
Although this deep clustering model is ﬂexible enough
to discriminate the complex real-world input data, it can
easily get stuck in non-optimal local minima during training and result in undesirable cluster assignments. In order
to avoid overﬁtting the deep clustering model to spurious
data correlations, we utilize the reconstruction loss function
of autoencoder models as a data-dependent regularization
term for training parameters.
In order to beneﬁt from a joint learning framework for
embedding and clustering, we introduce a uniﬁed objective
function including our clustering and auxiliary reconstruction loss functions. We then employ an alternating approach
to efﬁciently update the parameters and estimate the cluster assignments. It is worth mentioning that in the standard learning approach for training a multi-layer autoencoder, the encoder and decoder parameters are ﬁrst pretrained layer-wise using the reconstruction loss, and the
encoder parameters are then ﬁne-tuned using the objective
function of the main task . However, it has been argued that the non-joint ﬁne-tuning step may overwrite the
encoder parameters entirely and consequently cancel out the
beneﬁt of the layer-wise pretraining step . To avoid this
problem and achieve optimal joint learning results, we simultaneously train all of the encoder and decoder layers together along with the soft-max layer. To do so, we sum up
the squared error reconstruction loss functions between the
decoder and their corresponding (clean) encoder layers and
add them to the clustering loss function.
Figure 1 demonstrates the importance of our joint learning strategy by comparing different data representations
of MNIST-test data points using principle component
analysis (PCA) visualization. The ﬁrst ﬁgure indicates the
raw data representation; The second one shows the data
points in the embedding subspace of non-joint DEPICT, in
which the model is trained using the standard layer-wise
stacked denoising autoencoder (SdA); The third one visualizes the data points in the embedding subspace of joint
DEPICT, in which the model is trained using our multilayer denoising autoencoder learning approach (MdA). As
shown, joint DEPICT using MdA learning approach provides a signiﬁcantly more discriminative embedding subspace compared to non-joint DEPICT using standard SdA
learning approach.
Moreover, experimental results show that DEPICT
achieves superior or competitive results compared to the
state-of-the-art algorithms on the image benchmark datasets
while having faster running times. In addition, we compared different learning strategies for DEPICT, and con-
ﬁrm that our joint learning approach has the best results.
It should also be noted that DEPICT does not require any
hyper-parameter tuning using supervisory signals, and consequently is a better candidate for the real-world clustering
tasks. Thus, we summarize the advantages of DEPICT as:
• Providing a discriminative non-linear embedding subspace via the deep convolutional autoencoder;
• Introducing an end-to-end joint learning approach,
which uniﬁes the clustering and embedding tasks, and
avoids layer-wise pretraining;
• Achieving superior or competitive clustering results
on high-dimensional and large-scale datasets with no
need for hyper-parameter tuning using labeled data.
2. Related Works
There is a large number of clustering algorithms in literature, which can be grouped into different perspectives, such
as hierarchical , centroid-based ,
graph-based , sequential (temporal) , regression model based , and subspace
clustering models .
In another sense, they
are generally divided into two subcategories, generative and
discriminative clustering algorithms. The generative algorithms like K-means and Gaussian mixture model explicitly represent the clusters using geometric properties of
the feature space, and model the categories via the statistical
distributions of input data. Unlike the generative clustering
algorithms, the discriminative methods directly identify the
categories using their separating hyperplanes regardless of
data distribution. Information theoretic , maxmargin , and spectral graph algorithms are examples of discriminative clustering models. Generally it has
been argued that the discriminative models often have better results compared to their generative counterparts, since
they have fewer assumptions about the data distribution and
directly separate the clusters, but their training can suffer
from overﬁtting or getting stuck in undesirable local minima . Our DEPICT algorithm is also a discriminative clustering model, but it beneﬁts from the auxiliary
reconstruction task of autoencoder to alleviate this issues in
training of our discriminative clustering algorithm.
There are also several studies regarding the combination of clustering with feature embedding learning. Ye et
al. introduced a kernelized K-means algorithm, denoted
by DisKmeans, where embedding to a lower dimensional
subspace via linear discriminant analysis (LDA) is jointly
learned with K-means cluster assignments . proposed to a new method to simultaneously conduct both clustering and feature embedding/selection tasks to achieve better performance. But these models suffer from having shallow and linear embedding functions, which cannot represent the non-linearity of real-world data.
A joint learning framework for updating code books and
estimating image clusters was proposed in while SIFT
features are used as input data. A deep structure, named
TAGnet was introduced in , where two layers of sparse
coding followed by a clustering algorithm are trained with
an alternating learning approach. Similar work is presented
in that formulates a joint optimization framework for
discriminative clustering and feature extraction using sparse
coding. However, the inference complexity of sparse coding forces the model in to reduce the dimension of
input data with PCA and the model in to use an approximate solution. Hand-crafted features and dimension
reduction techniques degrade the clustering performance by
neglecting the distribution of input data.
Tian et al. learned a non-linear embedding of the afﬁnity
graph using a stacked autoencoder, and then obtained the
clusters in the embedding subspace via K-means . Trigeorgis et al. extended semi non-negative matrix factorization (semi-NMF) to stacked multi-layer (deep) semi-NMF
to capture the abstract information in the top layer. Afterwards, they run K-means over the embedding subspace for
cluster assignments . More recently, Xie et al. employed denoising stacked autoencoder learning approach,
and ﬁrst pretrained the model layer-wise and then ﬁne-tuned
the encoder pathway stacked by a clustering algorithm using Kullback-Leibler divergence minimization . Unlike
these models that require layer-wise pretraining as well as
non-joint embedding and clustering learning, DEPICT utilizes an end-to-end optimization for training all network
layers simultaneously using the uniﬁed clustering and reconstruction loss functions.
Yang et al. introduced a new clustering model, named
JULE, based on a recurrent framework, where data is represented via a convolutional neural network and embedded
data is iteratively clustered using an agglomerative clustering algorithm . They derived a uniﬁed loss function
consisting of the merging process for agglomerative clustering and updating the parameters of the deep representation.
While JULE achieved good results using the joint learning
approach, it requires tuning of a large number of hyperparameters, which is not practical in real-world clustering
tasks. In contrast, our model does not need any supervisory
signals for hyper-parameter tuning.
3. Deep Embedded Regularized Clustering
In this section, we ﬁrst introduce the clustering objective function and the corresponding optimization algorithm,
which alternates between estimating the cluster assignments
and updating model parameters.
Afterwards, we show
the architecture of DEPICT and provide the joint learning
framework to simultaneously train all network layers using
the uniﬁed clustering and reconstruction loss functions.
3.1. DEPICT Algorithm
Let’s consider the clustering task of N samples, X =
[x1, ..., xn], into K categories, where each sample xi ∈
Rdx. Using the embedding function, ϕW : X →Z, we
are able to map raw samples into the embedding subspace
Z = [z1, ..., zn], where each zi ∈Rdz has a much lower dimension compared to the input data (i.e. dz ≪dx). Given
the embedded features, we use a multinomial logistic regression (soft-max) function fθ : Z →Y to predict the
probabilistic cluster assignments as follows.
pik = P(yi = k|zi, Θ) =
where Θ = [θ1, ..., θk] ∈Rdz×K are the soft-max function parameters, and pik indicates the probability of the i-th
sample belonging to the k-th cluster.
In order to deﬁne our clustering objective function, we
employ an auxiliary target variable Q to reﬁne the model
predictions iteratively.
To do so, we ﬁrst use Kullback-
Leibler (KL) divergence to decrease the distance between
the model prediction P and the target variable Q.
L = KL(Q∥P) = 1
qik log qik
In order to avoid degenerate solutions, which allocate most
of the samples to a few clusters or assign a cluster to outlier
samples, we aim to impose a regularization term to the target variable. To this end, we ﬁrst deﬁne the empirical label
distribution of target variables as:
fk = P(y = k) = 1
where fk can be considered as the soft frequency of cluster
assignments in the target distribution. Using this empirical distribution, we are able to enforce our preference for
having balanced assignments by adding the following KL
divergence to the loss function.
L = KL(Q∥P) + KL(f∥u)
qik log qik
qik log qik
+ qik log fk
where u is the uniform prior for the empirical label distribution. While the ﬁrst term in the objective minimizes the
distance between the target and model prediction distributions, the second term balances the frequency of clusters
in the target variables. Utilizing the balanced target variables, we can force the model to have more balanced predictions (cluster assignments) P indirectly. It is also simple
to change the prior from the uniform distribution to any arbitrary distribution in the objective function if there is any
extra knowledge about the frequency of clusters.
An alternating learning approach is utilized to optimize
the objective function. Using this approach, we estimate the
target variables Q via ﬁxed parameters (expectation step),
and update the parameters while the target variables Q are
assumed to be known (maximization step). The problem to
infer the target variable Q has the following objective:
qik log qik
+ qik log fk
where the target variables are constrained to P
k qik = 1.
This problem can be solved using ﬁrst order methods, such
as gradient descent, projected gradient descent, and Nesterov optimal method , which only require the objective
function value and its (sub)gradient at each iteration. In the
following equation, we show the partial derivative of the
objective function with respect to the target variables.
Investigating this problem more carefully, we approximate
the gradient in Eq.(6) by removing the second term, since
the number of samples N is often big enough to ignore the
second term. Setting the gradient equal to zero, we are now
able to compute the closed form solution for Q accordingly.
k′ pik′/(P
For the maximization step, we update the network parameters ψ = {Θ, W} using the estimated target variables with
the following objective function.
qik log pik ,
Interestingly, this problem can be considered as a standard
cross entropy loss function for classiﬁcation tasks, and the
parameters of soft-max layer Θ and embedding function W
can be efﬁciently updated by backpropagating the error.
3.2. DEPICT Architecture
In this section, we extend our general clustering loss
function using a denoising autoencoder. The deep embedding function is useful for capturing the non-linear nature
of input data; However, it may overﬁt to spurious data correlations and get stuck in undesirable local minima during training. To avoid this overﬁtting, we employ autoencoder structures and use the reconstruction loss function as
a data-dependent regularization for training the parameters.
Therefore, we design DEPICT to consist of a soft-max layer
stacked on top of a multi-layer convolutional autoencoder.
Due to the promising performance of strided convolutional
layers in , we employ convolutional layers in our encoder and strided convolutional layers in the decoder pathways, and avoid deterministic spatial pooling layers (like
max-pooling). Strided convolutional layers allow the network to learn its own spatial upsampling, providing a better
generation capability.
Unlike the standard learning approach for denoising autoencoders, which contains layer-wise pretraining and then
ﬁne-tuning, we simultaneously learn all of the autoencoder
and soft-max layers. As shown in Figure 2, DEPICT consists of the following components:
1) Corrupted feedforward (encoder) pathway maps the
noisy input data into the embedding subspace using a few
convolutional layers followed by a fully connected layer.
The following equation indicates the output of each layer in
the noisy encoder pathway.
˜zl = Dropout
where ˜zl are the noisy features of the l-th layer, Dropout
is a stochastic mask function that randomly sets a subset of
its inputs to zero , g is the activation function of convolutional or fully connected layers, and Wl
e indicates the
weights of the l-th layer in the encoder. Note that the ﬁrst
layer features, ˜z0, are equal to the noisy input data, ˜x.
2) Followed by the corrupted encoder, the decoder pathway
reconstructs the input data through a fully connected and
multiple strided convolutional layers as follows,
ˆzl−1 = g(Wl
where ˆzl is the l-th reconstruction layer output, and Wl
shows the weights for the l-th layer of the decoder. Note
that input reconstruction, ˆx, is equal to ˆz0.
Figure 2: Architecture of DEPICT for CMU-PIE dataset. DEPICT consists of a soft-max layer stacked on top of a multilayer convolutional autoencoder. In order to illustrate the joint learning framework, we consider the following four pathways
for DEPICT: Noisy (corrupted) encoder, Decoder, Clean encoder and Soft-max layer. The clustering loss function, LE, is
applied on the noisy pathway, and the reconstruction loss functions, L2, are between the decoder and clean encoder layers.
The output size of convolutional layers, kernel sizes, strides (S), paddings (P) and crops (C) are also shown.
3) Clean feedforward (encoder) pathway shares its weights
with the corrupted encoder, and infers the clean embedded
features. The following equation shows the outputs of the
clean encoder, which are used in the reconstruction loss
functions and obtaining the ﬁnal cluster assignments.
where zl is the clean output of the l-th layer in the encoder.
Consider the ﬁrst layer features z0 equal to input data x.
4) Given the top layer of the corrupted and clean encoder
pathways as the embedding subspace, the soft-max layer
obtains the cluster assignments using Eq.(1).
Note that we compute target variables Q using the clean
pathway, and model prediction ˜P via the corrupted pathway. Hence, the clustering loss function KL(Q∥˜P) forces
the model to have invariant features with respect to noise.
In other words, the model is assumed to have a dual role:
a clean model, which is used to compute the more accurate target variables; and a noisy model, which is trained to
achieve noise-invariant predictions.
As a crucial point, DEPICT algorithm provides a joint
learning framework that optimizes the soft-max and autoencoder parameters together.
qik log ˜pik + 1
Algorithm 1: DEPICT Algorithm
1 Initialize Q using a clustering algorithm
2 while not converged do
qik log ˜pik + 1
ik ∝exp(θT
ik ∝pik/(P
i| is the output size of the l-th hidden layer (input
for l = 0), and L is the depth of the autoencoder model.
The beneﬁt of joint learning frameworks for training multi-layer autoencoders is also reported in semisupervised classiﬁcation tasks . However, DEPICT
is different from previous studies, since it is designed for the
unsupervised clustering task, it also does not require maxpooling switches used in stacked what-where autoencoder
(SWWAE) , and lateral (skip) connections between encoder and decoder layers used in ladder network . Algorithm 1 shows a brief description of DEPICT algorithm.
4. Experiments
In this section, we ﬁrst evaluate DEPICT1 in comparison
with state-of-the-art clustering methods on several bench-
1Our code is available in 
mark image datasets. Then, the running speed of the best
clustering models are compared. Moreover, we examine
different learning approaches for training DEPICT. Finally,
we analyze the performance of DEPICT model on semisupervised classiﬁcation tasks.
Datasets: In order to show that DEPICT works well with
various kinds of datasets, we have chosen the following
handwritten digit and face image datasets. Considering that
clustering tasks are fully unsupervised, we concatenate the
training and testing samples when applicable. MNIST-full:
A dataset containing a total of 70,000 handwritten digits
with 60,000 training and 10,000 testing samples, each being a 32 by 32 monochrome image . MNIST-test: A
dataset which only consists of the testing part of MNIST-full
data. USPS: It is a handwritten digits dataset from the USPS
postal service, containing 11,000 samples of 16 by 16 images. CMU-PIE: A dataset including 32 by 32 face images
of 68 people with 4 different expressions . Youtube-
Face (YTF): Following , we choose the ﬁrst 41 subjects
of YTF dataset. Faces inside images are ﬁrst cropped and
then resized to 55 by 55 sizes . FRGC: Using the 20
random selected subjects in from the original dataset,
we collect 2,462 face images. Similarly, we ﬁrst crop the
face regions and resize them into 32 by 32 images. Table 1
provides a brief description of each dataset.
# Dimensions
MNIST-full
MNIST-test
Table 1: Dataset Descriptions
Clustering Metrics: We have used 2 of the most popular
evaluation criteria widely used for clustering algorithms, accuracy (ACC) and normalized mutual information (NMI).
The best mapping between cluster assignments and true labels is computed using the Hungarian algorithm to
measure accuracy.
NMI calculates the normalized measure of similarity between two labels of the same data .
Results of NMI do not change by permutations of clusters
(classes), and they are normalized to have range, with
0 meaning no correlation and 1 exhibiting perfect correlation.
4.1. Evaluation of Clustering Algorithm
Alternative Models: We compare our clustering model,
DEPICT, with several baseline and state-of-the-art clustering algorithms, including K-means, normalized cuts (N-
Cuts) , self-tuning spectral clustering (SC-ST) ,
large-scale spectral clustering (SC-LS) , graph degree
linkage-based agglomerative clustering (AC-GDL) , agglomerative clustering via path integral (AC-PIC) ,
spectral embedded clustering (SEC) , local discriminant models and global integration (LDMGI) , NMF
with deep model (NMF-D) , task-speciﬁc clustering
with deep model (TSC-D) , deep embedded clustering
(DEC) , and joint unsupervised learning (JULE) .
Implementation Details: We use a common architecture
for DEPICT and avoid tuning any hyper-parameters using
the labeled data in order to provide a practical algorithm
for real-world clustering tasks. For all datasets, we consider two convolutional layers followed by a fully connected
layer in encoder and decoder pathways. While for all convolutional layers, the feature map size is 50 and the kernel
size is about 5 × 5, the dimension of the embedding subspace is set equal to the number of clusters in each dataset.
We also pick the proper stride, padding and crop to have
an output size of about 10 × 10 in the second convolutional layer. Inspired by , we consider leaky rectiﬁed
(leaky RELU) non-linearity as the activation function
of convolutional and fully connected layers, except in the
last layer of encoder and ﬁrst layer of decoder, which have
Tanh non-linearity functions. Consequently, we normalize
the image intensities to be in the range of [−1, 1]. Moreover,
we set the learning rate and dropout to 10−4 and 0.1 respectively, adopt adam as our optimization method with the default hyper-parameters β1 = 0.9, β2 = 0.999, ϵ = 1e −08
 . The weights of convolutional and fully connected layers are all initialized by Xavier approach . Since the clustering assignments in the ﬁrst iterations are random and not
reliable for clustering loss, we ﬁrst train DEPICT without
clustering loss function for a while, then initialize the clustering assignment qik by clustering the embedding subspace
features via simple algorithms like K-means or AC-PIC.
Quantitative Comparison: We run DEPICT and other
clustering methods on each dataset. We followed the implementation details for DEPICT and report the average results from 5 runs. For the rest, we present the best reported
results either from their original papers or from . For
unreported results on speciﬁc datasets, we run the released
code with hyper-parameters mentioned in the original papers, these results are marked by (∗) on top. But, when the
code is not publicly available, or running the released code
is not practical, we put dash marks (-) instead of the corresponding results. Moreover, we mention the number of
hyper-parameters that are tuned using supervisory signals
(labeled data) for each algorithm. Note that this number
only shows the quantity of hyper-parameters, which are set
differently for various datasets for better performance.
Table 2 reports the clustering metrics, normalized mutual information (NMI) and accuracy (ACC), of the algorithms on the aforementioned datasets. As shown, DEPICT
outperforms other algorithms on four datasets and achieves
MNIST-full
MNIST-test
Table 2: Clustering performance of different algorithms on image datasets based on accuracy (ACC) and normalized mutual
information (NMI). The numbers of tuned hyper-parameters (# tuned HPs) using the supervisory signals are also shown for
each algorithm. The results of alternative models are reported from original papers, except the ones marked by (∗) on top,
which are obtained by us running the released code. We put dash marks (-) for the results that are not practical to obtain.
competitive results on the remaining two. It should be noted
that we think hyper-parameter tuning using supervisory signals is not feasible in real-world clustering tasks, and hence
DEPICT is a signiﬁcantly better clustering algorithm compared to the alternative models in practice. For example,
DEC, SEC, and LDMGI report their best results by tuning
one hyper-parameter over nine different options, and JULE-
SF and JULE-RC achieve their good performance by tweaking several hyper-parameters over various datasets. However, we do not tune any hyper-parameters for DEPICT using the labeled data and only report the result with the same
(default) hyper-parameters for all datasets.
4.2. Running Time Comparison
In order to evaluate the efﬁciency of our clustering algorithm in dealing with large-scale and high dimensional
data, we compare the running speed of DEPICT with its
competing algorithms, JULE-SF and JULE-RC. Moreover,
the fast versions of JULE-SF and JULE-RC are also evaluated. Note that JULE-SF(fast) and JULE-RC(fast) both
require tuning one extra hyper-parameter for each dataset
to achieve results similar to the original JULE algorithms
in Table 2 . We run DEPICT and the released code for
JULE algorithms2 on a machine with one Titan X pascal
GPU and a Xeon E5-2699 CPU.
Figure 3 illustrates the running time for DEPICT and
JULE algorithms on all datasets. Note that running times
of JULE-SF and JULE-RC are shown linearly from 0 to
30,000 and logarithmically for larger values for the sake of
readability. In total, JULE-RC, JULE-SF, JULE-RC(fast),
JULE-SF(fast) and DEPICT take 66.1, 35.5, 11.0, 6.6 and
4.7 hours respectively to run over all datasets. While all
2 
MNIST-full
MNIST-test
Run time(s)
Logarithmic
JULE-RC(fast)
JULE-SF(fast)
Figure 3: Running time comparison of DEPICT and JULE
clustering algorithms on image datasets.
algorithms have approximately similar running times on
small datasets (FRGC and CMU-PIE), when dealing with
the large-scale and high-dimensional datasets (MNIST-full
and YTF), DEPICT almost shows a linear increase in the
running time, but the running times of original JULE algorithms dramatically grow with the size and number of input data. This outcome again emphasizes the practicality of
DEPICT for real-world clustering tasks.
4.3. Evaluation of Learning Approach
In order to evaluate our joint learning approach, we compare several strategies for training DEPICT. For training a
multi-layer convolutional autoencoder, we analyze the following three approaches : 1) Standard stacked denoising autoencoder (SdA), in which the model is ﬁrst pretrained using the reconstruction loss function in a layer-wise manner,
and the encoder pathway is then ﬁne-tuned using the clustering objective function . 2) Another approach (RdA)
is suggested in to improve the SdA learning approach,
MNIST-full
MNIST-test
Deep-ConvAE +
Table 3: Clustering performance of different learning approaches, including SdA, RdA and MdA, for training DEPICT and
Deep-ConvAE+AC-PIC models.
in which all of the autoencoder layers are retrained after the
pretraining step, only using the reconstruction of input layer
while data is not corrupted by noise. The ﬁne-tuning step is
also done after the retraining step. 3) Our learning approach
(MdA), in which the whole model is trained simultaneously
using the joint reconstruction loss functions from all layers
along with the clustering objective function.
Furthermore, we also examine the effect of clustering
loss (through error back-prop) in constructing the embedding subspace.
To do so, we train a similar multi-layer
convolutional autoencoder (Deep-ConvAE) only using the
reconstruction loss function to generate the embedding subspace. Then, we run the best shallow clustering algorithm
(AC-PIC) on the embedded data. Hence, this model (Deep-
ConvAE+AC-PIC) differs from DEPICT in the sense that
its embedding subspace is only constructed using the reconstruction loss and does not involve the clustering loss.
Table 3 indicates the results of DEPICT and Deep-
ConvAE+AC-PIC when using the different learning approaches. As expected, DEPICT trained by our joint learning approach (MdA) consistently outperforms the other alternatives on all datasets. Interestingly, MdA learning approach shows promising results for Deep-ConvAE+AC-PIC
model, where only reconstruction losses are used to train
the embedding subspace. Thus, our learning approach is an
efﬁcient strategy for training autoencoder models due to its
superior results and fast end-to-end training.
4.4. Semi-Supervised Classiﬁcation Performance
Representation learning in an unsupervised manner or
using a small number of labeled data has recently attracted
great attention. Due to the potential of our model in learning a discriminative embedding subspace, we evaluate DE-
PICT in a semi-supervised classiﬁcation task. Following
the semi-supervised experiment settings , we train
our model using a small random subset of MNIST-training
dataset as labeled data and the remaining as unlabeled data.
The classiﬁcation error of DEPICT is then computed using the MNIST-test dataset, which is not seen during training. Compared to our unsupervised learning approach, we
only utilize the clusters corresponding to each labeled data
in training process. In particular, only for labeled data, the
cluster labels (assignments) are set using the best map tech-
T-SVM 
PL-DAE 
AtlasRBF 
M1+M2 
SWWAE 
Ladder 
Comparison of DEPICT and several semisupervised classiﬁcation models in MNIST dataset with different numbers of labeled data.
nique from the original classiﬁcation labels once, and then
they will be ﬁxed during the training step.
Table 4 shows the error results for several semisupervised classiﬁcation models using different numbers of
labeled data. Surprisingly, DEPICT achieves comparable
results with the state-of-the-art, despite the fact that the
semi-supervised classiﬁcation models use 10,000 validation
data to tune their hyper-parameters, DEPICT only employs
the labeled training data (e.g. 100) and does not tune any
hyper-parameters.
Although DEPICT is not mainly designed for classiﬁcation tasks, it outperforms several models including SWWAE , M1+M2 , and AtlasRBF
 , and has comparable results with the complicated Ladder network . These results further conﬁrm the discriminative quality of the embedding features of DEPICT.
5. Conclusion
In this paper, we proposed a new deep clustering model,
DEPICT, consisting of a soft-max layer stacked on top of a
multi-layer convolutional autoencoder. We employed a regularized relative entropy loss function for clustering, which
leads to balanced cluster assignments. Adopting our autoencoder reconstruction loss function enhanced the embedding learning. Furthermore, a joint learning framework was
introduced to train all network layers simultaneously and
avoid layer-wise pretraining. Experimental results showed
that DEPICT is a good candidate for real-world clustering
tasks, since it achieved superior or competitive results compared to alternative methods while having faster running
speed and not needing hyper-parameter tuning. Efﬁciency
of our joint learning approach was also conﬁrmed in clustering and semi-supervised classiﬁcation tasks.