Stand-Alone Self-Attention in Vision Models
Prajit Ramachandran∗
Niki Parmar∗
Ashish Vaswani∗
Irwan Bello
Anselm Levskaya†
Jonathon Shlens
Google Research, Brain Team
{prajit, nikip, avaswani}@google.com
Convolutions are a fundamental building block of modern computer vision systems.
Recent approaches have argued for going beyond convolutions in order to capture
long-range dependencies. These efforts focus on augmenting convolutional models
with content-based interactions, such as self-attention and non-local means, to
achieve gains on a number of vision tasks. The natural question that arises is
whether attention can be a stand-alone primitive for vision models instead of
serving as just an augmentation on top of convolutions. In developing and testing
a pure self-attention vision model, we verify that self-attention can indeed be an
effective stand-alone layer. A simple procedure of replacing all instances of spatial
convolutions with a form of self-attention applied to ResNet model produces a fully
self-attentional model that outperforms the baseline on ImageNet classiﬁcation with
12% fewer FLOPS and 29% fewer parameters. On COCO object detection, a pure
self-attention model matches the mAP of a baseline RetinaNet while having 39%
fewer FLOPS and 34% fewer parameters. Detailed ablation studies demonstrate
that self-attention is especially impactful when used in later layers. These results
establish that stand-alone self-attention is an important addition to the vision
practitioner’s toolbox.
Introduction
Digital image processing arose from the recognition that handcrafted linear ﬁlters applied convolutionally to pixelated imagery may subserve a large variety of applications . The success of digital
image processing as well as biological considerations inspired early practitioners of neural
networks to exploit convolutional representations in order to provide parameter-efﬁcient architectures
for learning representations on images .
The advent of large datasets and compute resources made convolution neural networks (CNNs)
the backbone for many computer vision applications . The ﬁeld of deep learning has in turn
largely shifted toward the design of architectures of CNNs for improving the performance on image
recognition , object detection and image segmentation . The translation
equivariance property of convolutions has provided a strong motivation for adopting them as a
building block for operating on images . However, capturing long range interactions for
convolutions is challenging because of their poor scaling properties with respect to large receptive
∗Denotes equal contribution. Ordering determined by random shufﬂe.
†Work done as a member of the Google AI Residency Program.
 
 
The problem of long range interactions has been tackled in sequence modeling through the use of
attention. Attention has enjoyed rich success in tasks such as language modeling , speech
recognition and neural captioning . Recently, attention modules have been employed in
discriminative computer vision models to boost the performance of traditional CNNs. Most notably,
a channel-based attention mechanism termed Squeeze-Excite may be applied to selectively modulate
the scale of CNN channels . Likewise, spatially-aware attention mechanisms have been used
to augment CNN architectures to provide contextual information for improving object detection 
and image classiﬁcation . These works have used global attention layers as an add-on to
existing convolutional models. This global form attends to all spatial locations of an input, limiting
its usage to small inputs which typically require signiﬁcant downsampling of the original image.
In this work, we ask the question if content-based interactions can serve as the primary primitive of
vision models instead of acting as an augmentation to convolution. To this end, we develop a simple
local self-attention layer that can be used for both small and large inputs. We leverage this stand-alone
attention layer to build a fully attentional vision model that outperforms the convolutional baseline
for both image classiﬁcation and object detection while being parameter and compute efﬁcient.
Furthermore, we conduct a number of ablations to better understand stand-alone attention. We hope
that this result will spur new research directions focused on exploring content-based interactions as a
mechanism for improving vision models.
Background
Convolutions
Convolutional neural networks (CNNs) are typically employed with small neighborhoods (i.e. kernel
sizes) to encourage the network to learn local correlation structures within a particular layer. Given
an input x ∈Rh×w×din with height h, width w, and input channels din, a local neighborhood Nk
around a pixel xij is extracted with spatial extent k, resulting in a region with shape k × k × din (see
Figure 1).
Given a learned weight matrix W ∈Rk×k×dout×din, the output yij ∈Rdout for position ij is deﬁned
by spatially summing the product of depthwise matrix multiplications of the input values:
a,b∈Nk(i,j)
Wi−a,j−b xab
where Nk(i, j) =
|a −i| ≤k/2, |b −j| ≤k/2
(see Figure 2). Importantly, CNNs employ
weight sharing, where W is reused for generating the output for all pixel positions ij. Weight
sharing enforces translation equivariance in the learned representation and consequently decouples
the parameter count of the convolution from the input size.
Figure 1: An example of a local window around
i = 3, j = 3 (one-indexed) with spatial extent
Figure 2: An example of a 3 × 3 convolution.
The output is the inner product between the
local window and the learned weights.
A wide array of machine learning applications have leveraged convolutions to achieve competitive
results including text-to-speech and generative sequence models . Several efforts have
reformulated convolutions to improve the predictive performance or the computational efﬁciency of a
model. Notably, depthwise-separable convolutions provide a low-rank factorization of spatial and
channel interactions . Such factorizations have allowed for the deployment of modern CNNs
on mobile and edge computing devices . Likewise, relaxing translation equivariance has been
explored in locally connected networks for various vision applications .
Self-Attention
Attention was introduced by for the encoder-decoder in a neural sequence transduction model
to allow for content-based summarization of information from a variable length source sentence.
The ability of attention to learn to focus on important regions within a context has made it a critical
component in neural transduction models for several modalities . Using attention as a
primary mechanism for representation learning has seen widespread adoption in deep learning after
 , which entirely replaced recurrence with self-attention. Self-attention is deﬁned as attention
applied to a single context instead of across multiple contexts (in other words, the query, keys,
and values, as deﬁned later in this section, are all extracted from the same context). The ability of
self-attention to directly model long-distance interactions and its parallelizability, which leverages
the strengths of modern hardware, has led to state-of-the-art models for various tasks .
An emerging theme of augmenting convolution models with self-attention has yielded gains in several
vision tasks. show that self-attention is an instantiation of non-local means and use it to
achieve gains in video classiﬁcation and object detection. also show improvements on image
classiﬁcation and achieve state-of-the-art results on video action recognition tasks with a variant
of non-local means. Concurrently, also see signiﬁcant gains in object detection and image
classiﬁcation through augmenting convolutional features with global self-attention features. This
paper goes beyond by removing convolutions and employing local self-attention across the
entirety of the network. Another concurrent work explores a similar line of thinking by proposing
a new content-based layer to be used across the model. This approach is complementary to our focus
on directly leveraging existing forms of self-attention for use across the vision model.
We now describe a stand-alone self-attention layer that can be used to replace spatial convolutions and
build a fully attentional model. The attention layer is developed with a focus on simplicity by reusing
innovations explored in prior works, and we leave it up to future work to develop novel attentional
Similar to a convolution, given a pixel xij ∈Rdin, we ﬁrst extract a local region of pixels in positions
ab ∈Nk(i, j) with spatial extent k centered around xij, which we call the memory block. This form
of local attention differs from prior work exploring attention in vision which have performed global
(i.e., all-to-all) attention between all pixels . Global attention can only be used after signiﬁcant
spatial downsampling has been applied to the input because it is computationally expensive, which
prevents its usage across all layers in a fully attentional model.
Single-headed attention for computing the pixel output yij ∈Rdout is then computed as follows (see
Figure 3):
a,b∈Nk(i,j)
where the queries qij = WQxij, keys kab = WKxab, and values vab = WV xab are linear transformations of the pixel in position ij and the neighborhood pixels. softmaxab denotes a softmax applied to
all logits computed in the neighborhood of ij. WQ, WK, WV ∈Rdout×din are all learned transforms.
While local self-attention aggregates spatial information over neighborhoods similar to convolutions
(Equation 1), the aggregation is done with a convex combination of value vectors with mixing
weights (softmaxab(·)) parametrized by content interactions. This computation is repeated for every
pixel ij. In practice, multiple attention heads are used to learn multiple distinct representations of
the input. It works by partitioning the pixel features xij depthwise into N groups xn
ij ∈Rdin/N,
computing single-headed attention on each group separately as above with different transforms
V ∈Rdout/N×din/N per head, and then concatenating the output representations into
the ﬁnal output yij ∈Rdout.
Figure 3: An example of a local attention layer over spatial
extent of k = 3.
Figure 4: An example of relative
distance computation.
The relative distances are computed with
respect to the position of the highlighted pixel. The format of distances is row offset, column offset.
As currently framed, no positional information is encoded in attention, which makes it permutation
equivariant, limiting expressivity for vision tasks. Sinusoidal embeddings based on the absolute
position of pixels in an image (ij) can be used , but early experimentation suggested that using
relative positional embeddings results in signiﬁcantly better accuracies. Instead, attention
with 2D relative position embeddings, relative attention, is used. Relative attention starts by deﬁning
the relative distance of ij to each position ab ∈Nk(i, j). The relative distance is factorized across
dimensions, so each element ab ∈Nk(i, j) receives two distances: a row offset a −i and column
offset b −j (see Figure 4). The row and column offsets are associated with an embedding ra−i
and rb−j respectively each with dimension 1
2dout. The row and column offset embeddings are
concatenated to form ra−i,b−j. This spatial-relative attention is now deﬁned as
a,b∈Nk(i,j)
ijkab + q⊤
ijra−i,b−j
Thus, the logit measuring the similarity between the query and an element in Nk(i, j) is modulated
both by the content of the element and the relative distance of the element from the query. Note that
by infusing relative position information, self-attention also enjoys translation equivariance, similar
to convolutions.
The parameter count of attention is independent of the size of spatial extent, whereas the parameter
count for convolution grows quadratically with spatial extent. The computational cost of attention
also grows slower with spatial extent compared to convolution with typical values of din and dout.
For example, if din = dout = 128, a convolution layer with k = 3 has the same computational cost
as an attention layer with k = 19.
Fully Attentional Vision Models
Given a local attention layer as a primitive, the question is how to construct a fully attentional
architecture. We achieve this in two steps:
Replacing Spatial Convolutions
A spatial convolution is deﬁned as a convolution with spatial extent k > 1. This deﬁnition excludes
1 × 1 convolutions, which may be viewed as a standard fully connected layer applied to each pixel
independently.3 This work explores the straightforward strategy of creating a fully attentional vision
model: take an existing convolutional architecture and replace every instance of a spatial convolution
with an attention layer. A 2 × 2 average pooling with stride 2 operation follows the attention layer
whenever spatial downsampling is required.
3Many deep learning libraries internally translate a 1 × 1 convolution to a simple matrix multiplication.
This work applies the transform on the ResNet family of architectures . The core building block
of a ResNet is a bottleneck block with a structure of a 1 × 1 down-projection convolution, a 3 × 3
spatial convolution, and a 1×1 up-projection convolution, followed by a residual connection between
the input of the block and the output of the last convolution in the block. The bottleneck block is
repeated multiple times to form the ResNet, with the output of one bottleneck block being the input
of the next bottleneck block. The proposed transform swaps the 3 × 3 spatial convolution with a
self-attention layer as deﬁned in Equation 3. All other structure, including the number of layers
and when spatial downsampling is applied, is preserved. This transformation strategy is simple but
possibly suboptimal. Crafting the architecture with attention as a core component, such as with
architecture search , holds the promise of deriving better architectures.
Replacing the Convolutional Stem
The initial layers of a CNN, sometimes referred to as the stem, play a critical role in learning local
features such as edges, which later layers use to identify global objects. Due to input images being
large, the stem typically differs from the core block, focusing on lightweight operations with spatial
downsampling . For example, in a ResNet, the stem is a 7 × 7 convolution with stride 2
followed by 3 × 3 max pooling with stride 2.
At the stem layer, the content is comprised of RGB pixels that are individually uninformative and
heavily spatially correlated. This property makes learning useful features such as edge detectors
difﬁcult for content-based mechanisms such as self-attention. Our early experiments verify that
using self-attention form described in Equation 3 in the stem underperforms compared to using the
convolution stem of ResNet.
The distance based weight parametrization of convolutions allows them to easily learn edge dectectors
and other local features necessary for higher layers. To bridge the gap between convolutions and
self-attention while not signiﬁcantly increasing computation, we inject distance based information
in the pointwise 1 × 1 convolution (WV ) through spatially-varying linear transformations. The
new value transformation is ˜vab = (P
m p(a, b, m)W m
V ) xab where multiple value matrices W m
combined through a convex combination of factors that are a function of the position of the pixel in
its neighborhood p(a, b, m). The position dependent factors are similar to convolutions, which learn
scalar weights dependent on the pixel location in a neighborhood. The stem is then comprised of
the attention layer with spatially aware value features followed by max pooling. For simplicity, the
attention receptive ﬁeld aligns with the max pooling window. More details on the exact formulation
of p(a, b, m) is given in the appendix.
Experiments
ImageNet Classiﬁcation
We perform experiments on ImageNet classiﬁcation task which contains 1.28 million
training images and 50000 test images. The procedure described in Section 3.1 of replacing the
spatial convolution layer with a self-attention layer from inside each bottleneck block of a ResNet-50
 model is used to create the attention model. The multi-head self-attention layer uses a spatial
extent of k = 7 and 8 attention heads. The position-aware attention stem as described above is used.
The stem performs self-attention within each 4 × 4 spatial block of the original image, followed by
batch normalization and a 4 × 4 max pool operation. Exact hyperparameters can be found in the
To study the behavior of these models with different computational budgets, we scale the model either
by width or depth. For width scaling, the base width is linearly multiplied by a given factor across
all layers. For depth scaling, a given number of layers are removed from each layer group. There
are 4 layer groups, each with multiple layers operating on the same spatial dimensions. Groups are
delineated by spatial downsampling. The 38 and 26 layer models remove 1 and 2 layers respectively
from each layer group compared to the 50 layer model.
Table 1 and Figure 5 shows the results of the full attention variant compared with the
convolution baseline. Compared to the ResNet-50 baseline, the full attention variant achieves 0.5%
Conv-stem + Attention
Full Attention
Table 1: ImageNet classiﬁcation results for a ResNet network with different depths. Baseline
is a standard ResNet, Conv-stem + Attention uses spatial convolution in the stem and attention
everywhere else, and Full Attention uses attention everywhere including the stem. The attention
models outperform the baseline across all depths while having 12% fewer FLOPS and 29% fewer
parameters.
Figure 5: Comparing parameters and FLOPS against accuracy on ImageNet classiﬁcation across a
range of network widths for ResNet-50. Attention models have fewer parameters and FLOPS while
improving upon the accuracy of the baseline.
higher classiﬁcation accuracy while having 12% fewer ﬂoating point operations (FLOPS)4 and 29%
fewer parameters. Furthermore, this performance gain is consistent across most model variations
generated by both depth and width scaling.
COCO Object Detection
In this section, we evaluate attention models on the COCO object detection task using
the RetinaNet architecture . RetinaNet is an object detection model that consists of a backbone
image classiﬁcation network followed by a Feature Pyramid Network (FPN) and two output
networks known as detection heads. We experiment with making the backbone and/or the FPN and
detection heads fully attentional. The backbone models are the same models described in Section
4.1. The details of how the FPN and detection heads are made fully attentional are provided in the
Table 2 shows the object detection results. Using an attention-based backbone in the
RetinaNet matches the mAP of using the convolutional backbone but contains 22% fewer parameters.
Furthermore, employing attention across all parts of the model including the backbone, FPN, and
detection heads matches the mAP of the baseline RetinaNet while using 34% fewer parameters and
39% fewer FLOPS. These results demonstrate the efﬁcacy of stand-alone attention across multiple
vision tasks.
Heads + FPN
mAPcoco / 50 / 75
mAPs / m / l
Convolution
36.5 / 54.3 / 39.0
18.3 / 40.6 / 51.7
Conv-stem + Attention
36.8 / 54.6 / 39.3
18.4 / 41.1 / 51.7
Full Attention
36.2 / 54.0 / 38.7
17.5 / 40.3 / 51.7
Conv-stem + Attention
36.6 / 54.3 / 39.1
19.0 / 40.7 / 51.1
Full Attention
36.6 / 54.5 / 39.2
18.5 / 40.6 / 51.6
Table 2: Object detection on COCO dataset with RetinaNet . Mean Average Precision (mAP) is
reported at three different IoU values and for three different object sizes (small, medium, large). The
fully attentional models achieve similar mAP as the baseline while having up to 39% fewer FLOPS
and 34% fewer parameters.
1, 2, 3, 4
1, 2, 3, 4
Table 3: Modifying which layer groups use which
primitive. Accuracies computed on validation set.
The best performing models use convolutions for early
groups and attention for later groups.
Spatial Extent
Table 4: Varying the spatial extent k. Parameter count is constant across all variations.
Small k perform poorly, but the improvements of larger k plateaus off.
Where is stand-alone attention most useful?
The impressive performance of fully attentional models veriﬁes that stand-alone attention is a viable
primitive for vision models. In this section, we study which parts of the network beneﬁt the most
from stand-alone attention.
First, we compare the performance of the attention stem against the convolution stem used in
ResNet. All other spatial convolutions are replaced with stand-alone attention. Tables 1 and 2 and
Figure 5 show the results on ImageNet classiﬁcation and COCO object detection. For classiﬁcation,
the convolution stem consistently matches or outperforms the attention stem. For object detection,
the convolution stem performs better when a the detection heads and FPN are also convolutional, but
performs similarly when the entire rest of the network is fully attentional. These results suggest that
convolutions consistently perform well when used in the stem.
Full network
Next, we experiment with using convolution and stand-alone attention in different
layer groups in a ResNet with a convolution stem. Table 3 shows that the best performing models use
convolutions in the early groups and attention in the later groups. These models are also similar in
terms of FLOPS and parameters to the fully attentional model. In contrast, when attention is used in
the early groups and convolutions are used in the later groups, the performance degrades despite a
large increase in the parameter count. This suggests that convolutions may better capture low level
features while stand-alone attention layers may better integrate global information.
Taken together, these results suggest that vision practitioners should focus on developing strategies
of designing architectures that combine the comparative advantages of convolution and stand-alone
attention.
4Some prior works deﬁne a FLOP as a single atomic Multiply-Add, whereas we treat the Multiply and Add
as 2 FLOPS. This causes a 2× discrepancy in the reported number.
Positional
Table 5: The effect of changing the positional encoding type for attention. Accuracies computed
on the validation set. Relative encodings signiﬁcantly outperform other strategies.
Table 6: The effect of removing the q⊤k interactions in attention. Using just q⊤r interactions
only drops accuracy by 0.5%.
Attention Stem
stand-alone
spatial convolution for values
spatially aware values
Table 7: Ablating the form of the attention stem. Spatially-aware value attention outperforms both
stand-alone attention and values generated by a spatial convolution.
Which components are important in attention?
This section presents ablations designed to understand the contributions of the various components in
the local attention layer. Unless speciﬁed, all attention models in the ablations use the convolution
Effect of spatial extent of self-attention
The value of the spatial extent k controls the size of the region each pixel can attend to. Table 4
studies the effect of varying the spatial extent. While using small k, such as k = 3, has a large
negative impact on performance, the improvements of using a larger k plateau around k = 11. The
exact plateau value likely depends on speciﬁc settings of hyperparameters such as the feature size
and number of attention heads used.
Importance of positional information
Table 5 ablates the different types of positional encodings that can be used: no positional encoding, a
sinusodial encoding dependent on the absolute position of a pixel , and relative position encodings.
Using any notion of positional encoding is beneﬁcial over using none, but the type of positional
encoding is also important. Relative position encodings perform 2% better than absolute encodings.
Furthermore, Table 6 demonstrates the important role of the content-relative interactions (q · r)
in attention. Removing the content-content (q · k) interactions and just using the content-relative
interactions drops the accuracy by only 0.5%. The importance of positional information suggests that
future work may improve attention by exploring different parameterizations and usages of positional
information.
Importance of spatially-aware attention stem
Table 7 compares using stand-alone attention in the stem with the attention stem with spatially-aware
values proposed in Section 3.2. The proposed attention stem outperforms stand-alone attention by
1.4% despite having a similar number of FLOPS, validating the utility of modifying attention for use
in the stem. Furthermore, applying a spatial convolution to the values instead of a spatially-aware
mixture of point-wise transformations proposed in Section 3.2 incurs more FLOPS and performs
slightly worse. Future work can focus on unifying the spatially-aware attention used in the stem with
the attention used in the main trunk of the network.
Discussion
In this work, we veriﬁed that content-based interactions can indeed serve as the primary primitive of
vision models. A fully attentional network based off of the proposed stand-alone local self-attention
layer achieves competitive predictive performance on ImageNet classiﬁcation and COCO object
detection tasks while requiring fewer parameters and ﬂoating point operations than the corresponding
convolution baselines. Furthermore, ablations show that attention is especially effective in the later
parts of the network.
We see several opportunities for improving the performance of these networks. First, the attention
mechanism may be improved by developing better methods for capturing geometries . Second,
the architectures employed for image classiﬁcation and object detection were developed by applying a
simple transformation to models designed for the convolutional primitive . It may be possible
to achieve improvements by speciﬁcally searching for the architecture with an attention layer as a
component in the design search space . Finally, additional work on proposing new
attention forms that can capture low level features can make attention effective in the early layers of
networks .
Although the training efﬁciency and computational demand of an attention based architecture is
favorable to a traditional convolution, the resulting network is slower in wall-clock time. The reason
for this discrepancy is the lack of optimized kernels available on various hardware accelerators. In
principle, depending on the degree to which the ﬁeld deems that attention provides a viable path, it
may be possible to signiﬁcantly speed up the wall-clock time for training and inference accordingly.
While this work primarily focuses on content-based interactions to establish their virtue for vision
tasks, in the future, we hope to unify convolution and self-attention to best combine their unique
advantages. Given the success of content-based interactions on core computer vision tasks, we expect
that future work may explore how attention could be applied to other vision tasks such as semantic
segmentation , instance segmentation , keypoint detection , human pose estimation
 and other tasks currently addressed with convolutional neural networks.
Acknowledgments
We thank Blake Hechtman, Justin Gilmer, Pieter-jan Kindermans, Quoc Le, Samy Bengio, and Shibo
Wang for fruitful discussions and assistance with implementations as well as the larger Google Brain
team for support and assistance.