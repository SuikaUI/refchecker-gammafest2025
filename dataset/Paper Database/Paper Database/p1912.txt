Proceedings of the Ninth Workshop on Statistical Machine Translation, pages 1–11,
Baltimore, Maryland USA, June 26–27, 2014. c⃝2014 Association for Computational Linguistics
Efﬁcient Elicitation of Annotations for Human Evaluation of Machine
Translation
Keisuke Sakaguchi∗, Matt Post†, Benjamin Van Durme†
∗Center for Language and Speech Processing
† Human Language Technology Center of Excellence
Johns Hopkins University, Baltimore, Maryland
{keisuke,post,vandurme}@cs.jhu.edu
A main output of the annual Workshop
on Statistical Machine Translation (WMT)
is a ranking of the systems that participated in its shared translation tasks, produced by aggregating pairwise sentencelevel comparisons collected from human
Over the past few years, there
have been a number of tweaks to the aggregation formula in attempts to address
issues arising from the inherent ambiguity and subjectivity of the task, as well as
weaknesses in the proposed models and
the manner of model selection.
We continue this line of work by adapting the TrueSkillTM algorithm — an online
approach for modeling the relative skills
of players in ongoing competitions, such
as Microsoft’s Xbox Live — to the human evaluation of machine translation output. Our experimental results show that
TrueSkill outperforms other recently proposed models on accuracy, and also can
signiﬁcantly reduce the number of pairwise annotations that need to be collected
by sampling non-uniformly from the space
of system competitions.
Introduction
The Workshop on Statistical Machine Translation
(WMT) has long been a central event in the machine translation (MT) community for the evaluation of MT output. It hosts an annual set of shared
translation tasks focused mostly on the translation
of western European languages. One of its main
functions is to publish a ranking of the systems
for each task, which are produced by aggregating
a large number of human judgments of sentencelevel pairwise rankings of system outputs. While
the performance on many automatic metrics is also
UEDIN-HEAFIELD
LIMSI-SOUL
MES-SIMPLIFIED
SHEF-WPROA
Table 1: System rankings presented as clusters
(WMT13 French-English competition). The score
column is the percentage of time each system was
judged better across its comparisons (§2.1).
reported ), the
human evaluation is considered primary, and is in
fact used as the gold standard for its metrics task,
where evaluation metrics are evaluated.
In machine translation, the longstanding disagreements about evaluation measures do not go
away when moving from automatic metrics to human judges. This is due in no small part to the inherent ambiguity and subjectivity of the task, but
also arises from the particular way that the WMT
organizers produce the rankings.
The systemlevel rankings are produced by collecting pairwise
sentence-level comparisons between system outputs. These are then aggregated to produce a complete ordering of all systems, or, more recently, a
partial ordering , with systems clustered where they cannot be distinguished in a statistically signiﬁcant way ).
A number of problems have been noted with
this approach.
The ﬁrst has to do with the nature of ranking itself. Over the past few years, the
WMT organizers have introduced a number of minor tweaks to the ranking algorithm (§2) in reaction to largely intuitive arguments that have been
raised about how the evaluation is conducted . While these tweaks
have been sensible (and later corroborated), Hopkins and May point out that this is essentially a model selection task, and should properly be driven by empirical performance on heldout data according to some metric. Instead of intuition, they suggest perplexity, and show that a
novel graphical model outperforms existing approaches on that metric, with less amount of data.
A second problem is the deﬁciency of the models used to produce the ranking, which work by
computing simple ratios of wins (and, optionally, ties) to losses. Such approaches do not consider the relative difﬁculty of system matchups,
and thus leave open the possibility that a system
is ranked highly from the luck of comparisons
against poorer opponents.
Third, a large number of judgments need to be
collected in order to separate the systems into clusters to produce a partial ranking. The sheer size of
the space of possible comparisons (all pairs of systems times the number of segments in the test set)
requires sampling from this space and distributing
the annotations across a number of judges. Even
still, the number of judgments needed to produce
statistically signiﬁcant rankings like those in Table 1 grows quadratically in the number of participating systems , often forcing
the use of paid, lower-quality annotators hired on
Amazon’s Mechanical Turk.
Part of the problem is that the sampling strategy collects data uniformly across system pairings.
Intuitively, we
should need many fewer annotations between systems with divergent base performance levels, instead focusing the collection effort on system pairs
whose performance is more matched, in order to
tease out the gaps between similarly-performing
systems. Why spend precious human time on redundantly afﬁrming predictable outcomes?
To address these issues, we developed a variation of the TrueSkill model ,
an adaptative model of competitions originally developed for the Xbox Live online gaming community. It assumes that each player’s skill level follows a Gaussian distribution N(µ, σ2), in which
µ represents a player’s mean performance, and σ2
the system’s uncertainty about its current estimate
of this mean. These values are updated after each
“game” (in our case, the value of a ternary judgment) in proportion to how surprising the outcome
TrueSkill has been adapted to a number of
areas, including chess, advertising, and academic
conference management.
The rest of this paper provides an empirical
comparison of a number of models of human evaluation (§2). We evaluate on perplexity and also
on accuracy, showing that the two are not always
correlated, and arguing for the primacy of the latter (§3). We ﬁnd that TrueSkill outperforms other
models (§4). Moreover, TrueSkill also allows us to
drastically reduce the amount of data that needs to
be collected by sampling non-uniformly from the
space of all competitions (§5), which also allows
for greater separation of the systems into ranked
clusters (§6).
Before introducing our adaptation of the TrueSkill
model for ranking translation systems with human
judgments (§2.3), we describe two comparisons:
the “Expected Wins” model used in recent evaluations, and the Bayesian model proposed by Hopkins and May (§2.2).
As we described brieﬂy in the introduction,
WMT produces system rankings by aggregating
sentence-level ternary judgments of the form:
(i, S1, S2, π)
where i is the source segment (id), S1 and S2
are the system pair drawn from a set of systems
{S}, and π ∈{<, >, =} denotes whether the
ﬁrst system was judged to be better than, worse
than, or equivalent to the second. These ternary
judgments are obtained by presenting judges with
a randomly-selected input sentence and the reference, followed by ﬁve randomly-selected translations of that sentence.
Annotators are asked to
rank these systems from best (rank 1) to worst
(rank 5), ties permitted, and with no meaning ascribed to the absolute values or differences between ranks. This is done to accelerate data collection, since it yields ten pairwise comparisons per
ranking. Tens of thousands of judgments of this
form constitute the raw data used to compute the
system-level rankings. All the work described in
this section is computed over these pairwise comparisons, which are treated as if they were collected independently.
Expected Wins
The “Expected Wins” model computes the percentage of times that each system wins in its
pairwise comparisons.
Let A be the complete
set of annotations or judgments of the form
{i, S1, S2, πR}. We assume these judgments have
been converted into a normal form where S1 is either the winner or is tied with S2, and therefore
πR ∈{<, =}. Let δ(x, y) be the Kronecker delta
function.1 We then deﬁne the function:
wins(Si, Sj) =
δ(Si, S(n)
1 )δ(Sj, S(n)
which counts the number of annotations for which
system Si was ranked better than system Sj. We
deﬁne a single-variable version that marginalizes
over all annotations:
wins(Si) =
wins(Si, Sj)
We also deﬁne analogous functions for loses and
ties. Until the WMT11 evaluation , the score for each system Si was
computed as follows:
score(Si) =
wins(Si) + ties(Si)
wins(Si) + ties(Si) + loses(Si)
Bojar et al. suggested that the inclusion of
ties biased the results, due to their large numbers,
the underlying similarity of many of the models,
and the fact that they are counted for both systems
in the tie, and proposed the following modiﬁed
scoring function:
score(Si) =
wins(Si, Sj)
wins(Si, Sj) + wins(Sj, Si)
This metric computes an average relative frequency of wins, excluding ties, and was used
in WMT12 and WMT13 .
The decision to exclude ties isn’t without
its problems; for example, an evaluation where
two systems are nearly always judged equivalent
should be relevant in producing the ﬁnal ranking
of systems.
Furthermore, as Hopkins and May
 point out, throwing out data to avoid biasing a model suggests a problem with the model.
We now turn to a description of their model, which
addresses these problems.
1δ(x, y) =
The Hopkins and May model
Recent papers have proposed models focused on the relative ability of the competition systems.
approaches assume that each system has a mean
quality represented by a Gaussian distribution with
a ﬁxed variance shared across all systems. In the
graphical model formulation of Hopkins and May
 , the pairwise judgments (i, S1, S2, π) are
imagined to have been generated according to the
following process:
• Select a source sentence i
• Select two systems S1 and S2.
Sj is associated with a Gaussian distribution
a), samples from which represent
the quality of translations
• Draw two “translations”, adding random
Gaussian noise with variance σ2
obs to simulate
the subjectivity of the task and the differences
among annotators:
q1 ∼N(µS1, σ2
a) + N(0, σ2
q2 ∼N(µS2, σ2
a) + N(0, σ2
• Let d be a nonzero real number that deﬁnes
a ﬁxed decision radius. Produce a rating π
according to:2
q1 −q2 > d
q2 −q1 > d
The task is to then infer the posterior parameters,
given the data: the system means µSj and, by necessity, the latent values {qi} for each of the pairwise comparison training instances. Hopkins and
May do not publish code or describe details of this
algorithm beyond mentioning Gibbs sampling, so
we used our own implementation,3 and describe it
here for completeness.
After initialization, we have training instances
of the form (i, S1, S2, πR, q1, q2), where all but the
qi are observed. At a high level, the sampler iterates over the training data, inferring values of q1
and q2 for each annotation together in a single step
of the sampler from the current values of the systems means, {µj}.4 At the end of each iteration,
2Note that better systems have higher relative abilities
Better translations subsequently have on-average
higher values {qi}, which translate into a lower ranking π.
3github.com/keisks/wmt-trueskill
4This worked better than a version of the sampler that
changed one at a time.
these means are then recomputed by re-averaging
all values of {qi} associated with that system. After the burn-in period, the µs are stored as samples,
which are averaged when the sampling concludes.
During each iteration, q1 and q2 are resampled
from their corresponding system means:
q1 ∼N(µS1, σ2
q2 ∼N(µS2, σ2
We then update these values to respect the annotation π as follows. Let t = q1−q2 (S1 is the winner
by human judgments), and ensure that the values
are outside the decision radius, d:
In the case of a tie:
These values are stored for the current iteration
and averaged at its end to produce new estimates
of the system means. The quantity d−t can be interpreted as a loss function, returning a high value
when the observed outcome is unexpected and a
low value otherwise (Figure 1).
Prior to 2012, the WMT organizers included reference translations among the system comparisons.
These were used as a control against which the
evaluators could be measured for consistency, on
the assumption that the reference was almost always best. They were also included as data points
in computing the system ranking.
Another of
Bojar et al. ’s suggestions was to exclude
this data, because systems compared more often against the references suffered unfairly. This
can be further generalized to the observation that
not all competitions are equal, and a good model
should incorporate some notion of “match difﬁculty” when evaluating system’s abilities.
inference procedure above incorporates this notion implicitly in the inference procedure, but the
model itself does not include a notion of match
difﬁculty or outcome surprisal.
A model that does is TrueSkill5 . TrueSkill is an adaptive, online system that
also assumes that each system’s skill level follows
a Gaussian distribution, maintaining a mean µSj
for each system Sj representing its current estimate of that system’s native ability. However, it
also maintains a per-system variance, σ2
represents TrueSkill’s uncertainty about its estimate of each mean. After an outcome is observed
(a game in which the result is a win, loss, or draw),
the size of the updates is proportional to how surprising the outcome was, which is computed from
the current system means and variances. If a translation from a system with a high mean is judged
better than a system with a greatly lower mean, the
result is not surprising, and the update size for the
corresponding system means will be small. On the
other hand, when an upset occurs in a competition,
the means will receive larger updates.
Before deﬁning the update equations, we need
to be more concrete about how this notion of surprisal is incorporated. Let t = µS1 −µS2, the difference in system relative abilities, and let ϵ be a
ﬁxed hyper-parameter corresponding to the earlier
decision radius. We then deﬁne two loss functions
of this difference for wins and for ties:
vwin(t, ϵ) = N(−ϵ + t)
vtie(t, ϵ) = N(−ϵ −t) −N(ϵ −t)
Φ(ϵ −t) −Φ(−ϵ −t)
where Φ(x) is the cumulative distribution function
and the Ns are Gaussians. Figures 1 and 2 display
plots of these two functions compared to the Hopkins and May model. Note how vwin (Figure 1) increases exponentially as µS2 becomes greater than
the (purportedly) better system, µS1.
As noted above, TrueSkill maintains not only
estimates {µSj} of system abilities, but also
system-speciﬁc conﬁdences about those estimates
5The goal of this section is to provide an intuitive description of TrueSkill as adapted for WMT manual evaluations,
with enough detail to carry the main ideas. For more details,
please see Herbrich et al. .
t = µS1 −µS2
Figure 1: TrueSkill’s vwin and the corresponding
loss function in the Hopkins and May model as
a function of the difference t of system means
(ϵ = 0.5, c = 0.8 for TrueSkill, and d = 0.5 for
Hopkins and May model).
t = µS1 −µS2
Figure 2: TrueSkills vtie and the corresponding
loss function in the Hopkins and May model as
a function of the difference t of system means
(ϵ = 0.5, c = 0.3, and d = 0.5).
{σSj}. These conﬁdences also factor into the updates: while surprising outcomes result in larger
updates to system means, higher conﬁdences (represented by smaller variances) result in smaller
updates. TrueSkill deﬁnes the following value:
c2 = 2β2 + σ2
which accumulates the variances along β, another
free parameter.
We can now deﬁne the update
equations for the system means:
µS1 = µS1 + σ2
µS2 = µS2 −σ2
The second term in these equations captures the
idea about balancing surprisal with conﬁdence,
described above.
In order to update the system-level conﬁdences,
TrueSkill deﬁnes another set of functions, w, for
the cases of wins and ties. These functions are
multiplicative factors that affect the amount of
change in σ2:
wwin(t, ϵ) = vwin · (vwin + t −ϵ)
wtie(t, ϵ) = vtie + (ϵ −t) · N(ϵ −t) + (ϵ + t) · N(ϵ + t)
Φ(ϵ −t) −Φ(−ϵ −t)
The underlying idea is that these functions capture the outcome surprisal via v. This update always decreases the size of the variances σ2, which
means uncertainty of µ decreases as comparisons
go on. With these deﬁned, we can conclude by
deﬁning the updates for σ2
One ﬁnal complication not presented here but relevant to adapting TrueSkill to the WMT setting:
the parameter β and another parameter (not discussed) τ are incorporated into the update equations to give more weight to recent matches. This
“latest-oriented” property is useful in the gaming
setting for which TrueSkill was built, where players improve over time, but is not applicable in the
WMT competition setting. To cancel this property
in TrueSkill, we set τ = 0 and β = 0.025 · |A| · σ2
in order to lessen the impact of the order in which
annotations are presented to the system.
Data selection with TrueSkill
A drawback of the standard WMT data collection
method is that it samples uniformly from the space
of pairwise system combinations. This is undesirable: systems with vastly divergent relative ability need not be compared as often as systems that
are more evenly matched. Unfortunately, one cannot sample non-uniformly without knowing ahead
of time which systems are better. TrueSkill provides a solution to this dilemma with its matchselection ability: systems with similar means and
low variances can be conﬁdently considered to be
close matches. This presents a strong possibility
of reducing the amount of data that needs to be
collected in the WMT competitions. In fact, the
TrueSkill formulation provides a way to compute
the probability of a draw between two systems,
which can be used to compute for a system Si a
conditional distribution over matches with other
systems {Sj̸=i}.
Formally, in the TrueSkill model, the matchselection (chance to draw) between two players
(systems in WMT) is computed as follows:
c2 · exp(−(µa −µb)2
However, our setting for canceling the “latestoriented” property affects this matching quality
equation, where most systems are almost equally
competitive (≈1). Therefore, we modify the equation in the following manner which simply depends on the difference of µ.
exp(|µa −µb|)
TrueSkill selects the matches it would like to
create, according to this selection criteria. We do
this according to the following process:
1. Select a system S1 (e.g., the one with the
highest variance)
2. Compute a normalized distribution over
matches with other systems pairs ˆpdraw
3. Draw a system S2 from this distribution
4. Draw a source sentence, and present to the
judge for annotation
Experimental setup
We used the evaluation data released by WMT13.6
The data contains (1) ﬁve-way system rankings
made by either researchers or Turkers and (2)
translation data consisting of source sentences, human reference translations, and submitted translations. Data exists for 10 language pairs. More details about the dataset can be found in the WMT
2013 overview paper .
Each ﬁve-way system ranking was converted
into ten pairwise judgments (§2). We trained the
models using randomly selected sets of 400, 800,
1,600, 3,200, and 6,400 pairwise comparisons,
6statmt.org/wmt13/results.html
each produced in two ways: selecting from all researchers, or split between researchers and Turkers. An important note is that the training data
differs according to the model. For the Expected
Wins and Hopkins and May model, we simply sample uniformly at random. The TrueSkill
model, however, selects its own training data (with
replacement) according to the description in Section 2.4.7
For tuning hyperparameters and reporting test
results, we used development and test sets of 2,000
comparisons drawn entirely from the researcher
judgments, and ﬁxed across all experiments.
Perplexity
We ﬁrst compare the Hopkins and May model and
TrueSkill using perplexity on the test data T, computed as follows:
ppl(p|T) = 2−P
(i,S1,S2,π)∈T log2 p(π|S1,S2)
where p is the model under consideration. The
probability of each observed outcome π between
two systems S1 and S2 is computed by taking a
difference of the Gaussian distributions associated
with those systems:
δ) = N(µS1, σ2
S1) −N(µS2, σ2
= N(µS1 −µS2, σ2
This Gaussian can then be carved into three pieces:
the area where S1 loses, the middle area representing ties (deﬁned by a decision radius, r, whose
value is ﬁt using development data), and a third
area representing where S1 wins. By integrating
over each of these regions, we have a probability
distribution over these outcomes:
p(π | S1, S2) =
−∞N(µδ, σ2
0 N(µδ, σ2
We do not compute perplexity for the Expected
Wins model, which does not put any probability
mass on ties.
implementation
(github.com/sublee/trueskill).
Perplexity is often viewed as a neutral metric, but
without access to unbounded training data or the
true model parameters, it can only be approximated.
Furthermore, it does not always correlate perfectly with evaluation metrics. As such,
we also present accuracy results, measuring each
model’s ability to predict the values of the ternary
pairwise judgments made by the annotators. These
are computed using the above equation, picking
the highest value of p(π) for all annotations between each system pair (Si, Sj). As with perplexity, we emphasize that these predictions are functions of the system pair only, and not the individual
sentences under consideration, so the same outcome is always predicted for all sentences between
a system pair.
Parameter Tuning
We follow the settings described in Hopkins and
May for their model: σa = 0.5, σobs = 1.0,
and d = 0.5. In TrueSkill, in accordance with the
Hopkins and May model, we set the initial µ and
σ values for each system to 0 and 0.5 respectively,
and ϵ to 0.25.
For test data, we tuned the “decision radius” parameter r by doing grid search over
{0.001, 0.01, 0.1, 0.3, 0.5},
value which minimized perplexity and maximized
accuracy on the development set. We do this for
each model and language pair. When tuned by
perplexity, r is typically either 0.3 or 0.5 for both
models and language pairs, whereas, for accuracy,
the best r is either 0.001, 0.01, or 0.1.
Model Comparison
Figure 3 shows the perplexity of the two models with regard to the number of training comparisons. The perplexities in the ﬁgure are averaged
over all ten language pairs in the WMT13 dataset.
Overall, perplexities decrease according to the increase of training size.
The Hopkins and May
and TrueSkill models trained on both researcher
and Turker judgments are comparable, whereas
the Hopkins and May model trained on researcher
judgments alone shows lower perplexity than the
corresponding TrueSkill model.
In terms of accuracy, we see that the TrueSkill
model has the highest accuracies, saturating at just
over 3,000 training instances (Figure 4). TrueSkill
Training Data Size
Perplexity
Figure 3: Model Perplexities for WMT13 dataset.
‘all’ indicates that models are trained on both researcher and Turker judgements, and ‘res’ means
that models are trained on only researcher judgements.
outperforms Expected Win and the Hopkins and
May, especially when the training size is small
(Table 2). We also note that training on researcher
judgments alone (dashed lines) results in better
performance than training on both researchers and
Turker judgments. This likely reﬂects both a better match between training and test data (recall the
test data consists of researcher judgments only),
as well as the higher consistency of this data, as
evidenced by the annotator agreement scores published in the WMT overview paper . Recall that the models only have access
to the system pair (and not the sentences themselves), and thus make the same prediction for π
for a particular system pair, regardless of which
source sentence was selected. As an upper bound
for performance on this metric, Table 2 contains
an oracle score, which is computed by selecting,
for each pair of systems, the highest-probability
Comparing the plots, we see there is not a perfect relationship between perplexity and accuracy
among the models; the low perplexity does not
mean the high accuracy, and in fact the order of
the systems is different.
Free-for-all matches
TrueSkill need not deal with judgments in pairs
only, but was in fact designed to be used in a variety of settings, including N-way free-for-all games
8Note that this might not represent a consistent ranking
among systems, but is itself an upper bound on the highestscoring consistent ranking.
Training Data Size
ExpWin-all
ExpWin-res
Figure 4: Model accuracies with different training
domain for WMT13 dataset.
Train Size
Upper Bound
Table 2: Model accuracies: models are tuned by
accuracy instead of perplexity.
Upper bound is
computed by selecting the most frequent choice
(<, >, =) for each system pair.
with many players all competing for ﬁrst place.
This adapts nicely to WMT’s actual collection setting. Recall that annotators are presented with ﬁve
translations which are then ranked; we can treat
this setting as a 5-way free-for-all match. While
the details of these updates are beyond the scope of
this paper, they are presented in the original model
and are implemented in the toolkit we used. We
thus also conducted experiments varying the value
of N from 2 to 5.
The results are shown in Tables 3 and 4, which
hold constant the number of matches and pairwise
judgments, respectively.
When ﬁxing the number of matches, the 5-way setting is at an advantage, since there is much more information in each
match; in contrast, when ﬁxing the number of pairwise comparisons, the 5-way setting is at a disadvantage, since many fewer competitions consti-
Table 3: Accuracies when training with N-way
free-for-all models, ﬁxing the number of matches.
Table 4: Accuracies when training with N-way
free-for-all models, ﬁxing the number of pairwise
comparisons.
tute these comparisons. The results bear this out,
but also suggest that the standard WMT setting
— which extracts ten pairwise comparisons from
each 5-way match and treats them independently
— works well. We will not speculate further here,
but provide this experiment purely to motivate potential future work. Here we will focus our conclusions to the pair-wise ranking scenario.
Reduced Data Collection with
Non-uniform Match Selection
As mentioned earlier, a drawback of the selection
of training data for annotation is that it is sampled
uniformly from the space of system pair competitions, and an advantage of TrueSkill is its ability to instead compute a distribution over pairings
and thereby focus annotation efforts on competitive matches. In this section, we report results in
the form of heat maps indicating the percentage of
pairwise judgments requested by TrueSkill across
the full cross-product of system pairs, using the
WMT13 French-English translation task.
Figure 5 depicts a system-versus-system heat
map for all judgments in the dataset. Across this
ﬁgure and the next two, systems are sorted along
each axis by the ﬁnal values of µ inferred by
TrueSkill during training, and the heat of each
square is proportional to the percentage of judgments obtained between those two systems. The
diagonal reﬂects the fact that systems do not compete against themselves, and the stripe at row and
column 5 reﬂects a system that was entered late
10 11 12 13
Figure 5: Heat map for the ratio of pairwise judgments across the full cross-product of systems in
the WMT13 French-English translation task.
10 11 12 13
Figure 6: Heat map for the ratio of pairwise judgments across the full cross-product of systems
used in the ﬁrst 20% of TrueSkill model.
10 11 12 13
Figure 7: Heat map for the ratio of pairwise judgments across the full cross-product of systems
used in the last 20% of TrueSkill model.
into the WMT13 competition and thus had many
fewer judgments. It is clear that these values are
roughly uniformly distributed. This ﬁgure serves
as a sort of baseline, demonstrating the lack of patterns in the data-selection process.
The next two ﬁgures focus on the data that
TrueSkill itself selected for its use from among all
of the available data. Figure 6 is a second heat
map presenting the set of system pairs selected by
TrueSkill for the ﬁrst 20% of its matches chosen
during training, while Figure 7 presents a heat map
of the last 20%. The contrast is striking: whereas
the judgments are roughly uniformly distributed at
the beginning, the bulk of the judgments obtained
for the last set are clustered along the diagonal,
where the most competitive matches lie.
Together with the higher accuracy of TrueSkill,
this suggests that it could be used to decrease the
amount of data that needs to be collected in future
WMT human evaluations by focusing the annotation effort on more closely-matched systems.
Clustering
As pointed out by Koehn , a ranking presented as a total ordering among systems conceals the closeness of comparable systems. In the
WMT13 competition, systems are grouped into
clusters, which is equivalent to presenting only
a partial ordering among the systems. Clusters
are constructed using bootstrap resampling to infer many system rankings. From these rankings,
rank ranges are then collected, which can be used
to construct 95% conﬁdence intervals, and, in turn,
to cluster systems whose ranges overlap. We use
a similar approach for clustering in the TrueSkill
model. We obtain rank ranges for each system by
running the TrueSkill model 100 times,9 throwing out the top and bottom 2 rankings for each
system, and clustering where rank ranges overlap.
For comparison, we also do this for the other two
models, altering the amount of training data from
1k to 25k in increments of 1,000, and plotting the
number of clusters that can be obtained from each
technique on each amount of training data.
Figure 8 show the number of clusters according
to the increase of training data for three models.
TrueSkill efﬁciently split the systems into clusters
compared to other two methods. Figure 9 and 10
present the result of clustering two different size of
9We also tried the sampling 1,000 times and the clustering
granularities were the same.
Pairwise Comparisons
Num. of Clusters
Figure 8: The number of clusters according to
the increase of training data for WMT13 French-
English (13 systems in total).
training data (1K and 25K pairwise comparisons)
on the TrueSkill model, which indicates that the
rank ranges become narrow and generate clusters
reasonably as the number of training samples increases. The ranking and clusters are slightly different from the ofﬁcial result (Table 1) mainly because the ofﬁcial result is based on Expected Wins.
One noteworthy observation is that the ranking
of systems between Figure 9 and Figure 10 is the
same, further corroborating the stability and accuracy of the TrueSkill model even with a small
amount of data.
Furthermore, while the need
to cluster systems forces the collection of signiﬁcantly more data than if we wanted only to
report a total ordering, TrueSkill here produces
nicely-sized clusters with only 25K pairwise comparisons, which is nearly one-third large of that
used in the WMT13 campaign (80K for French-
English, yielding 8 clusters).
Conclusion
Models of “relative ability” are a welcome addition to
methods for inferring system rankings from human judgments. The TrueSkill variant presented
in this paper is a promising further development,
both in its ability to achieve higher accuracy levels
than alternatives, and in its ability to sample nonuniformly from the space of system pair matchings. It’s possible that future WMT evaluations
could signiﬁcantly reduce the amount of data they
need to collect, also potentially allowing them to
draw from expert annotators alone (the developers
Figure 9: The result of clustering by TrueSkill
model with 1K training data from WMT13
French-English. The boxes range from the lower
to upper quartile values, with means in the middle.
The whiskers show the full range of each system’s
rank after the bootstrap resampling.
Figure 10: The result of clustering by TrueSkill
model with 25K training data. Dashed lines separate systems with non-overlapping rank ranges,
splitting the data into clusters.
of the participating systems), without the need to
hire non-experts on Mechanical Turk.
One piece missing from the methods explored
and proposed in this paper is models of the actual
translations being compared by judges. Clearly,
it is properties of the sentences themselves that
judges use to make their judgments, a fact which
is captured only indirectly by modeling translation qualities sampled from system abilities. This
observation has been used in the development
of automatic evaluation metrics , and is something we hope to explore in future work for system ranking.