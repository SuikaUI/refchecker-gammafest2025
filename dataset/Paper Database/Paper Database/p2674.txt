How to project a bipartite network?
Tao Zhou1,2,∗Jie Ren1, Mat´uˇs Medo1, and Yi-Cheng Zhang1,3†
1Department of Physics, University of Fribourg, Chemin du Muse 3, CH-1700 Fribourg, Switzerland
2Department of Modern Physics and Nonlinear Science Center,
University of Science and Technology of China, Hefei Anhui, 230026, PR China
3Information Economy and Internet Research Laboratory,
University of Electronic Science and Technology of China, Chengdu Sichuan, 610054, PR China
 
The one-mode projecting is extensively used to compress the bipartite networks. Since the onemode projection is always less informative than the bipartite representation, a proper weighting
method is required to better retain the original information. In this article, inspired by the networkbased resource-allocation dynamics, we raise a weighting method, which can be directly applied in
extracting the hidden information of networks, with remarkably better performance than the widely
used global ranking method as well as collaborative ﬁltering. This work not only provides a creditable
method in compressing bipartite networks, but also highlights a possible way for the better solution
of a long-standing challenge in modern information science: How to do personal recommendation?
PACS numbers: 89.75.Hc, 87.23.Ge, 05.70.Ln
INTRODUCTION
The last few years have witnessed a tremendous activity devoted to the understanding of complex networks
 .
A particular class of networks is
the bipartite networks, whose nodes are divided into two
sets, X and Y , and only the connection between two
nodes in diﬀerent sets is allowed (as illustrated in Fig.
1a). Many systems are naturally modeled as bipartite
networks : Human sexual network is consisted of
men and women, metabolic network is consisted of
chemical substances and chemical reactions, etc.
kinds of bipartite networks should be paid more attention for their particular signiﬁcance in social, economic
and information systems. One is the so-called collaboration network, which is generally deﬁned as a networks of
actors connected by a common collaboration act .
Examples are numerous, including scientists connected
by coauthoring a scientiﬁc paper , movie actors
connected by costarring the same movie , and so
Moreover, the concept of collaboration network is
not necessarily restricted within social systems (see, for
example, recent reports on technological collaboration of
software and urban traﬃc systems ). Although
the collaboration network is usually displayed by the onemode projection on actors (see later the deﬁnition), its
fully representation is a bipartite network.
one is named opinion network , where each node
in the user-set is connected with its collected objects in
the object-set. For example, listeners are connected with
the music groups they collected from music-sharing library (e.g. audioscrobbler.com) , web-users are
connected with the webs they collected in a bookmark
∗Electronic address: 
†Electronic address: 
site (e.g. delicious) , customers are connected with
the books they bought (e.g. Amazon.com) .
Recently, a large amount of attention is addressed to
analyzing and modeling 
bipartite network. However, for the convenience of directly showing the relations among a particular set of
nodes, the bipartite network is usually compressed by
one-mode projecting. The one-mode projection onto X
(X-projection for short) means a network containing only
X-nodes, where two X-nodes are connected when they
have at least one common neighboring Y -node. Fig. 1b
and Fig. 1c show the resulting networks of X-projection
and Y -projection, respectively. The simplest way is to
project the bipartite network onto an unweighted network , without taking into account of
the frequency that a collaboration has been repeated. Although some topological properties can be qualitatively
obtained from this unweighted version, the loss of information is obvious. For example, if two listeners has
collected more than 100 music groups each (it is a typical
number of collections, like in audioscrobbler.com, the average number of collected music groups per listener is 140
 ), and only one music group is selected by both listeners, one may conclude that those two listeners probably
have diﬀerent music taste. On the contrary, if nearly 100
music groups belong to the overlap, those two listeners
are likely to have very similar habits. However, in the unweighted listener-projection, this two cases have exactly
the same graph representation.
Since the one-mode projection is always less informative than the original bipartite network, to better reﬂect
structure of the network, one has to use the bipartite
graph to quantify the weights in the projection graph. A
straightforward way is to weight an edge directly by the
number of times the corresponding partnership repeated
 . This simple rule is used to obtain the weights in
Fig. 1b and Fig. 1c for X-projection and Y -projection,
respectively. This weighted network is much more infor-
Y-projection
X-projection
FIG. 1: Illustration of a bipartite network (a), as well as its
X-projection (b) and Y -projection (c). The edge-weight in
(b) and (c) is set as the number of common neighbors in Y
and X, respectively.
mative than the unweighted one, and can be analyzed
by standard techniques for unweighted graphs since its
weights are all integers .
However, this method is
also quantitatively biased. Li et al. empirically studied the scientiﬁc collaboration networks, and pointed out
that the impact of one additional collaboration paper
should depend on the original weight between the two
scientists. For example, one more co-authorized paper
for the two authors having only co-authorized one paper before should have higher impact than for the two
authors having already co-authorized 100 papers. This
saturation eﬀect can be taken into account by introducing a hyperbolic tangent function onto the simple count
of collaborated times . As stated by Newman that
two scientists whose names appear on a paper together
with many other coauthors know one another less well
on average than two who were the sole authors of a paper , to consider this eﬀect, he introduced the factor
1/(n−1) to weaken the contribution of collaborations involving many participants , where n is the number
of participants (e.g. the number of authors of a paper).
How to weight the edges is the key question of the
one-mode projections and their use. However, we lack a
systematic exploration of this problem, and no solid base
of any weighting methods have been reported thus far.
For example, one may ask the physical reason why using
the hyperbolic tangent function to address the saturation eﬀect rather than other inﬁnite possible candidates. In addition, for simplicity, the weighted adjacent
matrix {wij} is always set to be symmetrical, that is,
wij = wji. However, as in scientiﬁc collaboration networks, diﬀerent authors may assign diﬀerent weights to
the same co-authorized paper, and it is probably the case
that the author having less publications may give a higher
weight, vice versa. Therefore, a more natural weighting
method may be not symmetrical.
Another blemish in
the prior methods is that the information contained by
the edge whose adjacent X-node (Y -node) is of degree
one will be lost in Y -projection (X-projection).
information loss may be serious in some real opinion networks. For example, in the user-web network of delicious
( a remarkable fraction of webs have
been collected only once, as well as a remarkable fraction
of users have collected only one web. Therefore, both the
user-projection and web-projection will squander a lot of
information. Since more than half publications in Mathematical Reviews have only one author , the situation
is even worse in mathematical collaboration network.
In this article, we propose a weighting method, with
asymmetrical weights (i.e., wij ̸= wji) and allowed selfconnection (i.e., wii > 0). This method can be directly
applied as a personal recommendation algorithm, which
performs remarkably better than the widely used global
ranking method (GRM) and collaborative ﬁltering (CF).
Without loss of generality, we discuss how to determine the edge-weight in X-projection, where the weight
wij can be considered as the importance of node i in j’s
sense, and it is generally not equal to wji. For example, in the book-projection of a customer-book opinion
network, the weight wij between two books i and j contributes to the strength of book i recommendation to a
customer provided he has brought book j. In the scientiﬁc collaboration network, wij reﬂects how likely is j
to choose i as a contributor for a new research project.
More generally, we assume a certain amount of a resource
(e.g. recommendation power, research fund, etc.) is associated with each X-node, and the weight wij represents
the proportion of the resource j would like to distribute
To derive the analytical expression of wij, we go back
to the bipartite representation. Since the bipartite network itself is unweighted, the resource in an arbitrary
X-node should be equally distributed to its neighbors in
Y . Analogously, the resource in any Y -node should be
equally distributed to its X-neighbors. As shown in Fig.
2a, the three X-nodes are initially assigned weights x,
y and z. The resource-allocation process consists of two
steps; ﬁrst from X to Y , then back to X. The amount of
resource after each step is marked in Fig. 2b and Fig. 2c,
respectively. Merging these two steps into one, the ﬁnal
resource located in those three X-nodes, denoted by x′,
y′ and z′, can be obtained as:
Note that, this 3 × 3 matrix are column normalized, and
the element in the ith row and jth column represents the
fraction of resource the jth X-node transferred to the ith
X-node. According to the above description, this matrix
is the very weighted adjacent matrix we want.
x/3+y/2+z/3
11x/18+y/6+5z/18
x/9+5y/12+5z/18
5x/18+5y/12+4z/9
FIG. 2: Illustration of the resource-allocation process in bipartite network. The upper three are X-nodes, and the lower
four are Y -nodes. The whole process consists of two steps:
First, the resource ﬂows from X to Y (a→b), and then returns to X (b→c). Diﬀerent from the prior network-based
resource-allocation dynamics , the resource here can only
ﬂow from one node-set to another node-set, without consideration of asymptotical stable ﬂow among one node-set.
Now, consider a general bipartite network G(X, Y, E),
where E is the set of edges.
The nodes in X and Y
are denoted by x1, x2, · · · , xn and y1, y2, · · · , ym, respectively. The initial resource located on the ith X-node is
f(xi) ≥0. After the ﬁrst step, all the resource in X ﬂows
to Y , and the resource located on the lth Y -node reads,
where k(xi) is the degree of xi, and ail is an n × m adjacent matrix as
0, otherwise.
In the next step, all the resource ﬂows back to X, and
the ﬁnal resource located on xi reads,
ailf(yl)/k(yl) =
This can be rewritten as
which sums the contribution from all 2-step paths between xi and xj.
The matrix W = {wij}n×n represents the weighted X-projection we were looking for. The
resource-allocation process can be written in the matrix
form as −→
It is worthwhile to emphasize the particular characters
of this weighting method. For convenience, we take the
scientiﬁc collaboration network as an example, but our
statements are not restricted to the collaboration networks. Firstly, the weighted matrix is not symmetrical
k(xj) = wji
This is in accordance with our daily experience - the
weight of a single collaboration paper is relatively small if
the scientist has already published many papers (i.e., he
has large degree), vice versa. Secondly, the diagonal elements in W are nonzero, thus the information contained
by the connections incident to one-degree Y -node will not
be lost. Actually, the diagonal element is the maximal
element in each column. Only if all xi’s Y -neighbors belongs to xj’s neighbors set, wii = wji. It is usually found
in scientiﬁc collaboration networks, since some students
coauthorize every paper with their supervisors. Therefore, the ratio wji/wii ≤1 can be considered as xi’s researching independence to xj, the smaller the ratio, the
more independent the researcher is, vice versa. The independence of xi can be approximately measured as
Generally, the author who often publishes papers solely,
or often publishes many papers with diﬀerent coauthors
is more independent. Note that, introducing the measure
Ii here is just to show an example how to use the information contained by self-weight wii, without any comments
whether to be more independent is better, or contrary.
PERSONAL RECOMMENDATION
The exponential growth of the Internet and World-
Wide-Web confronts people with an information
overload: They are facing too many data and sources
to be able to ﬁnd out those most relevant for him. One
landmark for information ﬁltering is the use of search
engines , however, it can not solve this overload problem since it does not take into account of personalization
thus returns the same results for people with far diﬀerent
habits. So, if user’s habits are diﬀerent from the mainstream, it is hard for him to ﬁnd out what he likes in the
GRM <r>=0.139
CF <r>=0.120
NBI <r>=0.106
FIG. 3: (color online) The predicted position of each entry in
the probe ranked in the ascending order. The black, red and
blue curves, from top to bottom, represent the cases of GRM,
CF and NBI, respectively. The mean values are top 13.9%
(GRM), top 12.0% (CF) and top 10.6% (NBI).
countless searching results. Thus far, the most potential
way to eﬃciently ﬁlter out the information overload is
to recommend personally. That is to say, using the personal information of a user (i.e., the historical track of
this user’s activities) to uncover his habits and to consider them in the recommendation. For instances, Amazon.com uses one’s purchase history to provide individual
suggestions. If you have bought a textbook on statistical
physics, Amazon may recommend you some other statistical physics books. Based on the well-developed Web
2.0 technology , the recommendation systems are frequently used in web-based movie-sharing (music-sharing,
book-sharing, etc.) systems, web-based selling systems,
bookmark web-sites, and so on. Motivated by the significance in economy and society, recently, the design of an
eﬃcient recommendation algorithm becomes a joint focus
from marketing practice to mathematical analysis , from engineering science to physics
community .
Basically, a recommendation system consists of users
and objects, and each user has collected some objects.
Denote the object-set as O = {o1, o2, · · · , on} and userset as U = {u1, u2, · · · , um}. If users are only allowed to
collect objects (they do not rate them), the recommendation system can be fully described by an n × m adjacent
matrix {aij}, where aij = 1 if uj has already collected oi,
and aij = 0 otherwise. A reasonable assumption is that
the objects you have collected are what you like, and a
recommendation algorithm aims at predicting your personal opinions (to what extent you like or hate them) on
those objects you have not yet collected. A more complicated case is the voting system , where each user
can give ratings to objects (e.g., in the Yahoo Music, the
users can vote each song with 5 discrete ratings representing Never play again, It is ok, Like it, Love it, and
Can’t get enough), and the recommendation algorithm
concentrates on estimating unknown ratings for objects.
These two problems are closely related, however, in this
article, we focus on the former case.
Denote k(oi) = Pm
j=1 aij the degree of object oi. The
global ranking method (GRM) sorts all the objects in the
descending order of degree and recommends those with
highest degrees.
Although the lack of personalization
leads to an unsatisfying performance of GRM (see numerical comparison in the next section), it is widely used
since it is simple and spares computational resources. For
example, the well-known Yahoo Top 100 MTVs, Amazon
List of Top Sellers, as well as the board of most downloaded articles in many scientiﬁc journals, can be all considered as results of GRM.
Thus far, the widest applied personal recommendation
algorithm is collaborative ﬁltering (CF) , based
on a similarity measure between users.
Consequently,
the prediction for a particular user is made mainly using
the similar users. The similarity between users ui and uj
can be measured in the Pearson-like form
l=1 alialj
min{k(ui), k(uj)},
where k(ui) = Pn
l=1 ali is the degree of user ui. For any
user-object pair ui−oj, if ui has not yet collected oj (i.e.,
aji = 0), by CF, the predicted score, vij (to what extent
ui likes oj), is given as
l=1,l̸=i sliajl
l=1,l̸=i sli
Two factors give rise to a high value of vij. Firstly, if
the degree of oj is larger, it will, generally, have more
nonzero items in the numerator of Eq. (10). Secondly, if
oj is frequently collected by users very similar to ui, the
corresponding items will be signiﬁcant. The former pays
respect to the global information, and the latter reﬂects
the personalization. For any user ui, all the nonzero vij
with aji = 0 are sorted in descending order, and those
objects in the top are recommended.
We propose a recommendation algorithm, which is a
direct application of the weighting method for bipartite
networks presented above.
The layout is simple: ﬁrst
compress the bipartite user-object network by objectprojection, the resulting weighted network we label G.
Then, for a given user ui, put some resource on those
objects already been collected by ui. For simplicity, we
set the initial resource located on each node of G as
f(oj) = aji.
That is to say, if the object oj has been collected by
ui, then its initial resource is unit, otherwise it is zero.
Note that, the initial conﬁguration, which captures personal preferences, is diﬀerent for diﬀerent users. The initial resource can be understood as giving a unit recommending capacity to each collected object. According to
the weighted resource-allocation process discussed in the
prior section, the ﬁnal resource, denoted by the vector
f ′, is −→
f ′ = W−→f . Thus components of f ′ are
wjlf(ol) =
For any user ui, all his uncollected objects oj (1 ≤j ≤n,
aji = 0) are sorted in the descending order of f ′(oj),
and those objects with highest value of ﬁnal resource are
recommended. We call this method network-based inference (NBI), since it is based on the weighted network G.
Note that, the calculation of Eq. (12) should be repeated
m times, since the initial conﬁgurations are diﬀerent for
diﬀerent users.
NUMERICAL RESULTS
We use a benchmark data-set, namely MovieLens, to
judge the performance of described algorithms.
MovieLens data is downloaded from the web-site of GroupLens Research ( The data
consists 1682 movies (objects) and 943 users. Actually,
MovieLens is a rating system, where each user votes
movies in ﬁve discrete ratings 1-5. Hence we applied the
coarse-graining method similar to what is used in Ref.
 : A movie has been collected by a user iﬀthe giving rating is at least 3. The original data contains 105
ratings, 85.25% of which are ≥3, thus the user-movie
bipartite network after the coarse gaining contains 85250
edges. To test the recommendation algorithms, the data
set (i.e., 85250 edges) is randomly divided into two parts:
The training set contains 90% of the data, and the remaining 10% of data constitutes the probe. The training
set is treated as known information, while no information
in probe set is allowed to be used for prediction.
All three algorithms, GRM, CF and NBI, can provide
each user an ordered queue of all its uncollected movies.
For an arbitrary user ui, if the edge ui −oj is in the
probe set (according to the training set, oj is an uncollected movie for ui), we measure the position of oj in the
ordered queue. For example, if there are 1500 uncollected
movies for ui, and oj is the 30th from the top, we say the
position of oj is the top 30/1500, denoted by rij = 0.02.
Since the probe entries are actually collected by users,
a good algorithm is expected to give high recommendations to them, thus leading to small r. The mean value
of the position value, averaged over entries in the probe,
are 0.139, 0.120 and 0.106 by GRM, CF and NBI, respectively. Fig. 3 reports the distribution of all the position
values, which are ranked from the top position (r →0)
to the bottom position (r →1). Clearly, NBI is the best
method and GRM performs worst.
To make this work more relevant to the real-life recommendation systems, we introduce a measure of algorithmic accuracy that depends on the length of recommendation list. The recommendation list for a user ui, if of
hitting rate
length of recom m endation list
FIG. 4: The hitting rate as a function of the length of recommendation list. The black, red and blue curves, from bottom
to top, represent the cases of GRM, CF and NBI, respectively.
TABLE I: The hitting rates for some typical lengths of recommendation list.
Length GRM
10.3% 14.1% 16.2%
16.9% 21.6% 24.8%
31.1% 37.0% 41.2%
45.2% 51.0% 55.9%
length L, contains L highest recommended movies resulting from the algorithm. For each incident entry ui −oj
in the probe, if oj is in ui’s recommendation list, we say
the entry ui −oj is hit by the algorithm. The ratio of
hit entries to the population is named hitting rate. For a
given L, the algorithm with a higher hitting rate is better, and vice versa. If L is larger than the total number
of uncollected movies for a user, the recommendation list
is deﬁned as the set of all his uncollected movies. Clearly,
the hitting rate is monotonously increasing with L, with
the upper bound 1 for suﬃciently large L. In Fig. 4, we
report the hitting rate as a function of L for diﬀerent algorithms. In accordance with Fig. 3, the accuracy of the
algorithms is NBI > CF > GRM. The hitting rates for
some typical lengths of recommendation list are shown
in Table I.
In a word, via the numerical calculation on a benchmark data set, we have demonstrated that the NBI
has remarkably better performance than GRM and CF,
which strongly guarantee the validity of the present
weighting method.
CONCLUSION AND DISCUSSION
Weighting of edges is the key problem in the construction of a bipartite network projection.
In this article
we proposed a weighting method based on a resourceallocation process. The present method has two prominent features. First, the weighted matrix is not symmetrical, and the node having larger degree in the bipartite
network generally assigns smaller weights to its incident
edges. Second, the diagonal element in the weighted matrix is positive, which makes the weighted one-mode projection more informative.
Furthermore, we proposed a personal recommendation
algorithm based on this weighting method, which performs much better than the widest used global ranking
method as well as the collaborative ﬁltering. Especially,
this algorithm is tune-free (i.e., does not depend on any
control parameters), which is a big advantage for potential users.
The main goal of this article is to raise a
new weighting method, as well as provide a bridge from
this method to the recommendation systems. The presented recommendation algorithm is just a rough framework, whose details have not been exhaustively explored
For example, the setting of the initial conﬁguration may be oversimpliﬁed, a more complicated form, like
f(oj) = ajikβ(oj), may lead to a better performance than
the presented one with β = 0. One is also encouraged
to consider the asymptotical dynamics of the resourceallocation process , which can eventually lead to some
certain iterative recommendation algorithms. Although
such an algorithm require much longer CPU time, it may
give more accurate prediction than the present algorithm.
If we denote ⟨ku⟩and ⟨ko⟩the average degree of users
and objects in the bipartite network, the computational
complexity of CF is O(m2⟨ku⟩+mn⟨ko⟩), where the ﬁrst
term accounts for the calculation of similarity between
users (see Eq. (9)), and the second term accounts for the
calculation of the predicted score (see Eq. (10)). Substituting the equation n⟨ko⟩= m⟨ku⟩, we are left with
O(m2⟨ku⟩).
The computational complexity for NBI is
u⟩+ mn⟨ku⟩) with two terms accounting for the
calculation of the weighted matrix and the ﬁnal resource
distribution, respectively. Here ⟨k2
u⟩is the second moment of the users’ degree distribution in the bipartite
network. Clearly, ⟨k2
u⟩< n⟨ku⟩, thus the resulting form
is O(mn⟨ku⟩). Note that the number of users is usually
much larger than the number of objects in many recommendation systems. For instance, the EachMovie dataset
provided by the Compaq company contains m = 72916
users and n = 1628 movies, and the Netﬂix company
provides nearly 20 thousands online movies for million
users. It is also the case of music-sharing systems and
online bookstores, the number of registered users is more
than one magnitude larger than that of the available objects (e.g., music groups, books, etc.). Therefore, NBI
runs much fast than CF. In addition, NBI requires n2
memory to store the weighted matrix {wij}, while CF
requires m2 memory to store the similarity matrix {sij}.
Hence, NBI is able to beat CF in all the three criterions of recommendation algorithm: accuracy, time and
space. However, in some recommendation systems, as in
bookmark sharing websites, the number of objects (e.g.
webpages) is much larger than the number of users, thus
CF may be more practicable.
Acknowledgments
The authors thank to Sang Hoon Lee for his comments and suggestions. This work is partially supported
by Swiss National Science Foundation (project 205120-
We acknowledge SBF (Switzerland) for ﬁnancial support through project C05.0148 (Physics of
Risk), TZhou acknowledges the NNSFC under Grant No.
 L. A. N. Amaral, A. Scala, M. Barth´el´emy, and H. E.
Stanley, Proc. Natl. Acad. Sci. U.S.A. 97, 11149 .
 S. H. Strogatz, Nature 410, 268 .
 R. Albert and A. -L. Barab´asi, Rev. Mod. Phys. 74, 47
 S. N. Dorogovtsev and J. F. F. Mendes, Adv. Phys. 51,
1079 .
 M. E. J. Newman, SIAM Review 45, 167 .
 S. Boccaletti, et al., Phys. Rep. 424, 175 .
 L. da F. Costa, et al., Adv. Phys. 56, 167 .
 P. Holme, F. Liljeros, C. R. Edling, and B. J. Kim, Phys.
Rev. E 68, 056107.
 F. Liljeros, et al., Nature 411, 907 .
 H. Jeong, et al., Nature 407, 651 .
 S. Wasserman, and K. Faust, Social Network Analysis
 .
 J. Scott, Social Network Analysis .
 M. E. J. Newman, Proc. Natl. Acad. Sci. U.S.A. 98, 404
 M. E. J. Newman, Phys. Rev. E 64, 016131 .
 D. J. Watts and S. H. Strogatz, Nature 393, 440 .
 C. R. Myers, Phys. Rev. E 68, 046116 .
 P. -P. Zhang, et al., Physica A 360, 599 .
 S. Maslov, and Y. -C. Zhang, Phys. Rev. Lett. 87, 248701
 M. Blattner, Y. -C. Zhang, and S. Maslov, Physica A
373, 753 .
 R. Lambiotte, and M. Ausloos, Phys. Rev. E 72, 066107
 P. Cano, O. Celma, M. Koppenberger, and J. M. Buldu,
Chaos 16, 013107 .
 C. Cattuto, V. Loreto, and L. Pietronero, Proc. Natl.
Acad. Sci. U.S.A. 104, 1461 .
 G. Linden, B. Smith, and J. York, IEEE Internet Computing 7, 76 .
 K. Yammine, et al., Lect. Notes. Comput. Sci. 3220, 720
 R. Lambiotte, and M. Ausloos, Phys. Rev. E 72, 066117
 P. G. Lind, M. C. Gonz´alez, and H. J. Herrmann, Phys.
Rev. E 72, 056127 .
 E. Estrada, and J. A. Rodr´ıguez-Vel´azquez, Phys. Rev.
E 72, 046105 .
 J. J. Ramasco, S. N. Dorogovtsev, and R. Pastor-
Satorras, Phys. Rev. E 70, 036106 .
 J. Ohkubo, K. Tanaka, and T. Horiguchi, Phys. Rev. E
72, 036120 .
 M. Peltom¨aki, and M. Alava, J. Stat. Mech. P01010
 J. W. Grossman, and P. D. F. Ion, Congressus Numerantium 108, 129 .
 A. -L. Barab´asi, et al., Physica A 311, 590 .
 T. Zhou, et al., Int. J. Mod. Phys. C 18, 297 .
 J. J. Ramasco, and S. A. Morris, Phys. Rev. E 73, 016122
 M. Li, et al., Physica A 375, 355 .
 M. E. J. Newman, Phys. Rev. E 70, 056131 .
 M. Li, et al., Physica A 350, 643 .
 M. E. J. Newman, Phys. Rev. E 64, 016132 .
 M. E. J. Newman, Proc. Natl. Acad. Sci. U.S.A. 101,
5200 .
 Q. Ou, et al., Phys. Rev. E 75, 021102 .
 M. Faloutsos, P. Faloutsos, and C. Faloutsos, Comput.
Comm. Rev. 29, 251 .
 A. Broder, et al., Comput. Netw. 33, 309 .
 J. M. Kleinberg, J. ACM 46, 604 .
 B. Alexander, Educause Rev. 41, 33 .
 A. Ansari, S. Essegaier, and R. Kohli, J. Marketing Research 37, 363 .
 Y. P. Ying, F. Feinberg, and M. Wedel, J. Marketing
Research 43, 355 .
 R. Kumar,
P. Raghavan,
S. Rajagopalan,
Tomkins, J. Comput. Syst. Sci. 63, 42 .
 N. J. Belkin, Comm. ACM 43, 58 .
 M. Montaner, B. L´opez, and J. L. De La Rosa, Artiﬁcial
Intelligence Review 19, 285 .
 J. L. Herlocker, J. A. Konstan, K. Terveen, and J. T.
Riedl, ACM Trans. Inform. Syst. 22, 5 .
 P. Laureti, L. Moret, Y. -C. Zhang, and Y. -K. Yu, Europhys. Lett. 75, 1006 .
 Y. -K. Yu, Y. -C. Zhang, P. Laureti, and L.Moret, arXiv:
cond-mat/0603620.
 F. E. Walter, S. Battiston, and F. Schweitzer, arXiv:
nlin/0611054.
 J. A. Konstan, et al., Commun. ACM 40, 77 .
 K. Glodberg, T. Roeder, D. Gupta, and C. Perkins, Information Retrieval 4, 133 .