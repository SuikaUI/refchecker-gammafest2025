SlowFast Networks for Video Recognition
Christoph Feichtenhofer
Jitendra Malik
Kaiming He
Facebook AI Research (FAIR)
We present SlowFast networks for video recognition. Our
model involves (i) a Slow pathway, operating at low frame
rate, to capture spatial semantics, and (ii) a Fast pathway, operating at high frame rate, to capture motion at
ﬁne temporal resolution. The Fast pathway can be made
very lightweight by reducing its channel capacity, yet can
learn useful temporal information for video recognition.
Our models achieve strong performance for both action
classiﬁcation and detection in video, and large improvements are pin-pointed as contributions by our SlowFast concept. We report state-of-the-art accuracy on major video
recognition benchmarks, Kinetics, Charades and AVA. Code
has been made available at: 
facebookresearch/SlowFast.
1. Introduction
It is customary in the recognition of images I(x, y) to
treat the two spatial dimensions x and y symmetrically. This
is justiﬁed by the statistics of natural images, which are to
a ﬁrst approximation isotropic—all orientations are equally
likely—and shift-invariant . But what about video
signals I(x, y, t)? Motion is the spatiotemporal counterpart
of orientation , but all spatiotemporal orientations are
not equally likely. Slow motions are more likely than fast
motions (indeed most of the world we see is at rest at a given
moment) and this has been exploited in Bayesian accounts of
how humans perceive motion stimuli . For example, if
we see a moving edge in isolation, we perceive it as moving
perpendicular to itself, even though in principle it could
also have an arbitrary component of movement tangential to
itself (the aperture problem in optical ﬂow). This percept is
rational if the prior favors slow movements.
If all spatiotemporal orientations are not equally likely,
then there is no reason for us to treat space and time symmetrically, as is implicit in approaches to video recognition
based on spatiotemporal convolutions . We might
instead “factor” the architecture to treat spatial structures
and temporal events separately. For concreteness, let us
study this in the context of recognition. The categorical
spatial semantics of the visual content often evolve slowly.
prediction
High frame rate
Low frame rate
Figure 1. A SlowFast network has a low frame rate, low temporal
resolution Slow pathway and a high frame rate, α× higher temporal
resolution Fast pathway. The Fast pathway is lightweight by using
a fraction (β, e.g., 1/8) of channels. Lateral connections fuse them.
For example, waving hands do not change their identity as
“hands” over the span of the waving action, and a person
is always in the “person” category even though he/she can
transit from walking to running. So the recognition of the categorical semantics (as well as their colors, textures, lighting
etc.) can be refreshed relatively slowly. On the other hand,
the motion being performed can evolve much faster than
their subject identities, such as clapping, waving, shaking,
walking, or jumping. It can be desired to use fast refreshing
frames (high temporal resolution) to effectively model the
potentially fast changing motion.
Based on this intuition, we present a two-pathway
SlowFast model for video recognition (Fig. 1). One pathway is designed to capture semantic information that can be
given by images or a few sparse frames, and it operates at
low frame rates and slow refreshing speed. In contrast, the
other pathway is responsible for capturing rapidly changing
motion, by operating at fast refreshing speed and high temporal resolution. Despite its high temporal rate, this pathway
is made very lightweight, e.g., ∼20% of total computation.
This is because this pathway is designed to have fewer channels and weaker ability to process spatial information, while
such information can be provided by the ﬁrst pathway in a
less redundant manner. We call the ﬁrst a Slow pathway and
the second a Fast pathway, driven by their different temporal
speeds. The two pathways are fused by lateral connections.
 
Our conceptual idea leads to ﬂexible and effective designs
for video models. The Fast pathway, due to its lightweight
nature, does not need to perform any temporal pooling—it
can operate on high frame rates for all intermediate layers
and maintain temporal ﬁdelity. Meanwhile, thanks to the
lower temporal rate, the Slow pathway can be more focused
on the spatial domain and semantics. By treating the raw
video at different temporal rates, our method allows the two
pathways to have their own expertise on video modeling.
There is another well known architecture for video recognition which has a two-stream design , but provides conceptually different perspectives. The Two-Stream method
 has not explored the potential of different temporal
speeds, a key concept in our method. The two-stream method
adopts the same backbone structure to both streams, whereas
our Fast pathway is more lightweight. Our method does not
compute optical ﬂow, and therefore, our models are learned
end-to-end from the raw data. In our experiments we observe
that the SlowFast network is empirically more effective.
Our method is partially inspired by biological studies
on the retinal ganglion cells in the primate visual system
 , though admittedly the analogy is rough
and premature. These studies found that in these cells, ∼80%
are Parvocellular (P-cells) and ∼15-20% are Magnocellular
(M-cells). The M-cells operate at high temporal frequency
and are responsive to fast temporal changes, but not sensitive
to spatial detail or color. P-cells provide ﬁne spatial detail
and color, but lower temporal resolution, responding slowly
to stimuli. Our framework is analogous in that: (i) our model
has two pathways separately working at low and high temporal resolutions; (ii) our Fast pathway is designed to capture
fast changing motion but fewer spatial details, analogous to
M-cells; and (iii) our Fast pathway is lightweight, similar
to the small ratio of M-cells. We hope these relations will
inspire more computer vision models for video recognition.
We evaluate our method on the Kinetics-400 ,
Kinetics-600 , Charades and AVA datasets. Our
comprehensive ablation experiments on Kinetics action classiﬁcation demonstrate the efﬁcacy contributed by SlowFast.
SlowFast networks set a new state-of-the-art on all datasets
with signiﬁcant gains to previous systems in the literature.
2. Related Work
Spatiotemporal ﬁltering. Actions can be formulated as
spatiotemporal objects and captured by oriented ﬁltering in spacetime, as done by HOG3D and cuboids
 . 3D ConvNets extend 2D image models
 to the spatiotemporal domain, handling both
spatial and temporal dimensions similarly. There are also
related methods focusing on long-term ﬁltering and pooling
using temporal strides , as well as decomposing the convolutions into separate 2D spatial and 1D
temporal ﬁlters .
Beyond spatiotemporal ﬁltering or their separable versions, our work pursuits a more thorough separation of modeling expertise by using two different temporal speeds.
Optical ﬂow for video recognition. There is a classical
branch of research focusing on hand-crafted spatiotemporal
features based on optical ﬂow. These methods, including
histograms of ﬂow , motion boundary histograms ,
and trajectories , had shown competitive performance
for action recognition before the prevalence of deep learning.
In the context of deep neural networks, the two-stream
method exploits optical ﬂow by viewing it as another
input modality. This method has been a foundation of many
competitive results in the literature . However, it
is methodologically unsatisfactory given that optical ﬂow is
a hand-designed representation, and two-stream methods are
often not learned end-to-end jointly with the ﬂow.
3. SlowFast Networks
SlowFast networks can be described as a single stream
architecture that operates at two different framerates, but we
use the concept of pathways to reﬂect analogy with the biological Parvo- and Magnocellular counterparts. Our generic
architecture has a Slow pathway (Sec. 3.1) and a Fast pathway (Sec. 3.2), which are fused by lateral connections to a
SlowFast network (Sec. 3.3). Fig. 1 illustrates our concept.
3.1. Slow pathway
The Slow pathway can be any convolutional model (e.g.,
 ) that works on a clip of video as a spatiotemporal volume. The key concept in our Slow pathway is a
large temporal stride τ on input frames, i.e., it processes
only one out of τ frames. A typical value of τ we studied is
16—this refreshing speed is roughly 2 frames sampled per
second for 30-fps videos. Denoting the number of frames
sampled by the Slow pathway as T, the raw clip length is
T × τ frames.
3.2. Fast pathway
In parallel to the Slow pathway, the Fast pathway is another convolutional model with the following properties.
High frame rate. Our goal here is to have a ﬁne representation along the temporal dimension. Our Fast pathway works
with a small temporal stride of τ/α, where α > 1 is the
frame rate ratio between the Fast and Slow pathways. The
two pathways operate on the same raw clip, so the Fast
pathway samples αT frames, α times denser than the Slow
pathway. A typical value is α = 8 in our experiments.
The presence of α is in the key of the SlowFast concept
(Fig. 1, time axis). It explicitly indicates that the two pathways work on different temporal speeds, and thus drives the
expertise of the two subnets instantiating the two pathways.
High temporal resolution features. Our Fast pathway not
only has a high input resolution, but also pursues highresolution features throughout the network hierarchy. In
our instantiations, we use no temporal downsampling layers (neither temporal pooling nor time-strided convolutions)
throughout the Fast pathway, until the global pooling layer
before classiﬁcation. As such, our feature tensors always
have αT frames along the temporal dimension, maintaining
temporal ﬁdelity as much as possible.
Low channel capacity. Our Fast pathway also distinguishes with existing models in that it can use signiﬁcantly
lower channel capacity to achieve good accuracy for the
SlowFast model. This makes it lightweight.
In a nutshell, our Fast pathway is a convolutional network
analogous to the Slow pathway, but has a ratio of β (β < 1)
channels of the Slow pathway. The typical value is β = 1/8
in our experiments. Notice that the computation (ﬂoatingnumber operations, or FLOPs) of a common layer is often
quadratic in term of its channel scaling ratio. This is what
makes the Fast pathway more computation-effective than
the Slow pathway. In our instantiations, the Fast pathway
typically takes ∼20% of the total computation. Interestingly,
as mentioned in Sec. 1, evidence suggests that ∼15-20% of
the retinal cells in the primate visual system are M-cells (that
are sensitive to fast motion but not color or spatial detail).
The low channel capacity can also be interpreted as a
weaker ability of representing spatial semantics. Technically,
our Fast pathway has no special treatment on the spatial
dimension, so its spatial modeling capacity should be lower
than the Slow pathway because of fewer channels. The good
results of our model suggest that it is a desired tradeoff for
the Fast pathway to weaken its spatial modeling ability while
strengthening its temporal modeling ability.
Motivated by this interpretation, we also explore different
ways of weakening spatial capacity in the Fast pathway, including reducing input spatial resolution and removing color
information. As we will show by experiments, these versions
can all give good accuracy, suggesting that a lightweight Fast
pathway with less spatial capacity can be made beneﬁcial.
3.3. Lateral connections
The information of the two pathways is fused, so one
pathway is not unaware of the representation learned by the
other pathway. We implement this by lateral connections,
which have been used to fuse optical ﬂow-based, two-stream
networks . In image object detection, lateral connections are a popular technique for merging different
levels of spatial resolution and semantics.
Similar to , we attach one lateral connection between the two pathways for every “stage" (Fig. 1). Specifically for ResNets , these connections are right after
pool1, res2, res3, and res4. The two pathways have different
temporal dimensions, so the lateral connections perform a
Slow pathway
Fast pathway
output sizes T×S2
data layer
stride 16, 12
stride 2, 12
Slow : 4×2242
Fast : 32×2242
Slow : 4×1122
Fast : 32×1122
stride 1, 22
stride 1, 22
Slow : 4×562
Fast : 32×562
stride 1, 22
stride 1, 22
Slow : 4×562
Fast : 32×562
Slow : 4×282
Fast : 32×282
1×12, 1024
Slow : 4×142
Fast : 32×142
1×12, 2048
Slow : 4×72
Fast : 32×72
global average pool, concate, fc
Table 1. An example instantiation of the SlowFast network. The
dimensions of kernels are denoted by {T×S2, C} for temporal,
spatial, and channel sizes. Strides are denoted as {temporal stride,
spatial stride2}. Here the speed ratio is α = 8 and the channel
ratio is β = 1/8. τ is 16. The green colors mark higher temporal
resolution, and orange colors mark fewer channels, for the Fast
pathway. Non-degenerate temporal ﬁlters are underlined. Residual
blocks are shown by brackets. The backbone is ResNet-50.
transformation to match them (detailed in Sec. 3.4). We
use unidirectional connections that fuse features of the Fast
pathway into the Slow one (Fig. 1). We have experimented
with bidirectional fusion and found similar results.
Finally, a global average pooling is performed on each
pathway’s output. Then two pooled feature vectors are concatenated as the input to the fully-connected classiﬁer layer.
3.4. Instantiations
Our idea of SlowFast is generic, and it can be instantiated with different backbones (e.g., ) and implementation speciﬁcs. In this subsection, we describe our
instantiations of the network architectures.
An example SlowFast model is speciﬁed in Table 1. We
denote spatiotemporal size by T×S2 where T is the temporal length and S is the height and width of a square spatial
crop. The details are described next.
Slow pathway. The Slow pathway in Table 1 is a temporally
strided 3D ResNet, modiﬁed from . It has T = 4 frames
as the network input, sparsely sampled from a 64-frame raw
clip with a temporal stride τ = 16. We opt to not perform
temporal downsampling in this instantiation, as doing so
would be detrimental when the input stride is large.
Unlike typical C3D / I3D models, we use non-degenerate
temporal convolutions (temporal kernel size > 1, underlined
in Table 1) only in res4 and res5; all ﬁlters from conv1 to
res3 are essentially 2D convolution kernels in this pathway.
This is motivated by our experimental observation that using
temporal convolutions in earlier layers degrades accuracy.
We argue that this is because when objects move fast and
the temporal stride is large, there is little correlation within a
temporal receptive ﬁeld unless the spatial receptive ﬁeld is
large enough (i.e., in later layers).
Fast pathway. Table 1 shows an example of the Fast pathway with α = 8 and β = 1/8. It has a much higher temporal
resolution (green) and lower channel capacity (orange).
The Fast pathway has non-degenerate temporal convolutions in every block. This is motivated by the observation that
this pathway holds ﬁne temporal resolution for the temporal
convolutions to capture detailed motion. Further, the Fast
pathway has no temporal downsampling layers by design.
Lateral connections. Our lateral connections fuse from the
Fast to the Slow pathway. It requires to match the sizes
of features before fusing. Denoting the feature shape of
the Slow pathway as {T, S2, C}, the feature shape of the
Fast pathway is {αT, S2, βC}. We experiment with the
following transformations in the lateral connections:
(i) Time-to-channel: We reshape and transpose {αT, S2,
βC} into {T, S2, αβC}, meaning that we pack all α frames
into the channels of one frame.
(ii) Time-strided sampling: We simply sample one out of
every α frames, so {αT, S2, βC} becomes {T, S2, βC}.
(iii) Time-strided convolution: We perform a 3D convolution
of a 5×12 kernel with 2βC output channels and stride = α.
The output of the lateral connections is fused into the Slow
pathway by summation or concatenation.
4. Experiments: Action Classiﬁcation
We evaluate our approach on four video recognition
datasets using standard evaluation protocols. For the action
classiﬁcation experiments, presented in this section we consider the widely used Kinetics-400 , the recent Kinetics-
600 , and Charades . For action detection experiments
in Sec. 5, we use the challenging AVA dataset .
Training. Our models on Kinetics are trained from random
initialization (“from scratch”), without using ImageNet 
or any pre-training. We use synchronized SGD training
following the recipe in . See details in Appendix.
For the temporal domain, we randomly sample a clip
(of αT×τ frames) from the full-length video, and the input
to the Slow and Fast pathways are respectively T and αT
frames; for the spatial domain, we randomly crop 224×224
pixels from a video, or its horizontal ﬂip, with a shorter side
randomly sampled in pixels .
Inference. Following common practice, we uniformly sample 10 clips from a video along its temporal axis. For each
clip, we scale the shorter spatial side to 256 pixels and take
3 crops of 256×256 to cover the spatial dimensions, as an
approximation of fully-convolutional testing, following the
code of . We average the softmax scores for prediction.
We report the actual inference-time computation. As
existing papers differ in their inference strategy for cropping/clipping in space and in time. When comparing to
previous work, we report the FLOPs per spacetime “view"
(temporal clip with spatial crop) at inference and the number
of views used. Recall that in our case, the inference-time
spatial size is 2562 (instead of 2242 for training) and 10
temporal clips each with 3 spatial crops are used (30 views).
Datasets. Kinetics-400 consists of ∼240k training
videos and 20k validation videos in 400 human action categories. Kinetics-600 has ∼392k training videos and 30k
validation videos in 600 classes. We report top-1 and top-5
classiﬁcation accuracy (%). We report the computational
cost (in FLOPs) of a single, spatially center-cropped clip.
Charades has ∼9.8k training videos and 1.8k validation videos in 157 classes in a multi-label classiﬁcation
setting of longer activities spanning ∼30 seconds on average.
Performance is measured in mean Average Precision (mAP).
4.1. Main Results
Kinetics-400. Table 2 shows the comparison with state-ofthe-art results for our SlowFast instantiations using various input samplings (T×τ) and backbones: ResNet-50/101
(R50/101) and Nonlocal (NL) .
In comparison to the previous state-of-the-art our
best model provides 2.1% higher top-1 accuracy. Notably,
all our results are substantially better than existing results
that are also without ImageNet pre-training. In particular, our
model (79.8%) is 5.9% absolutely better than the previous
best result of this kind (73.9%). We have experimented with
ImageNet pretraining for SlowFast networks and found that
they perform similar (±0.3%) for both the pre-trained and
the train from scratch (random initialization) variants.
Our results are achieved at low inference-time cost. We
notice that many existing works (if reported) use extremely
dense sampling of clips along the temporal axis, which can
lead to >100 views at inference time. This cost has been
largely overlooked. In contrast, our method does not require
many temporal clips, due to the high temporal resolution yet
lightweight Fast pathway. Our cost per spacetime view can
be low (e.g., 36.1 GFLOPs), while still being accurate.
The SlowFast variants from Table 2 (with different backbones and sample rates) are compared in Fig. 2 the with their
corresponding Slow-only pathway to assess the improvement
brought by the Fast pathway. The horizontal axis measures
model capacity for a single input clip of 2562 spatial size,
which is proportional to 1/30 of the overall inference cost.
top-1 top-5 GFLOPs×views
ImageNet 72.1
Two-Stream I3D 
ImageNet 75.7
S3D-G 
ImageNet 77.2
Nonlocal R50 
ImageNet 76.5
Nonlocal R101 
ImageNet 77.7
R(2+1)D Flow 
ARTNet 
23.5 × 250
66.4 × N/A
R(2+1)D 
R(2+1)D 
SlowFast 4×16, R50
SlowFast 8×8, R50
SlowFast 8×8, R101
SlowFast 16×8, R101
SlowFast 16×8, R101+NL
Table 2. Comparison with the state-of-the-art on Kinetics-400.
In the last column, we report the inference cost with a single “view"
(temporal clip with spatial crop) × the numbers of such views used.
The SlowFast models are with different input sampling (T×τ) and
backbones (R-50, R-101, NL). “N/A” indicates the numbers are
not available for us.
16×8, R101
4×16, R101
Model capacity in GFLOPs for a single clip with 2562 spatial size
Kinetics top-1 accuracy (%)
Figure 2. Accuracy/complexity tradeoff on Kinetics-400 for the
SlowFast (green) vs. Slow-only (blue) architectures. SlowFast is
consistently better than its Slow-only counterpart in all cases (green
arrows). SlowFast provides higher accuracy and lower cost than
temporally heavy Slow-only (e.g. red arrow). The complexity is for
a single 2562 view, and accuracy are obtained by 30-view testing.
Fig. 2 shows that for all variants the Fast pathway is able to
consistently improve the performance of the Slow counterpart at comparatively low cost. The next subsection provides
a more detailed analysis on Kinetics-400.
Kinetics-600 is relatively new, and existing results are limited. So our goal is mainly to provide results for future reference in Table 3. Note that the Kinetics-600 validation set
overlaps with the Kinetics-400 training set , and therefore
we do not pre-train on Kinetics-400. The winning entry 
of the latest ActivityNet Challenge 2018 reports a best
top-1 top-5 GFLOPs×views
StNet-IRv2 RGB 
ImgNet+Kin400 79.0
SlowFast 4×16, R50
SlowFast 8×8, R50
SlowFast 8×8, R101
SlowFast 16×8, R101
SlowFast 16×8, R101+NL
Table 3. Comparison with the state-of-the-art on Kinetics-600.
SlowFast models the same as in Table 2.
GFLOPs×views
CoViAR, R-50 
Asyn-TF, VGG16 
MultiScale TRN 
Nonlocal, R101 
ImageNet+Kinetics400
STRG, R101+NL 
ImageNet+Kinetics400
our baseline (Slow-only)
Kinetics-400
Kinetics-400
SlowFast, +NL
Kinetics-400
SlowFast, +NL
Kinetics-600
Table 4. Comparison with the state-of-the-art on Charades. All
our variants are based on T×τ = 16×8, R-101.
single-model, single-modality accuracy of 79.0%. Our variants show good performance with the best model at 81.8%.
SlowFast results on the recent Kinetics-700 are in .
Charades is a dataset with longer range activities. Table 4 shows our SlowFast results on it. For fair comparison,
our baseline is the Slow-only counterpart that has 39.0 mAP.
SlowFast increases over this baseline by 3.1 mAP (to 42.1),
while the extra NL leads to an additional 0.4 mAP. We also
achieve 45.2 mAP when pre-trained on Kinetics-600. Overall, our SlowFast models in Table 4 outperform the previous
best number (STRG ) by solid margins, at lower cost.
4.2. Ablation Experiments
This section provides ablation studies on Kinetics-400
comparing accuracy and computational complexity.
Slow vs. SlowFast. We ﬁrst aim to explore the SlowFast
complementarity by changing the sample rate (T×τ) of the
Slow pathway. Therefore, this ablation studies α, the frame
rate ratio between the Fast and Slow paths. Fig. 2 shows the
accuracy vs. complexity tradeoff for various instantiations of
Slow and SlowFast models. It is seen that doubling the number of frames in the Slow pathway increases performance
(vertical axis) at double computational cost (horizontal axis),
while SlowFast signiﬁcantly extends the performance of all
variants at small increase of computational cost, even if the
Slow pathways operates on higher frame rate. Green arrows
illustrate the gain of adding the Fast pathway to the corresponding Slow-only architecture. The red arrow illustrates
that SlowFast provides higher accuracy and reduced cost.
Next, Table 5 shows a series of ablations on the Fast
pathway design, using the default SlowFast, T×τ = 4×16,
R-50 instantiation (speciﬁed in Table 1), analyzed in turn.
SlowFast TtoC, sum
SlowFast TtoC, concat
SlowFast T-sample
SlowFast T-conv
(a) SlowFast fusion: Fusing Slow and Fast pathways
with various types of lateral connections throughout
the network hierarchy is consistently better than the
Slow and Fast only baselines.
top-5 GFLOPs
(b) Channel capacity ratio: Varying
values of β, the channel capacity ratio
of the Fast pathway to make SlowFast
lightweight.
Fast pathway
RGB, β=1/4
gray-scale
optical ﬂow
(c) Weaker spatial input to Fast pathway: Alternative ways of weakening spatial inputs to the Fast
pathway in SlowFast models. β=1/8 unless speci-
ﬁed otherwise.
Table 5. Ablations on the Fast pathway design on Kinetics-400. We show top-1 and top-5 classiﬁcation accuracy (%), as well as
computational complexity measured in GFLOPs (ﬂoating-point operations, in # of multiply-adds ×109) for a single clip input of spatial size
2562. Inference-time computational cost is proportional to this, as a ﬁxed number of 30 of views is used. Backbone: 4×16, R-50.
Individual pathways. The ﬁrst two rows in Table 5a show
the results for using the structure of one individual pathway
alone. The default instantiations of the Slow and Fast pathway are very lightweight with only 27.3 and 6.4 GFLOPs,
32.4M and 0.53M parameters, producing 72.6% and 51.7%
top-1 accuracy, respectively. The pathways are designed
with their special expertise if they are used jointly, as is
ablated next.
SlowFast fusion. Table 5a shows various ways of fusing the
Slow and Fast pathways. As a naïve fusion baseline, we show
a variant using no lateral connection: it only concatenates
the ﬁnal outputs of the two pathways. This variant has 73.5%
accuracy, slightly better than the Slow counterpart by 0.9%.
Next, we ablate SlowFast models with various lateral
connections: time-to-channel (TtoC), time-strided sampling
(T-sample), and time-strided convolution (T-conv). For TtoC,
which can match channel dimensions, we also report fusing by element-wise summation (TtoC, sum). For all other
variants concatenation is employed for fusion.
Table 5a shows that these SlowFast models are all better than the Slow-only pathway. With the best-performing
lateral connection of T-conv, the SlowFast network is 3.0%
better than Slow-only. We employ T-conv as our default.
Interestingly, the Fast pathway alone has only 51.7% accuracy (Table 5a). But it brings in up to 3.0% improvement
to the Slow pathway, showing that the underlying representation modeled by the Fast pathway is largely complementary.
We strengthen this observation by the next set of ablations.
Channel capacity of Fast pathway. A key intuition for
designing the Fast pathway is that it can employ a lower
channel capacity for capturing motion without building a
detailed spatial representation. This is controlled by the
channel ratio β. Table 5b shows the effect of varying β.
The best-performing β values are 1/6 and 1/8 (our default). Nevertheless, it is surprising to see that all values
from β=1/32 to 1/4 in our SlowFast model can improve
over the Slow-only counterpart. In particular, with β=1/32,
the Fast pathway only adds as small as 1.3 GFLOPs (∼5%
relative), but leads to 1.6% improvement.
3D R-50 
3D R-50, recipe in 
3D R-50, our recipe
Table 6. Baselines trained from scratch: Using the same network
structure as , our training recipe achieves comparable results
without ImageNet pre-training.
Weaker spatial inputs to Fast pathway. Further, we experiment with using different weaker spatial inputs to the
Fast pathway in our SlowFast model. We consider: (i) a half
spatial resolution (112×112), with β=1/4 (vs. default 1/8)
to roughly maintain the FLOPs; (ii) gray-scale input frames;
(iii) “time difference" frames, computed by subtracting the
current frame with the previous frame; and (iv) using optical
ﬂow as the input to the Fast pathway.
Table 5c shows that all these variants are competitive and
are better than the Slow-only baseline. In particular, the
gray-scale version of the Fast pathway is nearly as good as
the RGB variant, but reduces FLOPs by ∼5%. Interestingly,
this is also consistent with the M-cell’s behavior of being
insensitive to colors .
We believe both Table 5b and Table 5c convincingly show
that the lightweight but temporally high-resolution Fast pathway is an effective component for video recognition.
Training from scratch. Our models are trained from
scratch, without ImageNet training. To draw fair comparisons, it is helpful to check the potential impacts (positive
or negative) of training from scratch. To this end, we train
the exact same 3D ResNet-50 architectures speciﬁed in ,
using our large-scale SGD recipe trained from scratch.
Table 6 shows the comparisons using this 3D R-50 baseline architecture.
We observe, that our training recipe
achieves comparably good results as the ImageNet pretraining counterpart reported by , while the recipe in
 is not well tuned for directly training from scratch. This
suggests that our training system, as the foundation of our
experiments, has no loss for this baseline model, despite not
using ImageNet for pre-training.
5. Experiments: AVA Action Detection
Dataset. The AVA dataset focuses on spatiotemporal
localization of human actions. The data is taken from 437
movies. Spatiotemporal labels are provided for one frame
per second, with every person annotated with a bounding
box and (possibly multiple) actions. Note the difﬁculty in
AVA lies in action detection, while actor localization is less
challenging . There are 211k training and 57k validation
video segments in AVA v2.1 which we use. We follow the
standard protocol of evaluating on 60 classes (see Fig. 3).
The performance metric is mean Average Precision (mAP)
over 60 classes, using a frame-level IoU threshold of 0.5.
Detection architecture. Our detector is similar to Faster
R-CNN with minimal modiﬁcations adapted for video.
We use the SlowFast network or its variants as the backbone.
We set the spatial stride of res5 to 1 (instead of 2), and
use a dilation of 2 for its ﬁlters. This increases the spatial
resolution of res5 by 2×. We extract region-of-interest (RoI)
features at the last feature map of res5. We ﬁrst extend
each 2D RoI at a frame into a 3D RoI by replicating it along
the temporal axis, similar to the method presented in .
Subsequently, we compute RoI features by RoIAlign 
spatially, and global average pooling temporally. The RoI
features are then max-pooled and fed to a per-class, sigmoidbased classiﬁer for multi-label prediction.
We follow previous works that use pre-computed proposals . Our region proposals are computed
by an off-the-shelf person detector, i.e., that is not jointly
trained with the action detection models. We adopt a persondetection model trained with Detectron . It is a Faster
R-CNN with a ResNeXt-101-FPN backbone. It is
pre-trained on ImageNet and the COCO human keypoint
images . We ﬁne-tune this detector on AVA for person
(actor) detection. The person detector produces 93.9 AP@50
on the AVA validation set. Then, the region proposals for
action detection are detected person boxes with a conﬁdence
of > 0.8, which has a recall of 91.1% and a precision of
90.7% for the person class.
Training. We initialize the network weights from the
Kinetics-400 classiﬁcation models. We use step-wise learning rate, reducing the learning rate 10× when validation error
saturates. We train for 14k iterations (68 epochs for ∼211k
data), with linear warm-up for the ﬁrst 1k iterations.
We use a weight decay of 10−7. All other hyper-parameters
are the same as in the Kinetics experiments. Ground-truth
boxes are used as the samples for training. The input is
instantiation-speciﬁc αT×τ frames of size 224×224.
Inference. We perform inference on a single clip with
αT×τ frames around the frame that is to be evaluated. We
resize the spatial dimension such that its shorter side is 256
pixels. The backbone feature extractor is computed fully
convolutionally, as in standard Faster R-CNN .
ﬂow video pretrain val mAP test mAP
Kinetics-400
Kinetics-400
ACRN, S3D 
Kinetics-400
ATR, R50+NL 
Kinetics-400
ATR, R50+NL 
Kinetics-400
9-model ensemble 
Kinetics-400
Kinetics-600
Kinetics-400
Kinetics-600
SlowFast, +NL
Kinetics-600
SlowFast*, +NL
Kinetics-600
Table 7. Comparison with the state-of-the-art on AVA v2.1. All
our variants are based on T×τ = 8×8, R101. Here “*” indicates a
version of our method that uses our region proposals for training.
ﬂow video pretrain val mAP test mAP
SlowFast, 8×8
Kinetics-600
SlowFast, 16×8
Kinetics-600
SlowFast++, 16×8
Kinetics-600
SlowFast++, ensemble
Kinetics-600
Table 8. SlowFast models on AVA v2.2. Here “++” indicates a
version of our method that is tested with multi-scale and horizontal
ﬂipping augmentation. The backbone is R-101+NL and region
proposals are used for training.
5.1. Main Results
We compare with previous results on AVA in Table 7. An
interesting observation is on the potential beneﬁt of using
optical ﬂow (see column ‘ﬂow’ in Table 7). Existing works
have observed mild improvements: +1.1 mAP for I3D in
 , and +1.7 mAP for ATR in . In contrast, our baseline improves by the Fast pathway by +5.2 mAP (see Table 9
in our ablation experiments in the next section). Moreover,
two-stream methods using optical ﬂow can double the computational cost, whereas our Fast pathway is lightweight.
As system-level comparisons, our SlowFast model has
26.3 mAP using only Kinetics-400 pre-training. This is 5.6
mAP higher than the previous best number under similar
settings (21.7 of ATR , single-model), and 7.3 mAP
higher than that using no optical ﬂow (Table 7).
The work in pre-trains on the larger Kinetics-600
and achieves 21.9 mAP. For fair comparison, we observe
an improvement from 26.3 mAP to 26.8 mAP for using
Kinetics-600. Augmenting SlowFast with NL blocks 
increases this to 27.3 mAP. We train this model on train+val
(and by 1.5× longer) and submit it to the AVA v2.1 test server
 . It achieves 27.1 mAP single crop test set accuracy.
By using predicted proposals overlapping with groundtruth boxes by IoU > 0.9, in addition to the ground truth
boxes, for training we achieve 28.2 mAP single crop validation accuracy, a new state-of-the-art on AVA.
Using the AVA v2.2 dataset (which provides more consistent annotations) improves this number to 29.0 mAP (Table 8). The longer-term SlowFast, 16×8 model produces
29.8 mAP and using multiple spatial scales and horizontal
ﬂip for testing, this number is increased to 30.7 mAP.
watch (a person)
talk to (e.g., self, a person)
listen to (a person)
carry/hold (an object)
touch (an object)
bend/bow (at the waist)
ride (e.g., a bike, a horse)
answer phone
crouch/kneel
fight/hit (a person)
grab (a person)
martial art
watch (e.g., TV)
sing to (e.g., self, a person)
play musical instrument
drive (e.g., a car, a truck)
open (e.g., a window)
hug (a person)
give/serve object to person
close (e.g., a door, a box)
listen (e.g., to music)
kiss (a person)
take object from person
hand shake
lift/pick up
text on/look at a cellphone
lift (a person)
pull (an object)
push (an object)
push (another person)
dress/put on clothing
climb (e.g., a mountain)
work on a computer
hit (an object)
take a photo
turn (e.g., a screwdriver)
point to (an object)
Slow-only (19.0 mAP)
SlowFast (24.2 mAP)
Figure 3. Per-category AP on AVA: a Slow-only baseline (19.0 mAP) vs. its SlowFast counterpart (24.2 mAP). The highlighted categories
are the 5 highest absolute increase (black) or 5 highest relative increase with Slow-only AP > 1.0 (orange). Categories are sorted by number
of examples. Note that the SlowFast instantiation in this ablation is not our best-performing model.
Slow-only, R-50
SlowFast, R-50
Table 9. AVA action detection baselines: Slow-only vs. SlowFast.
Finally, we create an ensemble of 7 models and submit it
to the ofﬁcial test server for the ActivityNet challenge 2019
 . As shown in Table 8 this entry (SlowFast++, ensemble)
achieved 34.3 mAP accuracy on the test set, ranking ﬁrst
in the AVA action detection challenge 2019. Further details
on our winning solution are provided in the corresponding
technical report .
5.2. Ablation Experiments
Table 9 compares a Slow-only baseline with its SlowFast
counterpart, with the per-category AP shown in Fig. 3. Our
method improves massively by 5.2 mAP (relative 28%) from
19.0 to 24.2. This is solely contributed by our SlowFast idea.
Category-wise (Fig. 3), our SlowFast model improves in
57 out of 60 categories, vs. its Slow-only counterpart. The
largest absolute gains are observed for “hand clap" (+27.7
AP), “swim" (+27.4 AP), “run/jog" (+18.8 AP), “dance"
(+15.9 AP), and “eat” (+12.5 AP). We also observe large
relative increase in “jump/leap”, “hand wave”, “put down”,
“throw”, “hit” or “cut”. These are categories where modeling
dynamics are of vital importance. The SlowFast model
is worse in only 3 categories: “answer phone" (-0.1 AP),
“lie/sleep" (-0.2 AP), “shoot" (-0.4 AP), and their decrease is
relatively small vs. others’ increase.
6. Conclusion
The time axis is a special dimension. This paper has investigated an architecture design that contrasts the speed along
this axis. It achieves state-of-the-art accuracy for video action classiﬁcation and detection. We hope that this SlowFast
concept will foster further research in video recognition.
A. Appendix
Implementation details. We study backbones including
ResNet-50 and the deeper ResNet-101 , optionally augmented with non-local (NL) blocks . For models involving R-101, we use a scale jittering range of . The
T×τ = 16×8 models are initilaized from the 8×8 counterparts and trained for half the training epochs to reduce
training time. For all models involving NL, we initialize
them with the counterparts that are trained without NL, to
facilitate convergence. We only use NL on the (fused) Slow
features of res4 (instead of res3+res4 ).
On Kinetics, we adopt synchronized SGD training in 128
GPUs following the recipe in , and we found its accuracy is as good as typical training in one 8-GPU machine
but it scales out well. The mini-batch size is 8 clips per
GPU (so the total mini-batch size is 1024). We use the
initialization method in . We train with Batch Normalization (BN) with BN statistics computed within each 8
clips. We adopt a half-period cosine schedule of learning rate decaying: the learning rate at the n-th iteration is
η · 0.5[cos(
nmax π) + 1], where nmax is the maximum training
iterations and the base learning rate η is set as 1.6. We also
use a linear warm-up strategy in the ﬁrst 8k iterations.
For Kinetic-400, we train for 256 epochs (60k iterations with
a total mini-batch size of 1024, in ∼240k Kinetics videos)
when T ≤4 frames, and 196 epochs when T > 4 frames: it
is sufﬁcient to train shorter when a clip has more frames. We
use momentum of 0.9 and weight decay of 10-4. Dropout
 of 0.5 is used before the ﬁnal classiﬁer layer.
For Kinetics-600, we extend the training epochs (and
schedule) by 2× and set the base learning rate η to 0.8.
For Charades, we ﬁne-tune the Kinetics models. A perclass sigmoid output is used to account for the mutli-class
nature. We train on a single machine for 24k iterations using
a batch size of 16 and a base learning rate of 0.0375 (Kinetics-
400 pre-trained) and 0.02 (Kinetics-600 pre-trained) with
10× step-wise decay if the validation error saturates. For
inference, we temporally max-pool scores .