Graph-Structured Representations for Visual Question Answering
Damien Teney
Lingqiao Liu
Anton van den Hengel
Australian Centre for Visual Technologies
The University of Adelaide
{damien.teney,lingqiao.liu,anton.vandenhengel}@adelaide.edu.au
This paper proposes to improve visual question answering (VQA) with structured representations of both scene
contents and questions. A key challenge in VQA is to require
joint reasoning over the visual and text domains. The predominant CNN/LSTM-based approach to VQA is limited by
monolithic vector representations that largely ignore structure in the scene and in the question. CNN feature vectors
cannot effectively capture situations as simple as multiple
object instances, and LSTMs process questions as series
of words, which do not reﬂect the true complexity of language structure. We instead propose to build graphs over
the scene objects and over the question words, and we describe a deep neural network that exploits the structure in
these representations. We show that this approach achieves
signiﬁcant improvements over the state-of-the-art, increasing accuracy from 71.2% to 74.4% on the “abstract scenes”
multiple-choice benchmark, and from 34.7% to 39.1% for
the more challenging “balanced” scenes, i.e. image pairs
with ﬁne-grained differences and opposite yes/no answers
to a same question.
1. Introduction
The task of Visual Question Answering has received
growing interest in the recent years (see for example). One of the more interesting aspects of the problem
is that it combines computer vision, natural language processing, and artiﬁcial intelligence. In its open-ended form,
a question is provided as text in natural language together
with an image, and a correct answer must be predicted, typically in the form of a single word or a short phrase. In the
multiple-choice variant, an answer is selected from a provided set of candidates, alleviating evaluation issues related
to synonyms and paraphrasing.
Multiple datasets for VQA have been introduced with
either real or synthetic images .
Our experiments uses the latter, being based on clip art
or “cartoon” images created by humans to depict realistic
Figure 1. We encode the input scene as a graph representing the
objects and their spatial arrangement, and the input question as a
graph representing words and their syntactic dependencies. A neural network is trained to reason over these representations, and to
produce a suitable answer as a prediction over an output vocabulary.
scenes (they are usually referred to as “abstract scenes”, despite this being a misnomer). Our experiments focus on
this dataset of clip art scenes as they allow to focus on semantic reasoning and vision-language interactions, in isolation from the performance of visual recognition (see examples in Fig. 5).
They also allow the manipulation of
the image data so as to better illuminate algorithm performance. A particularly attractive VQA dataset was introduced in by selecting only the questions with binary answers (e.g. yes/no) and pairing each (synthetic) image with
a minimally-different complementary version that elicits the
opposite (no/yes) answer (see examples in Fig. 5, bottom
rows). This strongly contrasts with other VQA datasets of
real images, where a correct answer is often obvious without looking at the image, by relying on systematic regularities of frequent questions and answers . Performance
improvements reported on such datasets are difﬁcult to interpret as actual progress in scene understanding and reasoning as they might similarly be taken to represent a better
modeling of the language prior of the dataset. This hampers, or at best obscures, progress toward the greater goal
of general VQA. In our view, and despite obvious limitations of synthetic images, improvements on the aforementioned “balanced” dataset constitute an illuminating measure of progress in scene-understanding, because a language
 
model alone cannot perform better than chance on this data.
Challenges
The questions in the clip-art dataset vary
greatly in their complexity. Some can be directly answered
from observations of visual elements, e.g. Is there a dog in
the room ?, or Is the weather good ?. Others require relating
multiple facts or understanding complex actions, e.g. Is the
boy going to catch the ball?, or Is it winter?. An additional
challenge, which affects all VQA datasets, is the sparsity of
the training data. Even a large number of training questions
(almost 25,000 for the clip art scenes of ) cannot possibly cover the combinatorial diversity of possible objects
and concepts. Adding to this challenge, most methods for
VQA process the question through a recurrent neural network (such as an LSTM) trained from scratch solely on the
training questions.
Language representation
The above reasons motivate us
to take advantage of the extensive existing work in the natural language community to aid processing the questions.
First, we identify the syntactic structure of the question using a dependency parser . This produces a graph representation of the question in which each node represents a
word and each edge a particular type of dependency (e.g.
determiner, nominal subject, direct object, etc.). Second,
we associate each word (node) with a vector embedding
pretrained on large corpora of text data . This embedding maps the words to a space in which distances are semantically meaningful. Consequently, this essentially regularizes the remainder of the network to share learned concepts among related words and synonyms.
This particularly helps in dealing with rare words, and also allows
questions to include words absent from the training questions/answers. Note that this pretraining and ad hoc processing of the language part mimics a practice common for
the image part, in which visual features are usually obtained
from a ﬁxed CNN, itself pretrained on a larger dataset and
with a different (supervised classiﬁcation) objective.
Scene representation
Each object in the scene corresponds to a node in the scene graph, which has an associated
feature vector describing its appearance. The graph is fully
connected, with each edge representing the relative position
of the objects in the image.
Applying Neural Networks to graphs
The two graph
representations feed into a deep neural network that we
will describe in Section 4. The advantage of this approach
with text- and scene-graphs, rather than more typical representations, is that the graphs can capture relationships between words and between objects which are of semantic
signiﬁcance. This enables the GNN to exploit (1) the unordered nature of scene elements (the objects in particular)
and (2) the semantic relationships between elements (and
the grammatical relationships between words in particular).
This contrasts with the typical approach of representing the
image with CNN activations (which are sensitive to individual object locations but less so to relative position) and the
processing words of the question serially with an RNN (despite the fact that grammatical structure is very non-linear).
The graph representation ignores the order in which elements are processed, but instead represents the relationships
between different elements using different edge types. Our
network uses multiple layers that iterate over the features
associated with every node, then ultimately identiﬁes a soft
matching between nodes from the two graphs. This matching reﬂects the correspondences between the words in the
question and the objects in the image. The features of the
matched nodes then feed into a classiﬁer to infer the answer
to the question (Fig. 1).
The main contributions of this paper are four-fold.
1) We describe how to use graph representations of scene
and question for VQA, and a neural network capable of
processing these representations to infer an answer.
2) We show how to make use of an off-the-shelf language
parsing tool by generating a graph representation of text
that captures grammatical relationships, and by making
this information accessible to the VQA model. This representation uses a pre-trained word embedding to form
node features, and encodes syntactic dependencies between words as edge features.
3) We train the proposed model on the VQA “abstract
scenes” benchmark and demonstrate its efﬁcacy
by raising the state-of-the-art accuracy from 71.2% to
74.4% in the multiple-choice setting. On the “balanced”
version of the dataset, we raise the accuracy from 34.7%
to 39.1% in the hardest setting (requiring a correct answer over pairs of scenes).
4) We evaluate the uncertainty in the model by presenting
– for the ﬁrst time on the task of VQA – precision/recall
curves of predicted answers. Those curves provide more
insight than the single accuracy metric and show that the
uncertainty estimated by the model about its predictions
correlates with the ambiguity of the human-provided
ground truth.
2. Related work
The task of visual question answering has received increasing interest since the seminal paper of Antol et al. .
Most recent methods are based on the idea of a joint embedding of the image and the question using a deep neural network. The image is passed through a convolutional
neural network (CNN) pretrained for image classiﬁcation,
from which intermediate features are extracted to describe
the image. The question is typically passed through a reyes 0.9
Input scene description
and parsed question
Matching weights
projection
Word/vector
embeddings
processing
similarity
Prediction over
candidate answers
Sigmoid or
Neighbours
Figure 2. Architecture of the proposed neural network. The input is provided as a description of the scene (a list of objects with their visual
characteristics) and a parsed question (words with their syntactic relations). The scene-graph contains a node with a feature vector for
each object, and edge features that represent their spatial relationships. The question-graph reﬂects the parse tree of the question, with a
word embedding for each node, and a vector embedding of types of syntactic dependencies for edges. A recurrent unit (GRU) is associated
with each node of both graphs. Over multiple iterations, the GRU updates a representation of each node that integrates context from its
neighbours within the graph. Features of all objects and all words are combined (concatenated) pairwise, and they are weighted with a
form of attention. That effectively matches elements between the question and the scene. The weighted sum of features is passed through
a ﬁnal classiﬁer that predicts scores over a ﬁxed set of candidate answers.
current neural network (RNN) such as an LSTM, which
produces a ﬁxed-size vector representing the sequence of
words. These two representations are mapped to a joint
space by one or several non-linear layers. They can then
be fed into a classiﬁer over an output vocabulary, predicting
the ﬁnal answer. Most recent papers on VQA propose improvements and variations on this basic idea. Consult 
for a survey.
A major improvement to the basic method is to use an
attention mechanism . It models interactions between speciﬁc parts of the inputs (image and
question) depending on their actual contents. The visual
input is then typically represented a spatial feature map,
instead of holistic, image-wide features. The feature map
is used with the question to determine spatial weights that
reﬂect the most relevant regions of the image.
Our approach uses a similar weighting operation, which, with our
graph representation, we equate to a subgraph matching.
Graph nodes representing question words are associated
with graph nodes representing scene objects and vice versa.
Similarly, the co-attention model of Lu et al. determines attention weights on both image regions and question words. Their best-performing approach proceeds in a
sequential manner, starting with question-guided visual attention followed by image-guided question attention. In our
case, we found that a joint, one-pass version performs better.
A major contribution of our model is to use structured
representations of the input scene and the question. This
contrasts with typical CNN and RNN models which are limited to spatial feature maps and sequences of words respectively. The dynamic memory networks (DMN), applied to
VQA in also maintain a set-like representation of the
input. As in our model, the DMN models interactions between different parts of the input. Our method can additionally take, as input, features characterizing arbitrary relations
between parts of the input (the edge features in our graphs).
This speciﬁcally allows making use of syntactic dependencies between words after pre-parsing the question.
Most VQA systems are trained end-to-end from questions and images to answers, with the exception of the
visual feature extractor, which is typically a CNN pretrained for image classiﬁcation.
For the language processing part, some methods address the the semantic aspect
with word embeddings pretrained on a language modeling
task (e.g. ).
The syntactic relationships between
the words in the question are typically overlooked, however. In , hand-designed rules serve to identify primary
and secondary objects of the questions. In the Neural Module Networks , the question is processed by a dependency parser, and fragments of the parse, selected with ad
hoc ﬁxed rules are associated with modules, are assembled
into a full neural network. In contrast, our method is trained
to make direct use of the output of a syntactic parser.
Neural networks on graphs have received signiﬁcant
attention recently . The approach most similar
to ours is the Gated Graph Sequence Neural Network ,
which associate a gated recurrent unit (GRU ) to each
node, and updates the feature vector of each node by iteratively passing messages between neighbours. Also related
is the work of Vinyals et al. for embedding a set into
ﬁxed-size vector, invariant to the order of its elements. They
do so by feeding the entire set through a recurrent unit multiple times. Each iteration uses an attention mechanism to
focus on different parts of the set. Our formulation similarly incorporates information from neighbours into each
node feature over multiple iterations, but we did not ﬁnd
any advantage in using an attention mechanism within the
recurrent unit.
3. Graph representation of scenes and questions
The input data for each training or test instance is a
question, and a parameterized description of contents of the
scene. The question is processed with the Stanford dependency parser , which outputs the following.
• A set of N Q words that constitute the nodes of the question graph. Each word is represented by its index in the
input vocabulary, a token xQ
i ∈Z (i ∈1..N Q).
• A set of pairwise relations between words, which constitute the edges of our graph. An edge between words i and
j is represented by eQ
ij ∈Z, an index among the possible
types of dependencies.
The dataset provides the following information about the
• A set of N S objects that constitute the nodes of the scene
graph. Each node is represented by a vector xS
visual features (i ∈1..N S). Please refer to the supplementary material for implementation details.
• A set of pairwise relations between all objects. They form
the edges of a fully-connected graph of the scene. The
edge between objects i and j is represented by a vector
ij ∈RD that encodes relative spatial relationships (see
supp. mat.).
Our experiments are carried out on datasets of clip art
scenes, in which descriptions of the scenes are provided in
the form of lists of objects with their visual features. The
method is equally applicable to real images, with the object
list replaced by candidate object detections. Our experiments on clip art allows the effect of the proposed method
to be isolated from the performance of the object detector.
Please refer to the supplementary material for implementation details.
The features of all nodes and edges are projected to a
vector space RH of common dimension (typically H=300).
The question nodes and edges use vector embeddings implemented as look-up tables, and the scene nodes and edges
use afﬁne projections:
with W1 the word embedding (usually pretrained, see supplementary material), W2 the embedding of dependencies,
W3 ∈Rh×c and W4 ∈Rh×d weight matrices, and b3 ∈Rc
and b4 ∈Rd biases.
4. Processing graphs with neural networks
We now describe a deep neural network suitable for processing the question and scene graphs to infer an answer.
See Fig. 2 for an overview.
The two graphs representing the question and the scene
are processed independently in a recurrent architecture. We
drop the exponents S and Q for this paragraph as the same
procedure applies to both graphs. Each node xi is associated with a gated recurrent unit (GRU ) and processed
over a ﬁxed number T of iterations (typically T=4):
ni = poolj( e′
t ∈[1, T].
Square brackets with a semicolon represent a concatenation of vectors, and ◦the Hadamard (element-wise) product.
The ﬁnal state of the GRU is used as the new representation
of the nodes: x′′
i . The pool operation transforms features from a variable number of neighbours (i.e. connected
nodes) to a ﬁxed-size representation. Any commutative operation can be used (e.g. sum, maximum). In our implementation, we found the best performance with the average
function, taking care of averaging over the variable number
of connected neighbours. An intuitive interpretation of the
recurrent processing is to progressively integrate context information from connected neighbours into each node’s own
representation. A node corresponding to the word ’ball’, for
instance, might thus incorporate the fact that the associated
adjective is ’red’. Our formulation is similar but slightly
different from the gated graph networks , as the propagation of information in our model is limited to the ﬁrst
order. Note that our graphs are typically densely connected.
We now introduce a form of attention into the model,
which constitutes an essential part of the model. The motivation is two-fold: (1) to identify parts of the input data
most relevant to produce the answer and (2) to align speciﬁc words in the question with particular elements of the
scene. Practically, we estimate the relevance of each possible pairwise combination of words and objects.
precisely, we compute scalar “matching weights” between
node sets {x
i } and {x
i }. These weights are comparable to the “attention weights” in other models (e.g. ).
Therefore, ∀i ∈1..N Q, j ∈1..N S:
where W5 ∈R1×h and b5 ∈R are learned weights and
biases, and σ the logistic function that introduces a nonlinearity and bounds the weights to (0, 1). The formulation is similar to a cosine similarity with learned weights
on the feature dimensions. Note that the weights are computed using the initial embedding of the node features
(pre-GRU). We apply the scalar weights aij to the corresponding pairwise combinations of question and scene
features, thereby focusing and giving more importance to
the matched pairs (Eq. 7). We sum the weighted features
over the scene elements (Eq. 8) then over the question elements (Eq. 9), interleaving the sums with afﬁne projections
and non-linearities to obtain a ﬁnal prediction:
yij = aij . [x
y′′ = f ′ W7
with W6, W7, b6, b7 learned weights and biases, f a ReLU,
and f ′ a softmax or a logistic function (see experiments,
Section 5.1). The summations over the scene elements and
question elements is a form of pooling that brings the variable number of features (due to the variable number of
words and objects in the input) to a ﬁxed-size output. The
ﬁnal output vector y′′ ∈RT contains scores for the possible
answers, and has a number of dimensions equal to 2 for the
binary questions of the “balanced” dataset, or to the number of all candidate answers in the “abstract scenes” dataset.
The candidate answers are those appearing at least 5 times
in the training set (see supplementary material for details).
5. Evaluation
Our evaluation uses two datasets:
the original “abstract scenes” from Antol et al. and its “balanced” extension from . They both contain scenes created by humans in a drag-and-drop interface for arranging
clip art objects and ﬁgures. The original dataset contains
20k/10k/20k scenes (for training/validation/test respectively) and 60k/30k/60k questions, each with 10 humanprovided ground-truth answers. Questions are categorized
based on the type of the correct answer into yes/no, number, and other, but the same method is used for all categories, the type of the test questions being unknown. The
“balanced” version of the dataset contains only the subset
of questions which have binary (yes/no) answers and, in addition, complementary scenes created to elicit the opposite
answer to each question. This is signiﬁcant because guessing the modal answer from the training set will the succeed
only half of the time (slightly more than 50% in practice
because of disagreement between annotators) and give 0%
accuracy over complementary pairs.
This contrasts with
other VQA datasets where blind guessing can be very effective. The pairs of complementary scenes also typically
differ by only one or two objects being displaced, removed,
or slightly modiﬁed (see examples in Fig. 5, bottom rows).
This makes the questions very challenging by requiring to
take into account subtle details of the scenes.
The main metric is the average “VQA score” ,
which is a soft accuracy that takes into account variability of
ground truth answers from multiple human annotators. Let
us refer to a test question by an index q = 1..M, and to each
possible answer in the output vocabulary by an index a. The
ground truth score s(q, a) = 1.0 if the answer a was provided by m≥3 annotators. Otherwise, s(q, a) = m/31. Our
method outputs a predicted score ˆs(q, a) for each question
and answer (y′′ in Eq. 9) and the overall accuracy is the average ground truth score of the highest prediction per question, i.e.
q s(q, arg maxa ˆs(q, a)).
It has been argued that the “balanced” dataset can better evaluate a method’s level of visual understanding than
other datasets, because it is less susceptible to the use of language priors and dataset regularities (i.e. guessing from the
question ). Our initial experiments conﬁrmed that the
performances of various algorithms on the balanced dataset
were indeed better separated, and we used it for our ablative analysis.
We also focus on the hardest evaluation
setting , which measures the accuracy over pairs of
complementary scenes. This is the only metric in which
blind models (guessing from the question) obtain null accuracy. This setting also does not consider pairs of test scenes
deemed ambiguous because of disagreement between annotators. Each test scene is still evaluated independently
however, so the model is unable to increase performance by
forcing opposite answers to pairs of questions. The metric is then a standard “hard” accuracy, i.e. all ground truth
scores s(i, j) ∈{0, 1}. Please refer to the supplementary
material for additional details.
5.1. Evaluation on the “balanced” dataset
We compare our method against the three models proposed in . They all use an ensemble of models exploiting either an LSTM for processing the question, or an elaborate set of hand-designed rules to identify two objects as
the focus of the question. The visual features in the three
models are respectively empty (blind model), global (scenewide), or focused on the two objects identiﬁed from the
question. These models are speciﬁcally designed for binary
questions, whereas ours is generally applicable. Nevertheless, we obtain signiﬁcantly better accuracy than all three
(Table 1). Differences in performance are mostly visible in
the “pairs” setting, which we believe is more reliable as it
discards ambiguous test questions on which human annotators disagreed.
During training, we take care to keep pairs of complementary scenes together when forming mini-batches. This
has a signiﬁcant positive effect on the stability of the optimization. Interestingly, we did not notice any tendency
toward overﬁtting when training on balanced scenes. We
hypothesize that the pairs of complementary scenes have a
strong regularizing effect that force the learned model to focus on relevant details of the scenes. In Fig. 5 (and in the
supplementary material), we visualize the matching weights
between question words and scene objects (Eq. 6). As expected, these tend to be larger between semantically related
1Ground truth scores are also averaged in a 10–choose–9 manner .
Softmax, soft scores
AP=76.3% F1=71.2%
Sigmoid, soft scores
AP=72.9% F1=69.0%
Softmax, hard scores
AP=72.3% F1=68.2%
Softmax, soft scores
AP=67.1% F1=64.9%
Sigmoid, soft scores
AP=67.0% F1=65.3%
Softmax, hard scores
AP=63.1% F1=62.8%
Softmax, soft scores
AP=78.1% F1=76.9%
Sigmoid, soft scores
AP=78.7% F1=76.6%
Softmax, hard scores
AP=78.7% F1=76.7%
Figure 3. Precision/recall on the “abstract scenes” (left: multiple choice, middle: open-ended) and “balanced” datasets (right). The scores
assigned by the model to predicted answers is a reliable measure of its certainty: a strict threshold (low recall) ﬁlters out incorrect answers
and produces a very high precision. On the “abstract scenes” dataset (left and middle), a slight advantage is brought by training for soft
target scores that capture ambiguities in the human-provided ground truth.
elements (e.g. daytime↔sun, dog↔puppy, boy↔human)
although some are more difﬁcult to interpret.
Our best performance of about 39% is still low in absolute terms, which is understandable from the wide range
of concepts involved in the questions (see examples in
Fig. 5 and in the supplementary material). It seems unlikely that these concepts could be learned from training
question/answers alone, and we suggest that any further signiﬁcant improvement in performance will require external
sources of information at training and/or test time.
Ablative evaluation
We evaluated variants of our model
to measure the impact of various design choices (see numbered rows in Table 1). On the question side, we evaluate (row 1) our graph approach without syntactic parsing,
building question graphs with only two types of edges, previous/next and linking consecutive nodes. This shows the
advantage of using the graph method together with syntactic parsing. Optimizing the word embeddings from scratch
(row 2) rather than from pretrained Glove vectors produces a signiﬁcant drop in performance. On the scene side,
we removed the edge features (row 3) by setting eS
It conﬁrms that the model makes use of the spatial relations
between objects encoded by the edges of the graph. In rows
4–6, we disabled the recurrent graph processing (x′′
for the either the question, the scene, or both. We ﬁnally
tested the model with uniform matching weights (aij = 1,
row 10). As expected, it performed poorly. Our weights act
similarly to the attention mechanisms in other models (e.g.
 ) and our observations conﬁrm that such
mechanisms are crucial for good performance.
Precision/recall
We are interested in assessing the conﬁdence of our model in its predicted answers. Most existing
VQA methods treat the answering as a hard classiﬁcation
Avg. score
Avg. accuracy
over scenes
over pairs
Zhang et al. blind
with global image features
with attention-based image features
Graph VQA (full model)
(1) Question: no parsing (graph with previous/next edges)
(2) Question: word embedding not pretrained
(3) Scene: no edge features (e
(4) Graph processing: disabled for question (x
(5) Graph processing: disabled for scene (x
(6) Graph processing: disabled for question/scene
(7) Graph processing: only 1 iteration for question (T Q=1) 39.0
(8) Graph processing: only 1 iteration for scene (T S=1)
(9) Graph processing: only 1 iteration for question/scene
(10) Uniform matching weights (aij=1)
Table 1. Results on the test set of the “balanced” dataset 
(in percents , using balanced versions of both training and test
sets). Numbered rows report accuracy over pairs of complementary scenes for ablated versions of our method.
over candidate answers, and almost all reported results consist of a single accuracy metric. To provide more insight,
we produce precision/recall curves for predicted answers. A
precision/recall point (p, r) is obtained by setting a thresh-
Fraction of training set used
Acuracy over pairs of scenes
Full model
Without syntactic parsing
Without pretrained word embedding
Without pretrained word embedding/syntactic parsing
Figure 4. Impact of the amount of training data on performance
(accuracy over pairs on the “balanced” dataset). Language preprocessing always improve generalization: pre-parsing and pretrained
word embeddings both have a positive impact individually, and
their effects are complementary to each other.
old t on predicted scores such that
 ˆs(i, j)>t
i,j 1(ˆs(i, j)>t)
 ˆs(i, j)>t
i,j s(i, j)
where 1(·) is the 0/1 indicator function. We plot precision/recall curves in Fig. 3 for both datasets2. The predicted
score proves to be a reliable indicator of the model conﬁdence, as a low threshold can achieve near-perfect accuracy
(Fig. 3, left and middle) by ﬁltering out harder and/or ambiguous test cases.
We compare models trained with either a softmax or a
sigmoid as the ﬁnal non-linearity (Eq. 9).
The common
practice is to train the softmax for a hard classiﬁcation objective, using a cross-entropy loss and the answer of highest
ground truth score as the target. In an attempt to make better
use of the multiple human-provided answers, we propose to
use the soft ground truth scores as the target with a logarithmic loss. This shows an advantage on the “abstract scenes”
dataset (Fig. 3, left and middle). In that dataset, the soft target scores reﬂect frequent ambiguities in the questions and
the scenes, and when synonyms constitute multiple acceptable answers. In those cases, we can avoid the potential
confusion induced by a hard classiﬁcation for one speciﬁc
answer. The “balanced” dataset, by nature, contains almost
no such ambiguities, and there is no signiﬁcant difference
between the different training objectives (Fig. 3, right).
Effect of training set size
Our motivation for introducing
language parsing and pretrained word embeddings is to better generalize the concepts learned from the limited training examples. Words representing semantically close concepts ideally get assigned close word embeddings. Similarly, paraphrases of similar questions should produce parse
2The “abstract scenes” test set is not available publicly, and precision/recall can only be provided on its validation set.
graphs with more similarities than a simple concatenation of
words would reveal (as in the input to traditional LSTMs).
We trained our model with limited subsets of the training
data (see Fig. 4). Unsurprisingly, the performance grows
steadily with the amount of training data, which suggests
that larger datasets would improve performance.
opinion however, it seems unlikely that sufﬁcient data, covering all possible concepts, could be collected in the form
of question/answer examples. More data can however be
brought in with other sources of information and supervision. Our use of parsing and word embeddings is a small
step in that direction. Both techniques clearly improve generalization (Fig. 4). The effect may be particularly visible in
our case because of the relatively small number of training
examples (about 20k questions in the “balanced” dataset).
It is unclear whether huge VQA datasets could ultimately
negate this advantage. Future experiments on larger datasets
(e.g. ) may answer this question.
5.2. Evaluation on the “abstract scenes” dataset
We report our results on the original “abstract scenes”
dataset in Table 2. The evaluation is performed on an automated server that does not allow for an extensive ablative
analysis. Anecdotally, performance on the validation set
corroborates all ﬁndings presented above, in particular the
strong beneﬁt of pre-parsing, pretrained word embeddings,
and graph processing with a GRU. At the time of our submission, our method occupies the top place on the leader
board in both the open-ended and multiple choice settings.
The advantage over existing method is most pronounced on
the binary and the counting questions. Refer to Fig. 5 and
to the supplementary for visualizations of the results.
6. Conclusions
We presented a deep neural network for visual question
answering that processes graph-structured representations
of scenes and questions. This enables leveraging existing
natural language processing tools, in particular pretrained
word embeddings and syntactic parsing. The latter showed
signiﬁcant advantage over a traditional sequential processing of the questions, e.g. with LSTMs.
In our opinion,
VQA systems are unlikely to learn everything from question/answer examples alone. We believe that any significant improvement in performance will require additional
sources of information and supervision. Our explicit processing of the language part is a small step in that direction.
It has clearly shown to improve generalization without resting entirely on VQA-speciﬁc annotations. We have so far
applied our method to datasets of clip art scenes. Its direct
extension to real images will be addressed in future work,
by replacing nodes in the input scene graph with proposals
from pretrained object detectors.
Multiple choice
Open-ended
LSTM blind 
LSTM with global image features 
Zhang et al. (yes/no only)
Multimodal residual learning 
U. Tokyo MIL (ensemble) 
Graph VQA (full model)
Table 2. Results on the test set of the “abstract scenes” dataset (average scores in percents).
Is the dog sleeping or resting ?
Answer: sleeping
What is the boy holding ?
Answer: toy blocks
Is the dog white ?
Answer: yes
Is the dog white ?
Answer: no
Is it daytime ?
Answer: yes
Is it daytime ?
Answer: no
Figure 5. Qualitative results on the “abstract scenes” dataset (top row) and on “balanced” pairs (middle and bottom row). We show the
input scene, the question, the predicted answer, and the correct answer when the prediction is erroneous. We also visualize the matrices
of matching weights (Eq. 6, brighter correspond to higher values) between question words (vertically) and scene objects (horizontally).
The matching weights are also visualized over objects in the scene, after summation over words, giving an indication of their estimated
relevance. The ground truth object labels are for reference only, and not used for training or inference.