Long Text Generation via Adversarial
Training with Leaked Information
Jiaxian Guo,† Sidi Lu,† Han Cai,† Weinan Zhang,†∗Yong Yu,† Jun Wang‡
†Shanghai Jiao Tong University, ‡University College London
{jiaxian,steve lu,hcai,wnzhang,yyu}@apex.sjtu.edu.cn, 
Automatically generating coherent and semantically meaningful text has many applications in machine translation, dialogue systems, image captioning, etc. Recently, by combining with policy gradient, Generative Adversarial Nets
(GAN) that use a discriminative model to guide the training of the generative model as a reinforcement learning policy has shown promising results in text generation. However,
the scalar guiding signal is only available after the entire text
has been generated and lacks intermediate information about
text structure during the generative process. As such, it limits its success when the length of the generated text samples
is long (more than 20 words). In this paper, we propose a
new framework, called LeakGAN, to address the problem for
long text generation. We allow the discriminative net to leak
its own high-level extracted features to the generative net to
further help the guidance. The generator incorporates such
informative signals into all generation steps through an additional MANAGER module, which takes the extracted features of current generated words and outputs a latent vector to guide the WORKER module for next-word generation.
Our extensive experiments on synthetic data and various realworld tasks with Turing test demonstrate that LeakGAN is
highly effective in long text generation and also improves the
performance in short text generation scenarios. More importantly, without any supervision, LeakGAN would be able to
implicitly learn sentence structures only through the interaction between MANAGER and WORKER.
Introduction
The ability to generate coherent and semantically meaningful text plays a key role in many natural language processing
applications such as machine translation ,
dialogue generation , and image captioning
 . While most previous work focuses on
task-speciﬁc applications in supervised settings , the generic unsupervised text generation, which aims to mimic the distribution over real text from a corpus, has recently drawn much
attention and Shanghai Sailing Program
(17YF1428200).
Copyright c⃝2018, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.
Hu et al. 2017). A typical approach is to train a recurrent
neural network (RNN) to maximize the log-likelihood of
each ground-truth word given prior observed words , which, however, suffers from so-called exposure bias
due to the discrepancy between training and inference stage:
the model sequentially generates the next word based on previously generated words during inference but itself is trained
to generate words given ground-truth words .
A scheduled sampling approach is proposed to addressed this problem, but is proved to be fundamentally inconsistent . Generative Adversarial Nets (GAN) , which is ﬁrstly
proposed for continous data (image generation etc.), is then
extended to discrete, sequential data to alleviate the above
problem and has shown promising results .
Due to the discrete nature of text samples, text generation
is modeled as a sequential decision making process, where
the state is previously generated words, the action is the next
word to be generated, and the generative net G is a stochastic policy that maps current state to a distribution over the
action space. After the whole text generation is done, the
generated text samples are then fed to the discriminative net
D, a classiﬁer that is trained to distinguish real and generated text samples, to get reward signals for updating G.
Since then, various methods have been proposed in text
generation via GAN . Nonetheless, the reported results are limited to the cases that the generated text samples are short
(say, fewer than 20 words) while more challenging long text
generation is hardly studied, which is necessary for practical tasks such as auto-generation of news articles or product
descriptions. A main drawback of existing methods to long
text generation is that the binary guiding signal from D is
sparse as it is only available when the whole text sample is
generated. Also, the scalar guiding signal for a whole text is
non-informative as it does not necessarily preserve the picture about the intermediate syntactic structure and semantics
of the text that is being generated for G to sufﬁciently learn.
On one hand, to make the guiding signals more informative, discriminator D could potentially provide more guidance beside the ﬁnal reward value, since D is a trained
model, e.g. a convolutional neural network (CNN) , rather than an unknown black box. With
that idea, proposed to train generator G
The Thirty-Second AAAI Conference
on Artificial Intelligence (AAAI-18)
via forcing learned feature representations of real and generated text by D to be matched, instead of directly training G to maximize the reward from D .
Such a method can be effective in short text generation, but
the guiding signals are still absent until the end of the text
 .
On the other hand, to alleviate the sparsity problem of the
guiding signal, the idea of hierarchy naturally arises in text
generation, since the real text samples are generated following some kinds of hierarchy such as the semantic structure
and the part-of-speech . By decomposing the
whole generation task into various sub-tasks according to the
hierarchical structure, it becomes much easier for the model
to learn. Early efforts have been made to incorporate the
hierarchy idea in text generation but all use a predeﬁned sub-task set
from domain knowledge, which makes them unable to adapt
to arbitrary sequence generation tasks.
In this paper, we propose a new algorithmic framework
called LeakGAN to address both the non-informativeness
and the sparsity issues. LeakGAN is a new way of providing richer information from the discriminator to the generator by borrowing the recent advances in hierarchical reinforcement learning . As illustrated in
Figure 1, we speciﬁcally introduce a hierarchical generator
G, which consists of a high-level MANAGER module and a
low-level WORKER module. The MANAGER is a long shortterm memory network (LSTM) and serves as a mediator. In each step, it receives
generator D’s high-level feature representation, e.g., the feature map of the CNN, and uses it to form the guiding goal
for the WORKER module in that timestep. As the information from D is internally-maintained and in an adversarial
game it is not supposed to provide G with such information.
We thus call it a leakage of information from D.
Next, given the goal embedding produced by the MAN-
AGER, the WORKER ﬁrst encodes current generated words
with another LSTM, then combines the output of the LSTM
and the goal embedding to take a ﬁnal action at current state.
As such, the guiding signals from D are not only available
to G at the end in terms of the scalar reward signals, but
also available in terms of a goal embedding vector during
the generation process to guide G how to get improved.
We conduct extensive experiments based on synthetic and
real data. For synthetic data, LeakGAN obtains much lower
negative log-likelihood than previous models with sequence
length set to 20 and 40. For real data, we use the text in
EMNLP2017 WMT News, COCO Image Caption and Chinese Poems as the long, mid-length and short text corpus,
respectively. In all those cases, LeakGAN shows signiﬁcant improvements compared to previous models in terms
of BLEU statistics and human Turing test. We further provide a deep investigation on the interaction between MAN-
AGER and WORKER, which indicates LeakGAN implicitly
learns sentence structures, such as punctuation, clause structure and long sufﬁx without any supervision.
Figure 1: An overview of our LeakGAN text generation
framework. While the generator is responsible to generate
the next word, the discriminator adversarially judges the
generated sentence once it is complete. The chief novelty
lies in that, unlike conventional adversarial training, during
the process, the discriminator reveals its internal state (feature ft) in order to guide the generator more informatively
and frequently. (See Methodology Section for more details.)
Related Work
Generating text that mimics human’s expression has been
studied for poem generation , image captioning , dialogue system machine translation . proposed a recurent neural network (RNN) based generative model to use the human-generated text where at each
step the model tries to predict the next word given previous
real word sequence and is trained in a supervised fashion.
A common difﬁculty of all supervised generative models
is that it is hard to design an appropriate, differentiable, lowbias metric to evaluate the output of the generator, which
inspires the adversarial training mechanisms. proposed generative adversarial nets (GANs)
to generate continuous data like images. GAN introduces a
minimax game between a generative model and a discriminative model, where the discriminator can be viewed as the
dynamically-updated evaluation metric to guide the tuning
of the generated data. To apply GANs to text generation,
 proposed SeqGAN that models the text generation as a sequential decision making process and trains
the generative model with policy gradient methods . MaliGAN modiﬁes the orginal
GAN objective and proposes a set of training techniques to
reduce the potential variance. To deal with the gradient vanishing problem of GAN, RankGAN proposes an alternative solution to this problem by replacing the
original binary classiﬁer discriminator with a ranking model
by taking a softmax over the expected cosine distances from
the generated sequences to the real data. Another problem
for the adversarial sequence generation models is that the
binary feedback from the discriminator is not sufﬁciently
informative, which requires a huge number of training and
generated samples to improve the generator and could result
in mode collapse problems. Feature Matching provides a mechanism that matches the latent feature
distributions of real and generated sequences via a kernelized discepancy metric to alleviate the weak guidance and
mode collapse problems. However, such enhancement only
happens when the whole text sample is generated and thus
the guiding signal is still sparse during the training.
Reinforcement learning (RL) on the other hand also faces
a similar difﬁculty when reward signals are sparse . Hierarchical RL is one of the promising techniques for handling the sparse reward issue . A typical approach in hierarchical RL is
to manually identify the hierarchical structure for the agent
by deﬁning several low-level sub-tasks and learning micropolicies for each sub-task while learning a macro-policy for
choosing which sub-task to solve. Such methods can be very
effective when the hierarchical structure is known a priori
using domain knowledge in a given speciﬁc task, but fail
to ﬂexibly adapt to other tasks. Recently, proposed an end-to-end framework for hierarchical
RL where the sub-tasks are not identiﬁed manually but implicitly learned by a MANAGER module which takes current
state as input and output a goal embedding vector to guide
the low-level WORKER module.
In this work, we model the text generation procedure via
adversarial training and policy gradient . To
address the sparse reward issue in long text generation, we
follow and propose a hierarchy design, i.e. MANAGER and WORKER, for the generator. As the
reward function in our case is a discriminative model rather
than a black box in , the high-level
feature extracted by the discriminator given the current generated word sequence is sent to the MANAGER module. As
such, the MANAGER module can be also viewed as a spy that
leaks information from the discriminator to better guide the
generator. To our knowledge, this is the ﬁrst work that considers the information leaking in GAN framework for better
training generators and combines hierarchical RL to address
long text generation problems.
Methodology
We formalize the text generation problem as a sequential decision making process .
Speciﬁcally, at each timestep t, the agent takes the previously generated words as its current state, denoted as st =
(x1, . . . , xi, . . . , xt), where xi represents a word token in
the given vocabulary V . A θ-parameterized generative net
Gθ, which corresponds to a stochastic policy, maps st to a
distribution over the whole vocabulary, i.e. Gθ(·|st), from
which the action xt+1, i.e. the next word to select is sampled. We also train a φ-parameterized discriminative model
Dφ that provides a scalar guiding signal Dφ(sT ) for Gθ to
adjust its parameters when the whole sentence sT has been
generated.
As we discussed previously, although the above adversarial training is principled, the scalar guiding signal becomes
relatively less informative when the sentence length T goes
larger. To address this, the proposed LeakGAN framework
allows discriminator Dφ to provide additional information,
denoted as features ft, of the current sentence st (it is internally used for Dφ itself for discrimination) to generator Gθ(·|st). In LeakGAN, a hierarchical RL architecture
is used as a promising mechanism to effectively incorporate
such leaked information ft into the generation procedure of
Gθ (also see Figure 1).
Leaked Features from D as Guiding Signals
Different from typical model-free RL settings where the reward function is a black box, our adversarial text generation
uses Dφ as a learned reward function. Typically, Dφ is a neural network and can be decomposed into a feature extractor
F(· ; φf) and a ﬁnal sigmoid classiﬁcation layer with weight
vector φl. Mathematically, given input s, we have
Dφ(s) = sigmoid(φ⊤
l F(s; φf)) = sigmoid(φ⊤
where φ = (φf, φl) and sigmoid(z) = 1/(1 + e−z).
f = F(s; φf) is the feature vector of s in the last layer
of Dφ, which is to be leaked to generator Gθ. As is shown
in Eq. (1), for a given Dφ, the reward value for each state
s mainly depends on the extracted features f. As such, the
objective of getting a higher reward from Dφ is equivalent
to ﬁnding a higher reward region in this extracted feature
space F(S; φf) = {F(s; φf)}s∈S. Speciﬁcally, our feature
extractor F(· ; φf) in Dφ is implemented by a CNN ; thus F(s; φf) outputs the CNN feature map vector as f after its convolution-pooling-activation
layer. Other neural network models such as LSTM can also be used to implement
Compared to the scalar signal Dφ(s), the feature vector f
is a much more informative guiding signal for Gθ, since it
tells what the position of currently-generated words is in the
extracted feature space.
A Hierarchical Structure of G
In each step t during the generation procedure, to utilize the
leaked information ft from Dφ, we follow hierarchical RL
 to have a hierarchical architecture
of Gθ. Speciﬁcally, we introduce a MANAGER module, an
LSTM that takes the extracted feature vector ft as its input
at each step t and outputs a goal vector gt, which is then
fed into the WORKER module to guide the generation of the
next word in order to approach the higher reward region in
F(S; φf). Next we will ﬁrst describe the detailed generator
model in LeakGAN and then show how the MANAGER and
WORKER are trained with the guiding signals from Dφ.
Generation Process.
The MANAGER and WORKER modules both start from an all-zero hidden state, denoted as
respectively. At each step, the MANAGER receives the leaked feature vector ft from the discriminator
Dφ, which is further combined with current hidden state of
the MANAGER to produce the goal vector gt as
= M(ft, hM
gt = ˆgt/∥ˆgt∥,
where M(· ; θm) denotes the MANAGER module implemented by an LSTM with parameters θm and hM
is the recurrent hidden vector of the LSTM.
To incorporate goals produced by MANAGER, a linear
transformation ψ with weight matrix Wψ is performed on
a summation over recent c goals to produce a k-dimensional
goal embedding vector wt as
Given the goal embedding vector wt, the WORKER module
takes the current word xt as input and outputs a matrix Ot,
which is further combined with wt by matrix product to determine the ﬁnal action space distribution under current state
st through a softmax
= W(xt, hW
Gθ(·|st) = softmax(Ot · wt/α),
where W(· ; θw) denotes the WORKER module, i.e. an
LSTM with hW
as its recurrent hidden vector, Ot is a |V |×k
matrix that represents the current vector for all words, thus
Ot ·wt yields the calculated logits for all words, and α is the
temperature parameter to control the generation entropy.
Training of G
Notice that the above procedure is fully differentiable. One
can train Gθ in an end-to-end manner using a policy gradient algorithm such as REINFORCE . In
LeakGAN, we would hope the MANAGER module to capture some meaningful patterns. Thus, we follow and train the MANAGER and WORKER modules
separately, where the MANAGER is trained to predict advantageous directions in the discriminative feature space and the
WORKER is intrinsically rewarded to follow such directions.
Similar to , the gradient of the MAN-
AGER module is deﬁned as
θmgt = −QF(st, gt)∇θmdcos
ft+c −ft, gt(θm)
where QF(st, gt) = Q(F(st), gt) = Q(ft, gt) = E[rt] is
the expected reward under the current policy which can be
approximately estimated via Monte Carlo search . dcos represents the cosine similarity between the change of feature representation after cstep transitions, i.e. ft+c −ft, and the goal vector gt(θm)1
produced by MANAGER as in Eq. (2). Intuitively, the loss
function is to force the goal vector to match the transition in
the feature space while achieving high reward. At the same
time, the WORKER is trained to maximize the reward using
the REINFORCE algorithm as is done in
 ,
∇θwEst−1∼G
t W(xt|st−1; θw)
=Est−1∼G,xt∼W(xt|st−1)[rI
t ∇θw log W(xt|st−1; θw)], (8)
1We use gt(θm) to explicitly show gt is parameterized by θm.
which can be approximated by sampling the state st−1 and
the action xt taken by WORKER. As the WORKER is encouraged to follow the directions produced by the MANAGER,
following , the intrinsic reward for
the WORKER is deﬁned as
ft −ft−i, gt−i
In practice, before the adversarial training, we need to pretrain Gθ. To be consistent, in the pre-train stage, we also use
the separate training scheme, where the gradient of MAN-
θmgt = −∇θmdcos
ˆft+c −ˆft, gt(θm)
where ˆft = F(ˆst), ˆst and ˆst+c are states of real text, and the
state-action value QF(st, gt) in Eq. (7) is set as 1 here since
the data instances used in pre-training are all real sentences.
As such, the MANAGER is trained to mimic the transition of
real text samples in the feature space. While the WORKER
is trained via maximum likelihood estimation (MLE).
In the training process, the generator Gθ and discriminator Dφ are alternatively trained. In the generator, the MAN-
AGER M(· ; θm) and WORKER W(· ; θw) (including ψ and
softmax) are alternatively trained while ﬁxing the other. The
details of the training procedure are attached in the supplementary material2.
Training Techniques
Bootstrapped Rescaled Activation.
During the adversarial training of SeqGAN , severe gradient vanishing occurs when D is much stronger than G, i.e. the reward is too small value to update the parameters and thus
need be rescaled before being fed into G. Inspired by ranking idea from RankGAN , we propose a
simple, time-efﬁcient, rank-based method to rescale the rewards, named as bootstrapped rescaled activation. For a
mini-batch with B sequences, after the rollout of the generative model, the reward matrix is denoted as RB×T . For
each timestep t, we rescale the t-th column vector Rt via
0.5 −rank(i)
where rank(i) denotes the i-th element’s high-to-low ranking in this column vector. δ is a hyperparameter that controls
the smoothness of the rescale activation. σ(·) is an activation
function that re-projects the equidifferent scoring based on
ranking to a more effective distribution. In our experiment,
for example, the model adopts hyperparameter δ = 12.0 and
the sigmoid function as σ(·).
There are two main advantages of the bootstrapped
rescaled activation. First, after this transformation, the expectation and variance of the reward in each mini-batch are
constant. In this case, the rescale activation serves as a value
stabilizer that is helpful for algorithms that are sensitive in
numerical variance. Second, as all ranking methods do, it
prevents the gradient vanishing problem, which accelerates
the model convergence.
2 
Interleaved Training.
In traditional generative adversarial models, mode collapse is a common problem. Here we
propose a training scheme called interleaved training to alleviate such a problem. As its name is, we adopt an interleaving of supervised training (i.e. MLE) and adversarial training (i.e. GAN) instead of full GAN after the pre-training.
For example, we perform one epoch of supervised learning
for G after 15 epochs of adversarial training. An explanation
of why this scheme works is that blending these two trainings would help GAN get rid of some bad local minimums
and alleviate mode collapse. Another justiﬁcation is that the
inserted supervised learning performs an implicit regularization on the generative model to prevent it from going too far
away from the MLE solution.
Temperature Control.
The Boltzmann temperature α in
Eq. (6) is a factor that could be used to balance the exploration and exploitation for reinforcement learning problems.
Here we select a higher temperature when we are training
the model and a lower temperature when we adopt the model
to generate samples.
Experiment
The experiment consists of three parts: synthetic data experiments, experiments in real-world scenarios and some explanation study. The repeatable experiment code is published
for further research3.
Training Settings
Synthetic Oracle.
For the synthetic data experiments,
simlar to , we ﬁrst initialize the parameters of an LSTM following the normal distribution
N(0, 1) as the oracle describing the real data distribution
Goracle(xt|x1, . . . , xt−1). We use it to generate 10,000 sequences of length 20 and 40 respectively as the training set
S for the generative models.
GAN Setting.
For the discriminator, we choose the CNN
architecture as the feature extractor and the binary classiﬁer. Note that one could design speciﬁc structure for different tasks to reﬁne the CNN performance. For the synthetic data experiment, the CNN kernel
size ranges from 1 to T. The number of each kernel is between 100 and 200. In this case, the feature of text is a 1,720
dimensional vector. Dropout with the
keep rate 0.75 and L2 regularization are performed to avoid
overﬁtting. For the generator, we adopt LSTM as the architectures of MANAGER
and WORKER to capture the sequence context information.
The MANAGER produces the 16-dimensional goal embedding feature vector wt using the feature map extracted by
CNN. The goal duration time c is a hyperparameter set as 4
after some preliminary experiments.
Compared Models.
For most parts of our experiment,
three baseline models are mainly compared with LeakGAN,
namely an MLE trained LSTM, SeqGAN 
and RankGAN . We also compare model
3 
Figure 2: The illustration of training curve.
Table 1: The over NLL performance on synthetic data.
Table 2: BLEU scores performance on EMNLP2017 WMT.
variants, such as SeqGAN with bootstrapped rescaled activation, and include the real data to be referred as the performance upperbound.
Evaluation Metrics.
Negative log-likehood (NLL) is used
for synthetic data experiment since there is the oracle data
distribution available for evaluation. For real-world data experiments, BLEU statistics and human rating scores in the Turing test are reported. We further
perform a t-test for the improvement of LeakGAN over the
second highest performance and report the p-value.
Synthetic Data Experiments
We run the synthetic data experiment with the text-length set
as 20 and 40 respectively.
The training curves are depicted in Figure 2 and the overall NLL performance is presented in Table 1. One could
have two observations from the results. (i) In the pre-training
stage, LeakGAN has already shown observable performance
superiority compared to other models, which indicates that
the proposed hierarchical architecture itself brings improvement over the previous ones. (ii) In the adversarial training
stage, LeakGAN shows a better speed of convergence, and
the local minimum it explores is signiﬁcantly better than previous results. The results demonstrate the effectiveness of
the information leakage framework and the hierarchical RL
architecture for generating both short and long texts.
Long Text Generation: EMNLP2017 WMT News
We choose the EMNLP2017 WMT4 Dataset as the long text
corpus. Speciﬁcally, we pick the News section from the original dataset. The news dataset consists of 646,459 words
4 
Table 3: BLEU scores on COCO Image Captions.
Table 4: The BLEU performance on Chinese Poems.
and 397,726 sentences. We preprocess the data by eliminating the words with frequency lower than 4,050 as well
as the sentence containing these low frequency words. Besides, to focus on long sentences, we remove the sentences
with length less than 20. After the preprocessing, the news
dataset has 5,742 words and 397,726 sentences. Then we
randomly sample 200,000 sentences as the training set and
another 10,000 sentences as the test set. We use the BLEU-(2
to 5) scores as the evaluation metrics.
The results are provided in Table 2. In all measured metrics, LeakGAN shows signiﬁcant performance gain compared to baseline models. The consistently higher BLEU
scores indicate that the generated sentences of LeakGAN are
of high quality in local features to mimic the real text.
Middle Text Generation: COCO Image Captions
Another real dataset we use is the COCO Image Captions
Dataset , a dataset which contains groups
of image-description pairs. We take the image captions as
the text to generate. Note that the COCO Dataset is not a
long text dataset, in which most sentences are of about 10
words. Thus we apply some preprocessing on the dataset.
The COCO Image Captions training dataset consists of
20,734 words and 417,126 sentences. We remove the words
with frequency lower than 10 as well as the sentence containing them. After the preprocessing, the dataset includes
4,980 words. We randomly sample 80,000 sentences for the
training set, and another 5,000 for the test set.
The results BLEU scores are provided in Table 3. The results of the BLEU scores on the COCO dataset indicate that
LeakGAN performs signiﬁcantly better than baseline models in mid-length text generation task.
Short Text Generation: Chinese Poems
To evaluate the performance of LeakGAN in short text
generation, we pick the dataset of Chinese poems which
is proposed by and most related work such as . The dataset consists of 4-line 5-character
poems. Following the above work, we use the BLEU-2
scores as the evaluating metrics.
The experimental results are provided in Table 4. The results on Chinese Poems indicate that LeakGAN successfully
handles the short text generation tasks.
Figure 3: The illustration of BLEU improvement change
along with the generated text length on WMT News.
Table 5: Turing test results for in real-world experiments.
Ground Truth
Performance Robustness in Long Text Generation
Long text generation has always been difﬁcult among all text
generation problems. The difﬁculty of the problem is due to
many factors, such as LSTM-RNN’s failure to capture longterm dependency, discriminator’s failure to give those “good
but tiny” sequences appropriate penalty. To explicitly evaluate the superiority of LeakGAN in long text generation, here
we use the relative performance gain of LeakGAN over SeqGAN and RankGAN .
The results over EMNLP2017 WMT News data are
shown in Figure 3. The curves clearly show that LeakGAN
yields larger performance gain over the baselines when the
generated sentences are longer. This fact supports our claim
that LeakGAN is a robust framework for long text.
Turing Test and Generated Samples
Since BLEU score is a metric focusing on the local text
statistics, which may not be sufﬁcient for evaluating text
generation quality, we also conduct a Turing test based on
questionnaires on the Internet. In the questionnaire, each
(machine generated or real) sentence gets +1 score when it
is regarded as a real one, and 0 score otherwise. We conduct the test with text generated by the models trained on
WMT News and COCO Image Captions. The average score
for each algorithm is calculated. In practice, we sample 20
sentences from every method and invite 62 people to participate the test, where everyone should judge the quality of 30
sentences from the compared three methods and thus each
sentence is judged by 31 people. For the comparison fairness, the sentences used in the questionnaires are randomly
sampled. Table 5 gives the results. The performance on two
datasets indicates that the generated sentences of LeakGAN
are of higher global consistency and better readability than
those of SeqGAN.
A few samples generated by LeakGAN are illustrated in
Table 6. More samples and their comparison with those from
Table 6: Samples from different methods on COCO Image Captions and EMNLP2017 WMT News.
COCO Image Captions
(1) A man sitting in front of a microphone with
his dog sitting on his shoulder.
(1) A bathroom with tiled walls and a shower
(2) A young man is holding a bottle of wine in
(2) A couple of kids in front of a bathroom that
is in a bathroom.
EMNLP2017 WMT
(1) The American Medical Association said that
the militants had been arrested in connection
with the murder of the same incident.
(1) “I think you should really really leave for
because we hadn’t been busy, where it goes to
one,” he wrote.
(2) This is the ﬁrst time that the Fed has been
able to launch a probe into the country’ s nuclear program.
(2) What you have to stop, if we do that, as late,
law enforcement and where schools use a list of
aid, it can rise.
Figure 4: Feature traces during the generation (SeqGAN,
RankGAN and LeakGAN) and features of completed real
data (all compressed to 2-dim by PCA) on WMT News.
the baseline models are provided in the supplementary material. These samples are collected for the Turing test questionnaires.
Model Explanation
Feature Trace.
To verify that LeakGAN successfully exploits of the leaked message, we visualize the feature vector
fT extracted from the real data by discriminator. Besides, we
visualize the feature trace, i.e. the features ft of preﬁx st during the generation, for LeakGAN, SeqGAN and RankGAN
via a 2-D principal component analysis (PCA).
The visualized traces are plotted in Figure 4 and more
cases are presented in the supplementary material. As we
can see, during the generation process, in LeakGAN, the
feature vector gradually approaches the real data feature
vector region. However, previous models, i.e. SeqGAN and
RankGAN, fail to match the features even when the generation is completed. This indicates that the proposed Leak-
GAN does ﬁnish its design purpose of exploiting the leaked
information from Dφ to better match the feature vector distributions of real data.
Behaviors of Worker and Manager.
To give more details
of how WORKER and MANAGER interact with each other
and make use of the leaked information in the generative
model, we visualize the interaction vector of the WORKER
and MANAGER, i.e., the dimension-wise product of their
output (Ot · wt as in Eq. (6)). Note that to simplify the explanation, here we reduce the signal dimension from 16 to


  

!
Figure 5: Illustration of WORKER and MANAGER’s behaviors during a generation. (Dimension-wise Product of
Worker and Manager)
8. Figure 5 presents an example sentence and more cases are
provided in the supplementary material.
From Figure 5, we ﬁnd some intuitive interpretations of
the implicit rules learned by the interaction of WORKER and
MANAGER. (i) The 5th dimension stands for current token’s
divergence from an entity token. If the 5th value is high, the
token would most possibly be a structural token, such as a
modal verb, an article or a preposition. (ii) The 6th dimension suggests how long the sufﬁx from current step will be.
If a peak occurs in the curve, there must be some token that
triggers a long sufﬁx. A frequently occurring example is the
formal subject. (iii) Although hard to observe, we do ﬁnd
connections of the 7th dimension and the substructure of a
sentence. For example, when the start or the end of a subsentence occurs, there is an observable ﬂuctuation in the 7th
dimension. This indicates that the token is most likely to be
a punctuation or a conjuction.
Conclusion and Future work
In this paper, we proposed a new algorithmic framework
called LeakGAN for generating long text via adversarial
training. By leaking the feature extracted by the discriminator as the step-by-step guiding signal to guide the generator better generating long text, LeakGAN addresses the
non-informativeness and sparsity problems of the scalar reward signal in previous GAN solutions. In the extensive experiments with synthetic data and real world data including
long, mid-length and short text, LeakGAN achieved significant performance improvement over previous solutions, on
both BLEU scores and human ratings. Moreover, the analysis of the results shows that LeakGAN yields larger performance gain when the longer sentences are generated. Finally, we also visualize and explain the efﬁcacy of the guiding signals that LeakGAN learns without any supervision.
For future work, we plan to apply LeakGAN in more natural language process applications like dialogue systems and
image captioning by providing more task-speciﬁc guiding
information. Also, enhancing the capacity of the discriminator to check the global consistency of the whole sentence is
a promising direction.