A Resource–efﬁcient Time Estimation for Wireless Sensor
Daniela Tulone
Department of Computer Science
University of Pisa
via F. Buonarroti, 2
56124 Pisa, Italy
 
We study the problem of providing a sensor node with an accurate estimate of the current time, from a novel prospective
which is complementary to the well–studied clock synchronization problem.
More precisely, we analyze the case in
which a sensor node is temporarily unable to run a clock
synchronization protocol due to low–energy, or intermittent
connectivity, or process failures, but still requires an accurate estimate of the time. We propose and analyze two eﬃcient clock reading methods, one deterministic and the other
probabilistic, which are designed to work in synergy with
clock synchronization protocols to provide a better time estimate. Our deterministic method achieves a better accuracy by exploiting the sign of the global deviation of the
hardware clock from the reference time, and can be applied
to reduce the frequency of the periodic clock adjustments
by a factor 2, while maintaining the same time uncertainty.
The second method based on time series forecasting, is more
ﬂexible than the previous one since it is independent of the
frequency at which clock synchronization occur.
Categories and Subject Descriptors
G.3 [Probability and statistic]: Time series analysis; C.4
[Performance of systems]: Measurement techniques; C.2.1
[Network Architecture and Design]: Wireless communication.
General Terms
Algorithms, Performance, Measurement.
Time estimation, clock drift rate, clock synchronization, time
series forecasting, resource eﬃciency.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
DIALM-POMC’04, October 1, 2004, Philadelphia, Pennsylvania, USA.
Copyright 2004 ACM 1-58113-921-7/04/0010 ...$5.00.
INTRODUCTION
As in any distributed computer system, the computation
of an accurate estimate of the reference time is an important issue in wireless sensor networks (WSN). For instance,
it plays a crucial role in data integration and sensor reading
fusion. In fact, the lack of synchronization among sensor
clocks can result in inaccurate time–stamping due to the
diﬀerent clock drift, and can lead to falsely reorder events
or even reverse them, thus aﬀecting data correctness. Time
synchronization is relevant also for TDMA medium access
scheduling for low–energy radio operation.
In fact, since
listening and transmitting are both energy–expensive operations in a low–power radio, a common technique is to
turn the radio oﬀ, waking up only brieﬂy to exchange short
messages before going back to sleep .
Time synchronization plays a crucial role in other WSN settings, such
as object tracking, duplicate detection and in distributed
beam–forming. These applications motivate the increasing
attention to the clock synchronization problem in WSN in
the last few years, and the numerous protocols that have
been proposed such as . In
fact, as pointed out by Elson et al. , WSN show some
unique characteristic that makes hard the application of
well–known clock synchronization protocols such as NTP
Time synchronization service in WSN has to meet
challenges which are substantially diﬀerent from those in
infrastructure–based networks. For instance, as each sensor
has a ﬁnite battery source and communication is expensive
in terms of energy, an important issue of WSN is energy eﬃciency. In addition, WSN show a higher failure probability
over the time than in traditional networks due to battery
depletion or destruction of the sensors, and changes in the
environment can dramatically aﬀect radio propagation causing frequent network topology changes and network partitions. Moreover, at high densities WSN become much more
likely to suﬀer communication failures due to contention for
their shared communication medium. These elements lead
to strong energy–eﬃciency, self–conﬁguration and robustness requirements. In the last few years several clock synchronization protocols for WSN have been proposed based
on diﬀerent approaches, such as the Reference Broadcast
Synchronization (RBS) proposed by Elson et al. , or hierarchical approaches , or interval–based , or probabilistic approaches for energy eﬃciency . However, despite
their diversity, these proposals share a common viewpoint:
they provide an accurate time estimate by means of periodic
synchronization performed by each sensor node and based
on messages exchanged with its neighbor nodes.
each clock adjustment is energy–consuming since it involves
transmitting messages and listening, besides the computational cost. Therefore, reducing the frequency of periodic
clock synchronization would result in a noticeable energy
saving, and in a natural extension of the network lifetime.
In addition, for the reasons previously discussed, there are
cases in which a sensor node is temporarily unable to synchronize its clock to its neighbors’s due to process failures,
or intermittent connectivity, or topological changes in the
network, or temporary obstructions (i.e. environmental
sensors, or sensors thrown by a plane). Notice that these
situations are related to the intrinsic nature of the WSN,
and therefore should be taken into consideration as well.
Therefore, it is also important to study the time accuracy
of a sensor clock in case of complete temporary isolation of
the sensor. The problem of improving the clock accuracy
between synchronization has not been taken into consideration by previous works on WSN. This paper provides the
ﬁrst answer to the question: ”what time accuracy can be
provided in case of node isolation or low–energy?”
Our contributions Our ﬁrst contribution consists in pointing out an unexplored aspect of the time synchronization
problem in WSN. We tackle the problem of providing an
accurate approximation of the reference time from a novel
prospective which is complementary to the view analyzed by
previous works focusing on clock synchronization, and that
consists in improving the accuracy of a clock between synchronization. In fact, all previous works take into account a
maximum error growth ˆρ∆t between synchronization, with
ˆρ maximum hardware drift rate and ∆t time elapsed since
the last synchronization.
We propose two methods: a deterministic clock reading
method called DCR, and a probabilistic one called PCR,
that provides a probabilistically accurate time estimate with
constant time uncertainty (error bound). Our DCR method
improves in the vast majority of cases, the clock accuracy
between synchronization by exploiting the sign of the deviation of the hardware clock from the real time at a given point
in time. Despite the broad literature on clock synchronization related to the hardware drift rate , this
represents a novel approach. We introduce a new metric,
called cumulative hardware drift rate, that provides, in contrast with the traditional drift rate, global information on
the clock behavior. It measures the clock deviation from the
reference time accumulated since its initial time. Our DCR
method is general, and can be applied to WSN to reduce by
a factor 2 the frequency of the clock synchronization while
maintaining the same time uncertainty, with noticeable energy saving and enhancement of the network bandwidth. It
can also be applied to improve the time accuracy by reducing the maximum error by a factor 2. Our probabilistic
method PCR proposes a general framework that is based on
an adaptation of time series forecasting to predict the value
of the clock deviation at the current time based on a narrow
window of past events.
Time series forecasting is a powerful statistical technique that has been applied to provide
dynamic resource performance forecasts, such as TCP/IP
end–to–end throughput and latency, and quality–of–service
guarantees .
However, it has not been applied to our
context. The PCR method returns a time value, which is
probabilistically accurate, with constant time uncertainty.
Clearly there is a trade–oﬀbetween accuracy and ﬂexibility.
It is more ﬂexible that the DCR method since it does not
assume a speciﬁc frequency in the clock synchronization (it
provides a time estimate with a constant time uncertainty
even when the sensor has ”skipped” more than 2 clock adjustments). Clearly, the DCR and the PCR methods can be
combined and work in synergy with a clock synchronization
protocol (such as that works for sporadic clock synchronization) to improve the clock accuracy. Our methods show
some attractive features for WSN: they are computationally
eﬃcient, general, and simple to implement.
The rest of the paper is organized as follows: Section 2
compares related works and Section 3 presents our model
and the techniques used. We present in Section 4 our DCR
method and analyze it. Section 5 introduces our PCR method
based and analyzes it. Section 6 discusses future works.
RELATED WORKS
Clock synchronization protocols in WSN In the last
few years several clock synchronization protocols have been
proposed such as . Among
these, some protocols are based on the Reference Broadcast Synchronization (RBS) proposed by Elson et al. ,
others on a hierarchical structure , or very recently
on the interval–based paradigm , originally introduced
by Marzullo and Owicki . All of these proposals provide
time synchronization by periodically adjusting each clock to
its neighbors.
As mentioned in the Introduction, our approach is very diﬀerent since it does not synchronize the
sensor clock, but is designed to work between clock synchronization. Therefore, it is not possible to compare our algorithms to previous clock synchronization protocols, though
our methods must work in synergy with a clock synchronization protocol.
Drift–based clock synchronization Improving the accuracy of a set of distributed clocks by exploiting information
related to their hardware drift rate is not a novel idea: for
instance, Schossmaier et al. and NTP include drift
information in their clock adjustments. Fetzer and Cristian
show in how to build clocks with bounded drift rate
from components oﬀ–the–shell, and achieve high accuracy
by means of drift synchronized clocks. Their work is quite
close to our DCR method for analyzing the behavior of the
hardware drift rate, but diverges for its strong assumptions
(i.e. requiring hardware support). Our work diverges from
all previous proposals mainly for two reasons: 1) for exploiting the global deviation of the clock, the deviation from the
reference time accumulated since the initial time, in contrast
with the hardware drift rate that captures the local speed of
the clock, and 2) for reducing the maximum error growth
ˆρ∆H between synchronization. As discussed in Section 4.2,
this novel prospective can lead to an improvement of the
Cristian and Fetzer optimality result for external clock
synchronization.
Probabilistic approaches There are few protocols that
are probabilistic in nature: for instance, the probabilistic
remote clock reading protocol proposed by Cristian , or
Cristian and Fetzer probabilistic clock synchronization protocol . Statistical techniques are also applied in NTP
 at synchronization time to compute an accurate approximation of the time based on the timestamps received
from the neighbors. Very recently Palchaundhuri et al 
have proposed a probabilistic protocol for WSN based on
the RBS, for energy eﬃciency. However, these approaches
diverge from ours for solving the clock synchronization problem.
Statistical techniques such as time series forecasting, has
been applied by Wolski to provide dynamic resource
performance forecast, such as to predict the TCP/IP end–
to–end throughput and latency. We are not aware of any
probabilistic study on the clock deviation between synchronization. Vernotte et al. apply an auto–regressive linear
model to estimate the time uncertainty of the on–board oscillator for diﬀerent type of noise. However, their target is
to determine how the maximum error is related to the noise
level of the clock in order to classify clocks.
PRELIMINARIES
Clock model
Each sensor node has access to a local hardware clock
whose clock function is denoted by H(t).
Because of the
impressions of the oscillator, variations in the temperature,
pressure, and aging, a hardware clock can drift apart from
real time. The hardware drift rate function ρ(t), deﬁned as
the ﬁrst derivative of H(t) over the time minus 1, provides a
measure for the punctual variation of the clock speed. It is
common practice to assume a maximum drift rate ˆρ for the
hardware clock. This implies that for any real time t1 < t2
the hardware clock function measures the passage of time in
[t1, t2] with an error of at most ˆρ(t2 −t1). That is,
(1 −ˆρ)(t2 −t1) ≤H(t2) −H(t1) ≤(1 + ˆρ)(t2 −t1)
For t1 = 0 and for a negligible initial error, this implies that
(1 −ˆρ) t ≤H(t) ≤(1 + ˆρ) t.
As mentioned before, our algorithms exploits the behavior of the deviation of the hardware clock from the real
time. The clock deviation function is denoted by D, it is
a function mapping real time values into reals and such that
D(t) = t −H(t) for each time t. Clearly, D(t) can grow unbounded with the time. It is useful for our further discussion
to write D(t) as D(t) = δ(t) t where δ(t) is a function similar
to ρ(t) and called cumulative hardware drift rate function.
Function δ maps real time values to real values in [−ˆρ, ˆρ],
and is such that δ(t) is the slope of the line passing through
the origin O and point H(t), minus 1. Figure 1 illustrates the
hardware clock function H(t) limited by the lines (1 ± ˆρ) t,
the cumulative drift at time τ and the hardware drift rate
ρ(τ). The dashed line bisector represents the reference time.
Notice that the cumulative drift provides information about
the clock deviation accumulated since its initial time, while
the hardware drift rate provides a local measure representing the speed of the clock at that time.
Figure 1 shows
the diﬀerence between the two metric, the hardware drift
represents the slope of the tangent of the clock function
The cumulative drift seems a more appropriate
metric for our study whose target is to improve the accuracy of the clock by exploiting past information on the its
deviation. The hardware clock function can be written as
H(t) = (1 + δ(t)) t , and |δ(t)| < ˆρ by condition (1). The
relation between ρ(t) and δ(t) is provided by the equation
ρ(t) = dδ(t)
dt t + δ(t).
The interval–based paradigm
We adopt the interval–based paradigm, originally proposed by Marzullo and Owicki and later reﬁned by
(1 + δ(τ))t
Figure 1: The hardware clock function H(t), the cumulative drift δ(τ), and the hardware drift rate ρ(τ)
at time τ.
Shmidt and Shossmaier , for its advantages in WSN
over time estimates .
For instance, it allows to obtain
guaranteed bounds from sensor data fusion, and to enter
in a fail–safe state when the time uncertainty grows excessively large. Each node maintains a virtual clock function
C(t) that is synchronized periodically, namely every Γ time
units, to a more accurate estimate of the current time. We
assume that the clock synchronization occurs at real time
t1, t2, . . . , ti, . . . with ti ≈i Γ, and that clock C(t) is synchronized at the ith synchronization to Ti (value obtained
by running a clock synchronization protocol among the sensor neighbor or from a more accurate source) with maximum
inherited error ε. The time interval of clock C(t), denoted
by IC(t), is a function mapping real time values to clock
values and such that I(t) = [C(t) −E(t), C(t) + E(t)] for
each t ∈[ti, ti+1), with C(t) = H(t) + (Ti −H(ti)) and
E(t) = ε + ˆρ(H(t) −H(ti)). A time interval IC(t) is correct
at time t if t ∈IC(t). From now on we denote for simplicity H(t) −H(ti) by ∆H, the time at which the last synchronization occurred by ti, the error growth since its last
synchronization by ˆρ∆H, the maximum time uncertainty by
η = ε+ˆρΓ, and the maximum hardware drift rate ˆρ by ρ. We
neglect terms smaller than ρ2Γ. Clearly, if the time interval
between two synchronization increases, then the maximum
error bound E(t) exceeds η. Figure 2 illustrates the periodic
clock adjustments performed at time Γ, 2Γ and 3Γ.
max error < η
Figure 2: Periodic clock synchronization
Problem statement
Since the error bound E(t) grows with the time elapsed
since its last synchronization, our target is to provide a time
estimate with the same time uncertainty η in case the sensor
node is unable to synchronize its clock due to low–battery
or intermittent connectivity, or network partition or process
Clearly, if the clock synchronization does not oc-
ε + ρ∆H > η
Figure 3: Irregular clock synchronization
cur necessarily regularly, the time period between two consecutive synchronization [ti−1, ti] can vary. However, for
simplicity we assume that clock synchronization occur at a
regular basis in the WSN, and that therefore (ti −ti−1) is a
multiple of Γ. This assumption is reasonable in WSN since
sensors sleep most of the time to save energy battery. Figure
3 shows a scenario in which clock synchronization occur at
time Γ, 2Γ, and 4Γ and the time evaluation of t is requested
after more Γ time units since its last synchronization.
Time series forecasting
In this subsection we brieﬂy review some basic concepts
on time series forecasting that will be applied in the PCR
method in Section 5. Time series seem to suit well our problem because of their temporality. We refer the reader to 
for further discussion on time series forecasting.
A time series is a set of observations xt, each one being
recorded at a speciﬁc time t. An important part of the analysis of the time series is the selection of a suitable probability
model for the data. To allow for the possibly unpredictable
nature of future observations, it is natural to suppose that
each observation xt is a realized value of a certain random
variable Xt (often denoted as X(t)).
Definition 1. A time series model for the observed data
{xt} is a speciﬁcation of the joint distributions (or possibly
only the means and covariances) of the sequence of random
variables {Xt} of which {xt} is postulated to be a realization.
Clearly, if we wish to make predictions, then we must assume
that something does not vary with the time. Therefore, an
important step to time series modelling is to remove trend
and seasonal components to get a stationary time series (or
weakly stationary). Loosely speaking, a time series {Xt} is
stationary if it has statistical properties similar to those of
the time–shifted series {Xt+h} for each integer h. More precisely, {Xt} is weakly stationary if its mean function µX(t)
and its covariance function γX(t + h, t) are independent of t
for each h.
The class of linear time series model, which includes the
class of autoregressive moving–average (ARMA) models, provides a general framework for studying stationary processes.
The ARMA processes are deﬁned by linear diﬀerence equations with constant coeﬃcients. One of the key properties is
the existence and uniqueness of stationary solutions of the
deﬁning equations.
Definition 2. {Xt} is an ARMA(p, q) process if {Xt} is
stationary and for every t,
Xt −φ1Xt−1 −. . . −φpXt−p = Zt + θ1Zt−1 + . . . + θqZt−q
where {Zt} ∼WN(0, σ2) and the polynomials (1−φ1z−. . .−
φpzp) and (1 −θ1z −. . . −θqzq) have no common factors.
Notice that {Zt} is a series of uncorrelated random variables,
each with zero mean and σ2 variance. Such a sequence is
referred as white noise and denoted by WN(0, σ2). An autoregressive model of degree p, denoted by AR(p), is a particular type of ARMA model with q = 0. We will adopt this
model to predict the current deviation of the clock because
it is simpler, more eﬃcient and therefore more suitable to
our discussion than general ARMA models.
A DETERMINISTIC CLOCK READING
We propose here a deterministic clock reading method
that improves in most cases the accuracy of the time estimate between synchronization by exploiting the sign of the
clock deviation at the last synchronization. More precisely,
the DCR method reduces by half the error growth since its
last synchronization. It is general and applicable to both
traditional networks and WSN, to improve the time accuracy. However, as discussed previously it has a bigger impact
in WSN due to its limited resources.
Method overview
Our DCR method is designed to reduce the maximum error growth ρ∆H between adjustments without the aid of
additional inputs. It is based on the observation that increasing the inherited error ε by a quantity ρ∆H proportional to its maximum drift rate leads to a conservative approach since it does not take into account any information
regarding the clock deviation or the drift rate.
here that such information can lead to a better accuracy. In
the interval–based paradigm, improving the time accuracy
is equivalent to reducing the size of the time interval I(t),
while maintaining its correctness. Our method is based on
the intuition that the composition of two clocks, one proceeding faster than the reference time and the other slower,
results in a more precise clock.
Figure 4 illustrates that:
it shows the time interval of clock C(t) proceeding faster
than the real time, and the time interval of clock F(t) going
Intersection of time intervals IC(t) and
Clearly, the intersection of two correct time intervals, as
the one shown in Figure 4, is correct and it is smaller in
size than the previous intervals, and therefore more accurate. Notice that it would be tempting to think that if a
clock C proceeds slower than the real time at time t, then
[C(t), C(t) + E(t)] is a correct time interval of t. In fact,
there are cases in which this does not hold due to the inherited error and the variation of the hardware cumulative drift
in [ti, t]. These are some of the intuitions that has driven us
to study the sign of the cumulative drift and its variation
between two consecutive clock adjustments. The idea underlying our algorithm is very simple: if the sensor detects
no variation in the sign of the cumulative drift since its last
clock adjustment, it computes an associate clock function F
proceeding in the opposite direction with respect to C(t),
and returns the time interval IC(t) ∩IF (t). This brings two
1. Detect the sign of the cumulative drift at ti and t,
2. Compute an associate clock function for C(t).
The ﬁrst issue can be solved by simply comparing the value
of the hardware clock with the left and right side of the
time interval. Let us suppose that the last synchronization
occurred at time ti and that Ti is the accurate approximation of ti. Since the time interval of C(t) is correct at time
ti and t, if H(ti) > Ti +ε+ρ∆H (or H(ti) < Ti −ε−ρ∆H)
then the hardware clock is clearly faster than the real time
at ti and t. Notice that the fact that a sensor can detect
it at time ti is a feature of the DCR method which can be
applied to save energy, as show in Section 4.2. Notice that
the accuracy of this test improves with the time, and since
it exploits the clock deviation, paradoxically it works better with cheap clocks such as in WSN. For instance, drifts
smaller than ρ
2 can be detected after 2ερ−1 time units, that
is less than 100 sec for ρ = 10−4 and ε = 5 msec.
The second issue is the most crucial for our DCR method.
Before computing our associate clock function we deﬁne the
clock properties that can lead to optimal accuracy. We de-
ﬁne a class of clock functions AC,t called associate clock
functions of C(t) at time t.
Definition 3. F ∈AC,t at time t ∈[ti, ti+1) if satisﬁes
the following properties:
1. F is a clock function deﬁned in [ti, ti+1) with ρ valid
upper bound for its cumulative drift at ti and t;
2. F(ti) = C(ti);
3. |F(t) −C(t)| ≥ρ∆H.
Notice that condition 3 provides an upper bound ε + ρ∆H
for the size of the time interval IC(t) ∩IF (t), and condition
2 implies that clocks C(t) and F(t) have the same maximum
error E(t) = ε + ρ∆H in the interval [ti, ti+1).
The associate clock function of C(t) computed by our
DCR method is deﬁned as followings:
(1 + ρ)H(t) + γ −ρH(ti)
for δ(ti), δ(t) ≤0
(1 −ρ)H(t) + γ + ρH(ti)
for δ(ti), δ(t) ≥0
where γ = Ti −H(ti) is a constant set at the last synchronization.
Figure 5 illustrates the DCR method. Line (2) checks the
sign of the cumulative drift, and line (3) returns the midpoint of the time interval IC(t)∩IF (t) representing the time
estimate, and its error bound.
The following lemmas prove the correctness of the DCR
method, they show that IC(t)∩IA(t) is a correct time interval. The correctness of time interval IC(t) follows from the
drift bound ρ, condition (1) at Section 3.1, as shown in .
Lemma 1. If the sign of the cumulative drift remains unchanged at time ti and t, then A(t) ∈AC,t.
DCR(t ∈(ti, ti+1))
1) err ←ε + ρ(H(t) −H(ti))
2) if (H(ti) −Ti > err) ∨(H(ti) −Ti < −err)
return ⟨A(t)+C(t)
Figure 5: The DCR method.
Proof. Let us suppose δ(ti), δ(t) ≥0. Since the cumulative drift of A(t) is equal to δ(t) −ρ −ρδ(t) and δ(t) −
ρδ(t) > 0, then ρ is a valid bound for the cumulative drift
of A(t) at real time ti and t. Therefore, since C(ti) = A(ti)
and C(t) −A(t) = ρ∆H, then A(t) ∈AC,t. Similarly, if
δ(ti), δ(t) ≤0.
Lemma 2. If the sign of the cumulative drift remains unchanged at time ti and t, then DCR returns a correct estimate of t with maximum error ε + ρ
Remark A natural comment on the DCR method is that it
works only if the sign of the cumulative drift is unchanged.
Notice that since the hardware clock H(t) is undiscipline,
and the cumulative drift represents the deviation of the clock
in a global scale, its variations are minimal and decrease with
the time, in contrast with the drift rate that captures the
local clock behavior.
In fact, the ﬂuctuation of the drift
rate is larger in small intervals (i.e.
introduced the cumulative drift with this purpose.
Considerations
Our DCR method shows the following properties, particularly attractive for WSN.
• Generality and wide applicability It is important
to notice that our DCR method is not tight to a speciﬁc
hardware drift distribution, and works for any type of
hardware clocks. It assumes only a valid upper drift
bound ρ of the hardware clock (common assumption).
However, since our method exploits the clock deviation
it works better with cheap crystal clocks, such as sensor clocks. Because of its generality and its diﬀerent
view, our DCR method can be encapsulated in previous well–known clock synchronization protocols. In
traditional networks the DCR method can also coexist
with calibrated clocks by replacing the hardware
clock function with a calibrated one to improve the
time accuracy.
• Eﬃciency and simplicity Computational and resource eﬃciency and simplicity in the implementation,
are critical in WSN for its limited resources.
The DCR method has the two main applications in WSN:
1. Save energy and improve network bandwidth:
after synchronizing its clock, a sensor node can decide
if to skip the following synchronization if its hardware
clock (undiscipline) deviates from the real time more
than ε + ρΓ.
2. Improve the time accuracy: it provides a way to
reduce the error growth by half.
Optimality bound It is interesting to see how it is possible
to lower the optimality bound for the external deviation of
a clock that is periodically adjusted, by strengthening the
clock model using information regarding the deviation of
the hardware clock. In Fetzer and Cristian have showed
that the best maximum external deviation achievable by a
clock synchronized at least every Γ time units is equal to
∆+ Λ + ρΓ, where Λ is the remote reading error and ∆
the error performed by the reference source in reading the
reference time. The DCR method shows that reﬁning the
hardware clock model by adding realistic information about
its behavior, can lead to a better time accuracy. This would
be particularly advantageous for WSN since would save energy and resources.
A PROBABILISTIC CLOCK READING
Method overview
We propose here a general framework that provides a
probabilistic estimate of the time with uncertainty η = ε +
ρΓ, in case the sensor node ”skipped” few clock adjustments
due to intermittent connectivity or process failures or low–
energy. In the previous section we have proposed a deterministic method that can be applied to reﬁne the accuracy
of the clock reading by reducing the maximum error growth
ρ∆H by a factor 2. However, if ∆H > 2Γ the time uncertainty exceeds the requested bound η, even when applying
the DCR method. Our PCR method provides a probabilistic
time estimate also in this case with time uncertainty η. It is
more ﬂexible than the DCR method since it is independent
of the occurrences (maybe irregular) of the clock synchronization. It predicts the current deviation of the clock based
on some past events by applying time series forecasting.
A straightforward solution is to consider a time series
{Xti} where Xti is the deviation D(ti) of the hardware
clock at the synchronization time ti. However, this approach
presents two main problems:
1. The time series {Xti} contains some trend, since the
deviation D(t) is proportional to the time t, and also
some seasonal component, due for instance to periodic
(daily) variations in the temperature.
2. The other problem is related with the intermittent
clock synchronization of the sensor node that does not
necessarily provide measures on the clock deviation at
regular intervals. This is a problem because time series
forecasting requires periodic observations.
The ﬁrst problem can be overcome by diﬀerentiating data
and replacing the original time series {Xti} with i ≥0, with
{Ytj = Xtj −Xtj−1} with j ≥1. It is reasonable to assume
that the time series {Yti} is weakly stationary and with zero
mean. The second problem can be overcome by normalizing
the data series to variations occurred during Γ time units.
More precisely, if (ti −ti−1) = αiΓ, then Yti is a random
variable representing the average variation of the clock deviation during Γ time units in [ti−1, ti]. Therefore, yti that
is the observed value of Yti is equal to
D(ti)−D(ti−1)
simplify the notation, we denote sometimes by yi the ith
observation yti derived from the (i −1)th and ith clock synchronization. Figure 6 shows the clock deviation (its accurate approximation) measured at the synchronization time
t2, t3, t4 and t5 and its variations y3, y4, y5 relative to the
intervals [t2, t3], [t3, t4], and [t4, t5]. Value t represents the
current reference time at which a time estimate is requested.
D(t2) D(t3)
Figure 6: Series of the observed values
Our target is to predict variable Yt, that is the average
variation of the clock deviation during Γ time units since
its last clock adjustment to provide a time estimate T =
Ti + ∆H −Yt ∆H
for time t ∈(ti+1, ti) with uncertainty η.
Condition (1) at Section 3.1 provides a bound for Y (t), that
is −ρΓ ≤Yt ≤ρΓ.
Our probabilistic model
Clearly, there are diﬀerent ways to model our problem using the framework sketched in the previous section. Because
of the limited resources of the sensors, we consider an autoregressive model, more precisely an AR(3) model in which
the prediction of a value depends on the last three observed
values, and with a Gaussian white noise. The choice of using this model and relying only on three values was driven
mainly by three factors crucial in a WSN:
• Computational eﬃciency. The coeﬃcients of an AR
model are more eﬃcient to compute than in a general
ARMA model.
In addition, in an AR(3) model the
sensor needs to compute only three coeﬃcients, and
therefore solves a linear system in three unknown.
• Memory saving.
Relying on the last three observed
values not only improves the computational cost, but
also enhances the memory usage of the sensor, since it
needs to store only three observed values.
• Simplicity in the design and implementation, relevant
• An AR model with a Gaussian white noise allows to
derive strong properties for our time series, useful to
compute a bound for the error probability.
However, it is important to notice the inherent trade–oﬀbetween eﬃciency, in terms of computational cost and memory,
and precision of the time estimate. Clearly, the time accuracy increases by using a higher number of observed values,
that is an AR(p) model with p > 3. We are currently evaluating such a trade–oﬀand the suitability of this model with
respect to others.
More precisely, we consider the following AR(3) model:
Y (t) = β1Y (t −1) + β2Y (t −2) + β3Y (t −3) + b(ω)W
in which the prediction of Y (t) depends on the last three
observed values of {yt} obtained by the last four clock synchronization. We denote by ti−3, ti−2, ti−1, and ti the time
at which the last four synchronization occurred. Therefore,
in our case Y (t −1) refers to Yti, Y (t −2) to Yti−1, and
Y (t −3) to Yti−2. Clearly, the prediction Yt of the variation
of the clock deviation occurred in [ti, t], depends on its variation in [ti−1, ti], [ti−2, ti−1], and [ti−3, ti−2]. Notice that
b(ω)W is a Gaussian white noise of Y (t), with zero mean
and deviation equal to b(ω) with ω = t −ti.
Intuitively,
since the forecasting does not occur at regular intervals, the
variations of the cumulative drift are more likely to occur as
the probability (and magnitude) of variations in the temperature or pressure increase, and therefore as ω grows. This
does not aﬀect the stationarity of the time series {Yt}. Since
b(ω) depends on the sensor clock (i.e. stability, thermic isolation) and on the environmental ﬂuctuations, it should be
tuned by the application.
Our model allows us to derive
strong properties for the time series {Yt}, useful to compute
a bound for the error probability (see ).
Predicting Y (t)
Our PCR method computes a prediction of Y (t) based on
the last three observed values of {yt}. To do this, we need to
compute β1, β2, β3, that is to ﬁnd the linear combination of
the last three values that forecast Yt with minimum squared
error. Therefore, β1, β2, β3 corresponds to the coeﬃcients of
the best linear predictor and are obtained by computing the
minimum of function
Q(β1, β2, β3) =
(yi −(β1yi−1 + β2yi−2 + β3yi−3))2
with N the number of observations to consider. Therefore,
β1, β2, β3 are computed by solving the linear system of 3
linear equations in 3 unknown
δQ(β1,β2,β3)
δQ(β1,β2,β3)
δQ(β1,β2,β3)
Clearly, for an accurate estimate of the coeﬃcients β1, β2, β3,
the number N of observed values should be large (i.e Box
and Jenkins suggest more than 50). It is important to notice
that because of the limited resources, the sensor does not
maintain these values but the matrix 3 × 4 of the system
coeﬃcients (see Fig 7:9).
The PCR method
The PCR method consists of two procedures:
• setV ariables(Ti, H(ti)) invoked at each clock synchronization ti, with Ti accurate estimate of ti computed
by running a clock synchronization protocol,
• PCR(t) that returns an estimate of the current reference time.
Figure 7 illustrates setV ariable(), and Figure 8 function
PCR(t). The data structures used are the followings:
• an array y[0 .. 2] of records with two ﬁelds: y[j].val
representing the observed value yi−j relative to the
time interval [ti−j, ti−j−1] for j = 0, 1, 2, and y[j].m =
ti−j−ti−j−1
representing the times in which the sensor
was unable to get its clock synchronized;
• an integer matrix M = M(3 × 4) of the coeﬃcients of
the linear system.
Array y[0 .. 2] is updated every time the sensor clock is synchronized (Fig 7:1–5), while M is updated until the number
setVariables(Ti, H(ti)):
1) y ←y 
2) y ←y 
3) y .val ←Ti −H(ti) −lastDev
4) lastDev ←Ti −H(ti)
5) y .m ←round( H(ti)−lastClock
6) lastClock ←H(ti)
7) N ←N + 1
8) if N < Ψ
updateMatrix()
10)else if N = Ψ
computeCoeﬀ()
Figure 7: setVariables invoked at time ti.
of observed data is suﬃciently reasonable to compute the
coeﬃcients β1, β2, β3 (Fig 7: 9,11), that is until it reaches a
constant threshold Ψ.
1) if N < Ψ
l ←y .m + y .m + y .m
6) dev ←β y .val + β y .val + β y .val
7) ∆H ←H(t) −lastClock −dev
8) T ←Ti + ∆H −dev ∆H
9) return T
Figure 8: The PCR method.
In the initial phase coeﬃcients β1, β2, β3 are set to be the
weights of the data yi, yi−1, yi−2 and are based on the accuracy of these observations. More precisely, if J = [ti, ti−3] is
the interval involved in the prediction, then y .val is given
weight w1 = 2
ti−ti−3 , y .val weight w2 = 2
and y .val weight w3 = 2
(Fig 8:2–5), thus giving more weight to more accurate observations (with smaller
intervals). Clearly w1 + w2 + w3 = 1.
The following lemma provides a bound for the error probability of the time estimate T = PCR(t). It says that the
time interval [T −η, T +η] is correct with probability at least
ζ2 provided b(ω) < ρΓ
Lemma 3. If b(ω) < ρΓ
ζ then P((T −t) > η) ≤
Proof. If the ARMA process is driven by a Gaussian
white noise, as in our case, then Y (t) has a normal distribution N(λ, b(t)2) with λ = β1yi + β2yi−1 + β3yi−2, and
the bound for the error probability is obtained by applying
Chebychev inequality.
CONCLUSIONS AND FUTURE WORKS
We have studied the time synchronization problem from
a novel prospective that consists in improving the clock accuracy between synchronization by exploiting global and
not local information regarding the behavior of the hardware clock.
This prospective has a noticeable impact on
WSN for their strong energy–eﬃciency, robustness and self–
conﬁguration requirements. For instance, our DCR method
can be applied to WSN to reduce by a factor 2 the frequency
at which clock synchronization occur, with noticeable energy
and network bandwidth savings.
We have presented also a general probabilistic framework
based on time series forecasting and highly ﬂexible. Both
approaches (sign–based and time–series–based) are novel,
and leave several issues opened both on the theoretical and
practical side. For instance, a reﬁnement over the optimality bound by Fetzer and Cristian obtained by means of
a stronger but realistic clock model. It is also very important to evaluate our PCR framework through experiments
on sensor clocks under diﬀerent conditions and verify the
suitability our model with respect to other statistical models. We are currently working on this.
Acknowledgments The author would like to thank Susanna Pelagatti for introducing me to time series forecasting,
and Maurizio Pratelli and Alessio Micheli for very helpful
discussions on time series forecasting and statistical models.