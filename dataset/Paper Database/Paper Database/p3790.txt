This paper has been submitted for publication on November 15, 2016.
Learning from Simulated and Unsupervised Images through Adversarial
Ashish Shrivastava, Tomas Pﬁster, Oncel Tuzel, Josh Susskind, Wenda Wang, Russ Webb
{a_shrivastava,tpf,otuzel,jsusskind,wenda_wang,rwebb}@apple.com
With recent progress in graphics, it has become more
tractable to train models on synthetic images, potentially avoiding the need for expensive annotations. However, learning from synthetic images may not achieve the
desired performance due to a gap between synthetic and
real image distributions. To reduce this gap, we propose Simulated+Unsupervised (S+U) learning, where
the task is to learn a model to improve the realism of
a simulator’s output using unlabeled real data, while
preserving the annotation information from the simulator. We develop a method for S+U learning that uses an
adversarial network similar to Generative Adversarial
Networks (GANs), but with synthetic images as inputs
instead of random vectors. We make several key modiﬁcations to the standard GAN algorithm to preserve annotations, avoid artifacts, and stabilize training: (i) a
‘self-regularization’ term, (ii) a local adversarial loss,
and (iii) updating the discriminator using a history of
reﬁned images. We show that this enables generation
of highly realistic images, which we demonstrate both
qualitatively and with a user study. We quantitatively
evaluate the generated images by training models for
gaze estimation and hand pose estimation.
a signiﬁcant improvement over using synthetic images,
and achieve state-of-the-art results on the MPIIGaze
dataset without any labeled real data.
1. Introduction
Large labeled training datasets are becoming increasingly important with the recent rise in high capacity
deep neural networks . However, labeling such large datasets is expensive and timeconsuming.
Thus, the idea of training on synthetic
instead of real images has become appealing because
the annotations are automatically available.
pose estimation with Kinect and, more recently, a
plethora of other tasks have been tackled using synthetic
Unlabeled Real Images
Figure 1. Simulated+Unsupervised (S+U) learning. The task is
to learn a model that improves the realism of synthetic images
from a simulator using unlabeled real data, while preserving
the annotation information.
data . However, learning from synthetic
images can be problematic due to a gap between synthetic and real image distributions – synthetic data is
often not realistic enough, leading the network to learn
details only present in synthetic images and failing to
generalize well on real images. One solution to closing
this gap is to improve the simulator. However, increasing the realism is often computationally expensive, the
content modeling takes a lot of hard work, and even the
best rendering algorithms may still fail to model all the
characteristics of real images. This lack of realism may
cause models to overﬁt to ‘unrealistic’ details in the synthetic images.
In this paper, we propose Simulated+Unsupervised
(S+U) learning, where the goal is to improve the realism of synthetic images from a simulator using unlabeled real data. The improved realism enables the training of better machine learning models on large datasets
without any data collection or human annotation effort.
In addition to adding realism, S+U learning should preserve annotation information for training of machine
learning models – e.g. the gaze direction in Figure 1
should be preserved. Moreover, since machine learning
models can be sensitive to artifacts in the synthetic data,
 
Discriminator
Unlabeled real
Real vs Reﬁned
Figure 2. Overview of SimGAN. We reﬁne the output of
the simulator with a reﬁner neural network, R, that minimizes the combination of a local adversarial loss and a ‘selfregularization’ term. The adversarial loss ‘fools’ a discriminator network, D, that classiﬁes an image as real or reﬁned.
The self-regularization term minimizes the image difference
between the synthetic and the reﬁned images. The reﬁner network and the discriminator network are updated alternately.
S+U learning should generate images without artifacts.
We develop a method for S+U learning, which we
term SimGAN, that reﬁnes synthetic images from a simulator using a neural network which we call the ‘reﬁner
network’. Figure 2 gives an overview of our method: a
synthetic image is generated with a black box simulator
and is reﬁned using the reﬁner network. To add realism,
we train our reﬁner network using an adversarial loss,
similar to Generative Adversarial Networks (GANs) ,
such that the reﬁned images are indistinguishable from
real ones using a discriminative network. To preserve
the annotations of synthetic images, we complement the
adversarial loss with a self-regularization loss that penalizes large changes between the synthetic and reﬁned
images. Moreover, we propose to use a fully convolutional neural network that operates on a pixel level and
preserves the global structure, rather than holistically
modifying the image content as in e.g. a fully connected
encoder network. The GAN framework requires training two neural networks with competing goals, which
is known to be unstable and tends to introduce artifacts . To avoid drifting and introducing spurious
artifacts while attempting to fool a single stronger discriminator, we limit the discriminator’s receptive ﬁeld
to local regions instead of the whole image, resulting
in multiple local adversarial losses per image. Moreover, we introduce a method for improving the stability
of training by updating the discriminator using a history
of reﬁned images rather than only the ones from the current reﬁner network.
Contributions:
1. We propose S+U learning that uses unlabeled real
data to reﬁne the synthetic images.
2. We train a reﬁner network to add realism to synthetic images using a combination of an adversarial
loss and a self-regularization loss.
3. We make several key modiﬁcations to the GAN
training framework to stabilize training and prevent
the reﬁner network from producing artifacts.
4. We present qualitative, quantitative, and user study
experiments showing that the proposed framework
signiﬁcantly improves the realism of the simulator
output. We achieve state-of-the-art results, without
any human annotation effort, by training deep neural networks on the reﬁned output images.
1.1. Related Work
The GAN framework learns two networks (a generator and a discriminator) with competing losses. The
goal of the generator network is to map a random vector
to a realistic image, whereas the goal of the discriminator is to distinguish the generated from the real images.
The GAN framework was ﬁrst introduced by Goodfellow et al. to generate visually realistic images and,
since then, many improvements and interesting applications have been proposed . Wang and Gupta 
use a Structured GAN to learn surface normals and then
combine it with a Style GAN to generate natural indoor
scenes. Im et al. propose a recurrent generative
model trained using adversarial training. The recently
proposed iGAN enables users to change the image interactively on a natural image manifold. CoGAN
by Liu et al. uses coupled GANs to learn a joint
distribution over images from multiple modalities without requiring tuples of corresponding images, achieving this by a weight-sharing constraint that favors the
joint distribution solution. Chen et al. propose Info-
GAN, an information-theoretic extension of GAN, that
allows learning of meaningful representations. Tuzel et
al. tackled image super-resolution for face images
with GANs. Li and Wand propose a Markovian
GAN for efﬁcient texture synthesis. Lotter et al. 
use adversarial loss in an LSTM network for visual sequence prediction. Yu et al. propose the SeqGAN
framework that uses GANs for reinforcement learning.
Yoo et al. tackle pixel-level semantic transfer learning with GANs. Style transfer is also closely related
to our work. Many recent works have explored related
problems in the domain of generative models, such as
PixelRNN that predicts pixels sequentially with an
RNN with a softmax loss. The generative networks focus on generating images using a random noise vector;
thus, in contrast to our method, the generated images do
not have any annotation information that can be used for
training a machine learning model.
Many efforts have explored using synthetic data for
various prediction tasks, including gaze estimation ,
text detection and classiﬁcation in RGB images ,
font recognition , object detection , hand
pose estimation in depth images , scene recognition in RGB-D , semantic segmentation of urban
scenes , and human pose estimation . Gaidon et al. show that pre-training a deep
neural network on synthetic data leads to improved performance.
Our work is complementary to these approaches, where we improve the realism of the simulator
using unlabeled real data.
Ganin and Lempitsky use synthetic data in a
domain adaptation setting where the learned features
are invariant to the domain shift between synthetic and
real images.
Wang et al. train a Stacked Convolutional Auto-Encoder on synthetic and real data to
learn the lower-level representations of their font detector ConvNet. Zhang et al. learn a Multichannel Autoencoder to reduce the domain shift between real and
synthetic data. In contrast to classical domain adaptation
methods that adapt the features with respect to a speciﬁc
prediction task, we bridge the gap between image distributions through adversarial training. This approach
allows us to generate realistic training images which can
be used to train any machine learning model, potentially
for multiple tasks.
Johnson et al. transfer the style from a set of
real images to the synthetic image by co-segmenting
and then identifying similar regions. This approach requires users to select the top few matches from an image
database. In contrast, we propose an end-to-end solution
that does not require user intervention at inference time.
2. S+U Learning with SimGAN
The goal of Simulated+Unsupervised learning is to
use a set of unlabeled real images yi ∈Y to learn a re-
ﬁner Rθ(x) that reﬁnes a synthetic image x, where θ
are the function parameters. Let the reﬁned image be
denoted by ˜x, then ˜x := Rθ(x). The key requirement
for S+U learning is that the reﬁned image ˜x should look
like a real image in appearance while preserving the annotation information from the simulator.
To this end, we propose to learn θ by minimizing a
combination of two losses:
ℓreal(θ; xi, Y) + λℓreg(θ; xi),
where xi is the ith synthetic training image. The ﬁrst
part of the cost, ℓreal, adds realism to the synthetic images, while the second part, ℓreg, preserves the annotation information. In the following sections, we expand
this formulation and provide an algorithm to optimize
2.1. Adversarial Loss with Self-Regularization
To add realism to the synthetic image, we need to
bridge the gap between the distributions of synthetic and
real images. An ideal reﬁner will make it impossible
to classify a given image as real or reﬁned with high
conﬁdence. This need motivates the use of an adversarial discriminator network, Dφ, that is trained to classify
images as real vs reﬁned, where φ are the parameters of
the discriminator network. The adversarial loss used in
training the reﬁner network, R, is responsible for ‘fooling’ the network D into classifying the reﬁned images
as real. Following the GAN approach , we model this
as a two-player minimax game, and update the reﬁner
network, Rθ, and the discriminator network, Dφ, alternately. Next, we describe this intuition more precisely.
The discriminator network updates its parameters by
minimizing the following loss:
log(Dφ(˜xi)) −
log(1 −Dφ(yj)).
This is equivalent to cross-entropy error for a two class
classiﬁcation problem where Dφ(.) is the probability of
the input being a synthetic image, and 1 −Dφ(.) that of
a real one. We implement Dφ as a ConvNet whose last
layer outputs the probability of the sample being a re-
ﬁned image. For training this network, each mini-batch
consists of randomly sampled reﬁned synthetic images
˜xi’s and real images yj’s. The target labels for the crossentropy loss layer are 0 for every yj, and 1 for every ˜xi.
Then φ for a mini-batch is updated by taking a stochastic gradient descent (SGD) step on the mini-batch loss
In our implementation, the realism loss function ℓreal
in (1) uses the trained discriminator D as follows:
ℓreal(θ; xi, Y) = −log(1 −Dφ(Rθ(xi))).
By minimizing this loss function, the reﬁner forces the
discriminator to fail classifying the reﬁned images as
synthetic. In addition to generating realistic images, the
reﬁner network should preserve the annotation information of the simulator. For example, for gaze estimation
the learned transformation should not change the gaze
direction, and for hand pose estimation the location of
the joints should not change. This restriction is an essential ingredient to enable training a machine learning
model that uses the reﬁned images with the simulator’s
annotations. For this purpose, we propose using a selfregularization loss that minimizes per-pixel difference
between a feature transform of the synthetic and reﬁned
images, ℓreg = ∥ψ(˜x) −x∥1, where ψ is the mapping
from image space to a feature space, and ∥.∥1 is the
L1 norm. The feature transform can be an identity map
Algorithm 1: Adversarial training of reﬁner network Rθ
Input: Sets of synthetic images xi ∈X , and real
images yj ∈Y, max number of steps (T),
number of discriminator network updates
per step (Kd), number of generative
network updates per step (Kg).
Output: ConvNet model Rθ.
for t = 1, . . . , T do
for k = 1, . . . , Kg do
1. Sample a mini-batch of synthetic images
2. Update θ by taking a SGD step on
mini-batch loss LR(θ) in (4) .
for k = 1, . . . , Kd do
1. Sample a mini-batch of synthetic images
xi, and real images yj.
2. Compute ˜xi = Rθ(xi) with current θ.
3. Update φ by taking a SGD step on
mini-batch loss LD(φ) in (2).
(ψ(x) = x), image derivatives, mean of color channels,
or a learned transformation such as a convolutional neural network. In this paper, unless otherwise stated, we
used the identity map as the feature transform. Thus, the
overall reﬁner loss function (1) used in our implementation is:
log(1 −Dφ(Rθ(xi)))
+λ∥ψ(Rθ(xi)) −ψ(xi)∥1.
We implement Rθ as a fully convolutional neural net
without striding or pooling, modifying the synthetic image on a pixel level, rather than holistically modifying
the image content as in e.g. a fully connected encoder
network, thus preserving the global structure and annotations. We learn the reﬁner and discriminator parameters by minimizing LR(θ) and LD(φ) alternately.
While updating the parameters of Rθ, we keep φ ﬁxed,
and while updating Dφ, we ﬁx θ. We summarize this
training procedure in Algorithm 1.
2.2. Local Adversarial Loss
Another key requirement for the reﬁner network is
that it should learn to model the real image characteristics without introducing any artifacts. When we train
a single strong discriminator network, the reﬁner network tends to over-emphasize certain image features to
fool the current discriminator network, leading to drifting and producing artifacts. A key observation is that
Discriminator
Probability map
Input image
Figure 3. Illustration of local adversarial loss. The discriminator network outputs a w × h probability map. The adversarial
loss function is the sum of the cross-entropy losses over the
local patches.
reﬁned images
Reﬁned images
with current
Mini-batch for D
Figure 4. Illustration of using a history of reﬁned images. See
text for details.
any local patch sampled from the reﬁned image should
have similar statistics to a real image patch. Therefore,
rather than deﬁning a global discriminator network, we
can deﬁne a discriminator network that classiﬁes all local image patches separately. This division not only limits the receptive ﬁeld, and hence the capacity of the discriminator network, but also provides many samples per
image for learning the discriminator network. The re-
ﬁner network is also improved by having multiple ‘realism loss’ values per image.
In our implementation, we design the discriminator
D to be a fully convolutional network that outputs w×h
dimensional probability map of patches belonging to the
fake class, where w × h are the number of local patches
in the image. While training the reﬁner network, we sum
the cross-entropy loss values over w × h local patches,
as illustrated in Figure 3.
2.3. Updating Discriminator using a History of
Reﬁned Images
Another problem of adversarial training is that the
discriminator network only focuses on the latest reﬁned
images. This lack of memory may cause (i) divergence
of the adversarial training, and (ii) the reﬁner network
re-introducing the artifacts that the discriminator has
forgotten about. Any reﬁned image generated by the re-
ﬁner network at any time during the entire training procedure is a ‘fake’ image for the discriminator. Hence,
the discriminator should be able to classify all these images as fake. Based on this observation, we introduce
Unlabeled Real Images
Simulated images
Figure 5. Example output of SimGAN for the UnityEyes gaze estimation dataset . (Left) real images from MPIIGaze . Our
reﬁner network does not use any label information from MPIIGaze dataset at training time. (Right) reﬁnement results on UnityEye.
The skin texture and the iris region in the reﬁned synthetic images are qualitatively signiﬁcantly more similar to the real images
than to the synthetic images. More examples are included in the supplementary material.
a method to improve the stability of adversarial training
by updating the discriminator using a history of reﬁned
images, rather than only the ones in the current minibatch. We slightly modify Algorithm 1 to have a buffer
of reﬁned images generated by previous networks. Let
B be the size of the buffer and b be the mini-batch size
used in Algorithm 1. At each iteration of discriminator
training, we compute the discriminator loss function by
sampling b/2 images from the current reﬁner network,
and sampling an additional b/2 images from the buffer
to update parameters φ. We keep the size of the buffer,
B, ﬁxed. After each training iteration, we randomly replace b/2 samples in the buffer with the newly generated
reﬁned images. This procedure is illustrated in Figure 4.
In contrast to our approach, Salimans et al. used
a running average of the model parameters to stabilize
the training. Note that these two approaches are complementary and can be used together.
3. Experiments
We evaluate our method for appearance-based gaze
estimation in the wild on the MPIIGaze dataset ,
and hand pose estimation on the NYU hand pose dataset
of depth images . We use a fully convolutional re-
ﬁner network with ResNet blocks for all of our experiments.
3.1. Appearance-based Gaze Estimation
Gaze estimation is a key ingredient for many human
computer interaction (HCI) tasks.
However, estimating the gaze direction from an eye image is challenging, especially when the image is of low quality, e.g.
from a laptop or a mobile phone camera – annotating the
eye images with a gaze direction vector is challenging
even for humans. Therefore, to generate large amounts
of annotated data, several recent approaches 
train their models on large amounts of synthetic data.
Here, we show that training with the reﬁned synthetic
images generated by SimGAN signiﬁcantly outperforms
the state-of-the-art for this task.
Sample real
Figure 6. Self-regularization in feature space for color images.
The gaze estimation dataset consists of 1.2M synthetic images from the UnityEyes simulator and
214K real images from the MPIIGaze dataset –
samples shown in Figure 5. MPIIGaze is a very challenging eye gaze estimation dataset captured under extreme illumination conditions. For UnityEyes, we use a
single generic rendering environment to generate training data without any dataset-speciﬁc targeting.
Qualitative Results :
Figure 5 shows examples of
synthetic, real and reﬁned images from the eye gaze
dataset. As shown, we observe a signiﬁcant qualitative
improvement of the synthetic images: SimGAN successfully captures the skin texture, sensor noise and the
appearance of the iris region in the real images. Note
that our method preserves the annotation information
(gaze direction) while improving the realism.
Self-regularization in Feature Space:
When the synthetic and real images have signiﬁcant shift in the distribution, a pixel-wise L1 difference may be restrictive. In
such cases, we can replace the identity map with an alternative feature transform. For example, in Figure 6,
we use the mean of RGB channels for color image re-
ﬁnement. As shown, the network trained using this feature transform is able to generate realistic color images.
Note that in our quantitative experiments we still use
grayscale images because gaze estimation is better tackled in grayscale due to added invariance .
‘Visual Turing Test’:
To quantitatively evaluate the
visual quality of the reﬁned images, we designed a simple user study where subjects were asked to classify
images as real or reﬁned synthetic. Each subject was
shown a random selection of 50 real images and 50 re-
Selected as real
Selected as synt
Ground truth real
Ground truth synt
Table 1. Results of the ‘Visual Turing test’ user study for classifying real vs reﬁned images. The average human classiﬁcation accuracy was 51.7% (chance = 50%).
Training data
% of images within d
Synthetic Data
Synthetic Data 4x
Reﬁned Synthetic Data
Reﬁned Synthetic Data 4x
Table 2. Comparison of a gaze estimator trained on synthetic
data and the output of SimGAN. The results are at distance
d = 7 degrees from ground truth. Training on the output of
SimGAN outperforms training on synthetic data by 22.3%.
ﬁned images in a random order, and was asked to label
the images as either real or reﬁned. The subjects were
constantly shown 20 examples of real and reﬁned images while performing the task. The subjects found it
very hard to tell the difference between the real images
and the reﬁned images. In our aggregate analysis, 10
subjects chose the correct label 517 times out of 1000 trials (p = 0.148), meaning they were not able to reliably
distinguish real images from synthetic. Table 1 shows
the confusion matrix. In contrast, when testing on original synthetic images vs real images, we showed 10 real
and 10 synthetic images per subject, and the subjects
chose correctly 162 times out of 200 trials (p ≤10−8),
which is signiﬁcantly better than chance.
Quantitative Results:
We train a simple convolutional neural network (CNN) similar to to predict
the eye gaze direction (encoded by a 3-dimensional vector for x, y, z) with l2 loss. We train on UnityEyes and
test on MPIIGaze. Figure 7 and Table 2 compare the
performance of a gaze estimation CNN trained on synthetic data to that of another CNN trained on reﬁned
synthetic data, the output of SimGAN. We observe a
large improvement in performance from training on the
SimGAN output, a 22.3% absolute percentage improvement. We also observe a large improvement by using
more training data – here 4x refers to 100% of the training dataset.
The quantitative evaluation conﬁrms the
value of the qualitative improvements observed in Figure 5, and shows that machine learning models generalize signiﬁcantly better using SimGAN.
Table 3 shows a comparison to the state-of-the-art.
Training the CNN on the reﬁned images outperforms the
state-of-the-art on the MPIIGaze dataset, with a relative
improvement of 21%. This large improvement shows
the practical value of our method in many HCI tasks.
Distance from ground truth [degrees]
Percentage of images
Refined Synthetic Data 4x
Refined Synthetic Data
Synthetic Data 4x
Synthetic Data
Figure 7. Quantitative results for appearance-based gaze estimation on the MPIIGaze dataset with real eye images. The
plot shows cumulative curves as a function of degree error as
compared to the ground truth eye gaze direction, for different
numbers of training examples of data.
Support Vector Regression (SVR) 
Adaptive Linear Regression ALR) 
Random Forest (RF) 
kNN with UT Multiview 
CNN with UT Multiview 
k-NN with UnityEyes 
CNN with UnityEyes Synthetic Images
CNN with UnityEyes Reﬁned Images
Table 3. Comparison of SimGAN to the state-of-the-art on the
MPIIGaze dataset of real eyes. The second column indicates
whether the methods are trained on Real/Synthetic data. The
error the is mean eye gaze estimation error in degrees. Training on reﬁned images results in a 2.1 degree improvement, a
relative 21% improvement compared to the state-of-the-art.
Preserving Ground Truth:
To quantify that the
ground truth gaze direction doesn’t change signiﬁcantly,
we manually labeled the ground truth pupil centers in
100 synthetic and reﬁned images by ﬁtting an ellipse to
the pupil. This is an approximation of the gaze direction,
which is difﬁcult for humans to label accurately. The
absolute difference between the estimated pupil center
of synthetic and corresponding reﬁned image is quite
small: 1.1 ± 0.8px (eye width=55px).
Implementation Details:
The reﬁner network, Rθ, is
a residual network (ResNet) . Each ResNet block
consists of two convolutional layers containing 64 feature maps. An input image of size 55 × 35 is convolved
with 3 × 3 ﬁlters that output 64 feature maps. The output is passed through 4 ResNet blocks. The output of
the last ResNet block is passed to a 1 × 1 convolutional
layer producing 1 feature map corresponding to the re-
Unlabeled Real Images
Simulated images
Figure 8. Example reﬁned test images for the NYU hand pose dataset . (Left) real images, (right) synthetic images and the
corresponding reﬁned output images from the reﬁner network. The major source of noise in the real images is the non-smooth
depth boundaries that the reﬁner networks learns to model.
ﬁned synthetic image.
The discriminator network, Dφ, contains 5 convolution layers and 2 max-pooling layers as follows:
(1) Conv3x3, stride=2, feature maps=96, (2) Conv3x3,
stride=2, feature maps=64, (3) MaxPool3x3, stride=1,
(4) Conv3x3, stride=1, feature maps=32, (5) Conv1x1,
stride=1, feature maps=32, (6) Conv1x1, stride=1, feature maps=2, (7) Softmax.
Our adversarial network is fully convolutional, and
has been designed such that the receptive ﬁeld of the
last layer neurons in Rθ and Dφ are similar. We ﬁrst
train the Rθ network with just self-regularization loss
for 1, 000 steps, and Dφ for 200 steps. Then, for each
update of Dφ, we update Rθ twice, i.e. Kd is set to 1,
and Kg is set to 50 in Algorithm 1.
The eye gaze estimation network is similar to ,
with some changes to enable it to better exploit our
large synthetic dataset.
The input is a 35 × 55
grayscale image that is passed through 5 convolutional layers followed by 3 fully connected layers,
the last one encoding the 3-dimensional gaze vector:
(1) Conv3x3, feature maps=32, (2) Conv3x3, feature
maps=32, (3) Conv3x3, feature maps=64, (4) Max-
Pool3x3, stride=2, (5) Conv3x3, feature maps=80,
(6) Conv3x3, feature maps=192, (7) MaxPool2x2,
stride=2, (8) FC9600, (9) FC1000, (10) FC3, (11) Euclidean loss. All networks are trained with a constant
0.001 learning rate and 512 batch size, until the validation error converges.
3.2. Hand Pose Estimation from Depth Images
Next, we evaluate our method for hand pose estimation in depth images. We use the NYU hand pose
dataset that contains 72, 757 training frames and
8, 251 testing frames captured by 3 Kinect cameras –
one frontal and 2 side views. Each depth frame is labeled with hand pose information that has been used to
create a synthetic depth image. We pre-process the data
by cropping the pixels from real images using the synthetic images. The images are resized to 224 × 224 before passing them to the ConvNet.
Qualitative Results:
Figure 8 shows example output
of SimGAN on the NYU hand pose test set. The main
source of noise in real depth images is from depth discontinuity at the edges, which the SimGAN is able to
learn without requiring any label information.
Quantitative Results:
We train a fully convolutional
hand pose estimator CNN similar to Stacked Hourglass
Net on real, synthetic and reﬁned synthetic images
of the NYU hand pose training set, and evaluate each
model on all real images in the NYU hand pose test set.
We train on the same 14 hand joints as in . Many
state-of-the-art hand pose estimation methods are customized pipelines that consist of several steps. We use
only a single deep neural network to analyze the effect
of improving the synthetic images to avoid bias due to
other factors. Figure 9 and Table 4 present quantitative
results on NYU hand pose. Training on reﬁned synthetic
data – the output of SimGAN which does not require
any labeling for the real images – outperforms the model
trained on real images with supervision, by 8.8%. The
proposed method also outperforms training on synthetic
data. We also observe a large improvement as the number of synthetic training examples is increased – here 3x
corresponds to training on all views.
Implementation Details:
The architecture is the same
as for eye gaze estimation, except the input image size
is 224 × 224, ﬁlter size is 7 × 7, and 10 ResNet blocks
are used. The discriminative net Dφ is: (1) Conv7x7,
stride=4, feature maps=96, (2) Conv5x5, stride=2, feature maps=64, (3) MaxPool3x3, stride=2, (4) Conv3x3,
stride=2, feature maps=32, (5) Conv1x1, stride=1, feature maps=32, (6) Conv1x1, stride=1, feature maps=2,
Distance from ground truth [pixels]
Percentage of images
Refined Synthetic Data 3x
Synthetic Data 3x
Refined Synthetic Data
Synthetic Data
Figure 9. Quantitative results for hand pose estimation on the
NYU hand pose test set of real depth images . The plot
shows cumulative curves as a function of distance from ground
truth keypoint locations, for different numbers of training examples of synthetic and reﬁned images.
Training data
% of images within d
Synthetic Data
Reﬁned Synthetic Data
Synthetic Data 3x
Reﬁned Synthetic Data 3x
Table 4. Comparison of a hand pose estimator trained on synthetic data, real data, and the output of SimGAN. The results
are at distance d = 5 pixels from ground truth.
(7) Softmax. We train the Rθ network ﬁrst with just selfregularization loss for 500 steps and Dφ for 200 steps;
then, for each update of Dφ we update Rθ twice, i.e. Kd
is set to 1, and Kg is set to 2 in Algorithm 1.
For hand pose estimation, we use the Stacked Hourglass Net of 2 hourglass blocks, and an output
heatmap size 64 × 64. We augment at training time with
random [−20, 20] degree rotations and crops.
3.3. Ablation Study
First, we analyzed the effect of using history of re-
ﬁned images during training. As shown in Figure 10,
using the history of reﬁned images (second column) prevents severe artifacts observed while training without
the history (third column). This results in an increased
gaze estimation error of 12.2 degrees without the history, in comparison to 7.8 degrees with the history.
Next, we compare local vs global adversarial loss
during training. A global adversarial loss uses a fully
connected layer in the discriminator network, classifying the whole image as real vs reﬁned. The local adversarial loss removes the artifacts and makes the generated
image signiﬁcantly more realistic, as seen in Figure 11.
(with history)
(without history)
Figure 10. Using a history of reﬁned images for updating the
discriminator. (Left) synthetic images; (middle) result of using the history of reﬁned images; (right) result without using
a history of reﬁned images (instead using only the most recent reﬁned images). We observe obvious unrealistic artifacts,
especially around the corners of the eyes.
Global adversarial loss
Local adversarial loss
Figure 11. Importance of using a local adversarial loss. (Left)
an example image that has been generated with a standard
‘global’ adversarial loss on the whole image. The noise around
the edge of the hand contains obvious unrealistic depth boundary artifacts. (Right) the same image generated with a local
adversarial loss that looks signiﬁcantly more realistic.
4. Conclusions and Future Work
We have proposed Simulated+Unsupervised learning
to add realism to the simulator while preserving the annotations of the synthetic images. We described Sim-
GAN, our method for S+U learning, that uses an adversarial network and demonstrated state-of-the-art results
without any labeled real data. In future, we intend to explore modeling the noise distribution to generate more
than one reﬁned image for each synthetic image, and investigate reﬁning videos rather than single images.
Acknowledgement:
We are grateful to our colleagues
Barry Theobald, Carlos Guestrin, Ruslan Salakhutdinov,
Abhishek Sharma and Yin Zhou for their valuable inputs.