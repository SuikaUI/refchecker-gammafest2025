Workshop track - ICLR 2017
ADVERSARIAL EXAMPLES IN THE PHYSICAL WORLD
Alexey Kurakin
Google Brain
 
Ian J. Goodfellow
 
Samy Bengio
Google Brain
 
Most existing machine learning classiﬁers are highly vulnerable to adversarial
examples. An adversarial example is a sample of input data which has been modiﬁed very slightly in a way that is intended to cause a machine learning classiﬁer
to misclassify it. In many cases, these modiﬁcations can be so subtle that a human
observer does not even notice the modiﬁcation at all, yet the classiﬁer still makes
a mistake. Adversarial examples pose security concerns because they could be
used to perform an attack on machine learning systems, even if the adversary has
no access to the underlying model. Up to now, all previous work has assumed a
threat model in which the adversary can feed data directly into the machine learning classiﬁer. This is not always the case for systems operating in the physical
world, for example those which are using signals from cameras and other sensors
as input. This paper shows that even in such physical world scenarios, machine
learning systems are vulnerable to adversarial examples. We demonstrate this by
feeding adversarial images obtained from a cell-phone camera to an ImageNet Inception classiﬁer and measuring the classiﬁcation accuracy of the system. We ﬁnd
that a large fraction of adversarial examples are classiﬁed incorrectly even when
perceived through the camera.
INTRODUCTION
(a) Image from dataset
(b) Clean image
(c) Adv. image, ϵ = 4
(d) Adv. image, ϵ = 8
Figure 1: Demonstration of a black box attack (in which the attack is constructed without access to
the model) on a phone app for image classiﬁcation using physical adversarial examples. We took
a clean image from the dataset (a) and used it to generate adversarial images with various sizes of
adversarial perturbation ϵ. Then we printed clean and adversarial images and used the TensorFlow
Camera Demo app to classify them. A clean image (b) is recognized correctly as a “washer” when
perceived through the camera, while adversarial images (c) and (d) are misclassiﬁed. See video of
full demo at 
 
Workshop track - ICLR 2017
Recent advances in machine learning and deep neural networks enabled researchers to solve multiple
important practical problems like image, video, text classiﬁcation and others .
However, machine learning models are often vulnerable to adversarial manipulation of their input intended to cause incorrect classiﬁcation . In particular, neural networks and many
other categories of machine learning models are highly vulnerable to attacks based on small modiﬁcations of the input to the model at test time .
The problem can be summarized as follows. Let’s say there is a machine learning system M and
input sample C which we call a clean example. Let’s assume that sample C is correctly classiﬁed by
the machine learning system, i.e. M(C) = ytrue. It’s possible to construct an adversarial example
A which is perceptually indistinguishable from C but is classiﬁed incorrectly, i.e. M(A) ̸= ytrue.
These adversarial examples are misclassiﬁed far more often than examples that have been perturbed
by noise, even if the magnitude of the noise is much larger than the magnitude of the adversarial
perturbation .
Adversarial examples pose potential security threats for practical machine learning applications.
In particular, Szegedy et al. showed that an adversarial example that was designed to be
misclassiﬁed by a model M1 is often also misclassiﬁed by a model M2. This adversarial example
transferability property means that it is possible to generate adversarial examples and perform a misclassiﬁcation attack on a machine learning system without access to the underlying model. Papernot
et al. and Papernot et al. demonstrated such attacks in realistic scenarios.
However all prior work on adversarial examples for neural networks made use of a threat model
in which the attacker can supply input directly to the machine learning model. Prior to this work,
it was not known whether adversarial examples would remain misclassiﬁed if the examples were
constructed in the physical world and observed through a camera.
Such a threat model can describe some scenarios in which attacks can take place entirely within a
computer, such as as evading spam ﬁlters or malware detectors .
However, many practical machine learning systems operate in the physical world. Possible examples include but are not limited to: robots perceiving world through cameras and other sensors, video
surveillance systems, and mobile applications for image or sound classiﬁcation. In such scenarios
the adversary cannot rely on the ability of ﬁne-grained per-pixel modiﬁcations of the input data. The
following question thus arises: is it still possible to craft adversarial examples and perform adversarial attacks on machine learning systems which are operating in the physical world and perceiving
data through various sensors, rather than digital representation?
Some prior work has addressed the problem of physical attacks against machine learning systems,
but not in the context of fooling neural networks by making very small perturbations of the input.
For example, Carlini et al. demonstrate an attack that can create audio inputs that mobile
phones recognize as containing intelligible voice commands, but that humans hear as an unintelligible voice. Face recognition systems based on photos are vulnerable to replay attacks, in which a
previously captured image of an authorized user’s face is presented to the camera instead of an actual
face . Adversarial examples could in principle be applied in either of these physical domains. An adversarial example for the voice command domain would consist of a recording
that seems to be innocuous to a human observer (such as a song) but contains voice commands recognized by a machine learning algorithm. An adversarial example for the face recognition domain
might consist of very subtle markings applied to a person’s face, so that a human observer would
recognize their identity correctly, but a machine learning system would recognize them as being a
different person. The most similar work to this paper is Sharif et al. , which appeared publicly
after our work but had been submitted to a conference earlier. Sharif et al. also print images
of adversarial examples on paper and demonstrated that the printed images fool image recognition
systems when photographed. The main differences between their work and ours are that: (1) we
use a cheap closed-form attack for most of our experiments, while Sharif et al. use a more
expensive attack based on an optimization algorithm, (2) we make no particular effort to modify our
adversarial examples to improve their chances of surviving the printing and photography process.
We simply make the scientiﬁc observation that very many adversarial examples do survive this process without any intervention. Sharif et al. introduce extra features to make their attacks work
Workshop track - ICLR 2017
as best as possible for practical attacks against face recognition systems. (3) Sharif et al. are
restricted in the number of pixels they can modify (only those on the glasses frames) but can modify
those pixels by a large amount; we are restricted in the amount we can modify a pixel but are free to
modify all of them.
To investigate the extent to which adversarial examples survive in the physical world, we conducted
an experiment with a pre-trained ImageNet Inception classiﬁer . We generated
adversarial examples for this model, then we fed these examples to the classiﬁer through a cellphone camera and measured the classiﬁcation accuracy. This scenario is a simple physical world
system which perceives data through a camera and then runs image classiﬁcation. We found that
a large fraction of adversarial examples generated for the original model remain misclassiﬁed even
when perceived through a camera.1
Surprisingly, our attack methodology required no modiﬁcation to account for the presence of the
camera—the simplest possible attack of using adversarial examples crafted for the Inception model
resulted in adversarial examples that successfully transferred to the union of the camera and Inception. Our results thus provide a lower bound on the attack success rate that could be achieved with
more specialized attacks that explicitly model the camera while crafting the adversarial example.
One limitation of our results is that we have assumed a threat model under which the attacker has
full knowledge of the model architecture and parameter values. This is primarily so that we can
use a single Inception v3 model in all experiments, without having to devise and train a different
high-performing model. The adversarial example transfer property implies that our results could be
extended trivially to the scenario where the attacker does not have access to the model description
 . While we haven’t run detailed
experiments to study transferability of physical adversarial examples we were able to build a simple
phone application to demonstrate potential adversarial black box attack in the physical world, see
To better understand how the non-trivial image transformations caused by the camera affect adversarial example transferability, we conducted a series of additional experiments where we studied
how adversarial examples transfer across several speciﬁc kinds of synthetic image transformations.
The rest of the paper is structured as follows: In Section 2, we review different methods which we
used to generate adversarial examples. This is followed in Section 3 by details about our “physical
world” experimental set-up and results. Finally, Section 4 describes our experiments with various
artiﬁcial image transformations (like changing brightness, contrast, etc...) and how they affect adversarial examples.
METHODS OF GENERATING ADVERSARIAL IMAGES
This section describes different methods to generate adversarial examples which we have used in the
experiments. It is important to note that none of the described methods guarantees that generated
image will be misclassiﬁed. Nevertheless we call all of the generated images “adversarial images”.
In the remaining of the paper we use the following notation:
• X - an image, which is typically 3-D tensor (width × height × depth). In this paper, we
assume that the values of the pixels are integer numbers in the range .
• ytrue - true class for the image X.
• J(X, y) - cross-entropy cost function of the neural network, given image X and class
We intentionally omit network weights (and other parameters) θ in the cost function because we assume they are ﬁxed (to the value resulting from training the machine
learning model) in the context of the paper. For neural networks with a softmax output
layer, the cross-entropy cost function applied to integer class labels equals the negative
1 Dileep George noticed that another kind of adversarially constructed input, designed to have no true
class yet be categorized as belonging to a speciﬁc class, fooled convolutional networks when photographed,
in a less systematic experiments. As of August 19, 2016 it was mentioned in Figure 6 at 
evolvingai.org/fooling
Workshop track - ICLR 2017
log-probability of the true class given the image: J(X, y) = −log p(y|X), this relationship will be used below.
• ClipX,ϵ {X′} - function which performs per-pixel clipping of the image X′, so the result
will be in L∞ϵ-neighbourhood of the source image X. The exact clipping equation is as
ClipX,ϵ {X′} (x, y, z) = min
255, X(x, y, z)+ϵ, max
0, X(x, y, z)−ϵ, X′(x, y, z)
where X(x, y, z) is the value of channel z of the image X at coordinates (x, y).
FAST METHOD
One of the simplest methods to generate adversarial images, described in ,
is motivated by linearizing the cost function and solving for the perturbation that maximizes the cost
subject to an L∞constraint. This may be accomplished in closed form, for the cost of one call to
back-propagation:
Xadv = X + ϵ sign
 ∇XJ(X, ytrue)
where ϵ is a hyper-parameter to be chosen.
In this paper we refer to this method as “fast” because it does not require an iterative procedure to
compute adversarial examples, and thus is much faster than other considered methods.
BASIC ITERATIVE METHOD
We introduce a straightforward way to extend the “fast” method—we apply it multiple times with
small step size, and clip pixel values of intermediate results after each step to ensure that they are in
an ϵ-neighbourhood of the original image:
N+1 = ClipX,ϵ
N , ytrue)
In our experiments we used α = 1, i.e. we changed the value of each pixel only by 1 on each step.
We selected the number of iterations to be min(ϵ + 4, 1.25ϵ). This amount of iterations was chosen
heuristically; it is sufﬁcient for the adversarial example to reach the edge of the ϵ max-norm ball but
restricted enough to keep the computational cost of experiments manageable.
Below we refer to this method as “basic iterative” method.
ITERATIVE LEAST-LIKELY CLASS METHOD
Both methods we have described so far simply try to increase the cost of the correct class, without
specifying which of the incorrect classes the model should select. Such methods are sufﬁcient for
application to datasets such as MNIST and CIFAR-10, where the number of classes is small and all
classes are highly distinct from each other. On ImageNet, with a much larger number of classes and
the varying degrees of signiﬁcance in the difference between classes, these methods can result in
uninteresting misclassiﬁcations, such as mistaking one breed of sled dog for another breed of sled
dog. In order to create more interesting mistakes, we introduce the iterative least-likely class method.
This iterative method tries to make an adversarial image which will be classiﬁed as a speciﬁc desired
target class. For desired class we chose the least-likely class according to the prediction of the trained
network on image X:
yLL = arg min
For a well-trained classiﬁer, the least-likely class is usually highly dissimilar from the true class, so
this attack method results in more interesting mistakes, such as mistaking a dog for an airplane.
To make an adversarial image which is classiﬁed as yLL we maximize log p(yLL|X) by making iterative steps in the direction of sign
∇X log p(yLL|X)
This last expression equals
−∇XJ(X, yLL)
for neural networks with cross-entropy loss. Thus we have the following
procedure:
Workshop track - ICLR 2017
N+1 = ClipX,ϵ
For this iterative procedure we used the same α and same number of iterations as for the basic
iterative method.
Below we refer to this method as the “least likely class” method or shortly “l.l. class”.
COMPARISON OF METHODS OF GENERATING ADVERSARIAL EXAMPLES
top-1 accuracy
clean images
basic iter. adv.
least likely class adv.
top-5 accuracy
clean images
basic iter. adv.
least likely class adv.
Figure 2: Top-1 and top-5 accuracy of Inception v3 under attack by different adversarial methods
and different ϵ compared to “clean images” — unmodiﬁed images from the dataset. The accuracy
was computed on all 50, 000 validation images from the ImageNet dataset. In these experiments ϵ
varies from 2 to 128.
As mentioned above, it is not guaranteed that an adversarial image will actually be misclassiﬁed—
sometimes the attacker wins, and sometimes the machine learning model wins. We did an experimental comparison of adversarial methods to understand the actual classiﬁcation accuracy on the
generated images as well as the types of perturbations exploited by each of the methods.
The experiments were performed on all 50, 000 validation samples from the ImageNet dataset using a pre-trained Inception v3 classiﬁer . For each
validation image, we generated adversarial examples using different methods and different values
of ϵ. For each pair of method and ϵ, we computed the classiﬁcation accuracy on all 50, 000 images.
Also, we computed the accuracy on all clean images, which we used as a baseline.
Top-1 and top-5 classiﬁcation accuracy on clean and adversarial images for various adversarial
methods are summarized in Figure 2. Examples of generated adversarial images could be found
in Appendix in Figures 5 and 4.
As shown in Figure 2, the fast method decreases top-1 accuracy by a factor of two and top-5 accuracy
by about 40% even with the smallest values of ϵ. As we increase ϵ, accuracy on adversarial images
generated by the fast method stays on approximately the same level until ϵ = 32 and then slowly
decreases to almost 0 as ϵ grows to 128. This could be explained by the fact that the fast method
adds ϵ-scaled noise to each image, thus higher values of ϵ essentially destroys the content of the
image and makes it unrecognisable even by humans, see Figure 5.
On the other hand iterative methods exploit much ﬁner perturbations which do not destroy the image
even with higher ϵ and at the same time confuse the classiﬁer with higher rate. The basic iterative
method is able to produce better adversarial images when ϵ < 48, however as we increase ϵ it is
unable to improve. The “least likely class” method destroys the correct classiﬁcation of most images
even when ϵ is relatively small.
We limit all further experiments to ϵ ≤16 because such perturbations are only perceived as a
small noise (if perceived at all), and adversarial methods are able to produce a signiﬁcant number of
misclassiﬁed examples in this ϵ-neighbourhood of clean images.
Workshop track - ICLR 2017
PHOTOS OF ADVERSARIAL EXAMPLES
DESTRUCTION RATE OF ADVERSARIAL IMAGES
To study the inﬂuence of arbitrary transformations on adversarial images we introduce the notion
of destruction rate. It can be described as the fraction of adversarial images which are no longer
misclassiﬁed after the transformations. The formal deﬁnition is the following:
k=1 C(Xk, yk
true)C(T(Xk
k=1 C(Xk, yk
where n is the number of images used to comput the destruction rate, Xk is an image from the
dataset, yk
true is the true class of this image, and Xk
adv is the corresponding adversarial image. The
function T(•) is an arbitrary image transformation—in this article, we study a variety of transformations, including printing the image and taking a photo of the result. The function C(X, y) is an
indicator function which returns whether the image was classiﬁed correctly:
if image X is classiﬁed as y;
otherwise.
We denote the binary negation of this indicator value as C(X, y), which is computed as C(X, y) =
1 −C(X, y).
EXPERIMENTAL SETUP
(a) Printout
(b) Photo of printout
(c) Cropped image
Figure 3: Experimental setup: (a) generated printout which contains pairs of clean and adversarial images, as well as QR codes to help automatic cropping; (b) photo of the printout made by a
cellphone camera; (c) automatically cropped image from the photo.
To explore the possibility of physical adversarial examples we ran a series of experiments with
photos of adversarial examples. We printed clean and adversarial images, took photos of the printed
pages, and cropped the printed images from the photos of the full page. We can think of this as a
black box transformation that we refer to as “photo transformation”.
We computed the accuracy on clean and adversarial images before and after the photo transformation
as well as the destruction rate of adversarial images subjected to photo transformation.
The experimental procedure was as follows:
1. Print the image, see Figure 3a. In order to reduce the amount of manual work, we printed
multiple pairs of clean and adversarial examples on each sheet of paper. Also, QR codes
were put into corners of the printout to facilitate automatic cropping.
(a) All generated pictures of printouts (Figure 3a) were saved in lossless PNG format.
(b) Batches of PNG printouts were converted to multi-page PDF ﬁle using the convert tool from the ImageMagick suite with the default settings: convert *.png
output.pdf
Workshop track - ICLR 2017
(c) Generated PDF ﬁles were printed using a Ricoh MP C5503 ofﬁce printer. Each page
of PDF ﬁle was automatically scaled to ﬁt the entire sheet of paper using the default
printer scaling. The printer resolution was set to 600dpi.
2. Take a photo of the printed image using a cell phone camera (Nexus 5x), see Figure 3b.
3. Automatically crop and warp validation examples from the photo, so they would become
squares of the same size as source images, see Figure 3c:
(a) Detect values and locations of four QR codes in the corners of the photo. The QR
codes encode which batch of validation examples is shown on the photo. If detection
of any of the corners failed, the entire photo was discarded and images from the photo
were not used to calculate accuracy. We observed that no more than 10% of all images
were discarded in any experiment and typically the number of discarded images was
about 3% to 6%.
(b) Warp photo using perspective transform to move location of QR codes into pre-deﬁned
coordinates.
(c) After the image was warped, each example has known coordinates and can easily be
cropped from the image.
4. Run classiﬁcation on transformed and source images. Compute accuracy and destruction
rate of adversarial images.
This procedure involves manually taking photos of the printed pages, without careful control of
lighting, camera angle, distance to the page, etc. This is intentional; it introduces nuisance variability
that has the potential to destroy adversarial perturbations that depend on subtle, ﬁne co-adaptation
of exact pixel values. That being said, we did not intentionally seek out extreme camera angles
or lighting conditions. All photos were taken in normal indoor lighting with the camera pointed
approximately straight at the page.
For each combination of adversarial example generation method and ϵ we conducted two sets of
experiments:
• Average case. To measure the average case performance, we randomly selected 102 images
to use in one experiment with a given ϵ and adversarial method. This experiment estimates
how often an adversary would succeed on randomly chosen photos—the world chooses an
image randomly, and the adversary attempts to cause it to be misclassiﬁed.
• Preﬁltered case. To study a more aggressive attack, we performed experiments in which
the images are preﬁltered. Speciﬁcally, we selected 102 images such that all clean images
are classiﬁed correctly, and all adversarial images (before photo transformation) are classiﬁed incorrectly (both top-1 and top-5 classiﬁcation). In addition we used a conﬁdence
threshold for the top prediction: p(ypredicted|X) ≥0.8, where ypredicted is the class predicted by the network for image X. This experiment measures how often an adversary
would succeed when the adversary can choose the original image to attack. Under our
threat model, the adversary has access to the model parameters and architecture, so the
attacker can always run inference to determine whether an attack will succeed in the absence of photo transformation. The attacker might expect to do the best by choosing to
make attacks that succeed in this initial condition. The victim then takes a new photo of the
physical object that the attacker chooses to display, and the photo transformation can either
preserve the attack or destroy it.
EXPERIMENTAL RESULTS ON PHOTOS OF ADVERSARIAL IMAGES
Results of the photo transformation experiment are summarized in Tables 1, 2 and 3.
We found that “fast” adversarial images are more robust to photo transformation compared to iterative methods. This could be explained by the fact that iterative methods exploit more subtle kind of
perturbations, and these subtle perturbations are more likely to be destroyed by photo transformation.
One unexpected result is that in some cases the adversarial destruction rate in the “preﬁltered case”
was higher compared to the “average case”. In the case of the iterative methods, even the total
Workshop track - ICLR 2017
Table 1: Accuracy on photos of adversarial images in the average case (randomly chosen images).
Source images
Adversarial
Clean images
Adv. images
Clean images
Adv. images
fast ϵ = 16
fast ϵ = 8
fast ϵ = 4
fast ϵ = 2
iter. basic ϵ = 16
iter. basic ϵ = 8
iter. basic ϵ = 4
iter. basic ϵ = 2
l.l. class ϵ = 16
l.l. class ϵ = 8
l.l. class ϵ = 4
l.l. class ϵ = 2
Table 2: Accuracy on photos of adversarial images in the preﬁltered case (clean image correctly
classiﬁed, adversarial image conﬁdently incorrectly classiﬁed in digital form being being printed
and photographed ).
Source images
Adversarial
Clean images
Adv. images
Clean images
Adv. images
fast ϵ = 16
fast ϵ = 8
fast ϵ = 4
fast ϵ = 2
iter. basic ϵ = 16
iter. basic ϵ = 8
iter. basic ϵ = 4
iter. basic ϵ = 2
l.l. class ϵ = 16
l.l. class ϵ = 8
l.l. class ϵ = 4
l.l. class ϵ = 2
Table 3: Adversarial image destruction rate with photos.
Adversarial
Average case
Preﬁltered case
fast ϵ = 16
fast ϵ = 8
fast ϵ = 4
fast ϵ = 2
iter. basic ϵ = 16
iter. basic ϵ = 8
iter. basic ϵ = 4
iter. basic ϵ = 2
l.l. class ϵ = 16
l.l. class ϵ = 8
l.l. class ϵ = 4
l.l. class ϵ = 2
Workshop track - ICLR 2017
success rate was lower for preﬁltered images rather than randomly selected images. This suggests
that, to obtain very high conﬁdence, iterative methods often make subtle co-adaptations that are not
able to survive photo transformation.
Overall, the results show that some fraction of adversarial examples stays misclassiﬁed even after a
non-trivial transformation: the photo transformation. This demonstrates the possibility of physical
adversarial examples. For example, an adversary using the fast method with ϵ = 16 could expect
that about 2/3 of the images would be top-1 misclassiﬁed and about 1/3 of the images would be
top-5 misclassiﬁed. Thus by generating enough adversarial images, the adversary could expect to
cause far more misclassiﬁcation than would occur on natural inputs.
DEMONSTRATION OF BLACK BOX ADVERSARIAL ATTACK IN THE PHYSICAL WORLD
The experiments described above study physical adversarial examples under the assumption that
adversary has full access to the model (i.e. the adversary knows the architecture, model weights, etc
. . . ). However, the black box scenario, in which the attacker does not have access to the model, is
a more realistic model of many security threats. Because adversarial examples often transfer from
one model to another, they may be used for black box attacks Szegedy et al. ; Papernot et al.
 . As our own black box attack, we demonstrated that our physical adversarial examples fool a
different model than the one that was used to construct them. Speciﬁcally, we showed that they fool
the open source TensorFlow camera demo 2 — an app for mobile phones which performs image
classiﬁcation on-device. We showed several printed clean and adversarial images to this app and
observed change of classiﬁcation from true label to incorrect label. Video with the demo available
at We also demonstrated this effect live at GeekPwn
ARTIFICIAL IMAGE TRANSFORMATIONS
The transformations applied to images by the process of printing them, photographing them, and
cropping them could be considered as some combination of much simpler image transformations.
Thus to better understand what is going on we conducted a series of experiments to measure the
adversarial destruction rate on artiﬁcial image transformations. We explored the following set of
transformations: change of contrast and brightness, Gaussian blur, Gaussian noise, and JPEG encoding.
For this set of experiments we used a subset of 1, 000 images randomly selected from the validation
set. This subset of 1, 000 images was selected once, thus all experiments from this section used
the same subset of images. We performed experiments for multiple pairs of adversarial method
and transformation. For each given pair of transformation and adversarial method we computed
adversarial examples, applied the transformation to the adversarial examples, and then computed
the destruction rate according to Equation (1).
Detailed results for various transformations and adversarial methods with ϵ = 16 could be found in
Appendix in Figure 6. The following general observations can be drawn from these experiments:
• Adversarial examples generated by the fast method are the most robust to transformations,
and adversarial examples generated by the iterative least-likely class method are the least
robust. This coincides with our results on photo transformation.
• The top-5 destruction rate is typically higher than top-1 destruction rate. This can be explained by the fact that in order to “destroy” top-5 adversarial examples, a transformation
has to push the correct class labels into one of the top-5 predictions. However in order to
destroy top-1 adversarial examples we have to push the correct label to be top-1 prediction,
which is a strictly stronger requirement.
• Changing brightness and contrast does not affect adversarial examples much. The destruction rate on fast and basic iterative adversarial examples is less than 5%, and for the iterative
least-likely class method it is less than 20%.
2 As of October 25, 2016 TensorFlow camera demo was available at 
tensorflow/tensorflow/tree/master/tensorflow/examples/android
Workshop track - ICLR 2017
• Blur, noise and JPEG encoding have a higher destruction rate than changes of brightness
and contrast. In particular, the destruction rate for iterative methods could reach 80% −
90%. However none of these transformations destroy 100% of adversarial examples, which
coincides with the “photo transformation” experiment.
CONCLUSION
In this paper we explored the possibility of creating adversarial examples for machine learning systems which operate in the physical world. We used images taken from a cell-phone camera as an
input to an Inception v3 image classiﬁcation neural network. We showed that in such a set-up, a signiﬁcant fraction of adversarial images crafted using the original network are misclassiﬁed even when
fed to the classiﬁer through the camera. This ﬁnding demonstrates the possibility of adversarial examples for machine learning systems in the physical world. In future work, we expect that it will
be possible to demonstrate attacks using other kinds of physical objects besides images printed on
paper, attacks against different kinds of machine learning systems, such as sophisticated reinforcement learning agents, attacks performed without access to the model’s parameters and architecture
(presumably using the transfer property), and physical attacks that achieve a higher success rate by
explicitly modeling the phyiscal transformation during the adversarial example construction process.
We also hope that future work will develop effective methods for defending against such attacks.