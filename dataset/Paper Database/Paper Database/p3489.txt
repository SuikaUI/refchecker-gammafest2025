Recurrent Dropout without Memory Loss
Stanislau Semeniuta1
Aliaksei Severyn2
Erhardt Barth1
1Universit¨at zu L¨ubeck, Institut f¨ur Neuro- und Bioinformatik
{stas,barth}@inb.uni-luebeck.de
2Google Research
 
This paper presents a novel approach to recurrent neural network (RNN) regularization. Differently from the widely adopted
dropout method, which is applied to forward connections of feed-forward architectures or RNNs, we propose to drop neurons directly in recurrent connections in a
way that does not cause loss of long-term
memory. Our approach is as easy to implement and apply as the regular feed-forward
dropout and we demonstrate its effectiveness for Long Short-Term Memory network, the most popular type of RNN
Our experiments on NLP benchmarks show consistent improvements even
when combined with conventional feedforward dropout.
Introduction
Recurrent Neural Networks, LSTMs in particular,
have recently become a popular tool among NLP
researchers for their superior ability to model and
learn from sequential data.
These models have
shown state-of-the-art results on various public
benchmarks ranging from sentence classiﬁcation 
 
 ,
generation
 
sequence-to-sequence
prediction
tasks .
Having shown excellent ability to capture and
learn complex linguistic phenomena, RNN architectures are prone to overﬁtting.
the most widely used techniques to avoid over-
ﬁtting in neural networks is the dropout regularization .
Since its introduction it has become, together with the L2
weight decay, the standard method for neural
network regularization.
While showing significant improvements when used in feed-forward
architectures, e.g., Convolutional Neural Networks , the application of
dropout in RNNs has been somewhat limited. Indeed, so far dropout in RNNs has been applied
in the same fashion as in feed-forward architectures: it is typically injected in input-to-hidden
and hidden-to-output connections, i.e., along the
input axis, but not between the recurrent connections (time axis).
Given that RNNs are mainly
used to model sequential data with the goal of capturing short- and long-term interactions, it seems
natural to also regularize the recurrent weights.
This observation has led us and other researchers
 to the idea of applying dropout to the recurrent connections in
In this paper we propose a novel recurrent
dropout technique and demonstrate how our
method is superiour to other recurrent dropout
methods recently proposed in . Additionally, we answer the following questions which helps to understand how to
best apply recurrent dropout: (i) how to apply
the dropout in recurrent connections of the LSTM
architecture in a way that prevents possible corruption of the long-term memory; (ii) what is
the relationship between our recurrent dropout
and the widely adopted dropout in input-to-hidden
and hidden-to-output connections; (iii) how the
dropout mask in RNNs should be sampled: once
per step or once per sequence. The latter question
of sampling the mask appears to be crucial in some
cases to make the recurrent dropout work and, to
the best of our knowledge, has received very little
attention in the literature. Our work is the ﬁrst one
to provide empirical evaluation of the differences
between these two sampling approaches.
Regarding empirical evaluation, we ﬁrst highlight the problem of information loss in memory
cells of LSTMs when applying recurrent dropout.
We demonstrate that previous approaches of dropping hidden state vectors cause loss of memory
while our proposed method to use dropout mask in
hidden state update vectors does not suffer from
this problem.
We experiment on three widely
adopted NLP tasks:
word- and character-level
Language Modeling and Named Entity Recognition.
The results demonstrate that our recurrent dropout helps to achieve better regularization and yields improvements across all the tasks,
even when combined with the conventional feedforward dropout. Furthermore, we compare our
dropout scheme with the recently proposed alternative recurrent dropout methods and show that
our technique is superior in almost all cases.
Related Work
Neural Network models often suffer from overﬁtting, especially when the number of network parameters is large and the amount of training data is
small. This has led to a lot of research directed towards improving their generalization ability. Below we primarily discuss some of the methods
aimed at improving regularization of RNNs.
Pham et al. and Zaremba et al. 
have shown that LSTMs can be effectively regularized by using dropout in forward connections.
While this already allows for effective regularization of recurrent networks, it is intuitive that introducing dropout also in the hidden state may force
it to create more robust representations. Indeed,
Moon et al. have extended the idea of dropping neurons in forward direction and proposed to
drop cell states as well showing good results on
a Speech Recognition task. Bluche et al. 
carry out a study to ﬁnd where dropout is most
effective, e.g. input-to-hidden or hidden-to-output
connections. The authors conclude that it is more
beneﬁcial to use it once in the correct spot, rather
than to put it everywhere.
Bengio et al. 
have proposed an algorithm called scheduled sampling to improve performance of recurrent networks on sequence-to-sequence labeling tasks. A
disadvantage of this work is that the scheduled
sampling is speciﬁcally tailored to this kind of
tasks, what makes it impossible to use in, for example, sequence-to-label tasks. Gal uses
insights from variational Bayesian inference to
propose a variant of LSTM with dropout that
achieves consistent improvements over a baseline
architecture without dropout.
The main contribution of this paper is a new
recurrent dropout technique, which is most useful in gated recurrent architectures such as LSTMs
and GRUs. We demonstrate that applying dropout
to arbitrary vectors in LSTM cells may lead to
loss of memory thus hindering the ability of the
network to encode long-term information.
other words, our technique allows for adding a
strong regularizer on the model weights responsible for learning short and long-term dependencies without affecting the ability to capture longterm relationships, which are especially important
to model when dealing with natural language. Finally, we compare our method with alternative
recurrent dropout methods recently introduced
in and demonstrate
that our method allows to achieve better results.
Recurrent Dropout
In this section we ﬁrst show how the idea
of feed-forward dropout can
be applied to recurrent connections in vanilla
RNNs. We then introduce our recurrent dropout
method speciﬁcally tailored for gated architectures such as LSTMs and GRUs. We draw parallels and contrast our approach with alternative
recurrent dropout techniques recently proposed
in showing that our
method is favorable when considering potential
memory loss issues in long short-term architectures.
Dropout in vanilla RNNs
Vanilla RNNs process the input sequences as follows:
ht = f(Wh[xt, ht−1] + bh),
where xt is the input at time step t; ht and ht−1
are hidden vectors that encode the current and
previous states of the network; Wh is parameter
matrix that models input-to-hidden and hidden-tohidden (recurrent) connections; b is a vector of
bias terms, and f is the activation function.
As RNNs model sequential data by a fullyconnected layer, dropout can be applied by simply
dropping the previous hidden state of a network.
Speciﬁcally, we modify Equation 1 in the following way:
ht = f(Wh[xt, d(ht−1)] + bh),
where d is the dropout function deﬁned as follows:
if train phase
otherwise,
where p is the dropout rate and mask is a vector,
sampled from the Bernoulli distribution with success probability 1 −p.
Dropout in LSTM networks
Short-Term
 
have introduced the concept of gated inputs in
RNNs, which effectively allow the network to
preserve its memory over a larger number of
time steps during both forward and backward
passes, thus alleviating the problem of vanishing
gradients .
Formally, it is
expressed with the following equations:
ct = ft ∗ct−1 + it ∗gt
ht = ot ∗f(ct),
where it, ft, ot are input, output and forget gates at
step t; gt is the vector of cell updates and ct is the
updated cell vector used to update the hidden state
ht; σ is the sigmoid function and ∗is the elementwise multiplication.
Gal proposes to drop the previous hidden state when computing values of gates and updates of the current step, where he samples the
dropout mask once for every sequence:
xt, d(ht−1)
xt, d(ht−1)
xt, d(ht−1)
xt, d(ht−1)
Moon et al. propose to apply dropout directly to the cell values and use per-sequence sampling as well:
ct = d(ft ∗ct−1 + it ∗gt)
In contrast to dropout techniques proposed by
Gal and Moon et al. , we propose to
apply dropout to the cell update vector gt as follows:
ct = ft ∗ct−1 + it ∗d(gt)
Different from methods of , our approach does not require sampling of the dropout masks once for every training sequence. On the contrary, as we will show in
Section 4, networks trained with a dropout mask
sampled per-step achieve results that are at least as
good and often better than per-sequence sampling.
Figure 1 shows differences between approaches to
The approach of differs from ours
in the overall strategy – they consider network’s
hidden state as input to subnetworks that compute gate values and cell updates and the purpose of dropout is to regularize these subnetworks. Our approach considers the architecture
as a whole with the hidden state as its key part
and regularize the whole network. The approach
of on the other hand is seemingly similar to ours. In Section 3.2 we argue that
our method is a more principled way to drop recurrent connections in gated architectures.
It should be noted that while being different, the
three discussed dropout schemes are not mutually
exclusive. It is in general possible to combine our
approach and the other two. We expect the merge
of our scheme and that of to hold the
biggest potential. The relations between recurrent
dropout schemes are however out of scope of this
paper and we rather focus on studying the relationships of different dropout approaches with the
conventional forward dropout.
Gated Recurrent Unit (GRU) networks are
introduced
recurrent network with hidden state protected by
gates . Different from LSTMs,
GRU networks use only two gates rt and zt to
update the cell’s hidden state ht:
xt, rt ∗ht−1
(a) Moon et al., 2015
(b) Gal, 2015
Figure 1: Illustration of the three types of dropout in recurrent connections of LSTM networks. Dashed
arrows refer to dropped connections. Input connections are omitted for clarity.
ht = (1 −zt) ∗ht−1 + zt ∗gt
Similarly to the LSTMs, we propoose to apply
dropout to the hidden state updates vector gt:
ht = (1 −zt) ∗ht−1 + zt ∗d(gt)
We found that an intuitive idea to drop previous hidden states directly,
as proposed in
Moon et al. , produces mixed results. We
have observed that it helps the network to generalize better when not coupled with the forward
dropout, but is usually no longer beneﬁcial when
used together with a regular forward dropout.
The problem is caused by the scaling of neuron activations during inference. Consider the hidden state update rule in the test phase of an LSTM
network. For clarity, we assume every gate to be
equal to 1:
ht = (ht−1 + gt)p,
where gt are update vectors computed by Eq. 4
and p is the probability to not drop a neuron. As
ht−1 was, in turn, computed using the same rule,
we can rewrite this equation as:
ht = ((ht−2 + gt−1)p + gt)p
Recursively expanding h for every timestep results in the following equation:
ht = ((((h0 + g0)p + g1)p + ...)p + gt)p (16)
Pushing p inside parenthesis, Eq. 16 can be written
ht = pt+1h0 +
Since p is a value between zero and one, sum components that are far away in the past are multiplied by a very low value and are effectively removed from the summation. Thus, even though
the network is able to learn long-term dependencies, it is not capable of exploiting them during
test phase. Note that our assumption of all gates
being equal to 1 helps the network to preserve hidden state, since in a real network gate values lie
within (0, 1) interval. In practice trained networks
tend to saturate gate values 
what makes gates to behave as binary switches.
The fact that Moon et al. have achieved an
improvement can be explained by the experimentation domain. Le et al. have proposed a
simple yet effective way to initialize vanilla RNNs
and reported that they have achieved a good result
in the Speech Recognition domain while having
an effect similar to the one caused by Eq. 17. One
can reduce the inﬂuence of this effect by selecting a low dropout rate. This solution however is
partial, since it only increases the number of steps
required to completely forget past history and does
not remove the problem completely.
One important note is that the dropout function
from Eq. 3 can be implemented as:
mask ∗x/p,
if train phase
In this case the above argument holds as well, but
instead of observing exponentially decreasing hidden states during testing, we will observe exponentially increasing values of hidden states during
Our approach addresses the problem discussed
previously by dropping the update vectors g.
Since we drop only candidates, we do not scale
the hidden state directly. This allows for solving
the scaling issue, as Eq. 17 becomes:
ht = ph0 +
p gi = ph0 + p
Moreover, since we only drop differences that are
added to the network’s hidden state at each timestep, this dropout scheme allows us to use per-step
mask sampling while still being able to learn longterm dependencies. Thus, our approach allows to
freely apply dropout in the recurrent connections
of a gated network without hindering its ability to
process long-term relationships.
We note that the discussed problem does not
affect vanilla RNNs because they overwrite their
hidden state at every timestep.
Lastly, the approach of Gal is not affected by the issue
Experiments
First, we empirically demonstrate the issues linked
to memory loss when using various dropout
techniques in recurrent
nets (see Sec. 3.2).
For this purpose we experiment with training
LSTM networks on one of the synthetic tasks
from , specifically the Temporal Order task. We then validate
the effectiveness of our recurrent dropout when
applied to vanilla RNNs, LSTMs and GRUs on
three diverse public benchmarks: Language Modelling, Named Entity Recognition, and Twitter
Sentiment classiﬁcation.
Synthetic Task
Data. In this task the input sequences are generated as follows: all but two elements in a sequence
are drawn randomly from {C, D} and the remaining two symbols from {A, B}. Symbols from {A,
B} can appear at any position in the sequence.
The task is to classify a sequence into one of four
classes ({AA, AB, BA, BB}) based on the order
of the symbols. We generate data so that every sequence is split into three parts with the same size
and emit one meaningful symbol in ﬁrst and second parts of a sequence. The prediction is taken
after the full sequence has been processed. We use
two modes in our experiments: Short with sequences of length 15 and Medium with sequences
of length 30.
Setup. We use LSTM with one layer that contains 256 hidden units and recurrent dropout with
0.5 strength. Network is trained by SGD with a
learning rate of 0.1 for 5k epochs. The networks
are trained on 200 mini-batches with 32 sequences
and tested on 10k sequences.
Table 1 reports the results on the
Temporal Order task when recurrent dropout is
applied using our method and methods from
 
 .
Using dropout from with persequence sampling, networks are able to discover
the long-term dependency, but fail to use it on
the test set due to the scaling issue. Interestingly,
in Medium case results on the test set are worse
than random. Networks trained with per-step sampling exhibit different behaviour: in Short case
they are capable of capturing the temporal dependency and generalizing to the test set, but require 10-20 times more iterations to do so.
Medium case these networks do not ﬁt into the
allocated number of iterations. This suggests that
applying dropout to hidden states as suggested in
 corrupts memory cells hindering the long-term memory capacity of LSTMs.
In contrast, using our recurrent dropout methods, networks are able to solve the problem in all
cases. We have also ran the same experiments for
longer sequences, but found that the results are
equivalent to the Medium case. We also note that
the approach of does not seem to exhibit the memory loss problem.
Word Level Language Modeling
Following Mikolov et al. we use
the Penn Treebank Corpus to train our Language
Modeling (LM) models. The dataset contains approximately 1 million words and comes with predeﬁned training, validation and test splits, and a
vocabulary of 10k words.
In our LM experiments we use recurrent networks with a single layer with 256 cells.
Network parameters were initialized uniformly in
[-0.05, 0.05].
For training, we use plain SGD
with batch size 32 with the maximum norm gradient clipping . Learning rate,
clipping threshold and number of Backpropagation Through Time (BPTT) steps were set to 1,
10 and 35 respectively. For the learning rate decay we use the following strategy: if the validation error does not decrease after each epoch, we
divide the learning rate by 1.5.
The aforementioned choices were largely guided by the work
of Mikolov et al. . To ease reproducibility
of our results on the LM and synthetic tasks, we
have released the source code of our experiments1.
Table 2 reports the results for LSTM
We also present results when the
dropout is applied directly to hidden states as
in and results of networks
1 
Moon et al. 
Gal ; Ours
short sequences
medium sequences
short sequences
medium sequences
per-sequence
Table 1: Accuracies on the Temporal Order task.
Dropout rate
Moon et al. 
Gal 
per-sequence
per-sequence
per-sequence
per-sequence
Table 2: Perplexity scores of the LSTM network on word level Language Modeling task (lower is better).
Upper and lower parts of the table report results without and with forward dropout respectively. Networks
with forward dropout use 0.2 and 0.5 dropout rates in input and output connections respectively. Values
in bold show best results for each of the recurrent dropout schemes with and without forward dropout.
trained with the dropout scheme of .
We make the following observations: (i) our approach shows better results than the alternatives;
(ii) per-step mask sampling is better when dropping hidden state directly; (iii) on this task our
method using per-step sampling seems to yield results similar to per-sequence sampling; (iv) in this
case forward dropout yields better results than any
of the three recurrent dropouts; and ﬁnally (v) both
our approach and that of are effective
when combined with the forward dropout, though
ours is more effective.
We make the following observations: (i) dropping hidden state updates yields better results than
dropping hidden states; (ii) per-step mask sampling is better when dropping hidden state directly;
(iii) contrary to our expectations, when we apply
dropout to hidden state updates per-step sampling
seems to yield results similar to per-sequence sampling; (iv) applying dropout to hidden state updates rather than hidden states in some cases leads
to a perplexity decrease by more than 30 points;
and ﬁnally (v) our approach is effective even when
combined with the forward dropout – for LSTMs
we are able to bring down perplexity on the validation set from 130 to 91.6.
To demonstrate the effect of our approach on the
learning process, we also present learning curves
of LSTM networks trained with and without recurrent dropout (Fig. 2).
Models trained using
our recurrent dropout scheme have slower convergence than models without dropout and usually have larger training error and lower validation
errors. This behaviour is consistent with what is
expected from a regularizer and is similar to the
effect of the feed-forward dropout applied to nonrecurrent networks .
Character Level Language Modeling
Data. We train our networks on the dataset described in the previous section. It contains approximately 6 million characters, and a vocabulary of
50 characters. We use the provided partitions train,
validation and test partitions.
Setup. We use networks with 1024 units to solve
the character level LM task. The characters are
Dropout rate
Moon et al. 
Gal 
per-sequence
per-sequence
per-sequence
per-sequence
Table 3: Bit-per-character scores of the LSTM network on character level Language Modelling task
(lower is better). Upper and lower parts of the table report results without and with forward dropout respectively. Networks with forward dropout use 0.2 and 0.5 dropout rates in input and output connections
respectively. Values in bold show best results for each of the recurrent dropout schemes with and without
forward dropout.
5000 10000 15000 20000 25000 30000
with dropout
without dropout
Learning curves of LSTM networks
when training without and with 0.25 per-step recurrent dropout.
Solid and dashed lines show
training and validation errors respectively.
viewed in color.
embedded into 256 dimensional space before being processed by the LSTM. All parameters of
the networks are initialized uniformly in [-0.01,
0.01]. We train our networks on non-overlapping
sequences of 100 characters.
The networks are
trained with the Adam (?) algorithm with initial
learning rate of 0.001 for 50 epochs. We decrease
the learning rate by 0.97 after every epoch starting
from epoch 10. To avoid exploding gradints, we
use MaxNorm gradient clipping with threshold set
Results of our experiments are given
in Table 3.
Note that on this task regularizing only the recurrent connections is more beneﬁcial than only the forward ones.
In particular, LSTM networks trained with our approach
and the approach of yield a lower
bit-per-character (bpc) score than those trained
with forward dropout onlyWe attribute it to pronounced long term dependencies.
In addition,
our approach is the only one that improves over
baseline LSTM with forward dropout. The overall best result is achieved by a network trained
with our dropout with 0.25 dropout rate and perstep sampling, closely followed by network with
Gal dropout.
Named Entity Recognition
To assess our recurrent Named Entity
Recognition (NER) taggers when using recurrent
dropout we use a public benchmark from CONLL
 .
The dataset contains approximately 300k words
split into train, validation and test partitions. Each
word is labeled with either a named entity class
it belongs to, such as Location or Person, or
as being not named. The majority of words are
labeled as not named entities. The vocabulary size
is about 22k words.
Previous state-of-the-art NER systems
have shown the importance of using word context features around entities. Hence, we slightly
modify the architecture of our recurrent networks
to consume the context around the target word
by simply concatenating their embeddings. The
size of the context window is ﬁxed to 5 words
(the word to be labeled, two words before and
two words after).
The recurrent layer size is
1024 units. The network inputs include only word
embeddings and kept static)
and capitalization features. For training we use the
RMSProp algorithm with ρ
ﬁxed at 0.9 and a learning rate of 0.01 and multiply the learning rate by 0.99 after every epoch.
We also combine our recurrent dropout (with persequence mask sampling) with the conventional
forward dropout with the rate 0.2 in input and 0.5
in output connections. Lastly, we found that using relu(x) = max(x, 0) nonlinearity resulted in
higher performance than tanh(x).
To speed up the training we use a length expansion approach described in ,
where training is performed in two stages: (i) we
ﬁrst sample short 5-words input sequences with
their contexts and train for 25 epochs; (ii) we
ﬁne tune the network on input 15-words sequences
for 10 epochs. We found that further ﬁne tuning
on longer sequences yielded negligible improvements.
Such strategy allows us to signiﬁcantly
speed up the training when compared to training
from scratch on full-length input sentences. We
use full sentences for testing.
Results. F1 scores of our taggers are reported in
Table 4 when trained on short 5-word and longer
15-word input sequences. We note that the gap
between networks trained with and without our
dropout scheme is larger for networks trained on
shorter sequences. It suggests that dropout in recurrent connections might have an impact on how
well a network generalizes to sequences that are
longer than the ones used during training.
Dropout rate
5 word long sequences
15 word long sequences
Table 4: F1 scores (higher is better) on NER task.
gain from using recurrent dropout is larger for
the LSTM network. We have experimented with
higher recurrent dropout rates, but found that it
led to excessive regularization.
Twitter Sentiment Analysis
SemEval-2015
B) .
It contains 15k
labeled tweets split into training and validation
partitions. The total number of words is approximately 330k and the vocabulary size is 22k.
The task consists of classifying a tweet into three
classes: positive, neutral, and negative.
Performance of a classiﬁer is measured by the average of F1 scores of positive and negative
classes. We evaluate our models on a number of
datasets that were used for benchmarking during
the last years.
Setup. We use recurrent networks in the standard
sequence labeling manner - we input words to a
network one by one and take the label at the last
step. Similarly to ,
we use 1 million of weakly labeled tweets to pretrain our networks. We use networks composed of
500 neurons in all cases. Our models are trained
with the RMSProp algorithm with a learning rate
of 0.001. We use our recurrent dropout regularization with per-step mask sampling. All the other
settings are equivalent to the ones used in the NER
Results. The results of these experiments are presented in Table 5. Note that in this case our algorithm decreases the performance of the vanilla
RNNs while this is not the case for LSTM and
GRU networks. This is due to the nature of the
problem: differently from LM and NER tasks,
a network needs to aggregate information over a
long sequence.
Vanilla RNNs notoriously have
difﬁculties with this and our dropout scheme im-
Dropout rate
LiveJournal14
Table 5: F1 scores (higher is better) on Sentiment Evaluation task
pairs their ability to remember even further. The
best result over most of the datasets is achieved
by the GRU network with recurrent dropout. The
only exception is the Twitter2015 dataset, where
the LSTM network shows better results.
Conclusions
This paper presents a novel recurrent dropout
method speciﬁcally tailored to the gated recurrent
neural networks.
Our approach is easy to implement and is even more effective when combined with conventional forward dropout.
have shown that for LSTMs and GRUs applying
dropout to arbitrary cell vectors results in suboptimal performance. We discuss in detail the cause of
this effect and propose a simple solution to overcome it. The effectiveness of our approach is veriﬁed on three different public NLP benchmarks.
Our ﬁndings along with our empirical results
allow us to answer the questions posed in Section 1: i) while is straight-forward to use dropout
in vanilla RNNs due to their strong similarity with
the feed-forward architectures, its application to
LSTM networks is not so straightforward.
demonstrate that recurrent dropout is most effective when applied to hidden state update vectors in LSTMs rather than to hidden states; (ii)
we observe an improvement in the network’s performance when our recurrent dropout is coupled
with the standard forward dropout, though the
extent of this improvement depends on the values of dropout rates; (iii) contrary to our expectations, networks trained with per-step and persequence mask sampling produce similar results
when using our recurrent dropout method, both
being better than the dropout scheme proposed by
Moon et al. .
While our experimental results show that applying recurrent dropout method leads to significant improvements across various NLP benchmarks (especially when combined with conventional forward dropout), its beneﬁts for other tasks,
e.g., sequence-to-sequence prediction, or other domains, e.g., Speech Recognition, remain unexplored. We leave it as our future work.
Acknowledgments
This project has received funding from the European Union’s Framework Programme for Research and Innovation HORIZON 2020 under the Marie Skodowska-Curie Agreement No. 641805.
Stanislau Semeniuta thanks
the support from Pattern Recognition Company
GmbH. We gratefully acknowledge the support of
NVIDIA Corporation with the donation of the Titan X GPU used for this research.