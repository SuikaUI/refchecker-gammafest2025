MIT Open Access Articles
HOGgles: Visualizing Object Detection Features
The MIT Faculty has made this article openly available. Please share
how this access benefits you. Your story matters.
Citation: Vondrick, Carl, Aditya Khosla, Tomasz Malisiewicz, and Antonio Torralba. “HOGgles:
Visualizing Object Detection Features.” 2013 IEEE International Conference on Computer Vision,
1-8 Dec. 2013, Sydney, NSW. . p.1-8.
As Published: 
Publisher: IEEE Computer Society
Persistent URL: 
Version: Author's final manuscript: final author's manuscript post peer review, without
publisher's formatting or copy editing
Terms of use: Creative Commons Attribution-Noncommercial-Share Alike
HOGgles: Visualizing Object Detection Features∗
Carl Vondrick, Aditya Khosla, Tomasz Malisiewicz, Antonio Torralba
Massachusetts Institute of Technology
{vondrick,khosla,tomasz,torralba}@csail.mit.edu
We introduce algorithms to visualize feature spaces used
by object detectors. The tools in this paper allow a human
to put on ‘HOG goggles’ and perceive the visual world as
a HOG based object detector sees it. We found that these
visualizations allow us to analyze object detection systems
in new ways and gain new insight into the detector’s failures. For example, when we visualize the features for high
scoring false alarms, we discovered that, although they are
clearly wrong in image space, they do look deceptively similar to true positives in feature space. This result suggests
that many of these false alarms are caused by our choice of
feature space, and indicates that creating a better learning
algorithm or building bigger datasets is unlikely to correct
these errors. By visualizing feature spaces, we can gain a
more intuitive understanding of our detection systems.
1. Introduction
Figure 1 shows a high scoring detection from an object detector with HOG features and a linear SVM classiﬁer
trained on PASCAL. Despite our ﬁeld’s incredible progress
in object recognition over the last decade, why do our detectors still think that sea water looks like a car?
Unfortunately, computer vision researchers are often unable to explain the failures of object detection systems.
Some researchers blame the features, others the training set,
and even more the learning algorithm. Yet, if we wish to
build the next generation of object detectors, it seems crucial to understand the failures of our current detectors.
In this paper, we introduce a tool to explain some of the
failures of object detection systems.1 We present algorithms
to visualize the feature spaces of object detectors. Since
features are too high dimensional for humans to directly inspect, our visualization algorithms work by inverting features back to natural images. We found that these inversions
provide an intuitive and accurate visualization of the feature
spaces used by object detectors.
∗Previously: Inverting and Visualizing Features for Object Detection
1Code is available online at 
Figure 1: An image from PASCAL and a high scoring car
detection from DPM . Why did the detector fail?
Figure 2: We show the crop for the false car detection from
Figure 1. On the right, we show our visualization of the
HOG features for the same patch. Our visualization reveals
that this false alarm actually looks like a car in HOG space.
Figure 2 shows the output from our visualization on the
features for the false car detection. This visualization reveals that, while there are clearly no cars in the original
image, there is a car hiding in the HOG descriptor. HOG
features see a slightly different visual world than what we
see, and by visualizing this space, we can gain a more intuitive understanding of our object detectors.
Figure 3 inverts more top detections on PASCAL for
a few categories. Can you guess which are false alarms?
Take a minute to study the ﬁgure since the next sentence
might ruin the surprise. Although every visualization looks
like a true positive, all of these detections are actually false
alarms. Consequently, even with a better learning algorithm
or more data, these false alarms will likely persist. In other
words, the features are to blame.
The principle contribution of this paper is the presentation of algorithms for visualizing features used in object detection. To this end, we present four algorithms to invert
Figure 3: We visualize some high scoring detections from the deformable parts model for person, chair, and car. Can you
guess which are false alarms? Take a minute to study this ﬁgure, then see Figure 16 for the corresponding RGB patches.
Figure 4: In this paper, we present algorithms to visualize
HOG features. Our visualizations are perceptually intuitive
for humans to understand.
object detection features to natural images. Although we focus on HOG features in this paper, our approach is general
and can be applied to other features as well. We evaluate
our inversions with both automatic benchmarks and a large
human study, and we found our visualizations are perceptually more accurate at representing the content of a HOG
feature than existing methods; see Figure 4 for a comparison between our visualization and HOG glyphs. We then
use our visualizations to inspect the behaviors of object detection systems and analyze their features. Since we hope
our visualizations will be useful to other researchers, our
ﬁnal contribution is a public feature visualization toolbox.
2. Related Work
Our visualization algorithms extend an actively growing
body of work in feature inversion. Torralba and Oliva, in
early work, described a simple iterative procedure to recover images only given gist descriptors . Weinzaepfel
et al. were the ﬁrst to reconstruct an image given its
keypoint SIFT descriptors .
Their approach obtains
compelling reconstructions using a nearest neighbor based
approach on a massive database. d’Angelo et al. then developed an algorithm to reconstruct images given only LBP
features . Their method analytically solves for the inverse image and does not require a dataset.
While do a good job at reconstructing images from SIFT, LBP, and gist features, our visualization
algorithms have several advantages. Firstly, while existing
methods are tailored for speciﬁc features, our visualization
algorithms we propose are feature independent. Since we
cast feature inversion as a machine learning problem, our
algorithms can be used to visualize any feature. In this paper, we focus on features for object detection, the most popular of which is HOG. Secondly, our algorithms are fast:
our best algorithm can invert features in under a second on
a desktop computer, enabling interactive visualization. Finally, to our knowledge, this paper is the ﬁrst to invert HOG.
Our visualizations enable analysis that complement a recent line of papers that provide tools to diagnose object
recognition systems, which we brieﬂy review here. Parikh
and Zitnick introduced a new paradigm for human
debugging of object detectors, an idea that we adopt in our
experiments. Hoiem et al. performed a large study analyzing the errors that object detectors make. Divvala et al.
 analyze part-based detectors to determine which components of object detection systems have the most impact
on performance. Tatu et al. explored the set of images
that generate identical HOG descriptors. Liu and Wang 
designed algorithms to highlight which image regions contribute the most to a classiﬁer’s conﬁdence. Zhu et al. 
try to determine whether we have reached Bayes risk for
HOG. The tools in this paper enable an alternative mode to
analyze object detectors through visualizations. By putting
on ‘HOG glasses’ and visualizing the world according to
the features, we are able to gain a better understanding of
the failures and behaviors of our object detection systems.
3. Feature Visualization Algorithms
We pose the feature visualization problem as one of feature inversion, i.e. recovering the natural image that generated a feature vector.
Let x ∈RD be an image and
y = φ(x) be the corresponding HOG feature descriptor.
Since φ(·) is a many-to-one function, no analytic inverse
exists. Hence, we seek an image x that, when we compute
Figure 5: We found that averaging the images of top detections from an exemplar LDA detector provide one method
to invert HOG features.
HOG on it, closely matches the original descriptor y:
φ−1(y) = argmin
x∈RD ||φ(x) −y||2
Optimizing Eqn.1 is challenging. Although Eqn.1 is not
convex, we tried gradient-descent strategies by numerically
evaluating the derivative in image space with Newton’s
method. Unfortunately, we observed poor results, likely because HOG is both highly sensitive to noise and Eqn.1 has
frequent local minima.
In the rest of this section, we present four algorithms for
inverting HOG features. Since, to our knowledge, no algorithms to invert HOG have yet been developed, we ﬁrst
describe three simple baselines for HOG inversion. We then
present our main inversion algorithm.
3.1. Baseline A: Exemplar LDA (ELDA)
Consider the top detections for the exemplar object detector for a few images shown in Figure 5. Although
all top detections are false positives, notice that each detection captures some statistics about the query. Even though
the detections are wrong, if we squint, we can see parts of
the original object appear in each detection.
We use this simple observation to produce our ﬁrst inversion baseline. Suppose we wish to invert HOG feature y.
We ﬁrst train an exemplar LDA detector for this query,
w = Σ−1(y−µ). We score w against every sliding window
on a large database. The HOG inverse is then the average of
the top K detections in RGB space: φ−1
where zi is an image of a top detection.
This method, although simple, produces surprisingly accurate reconstructions, even when the database does not
contain the category of the HOG template. However, it is
computationally expensive since it requires running an object detector across a large database. We also point out that
a similar nearest neighbor method is used in brain research
to visualize what a person might be seeing .
3.2. Baseline B: Ridge Regression
We present a fast, parametric inversion baseline based
off ridge regression. Let X ∈RD be a random variable
representing a gray scale image and Y ∈Rd be a random
variable of its corresponding HOG point. We deﬁne these
random variables to be normally distributed on a D + dvariate Gaussian P(X, Y ) ∼N(µ, Σ) with parameters
µ = [ µX µY ] and Σ =
. In order to invert a
HOG feature y, we calculate the most likely image from the
conditional Gaussian distribution P(X|Y = y):
B (y) = argmax
P(X = x|Y = y)
It is well known that Gaussians have a closed form conditional mode:
B (y) = ΣXY Σ−1
Y Y (y −µY ) + µX
Under this inversion algorithm, any HOG point can be inverted by a single matrix multiplication, allowing for inversion in under a second.
We estimate µ and Σ on a large database. In practice, Σ
is not positive deﬁnite; we add a small uniform prior (i.e.,
ˆΣ = Σ + λI) so Σ can be inverted. Since we wish to invert any HOG point, we assume that P(X, Y ) is stationary
 , allowing us to efﬁciently learn the covariance across
massive datasets. We invert an arbitrary dimensional HOG
point by marginalizing out unused dimensions.
We found that ridge regression yields blurred inversions.
Intuitively, since HOG is invariant to shifts up to its bin size,
there are many images that map to the same HOG point.
Ridge regression is reporting the statistically most likely
image, which is the average over all shifts. This causes
ridge regression to only recover the low frequencies of the
original image.
3.3. Baseline C: Direct Optimization
We now provide a baseline that attempts to ﬁnd images that, when we compute HOG on it, sufﬁciently match
the original descriptor. In order to do this efﬁciently, we
only consider images that span a natural image basis. Let
U ∈RD×K be the natural image basis. We found using the
ﬁrst K eigenvectors of ΣXX ∈RD×D worked well for this
basis. Any image x ∈RD can be encoded by coefﬁcients
ρ ∈RK in this basis: x = Uρ. We wish to minimize:
C (y) = Uρ∗
ρ∗= argmin
ρ∈RK ||φ(Uρ) −y||2
Empirically we found success optimizing Eqn.4 using coordinate descent on ρ with random restarts. We use an overcomplete basis corresponding to sparse Gabor-like ﬁlters
for U. We compute the eigenvectors of ΣXX across different scales and translate smaller eigenvectors to form U.
3.4. Algorithm D: Paired Dictionary Learning
In this section, we present our main inversion algorithm.
Let x ∈RD be an image and y ∈Rd be its HOG descriptor.
Figure 6: Inverting HOG using paired dictionary learning.
We ﬁrst project the HOG vector on to a HOG basis. By
jointly learning a coupled basis of HOG features and natural
images, we then transfer the coefﬁcients to the image basis
to recover the natural image.
Figure 7: Some pairs of dictionaries for U and V . The left
of every pair is the gray scale dictionary element and the
right is the positive components elements in the HOG dictionary. Notice the correlation between dictionaries.
Suppose we write x and y in terms of bases U ∈RD×K
and V ∈Rd×K respectively, but with shared coefﬁcients
The key observation is that inversion can be obtained by
ﬁrst projecting the HOG features y onto the HOG basis V ,
then projecting α into the natural image basis U:
D (y) = Uα∗
α∗= argmin
α∈RK ||V α −y||2
||α||1 ≤λ (6)
See Figure 6 for a graphical representation of the paired dictionaries. Since efﬁcient solvers for Eqn.6 exist , we
can invert features in under two seconds on a 4 core CPU.
Paired dictionaries require ﬁnding appropriate bases U
and V such that Eqn.5 holds. To do this, we solve a paired
dictionary learning problem, inspired by recent super resolution sparse coding work :
 ||xi −Uαi||2
2 + ||φ(xi) −V αi||2
||αi||1 ≤λ ∀i, ||U||2
2 ≤γ1, ||V ||2
After a few algebraic manipulations, the above objective
simpliﬁes to a standard sparse coding and dictionary learn-
Figure 8: We show results for all four of our inversion algorithms on held out image patches on similar dimensions
common for object detection. See supplemental for more.
ing problem with concatenated dictionaries, which we optimize using SPAMS . Optimization typically took a
few hours on medium sized problems. We estimate U and
V with a dictionary size K ≈103 and training samples
N ≈106 from a large database. See Figure 7 for a visualization of the learned dictionary pairs.
4. Evaluation of Visualizations
We evaluate our inversion algorithms using both qualitative and quantitative measures. We use PASCAL VOC
2011 as our dataset and we invert patches corresponding
to objects. Any algorithm that required training could only
access the training set. During evaluation, only images from
the validation set are examined. The database for exemplar
LDA excluded the category of the patch we were inverting
to reduce the potential effect of dataset biases.
We show our inversions in Figure 8 for a few object categories. Exemplar LDA and ridge regression tend to pro-
Figure 9: We show results where our paired dictionary algorithm is trained to recover RGB images instead of only
grayscale images. The right shows the original image and
the left shows the inverse.
PairDict (seconds)
Greedy (days)
Figure 10: Although our algorithms are good at inverting
HOG, they are not perfect, and struggle to reconstruct high
frequency detail. See text for details.
Original x
x′ = φ−1 (φ(x))
x′′ = φ−1 (φ(x′))
Figure 11: We recursively compute HOG and invert it with a
paired dictionary. While there is some information loss, our
visualizations still do a good job at accurately representing
HOG features. φ(·) is HOG, and φ−1(·) is the inverse.
duce blurred visualizations. Direct optimization recovers
high frequency details at the expense of extra noise. Paired
dictionary learning tends to produce the best visualization
for HOG descriptors. By learning a dictionary over the visual world and the correlation between HOG and natural
images, paired dictionary learning recovered high frequencies without introducing signiﬁcant noise.
We discovered that the paired dictionary is able to recover color from HOG descriptors. Figure 9 shows the result of training a paired dictionary to estimate RGB images
instead of grayscale images. While the paired dictionary
assigns arbitrary colors to man-made objects and in-door
scenes, it frequently colors natural objects correctly, such as
grass or the sky, likely because those categories are strongly
correlated to HOG descriptors. We focus on grayscale visualizations in this paper because we found those to be more
intuitive for humans to understand.
While our visualizations do a good job at representing
HOG features, they have some limitations. Figure 10 compares our best visualization (paired dictionary) against a
greedy algorithm that draws triangles of random rotation,
Figure 12: Our inversion algorithms are sensitive to the
HOG template size. We show how performance degrades
as the template becomes smaller.
scale, position, and intensity, and only accepts the triangle
if it improves the reconstruction. If we allow the greedy algorithm to execute for an extremely long time (a few days),
the visualization better shows higher frequency detail. This
reveals that there exists a visualization better than paired
dictionary learning, although it may not be tractable. In a
related experiment, Figure 11 recursively computes HOG
on the inverse and inverts it again. This recursion shows
that there is some loss between iterations, although it is minor and appears to discard high frequency details. Moreover, Figure 12 indicates that our inversions are sensitive to
the dimensionality of the HOG template. Despite these limitations, our visualizations are, as we will now show, still
perceptually intuitive for humans to understand.
We quantitatively evaluate our algorithms under two
benchmarks. Firstly, we use an automatic inversion metric
that measures how well our inversions reconstruct original
images. Secondly, we conducted a large visualization challenge with human subjects on Amazon Mechanical Turk
(MTurk), which is designed to determine how well people
can infer high level semantics from our visualizations.
4.1. Inversion Benchmark
We consider the inversion performance of our algorithm:
given a HOG feature y, how well does our inverse φ−1(y)
reconstruct the original pixels x for each algorithm? Since
HOG is invariant up to a constant shift and scale, we score
each inversion against the original image with normalized
cross correlation. Our results are shown in Table 1. Overall,
exemplar LDA does the best at pixel level reconstruction.
4.2. Visualization Benchmark
While the inversion benchmark evaluates how well the
inversions reconstruct the original image, it does not capture the high level content of the inverse: is the inverse of a
sheep still a sheep? To evaluate this, we conducted a study
on MTurk. We sampled 2,000 windows corresponding to
objects in PASCAL VOC 2011. We then showed participants an inversion from one of our algorithms and asked
users to classify it into one of the 20 categories. Each window was shown to three different users. Users were required
to pass a training course and qualiﬁcation exam before participating in order to guarantee users understood the task.
Users could optionally select that they were not conﬁdent in
Table 1: We evaluate the performance of our inversion algorithm by comparing the inverse to the ground truth image
using the mean normalized cross correlation. Higher is better; a score of 1 is perfect. See supplemental for full table.
ELDA Ridge Direct PairDict Glyph Expert
0.327 0.127 0.362
0.405 0.438
0.269 0.282 0.283
0.312 0.222
0.397 0.457 0.617
0.359 0.389
0.219 0.178 0.381
0.139 0.286
0.099 0.239 0.223
0.119 0.167
0.152 0.064 0.162
0.071 0.125
motorbike 0.221 0.232 0.396
0.298 0.350
0.458 0.546 0.502
0.301 0.375
0.282 0.258 0.355
0.191 0.233
We evaluate visualization performance across
twenty PASCAL VOC categories by asking MTurk workers to classify our inversions. Numbers are percent classi-
ﬁed correctly; higher is better. Chance is 0.05. Glyph refers
to the standard black-and-white HOG diagram popularized
by . Paired dictionary learning provides the best visualizations for humans. Expert refers to MIT PhD students
in computer vision performing the same visualization challenge with HOG glyphs. See supplemental for full table.
their answer. We also compared our algorithms against the
standard black-and-white HOG glyph popularized by .
Our results in Table 2 show that paired dictionary learning and direct optimization provide the best visualization
of HOG descriptors for humans. Ridge regression and exemplar LDA performs better than the glyph, but they suffer from blurred inversions. Human performance on the
HOG glyph is generally poor, and participants were even
the slowest at completing that study. Interestingly, the glyph
does the best job at visualizing bicycles, likely due to their
unique circular gradients. Our results overall suggest that
visualizing HOG with the glyph is misleading, and richer
visualizations from our paired dictionary are useful for interpreting HOG vectors.
Our experiments suggest that humans can predict the
performance of object detectors by only looking at HOG
visualizations. Human accuracy on inversions and state-ofthe-art object detection AP scores from are correlated
(a) Human Vision
(b) HOG Vision
Figure 13: HOG inversion reveals the world that object detectors see. The left shows a man standing in a dark room.
If we compute HOG on this image and invert it, the previously dark scene behind the man emerges. Notice the wall
structure, the lamp post, and the chair in the bottom right
hand corner.
with a Spearman’s rank correlation coefﬁcient of 0.77.
We also asked computer vision PhD students at MIT to
classify HOG glyphs in order to compare MTurk workers
with experts in HOG. Our results are summarized in the
last column of Table 2. HOG experts performed slightly
better than non-experts on the glyph challenge, but experts
on glyphs did not beat non-experts on other visualizations.
This result suggests that our algorithms produce more intuitive visualizations even for object detection researchers.
5. Understanding Object Detectors
We have so far presented four algorithms to visualize object detection features. We evaluated the visualizations with
a large human study, and we found that paired dictionary
learning provides the most intuitive visualization of HOG
features. In this section, we will use this visualization to
inspect the behavior of object detection systems.
5.1. HOG Goggles
Our visualizations reveal that the world that features see
is slightly different from the world that the human eye perceives. Figure 13a shows a normal photograph of a man
standing in a dark room, but Figure 13b shows how HOG
features see the same man. Since HOG is invariant to illumination changes and ampliﬁes gradients, the background
of the scene, normally invisible to the human eye, materializes in our visualization.
In order to understand how this clutter affects object detection, we visualized the features of some of the top false
alarms from the Felzenszwalb et al. object detection system when applied to the PASCAL VOC 2007 test set.
Figure 3 shows our visualizations of the features of the top
false alarms. Notice how the false alarms look very similar to true positives. While there are many different types
of detector errors, this result suggests that these particular
failures are due to limitations of HOG, and consequently,
even if we develop better learning algorithms or use larger
datasets, these will false alarms will likely persist.
Figure 16 shows the corresponding RGB image patches
for the false positives discussed above. Notice how when
we view these detections in image space, all of the false
alarms are difﬁcult to explain. Why do chair detectors ﬁre
on buses, or people detectors on cherries? By visualizing
the detections in feature space, we discovered that the learning algorithm made reasonable failures since the features
are deceptively similar to true positives.
5.2. Human+HOG Detectors
Although HOG features are designed for machines, how
well do humans see in HOG space? If we could quantify human vision on the HOG feature space, we could get insights
into the performance of HOG with a perfect learning algorithm (people). Inspired by Parikh and Zitnick’s methodology , we conducted a large human study where we
had Amazon Mechanical Turk workers act as sliding window HOG based object detectors.
We built an online interface for humans to look at HOG
visualizations of window patches at the same resolution as
DPM. We instructed workers to either classify a HOG visualization as a positive example or a negative example for
a category. By averaging over multiple people (we used 25
people per window), we obtain a real value score for a HOG
patch. To build our dataset, we sampled top detections from
DPM on the PASCAL VOC 2007 dataset for a few categories. Our dataset consisted of around 5, 000 windows per
category and around 20% were true positives.
Figure 14 shows precision recall curves for the Human+HOG based object detector. In most cases, human
subjects classifying HOG visualizations were able to rank
sliding windows with either the same accuracy or better
than DPM. Humans tied DPM for recognizing cars, suggesting that performance may be saturated for car detection
on HOG. Humans were slightly superior to DPM for chairs,
although performance might be nearing saturation soon.
There appears to be the most potential for improvement for
detecting cats with HOG. Subjects performed slightly worst
than DPM for detecting people, but we believe this is the
case because humans tend to be good at fabricating people
in abstract drawings.
We then repeated the same experiment as above on chairs
except we instructed users to classify the original RGB
patch instead of the HOG visualization. As expected, humans achieved near perfect accuracy at detecting chairs
with RGB sliding windows.
The performance gap be-
HOG+Human AP = 0.63
RGB+Human AP = 0.96
HOG+DPM AP = 0.51
HOG+Human AP = 0.78
HOG+DPM AP = 0.58
HOG+Human AP = 0.83
HOG+DPM AP = 0.87
HOG+Human AP = 0.69
HOG+DPM AP = 0.79
Figure 14: By instructing multiple human subjects to classify the visualizations, we show performance results with an
ideal learning algorithm (i.e., humans) on the HOG feature
space. Please see text for details.
tween the Human+HOG detector and Human+RGB detector demonstrates the amount of information that HOG features discard.
Our experiments suggest that there is still some performance left to be squeezed out of HOG. However, DPM
is likely operating very close to the performance limit of
HOG. Since humans are the ideal learning agent and they
still had trouble detecting objects in HOG space, HOG may
be too lossy of a descriptor for high performance object detection. If we wish to signiﬁcantly advance the state-of-theart in recognition, we suspect focusing effort on building
better features that capture ﬁner details as well as higher
level information will lead to substantial performance improvements in object detection.
5.3. Model Visualization
We found our algorithms are also useful for visualizing
the learned models of an object detector. Figure 15 visualizes the root templates and the parts from by inverting the positive components of the learned weights. These
visualizations provide hints on which gradients the learning found discriminative. Notice the detailed structure that
emerges from our visualization that is not apparent in the
HOG glyph. In most cases, one can recognize the category
of the detector by only looking at the visualizations.
6. Conclusion
We believe visualizations can be a powerful tool for
understanding object detection systems and advancing research in computer vision. To this end, this paper presented
and evaluated four algorithms to visualize object detection
features. Since object detection researchers analyze HOG
glyphs everyday and nearly every recent object detection
Figure 15: We visualize a few deformable parts models trained with . Notice the structure that emerges with our visualization. First row: car, person, bottle, bicycle, motorbike, potted plant. Second row: train, bus, horse, television, chair. For
the right most visualizations, we also included the HOG glyph. Our visualizations tend to reveal more detail than the glyph.
Figure 16: We show the original RGB patches that correspond to the visualizations from Figure 3. We print the original
patches on a separate page to highlight how the inverses of false positives look like true positives. We recommend comparing
this ﬁgure side-by-side with Figure 3.
paper includes HOG visualizations, we hope more intuitive
visualizations will prove useful for the community.
Acknowledgments:
We thank Hamed Pirsiavash, Joseph Lim, MIT
CSAIL Vision Group, and reviewers. Funding was provided by a NSF
GRFP to CV, a Facebook fellowship to AK, and a Google research award,
ONR MURI N000141010933 and NSF Career Award No. 0747120 to AT.