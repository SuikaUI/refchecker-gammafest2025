International Journal of Computer Vision 70(2), 109–131, 2006
c⃝2006 Springer Science + Business Media, LLC. Manufactured in The Netherlands.
DOI: 10.1007/s11263-006-7934-5
Graph Cuts and Efﬁcient N-D Image Segmentation
YURI BOYKOV
Computer Science, University of Western Ontario, London, ON, Canada
 
GARETH FUNKA-LEA
Imaging & Visualization, Siemens Corp. Research, Princeton, NJ, USA
 
Received May 12, 2003; Revised April 2, 2004; Accepted April 30, 2004
Combinatorial graph cut algorithms have been successfully applied to a wide range of problems in
vision and graphics. This paper focusses on possibly the simplest application of graph-cuts: segmentation of objects
in image data. Despite its simplicity, this application epitomizes the best features of combinatorial graph cuts
methods in vision: global optima, practical efﬁciency, numerical robustness, ability to fuse a wide range of visual
cues and constraints, unrestricted topological properties of segments, and applicability to N-D problems. Graph
cuts based approaches to object extraction have also been shown to have interesting connections with earlier
segmentation methods such as snakes, geodesic active contours, and level-sets. The segmentation energies optimized
by graph cuts combine boundary regularization with region-based properties in the same fashion as Mumford-Shah
style functionals. We present motivation and detailed technical description of the basic combinatorial optimization
framework for image segmentation via s/t graph cuts. After the general concept of using binary graph cut algorithms
for object segmentation was ﬁrst proposed and tested in Boykov and Jolly , this idea was widely studied
in computer vision and graphics communities. We provide links to a large number of known extensions based
on iterative parameter re-estimation and learning, multi-scale or hierarchical approaches, narrow bands, and other
techniques for demanding photo, video, and medical applications.
Introduction
In the last 20 years the computer vision community
has produced a number of useful algorithms for localizing object boundaries in images. There are snakes
 , active contours , geodesic active contours , “shortest path” techniques and many other examples of methods for partitioning an image into two segments: “object” and
“background”. Each method comes with its own set
of features. This paper describes a novel approach to
object/background segmentation based on s-t graph
cuts.1 This technique from combinatorial optimization
has already demonstrated a great potential for solving many problems in vision and graphics2 ,
stereo , multi-view reconstruction
 , texture synthesis ). This paper presents a detailed description of the basic framework for efﬁcient object extraction from N-D image data using s/t graph
Boykov and Funka-Lea
Energy-based approaches to object extraction. Combinatorial s/t graph cut framework for object segmentation was ﬁrst proposed
in Boykov and Jolly and recently further developed in .
In particular, it was shown that graph cuts can approximate global and local optima of continuous surface functionals. The majority of current graph cut methods
for object segmentation use implicit representation of object boundaries. One notable exception is an explicit technique recently shown in
Kirsanov and Gortler .
It should be noted that our graph cut approach to
object segmentation was preceded by a number of
graph-based methods for image “clustering” that use
either combinatorial optimization algorithms or approximate
spectral analysis techniques, e.g., normalized cuts . The main goal of such methods is
a completely automatic high-level grouping of image
pixels. Typically, this means that they divide an image
into “blobs” or “clusters” using only generic cues of
coherence or afﬁnity between pixels.3 Even though we
also use a graph-based framework, our work is directly
related to a fairly different group of image segmentation methods that includes snakes , active contours , intelligent scissors , live-wire , and
many techniques based on level-sets . These methods integrate
model-speciﬁc visual cues and contextual information
in order to accurately delineate particular object(s) of
The major contribution of our work originally outlined in Boykov and Jolly is that it ﬁrst demonstrated how to use binary graph cuts to build efﬁcient
object extraction tools for N-D applications based on
a wide range of model-speciﬁc (boundary and regionbased) visual cues, contextual information, and useful
topological constraints. Relationship of our combinatorial graph cuts framework for object extraction to
previous methods is illustrated in Fig. 1. Interestingly,
graph cuts framework uses implicit representation of
object boundaries which makes them a discrete counterpart of level-sets. Relationship with level-sets is further studied in Boykov et al. .
The effectiveness of formulating the object segmentation problem via binary graph cuts is also demonstrated by a large number of recent publications in
computer vision and graphics that directly build upon
the basic concept outlined in Boykov and Jolly .
They extended our segmentation technique in a number
of interesting directions: geometric cues 
(geo-cuts), regional cues based on Gaussian mixture
models for improved interactivity (grab-cuts), using superpixels (lazy snapping), integrating
high-level contextual information 
(obj-cuts), multi-level and banded methods ,
binary segmentation using stereo cues , efﬁcient algorithms for dynamic applications 
(ﬂow- and cut-recycling), extraction of moving or forground objects from video , simultaneous segmentation of multiple objects
 , combining segmentation with 3D pose
Graph Cuts and Efﬁcient N-D Image Segmentation
estimation , computing segmentation
uncertainty , and methods for
solving surface evolution PDEs .
Previous Object Segmentation Methods
There are many methods for object/background segmentation that predate graph cuts. The simplest techniques, such as region growing or split-and-merge ), do not incorporate a clear cost function and are largely based
on ad-hoc ideas. Unfortunately, these simple methods
are not robust in practice. They are prone to many
problems, most notably, to “leaking” through weak
spots in object boundaries. Such weak spots can be
found in practically any real image. Despite signiﬁcant
problems, methods like “region growing” and “thresholding” are still the most widely known image segmentation techniques. This can be explained by their
simplicity and speed. For example, they could be easily run on personal computers available even 15–20
years ago. Currently available PCs allow much more
robust segmentation algorithms, most of which rely on
optimizing some form of energy function.
Energy Based Object Segmentation.
Energy-based
segmentation methods can be distinguished by the type
of energy function they use and by the optimization
technique for minimizing it. The majority of standard
algorithms can be divided into two large groups:
(A) Optimization of a functional deﬁned on a continuous contour or surface
(B) Optimization of a cost function deﬁned on a discrete set of variables
The standard methods in group A formulate segmentation problem in the domain of continuous functions
R∞. Most of them rely on a variational approach and
gradient descent for optimization. The corresponding
numerical techniques are based on ﬁnite differences or
on ﬁnite elements. The segmentation methods in group
B either directly formulate the problem as combinatorial optimization in ﬁnite dimensional space Zn or optimize some discrete energy function whose minima approximates solution of some continuous problem. ExamplesofmethodsingroupsAandBaregiveninFig.1.
The methods in group (A) include snakes , region competition , geodesic active contours , and other methods based on level-sets . Typically, continuous surface
functionals incorporate various “regional” and “boundary” properties of segments some of which can be geometrically motivated . In most cases, methods in group (A)
use variational optimization techniques that can guarantee to ﬁnd only a local minima of the corresponding
energy functional.
Our new graph cut approach to object extraction
belongs to group B. Most of the discrete optimization
methods for object segmentation minimize an energy
deﬁned over a ﬁnite set of integer-valued variables.4
Such variables are usually associated with graph nodes
corresponding to image pixels or control points. To
the best of our knowledge, all previous combinatorial
methods for object segmentation use discrete variables
whose values encode “direction” of a path along
the graph. Many path-based methods use Dynamic
Programming (DP) to compute optimal paths. For
example, (intelligent
scissors ) and (live-wire) use
Dijkstra algorithm while (DPsnakes) use Viterbi algorithm. Note that all path-based
methods can naturally encode boundary-based segmentation cues while the incorporation of region
properties in segments is less obvious . In any case, all pathbased methods are limited to 2D applications because
object boundary in 3D volumes can not be represented
by a path.
Global vs. Local Optimization.
Before the s/t graph
cuts approach for object segmentation was ﬁrst presented in Boykov and Jolly , computing a global
optima was possible only for some 2D object segmentation methods. In general, global solutions are attractive because of their potentially better stability. For
example, imperfections in a globally optimal solution
are guaranteed to directly relate to the cost function
rather than to a numerical problem during minimization. Thus, global methods can be more reliable and
robust. Some versions of active contours , shortest path algorithms , ratio regions
 , and some other segmentation methods compute a globally
optimal solution in 2D applications when a segmentation boundary is a 1D curve. To the best of our
Boykov and Funka-Lea
knowledge, none of the previous “global” techniques
generalize to 3D segmentation problems leaving that
domain for variational techniques and for all kinds of
ad-hoc approximation methods (e.g. extrapolating segments from slice to slice).
Our s/t graph cuts framework offers a globally optimal object extraction method for N-dimensional images. We describe a fairly general cost function that can
include both region and boundary properties of segments and certain types of topological constrains that
naturally ﬁt into our global optimization framework.
Recent developments of the graph cuts methods for
image segmentation have somewhat blurred the differences between continuous methods (A) that use
variational techniques for local optimization and discrete combinatorial methods (B). For example, graph
cut approaches have inspired some global optimization techniques for continuous problems and a new class of local optimization techniques
 .
Why Graph Cuts?
The main technical novelty of the object extraction approach presented in this paper is that we formulate segmentation energy over binary variables whose values
only indicate whether the pixel is inside or outside the
object of interest. In contrast to the earlier “path-based”
combinatorial methods (see Sec. 1.1), this can be seen
as a “region-based” approach to encoding image segments. In fact, the difference between path-based and
region-based representations of segments on a discrete
graph is analogous to the difference between explicit
contour representation, e.g. snakes, and the implicit
level-sets approach (see Fig. 1).
Robust and Efﬁcient Optimization in N-D.
Numerically, our image segmentation framework relies on
powerful graph cut algorithms from combinatorial
optimization .
We start with a discrete energy formulation and directly solve it with an exact graph-based optimization
In contrast, variational methods inherently rely on
approximating numerical schemes (e.g. ﬁnite differences or ﬁnite elements) that must be very carefully
designed to insure robustness. Convergence of such
numerical methods is an important and non-trivial issue
that has to be carefully addressed. Segmentation results
generated by two variational techniques using the same
energy may depend on their implementation details. In
contrast, the discrete optimization approach advocated
in this paper is very straightforward and robust numerically. It is also repeatable. Assuming the same energy
function, one would always get identical segments even
though one can choose from a number of different combinatorial min-cut/max-ﬂow algorithms for computing
minimum s-t cuts on graphs studied
the practical efﬁciency of combinatorial min-cut/max-
ﬂow algorithms on applications in computer vision. It
was shown that some max-ﬂow techniques could solve
2D and 3D segmentation problems in close to realtime using regular PCs. Further signiﬁcant acceleration
was demonstrated for dynamic segmentation problems
using ﬂow-recycling and cutrecycling .5 Some versions
of max-ﬂow/min-cut algorithms can be run on parallel
processors . Parallel implementations are also possible on Graphics Processing Units.6 While straightforward implementation of
graph cuts may require a lot of memory for 3D applications, recent results in Lombaert et al. showed
that multi-level and banded techniques can alleviate the
Segmentation
Figure 2 demonstrates two simple examples of object
segmentation via graph cuts and Example (b) shows
that graph cuts include image thresholding as a trivial
special case. Another special case in (a) shows that,
in 2D applications, graph cuts are dual to shortest
path methods like intelligent scissors and live-wire . These
techniques ﬁnd the cheapest subset of edges (a path)
that connects two seeds placed on the desired object
boundary. In contrast, graph cuts ﬁnd the cheapest
subset of edges (a cut) that separates seeds marking the
inside of the object and background regions. It is easy
to show that on planar graphs the two algorithms solve
two equivalent problems formulated on dual graphs.
Unlike intelligent scissors or live-wire, however,
graph cuts can naturally integrate any regional bias
in addition to boundary cues and they extend to N-D
segmentation problems.
Graph Cuts and Efﬁcient N-D Image Segmentation
Two basic examples of object extraction via s/t graph cuts. Image pixels form a 2D grid graph. In (a) all neighboring pixels are
connected by edges, n-links, whose capacities depend on intensity differences |Ip −Iq|. The seeds, circles, are also connected by edges, t-links, to
the terminals (source and sink). If t-links are expensive enough, the seeds are hardwired to the terminals thereby providing topological constraints
for segmentation. Max-ﬂow algorithms gradually increase the ﬂow of “water” from
source s to sink t along the edges (pipes) until enough edges get saturated to form a boundary (cut) separating the terminals. Typically, the
bottlenecks are cheap n-links between pixels caused by high intensity differences. While example (a) mostly relies on boundary-based cues
encoded by n-links, (b) shows an extreme opposite case of graph cut segmentation using only t-links. In general, t-links encode region-based
cues. Assuming that all n-links have zero capacity and each pixel p is connected to both terminals via t-links with capacities |Ip −A| and
|Ip −B| then s/t graph cuts will generate a segmentation, shown in red/blue in (b), equivalent to thresholding the image around intensity level
. One of the main strengths of our graph cut approach to segmentation is that it can combine boundary cues, regional cues, and topological
constraints in a uniﬁed global optimization framework.
Implementations of graph cuts using push-relabel
 and algorithms based on
pseudo-ﬂows can show a sequence of cuts as they converge to
the global optima. The corresponding image segmentation has dynamics that may resemble methods like regiongrowingandsplit-and-merge.Ofcourse,themajor
difference is that the principles built into combinatorial algorithms for graph cuts guarantee convergence
to the exact minima of a clearly deﬁned global energy
Recent results in connect graph cuts to a very popular geometric
approach to image segmentation, geodesic active contours . For example, demonstrated that geometric artifacts previously attributed to discrete segmentation methods can be avoided. They show that discrete cut metrics on a grid can approximate any continuous Riemannian metric. Then, obtained a complete geometric characterization of continuous surface functionals that graph
cut methods can approximate. The result is derived
from submodularity of discrete energies that network ﬂow algorithms can minimize exactly.
More recently, showed a very
strong connection between graph cuts and level-sets
 . In particular, developed a novel integral approach to solving surface propagation PDEs based on combinatorial
graph cuts algorithms. Such PDEs arise when computing gradient ﬂow evolution of active contours which
are very widely used in computer vision and medical
image analysis. The results in Boykov et al. 
suggest that combinatorial graph cuts algorithms can
be used as a robust numerical method for an important class of variational problems that was previously
addressed mainly with level-sets.
Integrating Regions, Boundary, and Shape.
cuts optimize discrete energies that combine boundary regularization with regularization of regional properties of segments in the same style as continuous Mumford-Shah functionals .7 This work describes in details how to incorporate the most basic types of visual cues into the binary graph cut framework for object extraction. Such
Boykov and Funka-Lea
model-speciﬁc visual cues allow “ﬁne” localization of
the desired object boundaries.
We show that the regional bias can encode any desirable intensity distributions of the object and/or background while the most typical boundary cue is based
on the intensity differences between neighboring pixels. Boundary cues based on intensity differences are
fairly standard for many applications of graph cuts.
For example, this is how static cues were encoded for
stereo in Boykov et al. . This is also a typical
generic cue widely used in image “clustering” . In general, graph cuts allow more general
“directed” n-links. We demonstrate that modelspeciﬁc directed n-links avoid some segmentation
artifacts.
Note that a number of papers that followed our original publication in Boykov and Jolly further
developed object segmentation cues that graph cuts
can encode. For example, showed that nlinks can be used to encode geometric functionals such
as length/area and ﬂux. Consequently, graph cut segmentation methods can use geometrically motivated
cues ﬁrst introduced by geodesic active contour models
 . For example, incorporating ﬂux
can improve edge alignment and greatly
helps to segment thin objects.
A number of recent publications also further developed the use of regional cues. Blake et al. 
suggested to use a Gaussian Mixture (GM) model to
approximate the regional properties of segments. As
demonstrated by grab-cuts , iterative re-estimation of GM intensity models of the object and background help to signiﬁcantly improve segmentation of colored photographs. A very innovative
use of regional cues from stereo was demonstrated for
foreground-background segmentation in Kolmogorov
et al. .
Binary graph cuts can also integrate some global
shape priors. In the simplest case, one can incorporate
a regional bias based on values of a signed distance
map function representing some shape. The same basic idea is widely used in level-sets, e.g. . Another comparable technique
for incorporating shape priors into graph cuts uses ﬂux
 . The results in
Boykov et al. show that a regional bias based
on a signed distance map penalizes deviation between
the segment and the prior shape according to L2 distance in the space of contours. Other metrics can be
approximated as well. Boykov et al. use graph
cuts to compute a gradient ﬂow evolution of a surface
by adding an L2 shape-penalty for a drift from its current position. This additional “current-shape” penalty
works as a “breaker” that does not allow the graph cuts
to jump too far from the current solution. This iterative
graph cut technique can generate gradual motion of a
surface consistent with continuous gradient ﬂow PDEs
 .
Integrating Topological Constraints.
Our graph cut
framework for segmentation is based on an implicit
representation of object boundaries. Thus, it allows
the same ﬂexible topological properties of segments
as in level-sets techniques. Our segmentation results may have isolated “objects” which may also
contain holes. However, it may be useful to impose some topological constraints reﬂecting certain
high-level contextual information about the object of
Graph cuts can incorporate some types of topological constraints. For example, the hard constraints can
indicate some image pixels a priori known to be a part
of the object or background. We show that topological constraints can be used to reduce the search space
of feasible segmentations. Our algorithm also allows
very efﬁcient editing of segmentation results, if necessary. The optimal segmentation can be efﬁciently recomputed if some hard constraints (seeds) are added or
removed. Our algorithm efﬁciently adjusts the current
segmentation without recomputing the whole solution
from scratch.
Region-based topological constraints naturally ﬁt
into graph cuts.8 These constraints correspond to an
inﬁnite cost regional bias that guarantees that some
given subsets of pixels should be inside or outside of
the object, as shown in Fig. 2(a). Such constraints can
restrict the search space for the object of interest in the
image.BoykovandVeksler discussessomenonregional topological constraints that potentially could
be used in the graph cut algorithms for object extraction.
Notethatintelligentscissors andlivewire useaboundarybased hard constraints where the user can indicate certain pixels where the segmentation boundary should
Graph Cuts and Efﬁcient N-D Image Segmentation
pass. The segmentation boundary is then computed as
the “shortest path” between the marked pixels according to some energy function based on image gradient.
One difﬁculty with such hard constraints is that the user
inputs have to be very accurately positioned at the desired boundary. In contrast, regional hard constraints
for graph cuts do not have to be precisely positioned.
Moving the seeds around the object of interest (within
some limits) does not typically change the segmentation results.
Relation to Markov Random Fields.
Our segmentation method is based on s-t graph cut algorithm. Greig
et al. were the ﬁrst to discover that powerful
graph cut algorithms from combinatorial optimization
can be useful for computer vision problems. In particular, they showed that graph cuts can be used for restoration of binary images.9 The problem was formulated as
Maximum A Posterior estimation of a Markov Random
Field (MAP-MRF) that required minimization of posterior energy
ln Pr(Ip|I o) +
if Ip ̸= Iq
if Ip = Iq.
is a Kronecker delta representing interaction potential,
I = {Ip|p ∈P} is an unknown vector of original
binary intensities Ip ∈{0, 1} of image pixels P, vector
I o represents observed binary intensities corrupted by
noise, and N is a set of all pairs of neighboring pixels.
Greig et al. constructed a two terminal graph such
that the minimum cost cut of the graph gives a globally
optimalbinaryvector I.Previously,exactminimization
of energies like (1) was not possible and such energies
were approached mainly with iterative algorithms like
simulated annealing. In fact, Greig et al. used their results mainly to show that in practice simulated annealing reaches solutions very far from the global minimum
even in very simple binary image restoration examples.
Unfortunately, the graph cut technique in Greig et al.
remainedunnoticedforalmost10yearsmainlybecause
binary image restoration looked very limited as an
application. In the late 90’s new computer vision techniques appeared that showed how to use s-t cut algorithm on graphs for more interesting non-binary problems. Roy and Cox was the ﬁrst to use graph
cuts to compute multi-camera stereo. Later, showed that
with the right edge weights on a graph similar to one can minimize a non-binary case
of (1) with linear interaction penalties. This graph construction was further generalized to handle arbitrary
convex interactions in Ishikawa . Another general case of multi-label energies where the interaction
penalty is a metric (on the space of labels) was studied in . Their α-expansion
algorithm ﬁnds provably good approximate solutions
by iteratively running min-cut/max-ﬂow algorithms on
appropriate graphs. The case of metric interactions includes many kinds of “robust” cliques that are frequently used in practice. Later it was shown that αexpansion technique can be also used for non-metric
interactions, often loosing optimality guarantees .
In this paper we consider a binary segmentation
problem where a given object has to be accurately
separated from its background. One of our insights
is that such a problem can be formulated as a binary (object/background) labeling problem with energy similar to (1). Indeed, binary image restoration
energy (1) contains two terms representing “regional”
and “boundary” properties. Such a combination looks
very appropriate for an object segmentation method.
Moreover, a binary energy like (1) can be minimized
exactly even in N-dimensional cases using standard st graph cut algorithms. Technically, our basic method
uses a graph construction similar to .
Our main contribution is that our work ﬁrst demonstrated that global optimization of discrete energy like
(1) can be effectively used for accurate object extraction from N-D images and showed how (1) can integrate segmentation cues previously used in snakes and
in implict active contour models (e.g. level-sets).
Optimal Object Segmentation via Graph Cuts
In this section we describe our object segmentation
framework in detail. Section 2.1 presents our basic ideas relating graph cuts and binary segmentation. Minimal background on s-t cuts from graph
theory is provided. Section 2.2 formulates our segmentation technique in terms of energy minimization. Our cost function serves as a soft constraint on
regional and boundary properties of segments. The
synergy of regional and boundary properties is discussed in Section 2.3. In Section 2.4 we introduce hard
Boykov and Funka-Lea
A simple 2D segmentation example for a 3 × 3 image. The seeds are O = {v} and B = {p}. The cost of each edge is reﬂected
by the edge’s thickness. The boundary term (4) deﬁnes the costs of n-links while the regional term (3) deﬁnes the costs of t-links. Inexpensive
edges are attractive choices for the minimum cost cut. Hard constraints (seeds) (8,9) are implemented via inﬁnity cost t-links. A globally optimal
segmentation satisfying hard constraints can be computed efﬁciently in low-order polynomial time using max-ﬂow/min-cut algorithms on graphs
 .
constraints and show how they can be used to restrict
the search space of feasible solutions. Section 2.5 provides implementational details and formally shows that
a minimum cost s-t cut on an appropriately constructed
graphcorrespondstoagloballyoptimalsolutionamong
all binary segmentations satisfying a given set of hard
constraints. Section 2.6 shows an efﬁcient solution for
recomputing optimal segments when hard constraints
are changed. This feature of our method is very useful for fast object editing, especially in 3D applications. Generalization to directed graphs is discussed in
Section 2.7. In some cases directed edges can signiﬁcantly improve segmentation results.
Basic Ideas and Background Information
First, we will introduce some terminology. A graph
G = ⟨V, E⟩is deﬁned as a set of nodes or vertices V
and a set of edges E connecting “neighboring” nodes.
For simplicity, we mainly concentrate on undirected
graphs where each pair of connected nodes is described
by a single edge e = {p, q} ∈E.10 A simple 2D example of an undirected graph that can be used for image
segmentation is shown in Fig. 3(b).
The nodes of our graphs represent image pixels or
voxels. There are also two specially designated terminal nodes S (source) and T (sink) that represent “object” and “background” labels. Typically, neighboring
pixels are interconnected by edges in a regular grid-like
fashion. Edges between pixels are called n-links where
n stands for “neighbor”. Note that a neighborhood system can be arbitrary and may include diagonal or any
other kind of n-links. Another type of edges, called tlinks, are used to connect pixels to terminals. All graph
edges e ∈E including n-links and t-links are assigned
some nonnegative weight (cost) we. In Fig. 3(b) edge
costs are shown by the thickness of edges.
An s-t cut is a subset of edges C ⊂E such that
the terminals S and T become completely separated on
the induced graph G(C) = ⟨V, E\C⟩. Note that a cut
Graph Cuts and Efﬁcient N-D Image Segmentation
(see Fig. 3(c)) divides the nodes between the terminals.
As illustrated in Fig. 3 (c-d), any cut corresponds to
some binary partitioning of an underlying image into
“object” and “background” segments. Note that in the
simplistic example of Fig. 3 the image is divided into
one “object” and one “background” regions. In general,
cuts can generate binary segmentation with arbitrary
topological properties. Examples in Section 3 illustrate
that object and background segments may consist of
several isolated connected blobs that also may have
Our goal is to compute the best cut that would give an
“optimal” segmentation. In combinatorial optimization
the cost of a cut is deﬁned as the sum of the costs of
edges that it severs
Note that severed n-links are located at the segmentation boundary. Thus, their total cost represents the
cost of segmentation boundary. On the other hand, severed t-links can represent the regional properties of segments. Thus, a minimum cost cut may correspond to
a segmentation with a desirable balance of boundary
and regional properties. In Section 2.2 we formulate a
precise segmentation energy function that can be encoded via n-links and t-links. Note that inﬁnity cost
t-links make it possible to impose hard constraints on
Numerically, our technique is based on a well-known
combinatorial optimization fact that a globally minimum s-t cut can be computed efﬁciently in low-order
polynomial time .Thecorresponding
algorithms work on any graphs. Therefore, our graph
cut segmentation method is not restricted to 2D images and computes globally optimal segmentation on
volumes of any dimensions. In Section 3 we show a
number of 3D examples.
Note that a fast implementation of graph cut algorithms can be an issue in practice. The most straightforward implementations of the standard graph cut algorithms, e.g. max-ﬂow or
push-relabel , can be slow.
The experiments in Boykov and Kolmogorov 
compare several well-known “tuned” versions of these
standard algorithms in the context of graph based methods in vision. The same paper also describes a new
version of the max-ﬂow algorithm that (on typical vision examples) signiﬁcantly outperformed the standard
techniques. Our implementation of the segmentation
method of this paper uses the new graph cut algorithm
from .
Segmentation Energy
Consider an arbitrary set of data elements (pixels or
voxels) P and some neighborhood system represented
by a set N of all (unordered) pairs {p, q} of neighboring elements in P. For example, P can contain pixels
(or voxels) in a 2D (or 3D) grid and N can contain
all unordered pairs of neighboring pixels (voxels) under a standard 8- (or 26-) neighborhood system. Let
A = (A1, . . . , Ap, . . . , A|P|) be a binary vector whose
components Ap specify assignments to pixels p in P.
Each Ap can be either “obj” or “bkg” (abbreviations of
“object” and “background”). Vector A deﬁnes a segmentation. Then, the soft constraints that we impose
on boundary and region properties of A are described
by the cost function
E(A) = λ · R(A) + B(A)
(regional term)
Bp,q · δAp̸=Aq
(boundary term)
if Ap ̸= Aq
if Ap = Aq.
The coefﬁcient λ ≥0 in (2) speciﬁes a relative importance of the region properties term R(A) versus
the boundary properties term B(A). The regional term
R(A) assumes that the individual penalties for assigning pixel p to “object” and “background”, correspondingly Rp(“obj”) and Rp(“bkg”), are given. For example, Rp(·) may reﬂect on how the intensity of pixel p
ﬁts into given intensity models (e.g. histograms) of the
object and background
Rp(“obj”) = −ln Pr(Ip|“obj”)
Rp(“bkg”) = −ln Pr(Ip|“bkg”)
This use of negative log-likelihoods is motivated by the
MAP-MRF formulations in .
Boykov and Funka-Lea
Synthetic Gestalt example. The optimal object segment (red tinted area in (c)) ﬁnds a balance between “region” and “boundary”
terms in (2). The solution is computed using graph cuts as explained in Section 2.5. Some ruggedness of the segmentation boundary is due
to metrication artifacts that can be realized by graph cuts in textureless regions. Such artifacts can be eliminated using results in Boykov and
Kolmogorov .
The term B(A) comprises the “boundary” properties of segmentation A. Coefﬁcient Bp,q ≥0 should be
interpreted as a penalty for a discontinuity between p
and q. Normally, Bp,q is large when pixels p and q are
similar (e.g. in their intensity) and Bp,q is close to zero
when the two are very different. The penalty Bp,q can
also decrease as a function of distance between p and
q. Costs Bp,q may be based on local intensity gradient,
Laplacian zero-crossing, gradient direction, geometric or other criteria. Often, it is sufﬁcient to
set the boundary penalties from a simple function like
−(Ip −Iq)2
dist(p, q).
This function penalizes a lot for discontinuities between pixels of similar intensities when |Ip −Iq| < σ.
However, if pixels are very different, |Ip −Iq| > σ,
then the penalty is small. Intuitively, this function corresponds to the distribution of noise among neighboring pixels of an image. Thus, σ can be estimated as
“camera noise”.
“Region” vs. “Boundary”
A simple example of Fig. 4 illustrates some interesting
propertiesofourcostfunction(2).Theobjectofinterest
is a cluster of black dots in Fig. 4(a) that we would like
to segment as one blob. We combine boundary and
region terms (3,4) taking λ > 0 in (2). The penalty for
discontinuity in the boundary cost is
if Ip = Iq
if Ip ̸= Iq
To describe regional properties of segments we use a
priori known intensity histograms (Fig. 4(b)). Note that
the background histogram concentrates exclusively on
bright values while the object allows dark intensities
observed in the dots. If these histograms are used
in (5,6) then we get the following regional penalties
Rp(Ap) for pixels of different intensities.
The optimal segmentation in Fig. 4(c) ﬁnds a balance between the regional and the boundary term of
energy (2). Individually, bright pixels slightly prefer to
stay with the background (see table above). However,
spatial coherence term (4) forces some of them to agree
with nearby dark dots which have a strong bias towards
the object label (see table).
Hard Constraints
In the simple example of Fig. 4 the regional properties
of the object of interest are distinct enough to segment
it from the background. In real examples, however,
Graph Cuts and Efﬁcient N-D Image Segmentation
Automatic segmentation of cardiac MR data. Initialization in (b) is based on hard constraints that can be placed automatically using
simple template matching. Then, graph cuts accurately localize object boundaries in (c).
objects may not have sufﬁciently distinct regional properties. In such cases it becomes necessary to further
constraint the search space of possible solutions before computing an optimal one. We propose topological (hard) constraints as an important source of “high
level” contextual information about the object of interest in real images.
Assume that O and B denote the subsets of pixels a
priori known to be a part of “object” and “background”,
correspondingly. Naturally, the subsets O ⊂P and
B ⊂P are such that O∩B = ∅. For example, consider
sets O (red pixels) and B (blue pixels) in Fig. 5(b). Our
goal is to compute the global minimum of (2) among
all segmentations A satisfying hard constraints
Ap = “obj”
Ap = “bkg”.
Figure 5(c) shows an example of an optimal segmentation satisfying the hard constraints in (b). Throughout
this paper we use red tint to display object segments
and blue tint for background.
Ability to incorporate hard constraints (8,9) is one
of the most interesting features of our segmentation
method. There is a lot of ﬂexibility in how these hard
constraints can be used to adjust the algorithm for different tasks. The hard constraints can be used to initialize the algorithm and to edit the results. The hard
constraints can be set either automatically or manually depending on an application. Manually controlled
seeds is the most likely way to enter hard constraints
in many generic applications, e.g. photo-editing shop.
Manual seeds are also useful for editing segments (see
Section 2.6) when initial segmentation results require
corrections. On the other hand, automatically set hard
constraints can be used to initialize the algorithm in
highly specialized applications such as organ segmentation from medical images or volumes.
For example, consider a medical application where
one should segment the blood pool of a left ventricle
(one of the heart chambers) captured in an MR image
of Fig. 5(a). A simple template matching can roughly
localize the left ventricle in the image, e.g. using its
known circular shape. The hard constraints in Fig. 5(b)
can be set automatically as soon as a rough position of
the blood pool is known. Then, our graph cut technique
can accurately localize the boundary of the blood pool
in Fig. 5(c).
Note that the hard constraints in Fig. 5 restrict the set
of feasible cuts to closed contours in a band between
the blue and red seeds. It is possible to show that the
minimum cost cut in that band can be interpreted as
the shortest length path on a “dual” graph. In fact, our
graph cut approach can be seen as a generalization of
path-based segmentation techniques in .
These methods are intrinsically 2D while our graph cut
approach can compute optimal segmentation boundary
for N-dimensional cases as well.
The band in Fig. 5 also restricts the area where the
actual computation takes place. It is enough to build a
Boykov and Funka-Lea
Editing segments by adding hard constraints (seeds). A fragment of an original photo is shown in (a). Initial seeds and segmentation
are shown in (b). The results in (c,d,e) illustrate changes in optimal segmentation as new hard constraint are successively added. The computation
time for consecutive corrections in (c,d,e) is marginal compared to time for initial results in (b).
graph only in the area of the band since max-ﬂow/mincut algorithms would not access any other nodes.
An example in Fig. 6 further illustrates how hard
constraints (8,9) affect the search space of feasible solutions. Naturally, adding hard constraints helps to segment desirable object as unacceptable solutions are discarded and the search space reduces. Hard constraints
placed in one 2D slice may be enough to properly constrain the search space of segmentations in a 3D volume, e.g. in Fig. 10.
Note that in a practical implementation of our
method it is possible to make a double use of the seeds.
First of all, they can constrain the search space as discussed above. In addition, we can use intensities of
pixels (voxels) marked as seeds to learn the histograms
for “object” and “background” intensity distributions:
Pr(I|“obj”) and Pr(I|“bkg”) in (5,6). Other ideas for
initializing intensity distributions are studies in .
Optimal Solution Via Graph Cuts
In this section we provide algorithmic details about
our segmentation technique. The general work-ﬂow is
shown in Fig. 3. We describe the details of the corresponding graph construction and prove that the minimum cost cut gives an optimal segmentation for energy
(2) and hard constraints (8,9).
To segment a given image we create a graph G =
⟨V, E⟩with nodes corresponding to pixels p ∈P of
the image. There are two additional nodes: an “object”
terminal (a source S) and a “background” terminal (a
sink T ). Therefore,
V = P ∪{S, T }.
The set of edges E consists of two types of undirected edges: n-links (neighborhood links) and t-links
(terminal links). Each pixel p has two t-links {p, S}
and {p, T } connecting it to each terminal. Each pair
of neighboring pixels {p, q} in N is connected by an
n-link. Without any ambiguity, an n-link connecting a
pair of neighbors p and q is also denoted by {p, q}.
Therefore,
{{p, S}, {p, T }}.
The following table gives weights of edges in E
weight (cost)
λ · Rp(“bkg”)
p ∈P, p ̸∈O ∪B
λ · Rp(“obj”)
p ∈P, p ̸∈O ∪B
K = 1 + max
q: {p,q}∈N
The graph G is now completely deﬁned. We draw
the segmentation boundary between the object and the
background by ﬁnding the minimum cost cut on the
graph G. The minimum cost cut ˆC on G can be computed exactly in polynomial time via algorithms for
two terminal graph cuts (see Section 2.1) assuming that
the edge weights speciﬁed in the table above are nonnegative.11
Graph Cuts and Efﬁcient N-D Image Segmentation
Below we state exactly how the minimum cut ˆC de-
ﬁnes a segmentation ˆA and prove this segmentation is
optimal. We need one technical lemma. Assume that
F denotes a set of all feasible cuts C on graph G such
• C severs exactly one t-link at each p
• {p, q} ∈C iff p and q are t-linked to different terminals
• if p ∈O then {p, T } ∈C
• if p ∈B then {p, S} ∈C.
The minimum cut on G is feasible, i.e.
ˆC severs at least one t-link at each pixel since
it is a cut that separates the terminals. On the other hand,
it can not sever both t-links. In such a case it would not
be minimal since one of the t-links could be returned.
Similarly, a minimum cut should sever an n-link {p, q}
if p and q are connected to the opposite terminals just
because any cut must separate the terminals. If p and q
are connected to the same terminal then ˆC should not
sever unnecessary n-link {p, q} due to its minimality.
The last two properties are true for ˆC because the constant K is larger than the sum of all n-links costs for
any given pixel p. For example, if p ∈O and ˆC severs
{p, S} (costs K) then we would construct a smaller cost
cut by restoring {p, S} and severing all n-links from p
(costs less then K) as well as the opposite t-link {p, T }
(zero cost).
For any feasible cut C ∈F we can deﬁne a unique
corresponding segmentation A(C) such that
if {p, T } ∈C
“bkg”, if {p, S} ∈C.
The deﬁnition above is coherent since any feasible cut
severs exactly one of the two t-links at each pixel p.
The lemma showed that a minimum cut ˆC is feasible.
Thus, we can deﬁne a corresponding segmentation ˆA =
A( ˆC). The next theorem completes the description of
our algorithm.
Theorem 1.
The segmentation ˆA = A( ˆC) deﬁned by
the minimum cut ˆC as in (10) minimizes (2) among all
segmentations satisfying constraints (8, 9).
Using the table of edge weights, deﬁnition of
feasible cuts F, and Eq. (10) one can show that a cost
of any C ∈F is
λ · Rp(Ap(C)) +
Bp,q · δAp(C)̸=Aq(C)
= E(A(C)) −
λ · Rp(“obj”) −
λ · Rp(“bkg”).
Therefore, |C| = E(A(C)) −const. Note that for any
C ∈F assignment A(C) satisﬁes constraints (8,9).
In fact, Eq. (10) gives a one-to-one correspondence
between the set of all feasible cuts in F and the set H
of all assignments A that satisfy hard constraints (8,9).
E( ˆA) = | ˆC| + const = min
C∈F |C| + const
C∈F E(A(C)) = min
and the theorem is proved.
Fast Editing of Segments
In practice, no segmentation algorithm can guarantee
100% accuracy. Thus, it is convenient to have a simple
way to correct segments if necessary. Within our framework segment editing can be done by placing additional
hard constraints (seeds) in incorrectly segmented image areas.12 Figure 6 shows one example of editing in
a photo-shop context.
In fact, our technique can efﬁciently recompute a
new globally optimal solution that satisﬁes additional
constraints by adjusting a current segmentation. This
“fast editing” feature is very useful in practical applications. In particular, this is very important for fast
editing of objects in 3D cases. Indeed, initial segmentation may take 5-30 seconds or more depending on
volume size. Corrections, however, can be computed
within a second.
Below we describe an efﬁcient method to recompute
an optimal solution when hard constraints are changed.
We assume that a max-ﬂow algorithm ) is used to determine the minimum cut on G. The max-ﬂow algorithm
gradually increases the ﬂow sent from the source S to
the sink T along the edges in G given their capacities
(weights). Upon termination the maximum ﬂow saturates the graph. The saturated edges correspond to the
minimum cost cut on G giving us an optimal segmentation.
Boykov and Funka-Lea
Segmentation via cuts on a directed graph. Compare the results on an undirected graph (c) with the results on a directed graph in (d).
Assume now that an optimal segmentation is already
computed for some initial set of seeds. A user adds a
new “object” seed to pixel p that was not previously
assigned any seed. We need to change the costs for two
t-links at p
initial cost
λRp(“bkg”)
λRp(“obj”)
andthencomputethemaximumﬂow(minimumcut)on
the new graph. In fact, we can start from the ﬂow found
at the end of initial computation. The only problem is
that reassignment of edge weights as above reduces
capacities of some edges. If there is a ﬂow through
such an edge then we may break the ﬂow consistency.
Increasing an edge capacity, on the other hand, is never
a problem. Then, we can solve the problem as follows.
To accommodate the new “object” seed at pixel p
we increase the t-links weights according to the table
initial cost
λRp(“bkg”)
K + λRp(“obj”)
λRp(“obj”)
λRp(“bkg”)
These new costs are consistent with the edge weight
table for pixels in O since the extra constant cp at both
t-links of a pixel does not change the optimal cut.13
Then, a maximum ﬂow (minimum cut) on a new graph
can be efﬁciently obtained starting from the previous ﬂow without recomputing the whole solution from
Note that the same trick can be done to adjust the
segmentation when a new “background” seed is added
or when a seed is deleted. One has to ﬁgure the right
amounts that have to be added to the costs of two
t-links at the corresponding pixel. The new costs should
be consistent with the edge weight table plus or minus
the same constant.
Using Directed Edges
For simplicity, we previously concentrated on the case
of undirected graphs as in Fig. 3. In fact, the majority
of s-t cut algorithms from combinatorial optimization
can be applied to directed graphs as well. Figure 7(a)
gives one example of such a graph where each pair of
neighboring nodes is connected by two directed edges
(p, q) and (q, p) with distinctweights w(p,q) and w(q,p).
If a cut separates two neighboring nodes p and q so that
p is connected to the source while q is connected to the
sink then the cost of the cut includes w(p,q) while w(q,p)
is ignored. Vise versa, if q is connected to the source
and p to the sink then the cost of the cut includes only
In certain cases one can take advantage of such directed costs to obtain more accurate object boundaries.
For example, compare two segmentations in Fig. 7(c,d)
obtained on a medical image in (b) using the same set
of constraints. A relatively bright object of interest on
the right (liver) is separated from a small bright blob on
Graph Cuts and Efﬁcient N-D Image Segmentation
the left (bone) by a thin layer of a relatively dark muscle
tissue. The contrast between the bone and the muscle is
much better then the contrast between the muscle and
the liver. Thus, according to (7) the standard “undirected” cost of edges between the bone and the muscle
is much cheaper than the cost of edges between the
muscle and the liver. Consequently, an optimal cut on
an undirected graph produces segmentation in Fig. 7(c)
that sticks to the bone instead of following the actual
liver boundary. Correcting this error may require segment editing as in Section 2.6.
Alternatively, directed graphs can automatically distinguish between the incorrect boundary in Fig. 7(c)
and the desirable one in (d). The key observation is
that the weights of directed edges (p, q) can depend
on a sign of intensity difference (Iq −Iq). In contrast,
weights of undirected edges should be symmetric with
respect to its end points and could depend only on the
absolute value |Ip −Iq| as in (7). Note that the object
boundary that stuck to the bone in (c) separates darker
tissue (muscle) in the object segment from brighter tissue (bone) in the background. On the other hand, the
correct object boundary in (d) goes from brighter tissue (liver) in the object to darker tissue (muscle) in the
background. Note that directed edge weights
−(Ip −Iq)2
if Ip > Iq
would speciﬁcally encourage cuts from brighter tissue
in the object to darker tissue in the background. The
results in Fig. 7(d) show optimal segmentation on a
directed graph using such edge weights.
Formally, a “directed” version of segmentation energy (2) can be presented as follows. The neighborhood
system N should include all ordered pairs (p, q) of
neighboring pixels. Then the boundary term of energy
B(p,q) · δAp=“obj”,Aq=“bkg”
Note that B(p,q) and B(q,p) are two distinct (directed)
discontinuity penalties for cases when p ∈“object”,
q ∈“background” and when p ∈“background”, q ∈
“object”. Straightforward generalization of the technical results in Section 2.5 shows that energy (2) with
boundary term (11) can be minimized via s-t graph cuts
using directed n-links w(p,q) = B(p,q) ≥0.
In fact, non-negativity of directed penalties B(p,q) ≥
0 is not an essential limitation of our general s/t
graph cut framework for object extraction. Vladimir
Kolmogorov has pointed out to us that it generalizes to
submodular penalties
B(p,q) + B(q,p) ≥0
In the context of object segmentation, such directed submodular penalties were recently studied in
Kolmogorov and Boykov where “directedness”
of the boundary cost (11) is geometrically characterized in terms of ﬂux of a vector ﬁeld. Consistenly with
some variational methods from group A in
Section 1.1, demonstrates that optimization of ﬂux helps graph cuts to better align with object boundaries and to segment thin
structures.
Experimental Results
We demonstrate our general-purpose segmentation
photo/video editing and medical data processing. The
main goal is to prove the concept of object extraction
via s/t graph cuts proposed in our work. We show original data and segments generated by our technique for
a given set of hard constraints. Our actual implementation allows a user to enter hard constraints (seeds)
via mouse operated brush of red (for object) or blue
(for background) color. We present segmentation results in different formats depending on what is more
appropriate in each case.
Note that we used simple 4-neighborhood systems
in 2D examples and 26-neighborhood system in 3D
examples. All running times are given for 1.4 GHz
Pentium III. Our implementation is based on a new
“max-ﬂow” algorithm from (Boykov and Kolmogorov,
Photo and Video Editing
The results in this Section are obtained with λ =
0, that is without the regional term (3). There are
examples where some objects in real images have
distinct intensity distributions that may help to segment them. However, a segmentation algorithm in a
general-purpose photo/video editor can not count on
Boykov and Funka-Lea
Segmentation of photographs (early 20th century). Initial segmentation for a given set of hard constraints (seeds) takes less than a
second for most 2D images (up to 1000 × 1000). Correcting seeds are incorporated in the blink of an eye. Thus, the speed of our method for
photo editing mainly depends on time for placing seeds. An average user will not need much time to enter seeds in (a) and (b).
any speciﬁc regional properties. Indeed, objects of interest are determined by random users and can not be
predicted.Ontheotherhand,wecanstillusetheboundary term (4) with the discontinuity penalty (7). Most objects of interest will have borders along high contrast
boundaries inside images. Hard constraints entered as
seeds can bring “high level” contextual information.
In Fig. 8 we show segmentation results for some
photographs.14 The user can start with a few “object”
and “background” seeds loosely positioned inside and,
correspondingly, outside the object(s) of interest. By
reviewing the results of initial segmentation the user
may observe that some areas are segmented incorrectly.
Then,onecaneditsegmentsasdescribedinSection2.6.
Naturally, the hope is that the method can quickly
identify the right object boundaries with minimum user
interaction. The algorithm would not be practical if the
user has to add correcting seeds until the whole image
is basically manually segmented. The performance of
the algorithm can be judged by the amount of constraints/seeds that had to be placed. For that reason,
the results in Fig. 8 are shown with the corresponding
In Fig. 9 we segmented moving cars in a video sequence. The sequence of 21 video frames (255 × 189)
was treated as a single 3D volume. The necessary seeds
were entered in a simple 3D interface where we could
browsethroughindividual2Dslices(frames)ofthevolume. The whole volume is segmented based on hard
constraints placed in just a few frames. Note that correcting seeds in one frame can ﬁx imperfections in
many adjacent frames. Each car was segmented in an
independent experiment. Segmentation of the whole
volume of 21 frames can be obtained by placing hard
constraints in only a few of the frames.
The initial segmentation might take from 2–3 seconds on smaller volumes (200 × 200 × 10) to a few
minutes on bigger ones (512 × 512 × 50). Thus, efﬁcient editing described in Section 2.6 is crucial for 3D
applications. Usually, the new seeds are incorporated
in a few seconds even on bigger volumes.
Medical Images and Volumes
Figures 10, 11, and 12 show segmentation results that
we obtained on a 3D medical volumes. Each object
was segmented in 10 to 30 seconds. In the examples
of Figs. 10 and 12 the objects were extracted from 3D
volumes after entering seeds in only one slice shown
in (a). In Fig. 11 some correcting seeds were added in
a couple of slices in addition to initial hard constraints
shown in (a). Note that the object in Fig. 10 consist
of two isolated blobs one of which has a hole. This
clearly demonstrates that our method does not restrict
topological properties of segments.
As in Section 3.1 we did not use regional term (3) for
the experiments in Figs. 10, 11 and 12 as it was not useful. In some applications, however, the regional term
may signiﬁcantly simplify, if not completrely automate
 , the segmentation process.
Graph Cuts and Efﬁcient N-D Image Segmentation
Segmentation of a video sequence (21 frames). Initial segmentation takes 3–5 seconds while correcting seeds are incorporated within
a second. The car in the center is the simplest to segment. It is enough to place hard constraints (seeds) in one frame. The car on the left required
some editing due to low contrast and seeds were placed in 3 frames. The bus on the right moves behind a tree and its segmentation required
seeds in 4-5 frames.
Figure 10.
Segmentation of bones in a CT volume [256x256x119].
In Fig. 13 we demonstrate segmentation on 3D kidney
MR data that beneﬁted from regional term (3). We segmented out cortex, medulla, and collecting system of a
kidney in three consecutive steps. First, the whole kidney is separated from the background and the latter is
cropped. The remaining pixels belong to three distinct
types of kidney tissue (cortex, medulla, or collecting
system) with identiﬁable regional properties. At this
point it becomes useful to engage the regional term (3)
of energy.
The results in Fig. 13 are shown without seeds since
the process involved three different segmentations. Using regional bias allows to get 3D segmentation results
by entering only a few seeds in one slice. Initial optimal segments are computed in 1–10 seconds and minor
correction can be incorporated in less then a second.
This example also demonstrates unrestricted topological properties of our segments. Fully automatic segmentation of kidney might be possible with more sophisticated models for regional.
Boykov and Funka-Lea
Figure 11.
Segmentation of liver in a CT volume [170x170x144].
Figure 12.
Segmentation of lung lobes in a CT volume [205x165x253].
Discussion
We presented a novel framework for extracting objects
from images/volumes. In many ways our graph-cut approach to object extraction can be seen as a unifying framework for segmentation that combines many
good features of the previous methods like snakes,
active contours, and level sets while providing efﬁcient and robust global optimization applicable to N-D
The graph cuts framework is very ﬂexible with
initialization. It can be based either on topological
constraints reﬂecting high-level contextual information , or on various visual cues like object/background color distributions
 , texture, or even stereo cues . The method does not have to have an
initial contour/surface, but it may take advantage of
some shape prior or of some initial approximate
guess , if available. The algorithm can also be accelerated in dynamic applications
where previously segmented image frame is similar to
the new frame . Similar to levelset based methods, graph cuts use implicit boundary
representation and the topological properties of the recovered segments are unrestricted, unless additional
constraints are imposed .
In addition, our algorithm allows effective editing of
segments if necessary.
To the best of our knowledge, our graph cut approach is the ﬁrst global optimization object extraction
technique that extends to N-dimensional images. The
underlying numerical optimization scheme is straightforward and robust. It uses exact min-cut/max-ﬂow
Graph Cuts and Efﬁcient N-D Image Segmentation
Figure 13.
Kidney in a 3D MRI angio data [55 × 80 × 32] segmented into cortex, medulla, and collecting system.
algorithms from combinatorial optimization and there
are no numerical convergence issues.
The downside of our global optimization approach
is a restricted set of constraints that we have available to guide the segmentation process . At
the same time, the range of available constraints is
sufﬁciently wide to make graph cuts very useful in
practice. Surprisingly, graph cuts can implement the
same geometrically-motivated cues that are widely used in continuous levelsets methods.
Our main technical tools are weights and topology of n-links and t-links of image-embedded graphs.
Typically, n-links encode the segmentation boundary
cost that is closely related to its geometric length
in a non-Euclidean image-based metric . At the moment we can not optimize second order properties of the boundary (e.g. curvature) which may be helpful in some applications. It
is plausible that combinatorial representation of such
properties would require an energy function (4) with
triple-cliques interactions in the boundary term15 while
our n-links describe only pairwise relations. Recent results in Kolmogorov and Zabih describe a class
of triple-clique interactions that can be optimized with
graph cuts. It is not clear, though, if this class is good
enough to model any particular second-order boundary
Boykov and Funka-Lea
properties of segments. In case this open question has a
positiveanswerourobjectextractionframeworkshould
be able to beneﬁt from the corresponding construction.
Our examples with directed n-links (see Section 2.7)
showthatourmethodcanmodelcertainboundaryproperties which might be hard to handle with other object
extraction methods. In fact, there are many other creative ways to use speciﬁc features of our graph-based
approach. For example, directed n-links can be used
to optimize ﬂux of
a given vector ﬁeld through the segmentation boundary. A ﬁeld of such vectors for each image pixel can
be a priori deﬁned from data (e.g. intensity gradients)
or other contextual information (e.g. gradients of a distancemapforapriorobject/shapemodel) .
Note that characterized the boundary component of the energy that can
be minimized with graph cuts through geometric terms
like length/area and ﬂux. Note that these two geometric concepts have somewhat dual effect on the segmentation boundary. While optimization of length causes
“shrinking” of the boundary, optimization of ﬂux may
have the opposite “ballooning” effect on the boundary.
The discovery of ﬂux component in Kolmogorov and
Boykov allows to counteract the “shrinking”
bias that graph cut techniques were previously criticized for. The “shrinking” bias can be also addressed
by integrating an appropriate regional bias.
The t-links are a tool for implementing region-based
topological constraints and regional bias in the ﬁrst
term of energy formulation (2). Constraining the search
space of cuts is a critical feature of our approach and the
regional bias is an option that should be used carefully
designed depending on a speciﬁc domain. For example,
intensity-based regional models in (5,6) may not help
to segment an object if its intensity properties are very
similar to the background as in Fig. 12(a) (also known
as “camouﬂage” problem). In this case, intensity distributions (5,6) are almost identical and relative weight
for that type of regional bias in the energy should be
set close to zero.
Our artiﬁcial example in Fig. 4 shows that a regional
bias may work well even when there is a signiﬁcant
overlap in the intensity properties of the object and
background. In real images, however, it may be hard to
set the right value of λ and the balance between the region and boundary terms of energy (2) might be elusive.
Robustness of the regional term can be improved if
simple gray-scale intensity histograms in (5,6) are replaced with more elaborate regional bias models based
on color, local texture, etc. For example, in Fig. 13 we
Rp(Ap) = −ln Pr( ¯Ip|Ap)
based on multi-dimensional vector ¯Ip of intensities obtained at each pixel in a sequence of timely acquisitions
as a contrast agent propagated through different tissues.
Distinct functional properties of these tissues gave informative regional models based on multi-dimensional
intensity distributions. Importance of the careful estimation of regional intensity properties of segments is
also emphasized in where object/background color distribution is
estimated using Gaussian Mixture Models with fairly
impressive results.
One additional option studied in is that the parameters of the energy
(e.g. regional bias) can be iteratively re-estimated. It
is also possible to use new correcting seeds during
the editing stage (see Section 2.6) to learn the energy
parameters. A new global optima with “updated”
regional term can be efﬁciently recomputed from a
previous solution using algorithmic ideas similar to
those in Section 2.6. Efﬁcient updating of n-links was
studied in Kohli and Torr in the context of
dynamic applications.
Finally, there is an interesting way to generalize
our segmentation framework to multi-object extraction
problem. Figures 12 (b) and 13(b) show examples of
multi-label segmentations obtained in a sequence of
consecutive independent binary steps based on constrained s-t graph cuts described in Section 2. In fact,
the multi-way graph-cut algorithms in Boykov et al.
 can be used to extract multiple objects at once.
In practice, extracting multiple objects simultaneously
should be more robust, convenient, and faster when
compared to iterative binary approach.
Our graph-cuts approach can be extended to simultaneous multi-object extraction as follows. A graph
should have multiple terminals representing each object of interest.16 A user can appropriately place seeds
(hard constraints) of different “colors” to provide highlevel contextual information and to constrain the search
space of feasible multi-way cuts. In fact, seeds of
each color would represent inﬁnity-cost t-links to the
corresponding graph terminal (object label). N-links
between image pixels can still represent a segmentation boundary cost. The multi-way cut approach in
Graph Cuts and Efﬁcient N-D Image Segmentation
Boykov et al. allows to set different discontinuity penalties Bp,q(Ap, Aq) between a given pair of
neighboring pixels depending on a speciﬁc pair of labels assigned to them. A minimum cost multi-way cut
is a graph partitioning that separates all terminals into
isolated segments by severing edges of the smallest
possible accumulative cost. Inﬁnity cost t-links guarantee that multi-way partitioning of a constrained graph
described above infers an optimal multi-object image
segmentation. The corresponding segmentation energy
is a direct generalization of (2) to a multi-label setting
E(A) = λ ·
Bp,q(Ap, Aq) · δAp̸=Aq
where A ∈{obj1, obj2, . . . , objN}|P| is a multi-object
image labeling.
Unfortunately, multi-way cut problem is NP-hard.
Thus, we loose guaranteed global optimality that we
have in the binary object/background setting of Section 2. At the same time, α-expansion algorithm in
Boykov et al. can efﬁciently ﬁnd provably good
approximating solutions to the multi-way cut problem
above. In practice, it has been shown that these approximating solutions have sufﬁciently high quality for
manyproblemsinvision ). Constrained
multi-way graph cuts is a promising natural extension
of our object/background segmentation approach to a
more general multi-object extraction problem.
Acknowledgements
We would like to thank (in no particular order) Marie-
Pierre Jolly, Christophe Chefd’hotel (Siemens Research, NJ), Vladimir Kolmogorov (University College London, UK), Andrew Blake, Carsten Rother
(Microsoft
Brookes University, UK), Daniel Cremers (University
of Bonn, Germany), Nikos Paragios (Ecole Centrale
de Paris, France), Kaleem Siddiqi (McGill University,
Canada), David Fleet (University of Toronto, Canada),
Davi Geiger (New York University, NY), and Olga
Veksler (University of Western Ontario) for numerous scientiﬁc discussions and for their motivation that
greatly helped in our research. Cheng-Chung Liang and
Bernard Geiger (Siemens Research, NJ) contributed
3D object rendering tools. We also thank our second
anonymous reviewer for a very careful reading of the
paper. His comments (besides revealing a large number
of typos, including some in our proofs) motivated us to
add a detailed discussion of limitations and extensions
of our method in Section 4. Our work was supported by
the research grant from Natural Sciences and Engineering Research Council of Canada, by research funding at
Siemens Corporation (Germany), and by contributions
from Microsoft Research Lab in Cambridge, UK.
1. Preliminary version of this work appeared in Boykov and Jolly
2. One survey can be found in Boykov and Veksler .
3. Impossibility theorem in Kleinberg shows that no clustering algorithm can simultaneously satisfy three basic axioms on
scale-invariance, richness, and consistency. Thus, any clustering
method has some bias.
4. One interesting exception is a recent random walker approach to
image segmentation based on optimization problem over a ﬁnite set of real-valued variables.
5. It seems feasible that ﬂow-recycling and
cut recycling can be combined for a
multiplied effect.
6. A patent application jointly with G. Paladini (Siemens Corp.
Research, Princeton, NJ) is pending.
7. The relationship of binary graph cuts with piece-wice constant
Mumford-Shah model is obvious from the characterization of
the segmentation boundary cost in terms of geometric length
 . The general form of Mumford-
Shah functional can be seen as a continuous counterpart for the
piece-wice smooth discrete MRF models which, for example,
can be optimized with non-binary graph cuts methods like αexpansion .
8. Some versions of region growing method use region-based hard constraints similar to ours.
9. A typed or hand-written letter is an example of a binary image.
Restoration of such an image may involve removal of a salt and
pepper noise.
10. In contrast, each pair of connected nodes on a directed graph is
linked by two distinct (directed) edges (p, q) and (q, p). Such
directed edges can be very useful in some applications (see Section 2.7).
11. In fact, non-negativity assumption is not essential. For example,
at any pixel p we can always increase the values of Rp(“obj”) and
Rp(“bkg”) by the same amount without changing the minimum
of energy (2). The actual limitations for discontinuity penalties
B are discussed in Section 2.7.
12. Note that adding correcting “object” seeds to pixels that are already segmented as “object” can not change the optimal segmentation. Indeed, such hard constraints are already satisﬁed by the
current optimal solution. The same argument applies to correcting “background” seeds.
13. Note that the minimum cut severs exactly one of two t-links at
14. Courtesy of the Library of Congress collection of slides by S.M.
Prokudin-Gorskii made in Russia in the early 20th century. The
whole collection is available at www.loc.gov/exhibits/empire/
Boykov and Funka-Lea
15. This point was raised by Davi Geiger (NY University) in a private
communication.
16. In Section 2 we use only two graph terminals s and t representing
object and background labels.