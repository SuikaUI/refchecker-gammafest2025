Modeling Polypharmacy Side Effects with
Graph Convolutional Networks
Marinka Zitnik 1, Monica Agrawal 1 and Jure Leskovec 1,2,∗
1Department of Computer Science, Stanford University, Stanford, CA, USA
2Chan Zuckerberg Biohub, San Francisco, CA, USA
∗To whom correspondence should be addressed.
Motivation: The use of drug combinations, termed polypharmacy, is common to treat patients with
complex diseases or co-existing conditions. However, a major consequence of polypharmacy is a much
higher risk of adverse side effects for the patient. Polypharmacy side effects emerge because of drug-drug
interactions, in which activity of one drug may change, favorably or unfavorably, if taken with another drug.
The knowledge of drug interactions is often limited because these complex relationships are rare, and
are usually not observed in relatively small clinical testing. Discovering polypharmacy side effects thus
remains an important challenge with signiﬁcant implications for patient mortality and morbidity.
Results: Here, we present Decagon, an approach for modeling polypharmacy side effects. The approach
constructs a multimodal graph of protein-protein interactions, drug-protein target interactions, and the
polypharmacy side effects, which are represented as drug-drug interactions, where each side effect is
an edge of a different type. Decagon is developed speciﬁcally to handle such multimodal graphs with
a large number of edge types. Our approach develops a new graph convolutional neural network for
multirelational link prediction in multimodal networks. Unlike approaches limited to predicting simple
drug-drug interaction values, Decagon can predict the exact side effect, if any, through which a given drug
combination manifests clinically. Decagon accurately predicts polypharmacy side effects, outperforming
baselines by up to 69%. We ﬁnd that it automatically learns representations of side effects indicative of
co-occurrence of polypharmacy in patients. Furthermore, Decagon models particularly well polypharmacy
side effects that have a strong molecular basis, while on predominantly non-molecular side effects, it
achieves good performance because of effective sharing of model parameters across edge types.
Decagon opens up opportunities to use large pharmacogenomic and patient population data to ﬂag and
prioritize polypharmacy side effects for follow-up analysis via formal pharmacological studies.
Availability: Source code and preprocessed datasets are at: 
Contact: 
1 Introduction
Most human diseases are caused by complex biological processes that
are resistant to the activity of any single drug . A promising strategy to combat diseases is polypharmacy, a
type of combinatorial therapy that involves a concurrent use of multiple
medications, also termed a drug combination . A
drug combination consists of multiple drugs, each of which has generally
been used as a single effective medication in a patient population. Since
drugs in a drug combination can modulate the activity of distinct proteins,
drug combinations can improve therapeutic efﬁcacy by overcoming the
redundancy in underlying biological processes . For
example, a drug combination of Venetoclax and Idasanutlin has recently
been shown to lead to superior antileukemic efﬁcacy in the treatment
of acute myeloid leukemia . Here, the two drugs
work in reciprocal ways: Venetoclax inhibits antiapoptotic Bcl-2 family
proteins while Idasanutlin activates the p53 pathway, and therefore, the
combination of these two drugs improves survival by simultaneously
targeting complementary mechanisms .
Whiletheuseofmultipledrugsmaybeagoodpracticeforthetreatment
of many diseases ,
a major consequence of polypharmacy to a patient is a much higher risk
of side effects which are due to drug-drug interactions. Polypharmacy
side effects are difﬁcult to identify manually because they are rare, it is
practically impossible to test all possible pairs of drugs, and side effects
are usually not observed in relatively small clinical testing (Tatonetti et al.,
CC-BY-NC-ND 4.0 International license
certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made available under
The copyright holder for this preprint . Furthermore, polypharmacy is recognized as
an increasingly serious problem in the health care system affecting nearly
15% of the U.S. population , and costing more than
$177 billion a year in the U.S. in treating polypharmacy side effects .
In vitro experiments and clinical trials can be performed to identify
drug-druginteractions , butsystematic
combinatorial screening of drug-drug interaction candidates remains
challenging and expensive . Researchers have thus
attempted to collect drug-drug interactions from scientiﬁc literature and
electronic medical records , and
also discovered them through network modeling, analysis of molecular
target signatures , statistical associationbased models, and semi-supervised learning (see related work in
Section 7). While these approaches can be useful to derive broad rules for
describing drug interaction at the cellular level, they cannot directly guide
strategies for drug combination treatments. In particular, these approaches
characterize drug-drug interactions through scores representing the overall
probability/strength of an interaction but cannot predict the exact type of
the side effect. More precisely, for drugs i and j these methods predict if
their combination produces any exaggerated response Sij over and beyond
the additive response expected under no interaction, regardless of the exact
type or the number of side effects. That is, their goal is to answer a question:
̸= {}, where Sij is the set of all polypharmacy side effects attributed
speciﬁcally to a drug pair i, j but not to either drug alone. However, it
is much more important and useful to answer whether a pair of drugs i,
j will interact with a given side effect of type r, r
∈Sij. Even though
identiﬁcation of precise polypharmacy side effects is critical for improved
patient care, it remains a challenging task that has not yet been studied
through predictive modeling.
Present work. Here, we develop Decagon, a method for predicting side
effects of drug pairs. We model the problem by constructing a large
two-layer multimodal graph of protein-protein interactions, drug-protein
interactions, and drug-drug interactions (i.e., side effects) (Figure 1). Each
drug-drug interaction is labeled by a different edge type, which signiﬁes
the type of the side effect. We then develop a new multirelational edge
prediction model that uses the multimodal graph to predict drug-drug
interactions as well as their types. Our model is a convolutional graph
neural network that operates in a multirelational setting.
To motivate our model, we ﬁrst perform exploratory analysis leading
to two important observations (Section 3). First, we ﬁnd that co-prescribed
drugs (i.e., drug combinations) tend to have more target proteins in
common than random drug pairs, suggesting that drug-target protein
information contains valuable information for drug combination modeling.
Second, we ﬁnd that it is important to consider a map of protein-protein
interactions in order to be able to model characteristics of drugs with
common side effects. These observations motivate the development of
Decagon to make predictions about which drug pairs will interact and
what will the exact type of the interaction/side effect be (Section 4).
Decagon develops a new graph auto-encoder approach , which allows us to develop an end-to-end trainable model
for link prediction on a multimodal graph. In contrast, previous graphbased approaches for link prediction tasks in biology ; Chen et al. ; Zong et al. ) employ a two-stage
pipeline, typically consisting of a graph feature extraction model and a link
prediction model, both of which are trained separately. Furthermore, the
crucial distinguishing characteristic of Decagon is the multirelational link
prediction ability allowing us to capture the interdependence of different
edge (side effect) types, and to identify which out of all possible edge types
exist between any two drug nodes in the graph. This is in sharp contrast
r1 Gastrointestinal bleed side effect
r2 Bradycardia side effect
Protein-protein interaction
Drug-protein interaction
Polypharmacy
side effects
Ciprofloxacin
Simvastatin
Doxycycline
Node feature vector
Fig. 1. An example graph of polypharmacy side effects derived from genomic and patient
population data. A multimodal graph consists of protein-protein interactions, drug-protein
targets, and drug-drug interactions encoded by 964 different polypharmacy side effects
(i.e., edge types ri, i = 1, . . . , 964). Side information is integrated into the model in
the form of additional protein and drug feature vectors. Highlighted network neighbors
of Ciproﬂoxacin (node C) indicate this drug targets four proteins and interacts with three
other drugs. The graph encodes information that Ciproﬂoxacin (node C) taken together
with Doxycycline (node D) or with Simvastatin (node S) increases the risk of bradycardia
side effect (side effect type r2), and its combination with Mupirocin (M) increases the
risk of gastrointestinal bleed side effect r1. We use the graph representation to develop
Decagon, a graph convolutional neural model of polypharmacy side effects. Decagon
predicts associations between pairs of drugs and side effects (shown in red) with the goal
of identifying side effects, which cannot be attributed to either individual drug in the pair.
with approaches for simple link prediction , which
predict only existence of edges between node pairs, and is also critical for
modeling a large number of different edge/side effect types.
We contrast Decagon’s performance with that of state-of-the-art
approaches for multirelational tensor factorization , approaches for representation learning on
graphs ,
and established
machine learning methods for link prediction, which we adapted for the
polypharmacy side effect prediction task. Decagon outperforms alternative
approaches by up to 69% and leads to a 20% average gain in predictive
performance, with larger gains achieved on side effect types that have a
strong molecular basis (Section 6). For several novel predictions we ﬁnd
supporting evidence in the biomedical literature, suggesting that Decagon
performs especially well at identifying predictions that are highly likely
to be true positive. Taken together, this study shows, for the ﬁrst time,
the ability to model side effects of drug combinations and opens up new
opportunities for development of combinatorial drug therapies.
2 Datasets
We formulate the polypharmacy side effect identiﬁcation problem as
a multirelational link prediction problem in a two-layer multimodal
graph/network of two node types: drugs and proteins. We construct twolayermultimodalnetworkasfollows(Figure1). Protein-proteininteraction
network describes relationships between proteins. Drug-drug interaction
network contains 964 different types of edges (one for each side effect
type) and describes which drug pairs lead to which side effects. Lastly,
drug-protein links describe the proteins targeted by a given drug.
We continue by describing the datasets used to construct the network.
Preprocessed versions of all datasets are available through this study’s
website: 
CC-BY-NC-ND 4.0 International license
certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made available under
The copyright holder for this preprint network compiled by
Menche et al. and Chatr-Aryamontri et al. , integrated with
additional PPI information from Szklarczyk et al. , and Rolland
et al. . The network contains physical interactions experimentally
documented in humans, such as metabolic enzyme-coupled interactions
and signaling interactions. The network is unweighted and undirected with
19,085 proteins and 719,402 physical interactions.
We obtained relationships between proteins and drugs from the
STITCH (Search Tool for InTeractions of CHemicals) database, which
integrates various chemical and protein networks .
Forthiswork, weconsideredonlytheinteractionsbetweensmallchemicals
(i.e., drugs) and target proteins that had been experimentally veriﬁed.
There were over 8,083,600 interactions present between 8,934 proteins
and 519,022 chemicals.
2.2 Drug-drug interaction and side effect data
We also pulled from databases detailing side effects of both individual
drugs and drug combinations. The SIDER (Side Effect Resource) database
contains 286,399 drug-side effect associations over 1,556 drugs and 5,868
side effects obtained by mining adverse events from
drug label text. We integrated it with the OFFSIDES database, which
details off-label 487,530 associations between 1,332 drugs and 10,097 side
effects . The OFFSIDES database was generated
using adverse event reporting systems that collect reports from doctors,
patients, and drug companies. We eliminated side effect synonyms and
usedonesideeffectvocabularytoconstructalldatasets. Thatpreprocessing
is important as the prediction problem would be much easier if some side
effects were perfectly correlated. After combining these datasets, there is
a median of 159 side effects per drug, with the most common side effects
being nausea, vomiting, headache, diarrhoea, and dermatitis.
We pulled polypharmacy side effect information from TWOSIDES,
which details 1,318 side effects types across 63,473 drug combinations,
which are greater than expected given the effects of either drug in
the combination individually . Like OFFSIDES,
TWOSIDES was generated from adverse event reporting systems.
Common side effects, like hypotension and nausea, occur in over a third
of drug combinations, while others like amnesia and muscle spasms only
occur in a handful of drug combinations. Overall, it contains 4,651,131
drug combination-side effect associations. In this work, we focus on
predictingthe964commonly-occurringtypesofpolypharmacysideeffects
that each occurred in at least 500 drug combinations.
The ﬁnal network after linking entity vocabularies used by different
databases has 645 drug and 19,085 protein nodes connected by 715,612
protein-protein, 4,651,131 drug-drug, and 18,596 drug-protein edges.
3 Data-driven motivation for Decagon approach
Here we make three observations about the structure of the two-layer
multimodal graph (Figure 1) that have important implications for the
design of the Decagon model.
First, we observe that there is a wide range in how frequently certain
side effects occur in drug combinations. We ﬁnd that more than 53%
of polypharmacy side effects are known to occur in less than 3% of
the documented drug combinations (e.g., cerebral artery embolism, lung
abscess, sarcoma, collagen disorder). In contrast, the more frequent side
effects, (e.g., vomiting, weight gain, nausea, anaemia), occur an order of
magnitude more often. Due to the large variation in the number of drug
pairs each side effect is associated with, there are only a limited number
of drug pairs available for independently training models for prediction of
different side effect types. As a result, polypharmacy side-effect prediction
Table 1. Percent co-occurrence of hypertension and nausea with the 50
most frequent side effects in drug combinations, annotated with examples.
The vast majority of side effects are either signiﬁcantly overrepresented or
underrepresented with respect to how often they appear in drug combinations
with nausea/hypertension, at α = 0.05, after Bonferroni correction.
Polypharmacy
side effect S
Overrepresented
co-occurrence
Underrepresented
co-occurrence
Insigniﬁcant
co-occurrence
Hypertension 44% (hyperglycemia,
anxiety, dizziness)
48% (fever,
sepsis, dermatitis)
8% (cough,
tachycardia)
54% (diarrhea,
insomnia, asthenia)
34% (edema,
anemia, neutropenia)
12% (fever,
Fraction of drug pairs
target proteins
(0-50]% shared
target proteins
(50-100]% shared
target proteins
Co-prescribed drug pairs
(i.e., drug combinations)
Fig. 2. Jaccard similarity between target proteins for random pairs of drugs, all drug
combinations, and drug combinations associated with speciﬁc side effects. Drug pairs
are stratiﬁed into three groups depending on whether drug i and j in a given pair (i, j)
do not share any target proteins, share fewer than 50% target proteins, or share more than
50% target proteins (i.e., Jaccard(Ti, Tj) = 0, 0 < Jaccard(Ti, Tj) < 0.5, and
0.5 ≤Jaccard(Ti, Tj) ≤1, respectively; Ti is a set of i’s target proteins). We observe
that drugs in most drug pairs, especially in random drug pairs (i.e., drugs not commonly
co-prescribed, dark grey) have zero shared target proteins.
becomes a challenging task, especially when predicting rarer side effects,
and thus it is important to develop an end-to-end approach such that the
model is able to share information and learn from all side effects at once.
Second, we observe that polypharmacy side effects do not appear
independently of one another in co-prescribed drug pairs (i.e., drug
combinations), suggesting that joint modeling over multiple side effects
can aid in the prediction task. To quantify the co-occurrence between
side effects, we count the number of drug combinations in which a given
side effect co-occurs with other side effects, and then use permutation
testing with a null model of random co-occurrence. As exempliﬁed
for hypertension and nausea in Table 1, we ﬁnd that the majority of
the most common side effects are either signiﬁcantly overrepresented
or underrepresented with respect to how often they co-occur with
nausea/hypertension as side effects in drug combinations, at α = 0.05.
This observation points to the existence of mechanisms that may contribute
to the shared pathophysiology of side effects, similar to what has been
observed in disease comorbidity . For example, we
ﬁnd that hypertension signiﬁcantly co-occurs with anxiety but co-occurs
less often with fever than dictated by random chance (Table 1). These
relationships hold across the side effect data set. We conclude that a
prediction model should leverage dependence between side effects and
be able to re-use the information learned about the molecular basis of one
side effect to better understand the molecular basis of another side effect.
Third, we probe the relationship between proteins targeted by a drug
pair and occurrence of side effects. Let Ti represent a set of target proteins
associated with drug i, we then calculate the Jaccard similarity between
targetproteinsofagivendrugpair(i, j). Wemakeseveralobservations: (1)
More than 68% of drug combinations have zero target proteins in common,
suggesting it is important to use protein-protein interaction information
CC-BY-NC-ND 4.0 International license
certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made available under
The copyright holder for this preprint Random
drug pairs have smaller overlap in targeted proteins than co-prescribed
drugs (Figure 2, light grey), p-value = 5e−120, 2-sample Kolmogorov-
Smirnov (KS) test. (3) We ﬁnd that this trend is unequally observed across
different side effects. For example, high blood pressure more strongly
appears in drug combinations with shared target proteins than, for example,
ribfracture(Figure2, purple). Over150sideeffectsappearincombinations
that differ signiﬁcantly (at α = 0.05 after Bonferroni correction) from the
other true drug combinations, per a 2-sample KS test, suggesting a strong
molecular basis of these side effects. Based on this ﬁndings, we conclude it
is important for a model to consider how proteins interact with each other
and to be able to model longer chains of (indirect) interactions.
4 Graph convolutional Decagon approach
We cast polypharmacy side effect modeling as a multirelational link
prediction problem on a multimodal graph encoding drug, protein, and
side effect relationships (Figure 1). More precisely, these relationships are
represented by a graph G = (V, R) with N nodes (e.g., proteins, drugs)
vi ∈V and labeled edges (relations) (vi, r, vj), where r is the edge type
(relation type): (1) physical binding between two proteins, (2) a target
relationship between a drug and a protein, or (3) a particular type of a
side effect between two drugs. As mentioned in Section 2 we consider 964
different relation types between drugs (i.e., side effects).
In addition, we allow for inclusion of side information in the form
of additional node features. Different nodes (drugs, proteins) can have
different number of node features, given by real-valued feature vectors
x1, x2, . . . , xN assigned to every node in the graph.
Polypharmacy side effect prediction task. Polypharmacy side effect
prediction task considers the problem of identifying associations between
drug pairs and side effects. Importantly, these associations are limited to
only those that cannot be attributed to either drug alone. Using the graph G,
the task is to predict labeled edges between drug nodes. Given a drug pair
(vi, vj), our aim is to determine how likely an edge eij = (vi, r, vj) of
type r belongs to R, meaning that concurrent use of drugs vi and vj (i.e.,
the use of a drug combination (vi, vj)) is associated with a polypharmacy
side effect of type r in the human patient population.
To this aim, we develop a non-linear, multi-layer convolutional graph
neuralnetworkmodel DecagonthatoperatesdirectlyongraphG.Decagon
has two main components:
• an encoder: a graph convolutional network operating on G and
producing embeddings for nodes in G (Figure 3A) (Section 4.1), and
• a decoder: a tensor factorization model using these embeddings to
model polypharmacy side effects (Figure 3B) (Section 4.2).
We proceed by describing Decagon,
our approach for modeling
polypharmacy side effects.
4.1 Graph convolutional encoder
We ﬁrst describe the graph encoder model, which takes as input a graph G
and additional node feature vectors xi, and produces a node d-dimensional
embedding zi ∈Rd for every node (drug, protein) in the graph.
We propose an encoder model that makes efﬁcient use of information
sharing across regions in the graph and assigns separate processing
channels for each relation type. The idea is that Decagon learns how
to transform and propagate information, captured by node feature
vectors, across the graph. Every node’s network neighborhood deﬁnes
a different neural network information propagation architecture but these
architectures then share functions/parameters that deﬁne how information
is shared and propagated. We learn convolutional operators that propagate
and transform information across different parts of the graph and
across different relation types. The model inspired by a recent class of
convolutional neural networks that operate directly on graphs . For a given node Decagon performs
transformation/aggregation operations on feature vectors of its neighbors.
This way Decagon only takes into account the ﬁrst-order neighborhood of a
node and applies the same transformation across all locations in the graph.
Successive application of these operations then effectively convolves
information across the K-th order neighborhood (i.e., embedding of a
node depends on all the nodes that are at most K steps away), where K is
the number of successive operations of convolutional layers in the neural
network model.
In each layer, Decagon propagates latent node feature information
across edges of the graph, while taking into account the type (relation) of
an edge . A single layer of this neural network
model takes the following form:
where h(k)
∈Rd(k) is the hidden state of node vi in the k-th layer
of the neural network with d(k) being the dimensionality of this layer’s
representation, r is a relation type, and matrix W(k)
is a relation-type
speciﬁc parameter matrix. Here, φ denotes an non-linear element-wise
activation function (i.e., a rectiﬁed linear unit), which transforms the
representations to be used in the layer of the neural model, cij
are normalization constants, which we choose to be symmetric cij
r | and ci
r = 1/|N i
r| with N i
r denoting the set of neighbors
of node vi under relation r. Importantly note that the sum in Eq. 1 ranges
only over the neighbors N i
r of a given node i and thus the computational
architecture (i.e., the neural network) is different for every node. Figure 3A
shows an example of a per-layer convolutional update Eq. (1) for node
C from Figure 1. And, Figure 3C then illustrates that different nodes
have different structures of neural networks (because each node’s network
neighborhood is different).
A deeper model can be built by chaining multiple (i.e., K) of these
layers (Figure 3A) with appropriate activation functions. To arrive at the
ﬁnal embedding zi ∈Rd of node vi, we compute its representation as:
. The overall encoder then takes the following form. We stack
K layers as deﬁned in Eq. (1) such that the output of the previous layer
becomes the input to the next layer. The input to the ﬁrst layer are node
feature vectors, h(0)
= xi, or unique one-hot vectors for every node in
the graph if no features are present.
4.2 Tensor factorization decoder
So far, we introduced Decagon’s encoder. The encoder maps each node
vi ∈V to a an embedding, a real-valued vector representation zi ∈Rd,
where d is the dimensionality of node representations. We proceed by
describing the decoder component of Decagon.
The goal of decoder is to reconstruct labeled edges in G by relying on
learned node embeddings and by treating each label (edge type) differently.
In particular, decoder scores a (vi, r, vj)-triple through a function g whose
goal is to assign a score g(vi, r, vj) representing how likely it is that drugs
vi and vj are interacting through a relation/side effect type r (Figure 3B).
Using embeddings for nodes i and j returned by Decagon’s encoder
(Section 4.1) zi and zj, the decoder predicts a candidate edge (vi, r, vj)
through a factorized operation:
g(vi, r, vj)=
i DrRDrzj if vi and vj are drugs
if vi and vj are both proteins, or,
vi and vj are a protein and a drug
CC-BY-NC-ND 4.0 International license
certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made available under
The copyright holder for this preprint 
p( , r2, )
p( , r3, )
p( , r4, )
p( , rn, )
Predictions
r1, r2, r3, ... rn Polypharmacy
side effects
GCN per-layer update for a single drug node (in blue)
Polypharmacy side effect prediction
Fig. 3. Overview of Decagon model architecture. (A) An Decagon encoder. Shown is a per-layer update for a single graph node (a drug node representing Ciproﬂoxacin based on the small
example input graph in Figure 1). Hidden state activations from neighboring nodes N c
r are gathered and then transformed for each relation type r individually (i.e., gastrointestinal bleed,
bradycardia, and drug target relation). The resulting representation is accumulated in a (normalized) sum and passed through a non-linear activation function (i.e., ReLU) to produce hidden
state of node vc in the (k + 1)-th layer, h(k+1)
. This per-node update is computed in parallel with shared parameters across the whole graph. (B) For every relation, Decagon decoder
takes pairs of embeddings (e.g., hidden node representations zc and zs representing Ciproﬂoxacin and Simvastatin) and produces a score for every (potential) edge in the graph. Shown is
the decoder for poypharmacy side effects relation types. (C) A batch of neural networks that compute embeddings of six drug nodes in the input graph. In Decagon, neural networks differ
from node to node but they all share the same set of relation-speciﬁc trainable parameters (i.e., the parameters of the encoder and decoder; see Eq. (1) and Eq. (2)). That is, rectangles with
the same shading patterns share parameters, and thin rectangles with black and white shading pattern denote densely-connected neural layers.
followed by the application of a sigmoid function σ to compute probability
of edge (vi, r, vj):
r = p((vi, r, vj) ∈R) = σ(g(vi, r, vi)).
Next, we explain Decagon’s decoder by distinguishing between the
following two cases:
(1) When vi and vj are drug nodes, the decoder g in Eq. (2) assumes
a global model of drug-drug interactions (i.e., R) whose variation and
importance across polypharmacy side effects are described by side-effectspeciﬁc diagonal factors (i.e., Dr). Here, R is a trainable parameter matrix
of shape d×d that models global drug-drug interactions across all possible
polypharmacy side effects. Additionally, in Decagon, every relation r
representing a different polypharmacy side effect is associated with a
diagonal d × d matrix Dr modeling the importance of each dimension in
zi towards side effect r. In an alternative view, this decoder can be thought
of as a tensor factorization ) of a three-way
tensor, where two modes are identically formed by the drugs and the third
mode holds polypharmacy side effects of drug combinations. However,
a distinguishing characteristic of Decagon is the reliance on the encoder.
Whereasclassictensordecompositionsusenoderepresentationsoptimized
directly in training, we compute them in an end-to-end fashion where node
embeddings are optimized jointly together with the tensor factorization.
(2) When vi and vj are not both drug nodes, the decoder g in Eq. (2)
employs a bilinear form to decode edges from node embeddings. More
precisely, in that case, the decoding function g is associated with a trainable
parameter matrix Mr of shape d × d that models interactions between
every two dimensions in zi and zj. The predicted edge probability is then
computed using a bilinear form (Eq. (2)) followed by the application of a
sigmoid function (Eq. (3)).
The use of different edge decoders based on the type of nodes in Eq. (2)
is crucial because of the following two reasons: First, Decagon decoder can
be seen as a form of effective parameter sharing between different relation
types. In particular, relation types involving drug pairs use the same global
drug-drug interaction model (i.e., matrix R) containing patterns that hold
true across all drug-related relation types. We expect that this decoding
parameterization can alleviate overﬁtting on rare side effects as parameters
are shared between both rare (e.g., myringitis or nasal polyps) and frequent
(e.g., hypotension or anaemia) side effects. Second, we want a high score
g(vi, r, vj) to indicate an association between a drug combination (vi, vj)
and a side effect r that cannot be attributed to vi or vj alone. To capture
the polypharmacy combinatorics , it is thus important that
Decagon allows, through R, for a non-zero interaction between any two
dimensions in i’s and j’s embeddings.
Taken together, the trainable parameters of Decagon model are: (1)
relation-type-speciﬁc neural network weight matrices Wr, (2) relationtype-speciﬁc parameter matrices Mr, (3) a global side-effect parameter
matrix R, and (4) side-effect-speciﬁc diagonal parameter matrices Dr.
Decagon encoder and decoder thus forms an end-to-end trainable model
for multirelational link prediction in a multimodal graph (Figure 3).
Next we shall describe how to train the Decagon approach. In
particular, we explain how to train neural network weights and interaction
parameter matrices using an end-to-end learning technique.
4.3 Decagon model training
During model training, we optimize model parameters using the crossentropy loss:
Jr(i, j) = −log pij
r −En∼Pr(j) log(1 −pin
to encourage the model to assign higher probabilities to observed edges
(vi, r, vj) than to random non-edges. As in previous work , we estimate the model through negative
sampling. For each drug-drug edge (vi, r, vj) (i.e., a positive example) in
the graph, we sample a random edge (vi, r, vn) (i.e., a negative example)
by randomly choosing node vn. This is achieved by replacing node vj
in edge (vi, r, vj) with node vn that is selected randomly according to
a sampling distribution Pr . Considering all edges,
the ﬁnal loss function in Decagon is:
(vi,r,vj)∈R
Recent results have shown that modeling graph-structured data can often
be signiﬁcantly improved with end-to-end learning is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made available under
The copyright holder for this preprint , thus we take an end-to-end optimization approach and
jointly optimize over all trainable parameters and propagate loss function
gradients through both Decagon’s encoder as well as decoder.
To optimize the model we train it for a maximum of 100 epochs
(training iterations) using the Adam optimizer with
a learning rate of 0.001 and early stopping with a window size of 2, i.e., we
stop training if the validation loss does not decrease for two consecutive
epochs. We initialize weights using the initialization described in Glorot
and Bengio and accordingly normalize node feature vectors. In
order for the model to generalize well to unobserved edges we apply a
regular dropout to hidden layer units (Eq. (1)). In
practice, we use efﬁcient sparse matrix multiplications, with complexity
linear in the number of edges in G, to implement Decagon model.
We use mini-batching by sampling contributions to the loss function in
Eq. (5). That is, we process multiple training mini-batches, each obtained
by sampling only a ﬁxed number of contributions from the sum over edges
in Eq. (5), resulting in dynamic batches of computation graphs (Figure 3C).
By only considering a ﬁxed number of contributions to the loss function,
we can remove respective data points that do not appear in the current minibatch. This serves as an effective means of regularization, and reduces the
memory requirement to train the model, which is necessary so that we can
ﬁt the full model into GPU memory1.
5 Experimental setup
We view the problem of predicting polypharmacy side effects as solving
a multirelational link prediction task. Here, every drug pair is connected
through zero, one, or more relation types (i.e., side effect types) from a set
of all relation types (i.e., all side effect types, see Section 2 and Figure 1).
For each polypharmacy side effect type, we split drug pairs associated
with that side effect into training, validation, and test sets, ensuring that
the validation and test sets each include 10% of drug pairs. For each side
effect type, we use 80% of drug pairs to train a model, and 10% of drug
pairs to select model parameters. The task is then to predict pairs of drugs
that are associated with each side effect type. Note that we are extremely
careful that there is information leakage between the folds and that the
cross-validation is fair.
We apply Decagon, which for every drug pair and for every side effect
type calculates a probability that a given drug pair is associated with a
given side effect. Additionally, we integrate side information, i.e., side
effects of individual drugs (Section 2), into the model in the form of
additional features xi for drug nodes i. To prevent any circularity and
information leakage in the evaluation, we make sure that: (1) side effects
we are predicting over are true polypharmacy side effects (i.e., a given
polypharmacy side effect is only associated with a drug pair and not with
any individual drug in the pair), and (2) no side effect types that we are
predicting over are included in the side features. For example, nausea is one
polypharmacy side effect, and we therefore remove all instances of nausea
as a side effect for individual drugs. We note that this is a conservative
approach which allows us to reliably estimate prediction performance.
We are not aware of any other approach developed for predicting side
effects of drug pairs. We thus evaluate the performance of Decagon against
the following multirelational link prediction approaches:
• RESCAL tensor decomposition : This is a
tensor factorization approach that takes a multirelational structure into
account. Given Xi, a drug-drug matrix encoding associations of drugs
pairs with side effect r, matrix Xi is decomposed as: Xr = ATrAT
for r = 1, 2, . . . , 964, where Tr and A are model parameters. Given
drugs i and j, their association with r is predicted as: aiTraj.
• DEDICOM tensor decomposition : This
is a related tensor factorization approach suitable for sparse data
1 All data and code are released on the project website.
settings. A given drug-drug matrix Xi is decomposed as: Xr =
AUrTUrAT . Given drugs i and j, their association with r is
predicted as: aiUrTUraj.
• DeepWalk neural embeddings we train
a separate logistic regression classiﬁer.
• Concatenated drug features: This approach constructs a feature
vector for each drug based on PCA representation of drug-target
protein interaction matrix and based on PCA representation of
side effects of individual drugs. Drug pairs are represented by
concatenating the corresponding drug feature vectors and used as input
to a gradient boosting trees classiﬁer that then predicts the exact side
effect of a pair of drugs.
The parameter settings for every approach are determined using a
validation set with a grid search over candidate parameter values (e.g.,
for gradient boosting trees, the number of trees used was varied from
10 to 100). In case an approach is not a multirelational link prediction
method, we select parameters with best performance on the validation set
individually for each side effect type. Speciﬁcally, Decagon uses a 2-layer
neural architecture with d(1) = 64, and d(2) = 32 hidden units in each
layer, a dropout rate of 0.1, and a mini-batch size of 512 in all experiments.
Performance is calculated individually per side effect type using
area under the receiver-operating characteristic (AUROC), area under the
precision-recall curve (AUPRC), and average precision at 50 (AP@50).
Higher values always indicate better performance.
Decagon operates on multimodal graphs and in highly multirelational
settings. This ﬂexibility makes Decagon especially suitable for predicting
side effects of pairs of drugs as we shall discuss below.
6.1 Prediction of polypharmacy side effects
We start by comparing the performance of Decagon to alternative
approaches. From results in Table 2, we see that considering the
multimodal network representation and modeling a large number of
different side effects allows Decagon to outperform other approaches
by a large margin. Across 964 side effect types, Decagon outperforms
alternative approaches by 19.7% (AUROC), 22.0% (AUPRC), and 36.3%
(AP@50). Decagon’s improvement is especially pronounced relative
to tensor factorization methods, where Decagon surpasses tensor-based
methods by up to 68.7% (AP@50). This ﬁnding highlights a potential
limitation of directly optimizing a tensor decomposition )
without relying on a graph-structured convolutional encoder. We also
compared Decagon with two other methods , which we adapted for a multirelational link prediction task.
We observe that DeepWalk neural embeddings and Concatenated drug
features achieve a gain of 9.0% (AUROC) and a 20.1% gain (AUPRC)
over tensor-based methods. However, these approaches employ a twostage pipeline, consisting of a drug feature extraction model and a link
prediction model, both of which are trained separately. Furthermore, they
cannot consider interdependence of different side effects that we showed to
containusefulinformation(Section3). Theseadditionalmodelinginsights,
give Decagon a 22.0% gain over DeepWalk neural embeddings, and a
12.8% gain over Concatenated drug features in AP@50 scores.
CC-BY-NC-ND 4.0 International license
certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made available under
The copyright holder for this preprint , area under precision-recall curve
(AUPRC), and average precision at 50 (AP@50) for polypharmacy side effect
prediction. Reported are average performance values for 964 side effect types.
RESCAL tensor factorization
DEDICOM tensor factorization
DeepWalk neural embeddings
Concatenated drug features
Table 3. Side effects with the best and worst performance in Decagon.
Best performing side effects AUPRC Worst performing side effects AUPRC
Increased body temperature
Coccydynia
Tympanic membrane perfor. 0.941
Renal disorder
Dyshidrosis
Leucopenia
Spondylosis
Schizoaffective disorder
Breast dysplasia
Uterine polyp
These ﬁndings are aligned with results that predictions can often
be signiﬁcantly improved by end-to-end learning and speciﬁcally using
graph auto-encoders .
In particular, tensor decomposition and neural embedding baseline
approaches allow us to quantify what percentage of the performance
improvement is due to the embeddings (i.e., Decagon’s encoder) and what
percentage is due to the multitask learning (i.e., Decagon’s decoder).
TobetterunderstandDecagon’sperformancewestratifytheaggregated
statistics in Table 2 by side effect type. Manual examination of the
results and a discussion with domain experts reveals a common property
of best performing side effects in Table 3. We observe that Decagon
models particularly well side effects with strong apparent molecular
underpinnings. This observation is consistent with our expectation
because Decagon’s multimodal graph (Figure 1) contains predominantly
pharmacogenomic information. We also observed that side effects with
the worst performance tend to be common side effects and/or have nonmolecular origins with potentially important environmental and behavioral
components (Table 3). Decagon’s competitive performance on those side
effects can be explained by effective sharing of model parameters across
different types of side effects.
6.2 Investigation of Decagon’s novel predictions
Next, we perform a literature-based evaluation of new hits. Our goal is
to evaluate the quality of novel Decagon’s predictions about relationships
between side effects and drug pairs. To this aim, we ask Decagon to make
a prediction for every drug pair and every side effect type in the dataset.
We then use these predictions to construct a ranked list of (drug i, side
effect type r, drug j) triples, where the triples are ranked by predicted
probability scores pij
r (Eq. (3)). We then exclude from the ranked list all
the known associations between drug pairs and side effects, and afterwards
investigate the ten highest ranked predictions in the list.To prevent the risk
of investigative bias we do not allow any crosstalk between different stages
of the analysis. We then search biomedical literature to see if we can ﬁnd
supporting evidence for these novel predictions.
Table 4 shows Decagon’s predictions and literature evidence
supporting these predictions. We were able to ﬁnd literature evidence for
Table 4. New polypharmacy side effect predictions given by (drug i, side
effect type r, drug j) triples that were assigned the highest probability scores
by Decagon. For each prediction, we include its rank k in the ranked list of
all predictions and literature evidence supporting existence of the predicted
association.
k Polypharmacy effect r Drug i
Pyrimethamine Aliskiren
Stage et al.
4 Breast disorder
Pyrimethamine Bicker et al.
6 Renal tubular acidosis Omeprazole
Amoxicillin
Russo et al.
8 Muscle inﬂammation
Atorvastatin
Amlodipine
Banakh et al.
9 Breast inﬂammation
Tioconazole
Parving et al.
Hypothyroid
Cholelithiasis
Uterine polyp
Postmenopausal bleeding
Fibromyalgia
globulinaemia
encephalitis
Sleep apnea
Viral meningitis
Pancreatitis
Uterine bleeding
Otitis media
Fig. 4. Visualization of side effects in Decagon. The side effects are mapped to the
2D space using the t-SNE package with learned side effect
representations (Dr, r = 1, 2, . . . , 964, see Eq. (2)) as input. Selected side effects are
uterine polyp, pancreatitis, viral meningitis, and thyroid disease. For each selected side
effect, we highlight three side effects that most often co-occur with the selected side effect
in the drug combination dataset.
ﬁve out of ten highest ranked predicted side effects. That is, our method
both correctly identiﬁed the drug pair as well as the side effect type for
these highest ranked predictions. This result is remarkable because the
predictions were speciﬁc and the supporting evidence was very unlikely to
be found by random selection of drug pair and side effect associations.
We note that the cited literature explicitly investigates interactions
between the predicted drug pair and the predicted side effect. For example,
Decagon signiﬁed the use Atorvastatin and Amlodipine can lead to muscle
inﬂammation (Table 4, 8th highest ranked prediction). In fact, recent
reports ) have found injuries in muscle tissue due
to presumed drug interactions of Atorvastatin with Amlodipine. Decagon
also ﬂagged a potential association between Pyrimethamine, an antimicrobial that, if taken alone, is effective in the treatment of malaria, and
Aliskiren, a renin inhibitor, whose clinical trial was halted after discovered
kidney complications , suggesting an increased risk
of cancer (1st highest ranked prediction). The analysis here demonstrates
the potential of Decagon’s predictions to facilitate the translational science
and the discovery of novel (non)-efﬁcacious drug combinations.
6.3 Exploration of Decagon’s side effect embeddings
Finally, we are interested in knowing whether Decagon meets the design
goals presented in Section 3. In particular, we test if Decagon can
capture the interdependence of different side effect types revealed by our
exploratory data analysis (2nd observation in Section 3). To this aim, we
take diagonal matrices Dr, which speciﬁcally model the importance of
interactions for each side effect type r in Decagon’s multirelational link
prediction (Section 4.2). We extract the diagonal from each Dr and use
it as a vector representation for side effect r. We embed these vector
CC-BY-NC-ND 4.0 International license
certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made available under
The copyright holder for this preprint 
and then visualize in Figure 4.
Figure 4 reveals the existence of clustering structure in side effects’
representations. Examining the ﬁgure, we observe that side effects
embedded close together in the 2D space tend to co-occur in drug
combinations. This observation indicates that Decagon infers similar
matrices Dr1 and Dr2 for side effects r1 and r2 that appear together
in many drug combinations. For example, the top three side effects that
often appear together with uterine polyp side effect are: uterine bleeding,
breast dysplasia, and postmenopausal bleeding. Indeed, Decagon infers
similar diagonal factors Dr for all three side effects, resulting in localized
projections in the 2D space (Figure 4).
To test if the appealing pattern in Figure 4 holds true across many
side effect types we proceed as follows. We compute average Euclidean
distance between each side effect’s vector representation and vector
representations of three most frequently co-occurring side effects. We
ﬁnd that co-occurring/related side effects have signiﬁcantly more similar
representations (i.e., diagonal factors Dr) than expected by chance (pvalue = 1e−34, 2-sample KS test). We thus conclude that Decagon is
able to meet the design goals of polypharmacy side effect modeling.
Furthermore, the analysis here indicates that Decagon’s multirelational
link prediction model (Section 4.2) can capture interdependence of side
effects present in drug combination data.
7 Related work
We review related research on computational prediction of drug
combinations, and on neural networks for graph-structured data.
Drug combination modeling. Methods in computational pharmacology
aim to ﬁnd associations between drugs and molecular targets, predict
potential adverse drug reactions,
and ﬁnd new uses of existing
drugs . In
contrast to individual drugs and single drug therapy (i.e., monotherapy)
predominantly
considered
combinations (i.e., polypharmacy). This is important as polypharmacy
is a useful strategy for combating complex diseases with important implications for health care system .
Traditionally, effective drug combinations have been identiﬁed by
experimentally screening all possible combinations of a pre-deﬁned
set of drugs . Given the large number of drugs,
experimental screens of pairwise combinations of drugs pose a formidable
challenge in terms of cost and time. For example, given n drugs, there
are n(n −1)/2 pairwise drug combinations and many more higherorder combinations. To address the combinatorial explosion of candidate
drug combinations, computational methods were developed to identify
drug pairs that potentially interact, i.e., drug pairs that produce an
exaggerated response over and beyond the additive response expected
under no interaction . Previous research in this
realm focused on deﬁning drug-drug interactions through the concepts of
synergy and antagonism , quantitatively
measuring dose-effect curves ,
and determining whether or not a given drug pair interacts according to
an experiment measuring cell viability .
All of these approaches predict drug-drug interactions as scalar values
representing the overall probability/strength of an interaction for a given
drug pair. In sharp contrast, our work here goes a step further and identiﬁes
how exactly, if at all, a given drug pair manifests clinically within a patient
population. In particular, we model clinical manifestations that cannot
be attributed to either drug alone and that arise due to drug interaction
(i.e., polypharmacy side effects). Whereas previous research focused on
generating pointwise interaction estimates representing cell viability or a
closely related outcome in an experimental drug screen, we predict, for
the ﬁrst time, which, if any, polypharmacy side effects can occur when
multiples drugs are taken together by a patient, yielding a more direct path
for clinical translation.
Although present drug-drug interaction prediction approaches cannot
be directly used for the problem studied here, we brieﬂy overview
methodology used by these approaches. Drug-drug interaction prediction
approaches can be categorized into classiﬁcation-based and similaritybased
Classiﬁcation-based
interaction prediction as a binary classiﬁcation problem . These methods use known interacting drug pairs as positive
examples andother drug pairsas negative examples, andtrain classiﬁcation
models, such as naive Bayes, logistic regression, and support vector
machine. In contrast, similarity-based methods assume that similar drugs
may have similar interaction patterns . Thesemethodsusedifferentkindsofdrug-drug
similarity measures deﬁned on drug chemical substructures, interaction
proﬁle ﬁngerprints, drug side effects, off-side effects, and connectivity
of molecular targets. The methods aggregate similarity measures through
clustering or label propagation in order to identify potential drug-drug
interactions .
However, all these methods generate drug-drug interaction scores and do
not predict the exact polypharmacy side effect, which is the goal of our
work here.
Neural networks on graphs. Our model extends existing work in the ﬁeld
of neural networks on graphs . Neural networks on graphs enable learning
over graph structures by generalizing the notion of convolution operation
typically applied to image datasets to operations that can operate on
arbitrary graphs. These neural networks can also be seen as an embedding
methodology that distills high-dimensional information about each node’s
neighborhood into a dense vector embedding without requiring manual
feature engineering. In particular, graph convolutional networks and message
passing neural networks are related lines of research
that allow for layer-wise learning of node embeddings in graphs.
Although graph convolutional networks achieve state-of-the-art
performance on important prediction problems in social networks and
knowledge graphs,
they have not yet been used for problems in
computational biology. Our model extends graph convolutional networks
by incorporating support for multiple edge types, each type representing
a different side effect, and by providing a form of efﬁcient weight sharing
for multimodal graphs with a large number of edge types.
8 Conclusion
We presented Decagon, an approach for predicting side effects of drug
pairs. Decagon is a general graph convolutional neural network designed
to operate on a large multimodal graph where nodes can be connected
through a large number of different relation types. We use Decagon to, for
the ﬁrst time, infer a prediction model that can identify side effects of pairs
of drugs. Decagon predicts an association between a side effect and a coprescribed drug pair (i.e., a drug combination) to identify side effects that
cannot be attributed to either drug alone. The graph convolutional model
achieves excellent accuracy on the polypharmacy side effect prediction
task, allows us to consider nearly a thousand different side effect types
integrating molecular and patient population data, and provides insights
into clinical manifestation of drug-drug interactions.
CC-BY-NC-ND 4.0 International license
certified by peer review) is the author/funder, who has granted bioRxiv a license to display the preprint in perpetuity. It is made available under
The copyright holder for this preprint (which was not
this version posted May 18, 2018.
 
bioRxiv preprint
Modeling Polypharmacy Side Effects with Graph Convolutional Networks
There are several directions for future work. Our approach integrates
molecular protein-protein and drug-target networks together with
population-level patients’ side effect data. Other sources of biomedical
information, such as dosed concentration levels of drugs, might be relevant
formodelingsideeffectsofdrugpairs, andwehopetoinvestigatetheutility
of integrating them into the model. As Decagon’s graph convolutional
model is a general approach for multirelational link prediction in any
multimodal network, it would be interesting to apply it to other domains
and problems, for example, ﬁnding associations between patient outcomes
and comorbid diseases, or for identifying dependencies between mutant
phenotypes and gene-gene interactions.
This research has been supported in part by NSF, NIH BD2K, DARPA
SIMPLEX,StanfordDataScienceInitiative, andChanZuckerbergBiohub.
Conﬂict of Interest: none declared.