A Self-Driving Robot Using Deep Convolutional
Neural Networks on Neuromorphic Hardware
Tiffany Hwu∗†, Jacob Isbell‡, Nicolas Oros§, and Jeffrey Krichmar∗¶
∗Department of Cognitive Sciences
University of California, Irvine
Irvine, California, USA, 92697
†Northrop Grumman
Redondo Beach, California, USA, 90278
‡Department of Electrical and Computer Engineering
University of Maryland
College Park, Maryland, USA, 20742
§BrainChip LLC
Aliso Viejo, California, USA, 92656
¶Department of Computer Sciences
University of California, Irvine
Irvine, California, USA, 92697
Email: 
Abstract—Neuromorphic computing is a promising solution
for reducing the size, weight and power of mobile embedded
systems. In this paper, we introduce a realization of such a
system by creating the ﬁrst closed-loop battery-powered communication system between an IBM TrueNorth NS1e and an
autonomous Android-Based Robotics platform. Using this system,
we constructed a dataset of path following behavior by manually
driving the Android-Based robot along steep mountain trails and
recording video frames from the camera mounted on the robot
along with the corresponding motor commands. We used this
dataset to train a deep convolutional neural network implemented
on the TrueNorth NS1e. The NS1e, which was mounted on the
robot and powered by the robot’s battery, resulted in a selfdriving robot that could successfully traverse a steep mountain
path in real time. To our knowledge, this represents the ﬁrst time
the TrueNorth NS1e neuromorphic chip has been embedded on
a mobile platform under closed-loop control.
I. INTRODUCTION
As the need for faster, more efﬁcient computing continues
to grow, the observed rate of improvement of computing speed
shows signs of leveling off . In response, researchers have
been looking for new strategies to increase computing power.
Neuromorphic hardware is a promising direction for computing, taking a brain-inspired approach to achieve magnitudes
lower power than traditional Von Neumann architectures ,
 . Mimicking the computational strategy of the brain, the
hardware uses event-driven, massively parallel and distributed
processing of information. As a result, the hardware has low
size, weight, and power, making it ideal for mobile embedded
systems. In exploring the advantages of neuromorphic hardware, it is important to consider how this approach might be
used to solve our existing needs and applications.
One such application is autonomous driving . In order
for an autonomous mobile platform to perform effectively,
it must be able to process large amounts of information
simultaneously, extracting salient features from a stream of
sensory data and making decisions about which motor actions
to take . Particularly, the platform must be able to segment
visual scenes into objects such as roads and pedestrians .
Deep convolutional networks (CNNs) have proven very
effective for many tasks, including self-driving. For instance,
Huval et al. used deep learning on a large dataset of highway
driving to perform a variety of functions such as object and
lane detection . Recently, Bojarski et al., showed that tasks
such as lane detection do not need to be explicitly trained .
In their DAVE-2 network, an end-to-end learning scheme was
presented in which the network is simply trained to classify
images from the car’s cameras into steering commands learned
from real human driving data. Intermediate tasks such as lane
detection were automatically learned within the intermediate
layers, saving the work of selecting these tasks by hand.
Such networks are suitable for running on neuromorphic
hardware due to the large amount of parallel processing
involved. In fact, many computer vision tasks have already
been successfully transferred to the neuromorphic domain,
such as handwritten digit recognition and scene segmentation . However, less work has been done embedding
 
the neuromorphic hardware on mobile platforms. An example
includes NENGO simulations embedded on SpiNNaker boards
controlling mobile robots , . Addressing the challenges
of physically connecting these components, as well as creating
a data pipeline for communication between the platforms is an
open issue, but worth pursuing given the small size, weight
and power of neuromorphic hardware.
At the Telluride Neuromorphic Cognition Workshop 2016,
we embedded the the IBM TrueNorth NS1e on the
Android-Based Robotics platform to create a self-driving
robot that uses a deep CNN to travel autonomously along an
outdoor mountain path. The result of our experiment is a robot
that is able to use video frame data to steer along a road in
real time with low-powered processing.
II. PLATFORMS
A. IBM TrueNorth
A) Core connectivity on the TrueNorth. Each neuron on a core
connects to every other neuron on the core, and can connect to other cores
through input lines. B) The IBM NS1e board. Adapted from .
The IBM TrueNorth (Figure 1) is a neuromorphic chip with
a multicore array of programmable neurons. Within each core,
there are 256 input lines connected to 256 neurons through a
256x256 synaptic crossbar array. Each neuron on a core is
connected with every other neuron on the same core through
the crossbar, and can communicate with neurons on other cores
through their input lines. In our experiment, we used the IBM
NS1e board, which contains 4096 cores, 1 million neurons,
and 256 million synapses. An integrate-and-ﬁre neuron model
having 23 parameters was used, with trinary synaptic weights
of -1, 0, and 1. As the TrueNorth has been used to run
many types of deep convolutional networks, and is able to
be powered by an external battery, it served as ideal hardware
for this task .
B. Android Based Robotics
The Android-Based Robotics platform (Figure 2) was created at the University of California, Irvine, using entirely
off-the-shelf commodity parts and controlled by an Android
Left: Side view of CARLrado. A pan and tilt unit supports
the Samsung Galaxy S5 smartphone, which is mounted on a Dagu Wild
Thumper chassis. A plastic enclosure holds the IOIO-OTG microcontroller
and RoboClaw motor controller. A velcro strip on top of the housing can
attach any other small components. Top Right: Front view of CARLrado.
Three front-facing sonars can detect obstacles. Bottom Right: Close-up of
IOIO-OTG and motor controller.
phone . The robot used in the present experiment, the
CARLorado, was constructed from a Dagu Wild-Thumper
All-Terrain chassis that could easily travel through difﬁcult
outdoor terrain. A IOIO-OTG microcontroller (SparkFun Electronics) communicated through a Bluetooth connection with
the Android phone (Samsung Galaxy S5). The phone provided
extra sensors such as a built-in accelerometer, gyroscope,
compass, and global positioning system (GPS). The IOIO-
OTG controlled a pan and tilt unit that held the phone, a
motor controller for the robot wheels, and ultrasonic sensors
for detecting obstacles. Instructions for building the robot
can be found at: 
A differential steering technique was used, moving the left
and right sides of the robot at different speeds for turning.
The modularity of the platform made it easy to add extra units
such as the IBM TrueNorth.
Software for controlling the robot was written in Java
using Android Studio. With various support libraries for
the IOIO-OTG, open-source libraries for computer vision
such as OpenCV, and sample Android-Based Robotics code
( it was straightfoward to develop intelligent controls.
III. METHODS AND RESULTS
A. Data Collection
First, we created datasets of ﬁrst-person video footage of
the robot and motor commands issued to the robot as it was
manually driven along a mountain trail in Telluride, Colorado
(Figures 5 and 8 top). This was done by creating an app
in Android Studio that was run on both a Samsung Galaxy
S5 smartphone and a Samsung Nexus 7 tablet (Figure 3).
The smartphone was mounted on the pan and tilt unit of the
robot with the camera facing ahead. JPEG images captured
by the camera of the smartphone were saved to an SD card
Data collection setup. Video from the smartphone mounted on the
robot was sent to the tablet through a Wi-Fi direct connection. A human
operator used two joysticks on the touchscreen of the tablet to issue motor
commands, which were sent to the phone through the same connection. Video
frames and commands were saved to the SD card on the smartphone.
Convolution of layers in a CNN on TrueNorth. Neurons in each layer
are arranged in three dimensions, which can be convolved using a ﬁlter of
weights. Convolution occurs among the ﬁrst two dimensions, and the third
dimension represents different features. This allows the convolution to be
divided along the feature dimension into groups (indicated by blue and yellow
colors) that can be computed separately on different cores. Adapted from .
at 30 frames per second. The JPEGs had a resolution of 176
by 144 pixels. Through a Wi-Fi direct connection, the video
frame data was streamed from the phone to a handheld tablet
that controlled the robot. The tablet displayed controls for
moving the robot forward and steering the robot left and right.
These commands from the tablet (left, right, forward) were
streamed to the smartphone via the Wi-Fi direct connection
and saved on the smartphone as a text ﬁle. A total of 4
datasets were recorded on the same mountain trail, with each
dataset recording a round trip of .5 km up and down a single
trail segment. To account for different lighting conditions,
we spread the recordings across two separate days, and on
each day we performed one recording in the morning and
one in the afternoon. In total we collected approximately 30
minutes of driving data. By matching the time stamps of motor
commands to video images, we were able to determine which
commands corresponded to which images. Images that were
not associated with a left, right, or forward movement such
as stopping were excluded. Due to lack of time, only the ﬁrst
day of data collection was used in actual training.
B. Eedn Framework
Fig. 5. The CNN classiﬁed images into three classes of motor output: turning
left, moving forward, and turning right. Accuracy of training was above 90
Fig. 6. Physical connection of TrueNorth NS1e and CARLorado. The NS1e is
attached to the top of the housing of the electronics housing using velcro. The
NS1e is powered by running connections from the motor controller within the
housing. The motor controller itself is powered by a Ni-MH battery attached
to the bottom of the robot chassis.
We used the dataset to train a deep convolutional neural network using an Energy-Efﬁcient Deep Neuromorphic Network
(EEDN), a network that is structured to run efﬁciently on the
TrueNorth . In summary, a traditional CNN is transferred
to the neuromorphic domain by connecting the neurons on the
TrueNorth with the same connectivity as the original CNN.
Input values to the original CNN are translated into input
ﬁring patterns on EEDN, and the resulting ﬁring rates of each
neuron correspond to the values seen in the original CNN.
To distribute a convolutional operation among cores of the
TrueNorth, the layers are divided along the feature dimension
into groups (Figure 4). When a neuron targets multiple core
inputs, exact duplicates of the neuron and synaptic weights
are created, either on the same core or a different core.
The response of each neuron is the binary thresholded sum
of synaptic input, in which the trinary weight values are
determined by different combinations of two input lines. A
more complete explanation of the EEDN ﬂow and structure
of the convolutional network (1 chip version) can be found in
Data pipeline for running CNN. Training is done separately using the MatConvNet package using Titan X GPUs. A Wi-Fi connection between the
Android Galaxy S5 and IBM NS1e transmit spiking data back and forth.
Mountain trail in Telluride, Colorado. Above: Google Satellite
image of trail (highlighted) Imagery c⃝2016 Google. Below: Testing CNN
performance.
The video frames were preprocessed by down-sampling
them to a resolution of 44 by 36 pixels and separating them
into red, green, and blue channels. The output is a single layer
of three neuron populations, corresponding to three classes of
turning left, going straight, or turning right, as seen in Figure
Using the MatConvNet package, a Matlab toolbox for
implementing convolutional neural networks, the network was
trained to classify images into motor commands. For instance,
if the image showed the road to be more towards the left of
center, the CNN would learn the human-trained command of
steering to the left. To test accuracy, the dataset was split into
train and test sets by using every ﬁfth frame as a test frame (in
total 20 percent of the dataset). We achieved an accuracy of
over 90 percent, which took 10K iterations and a few hours to
train. Training was performed separately from the TrueNorth
chip, producing trinary synaptic weights (-1,0,1) that could be
used interchangeably in a traditional CNN or EEDN.
C. Data Pipeline
With the methods used in , the weights of the network
were transferred to the TrueNorth NS1e. The CNN was able
to run on the TrueNorth by feeding input from the camera
on the Android Galaxy S5 to the TrueNorth using a TCP/IP
connection. In order to achieve this, the phone had to replicate
the preprocessing used when training the network. The preprocessing on the phone was achieved by using the Android
OpenCV scaling function to downsample the images. Then,
the images were separated into red, green, and blue channels.
Next, the ﬁlter kernels from the ﬁrst layer of the CNN were
pulled from the EEDN training output and applied to the image
using a 2D convolution function from the Android OpenCV
library. The result of the convolution was thresholded into
binary spiking format, such that any neuron with an activity
greater than zero was set to spike. The spiking input to the
TrueNorth was sent in XYF format, where X, Y, and F are the
three dimensions to describe the identity of a spiking neuron
within a layer. At each tick of the TrueNorth NS1e, a frame
was fed into the input layer by sending the XYF coordinates
of all neurons that spiked for that frame. A detailed diagram of
the pipeline is found in Figure 7. Output from the TrueNorth
NS1e was sent back to the smartphone through the TCP/IP
connection in the form of a class histogram, which indicated
the ﬁring activity of the output neurons. The smartphone could
then calculate which output neuron was the most active and
issue the corresponding motor command to the robot.
D. Physical Connection of Platforms
The TrueNorth was powered by connecting the robot’s
battery terminals from the motor controller to a two-pin
battery connection on the NS1e board. It was then secured
with velcro to the top of the housing for the IOIO and
motor controller. A picture of the setup is seen in Figure
6. The robot, microcontroller, motor controller, servos, and
NS1e were powered by a single Duratrax NiMH Onyx 7.2V
5000mAh battery.
E. Testing
With this wireless, battery-powered setup, the trained CNN
was able to successfully drive the robot on the mountain
trail (Figure 8). A wireless hotspot was necessary to create
a TCP connection between the TrueNorth NS1e and the
Android phone. We placed the robot on the same section of
the trail used for training. The robot steered according to the
class histograms received from the TrueNorth output, which
provided total ﬁring counts for each of the three output neuron
populations. Steering was done by using the histogram to
determine which output population ﬁred the most, and steering
in that direction. As a result, the robot stayed near the center
of the trail, steering away from green brush on both sides
of the trail. At some points, the robot did travel off the trail
and needed to be manually redirected back towards the center
of the trail. The robot drove approximately .5 km uphill,
and the returned .5 km downhill with minimal intervention.
It should be noted that there was a steep dropoff on the
south side of the trail. Therefore, extra care was taken to
make sure the robot did not tumble down the mountainside.
A video of the path following performance can be seen at
 
IV. DISCUSSION
To the best of our knowledge, the present setup represents
the ﬁrst time the TrueNorth NS1e has been embedded on a
mobile platform under closed loop control. It demonstrated
that a low power neuromorphic chip could communicate with a
smartphone in an autonomous system. Furthermore, it showed
that a CNN using the EEDN framework was sufﬁcient to
achieve a self-driving application. Furthermore, this complete
system ran in real-time and was powered by a single off-theshelf hobby grade battery, demonstrating the power efﬁciency
of the TrueNorth NS1e.
An expansion of this work would require better quantiﬁcation of the robot’s performance. This could be achieved by
tracking the number of times the robot had to be manually
redirected, or comparing the CNN classiﬁer accuracy on the
training set of images versus the classiﬁer accuracy on the
actual images captured in realtime. Increasing the amount
of training data would likely increase the classiﬁer accuracy,
since only 15 minutes of data were used for the training as
compared to other self-driving CNNs , , which have used
several days or even weeks of training. Our success was due
in part to the simplicity of the landscape, with an obvious red
hue to the dirt road and bold green hue for the bordering
areas. It would therefore be useful to test the network in
more complex settings. Additionally, while the main purpose
of the project was to demonstrate a practical integration of
neuromorphic and non-neuromorphic hardware, it would also
be useful to calculate the power savings of running the CNN
computations on neuromorphic hardware instead of directly
on the smartphone.
V. CONCLUSION
In this trailblazing study, we have demonstrated a novel
closed-loop system between a robotic platform and a neuromorphic chip, operating in a rugged outdoor environment.
We have shown the advantages of integrating neuromorphic
hardware with popular machine learning methods such as
deep convolutional neural networks. We have shown that
neuromorphic hardware can be integrated with smartphone
technology and off the shelf components resulting in a complete autonomous system. The present setup is one of the
ﬁrst demonstrations of using neuromorphic hardware in an
autonomous, embedded system.
ACKNOWLEDGMENT
The authors would like to thank Andrew Cassidy and
Rodrigo Alvarez-Icaza of IBM for their support. This work
was supported by the National Science Foundation Award
number 1302125 and Northrop Grumman Aerospace Systems.
We also would like to thank the Telluride Neuromorphic Cognition Engineering Workshop, The Institute of Neuromorphic
Engineering, and their National Science Foundation, DoD and
Industrial Sponsors.