Communicated by C. Lee Giles
Learning Finite State Machines With Self-clustering
Recurrent Networks
Zheng Zeng
Rodney M. Goodman
Department of Electrical Engineering, 11 6-81,
California Institute of Technology, Pasadena, C A 92125 USA
Padhraic Smyth
Jet Propulsion Laboratory, 238-420, California Institute of Technology
Pasadena, C A 91209 USA
Recent work has shown that recurrent neural networks have the ability
to learn finite state automata from examples. In particular, networks
using second-order units have been successful at this task. In study-
ing the performance and learning behavior of such networks we have
found that the second-order network model attempts to form clusters
in activation space as its internal representation of states. However,
these learned states become unstable as longer and longer test input
strings are presented to the network. In essence, the network "forgets"
where the individual states are in activation space. In this paper we
propose a new method to force such a network to learn stable states by
introducing discretization into the network and using a pseudo-gradi-
ent learning rule to perform training. The essence of the learning rule
is that in doing gradient descent, it makes use of the gradient of a sig-
moid function as a heuristic hint in place of that of the hard-limiting
function, while still using the discretized value in the'tfeedback up-
date path. The new structure uses isolated points in activation space
instead of vague clusters as its internal representation of states. It is
shown to have similar capabilities in learning finite state automata as
the original network, but without the instability problem. The pro-
posed pseudo-gradient learning rule may also be used as a basis for
training other types of networks that have hard-limiting threshold ac-
tivation functions.
1 Introduction
Theoretical aspects of grammatical inference have been studied exten-
sively in the past . A variety of di-
rect search algorithms have been proposed for learning grammars from
positive and negative examples (strings) 
@ 1993 Massachusetts Institute of Technology
Learning Finite State Machines
1982; Muggleton 1990; Tomita 1982). More recently recurrent neural net-
works have been investigated as an alternative method for learning sim-
ple grammars . A variety of network architectures and learn-
ing rules have been proposed. All have shown the capability of recurrent
networks to learn different types of simple grammars from examples.
In this paper we restrict the focus to studying a recurrent network's
behavior in learning regular grammars, which are the simplest type of
grammar in the Chomsky hierarchy, and have a one-to-one correspon-
dence to finite state machines . A regular
language can be defined as the language accepted by its corresponding
finite state acceptor: (C,
T, to, 6, F), where
C is the input alphabet.
T is a finite nonempty set of states.
to is the start (or initial) state, an element of T.
6 is the state transition function; 6 : T x C + T.
F is the set of final (or accepting) states, a (possibly empty) subset
The purpose of the study is to obtain a better understanding of re-
current neural networks, their behavior in learning, and their internal
representations, which in turn may give us more insight into their capa-
bility for fulfilling other more complicated tasks.
Giles et al. have proposed a "second-order" recurrent net-
work structure to learn regular languages. Henceforth, all references to
second-order recurrent networks imply the network structure described
in Giles et al. . Our independent experiments have confirmed
their results that second-order nets can learn various grammars well. In
addition, we found that this structure learns these grammars more eas-
ily than the simple recurrent network structure (or the Elman structure)
 which does not use second-order units. However, a stabil-
ity problem emerges with trained networks as longer and longer input
strings are presented [similar behavior in recurrent networks has been
found in different contexts start to merge
and ultimateIy become indistinguishable. (Details of these experiments
will be explained in Section 2.) To solve this problem we propose a
discretized combined network structure, as well as a pseudo-gradient
learning method, which can be shown to successfully learn stable state
representations. In the proposed network, instead of clusters, the states of
the network are actually isolated points in hidden unit activation space.
2 The "Unstable State" Behavior of a Learned Second-Order Net -
We found that the second-ordej network can be represented as two sep-
arate networks controlled by a gating switch (Fig. 1) as follows: the
network consists of two first-order networks with shared hidden units.
The common hidden unit values are copied back to both net0 and netl
after each time step, and the input stream acts like a switching control
to enable or disable one of the two nets. For example, when the current
input is 0, net0 is enabled while netl is disabled. The hidden unit val-
ues are then decided by the hidden unit values from the previous time
step weighted by the weights in net0. The hidden unit activation func-
tion is the standard sigmoid function, f ( x ) = 1/(1 + e-').
Note that this
representation of a second-order network, as two networks with a gat-
ing function, provides insight into the nature of second-order nets, i.e.,
clearly they have greater representational power than a single simple re-
current network, given the same number of hidden units. This structure
was used in our initial experiments.
We use Sy to denote the activation value of hidden unit number i at
time step t. wi is the weight from layer 1 node j to layer 2 node i in netn.
n = 0 or 1 in the case of binary inputs. Hidden node Sk is chosen to be a
special indicator node, whose activation should be close to 1 at the end
of a legal string, or close to 0 otherwise. At time f = 0, initialize S: to
be 1 and all other Sps to be 0, i.e., assume that the null string is a legal
string. The network weights are initialized randomly with a uniform
distribution between -1 and 1.
In the experiments described here we used the following grammars:
Tomita grammars :
o #&any string not containing "000" as a substring.
o #5-even number of 0s and even number of Is.
o #7--0'1*0*1*.
Simple vending machine : The machine
takes in three types of coins: nickel, dime, and quarter. Starting
Learning Finite State Machines
Figure 1: Equivalent First-order structure of second-order network.
from empty, a string of coins is entered into the machine. The
machine “accepts,” i.e., a candy bar may be selected, only if the
total amount of money entered exceeds 30 cents.
A training set consists of randomly chosen variable length strings with
length uniformly distributed between 1 and Lmax, where Lmax is the maxi-
mum training string length. Each string is marked as “legal” or ”illegal”
according to the underlying grammar. The learning procedure is a gradi-
ent descent method in weight space [similar to that proposed by Williams
and Zipser .
In a manner different from that described in Giles et al. , we
present the whole training set (which consists of 100 to 300 strings with
Lmax in the range of 10 to 201, all at once to the network for learning,
Zheng Zeng, Rodney Goodman, and Padhraic Smyth
Figure 2 Hidden unit activation plot So-S3 in learning Tomita grammar #4.
(SO is the x axis.) (a)-(e) are plots of all activations on the training data set.
(a) During 1st epoch of training. (b) During 16th epoch of training. (c) During
21st epoch of training. (d) During 31st epoch of training. (e) After 52 epochs,
training succeeds, weights are fixed. . We found that the network can
successfully learn the machines (2-10 states) we tested on, with a small
number of hidden units (4-5) and less than 500 epochs, agreeing with
the results described in Giles et al. .
To examine how the network forms its internal representation of
states, we recorded the hidden unit activations at every time step of
every training string in different training epochs. As a typical exam-
ple, shown in Figure Za-e, are the So-S3 activation-space records of the
learning process of a 4-hidden-unit network. The underlying grammar
Learning Finite State Machines
was Tomita #4, and the training set consisted of 100 random strings with
= 15. Note that here the dimension SO is chosen because of it be-
ing the important “indicator node,” and 53 is chosen arbitrarily. The
observations that follow can be made from any of the 2-D plots from
any run in learning any of the grammars in the experiments. Each point
corresponds to the activation pattern of a certain time step in a certain
string. Each plot contains the activation points of all time steps for all
training strings in a certain training epoch as described in the caption.
The following behavior can be observed:
1. As learning takes place, the activation points seem to be pulled in
several different directions, and distinct clusters gradually appear
(Fig. 2a-e).
2. After learning is complete, i.e., when the error on each of the train-
ing strings is below a certain tolerance level, the activation points
form distinct clusters, which consist of segments of curves (Fig. 2e).
3. Note in particular that there exists a clear gap between the clusters
in the So (indicator) dimension, which means that the network is
making unambiguous decisions for all the training strings and each
of their prefix strings (Fig. 2e).
4. When given a string, the activation point of the network jumps from
cluster to cluster as input bits are read in one by one. Hence, the
behavior of the network looks just like a state machine’s behavior.
It is clear that the network attempts to form clusters in activation
space as its own representation of states and is successful in doing so.
Motivated by these observations, we applied the k-means clustering algo-
rithm to the activation record in activation space of the trained network
to extract the states [instead of simply dividing up the space evenly as in
Giles et al. (199211. In choosing the parameter k, we found that if k was
chosen too small, the extracted machine sometimes could not classify all
the training strings correctly, while a large k always guaranteed perfect
performance on training data. Hence, k was chosen to be a large number,
for example, 20.
The initial seeds were chosen randomly. We then defined each cluster
found by the k-means algorithm to be a “state” of the network and used
the center of each cluster as a representative of the state. The transition
rules for the resulting state machine are calculated by setting the
nodes equal to a cluster center, then applying an input bit (0 or 1 in
binary alphabet case), and calculating the value of the S: nodes. The
transition from the current state given the input bit is then to the state
that has a center closest in Euclidean distance to the obtained St values.
In all our experiments, the resulting machines were several states larger
than the correct underlying minimal machines. Moore’s state machine
reduction algorithm was then applied to the originally extracted machine
Zheng Zeng, Rodney Goodman, and Padhraic Smyth
to get an equivalent minimal machine which accepts the same language
but with the fewest possible number of states. Similar to the results in
Gila et al. , we were able to extract machines that are equivalent to
the minimal machines corresponding to the underlying grammars from
which the data was generated.
These trained networks perform well in classifying unseen short
strings (not much longer than Lmax). However, as longer and longer
strings are presented to the network, the percentage of strings correctly
classified drops substantially. Shown in Figure 2f is the recorded activa-
tion points for So-& of the same trained network from Figure 2e when
long strings are presented. The original net was trained on 100 strings
with Lmax = 15, whereas the maximum length of the test strings in Fig-
ure 2e was 50. Activation points at all time steps for all test strings are
Several observations can be made from Figure 2e:
1. The well-separated clusters formed during training begin to merge
together for longer and longer strings and eventually become in-
distinguishable. These points in the center of Figure 2e correspond
to activations at time steps longer than Lma, = 15.
2. The gap in the SO dimension disappears, which means that the
network could not make hard decisions on long strings.
3. The activation points of a string stay in the original clusters for
short strings and start to diverge from them when strings become
longer and longer. The diverging trajectories of the points form
curves with sigmoidal shape.
Similar behavior was observed for 14 out of 15 of the networks suc-
cessfully trained on different machines, excluding the vending machine
model. Some of the networks started to misclassify as early as when the
input strings were only 30% longer than Lmx. Each of these 14 trained
networks made classification errors on randomly generated test sets with
maximum string length no longer than 5Lmax. The remaining one net-
work was able to maintain a stable representation of states for very long
strings (up to length 1000). Note that the vending machine was excluded
because it is a trivial case for long strings, i.e., all the long strings are
legal strings so there is no need to distinguish between them. This is not
the case for the other machines.
3 A Network That Can Form Stable States
From the above experiments it is clear that even though the network is
successful in forming clusters as its state representation during training,
it often has difficulty in creating stable clusters, i.e., to form clusters such
that the activation points for long strings converge to certain centers of
Learning Finite State Machines
each cluster, instead of diverging as observed in our experiments. The
problem can be considered as inherent to the structure of the network
where it uses analog values to represent states, while the states in the
underlying state machine are actually discrete. One intuitive suggestion
to fix the problem is to replace the analog sigmoid activation function in
the hidden units with a threshold function:
1.0 if x 2 0.5
0.0 if x < 0.5.
In this manner, once the network is trained, its representation of states
(i.e., activation pattern of hidden units) will be stable and the activation
points will not diverge from these state representations once they are
formed. However, there is no known method to train such a network,
since one cannot take the gradient of such activation functions.
An alternative approach would be to train the original second-order
network as described earlier, but to add the discretization function D(x)
on the copy back links during testing. The problem with this method is
that one does not know a priori where the formed clusters from training
will be. Hence, one does not have good discretization values to threshold
the analog values in order for the discretized activations to be reset to a
cluster center. Experimental results have confirmed this prediction. For
example, after adding the discretization, the modified network cannot
even correctly classify the training set that it has successfully learned
in training. As in the previous example, after training and without the
discretization, the network's classification rate on the training set was
loo%, while with the discretization added, the rate became 85%. For test
sets of longer strings, the rates with discretization were even worse.
We propose that the discretization be included in both training and
testing in the following manner: Figure 3 shows the structure of the
network with discretization added.
From the formulas below, one can clearly see that in operational mode,
that is, when testing, the network is equivalent to a network with dis-
cretization only:
= f(Cw$-'),
s; = D(h;),
0.8 if x 2 0.5
where D(x) = { 0.2 if x < 0.5,
where Do(x) =
(Here xt is the input bit at time step t. We use hf to denote the analog
value of hidden unit i at time step t, and Sl the discretized value of
hidden unit i at time step t.)
Zheng Zen& Rodney Goodman, and Padhraic Smyth
I I I I I I I I I I I I I I I I I I I I I I I -
I I I I I I I I I I I I I I
I I I I I I I I I I I
Figure 3 A combined network with discretizations.
Hence, the sigmoid nodes can be eliminated in testing to simplify
computation.
During training, however, the gradient of the soft sigmoid function is
made use of in a pseudo-gradient method for updating the weights. The
next section explains the method in more detail.
By adding these discretizations into the network, one might argue
that the capacity of the net is greatly reduced, since each node can now
take on only two distinct values, as opposed to infinitely many values
(at least in theory) in the case of the undiscretized networks. However,
in the case of learning discrete state machines, the argument depends on
the definition of the capacity of the analog network. In our experiments,
14 of 15 of the learned networks have unstable behavior for nontrivial
long strings, so one can say that the capabilities of such networks to
distinguish different states may start high, but deteriorate over time, and
would eventually become zero.
Learning Finite State Machines
4 The Pseudo-Gradient Learning Method
During training, at the end of each string: 9,
xl, ..., xL, the mean squared
error is calculated as follows (note that L is the string length, h/j is the
analog indicator value at the end of the string):
E = -(I& - T)',
{ 1 if "legal"
if "illegal".
T = target =
Update wi, the weight from node j to node i in netn, at the end of
each string presentation:
= (h; - T).,
where 8/&! is what we call the "pseudo-gradient'' with respect to wt.
t, k need to be calculated forward in time at each time step:
To get the pseudo-gradient %i/aw;, pseudo-gradients %:law;
(Initially, set: ah,/aw; = 0,
Vi, j , n, k)
As can be seen clearly, in carrying out the chain rule for the gradient
we replace the real gradient aSf-'/&i, which is zero almost everywhere,
by the pseudo-gradient sf-'/&!.
The justification of the use of the pseu-
do-gradient is as follows: suppose we are standing on one side of the
hard threshold function S(x), at point xo > 0, and we wish to go downhill.
The real gradient of S ( x ) would not give us any information, since it is
zero at XO. If instead we look at the gradient of the function f(x), which
is positive at xo and increases as xo -, 0, it tells us that the downhill
direction is to decrease XO, which is also the case in S(x). In addition, the
magnitude of the gradient tells us how close we are to a step down in
S(x). Therefore, we can use that gradient as a heuristic hint as to which
direction (and how close) a step down would be. This heuristic hint is
what we used as the pseudo-gradient in our gradient update calculation.
Zheng Zeng, Rodney Goodman, and Padhraic Smyth
oio oio 0.k oh
o.\,.;o,,*9,
Figure 4 Discretized network learning Tomita grammar #4. (a) ho-h3 during
1st epoch of training. (b) ho-h3 during 15th epoch of training. (c) h&3
27 epochs when training succeeds, weights are fixed. (d) SO-s3, the discretized
copy of hod3 in (c).
5 Experimental Results
Shown in Figure 4a-c are the ho-h3 activation-space records of the learn-
ing process of a discretized network (h values are the undiscretized values
Learning Finite State Machines
from the sigmoids). The underlying grammar is again the Tomita Gram-
mar #4. The parameters of the network and the training set are the same
as in the previous case. Again, any of the other 2-D plots from any run
in learning any of the grammar in the experiments could have been used
Figure 4c is the final result after learning, where the weights are fixed.
Notice that there are only a finite number of points in the final plot in
the analog activation h-space due to the discretization. Figure 4d shows
the discretized value plot in SO-S~, where only three points can be seen.
Each point in the discretized activation S-space is automatically defined as
a distinct state, no point is shared by any of the states. The transition rules
are calculated as before, and an internal state machine in the network is
thus constructed. In this manner, the network performs self-clustering.
For this example, six points are found in S-space, so a six-state-machine
is constructed as shown in Figure 5a. Not surprisingly this machine
reduces by Moore’s algorithm to a minimum machine with four states,
which is exactly the Tomita Grammar #4 (Fig. 5b). Similar results were
observed for all the other grammars in the experiments.
There are several advantages in introducing discretization into the
1. Once the network has successfully learned the state machine from
the training set, its internal states are stable. The network will
always class@ input strings correctly, independent of the’ lengths
of these strings.
2. No clustering is needed to extract out the state machine, since in-
stead of using vague clusters as its states, the network has formed
distinct, isolated points as states. Each point in activation space is
a distinct state. The network behaves exactly like a state machine.
3. Experimental results show that the size of the state machines ex-
tracted out in this approach, which need not be decided manu-
ally (no need to choose k for k-means) as in the previous undis-
cretized case, is much smaller than found previously by the clus-
tering method.
It should be noted that convergence has a different meaning in the case
of training discrete networks as opposed to the case of training analog
networks. In the analog networks’ case, learning is considered to have
converged when the error for each sample is below a certain error tolerance
level. In the case of discrete networks, however, learning is stopped and
considered to have converged only when zero error is obtained on all
samples in the training set. In the experiments reported in this paper the
analog tolerance level was set to 0.2. The discretized networks took on
average 30% longer to train in terms of learning epochs compared to the
analog networks for this specific error tolerance level.
Zheng Zeng, Rodney Goodman, and Padhraic Smyth
Figure 5 Extracted state machine from the discretized network after learning
Tomita grammar #4 (double circle means “accept” state, single circle means “re-
ject’’ state). (a) Six-state machine extracted directly from the discrete activation
space. (b) Equivalent minimal machine of (a).
6 Conclusion
In this paper we explored the formation of clusters in hidden unit activa-
tion space as an internal state representation for second-order recurrent
networks that learn regular grammars.
These states formed by such a network during learning are not a
stable representation, i.e., when long strings are seen by the network the
states merge into each other and eventually become indistinguishable.
We suggested introducing hard-limiting threshold discretization into
the network and presented a pseudo-gradient learning method to train
such a network. The method is heuristically plausible and experimental
results show that the network has similar capabilities in learning finite
Learning Finite State Machines
state machines as the original second-order network, but is stable re-
gardless of string length since the internal representation of states in this
network consists of isolated points in activation space.
The proposed pseudogradient learning method suggests a general
approach for training networks with threshold activation functions.
Acknowledgments
The research described in this paper was supported in part by ONR and
ARPA under Grants AFOSR-90-0199 and N00014-92-J-1860. In addition
this work was carried out in part by the Jet Propulsion Laboratories,
California Institute of Technology, under a contract with the National
Aeronautics and Space Administration.