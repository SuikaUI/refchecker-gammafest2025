ANZIAM J. 48 (CTAC2006) pp.C436–C449, 2007
Investigation of graph edit distance cost
functions for detection of network anomalies
K. M. Kapsabelis1
P. J. Dickinson2
K. Dogancay3
 
Computer networks are becoming ubiquitous. Accurately monitoring and managing the behaviour of these complex and dynamic
networks is a challenging task. It has become crucial to develop and
employ good network monitoring techniques that assist in identifying and correcting abnormalities that aﬀect network reliability, performance, security and future planning. There has been signiﬁcant
research in the detection of change and anomalous events in computer
networks. A recent novel approach represents the logical communications of a periodically observed network as a time series of graphs and
applies the graph matching technique, graph edit distance, to monitor
and detect anomalous behaviour in the network. To date, only simple
cost functions for graph edit operations have been used in application to computer network monitoring. This article investigates simple
 
for this article, c⃝Austral. Mathematical Soc. 2007. Published October 7, 2007. ISSN
normalisation and non-linear techniques in the graph edit distance
cost function, to improve detection of speciﬁc traﬃc related network
anomalies in the computer network domain.
Introduction
The network as a graph
Graph edit distance
Proposed ged cost functions
Experimental results
Conclusions
References
Introduction
Computer networks are becoming far more complex and dynamic in nature.
From a management perspective, network reliability, quality of service and
security are essential issues faced by network operators. Types of anomalous changes that aﬀect a network include device failures and performance
problems; network, service or user reorganisation; and malicious intrusions or
attacks. Rapid identiﬁcation and handling of such abnormalities has become
a very important, but challenging task.
There has been signiﬁcant research in the detection of anomalous events
Introduction
in computer networks. Statistical techniques are used to consider changes
in traﬃc distribution , topology variations and anomaly detection . Network visualisation techniques are also used to monitor changes
speciﬁc to telecommunications networks . Finite state machine techniques
are used for fault detection , as are signature based approaches .
A novel approach, to complement the aforementioned techniques, is to
treat a periodically observed network as a time series of graphs, and apply graph matching techniques to monitor and detect anomalous changes in
the network . In this approach a network observation is represented by a labelled and directed graph. Individual network devices or users
correspond to uniquely labelled graph vertices. Logical communications or
traﬃc, exchanged between nodes, correspond to directed edges. Edges can
also be weighted. Edge weight model the amount of traﬃc or number of
communications from one node to another.
By observing the network over arbitrary time intervals and describing
each observation as a graph, we build a time series of graphs that characterise the logical behaviour of the network over a period of time. A measure
of graph distance determines the diﬀerence between two consecutive pairs of
graphs. When repeated across the complete time series of graphs this method
produces a time series of numbers that represents the amount of change the
network exhibits over time. In this way, the problem of detecting abnormal change in computer networks shifts to discovering good graph matching
techniques for this domain.
This study focuses on the graph edit distance (ged) measure. The ged
works to ﬁnd the minimum number of edit operations required to transform
one graph (network) to another, to achieve graph isomorphism [3, 4, 15,
A cost function associates a cost with each edit operation.
ged cost functions have been successfully employed for the general case of
network change detection . This study explores new ged cost functions,
to facilitate the detection of speciﬁc traﬃc related anomalies, which would
otherwise be overlooked by the simple cost functions. Matlab simulations
The network as a graph
explore the proposed cost functions experimentally. The techniques produced
from this research can beneﬁt the development of advanced warning systems
used for network monitoring.
Section 2 provides an overview of the deﬁnition of the network described
as a graph. Section 3 describes the ged measure and Section 4 overviews
the cost functions considered in this investigation. Section 5 describes the
experimental procedure used to simulate a computer network implanted with
speciﬁc traﬃc anomalies. This is followed by an overview and discussion of
the results obtained from applying the proposed cost functions to detect these
anomalies. Finally, Section 6 concludes.
The network as a graph
Computer network communications at the logical network layer and above
are represented as graphs .
A single graph G represents the logical
communications of a computer network over an arbitrary observation time
interval. Network nodes, including network devices or users, represent vertices in the graph. Communications, or information exchange between nodes,
represent edges in the graph. A graph, denoted by G = (V, E), consists of a
ﬁnite set of vertices V and ﬁnite set of edges E . Two vertices u, v ∈V
are said to be adjacent if they are endpoints of the same edge . Edges
in G can be directed, denoted by the ordered vertex pair (u, v) ∈E which
is indicative of communications sent from vertex u and received by vertex v.
In this case, graph G is said to be a directed graph, or a digraph.
Objects such as vertices or edges (or their combinations) associated with
a graph are referred to as elements of the graph . A weight is a function
whose domain is a set of graph elements in G. The domain can be restricted
to that of edge or vertex elements only, where the function is referred to as
‘edge weight’ or ‘vertex weight’, respectively. Values of weight assigned to
elements in G may be numerical (for example, the amount of traﬃc as values
Graph edit distance
of edge weight), or symbolic (such as node identiﬁers as values of vertex
weight). The set of possible values in the range of weight function are called
attributes. A unique labelling is a one-to-one weight. A vertex weight in
this computer network representation is assumed to be unique and serves
to identify the individual users or devices (for example, computer Internet
Protocol addresses).
A graph with a unique labelling is called a labelled
The graph G = (V, E, α, β) representing a computer network is vertex
labelled with weight α : V →LV assigning vertex identiﬁer attributes LV to
individual vertices, where the value of the assigned vertex weight is α(u) for
vertex u. Furthermore, α(u) ̸= α(v) , for all u, v ∈V , u ̸= v , since the graph
possesses a unique vertex labelling in this case. Edges are also weighted to
indicate the amount of traﬃc or number of communications observed between
nodes over a ﬁnite time interval, with weight β : E →R+ . The number of
vertices in G = (V, E, α, β) is denoted by |V |, and likewise the number of
edges is denoted by |E|.
Graph edit distance
In computer networks, a number of graph distance measures have been applied to a time series of graphs to investigate network behaviour over time .
This article focusses on the use of the graph edit distance (ged). The concept
of this distance measure is to ﬁnd the minimum number of edit operations
required to transform one graph (network) to another, to achieve graph isomorphism.
Graph isomorphism is where there exists an exact structural
and label correspondence between two graphs . Edit operations in the
ged include edge or node deletions and insertions, and edge weight substitutions . A cost function associates a cost with each edit operation. A
cost is used to attribute a relative weighting for each operation, in comparison to the other operations that occur. Typically, the more likely an edit
Graph edit distance
operation is to occur the smaller is its cost . The resultant minimum edit
cost is a measure of diﬀerence, or change, between two graphs .
Generally, using ged can result in diﬀerent combinations when matching
one graph to another, as vertex labels do not necessarily need to be unique
or even labelled . Such a matching problem is considered to be an
NP-complete problem and requires exponential time and space to ﬁnd the
optimal solution . As previously stated, in computer networks, each vertex
is assumed to be uniquely labelled, to represent individual nodes within the
network. As a result, there is only one possible combination to match one
graph with another, and the computational complexity required to calculate the ged becomes a linear time problem . Consequently, vertex
substitution is not a required or valid ged edit operation for this application .
In computer networks, the ged d1(G, H), between two labelled graphs
G = (VG, EG, αG, βG) and H = (VH, EH, αH, βH) , representing two consecutive observations of the communications in a computer network, is
n∈VG\(VG∩VH)
n∈VH\(VG∩VH)
e∈EG\(EG∩EH)
e∈EH\(EG∩EH)
where Cnd(n) is the cost of deleting a node n; Cni(n) is the cost of inserting a node n; Ces(e) is the cost of substituting an edge weight for an edge e;
Ced(e) is the cost of deleting an edge e; Cei(e) is the cost of inserting an edge e;
and thus the cost function is Cf(n, e) = (Cnd(n), Cni(n), Ces(e), Ced(e), Cei(e)) .
The underlying cost function has a crucial inﬂuence on the performance
of the ged matching technique and inferring the cost of edit operations is
largely dependant on the problem domain .
Speciﬁc to network change detection, a number of simple ged cost functions have been proposed in past research. One such measure that considers
Proposed ged cost functions
both network topology and traﬃc is
c [|VG| + |VH| −2|VG ∩VH|] +
|βG(e) −βH(e)|
e∈EG\(EG∩EH)
e∈EH\(EG∩EH)
In this measure a unity cost for any node edit operation (deletion or insertion) is applied. Thus the total cost for all node edit operations is described
simply as the diﬀerence between the total number of vertex elements in both
graphs and all graph vertex elements in common. A positive constant c is
applied to each node cost, which allows the importance to be placed on node
operations relative to the weight changes on the edges . To simplify notation this measure considers the graphs to be fully connected and an edge
weight of zero is assigned to each edge where e ∈EG (e ∈EH) does not exist
in G (H) . Thus, edge insertion, deletion, and edge weight substitutions
are treated uniformly. The cost of edge weight substitution is deﬁned by the
absolute diﬀerence between weights for each edge in both graphs. As such,
the cost Ces(e) of changing weight βG(e) on edge e ∈EG into βH(e) on edge
e ∈EH is deﬁned as |βG(e) −βH(e)| . In the case of a deletion of edge
e ∈EG with weight βG(e), a cost of βG(e) is incurred, and alternately in the
case of inserting an edge e ∈EH there is a cost of βH(e).
This simple ged measure (d2) performs quite successfully for the general
case of detecting network change in both topology and traﬃc. It is reactive
to any change in traﬃc that occurs in the network and does not measure the
relative change experienced on each edge in the network.
Proposed ged cost functions
For the purpose of network anomaly detection, it is important that the ged
measures are particularly sensitive to relatively signiﬁcant traﬃc variation,
Proposed ged cost functions
but insensitive to random variations that can occur during normal network
operation.
Under normal operating conditions network devices communicate at diﬀerent frequencies and traﬃc rates, depending on the nature of
communications.
As such, the observed traﬃc ﬂows resultant from such
communications have vastly diﬀerent absolute traﬃc values (edge weights).
Therefore is is important to consider the relative change observed in a traﬃc
ﬂow (edge), to more accurately measure signiﬁcant or abnormal change over
typical traﬃc variations.
Example anomalies of interest to network operators include device failures
or malfunctions, such as a runaway process on a device paging across the
network to a ﬁle server or a service failure ; and malicious intrusions such
as Denial of Service attacks . These types of anomalies of interest can
manifest a signiﬁcant change on one or more traﬃc ﬂows (edges).
With this in mind, we investigated cost functions endeavouring to improve
the existing ged measure outlined in d2.
As described for Equation (2),
the measures developed assume the graphs to be fully connected to simplify
notation. The application of normalisation and non-linear techniques to edge
costs in the ged cost function were investigated for this purpose.
A simple method to realise relative change in edge cost is to employ
normalisation techniques [5, 14, 18, e.g.]. The edge cost incurred for any edge
edit (deletion, insertion or substitution) were normalised by the maximum
of the two edge weights being compared; the sum of the two edge weights;
or the minimum value of the two edge weights being compared.
A simple method to accentuate relatively large changes in edge weight
and hide small changes due to typical traﬃc variations is to employ nonlinear mathematical functions. Several simple non-linear functions have been
explored, including exponential and power functions.
An example of an
investigated ged cost function is described in Equation (3). The edge costs
in this measure have a power function applied, with normalisation by the
minimum of the two edge weights. In order to avoid the occurrence of a
Experimental results
divide by zero for an edge deletion or insertion, each edge weight considered
in the cost function has a value of ϵ = 1 added.
c [|VG| + |VH| −2|VG ∩VH|]
|(βG(e) + ϵ) −(βH(e) + ϵ)|2
(min(βG(e), βH(e)) + ϵ)2
e∈EG\(EG∩EH)
(βG(e) + ϵ)2 +
e∈EH\(EG∩EH)
(βH(e) + ϵ)2 .(3)
Experimental results
The ged cost functions developed in this study were applied to a computer
network simulated in Matlab, to investigate their performance in detecting
speciﬁc anomalous changes in network traﬃc. Only one network anomaly
scenario is detailed in this article.
A time series of 100 directed and weighted graphs, each with a size of
10 nodes, were generated. The topology of the ﬁrst graph in the time series
was randomly generated with an edge density of 40%. A random topological
structure was used for this purpose, as the ged measure is independent of
the network topology . An identical network topology was imposed on all
graphs in the time series, in order to investigate the response of the ged cost
functions to network traﬃc variations alone. The traﬃc values assigned to
each edge was computed using either of two Poisson distributions functions,
to simulate traﬃc ﬂows that operate at diﬀerent rates or frequencies.
The experiment detailed in this article was the introduction of two outliers
in the time series of graphs, to simulate two relatively large, anomalous
changes in traﬃc. The ﬁrst outlier was a large relative (and large absolute)
increase in edge weight on an edge in graph 25. Such an outlier could describe
the beginning of a Denial of Service attack, for example. The second outlier
Experimental results
ged measure d2
ged measure d3
Figure 1: Response to the simulated outliers by (a) d2, ged with simple
cost functions, and (b) d3, ged with non-linear cost functions.
was a large relative decrease in edge weight on an edge in graph 75. Compared
to the ﬁrst outlier, the second outlier had a smaller absolute change in edge
weight. This might simulate the malfunction of a device or service.
The change detected by the original ged with simple cost functions, d2, in
response to the time series of graphs described in this experiment is demonstrated in Figure 1(a): the outlier anomalous change injected at graph 25
is detected, at time points 24 and 25. However, the outlier in graph 75 is
not detected using this simple cost function. Since the absolute amount of
change injected in graph 75 is low compared to that injected at graph 25, this
change appears to be concealed by the typical variation of traﬃc occurring
in the network.
Applying d3 to the same simulated time series of graphs, results in the response also detailed in Figure 1(b): d3 successfully detects the second outlier
anomaly injected in graph 75. This is one example of a number of successful cost functions investigated in this study.
By inspection, observe that
Conclusions
employing ged cost functions with a combination of non-linear and normalisation techniques improves the detection of both outliers injected into the
time series of graphs.
The responses of the improved ged cost functions have also proven to be
scalable to anomalies characterised by change in network traﬃc ﬂows on a
number of links, either across the network or localised to one node.
Conclusions
Graph based matching techniques have been used to monitor and detect
computer network anomalies, by treating periodically observed logical network communications as a time series of graphs. Speciﬁcally the graph edit
distance (ged) is a graph matching distance measure to monitor and detect
topology and traﬃc changes in a computer network. Past research has used
only simple cost functions for the application of computer network change
detection. This study shows that ged cost functions using normalisation and
non-linear techniques can improve the detection of certain network anomalies
deemed of high importance to network operators.
References
 R. A. Becker, S. G. Eick, and A. R. Wilks. Visualizing network data.
IEEE Transactions on Visualization and Computer Graphics,
1(1):16–21, 1995. C438
 H. Bunke. Error correcting graph matching: on the inﬂuence of the
underlying cost function. IEEE Transactions on Pattern Analysis and
Machine Intelligence, 21:917–922, 1999. C441
References
 H. Bunke. Recent developments in graph matching. In Proceedings
15th International Conference on Pattern Recognition, volume 2, pages
117–124, 2000. C438, C440, C441
 H. Bunke and G. Allermann. Inexact graph matching for structural
pattern recognition. Pattern Recognition Letters, May 1983. C438,
 H. Bunke, M. Kraetzl, P. J. Shoubridge, and W. D. Wallis. Detection
of abnormal change in time series of graphs. Journal of Interconnection
Networks, 3(1&2):85 – 101, 2002. C438, C439, C440, C441, C443
 CERT Coordination Centre. Denial of service attacks. June 2001.
Available at
 C443
 P. Dickinson. Graph Based Techniques for Measurement of Intranet
Dynamics. PhD thesis, Institute for Telecommunications Research,
University of South Australia, Adelaide, August 2005. C438, C444
 P. Dickinson and M. Kraetzl. Novel approaches in modelling dynamics
of networked surveillance environment. In Proceedings of the Sixth
International Conference of Information Fusion, volume 1, pages
302–309, 2003. C438, C439, C441, C442
 F. Feather and R. Maxion. Fault detection in an ethernet network
using anomaly signature matching. In Proceedings ACM SIGCOMM,
volume 23, pages 279–288, San Francisco, CA, September 1993. C438
 G. N. Higginbottom. Performance Evaluation of Communication
Networks. Artech House, Massachusetts, 1998. C438
 G. Jakobson and M. D. Weissman. Alarm correlation. IEEE Network
Journal, 7(6):52–59, 1993. C438
References
 J. L. Jerkins and J. L. Wang. A close look at traﬃc measurements
from packet networks. In Proceedings of the IEEE GLOBECOM,
volume 4, pages 2405–2411, 1998. C438
 I. Katzela and M. Schwartz. Schemes for fault identiﬁcation in
communication networks. IEEE/ACM Transactions on Networking,
3(6):753–764, 1995. C438
 D. D. Parkes and W. D. Wallis. Graph Theory and the Study of
Activity Structure. Timing Space and Spacing Time, vol. 2: Human
Activity and Time Geography. Edward Arnold, London, 1978. C443
 A. Sanfeliu and K. S. Fu. A distance measure between attributed
relational graphs for pattern recognition. IEEE Transactions on
Systems, Man, and Cybernetics, 13(3):353–362, 1983. C438, C440
 P. Shoubridge, M. Kraetzl, and D. Ray. Detection of abnormal change
in dynamic networks. In Proceedings of the International Conference
on Information, Decision and Control, pages 557–562, Adelaide, 1999.
C438, C441
 M. Thottan and C. Ji. Anomaly detection in IP networks. IEEE
Transactions on Signal Processing, 51(8):2191–2204, August 2003.
C438, C443
 S. Umeyama. An eigendecomposition approach to weighted graph
matching problems. IEEE Transactions on Pattern Analysis and
Machine Intelligence, 10(5):695–703, 1988. C443
 D. B. West. Introduction to Graph Theory. Prentice Hall, New Jersey,
1996. C439
 C. C. White, E.A. Sykes, and J. A. Morrow. An analytical approach to
the dynamic topology problem. Telecommunication Systems,
3:397–413, 1995. C438