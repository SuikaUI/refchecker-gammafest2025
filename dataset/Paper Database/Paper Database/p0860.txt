Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 3645–3650
Florence, Italy, July 28 - August 2, 2019. c⃝2019 Association for Computational Linguistics
Energy and Policy Considerations for Deep Learning in NLP
Emma Strubell
Ananya Ganesh
Andrew McCallum
College of Information and Computer Sciences
University of Massachusetts Amherst
{strubell, aganesh, mccallum}@cs.umass.edu
Recent progress in hardware and methodology for training neural networks has ushered
in a new generation of large networks trained
on abundant data.
These models have obtained notable gains in accuracy across many
NLP tasks. However, these accuracy improvements depend on the availability of exceptionally large computational resources that necessitate similarly substantial energy consumption. As a result these models are costly to
train and develop, both ﬁnancially, due to the
cost of hardware and electricity or cloud compute time, and environmentally, due to the carbon footprint required to fuel modern tensor
processing hardware. In this paper we bring
this issue to the attention of NLP researchers
by quantifying the approximate ﬁnancial and
environmental costs of training a variety of recently successful neural network models for
NLP. Based on these ﬁndings, we propose actionable recommendations to reduce costs and
improve equity in NLP research and practice.
Introduction
Advances in techniques and hardware for training deep neural networks have recently enabled impressive accuracy improvements across
many fundamental NLP tasks , with the
most computationally-hungry models obtaining
the highest scores . As
a result, training a state-of-the-art model now requires substantial computational resources which
demand considerable energy, along with the associated ﬁnancial and environmental costs. Research and development of new models multiplies
these costs by thousands of times by requiring retraining to experiment with model architectures
and hyperparameters. Whereas a decade ago most
Consumption
CO2e (lbs)
Air travel, 1 person, NY↔SF
Human life, avg, 1 year
American life, avg, 1 year
Car, avg incl. fuel, 1 lifetime
Training one model (GPU)
NLP pipeline (parsing, SRL)
w/ tuning & experiments
Transformer (big)
w/ neural arch. search
Table 1: Estimated CO2 emissions from training common NLP models, compared to familiar consumption.1
NLP models could be trained and developed on
a commodity laptop or server, many now require
multiple instances of specialized hardware such as
GPUs or TPUs, therefore limiting access to these
highly accurate models on the basis of ﬁnances.
Even when these expensive computational resources are available, model training also incurs a
substantial cost to the environment due to the energy required to power this hardware for weeks or
months at a time. Though some of this energy may
come from renewable or carbon credit-offset resources, the high energy demands of these models
are still a concern since (1) energy is not currently
derived from carbon-neural sources in many locations, and (2) when renewable energy is available,
it is still limited to the equipment we have to produce and store it, and energy spent training a neural network might better be allocated to heating a
family’s home. It is estimated that we must cut
carbon emissions by half over the next decade to
deter escalating rates of natural disaster, and based
on the estimated CO2 emissions listed in Table 1,
(1) Air travel and per-capita consumption:
 (2) car lifetime: https:
//bit.ly/2Qbr0w1.
model training and development likely make up
a substantial portion of the greenhouse gas emissions attributed to many NLP researchers.
To heighten the awareness of the NLP community to this issue and promote mindful practice and
policy, we characterize the dollar cost and carbon
emissions that result from training the neural networks at the core of many state-of-the-art NLP
models. We do this by estimating the kilowatts
of energy required to train a variety of popular
off-the-shelf NLP models, which can be converted
to approximate carbon emissions and electricity
costs. To estimate the even greater resources required to transfer an existing model to a new task
or develop new models, we perform a case study
of the full computational resources required for the
development and tuning of a recent state-of-the-art
NLP pipeline . We conclude
with recommendations to the community based on
our ﬁndings, namely: (1) Time to retrain and sensitivity to hyperparameters should be reported for
NLP machine learning models; (2) academic researchers need equitable access to computational
resources; and (3) researchers should prioritize developing efﬁcient models and hardware.
To quantify the computational and environmental cost of training deep neural network models for NLP, we perform an analysis of the energy required to train a variety of popular offthe-shelf NLP models, as well as a case study of
the complete sum of resources required to develop
LISA , a state-of-the-art NLP
model from EMNLP 2018, including all tuning
and experimentation.
We measure energy use as follows. We train the
models described in §2.1 using the default settings
provided, and sample GPU and CPU power consumption during training. Each model was trained
for a maximum of 1 day. We train all models on
a single NVIDIA Titan X GPU, with the exception of ELMo which was trained on 3 NVIDIA
GTX 1080 Ti GPUs. While training, we repeatedly query the NVIDIA System Management Interface2 to sample the GPU power consumption
and report the average over all samples. To sample
CPU power consumption, we use Intel’s Running
Average Power Limit interface.3
2nvidia-smi: 
3RAPL power meter: 
United States
Amazon-AWS
Table 2: Percent energy sourced from: Renewable (e.g.
hydro, solar, wind), natural gas, coal and nuclear for
the top 3 cloud compute providers ,
compared to the United States,4 China5 and Germany
 .
We estimate the total time expected for models to train to completion using training times and
hardware reported in the original papers. We then
calculate the power consumption in kilowatt-hours
(kWh) as follows. Let pc be the average power
draw (in watts) from all CPU sockets during training, let pr be the average power draw from all
DRAM (main memory) sockets, let pg be the average power draw of a GPU during training, and let
g be the number of GPUs used to train. We estimate total power consumption as combined GPU,
CPU and DRAM consumption, then multiply this
by Power Usage Effectiveness (PUE), which accounts for the additional energy required to support the compute infrastructure (mainly cooling).
We use a PUE coefﬁcient of 1.58, the 2018 global
average for data centers . Then the
total power pt required at a given instance during
training is given by:
pt = 1.58t(pc + pr + gpg)
The U.S. Environmental Protection Agency (EPA)
provides average CO2 produced (in pounds per
kilowatt-hour) for power consumed in the U.S.
 , which we use to convert power to
estimated CO2 emissions:
CO2e = 0.954pt
This conversion takes into account the relative proportions of different energy sources (primarily natural gas, coal, nuclear and renewable) consumed
to produce energy in the United States. Table 2
lists the relative energy sources for China, Germany and the United States compared to the top
5U.S. Dept. of Energy: 
5China Electricity Council; trans. China Energy Portal:
 
three cloud service providers.
The U.S. breakdown of energy is comparable to that of the most
popular cloud compute service, Amazon Web Services, so we believe this conversion to provide a
reasonable estimate of CO2 emissions per kilowatt
hour of compute energy used.
We analyze four models, the computational requirements of which we describe below. All models have code freely available online, which we
used out-of-the-box. For more details on the models themselves, please refer to the original papers.
Transformer.
The Transformer (T2T) model
 is an encoder-decoder architecture primarily recognized for efﬁcient and accurate machine translation. The encoder and decoder
each consist of 6 stacked layers of multi-head selfattention.
Vaswani et al. report that the
Transformer base model (T2Tbase; 65M parameters) was trained on 8 NVIDIA P100 GPUs for
12 hours, and the Transformer big model (T2Tbig;
213M parameters) was trained for 3.5 days (84
hours; 300k steps).
This model is also the basis for recent work on neural architecture search
(NAS) for machine translation and language modeling , and the NLP pipeline that
we study in more detail in §4.2 . So et al. report that their full architecture search ran for a total of 979M training
steps, and that their base model requires 10 hours
to train for 300k steps on one TPUv2 core. This
equates to 32,623 hours of TPU or 274,120 hours
on 8 P100 GPUs.
ELMo. The ELMo model 
is based on stacked LSTMs and provides rich
word representations in context by pre-training on
a large amount of data using a language modeling objective. Replacing context-independent pretrained word embeddings with ELMo has been
shown to increase performance on downstream
tasks such as named entity recognition, semantic
role labeling, and coreference. Peters et al. 
report that ELMo was trained on 3 NVIDIA GTX
1080 GPUs for 2 weeks (336 hours).
BERT. The BERT model provides a Transformer-based architecture for building contextual representations similar to ELMo,
but trained with a different language modeling objective. BERT substantially improves accuracy on
tasks requiring sentence-level representations such
as question answering and natural language inference. Devlin et al. report that the BERT
base model (BERTbase; 110M parameters) was
trained on 16 TPU chips for 4 days (96 hours).
NVIDIA reports that they can train a BERT model
in 3.3 days (79.2 hours) using 4 DGX-2H servers,
totaling 64 Tesla V100 GPUs .
This model is the latest edition of
OpenAI’s GPT general-purpose token encoder,
also based on Transformer-style self-attention and
trained with a language modeling objective . By training a very large model
on massive data, Radford et al. show high
zero-shot performance on question answering and
language modeling benchmarks. The large model
described in Radford et al. has 1542M parameters and is reported to require 1 week (168
hours) of training on 32 TPUv3 chips. 6
Related work
There is some precedent for work characterizing
the computational requirements of training and inference in modern neural network architectures in
the computer vision community. Li et al. 
present a detailed study of the energy use required
for training and inference in popular convolutional
models for image classiﬁcation in computer vision, including ﬁne-grained analysis comparing
different neural network layer types.
et al. assess image classiﬁcation model accuracy as a function of model size and gigaﬂops
required during inference. They also measure average power draw required during inference on
GPUs as a function of batch size. Neither work analyzes the recurrent and self-attention models that
have become commonplace in NLP, nor do they
extrapolate power to estimates of carbon and dollar cost of training.
Analysis of hyperparameter tuning has been
performed in the context of improved algorithms
for hyperparameter search . To
our knowledge there exists to date no analysis of
the computation required for R&D and hyperparameter tuning of neural network models in NLP.
6Via the authors on Reddit.
pre-emptible
P100/V100 U.S. resources priced at $0.43–$0.74/hr, upper
bound uses on-demand U.S. resources priced at $1.46–
$2.48/hr. We similarly use pre-emptible ($1.46/hr–$2.40/hr)
and on-demand ($4.50/hr–$8/hr) pricing as lower and upper
bounds for TPU v2/3; cheaper bulk contracts are available.
Cloud compute cost
$433–$1472
$3751–$12,571
$2074–$6912
$942,973–$3,201,722
$44,055–$146,848
$12,902–$43,008
Table 3: Estimated cost of training a model in terms of CO2 emissions (lbs) and cloud compute cost (USD).7 Power
and carbon footprint are omitted for TPUs due to lack of public information on power draw for this hardware.
Experimental results
Cost of training
Table 3 lists CO2 emissions and estimated cost of
training the models described in §2.1. Of note is
that TPUs are more cost-efﬁcient than GPUs on
workloads that make sense for that hardware (e.g.
BERT). We also see that models emit substantial carbon emissions; training BERT on GPU is
roughly equivalent to a trans-American ﬂight. So
et al. report that NAS achieves a new stateof-the-art BLEU score of 29.7 for English to German machine translation, an increase of just 0.1
BLEU at the cost of at least $150k in on-demand
compute time and non-trivial carbon emissions.
Cost of development: Case study
To quantify the computational requirements of
R&D for a new model we study the logs of
all training required to develop Linguistically-
Informed Self-Attention , a
multi-task model that performs part-of-speech tagging, labeled dependency parsing, predicate detection and semantic role labeling. This model makes
for an interesting case study as a representative
NLP pipeline and as a Best Long Paper at EMNLP.
Model training associated with the project
spanned a period of 172 days (approx. 6 months).
During that time 123 small hyperparameter grid
searches were performed, resulting in 4789 jobs
in total. Jobs varied in length ranging from a minimum of 3 minutes, indicating a crash, to a maximum of 9 days, with an average job length of 52
hours. All training was done on a combination of
NVIDIA Titan X (72%) and M40 (28%) GPUs.8
The sum GPU time required for the project
totaled 9998 days (27 years).
This averages to
8We approximate cloud compute cost using P100 pricing.
Estimated cost (USD)
$1238–$4205
$103k–$350k
Table 4: Estimated cost in terms of cloud compute and
electricity for training: (1) a single model (2) a single
tune and (3) all models trained during R&D.
about 60 GPUs running constantly throughout the
6 month duration of the project. Table 4 lists upper
and lower bounds of the estimated cost in terms
of Google Cloud compute and raw electricity required to develop and deploy this model.9 We see
that while training a single model is relatively inexpensive, the cost of tuning a model for a new
dataset, which we estimate here to require 24 jobs,
or performing the full R&D required to develop
this model, quickly becomes extremely expensive.
Conclusions
Authors should report training time and
sensitivity to hyperparameters.
Our experiments suggest that it would be beneﬁcial to directly compare different models to perform a cost-beneﬁt (accuracy) analysis.
To address this, when proposing a model that is meant
to be re-trained for downstream use, such as retraining on a new domain or ﬁne-tuning on a new
task, authors should report training time and computational resources required, as well as model
sensitivity to hyperparameters. This will enable
direct comparison across models, allowing subsequent consumers of these models to accurately assess whether the required computational resources
9Based on average U.S cost of electricity of $0.12/kWh.
are compatible with their setting. More explicit
characterization of tuning time could also reveal
inconsistencies in time spent tuning baseline models compared to proposed contributions. Realizing this will require: (1) a standard, hardwareindependent measurement of training time, such
as gigaﬂops required to convergence, and (2) a
standard measurement of model sensitivity to data
and hyperparameters, such as variance with respect to hyperparameters searched.
Academic researchers need equitable access to
computation resources.
Recent advances in available compute come at a
high price not attainable to all who desire access.
Most of the models studied in this paper were developed outside academia; recent improvements in
state-of-the-art accuracy are possible thanks to industry access to large-scale compute.
Limiting this style of research to industry labs
hurts the NLP research community in many ways.
First, it stiﬂes creativity. Researchers with good
ideas but without access to large-scale compute
will simply not be able to execute their ideas,
instead constrained to focus on different problems.
Second, it prohibits certain types of research on the basis of access to ﬁnancial resources.
This even more deeply promotes the already problematic “rich get richer” cycle of research funding, where groups that are already successful and
thus well-funded tend to receive more funding
due to their existing accomplishments. Third, the
prohibitive start-up cost of building in-house resources forces resource-poor groups to rely on
cloud compute services such as AWS, Google
Cloud and Microsoft Azure.
While these services provide valuable, ﬂexible, and often relatively environmentally friendly
compute resources, it is more cost effective for
academic researchers, who often work for nonproﬁt educational institutions and whose research
is funded by government entities, to pool resources
to build shared compute centers at the level of
funding agencies, such as the U.S. National Science Foundation. For example, an off-the-shelf
GPU server containing 8 NVIDIA 1080 Ti GPUs
and supporting hardware can be purchased for
approximately $20,000 USD. At that cost, the
hardware required to develop the model in our
case study (approximately 58 GPUs for 172 days)
would cost $145,000 USD plus electricity, about
half the estimated cost to use on-demand cloud
Unlike money spent on cloud compute,
however, that invested in centralized resources
would continue to pay off as resources are shared
across many projects. A government-funded academic compute cloud would provide equitable access to all researchers.
Researchers should prioritize computationally
efﬁcient hardware and algorithms.
We recommend a concerted effort by industry and
academia to promote research of more computationally efﬁcient algorithms, as well as hardware
that requires less energy. An effort can also be
made in terms of software.
There is already a
precedent for NLP software packages prioritizing
efﬁcient models.
An additional avenue through
which NLP and machine learning software developers could aid in reducing the energy associated with model tuning is by providing easyto-use APIs implementing more efﬁcient alternatives to brute-force grid search for hyperparameter
tuning, e.g. random or Bayesian hyperparameter
search techniques .
software packages implementing these techniques
do exist,10 they are rarely employed in practice
for tuning NLP models.
This is likely because
their interoperability with popular deep learning
frameworks such as PyTorch and TensorFlow is
not optimized, i.e.
there are not simple examples of how to tune TensorFlow Estimators using
Bayesian search. Integrating these tools into the
workﬂows with which NLP researchers and practitioners are already familiar could have notable impact on the cost of developing and tuning in NLP.
Acknowledgements
We are grateful to Sherief Farouk and the anonymous reviewers for helpful feedback on earlier
drafts. This work was supported in part by the
Centers for Data Science and Intelligent Information Retrieval, the Chan Zuckerberg Initiative
under the Scientiﬁc Knowledge Base Construction project, the IBM Cognitive Horizons Network
agreement no. W1668553, and National Science
Foundation grant no. IIS-1514053. Any opinions,
ﬁndings and conclusions or recommendations expressed in this material are those of the authors and
do not necessarily reﬂect those of the sponsor.
10For example, the Hyperopt Python library.