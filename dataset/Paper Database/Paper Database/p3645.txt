Finding Task-Relevant Features for Few-Shot Learning by Category Traversal
Hongyang Li1,2∗David Eigen2
Samuel Dodge2
Matthew Zeiler2
Xiaogang Wang1,3
1The Chinese University of Hong Kong
2Clarifai Inc.
3SenseTime Research
{yangli,xgwang}@ee.cuhk.edu.hk
{deigen,samuel,zeiler}@clarifai.com
Few-shot learning is an important area of research. Conceptually, humans are readily able to understand new concepts given just a few examples, while in more pragmatic
terms, limited-example training situations are common in
Recent effective approaches to few-shot learning employ a metric-learning framework to learn a feature
similarity comparison between a query (test) example, and
the few support (training) examples. However, these approaches treat each support class independently from one
another, never looking at the entire task as a whole. Because of this, they are constrained to use a single set of features for all possible test-time tasks, which hinders the ability to distinguish the most relevant dimensions for the task
at hand. In this work, we introduce a Category Traversal
Module that can be inserted as a plug-and-play module into
most metric-learning based few-shot learners. This component traverses across the entire support set at once, identifying task-relevant features based on both intra-class commonality and inter-class uniqueness in the feature space.
Incorporating our module improves performance considerably (5%-10% relative) over baseline systems on both mini-
ImageNet and tieredImageNet benchmarks, with overall
performance competitive with recent state-of-the-art systems.
1. Introduction
The goal of few-shot learning is to classify unseen data instances (query examples)
into a set of new categories, given just a small number of
labeled instances in each class (support examples). Typically, there are between 1 and 10 labeled examples per class
in the support set; this stands in contrast to the standard
classiﬁcation problem , in which there are often thousands per class. Also classes for training and test
set are the same in traditional problem whereas in few-shot
learning the two sets are exclusive. A key challenge in few-
∗This paper is the product of work during an internship at Clarifai Inc.
averaging/
embedding/
(a) A high-level illustration of the metric-based algorithms for few-shot learning. Both support and query are ﬁrst fed
into a feature extractor fθ; in previous methods, the query is compared with support based on the feature similarity individually,
without associating the most relevant information across classes.
(b) The proposed Category Traversal Module (CTM) looks at all
categories in the support set to ﬁnd task-relevant features.
shot learning, therefore, is to make best use of the limited
data available in the support set in order to ﬁnd the “right”
generalizations as suggested by the task.
A recent effective approach to this problem is to train
a neural network to produce feature embeddings used to
compare the query to each of the support samples. This
is similar to metric learning using Siamese Networks ,
trained explicitly for the few-shot classiﬁcation problem by
iteratively sampling a query and support set from a larger labeled training set, and optimizing to maximize a similarity
score between the query and same-labeled examples. Optimizing for similarity between query and support has been
very effective . Fig. 1 (a) illustrates such a mechanism at a high level.
However, while these approaches are able to learn rich
features, the features are generated for each class in the suparXiv:1905.11116v1 [cs.CV] 27 May 2019
Support Set (k-shot)
Support Set (1-shot)
Figure 2. Toy example illustrating the motivation for task-relevant
features. (a) A task deﬁnes ﬁve classes (i)..(v) with two feature dimensions, color and shape. The distance between query and support is the same for classes (i, iii, iv, v). However, by taking the
context of all classes into account, we see the relevant feature is
color, so the class of the query image should be that of (iii): green.
(b) In a k-shot (k > 1) case, most instances in one class share
the property of color blue whilst their shape differ among them —
making the color feature more representative.
port set independently. In this paper, we extend the effective
metric-learning based approaches to incorporate the context
of the entire support set, viewed as a whole. By including such a view, our model ﬁnds the dimensions most relevant to each task. This is particularly important in few-shot
learning: since very little labeled data is available for each
task, it is imperative to make best use of all of the information available from the full set of examples, taken together.
As a motivating example, consider Fig.2 (a), which depicts a 5-way 1-shot task with two simple feature dimensions, color and shape. The goal of classiﬁcation is to determine the answer to a question:
To which category in the support set does query belong?
Here, the query is a green circle. We argue that because each
example in the support set has a unique color, but shares its
shape with other support examples, the relevant feature in
this task is color. Therefore, the correct label assignment
to the query should be class (iii): green. However, if feature similarity to the query is calculated independently for
each class, as is done in , it
is impossible to know which dimension (color or shape) is
more relevant, hence categories (i, iii, iv, v) would all have
equal score based on distance1. Only by looking at context
1Note that if the feature extractor were to learn that color is more important than shape in order to succeed in this particular task, it would fail
on the task where color is shared and shape is unique — it is impossible
for static feature comparison to succeed in both tasks.
of the entire support set can we determine that color is the
discriminating dimension for this task. Such an observation motivates us to traverse all support classes to ﬁnd the
inter-class uniqueness along the feature dimension.
Moreover, under the multi-shot setting shown in Fig. 2
(b), it can be even clearer that the color dimension is most
relevant, since most instances have the same color of blue,
while their shape varies. Thus, in addition to inter-class
uniqueness, relevant dimensions can also be found using
the intra-class commonality. Note in this k > 1 case, feature averaging within each class is an effective way to reduce intra-class variations and expose shared feature components; this averaging is performed in . While both
inter- and intra-class comparisons are fundamental to classiﬁcation, and have long been used in machine learning and
statistics , metric based few-shot learning methods have
not yet incorporated any of the context available by looking
between classes.
To incorporate both inter-class as well as intra-class
views of support set, we introduce a category traversal
module (CTM). Such a module selects the most relevant
feature dimensions after traversing both across and within
categories. The output of CTM is bundled onto the feature embeddings of the support and query set, making metric learning in the subsequent feature space more effective.
CTM consists of a concentrator unit to extract the embeddings within a category for commonality, and a projector
unit to consider the output of the concentrator across categories for uniqueness. The concentrator and projector can
be implemented as convolutional layer(s). Fig. 1 (b) gives
a description of how CTM is applied into existing metricbased few-shot learning algorithms. It can be viewed as a
plug-and-play module to provide more discriminative and
representative features by considering the global feature
distribution in the support set – making metric learning in
high-dimensional space more effective.
We demonstrate the effectiveness of our category traversal module on the few-shot learning benchmarks.
is on par with or exceeding previous state-of-the-art. Incorporating CTM into existing algorithms , we
witness consistent relative gains of around 5%-10% on both
miniImageNet and tieredImageNet. The code suite is at:
 
2. Related Work
Recent years have witnessed a vast amount of work on
the few-shot learning task. They can be roughly categorized into three branches, (i) metric based, (ii) optimization
based, and (iii) large corpus based.
The ﬁrst branch of works are metric based approaches
 . Vinyals et al. 
introduced the concept of episode training in few-shot learning, where the training procedure mimics the test scenario
based on support-query metric learning. The idea is intuitive and simple: these methods compare feature similarity after embedding both support and query samples into
a shared feature space. The prototypical network is
built upon by comparing the query with class prototypes in the support set, making use of class centroids to
eliminate the outliers in the support set and ﬁnd dimensions
common to all class samples. Such a practice is similar in
spirit to our concentrator module, which we design to focus
on intra-class commonality. Our work goes beyond this by
also looking at all classes in the support set together to ﬁnd
dimensions relevant for each task. In , a kernel generator is introduced to modify feature embeddings, conditioned
on the query image. This is a complementary approach to
ours: while looks to the query to determine what may
be relevant for its classiﬁcation, we look at the whole of the
support set to enable our network to better determine which
features most pertain to the task. In , the feature embedding and classiﬁer weight creation networks are broken up,
to enable zero-shot and few-shot tasks to both be performed
within the same framework.
There are also interesting works that explore the relationship between support and query to enable more complex
comparisons between support and query features. The relation network proposes evaluating the relationship of
each query-support pair using a neural network with concatenated feature embeddings. It can be viewed as a further extension to with a learned metric deﬁned by
a neural network. Liu et al. propose a transductive
propagation network to propagate labels from known labeled instances to unlabeled test instances, by learning a
graph construction module that exploits the manifold structure in the data. Garcia et al. introduced the concept
of a graph neural network to explicitly learn feature embeddings by assimilating message-passing inference algorithms
into neural-network counterparts. Oreshkin et al. also
learns a task-dependent metric, but conditions based on the
mean of class prototypes, which can reduce inter-class variations available to their task conditioning network, and requires an auxiliary task co-training loss not needed by our
method to realize performance gains. Gao et al. applied masks to features in a prototypical network applied to
a NLP few-shot sentence classiﬁcation task, but base their
masks only on examples within each class, not between
classes as our method does.
All the approaches mentioned above base their algorithms on a metric learning framework that compares the
query to each support class, taken separately.
none of them incorporate information available across
categories for the task, beyond the ﬁnal comparison of
individually-created distance scores. This can lead to problems mentioned in Section 1, where feature dimensions irrelevant to the current task can end up dominating the similarity comparison. In this work, we extend metric-based
approaches by introducing a category traversal module to
ﬁnd relevant feature dimensions for the task by looking at
all categories simultaneously.
The second branch of literature are optimization based
solutions . For each task (episode), the
learner samples from a distribution and performs SGD or
unrolled weight updates for a few iterations to adapt a parameterized model for the particular task at hand. In ,
a learner model is adapted to a new episodic task by a recurrent meta-learner producing efﬁcient parameter updates.
MAML and its variants have demonstrated impressive results; in these works, the parameters of a learner
model are optimized so that they can be quickly adapted to
a particular task.
At a high-level, these approaches incorporate the idea of
traversing all support classes, by performing a few weight
update iterations for the few-shot task. However, as pointed
out by , while these approaches iterate over samples from all classes in their task updates, they often have
trouble learning effective embeddings. address this by
applying the weight update “inner-loop” only to top layer
weights, which are initialized by sampling from a generative distribution conditioned on the task samples, and pretraining visual features using an initial supervised phase.
By contrast, metric learning based methods achieve considerable success in learning good features, but have not made
use of inter-class views to determine the most relevant dimensions for each task. We incorporate an all-class view
into a metric learning framework, and obtain competitive
performance. Our proposed method learns both the feature
embeddings and classiﬁcation dimensions, and is trained in
an entirely from-scratch manner.
The third branch is large-training-corpus based methods . In these, a base network is trained
with large amount of data, but also must be able to adapt to
a few-shot learning task without forgetting the original base
model concepts. These methods provide stronger feature
representations for base model classes that are still “compatible” with novel few-class concept representations, so
that novel classes with few examples can be readily mixed
with classes from the base classiﬁer.
3. Algorithm
3.1. Description on Few-Shot Learning
In a few-shot classiﬁcation task, we are given a small
support set of N distinct, previously unseen classes, with
K examples each2. Given a query sample, the goal is to
classify it into one of the N support categories.
Training. The model is trained using a large training
corpus Ctrain of labeled examples (of categories different
2Typically, N is between 5 and 20, and K between 1 and 20.
Figure 3. Detailed breakdown of components
in CTM. It extracts features common to elements in each class via a concentrator o, and
allows the metric learner to concentrate on
more discriminative dimensions via a projector p, constructed by traversing all categories
in the support set.
from any that we will see in the eventual few-shot tasks during evaluation). The model is trained using episodes. In
each episode, we construct a support set S and query set Q:
S = {s(1), · · · , s(c), · · · , s(N)} ⊂Ctrain, |s(c)| = K,
Q = {q(1), · · · , q(c), · · · , q(N)} ⊂Ctrain, |q(c)| = K,
where c is the class index and K is the number of samples
in class s(c); the support set has a total number of NK samples and corresponds to a N-way K-shot problem. Let sj
be a single sample, where j is the index among all samples
in S. We deﬁne the label of sample i to be:
i ≜l(si) = c,
Similar notation applies for the query set Q.
As illustrated in Fig. 1, the samples si, qj are ﬁrst fed
into a feature extractor fθ(·). We use a CNN or ResNet 
as the backbone for fθ. These features are used as input
to a comparison module M(·, ·). In practice, M could be a
direct pair-wise feature distance or a further relation
unit consisting additional CNN layers to measure
the relationship between two samples. Denote the output
score from M as Y = {yij}. The loss L for this training
episode is deﬁned to be a cross-entropy classiﬁcation loss
averaged across all query-support pairs:
 fθ(si), fθ(qj)
j] log yij.
Training proceeds by iteratively sampling episodes, and
performing SGD update using the loss for each episode.
Inference. Generalization performance is measured on
test set episodes, where S, Q are now sampled from a corpus Ctest containing classes distinct from those used in
Ctrain. Labels in the support set are known whereas those
in the query are unknown, and used only for evaluation. The
label prediction for the query is found by taking class with
highest comparison score:
ˆlj = arg max
where ycj =
i yij and l∗
i = c. The mean accuracy is
therefore obtained by comparing ˆlj with query labels for a
length of test episodes (usually 600).
3.2. Category Traversal Module (CTM)
Fig. 3 shows the overall design of our model. The category traversal module takes support set features fθ(S) as input, and produces a mask p via a concentrator and projector
that make use of intra- and inter-class views, respectively.
The mask p is applied to reduced-dimension features of both
the support and query, producing improved features I with
dimensions relevant for the current task. These improved
feature embeddings are ﬁnally fed into a metric learner.
Concentrator: Intra-class Commonality
The ﬁrst component in CTM is a concentrator to ﬁnd
universal features shared by all instances for one class.
Denote the output shape from feature extractor fθ as
(NK, m1, d1, d1), where m1, d1 indicate the number of
channel and the spatial size, respectively. We deﬁne the
concentrator as follows:
fθ(S) : (NK, m1, d1, d1)
Concentrator
−−−−−−→o : (N, m2, d2, d2),
where m2, d2 denote the output number of channel and spatial size. Note that the input is ﬁrst fed to a CNN module
to perform dimension reduction; then samples within each
class are averaged to have the ﬁnal output o. In the 1-shot
setting, there is no average operation, as there is only one
example for each class.
In practice the CNN module could be either a simple
CNN layer or a ResNet block . The purpose is to remove the difference among instances and extract the commonality among instances within one category.
achieved by way of an appropriate down-sampling from
m1, d1 to m2, d2. Such a learned component is proved to
be better than the averaging alternative , where the latter could be deemed as a special case of our concentrator
when m1 = m2, d1 = d2 without the learned parameters.
Projector: Inter-class Uniqueness
The second component is a projector to mask out irrelevant
features and select the ones most discriminative for the current few-shot task by looking at concentrator features from
model size
training time
(sec. / episode)
(i) sample-wise style baseline
(ii) sample-wise, I1
(iii) baseline same size
(iv) cluster-wise style baseline
(v) cluster-wise, I2
Table 1. Design choice of I(S) in
the category traversal module (CTM)
and comparison with baselines.
see a substantial improvement using
CTM over the same-capacity baseline
(ii, iii). The sample wise choice (ii)
performs better, with marginal extra
computation cost compared with (v).
all support categories simultaneously:
ˆo : (1, Nm2, d2, d2)
−−−−→p : (1, m3, d3, d3).
where ˆo is just a reshaped version of o; m3, d3 follow similar meaning as in the concentrator. We achieve the goal of
traversing across classes by concatenating the class prototypes in the ﬁrst dimension (N) to the channel dimension
(m2), applying a small CNN to the concatenated features to
produce a map of size (1, m3, d3, d3), and ﬁnally applying a
softmax over the channel dimension m3 (applied separately
for each of the d3 × d3 spatial dimensions) to produce a
mask p. This is used to mask the relevant feature dimensions for the task in the query and support set.
In order to make the projector output p inﬂuence the feature embeddings fθ(·), we need to match the shape between
these modules in the network. This is achieved using a reshaper network, applied separately to each of NK samples:
−−−−−→r(·) : (NK, m3, d3, d3).
It is designed in light-weight manner with one CNN layer.
Design choice in CTM
Armed by the components stated above we can generate a
mask output by traversing all categories: fθ(S) →p. The
effect of CTM is achieved by bundling the projector output
onto the feature embeddings of both support and query, denoted as I(·). The improved feature representations are thus
promised to be more discriminative to be distinguished.
For the query, the choice of I is simple since we do
not have labels of query; the combination is an elementwise multiplication of embeddings and the projector output: I(Q) = r(Q) ⊙p, where ⊙stands for broadcasting
the value of p along the sample dimension (NK) in Q.
For the support, however, since we know the query labels, we can choose to mask p directly onto the embeddings
(sample-wise), or if we keep (m2, d2, d2) = (m3, d3, d3),
we can use it to mask the concentrator output o (clusterwise). Mathematically, these two options are:
option 1: I1(S) = r(S) ⊙p : (NK, m3, d3, d3),
option 2: I2(S) = o ⊙p : (N, m3, d3, d3).
We found that option 1 results in better performance, for a
marginal increase in execution time due to its larger number
of comparisons; details are provided in Sec. 4.2.1.
3.3. CTM in Action
The proposed category traversal module is a simple plugand-play module and can be embedded into any metricbased few-shot learning approach. In this paper, we consider three metric-based methods and apply CTM to them,
namely the matching network , the prototypical network and the relation network . As discussed in
Sec. 1, all these three methods are limited by not considering the entire support set simultaneously. Since features
are created independently for each class, embeddings irrelevant to the current task can end up dominating the metric
comparison. These existing methods deﬁne their similarity
metric following Eqn. (1); we modify them to use our CTM
as follows:
 r(S) ⊙p, r(Q) ⊙p
Y = {yij}.
As we show later (see Sec. 4.3.1), after integrating the proposed CTM unit, these methods get improved by a large
margin (2%-4%) under different settings.
4. Evaluation
The experiments are designed to answer the following
key questions: (1) Is CTM competitive to other state-of-theart on large-scale few-shot learning benchmarks? (2) Can
CTM be utilized as a simple plug-and-play and bring in gain
to existing methods? What are the essential components and
factors to make CTM work? (3) How does CTM modify
the feature space to make features more discriminative and
representative?
4.1. Datasets and Setup
Datasets. The miniImageNet dataset is a subset of
100 classes selected from the ILSVRC-12 dataset with
600 images in each class. It is divided into training, validation, and test meta-sets, with 64, 16, and 20 classes respectively. The tieredImageNet dataset is a larger subset
of ILSVRC-12 with 608 classes (779,165 images) grouped
into 34 higher-level nodes based on WordNet hierarchy .
This set of nodes is partitioned into 20, 6, and 8 disjoint
sets of training, validation, and testing nodes, and the corresponding classes consist of the respective meta-sets. As
argued in , the split in tieredImageNet is more challenging, with realistic regime of test classes that are less similar
to training ones. Note that the validation set is only used for
tuning model parameters.
Evaluation metric. We report the mean accuracy (%) of
600 randomly generated episodes as well as the 95% conﬁdence intervals on test set. In every episode during test, each
class has 15 queries, following most methods .
Implementation details. For training, the 5-way problem has 15 query images while the 20-way problem has 8
query images. The reason for a fewer number of query samples in the 20-way setting is mainly due to the GPU memory
considerations. The input image is resized to 84 × 84.
We use Adam optimizer with an initial learning rate
of 0.001. The total training episodes on miniImageNet and
tieredImageNet are 600,000 and 1,000,000 respectively.
The learning rate is dropped by 10% every 200,000 episodes
or when loss enters a plateau. The weight decay is set to be
0.0005. Gradient clipping is also applied.
4.2. Ablation Study
Shallow Network Veriﬁcation
We ﬁrst validate the effectiveness of category traversal by
comparing against same-capacity baselines using a simple backbone network. Speciﬁcally, a 4-layer neural network is adopted as backbone; we directly compute feature similarity between I(S) and I(Q). The mean accuracy on miniImageNet is reported. After feature embedding, m1 = 64, d1 = 21; the concentrator is a CNN layer
with stride of 2, i.e., m2 = 32, d2 = 10. To compare between choices (I1 or I2), the projector leaves dimensions
unchanged, i.e., m3 = m2, d3 = d2.
Baseline comparison. Results are reported in Tab. 1.
Model size and training time are measured under the 5-way
5-shot setting. The “baseline” in row (i) and (iv) evaluate a
model with reshaper network and metric comparisons only,
omitting CTM concentrator and projector. Row (ii) shows a
model that includes our CTM. Since adding CTM increases
the model capacity compared to the baseline (i), we also
include a same-size model baseline for comparison, shown
as “baseline same size” (iii), by adding additional layers to
the backbone such that its model size is similar to (ii). Note
that the only difference between (i) and (iv) is that the latter
case takes average of samples within each category.
We can see on average there is a 10% relative improvement using CTM in both 5-way and 20-way settings, compared to the baselines. Notably, the larger-capacity baseline
improves only marginally over the original baseline, while
the improvements using CTM are substantial. This shows
that the performance increase obtained by CTM is indeed
due to its ability to ﬁnd relevant features for each task.
Table 2. Ablation study on category traversal module.
miniImageNet accuracy
CTM with shallow (4 layer) backbone
CTM with ResNet-18 backbone
(i) w/o concentrator network o
(ii) w/o projector p
(iii) softmax all in p
relation net baseline without CTM
relation net M, CTM, MSE loss
relation net M, CTM, cross entropy loss
Which option for I(S) is better? Table 1 (ii, v) shows
the comparison between I1 and I2. In general, the samplewise choice I1 is 2% better than I2. Note the model size
between these two are exactly the same; the only difference
is how p is multiplied. However, a trivial drawback of I1
is the slightly slower time (0.0688 vs 0.0632) since it needs
to broadcast p across all samples. Despite the efﬁciency, we
choose the ﬁrst option as our preference to generate I(S) =
I1 nonetheless.
CTM with Deeper Network
Table 2 reports the ablation analysis on different components of CTM. Using a deeper backbone for the feature extractor increases performance by a large margin. Experiments in the second block investigate the effect of the concentrator and projector, respectively. Removing each component alone results in a performance decrease (cases i, ii,
iii)3. The accuracy is inferior (-3.93%, 1-shot case) if we remove the network part of the concentrator, implying that its
dimension reduction and spatial downsampling is important
to the ﬁnal comparisons. Removing the projector p also results in a signiﬁcant drop (-2.16%, 1-shot), conﬁrming that
this step is necessary to ﬁnd task-speciﬁc discriminate dimensions. An interesting result is that if we perform the
softmax operation across all the locations (m3, d3, d3) in
p, the accuracy (57.77%) is inferior to performing softmax
along the channel dimension (m3) for each location separately (59.34%); this is consistent with the data, where absolute position in the image is only modestly relevant to any
class difference.
Moreover, we incorporate the relation module as the
metric learner for the last module M. It consists of two
CNN blocks with two subsequent fc layers generating the
relationship score for one query-support pair. The baseline
relation net model without CTM has an accuracy of 58.21%.
After including our proposed module, the performance in-
3Implementation details: case (i) without concentrator, support samples
are still averaged to generate an output of (N, m, d, d) for the projector;
case (ii) without projector, the improved feature representation for support
and query are o(S), r(Q), respectively.
Matching Net , paper
Matching Net , our implementation
Matching Net , CTM
Prototypical Net , paper
Prototypical Net , our implementation
Prototypical Net , CTM
Relation Net , paper
Relation Net , our implementation
Relation Net , CTM
Table 3. Improvement after incorporating CTM into existing methods on miniImageNet (left) and tieredImageNet (right).
creases by 3.84%, to 62.05%. Note that the original paper
 uses mean squared error (MSE); we ﬁnd cross-entropy
is slightly better (0.68% and 0.09% for 1-shot and 5-shot,
respectively), as deﬁned in Eqn. (2).
4.3. Comparison with State-of-the-Art
Adapting CTM into Existing Frameworks
To verify the effectiveness of our proposed category traversal module, we embed it into three metric-based algorithms
that are closely related to ours. It is worth noticing that the
comparison should be conducted in a fair setting; however,
different sources report different results4. Here we describe
the implementation we use.
Matching Net and Prototypical Net . In these
cases, the metric module M is the pair-wise feature distance. Note that a main source of improvement between
 and is that the query is compared to the average
feature for each class; this has the effect of including intraclass commonality, which we make use of in our concentrator module. As for the improvement from original paper to
our baseline, we use the ResNet-18 model with a Euclidean
distance for the similarity comparison, instead of a shallow
CNN network with cosine distance originally.
Relation Net . As for the improvement from original paper to our baseline, the backbone structure is switched
from 4-conv to ResNet-18 model; the relation unit M
adopts the ResNet blocks instead of CNN layers; the supervision loss is changed to the cross entropy.
Table 3 shows the gains obtained by including CTM into
each method. We observe that on average, there is an approximately 3% increase after adopting CTM. This shows
the ability of our module to plug-and-play into multiple
metric based systems. Moreover, the gains remain consistent for each method, regardless of the starting performance
4For example, the relation network has a 65.32% accuracy for 5-way
5-shot setting on miniImageNet. gives a 61.1%; has 66.6%; 
obtains 71.07% with a larger network
miniImageNet test accuracy
Meta-learner LSTM 
43.44 ± 0.77
60.60 ± 0.71
48.70 ± 1.84
63.11 ± 0.92
REPTILE 
49.97 ± 0.32
65.99 ± 0.58
Meta-SGD 
54.24 ± 0.03
70.86 ± 0.04
SNAIL 
55.71 ± 0.99
68.88 ± 0.92
59.23 ± 0.99
72.35 ± 0.18
61.76 ± 0.08
77.59 ± 0.12
Incremental 
55.72 ± 0.41
70.50 ± 0.36
Dynamic 
56.20 ± 0.86
73.00 ± 0.64
Predict Params 
59.60 ± 0.41
73.74 ± 0.19
Matching Net 
43.56 ± 0.84
55.31 ± 0.73
48.90 ± 0.70
68.30 ± 0.60
Prototypical Net 
49.42 ±0.78
68.20 ± 0.66
Relation Net 
50.44 ± 0.82
65.32 ± 0.70
Projective Subspace 
68.12 ± 0.67
Individual Feature 
IDeMe-Net 
TADAM 
58.50 ± 0.30
76.70 ± 0.30
CTM (ours)
62.05 ± 0.55
78.63 ± 0.06
CTM (ours), data augment
64.12 ± 0.82
80.51 ± 0.13
tieredImageNet test accuracy
51.67 ± 1.81
70.30 ± 0.08
Meta-SGD , reported by 
62.95 ± 0.03
79.34 ± 0.06
66.33 ± 0.05
81.44 ± 0.09
Dynamic , reported by 
50.90 ± 0.46
66.69 ± 0.36
Incremental 
51.12 ± 0.45
66.40 ± 0.36
Soft k-means 
52.39 ± 0.44
69.88 ± 0.20
Prototypical Net 
53.31 ± 0.89
72.69 ± 0.74
Projective Subspace 
71.15 ± 0.67
Relation Net 
54.48 ± 0.93
71.32 ± 0.78
Transductive Prop. 
CTM (ours)
64.78 ± 0.11
81.05 ± 0.52
CTM (ours), data augment
68.41 ± 0.39
84.28 ± 1.73
Table 4. Test accuracies for 5-way tasks, both 1-shot and 5-shot.
We provide two versions of our model. See Sec. 4.3.2 for details.
level. This supports the hypothesis that our method is able
to incorporate signals previously unavailable to any of these
approaches, i.e., the inter-class relations in each task.
(a) Relation net, 47.82% accuracy
(b) Relation Net with CTM, 52.18% accuracy
The t-SNE visualization 
of the improved feature embeddings I(·)
learned by our CTM approach. (a) corresponds to the 20-way 5-shot setting of
the relation network without CTM in Table 3 and (b) corresponds to the improved
version with CTM. Only 10 classes are
shown for better view. We can see that after traversing across categories, the effect
of projector p onto the features are obvious - making clusters more compact and
discriminative from each other.
Comparison beyond Metric-based Approaches
We compare our proposed CTM approach with other stateof-the-art methods in Table 4. For each dataset, the ﬁrst
block of methods are optimization-based, the second are
base-class-corpus algorithms, and the third are metric-based
approaches. We use a ResNet-18 backbone for the feature
extractor to compare with other approaches. The model is
trained from scratch with standard initialization, and no additional training data (e.g., distractors ) are utilized.
We believe such a design aligns with most of the compared
algorithms in a fair spirit.
It is observed that our CTM method compares favorably against most methods by a large margin, not limited
to the metric-based methods but also compared with the
optimization-based methods.
For example, under the 5way 1-shot setting, the performance is 62.05% vs 59.60%
 , and 64.78% vs 59.91% on the two benchmarks
miniImageNet and tieredImageNet, respectively.
LEO is slightly better than ours (without data
augmentation) on tieredImageNet.
It uses wide residual networks with 28 layers; they also pretrain the
model using a supervised task on the entire training set
and ﬁnetune the network based on these pre-trained features. For practical interest, we also train a version of our
model with supervised pretraining (using only the mini- or
tieredImageNet training sets), basic data augmentation (including random crop, color jittering and horizontal ﬂip), and
a higher weight decay (0.005). The result is shown in the
last case for each dataset. Note that the network structure is
still ResNet-18, considering LEO’s wideResNet-28.
4.4. Feature Visualization Learned by CTM
Fig. 4 visualizes the feature distribution using t-SNE
 . The features computed in a 20-way 5-shot setting, but
only 10 classes are displayed for easier comparison. Model
(a) achieves an accuracy of 47.32% without CTM and the
improved version, Model (b), equipped with CTM has a better performance of 52.18%. When sampling features for
t-SNE for our model, we use I(S), i.e. after the mask p
is applied. Since this depends on the support sample, features will be vastly different depending on the chosen task.
Therefore, when sampling tasks to create these visualization features, we ﬁrst chose 20 classes, and kept these ﬁxed
while drawing different random support samples from this
class set. We draw a total of 50 episodes on the test set.
As can be clearly observed, CTM model has more compact and separable clusters, indicating that features are more
discriminative for the task. This descends from the design
of the category traversal module. Without CTM, some clusters overlap with each other (e.g., light green with orange),
making the metric learning difﬁcult to compare.
5. Conclusion
In this paper, we propose a category traversal module
(CTM) to extract feature dimensions most relevant to each
task, by looking the context of the entire support set. By
doing so, it is able to make use of both inter-class uniqueness and intra-class commonality properties, both of which
are fundamental to classiﬁcation. By looking at all support
classes together, our method is able to identify discriminative feature dimensions for each task, while still learning
effective comparison features entirely from scratch. We devise a concentrator to ﬁrst extract the feature commonality among instances within the class by effectively downsampling the input features and averaging. A projector is
introduced to traverse feature dimensions across all categories in the support set. The projector inter-class relations
to focus on the on relevant feature dimensions for the task at
hand. The output of CTM is then combined onto the feature
embeddings for both support and query; the enhanced feature representations are more unique and discriminative for
the task. We have demonstrated that it improves upon previous methods by a large margin, and has highly competitive
performance compared with state-of-the-art.
Acknowledgment
We thank Nand Dalal, Michael Gormish, Yanan Jian and
reviewers for helpful discussions and comments. H. Li is
supported by Hong Kong Ph.D. Fellowship Scheme.