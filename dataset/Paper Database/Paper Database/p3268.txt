A High-Order Kernel Method for Diﬀusion and Reaction-Diﬀusion
Equations on Surfaces
Edward Fuselier
Department of Mathematics and Computer Science
High Point University
High Point, NC 27262
 
Grady B. Wright ∗
Department of Mathematics
Boise State University
Boise, ID 83725-1555
 
November 27, 2024
In this paper we present a high-order kernel method for numerically solving diﬀusion and reactiondiﬀusion partial diﬀerential equations (PDEs) on smooth, closed surfaces embedded in Rd. For twodimensional surfaces embedded in R3, these types of problems have received growing interest in biology,
chemistry, and computer graphics to model such things as diﬀusion of chemicals on biological cells
or membranes, pattern formations in biology, nonlinear chemical oscillators in excitable media, and
texture mappings.
Our kernel method is based on radial basis functions (RBFs) and uses a semidiscrete approach (or the method-of-lines) in which the surface derivative operators that appear in the
PDEs are approximated using collocation.
The method only requires nodes at “scattered” locations
on the surface and the corresponding normal vectors to the surface. Additionally, it does not rely on
any surface-based metrics and avoids any intrinsic coordinate systems, and thus does not suﬀer from
any coordinate distortions or singularities. We provide error estimates for the kernel-based approximate
surface derivative operators and numerically study the accuracy and stability of the method. Applications
to diﬀerent non-linear systems of PDEs that arise in biology and chemistry are also presented.
Key words: radial basis functions · mesh-free · manifold · collocation · method-of-lines · pattern formation · Turing patterns · spiral waves.
Mathematics Subject Classiﬁcation 58J45 35K57 41A05 41A25 41A30 41A63 65D25 65M20
65M70 46E22 35B36
Introduction
Kernel methods such as those based on radial basis functions (RBFs) are becoming increasingly popular
for numerically solving partial diﬀerential equations (PDEs) because they are geometrically ﬂexible, algorithmically accessible, and can be highly accurate. Since Kansa’s pioneering work , there have been
many successful applications of kernel methods to various types of PDEs deﬁned on planar regions in two
and higher dimensions (see, for example, [20, Ch. 38–45] and the references therein). More recently, these
methods have been developed and applied to PDEs deﬁned on the surface of a sphere .
∗Corresponding author. Research supported by grant DMS-0934581, and DMS-0540779 from the National Science Foundation.
 
In this paper, we present a high-order kernel method using RBFs for numerically solving certain PDEs
deﬁned on more general surfaces. In particular, we focus on diﬀusion and reaction-diﬀusion equations on
smooth, closed embedded submanifolds M ⊂Rd. In the case of two species, the prototypical form of the
latter type of these PDEs is
∂t =δu∆Mu + fu(t, u, v),
∂t =δv∆Mv + fv(t, u, v),
where u, v : M −→R, δu, δv ≥0, fu, fv are (possibly non-linear) scalar functions, and ∆M is the Laplace-
Beltrami operator for the surface.
For two dimensional surfaces embedded in three dimensional space,
systems like (1) have received growing interest to model such things as diﬀusion of chemicals on biological
cells or membranes , pattern formations in biology , nonlinear chemical oscillators in excitable
media , and texture mappings in computer graphics .
In the past decade, many methods have been developed for PDEs like (1) on surfaces. Nearly all of these
techniques can be classiﬁed into two types, intrinsic methods and embedded, narrow-band methods. The
former methods use coordinates intrinsic to the surface and a surface-based mesh to discretize the diﬀerential
operators (e.g. ), while the latter methods extend the entire PDE in R3 in a narrow
band around the surface and then modify the diﬀerential operators so that the solution is restricted to the
surface (e.g. ). Intrinsic methods have the beneﬁt that the resulting discretization
scheme is consistent with the dimension of the original problem. However, properly dealing with the inherent
coordinate distortions or singularities that arise in the metric terms of the surface diﬀerential operators can be
diﬃcult, and these methods are generally limited to low orders of accuracy. Embedded, narrow-band methods
have the beneﬁt that the surface diﬀerential operators are posed in extrinsic coordinates so that all coordinate
singularities can be avoided and standard methods such as ﬁnite diﬀerences on 3D Cartesian grids, or ﬁnite
elements on 3D unstructured meshes can be used. Additionally, the surface can be naturally represented
using standard level-set methods, and thus quite topologically complicated surfaces can be handled. However,
these methods require consistent extensions of the initial data on the surface to the embedding space, which
can be non-trivial. Also, some of these methods (e.g. ) lead to degenerate surface diﬀerential operators
since, for example, they allow diﬀusion to occur only in directions tangential to the surface. This makes
it diﬃcult to use implicit discretization techniques for time-dependent problems. Additionally, the need to
implement artiﬁcial boundary conditions in the embedding space can lead to accuracy degradations .
Finally, all embedded methods have an added computational expense since they solve the equations in a
dimension at least one greater than that in which the equations are posed. This added expense can grow
quite signiﬁcantly depending on the surface, the order of the diﬀerential operators, and the order of accuracy
of the method .
The present kernel method combines many of the beneﬁts of both the intrinsic and narrow band methods.
It uses a semi-discrete approach (or the method-of-lines) in which the surface derivative operators (e.g.
surface Laplacian) that appear in the PDEs are approximated using collocation.
These approximations
are made using RBF interpolation on surfaces . In this way, the method is similar to the ones used
in for the surface of a sphere. However, the new method applies to more general surfaces,
including those that can be deﬁned parametrically or implicitly (as the level-set of a function). Since the
method is based on RBFs, it allows the computational nodes to be placed at “scattered” locations on the
surface (see Figure 1 for examples). Furthermore, it does not rely on any surface-based metrics or intrinsic
coordinate systems, thus avoiding any coordinate distortions or singularities.
In this regard, our kernel
method is similar to the embedded, narrow-band methods discussed above.
The diﬀerence is that our
method approximates the surface diﬀerential operators directly on the surface instead of having to extend
quantities oﬀthe surface and do the approximations in R3. Thus, like the intrinsic methods, our method is
posed in the same dimension as the original problem. This ability to directly approximate the diﬀerential
operator also means that no degeneracies arise from having to modify the equations so that the solutions
remain restricted to the surface. Furthermore, computational eﬃciencies are gained by not having to extend
into the full three dimensional space to solve the problems.
Recently, a diﬀerent kernel method based on RBFs was introduced by Piret for solving PDEs on surfaces,
which is called the Orthogonal Gradients (OGr) method .
This method shares many similarities to
the embedded, narrow band method known as the Closest Point Method and is diﬀerent from
our method in a number of ways. For example, the OGr method requires expanding into the embedding
space (R3) to obtain discrete surface diﬀerential operators, which increases the computational complexity.
Further, a diﬀerentiation matrix is constructed by enforcing that the ﬁrst and second normal derivatives
to the surface of a certain RBF interpolant vanish. This means in particular that one must analytically
calculate the derivatives of the normal vectors to the surface, which requires that a smooth representation of
the surfaces is known. In contrast, our method only requires nodes at scattered locations on the surface and
the corresponding normal vectors to the surface, and does not require expanding into R3. Furthermore, the
discrete operators for the present method are constructed from the inversion of a single traditional positivedeﬁnite kernel interpolation matrix, which is guaranteed to be invertible. Additionally, we provide a theory
for the convergence of the discrete surface diﬀerential operators.
The application of kernel methods (including RBFs) to problems on general surfaces is still in its infancy.
The goal of this paper is thus to investigate some of the theoretical and applied aspects of our kernel method
and to establish its applicability.
As a result, we (a) present error estimates for approximating various
surface diﬀerential operators; (b) numerically investigate the stability and accuracy of the method, showing
how solutions can be computed to very high orders of accuracy; and (c) apply the method to two relevant
problems in biology and chemistry.
The remainder of the paper is organized as follows. In next section, we brieﬂy review kernel interpolation
with RBFs. We follow this with a short presentation in Section 3 on how to formulate surface diﬀerential
operators in Cartesian coordinates. Section 4 describes how these surface diﬀerential operators are discretized
in the form of diﬀerentiation matrices and presents the kernel method in method-of-lines form. Making heavy
use of the results from , we provide error estimates for the discrete surface derivatives in Section 5 (and
proofs in Appendix A). Section 6 numerically investigates the eigenvalue stability of the kernel method. We
numerically demonstrate the convergence the method for the forced scalar diﬀusion equation to two diﬀerent
surfaces in Section 7. Applications of the method to simulations of pattern formations in a Turing system
and to spiral waves in excitable media are presented in Section 8. We conclude with some comments on
potential future enhancements of the method in Section 9.
Before continuing to the main body of the paper, we pause to make some relevant remarks on what
follows. While there are many types of classiﬁcations of surfaces or manifolds, in our work, we use the term
surface or manifold to always refer to a smooth embedded submanifold of Rd with no boundary. We use
the notation M to denote the manifold. For simplicity, we present our method for manifolds of dimension
2 embedded in R3. However, it can be naturally extended to manifolds of codimension 1 embedded in Rd.
Although not pursued here, more technical, but straightforward extensions are possible for manifolds of
higher codimension.
Brief overview of kernel interpolation
Fundamental to the construction of our approximate surface diﬀerential operators are kernel interpolants.
Let Ω⊆Rd and φ : Ω× Ω→R be a continuous function, which we will refer to as a kernel. Given a set of
“scattered” nodes X = {xj}N
j=1 ⊂Ωand a continuous target function f : Rd →R sampled at X, a kernel
interpolant takes the general form
cjφ(x, xj), x ∈Ω,
where cj are determined by requiring Iφf
X. It is well-known that there are many kernels φ for which
a unique solution to this problem exists. In particular, if for any non-zero vector b ∈RN, φ satisﬁes
biφ(xi, xj)bj > 0,
then there exists a unique solution to (2). We call φ that satisfy (3) for all ﬁnite node sets X ⊂Ωpositive
deﬁnite kernels on Ω.
(a) Unit sphere
(b) Red blood cell
(c) “Bumpy sphere”
(e) Dupin’s cyclide
(f) Bretzel2
Figure 1: Example surfaces and “scattered” nodes (represented as small solid spheres) used in the numerical
experiments. A description of the surfaces and the node sets is given in Appendix B.
In this study we focus on the popular subclass of positive deﬁnite kernels called radial basis functions
(RBFs), which have the property that φ(x, y) = φ(∥x −y∥), where ∥· ∥is the standard Euclidean norm.
(Strictly speaking, there are RBFs that are only conditionally positive deﬁnite [20, Ch. 7], but our focus will
be on the positive deﬁnite ones). For these radial kernels (2) becomes
cjφ(∥x −xj∥)
and the interpolation constraints can be expressed as the following linear system:
where (AX)i,j = φ(∥xi−xj∥). For a positive deﬁnite φ, this system is positive deﬁnite and hence non-singular.
We will use the following two popular RBFs in this study:
φν(r) = Cν(εr)ν−d/2Kν−d/2(εr), ν > d/2, ε > 0,
1 + (εr)2 , ε > 0,
which are positive deﬁnite on Rd. In (6), Cν = 21−(ν−d/2)/Γ(ν −d/2) and Kβ is the modiﬁed Bessel function
of the second kind of order β. The Mat´ern family of kernels are piecewise smooth, with the smoothness
controlled by the parameter ν. For example, with ν = d+3
2 , φν ∈C2(Rd) and with ν = d+5
2 , φν ∈C4(Rd).
In contrast, the inverse multiquadric (IMQ) kernel is C∞(Rd). Inﬁnitely smooth kernels like the IMQ are
used often in solving PDEs, and we have included results for the Mat´ern family to illustrate the diﬀerent
convergence rates that are possible with ﬁnitely smooth kernels.
Typically, kernel, and in particular RBF, interpolation is applied to problems where the data are scattered
in Rd or on the surface of the sphere. The present authors have recently proved that favorable error estimates
can be achieved when RBF interpolation is applied to reconstruction problems on more general manifolds
M of Rd . It is worth noting, that the interpolants for these reconstruction problems are not modiﬁed
from their original form (4), i.e. distances are still measured as straight line distances, and not as distances
intrinsic to the manifold. Thus, the interpolation method needs only limited knowledge of the underlying
manifold; it only requires computing the solution to the linear system (5). In what follows, we will use (4) to
approximate the surface gradient and surface divergence over a given set of nodes X ⊂M on the manifold,
and combine these to obtain an approximation for the surface Laplacian. For this construction, we will only
need a point set X ⊂M and the normals to M at each point in X.
We conclude with some remarks on the parameter ε in (6) and (7), which is called the “shape parameter”
since it can be used for changing the kernels from peaked (large ε) to ﬂat (small ε). In general, better
accuracy is obtained for smaller values of ε [20, 32, Ch. 16–17]. However, the standard way of computing
the interpolant by solving (5) becomes increasingly ill-conditioned. While several types of stable algorithms
have been developed for bypassing this ill-conditioning , these algorithms generally break down
when the nodes X fall on a lower dimensional manifold of Rd, unless the surface topology is taken into
account in the algorithm (as done on the sphere in ). Modiﬁcations to these algorithms are underway to
address this issue , but they are not yet generally available. As a result, in this study we will not give
much attention to issues of the shape parameter, but will instead choose it in the applications to ensure the
linear system (5) is reasonably well-conditioned.
Continuous surface diﬀerential operators
Here we assume that M is a smooth embedded submanifold of Rd with no boundary and dim(M) = d −1.
In the descriptions of the surface diﬀerential operators on M that follows, we will focus on the case of d = 3
for notational simplicity. The extension to other d should be obvious. Additionally, all expressions are given
in extrinsic (or Cartesian) coordinates.
For any point x = (x, y, z) on M, we denote the normal vector to M at x as n = (nx, ny, nz) and the
vector space of tangent vectors to M at x as TxM. The surface gradient on M at x is then given as
Here the 3-by-3 matrix P projects vectors in R3 to TxM. Letting ex, ey, ez, be the standard unit vectors in
x, y, and z directions in R3, we can re-write (8) in component form as
(ex · P) ∇
(ey · P) ∇
(ez · P) ∇
(ex −nxn) · ∇
(ey −nyn) · ∇
(ez −nzn) · ∇
With this notation, the surface divergence of a smooth vector ﬁeld f = (f x, f y, f z) : M →R3 at a point
x ∈M can be expressed as
∇M · f := (P∇) · f = Gxf x + Gyf y + Gzf z.
Finally, the Laplace-Beltrami operator on M at x can be written using (9) and (10) as:
∆M := ∇M · ∇M = (P∇) · (P∇) = GxGx + GyGy + GzGz.
In what follows, we will approximate the Laplace-Beltrami operator in the form of (11) by replacing the
continuous operator (9) with a discrete version based on the kernel interpolant (4).
Kernel collocation technique in method-of-lines form
The discrete approximations to the surface diﬀerential operators that will be used in the method-of-lines
(MOL) are based on applying the projected gradient (9) to the kernel interpolant (4). We illustrate how to
construct these approximations by ﬁrst applying the projected gradient to a radial kernel. We then show
how to express the discrete operators as diﬀerentiation matrices. This is followed by a description of the
MOL formulation with these discrete operators for the diﬀusion equation. As in the previous section, we
formulate everything in R3, with an obvious extension to other dimensions.
Projected gradient of a radial kernel
Let x and xj be points on M, and let rj(x) = ∥x −xj∥denote the Euclidean distance from x to xj, i.e.
(x −xj)2 + (y −yj)2 + (z −zj)2. With this notation, a radial kernel φ : R3 × R3 →R centered
at xj is given by φ(rj(x)). Under the assumption that φ(rj(x)) is diﬀerentiable at x, a simple application
of the chain rule gives the gradient of φ(rj(x)) as
∇φ(rj(x)) =
∂xφ(rj(x))
∂y φ(rj(x))
∂z φ(rj(x))
φ′(rj(x))
= (x −xj)φ′(rj(x))
where we have used ′ to denote diﬀerentiation with respect to r. Note that the apparent singularity in the
above formula when rj(xj) = 0 will analytically cancel since φ is assumed to be an even function with at least
one continuous derivative. The surface gradient of φ(rj(x)) can then be obtained from (9). After applying
(9), the components of the surface gradient of φ(rj(x)) are
Gxφ(rj(x)) = ((1 −nxnx)(x −xj) −nxny(y −yj) −nxnz(z −zj)) φ′(rj(x))
Gyφ(rj(x)) = ((1 −nyny)(y −yj) −nxny(x −xj) −nynz(z −zj)) φ′(rj(x))
Gzφ(rj(x)) = ((1 −nznz)(z −zj) −nxnz(x −xj) −nynz(y −yj)) φ′(rj(x))
We now have all the components necessary to build the RBF approximation of the surface gradient P∇of
a scalar quantity deﬁned on M.
Discrete operators in terms of diﬀerentiation matrices
Let f : M →R be some diﬀerentiable target function known at a set of “scattered” node locations X =
j=1 ⊂M. The ﬁrst step in constructing a discrete approximation to the surface gradient of f on X is to
construct an interpolant to f of the form (4). In the notation of this section, the interpolant takes the form
cjφ(rj(x)),
where the coeﬃcients cj are determined by collocation. We next apply the projected gradient operator (9)
to Iφf and evaluate at the nodes in X. Focusing on the Gx component of this operator and using (13), we
(GxIφf(x))
cj (Gxφ(rj(x)))
cj ((1 −nx
i )(xi −xj) −nx
i (yi −yj) −nx
i (zi −zj)) φ′(rj(xi))
where i = 1, . . . , N and (nx
i ) is the normal vector at xi. We can write this approximation in terms of
a matrix vector product using the notation from the linear system (5) as follows:
X )fX = Gx
The matrix Gx
X is an N-by-N diﬀerentiation matrix that represents the discrete RBF approximation to the
x-component of the projected gradient operator over the set of nodes in X. We can similarly obtain the
discrete approximations to the y- and z-components of the projected gradient operator as follows:
X )fX = Gy
X )fX = Gz
where the entries in By
X are given by
X)i,j = ((1 −ny
i )(yi −yj) −nx
i (xi −xj) −ny
i (zi −zj)) φ′(rj(xi))
X)i,j = ((1 −nz
i )(zi −zj) −nx
i (xi −xj) −ny
i (yi −yj)) φ′(rj(xi))
for i, j = 1, . . . , N. The full discrete approximation to the surface gradient operator ∇M is given in terms of
(17)–(19) as the 3N-by-N matrix
A discrete approximation to the surface divergence operator (10) can also be constructed from (17)–(19).
Let f = (f x, f y, f z) : M →R3 be a smooth vector ﬁeld and fX =
T denote the 3N-by-1
vector of samples of f on X. Then the discrete approximation of the surface divergence of f on X is given
Finally we can combine (20) and (21) to obtain a discrete approximation to the Laplace-Beltrami operator
LX = DXGX = Gx
The N-by-N diﬀerentiation matrix LX represents our discrete RBF approximation to the surface Laplacian
and is what we will use in the applications that follow. It is important to note that the construction of
LX only requires a node set X ⊂M and the normal vectors to M. Additionally, LX is constructed using
extrinsic coordinates and is thus free from any coordinate singularities (e.g. the pole singularity for the unit
sphere S2). In the case of M = S2, other studies have taken a diﬀerent approach at approximating the surface
Laplacian using kernel collocation (e.g. ). These studies apply the surface Laplacian directly instead
of approximating it with projected gradient as we have done. For more general manifolds, it is non-trivial
to work out the surface Laplacian in closed form, which is why we are advocating the use of the discrete
approximation (22).
In Section 5, we show that our discrete approximations (20)–(22) converge to the continuous surface
derivatives (9)–(11), respectively, as the nodes in X increases and “ﬁll” the manifold M.
Although the computational cost of constructing the discrete surface diﬀerential operators is O(N 3), these
constructions are a preprocessing step and can be done once and stored. Applying these surface diﬀerential
operators to a vector requires O(N 2) operations. In Section 9, we make some remarks on how these cost
may be reduced.
MOL formulation
To describe the MOL formulation of our kernel method, we use the equation for diﬀusion of a scalar quantity
u on a surface with a (non-linear) forcing term:
∂t = δ∆Mu + f(t, u).
Here δ > 0 is the diﬀusion coeﬃcient, f(t, u) is the forcing term, and an initial value of u at time t = 0 is
given. Letting X = {xj}N
j=1 ⊂M and uX ∈RN denote the vector containing the samples of u at the points
in X, our method for (23) takes the form
dtuX = δLXuX + f (t, uX) ,
where LX is the diﬀerentiation matrix (22) corresponding to our discrete approximation of ∆M. This is
a system of N coupled ODEs and, provided it is stable, can be advanced in time with a suitably chosen
time-integration method (see the Sections 7 and 8 for examples). In Section 6, we numerically investigate
the eigenvalue stability of the method.
Convergence results for the discrete surface derivatives
In this section we present the convergence results for our discrete diﬀerential operators. Given that these
operators are essentially obtained by diﬀerentiating interpolants, our error estimates will rely on the approximation power of kernel interpolants. Recently, Sobolev error estimates for a wide variety of kernel
interpolants (constructed from RBF kernels restricted to surfaces) were made available for smooth, embedded submanifolds of Rd , and these results can be used to derive the bounds in this section. Precisely
stated theorems and their proofs are given in Appendix A for the interested reader. A summary of the
results will be presented after we establish the necessary notation.
Deﬁnitions and notation
As is typical in scattered data approximation, the error estimates are given in terms of the mesh norm h
and separation radius q of the point set X on M, which are given by
xj∈X dM(x, xj)
dM(xi, xj),
where dM(x, xj) is the geodesic distance between x and xj on M, i.e. it is the arclength of the shortest curve
on M connecting x and xj. The uniformity of the data is also important - this is measured by the mesh
ratio ρ := h/q.
Every positive deﬁnite kernel is the reproducing kernel for a space of continuous functions, often called
the native space (see [20, Chapter 13] or [68, Chapter 10] for details). We will denote the native space of
a scalar kernel φ with domain Ω⊆Rd by Nφ(Ω). When determining the approximation power of a given
kernel, there is a rich theory to draw from when the target function lies within Nφ(Ω).
The native spaces associated with all of the kernels we consider here are subsets of, and sometimes equal
to, Sobolev spaces. We denote by Ht(Rd) the space of functions whose distributional derivatives up to order
t are all in L2(Rd), with the usual norm. We will ultimately consider Sobolev spaces on a manifold M, where
M is a 2-dimensional smooth embedded submanifold of R3. We denote by Ht(M) the space of functions on M
whose projections onto R2 by coordinate charts are all in the Sobolev space Ht(R2) (see [36, Section 2]). Since
our manifold is embedded in R3, a natural choice for vector-valued functions on M is Ht(M) := (Ht(M))3.
The norm for a function f = (f x, f y, f z) ∈Ht(M) is given by
∥f∥Ht(M) :=
Ht(M) + ∥f y∥2
Ht(M) + ∥f z∥2
The kernels that we use throughout the paper give rise to spaces of continuous Sobolev functions. Thus
from this point on we assume that for some τ > 3/2 the kernel φ satisﬁes
bφ(ω) ≤C(1 + ∥ω∥2)−τ,
where bφ is the Fourier transform of φ on R3 and C is a constant.1 Radial kernels whose Fourier transforms
decay exponentially, such as the Gaussian or IMQ, obviously satisfy this. For ﬁnitely smooth kernels, we
will require the stronger condition that
c(1 + ∥ω∥2)−τ ≤bφ(ω) ≤C(1 + ∥ω∥2)−τ,
where c and C are positive constants. Note that in particular the Mat´ern kernels (6) satisfy (26) since [68,
bφν(ω) = (1 + ∥ω∥2)−ν.
It can be shown that kernels satisfying (25) obey Nφ(M) ⊆Hs(M), and that those satisfying (26) give
Nφ(M) = Hs(M) [36, Theorem 3.3], where s = τ −1/2. The parameter s governs the smoothness of the
native spaces intrinsic to the surface M, so the error estimates that follow will often be given in terms of s.
Summary of convergence results
We need to deﬁne continuous analogues to our discrete diﬀerential operators. Recall that the operators GX
and DX are designed by applying surface diﬀerential operators to an RBF interpolant. This prompts the
following deﬁnitions:
GMf := ∇MIφf,
DMf := ∇M · IΦf,
LMf := DMGMf,
where IΦf = (Iφf x, Iφf y, Iφf z) is the vector-valued kernel interpolant of f. For any continuous functions f
and f, the functions above sampled on X agree with the associated discrete diﬀerential operator acting on
the vector fX or fX, e.g. (LMf)|X = LXfX. To determine how well LX approximates ∆M, for example, we
will derive estimates for the error ∥LMf −∆Mf∥over the entire domain.
The error will be measured in the L2(M) and L∞(M) norms, and we do this for a few reasons. Even
though error is often measured empirically with an ∞-type norm, the current theoretical ∞-norm error
estimates for many kernel approximation problems typically give slower rates than those observed experimentally. The observed ∞-norm rates tend to be closer to the L2-type convergence rates, which are often
optimal. Thus one can probably expect the faster L2(M) convergence rates in practice. With that, here is
our ﬁrst approximation result.
Result 1: First-order discrete operators. Suppose the kernel φ satisﬁes (25) with τ > 3/2 + 1 and
deﬁne s = τ −1/2. Then the following holds for all f ∈Nφ(M) and f ∈(Nφ(M))3.
∥GMf −∇Mf∥L2(M)
∥GMf −∇Mf∥L∞(M) ≤O(hs−2),
∥DMf −∇M · f∥L2(M)
∥DMf −∇M · f∥L∞(M) ≤O(hs−2).
For a proof, see Proposition 1, Appendix A. Note that for kernels such as the Gaussian and IMQ, which
satisfy (25) for all τ > 0, this implies convergence faster than any ﬁxed algebraic order for target functions
within the native space.
A key assumption in the above result is that the target function is within Nφ(M). When the kernel is
less smooth, we have the ability to provide error rates for many target functions not within Nφ(M) - the
only requirement is that the targets be in a Sobolev space smooth enough so that ﬁrst-order derivatives are
continuous (since dim(M) = 2, this means that f ∈Hβ(M) for some β > 2). In this case the uniformity
of the data sites, measured by the mesh ratio ρ, enters the error estimates. Proposition 2 in Appendix A
implies the following.
1The condition τ > 3/2 ensures that functions within the kernel’s native space are continuous on R3.
Result 2: First-order discrete operators with ﬁnitely smooth kernels. Suppose φ satisﬁes (26) with
τ > 3/2 + 1, deﬁne s = τ −1/2, and let β satisfy s ≥β > 2. Then the following holds for all f ∈Hβ(M)
and f ∈Hβ(M):
∥GMf −∇Mf∥L2(M)
O(hβ−1ρs−β),
∥GMf −∇Mf∥L∞(M) ≤O(hβ−2ρs−β),
∥DMf −∇M · f∥L2(M)
O(hβ−1ρs−β),
∥DMf −∇M · f∥L∞(M) ≤O(hβ−2ρs−β).
In addition, for very smooth target functions2 these kernels give the following error rates:
∥GMf −∇Mf∥L2(M)
∥GMf −∇Mf∥L∞(M) ≤O(h2s−2),
∥DMf −∇M · f∥L2(M)
∥DMf −∇M · f∥L∞(M) ≤O(h2s−2).
Finding bounds on the discrete Laplacian is less straightforward - the repeated process of “interpolate,
then diﬀerentiate” complicates matters. This will ultimately result in more factors of ρ in the estimates,
even in the case of very smooth target functions. Unfortunately error bounds for the discrete Laplacian
constructed from inﬁnitely smooth kernels are currently unavailable. However, we will be able to provide
high-order convergence rates in the discrete Laplacian for any kernel satisfying (26). The following comes
from Theorems 5 and 7, Appendix A.
Result 3: Discrete Laplacian with ﬁnitely smooth kernels. Suppose φ satisﬁes (26) with τ > 3/2+2,
deﬁne s = τ −1/2, and let β satisfy s ≥β > 3. Then the following holds for all f ∈Hβ(M) and f ∈Hβ(M):
∥LMf −∆Mf∥L2(M)
O(hβ−2ρ2(s−β)+1), ∥LMf −∆Mf∥L∞(M) ≤O(hβ−3ρ2(s−β)+1).
In addition, for very smooth target functions3 these kernels give the following error rates:
∥LMf −∆Mf∥L2(M)
O(h2s−2ρ),
∥LMf −∆Mf∥L∞(M) ≤O(h2s−3ρ).
For solving time-dependent PDEs, one often is only concerned with approximating derivatives at the
nodes since typically these are the only locations the numerical solution is known. If our point set X is
always chosen in such a way that ρ is bounded by a ﬁxed constant and f is any target function in a Sobolev
space smooth enough to guarantee continuous second-order derivatives (that is, f ∈Hβ(M) with β > 3),
Result 3 guarantees that
∥LXfX −(∆Mf)|X∥l∞≤∥LMf −∆Mf∥L∞(M) ≤O(hβ−3) →0.
Now that we have established spatial accuracy, we need to discuss the stability of numerical PDE solvers
based on these discrete diﬀerential operators.
Eigenvalue stability
A necessary condition for stability of the MOL approach described in Section 4 is that the eigenvalues of the
diﬀerentiation matrices LX in (24) must be in the stability domain of the ODE solver used for advancing the
system in time. We propose using either fully-implicit backward diﬀerentiation formulae (BDF) methods
in the case where there is no forcing terms, and semi-implicit BDF methods (SBDF) in the case of forcing
terms (see Sections 7 and 8 for details). This means that, at the very least, all eigenvalues must be in the
left half plane. Unfortunately, the construction of the discrete approximation of ∆M does not guarantee that
this property will hold for LX. Fortunately however, we have found from numerous numerical experiments
that provided the mesh norm h is small enough (i.e. the surface is well-discretized), then it appears that all
of the eigenvalues do in fact lie in the left half plane. To illustrate these observations, in Figures 2(a)–(f) the
eigenvalues of LX are plotted for the surfaces and node sets depicted in Figure 1. Results are shown for both
the IMQ kernel and the ν = 7 Mat´ern kernel, which is C10(R3). While not presented here, similar results
were obtained for the Mat´ern kernels with ν < 7. The shape parameters, which are listed in the ﬁgure, have
been chosen for this experiment so that the condition numbers of (5) are around 1010. We ﬁnd that even
(a) Unit sphere
(b) Red blood cell
(c) “Bumpy sphere”
(e) Dupin’s cyclide
(f) Bretzel2
Figure 2: Eigenvalues of the discrete Laplacian for the surfaces and node sets shown in Figure 1.
correspond to the IMQ kernel with shape parameters chosen as (a) ε = 2.8, (b) ε = 4, (c) ε = 5, (d) ε = 2.8,
(e) ε = 2, and (f) ε = 6.5, while ◦’s correspond to the ν = 7 Mat´ern (MA) kernel with shape parameters
chosen as (a) ε = 8, (b) ε = 12, (c) ε = 15, (d) ε = 8, (e) ε = 6, and (f) ε = 16.
when the nodes are quite scattered (as in the case of the Dupin’s cyclide and Bretzel2) the eigenvalues all
lie in the left half plane in these examples.
For node sets that are not suﬃciently dense, we have found cases where some eigenvalues of the diﬀerentiation matrix shift over to the right half-plane. To illustrate this, we repeat the above experiment for
the “bumpy sphere” with only N = 1035 nodes instead of N = 5256. Figure 3(a) shows this reduced node
set on the “bumpy sphere”, while part (b) of this ﬁgure shows the corresponding eigenvalues of the discrete
Laplacian for both the ν = 7 Mat´ern and IMQ kernels. The shape parameters here were chosen so that
the condition numbers of (5) are similar to those from the N = 5256 experiments. We can see from this
latter ﬁgure that the majority of the eigenvalues fall in the left half plane for both kernels, but that there are
now a few that fall in the right half plane. Fortunately, these “unstable” eigenvalues appear to correspond
to high frequency eigenvectors as illustrated in part (c) of Figure 3 for the Mat´ern kernel (a similar result
holds for the IMQ kernel and the results are thus omitted). Unphysical eigenmodes of this type also appear
in other contexts of kernel methods for PDEs . For these applications, Fornberg and Lehto 
describe a global hyperviscosity stabilization procedure for selectively shifting the unstable eigenvalues to
the left half plane without a reduction in accuracy. Given the similarity of the unstable eigenmodes in the
current problem, it seems reasonable to expect this hyperviscosity procedure to also be applicable in the
present context. In the numerical experiments of this study that follow in the next section, all eigenvalues
2See the discussion preceeding Proposition 2 in Appendix A for details.
3See Theorem 7 for details.
Figure 3: (a) “Bumpy sphere” with N = 1035 nodes. (b) Eigenvalues of the discrete Laplacian corresponding
to part (a). ×’s correspond to the IMQ kernel with shape parameter ε = 2, while ◦’s correspond to the
ν = 7 Mat´ern (MA) kernel with shape parameter ε = 6. (c) Eigenvector corresponding to the eigenvalue of
the discrete Laplacian with the largest real part shown in part (b) using the ν = 7 Mat´ern kernel.
of discrete Laplacian lie in the left half plane. We leave exploration of stabilization via hyperviscosity to a
separate study.
Numerical convergence results
In this section we demonstrate the convergence of our numerical method for approximating the scalar diﬀusion
equation with forcing (23) on two surfaces: the unit sphere S2 and the torus shown in Figure 1(d). In all
the tests we use the standard fourth-order backward diﬀerentiation formulae (BDF4) method for advancing
the approximate solution in time. The time-step is set to ∆t = 10−4 to ensure that spatial errors dominate
over temporal errors.
Results for three kernels of varying smoothness are presented to illustrate the diﬀerent convergence rates
that are possible. The ﬁrst two are the ν = 4 and ν = 6 kernels from the Mat´ern family (6), which are C4(R3)
and C8(R3), respectively. The third kernel is the inﬁnitely smooth IMQ (7). For the Mat´ern kernels, the
analysis from Section 5 applies so we expect an algebraic rate of decay in the approximate solutions. While
we don’t have estimates on the approximation of the surface Laplacian for the IMQ kernel, the estimates
from Result 1 in Section 5 on the discrete surface gradient and divergence suggest that this inﬁnitely smooth
kernel should give rates of approximation that are faster than any polynomial order (provided the underlying
target is suﬃciently smooth). We ﬁx the shape parameters of the kernels in all the tests as follows: ε = 4
for ν = 4 Mat´ern, ε = 8 for ν = 8 Mat´ern, and ε = 3 for IMQ. These values have not been optimized and
are chosen simply to illustrate the convergence rates of our method.
Finally, we measure the errors in the numerical solutions using both the discrete two-norm and maxnorm. To deﬁne the discrete two-norm we use an approximation of the continuous L2(M)-norm based on
quadrature rules deﬁned at the collocation nodes. We use the following abuse of notation to denote our
discrete two-norm:
∥f∥L2(M) :=
wi[f(xi)]2
where {wi}N
i=1 are quadrature weights for the surface integral at the collocation nodes {xi}N
i=1 on the manifold. These weights are computed using a second-order accurate midpoint rule approximation on the surface.
We use the standard deﬁnition for discrete max-norm and denote it with the standard notation of ℓ∞.
Relative Error
ℓ2 norm; rate=-7.23
ℓ∞norm; rate=-7.01
(a) Initial condition
(b) Mat´ern ν = 4
Relative Error
ℓ2 norm; rate=-11.74
ℓ∞norm; rate=-11.00
Relative Error
(c) Mat´ern ν = 6
Figure 4: (a) Initial condition for the forced diﬀusion problem on the unit sphere. (b)–(c) Convergence
results for the forced diﬀusion problem for three diﬀerent radial kernels. These last three plots are displayed
on a log-log scale with the horizontal axis being the square root of the number of collocation nodes N, which
N ∼1/h. Black dashed lines in (b) and (c) are the lines of best ﬁt to the last 4 values and the
slopes of the lines are given in the legends.
Diﬀusion on the unit sphere with forcing
For the ﬁrst example, we use a test problem ﬁrst presented in . For this test, an artiﬁcial solution to (23)
is speciﬁed (with δ = 1) and the forcing function f is chosen so that this solution is maintained for all time.
The solution is given by
u(t, x) = exp(−5t)
exp (−10 arccos(ξk · x)) ,
where ξk, k = 1, . . . , 23 are randomly placed points on the surface of the sphere. The term in the sum is
a Gaussian centered at ξk with the distance measured using the geodesic distance. The solution is clearly
C∞(S2) and its value at t = 0 is displayed in Figure 4(a). In our results, the forcing function corresponding
to (27) is computed analytically and evaluated implicitly in time.
The test calls for comparing the errors in the approximate solution of (23) at time t = 0.2 at various
spatial resolutions. For our spatial resolutions, we use minimum energy (ME) node sets on the unit sphere
discussed in Appendix B.1. The diﬀerent sizes of the node sets are N = 1024, 1444, 2025, 3136, 4096, and
5041, which are all perfect squares. Figures 4(b)–(d) display the results of the convergence study for these
node sets and the three respective radial kernels. Since the mesh norm for the ME nodes satisﬁes h ∼1/
we plot the relative errors vs.
N. All three convergence plots are on a log-log scale.
Figures 4(b) and (c) illustrate the algebraic convergence rate of the approximate solution for the two
Mat´ern kernels. The black dashed line in these ﬁgures shows the lines of best ﬁt to the data and the slope of
the diﬀerent lines is given in the legend. Since the solution is C∞(S2), we expect the estimates from Result
3 to apply to the approximations of the surface Laplacian in this test problem. Note that node sets we are
using are quasi-uniform, so the mesh ratio that appears in Result 3 will have little or no eﬀect here. For
the ν = 4 Mat´ern kernel this result predicts the approximate surface Laplacian to converge like O(h5) in
the ℓ2-norm and O(h4) for the ℓ∞-norm, while for the ν = 6 Mat´ern kernel these convergence rates should
be O(h9) and O(h8). We see from Figures 4(b) and (c), however, that the measured rates of convergence
for the numerical solutions to the forced diﬀusion problem (23) are much higher than the predicted rates
for the surface Laplacian. One reason for these higher rates may be that the estimates from Result 3 apply
to the entire manifold, while we are only measuring the errors at the collocation nodes (which are the only
locations where the approximate solution is known). We may therefore be beneﬁtting from some form of
super-convergence, which is known to occur at the nodes in certain periodic spline methods . A more
detailed study of this phenomenon is currently under way .
Figure 4(d) displays the results for the IMQ kernel. The results in this plot suggest that the convergence
of the approximate solution is converging at a rate faster than any polynomial order. Further numerical
investigations not presented here seem to indicate that the solution is converging at an exponential rate.
This type of convergence has also been observed for collocation methods based on inﬁnitely smooth kernels
for the scalar transport and nonlinear shallow water wave equations on the surface of the sphere .
Diﬀusion on a torus with forcing
For the second example, we again consider computing the solution of (23), but with the torus shown in
Figure 1(d) and described in Appendix B.4. Like the previous test, we specify the solution and then choose
the forcing function so that this solution is maintained for all time. The solution is given by
u(t, x) = 1
8 exp(−5t)x
 x4 −10x2y2 + 5y4  x2 + y2 −60z2
where x is a point on the Torus; see Figure 5(a) for a plot of u(0, x). We compute the forcing function
analytically and evaluate it implicitly in the BDF4 scheme.
A key ingredient to computing the forcing
function is determining the surface Laplacian of u(t, x). For convenience, we provide the equation for this
∆Mu(t, x) = −3
8ρ2 exp(−5t)
x(x4 −10x2y2 + 5y4)
(10248ρ4 −34335ρ3 + 41359ρ2 −21320ρ + 4000)
As in the previous test, we compare the errors in the approximate solution of (23) at time t = 0.2 at
various spatial resolutions. We also use ME node sets on the torus for the spatial discretization as discussed
in Appendix B.4. The sizes of the diﬀerent node sets are N = 500, 750, 1000, 2000, 3000, and 4000. The
results of the convergence study for these node sets and the three radial kernels are displayed in Figures
5(b)–(c). As in the previous test, the mesh norm for the ME nodes on the torus satisﬁes h ∼1/
again plot the relative errors vs.
Figures 5(b) and (c) display the results for the ν = 4 and ν = 6 Mat´ern kernels, respectively. Like the
previous test, we clearly see the algebraic rates of convergence for these kernels, and the measured rates
of convergence of the approximate solutions for both kernels are much higher than the predicted rates of
convergence for the discrete Laplacian from Result 3. We again believe these higher rates may be related
to our restriction of measuring the errors at the collocation nodes.
Finally, we note that the measured
convergence rates for the current test problem and the previous one are comparable, with only a slightly
higher observed rate for the current one.
Relative Error
ℓ2 norm; rate=-7.47
ℓ∞norm; rate=-7.47
(a) Initial condition
(b) Mat´ern ν = 4
Relative Error
ℓ2 norm; rate=-12.39
ℓ∞norm; rate=-12.08
Relative Error
(c) Mat´ern ν = 6
Figure 5: (a) Initial condition for the forced diﬀusion problem on a torus. (b)–(c) Convergence results for the
forced diﬀusion problem for three diﬀerent radial kernels. These last three plots are displayed on a log-log
scale with the horizontal axis being the square root of the number of collocation nodes N, which satisﬁes
N ∼1/h. Black dashed lines in (b) and (c) are the lines of best ﬁt to the last 3 values and the slopes of
the lines are given in the legends.
Figure 5(c) displays the results for the IMQ kernel. The results indicate the approximate solution is
converging at a rate higher then any polynomial degree, which is entirely inline with the previous results.
While not presented here, a further analysis of the numerical results indicate that the rate of convergence is
again exponential for this kernel.
Applications
In the applications we consider systems of PDEs of the form (1). We use the third-order, semi-implicit,
backward diﬀerentiation formulae (SBDF3) method discussed and analyzed in for advancing the semidiscrete systems in time. This scheme treats the diﬀusion terms implicitly and the (non-linear) reaction
terms explicitly. We bootstrap the simulation with one step of the ﬁrst order SBDF followed by one step of
the second order SBDF (see for details on these schemes). Upon initial LU decompositions of the linear
systems that result from the implicit discretization, each time-step requires O(N 2) operations.
We only present results for the IMQ kernel using the same shape parameters as used in the stability tests
(refer to the caption of Figure 2 for these values). However, similar results were obtained when using other
shape parameters and when using the Mat´ern kernels.
Turing patterns
Since Turing’s classical paper that suggested how certain non-linear models of reaction and diﬀusion
can lead to stable, heterogeneous pattern formations, there has been an explosion of research in reactiondiﬀusion-type models for various kinds of morphogenesis . Most of the theoretical and numerical
investigations of these models have been restricted to ﬂat planar domains, but there is growing interest in
studying these models on more general surfaces to understand how curvature may eﬀect pattern formation.
Additionally, there has been interest in the computer graphics community for using Turing models to generate
interesting textures and patterns on surfaces .
We illustrate how our method can be applied to these types of pattern formation problems by applying
it to the Turing system (a linearized Brusselator model) from :
∂t =δu∆Mu + αu(1 −τ1v2) + v(1 −τ2u)
∂t =δv∆Mv + βv
+ u(γ + τ2v)
Here u and v are morphogens with u the “activator” and v is the “inhibitor”. If α = −γ then (u, v) = (0, 0) is
a unique equilibrium point of this system. By changing the diﬀusivity rates of u and v an instability can form
that leads to diﬀerent pattern formations. The cubic coupling parameter τ1 favors the formation of stripes,
while the quadratic coupling parameter τ2 favors the formation spots . The spot pattern formations are
more robust than stripes and take far less time to reach “steady-state”. The model (30) and similar models
have been previously used to illustrate the applicability of some of the other numerical methods for PDEs
on surfaces .
Figure 6 shows the results from our numerical solutions of (30) on various surfaces using parameters that
lead to both spot and stripe patterns. Similar to the experiments on the surface of the sphere in , we set
the initial values of u and v to random values between −0.5 and 0.5 in a thin strip around the “equator” of
each surface and u = v = 0 elsewhere. Values for all parameters were also motivated from the values used
in and are listed in Table 1. A time-step of ∆t = 0.01 was used in all the simulations and the numerical
solutions were computed until steady-state was reached. The resulting stripe and spot patterns in Figure 6
are qualitatively similar to those obtained from other numerical methods .
Surface/Pattern
Red blood cell/spots
4.5 · 10−3
Red blood cell/stripes
2.1 · 10−3
Bumpy sphere/spots
4.5 · 10−3
Bumpy sphere/stripes
2.1 · 10−3
Dupin’s cyclide/spots
4.5 · 10−2
Dupin’s cyclide/stripes
1.89 · 10−2
Bretzel2/spots
2.1 · 10−3
Bretzel2/stripes
8.87 · 10−4
Table 1: Values of the parameters of (30) used in the numerical experiments shown in Figure 6. In all cases
δu = 0.516δv.
Spiral waves in excitable media
Spiral waves can be observed in many excitable chemical, biological, and physical media . Important examples include Belousov-Zhabotinsky chemical reactions and electrical activity in the membranes of
Figure 6: Turing spot and stripe patterns computed from the model (30) on various surfaces. The pseudocolor
plots are for the activator u once steady state is reached. In all plots red corresponds to a high concentration
of u and blue to a low concentration. For all simulations the time-step was set to ∆t = 0.01; parameters
used to get the diﬀerent patterns are given in Table 1.
organisms. While numerical methods have been developed for these models in planar domains (see and
the corresponding software EZ-Spiral), there has been growing interest in studying these models on nonplanar surfaces since most physically relevant problems occur on curved surfaces and curvatrue can eﬀect
the wave processes . To illustrate how our kernel method may be applied to these models, we focus
Figure 7: Snap shots of spiral wave patterns computed from the Fitzhugh-Nagumo model (31) at diﬀerent
times. The left column shows the excitation variable u on the bumpy sphere at times t = 42.24, 42.80, 43.76
and 44.8. The right column shows u on Dupin’s cyclide at times t = 42.76, 43.48, 44.40 and 45.24. The node
sets used in the simulations are shown in Figure 1 (c) and (e), respectively, and the time-step was set to
∆t = 0.02. The colors in the pseudocolor plots change linearly from white (u = 0) to black (u = 1)..
on a simple two-variable reaction-diﬀusion model used in :
∂t =δu∆Mu + 1
∂t =δv∆Mv + u −v
where u and v can be viewed as some chemical concentrations or as membrane potential and current. The
parameters a, b, and α govern the reaction kinetics and δu and δv are the diﬀusivities of the u and v species
respectively. The parameter α is chosen as α << 1 so that the u ﬁeld takes on the values u = 0 or u = 1
almost everywhere, with a thin interface (or reaction zone) separating these two regions. The system (31)
is of Fitzhugh-Nagumo type and provides a simple model for dynamics of many excitable media. These
types of systems have also been studied on the surface of the sphere .
Figure 7 displays snap shots from the numerical solution of (31) on the bumpy sphere and Dupin’s cyclide
at diﬀerent times of the simulation. For all of these experiments we set the initial conditions to
u(0, x) = 1
2 [1 + tanh(2x + y)] ,
v(0, x) = 1
2 [1 −tanh(3z)] ,
and ∆t = 0.02. Values for the parameters that remain ﬁxed for the two surfaces are as follows: a = 0.75,
b = 0.02, α = 0.02, and δv = 0. The values of δu vary depending on the surface as follows: δu = 1.5(2π/50)2
for the bumpy sphere and δu = 2.5(2π/50)2. These values are similar to those used in one of the experiments
from on a 2-D planar domain. The two quasi-periodic, counter-rotating spiral waves seen on both surfaces
in Figure 7 are qualitatively similar to those observed on the sphere in . These spiral waves remain intact
but meander around the surfaces throughout the simulation time.
Concluding remarks
In this paper, we have introduced a new kernel method based on collocation with RBFs for constructing
discrete approximations to diﬀerential operators on surfaces, with a focus on surfaces of dimension 2 embedded in R3. The method is diﬀerent than other methods for approximating surface diﬀerential operators
in that it only requires “scattered” nodes on the surface and the corresponding normal vectors, it does not
require expanding into the R3 embedding space, and it can give high-orders of accuracy. We have studied
the approximation power of the method and have provided error estimates for target functions of various
smoothness. We have used the method to construct discrete approximations to the surface Laplacian and
combined it in a method-of-lines approach to numerically solve diﬀusion and reaction-diﬀusion equations on
surfaces. We presented numerical results for two forced diﬀusion equations, illustrating the convergence of
the method for kernels with ﬁnite and inﬁnite smoothness. The numerical results for the ﬁnitely smooth
kernels indicate that the convergence rates are faster than our theory predicts, which may be related to
some form of super-convergence common to spline methods. Finally, we have illustrated the ﬂexibility of our
method by successfully applying it to two important problems in biology and chemistry.
The primary shortcoming of the method is the O(N 2) computational cost for applying these operators. In
a follow up study, we intend to address this issue by using a local RBF ﬁnite-diﬀerence (RBF-FD) method
for constructing the approximate surface diﬀerential operators. This method has been used successfully
in to overcome the computational cost of the global method for the shallow water wave
equations on the sphere and has recently been adapted to multi-GPU architectures in . We expect the
cost of constructing and applying these discrete operators based on RBF-FD to be reduced to O(N), with a
minor decrease in the order of accuracy. These enhancements may make the method competitive for solving
diﬀusion and reaction-diﬀusion equations on evolving surfaces, which is also important in many biological
applications.
Convergence Results
In this section we present the convergence results for our discrete diﬀerential operators. The results presented
here are for the special case when M ⊂R3 is a two dimensional surface, although similar results hold in
higher dimensions. The arguments will depend heavily on error estimates for kernel interpolants on smooth,
embedded submanifolds of Rd given recently in . We will frequently reference results from that paper
throughout this section.
Sobolev error estimates for the surface gradient and divergence operators will
immediately follow the results in . However, the estimates for the discrete surface Laplacian will require
more work.
Proposition 1. Let 1 ≤q ≤∞, φ be a positive deﬁnite kernel satisfying (25) with τ > 3/2 + 1, and deﬁne
s = τ −1/2. Then there is a constant hM depending only on M such that if a ﬁnite node set X ⊂M satisﬁes
h ≤hM, for all f ∈Nφ(M) and f ∈(Nφ(M))3 we have
∥GMf −∇Mf∥Lq(M)
Chs−1−2(1/2−1/q)+∥f∥Nφ(M),
∥DMf −∇M · f∥Lq(M)
Chs−1−2(1/2−1/q)+∥f∥Nφ(M),
where (x)+ = x if x ≥0 and is zero otherwise.
Proof. We will focus on the discrete gradient operator. We have
∥GMf −∇Mf∥Lq(M) = ∥∇MIφf −∇Mf∥Lq(M) ≤C∥Iφf −f∥W 1
q (M) is the Lq Sobolev space of order 1 (see Section 2, ). The assumptions on τ allow us to
apply Theorem 4.6 in , and the results follow. The error bounds in Theorem 4.6 in carry over to the
vector-valued case, thus bounds for the divergence operator error are obtained in a similar manner.
When φ satisﬁes (26), i.e. φ has ﬁnite smoothness, the estimates come in two types: the ﬁrst concerns
targets that may be too rough to be within the native space, and the second applies to functions with
additional smoothness. This additional smoothness is measured with the inverse of the integral operator4
φ(y, x)f(y)dµ(y).
We denote a vector version of this operator by T, which simply applies T to each component of a 3dimensional vector ﬁeld.
Similar to the proof above, the result below follows from Theorem 4.12 and
Corollary 4.10 in .
Proposition 2. Let 1 ≤q ≤∞, and let φ be a positive deﬁnite kernel satisfying (26) with τ > 3/2 + 1, and
deﬁne s = τ −1/2. Then there is a constant hM depending only on M such that if a ﬁnite node set X ⊂M
satisﬁes h ≤hM, we have the following:
1. Rough target functions. Let β be such that s ≥β > 2. Then for all f ∈Hβ(M) and f ∈Hβ(M)
∥GMf −∇Mf∥Lq(M)
Chβ−1−2(1/2−1/q)+ρs−β∥f∥Hβ(M),
∥DMf −∇M · f∥Lq(M)
Chβ−1−2(1/2−1/q)+ρs−β∥f∥Hβ(M).
2. Smooth target functions. For all f ∈L2(M) such that T −1f ∈L2(M) and f ∈L2(M) such that
T −1f ∈L2(M), we have
∥GMf −∇Mf∥Lq(M)
Ch2s−1−2(1/2−1/q)+∥T −1f∥L2(M),
∥DMf −∇M · f∥Lq(M)
Ch2s−1−2(1/2−1/q)+∥T−1f∥L2(M).
Obtaining convergence rates for the discrete Laplace operator is not as straightforward, and will require
extra tools. The ﬁrst is the “zeros lemma” from Narcowich, Ward and Wendland . We will use the
manifold version stated in [36, Lemma 4.5], with parameters adapted to our situation.
Proposition 3. Let 1 ≤q ≤∞, t ∈R with t > 1. Let µ ∈N satisfy 0 ≤µ ≤⌈t −2(1/2 −1/q)+⌉−1. Also,
let X ⊂M be a discrete set with mesh norm hX,M. Then there is a constant depending only on M such that
if hX,M ≤CM and if u ∈Ht(M) satisﬁes u|X = 0, then
q (M) ≤Cht−µ−2(1/2−1/q)+|u|Ht(M).
4With this integral operator comes the pseudodiﬀerential operators T −r, r > 0. A function f is in the native space if and
only if T −1/2f ∈L2(M) [36, Proposition 4.9], so we expect functions such that T −1f ∈L2(M) to be twice as smooth.
Proposition 3 also holds with full Sobolev norms, and a similar result holds for vector ﬁelds.
Since the operator LM is a mixture of diﬀerential and interpolation operators, it will be beneﬁcial to
bound the norm of the interpolation operator and its associated error in several diﬀerent Sobolev spaces. In
particular, we will use the following.
Lemma 4. Let φ satisfy (26) with τ > 3/2, and deﬁne s = τ −1/2. Let β be such that s ≥β > 1. Then
there is a constant hM depending only on M such that if a ﬁnite node set X ⊂M satisﬁes h ≤hM then for
all f ∈Hβ(M) we have
∥Iφf −f∥Hβ(M) ≤Cρs−β∥f∥Hβ(M)
∥Iφf∥Hβ(M) ≤Cρs−β∥f∥Hβ(M).
Proof. The last estimate in the proof of Theorem 4.12 in is
∥f −Iφf∥Hβ(M) ≤Cρs−β∥f∥Hβ(M).
Applying a triangle inequality and observing that 1 ≤ρ, we get
∥Iφf∥Hβ(M) ≤∥f −Iφf∥Hβ(M) + ∥f∥Hβ(M) ≤C(ρs−β + 1)∥f∥Hβ(M) ≤Cρs−β∥f∥Hβ(M).
Now we are poised to present the following theorem.
Theorem 5. Let 1 ≤q ≤∞, φ satisfy (26) with τ > 3/2 + 2, and deﬁne s = τ −1/2. Let β be such that
s ≥β > 3. Then there is a constant hM depending only on M such that if a ﬁnite node set X ⊂M satisﬁes
h ≤hM, then for all f ∈Hβ(M) we have the estimate
∥LMf −∆Mf∥Lq(M) ≤Chβ−2−2(1/2−1/q)+ρ2(s−β)+1∥f∥Hβ(M).
Proof. First, we have
∥LMf −∆Mf∥Lq(M) ≤∥LMf −∆MIφf∥Lq(M) + ∥∆Mf −∆MIφf∥Lq(M).
For the rightmost term, the assumption β > 3 allows us to use [36, Theorem 4.12] to get:
∥∆Mf −∆MIφf∥Lq(M)
C∥f −Iφf∥W 2
q (M) ≤Chβ−2−2(1/2−1/q)+ρs−β∥f∥Hβ(M).
For the other term in (33), we have
∥LMf −∆MIφf∥Lq(M)
∥∇M · (IΦ(∇MIφf)) −∆MIφf∥Lq(M)
∥∇M · (IΦ(∇MIφf)) −∇M · (∇MIφf)∥Lq(M)
C∥IΦ(∇MIφf) −∇MIφf∥W1q(M).
Note that the last estimate is the interpolation error for the target function g := ∇MIφf.
We claim that g is in Ht(M) for all t < 2s −2. Since φ satisﬁes (26), Iφf ∈Hν(R3) for all ν < 2τ −3/2.
By the trace theorem restricting to M puts Iφf in Hν−1/2(M). Thus g ∈Hν−3/2(M) for all ν < 2τ −3/2,
which is equivalent to g ∈Ht(M) for all t < 2s −2. In particular, g ∈Hβ−1(M). Also, since β > 2 then we
1 ≤⌈(β −1) −2(1/2 −1/q)+⌉−1,
and that β −1 > 1. This allows us to estimate (34) with Proposition 3 (with parameter µ = 1 and target
smoothness t = β −1) to get
∥IΦ(∇MIφf) −∇MIφf∥W1q(M)
Ch(β−1)−1−2(1/2−1/q)+∥IΦg −g∥Hβ−1(M).
Chβ−2−2(1/2−1/q)+∥IΦg −g∥Hβ−1(M).
Further, since β −1 > 1, we can also apply Lemma 4, and with two applications of it we get
∥IΦg −g∥Hβ−1(M)
Cρs−β+1∥g∥Hβ−1(M) = Cρs−β+1∥∇MIφf∥Hβ−1(M)
Cρs−β+1∥Iφf∥Hβ(M) ≤Cρ2(s−β)+1∥f∥Hβ(M).
This completes the proof.
Continuing with our error analysis, we now shift our attention to target functions that are very smooth.
First we will need a lemma.
Lemma 6. Let φ satisfy (26) with τ > 3/2, and let s = τ −1/2.
Then for all f ∈L2(M) such that
T −1f ∈L2(M) we have the following estimate
∥f −Iφf∥Hs(M) ≤Chs∥T −1f∥L2(M).
Also, for all f ∈L2(M) such that T−1f ∈L2(M) we have
∥f −IΦf∥Hs(M) ≤Chs∥T−1f∥L2(M).
Proof. The ﬁrst estimate is established in the proof of Corollary 4.10 in . By working component-wise
the second estimate follows from the ﬁrst.
Theorem 7. Let 1 ≤q ≤∞, φ satisfy (26) with τ > 3/2 + 2, and deﬁne s = τ −1/2. Let f ∈L2(M) be
such that T −1f ∈L2(M) and T−1∇Mf ∈L2(M). Then there is a constant hM depending only on M such
that if a ﬁnite node set X ⊂M satisﬁes h ≤hM, we have the estimate
∥LMf −∆Mf∥Lq(M) ≤Ch2s−2−2(1/2−1/q)+ρ(∥T −1f∥L2(M) + ∥T−1∇Mf∥L2(M)).
Proof. We begin as in the proof of the previous theorem. We have
∥LMf −∆Mf∥Lq(M) ≤∥LMf −∆MIφf∥Lq(M) + ∥∆Mf −∆MIφf∥Lq(M).
To estimate the rightmost term we can use the error estimates in [36, Corollary 4.10] to get:
∥∆Mf −∆MIφf∥Lq(M)
C∥f −Iφf∥W 2
q (M) ≤Ch2s−2−2(1/2−1/q)+∥T −1f∥L2(M).
For the other term in (36), we proceed as in the proof of Theorem 5 to get
∥LMf −∆MIφf∥Lq(M)
C∥IΦ(g) −g∥W1q(M),
where g = ∇MIφf, and as before we know that this function is in Ht(M) for all t < 2s −2. In particular,
g ∈Hs−1(M) and we can estimate (37) with Proposition 3 (with t = s −1 and µ = 1) to get
∥IΦ(g) −g∥W1q(M)
Chs−2−2(1/2−1/q)+∥IΦg −g∥Hs−1(M).
This is where the proof detours from that of the previous theorem. To estimate ∥IΦg −g∥Hs−1(M), note that
it is bounded it by following quantity:
∥IΦ(∇MIφf) −IΦ(∇Mf)∥Hs−1(M)
+ ∥IΦ(∇Mf) −∇Mf∥Hs−1(M)
+ ∥∇Mf −∇MIφf∥Hs−1(M)
We will bound each term individually. First we concentrate on I. An application of Lemma 4, which we
may apply since s −1 > 1, gives us
∥IΦ(∇MIφf) −IΦ(∇Mf)∥Hs−1(M)
∥IΦ(∇MIφf −∇Mf)∥Hs−1(M)
Cρ∥∇MIφf −∇Mf∥Hs−1(M) = Cρ(III).
Thus a bound for III will result in a bound for I. To bound III, we can apply Lemma 6 to get
∥∇MIφf −∇Mf∥Hs−1(M)
C∥Iφf −f∥Hs(M) ≤hs∥T −1f∥L2(M).
To bound II, we again employ Lemma 6:
∥IΦ(∇Mf) −∇Mf∥Hs−1(M)
∥IΦ(∇Mf) −∇Mf∥Hs(M) ≤Chs∥T−1∇Mf∥L2(M).
This completes the proof.
Surfaces and node sets from the numerical experiments
Unit sphere
This manifold is, of course, described implicitly by
x = (x, y, z) ∈R3
x2 + y2 + z2 = 1
The node sets we use for discretizing the unit sphere are the minimum energy (ME) node sets of Womersley
and Sloan . These node sets are approximately uniformly distributed over the surface of the sphere and
have the nice property that the mesh norm h and the separation radius q decrease uniformly like the inverse
of the square root of the number of nodes N, i.e. h, q ∼
N . Additionally, the nodes in these sets are not
oriented along any vertices or lines, which emphasizes the ability of our method to handle arbitrary node
layouts. They have been used quite successfully in many other RBF applications, e.g. .
Red blood cell
This manifold is a mathematical model for human red blood cells in static equilibrium conditions. The
model was ﬁrst proposed in and has been used in many subsequent studies (e.g. ). The model can
be described parametrically as follows:
(x, y, z) ∈R3
x = r0 cos λ cos θ, y = r0 sin λ cos θ, z = 1
 c0 + c2 cos2 θ + c4 cos4 θ
where −π/2 ≤θ ≤π/2, −π ≤λ < π, r0 = 3.91/3.39, c0 = 0.81/3.39, c2 = 7.83/3.39, and c4 = −4.39/3.39.
The node sets we used for discretizing this manifold were obtained using a radial projection of the ME points
for the surface of the sphere described above.
Bumpy sphere
This manifold is constructed from the “bumpy sphere” surface using the following procedure. First,
N = 5256 points on the bumpy sphere surface were obtained from This
surface is homeomorphic to the unit sphere, so spherical coordinates for each of the N = 5256 points on
the bumpy sphere were obtained. Upon normalizing the original nodes by the maximum distance of any
of the nodes from the origin, a parametric model for the surface was constructed using the RBF geometric
modeling technique from . The original (normalized) N = 5256 points on the bumpy sphere are used as
the computational nodes in all the numerical experiments and the parametric model is used for computing
the normal vectors to the surface.
This manifold is given by the implicit equation:
x = (x, y, z) ∈R3
The node sets used for discretizing this manifold were obtained by arranging the nodes so that their Reisz
energy (with a power of 2) is near minimal as described in Hardin and Saﬀ’s seminal article . As with
the ME sphere nodes, these ME torus nodes sets provide a near uniform discretization of the manifold with
an approximately uniform decrease in the mesh norm h and the separation radius q. The node sets used in
the experiments were kindly given to us by Drs. Douglas Hardin and Edward Saﬀand Ms. Ayla Gafni from
Vanderbilt University.
Dupin’s cyclide
This manifold is given by the implicit equation:
x = (x, y, z) ∈R3
 x2 + y2 + z2 −d2 + b22 −4 (ax + cd)2 −4b2y2 = 0
where a = 2, b = 1.9, d = 1, and c2 = a2 −b2. The node set for discretizing this manifold was obtained
from the algorithm of Palais, Palais, and Karcher (PPK) , which will be included in a future version
of the amazing mathematical visualization software package 3-D-XplorMath . This algorithm generates
“uniformly random” point clouds for surfaces and works for both implicit and parametrically deﬁned surfaces.
To obtain the node set displayed in Figure 1(e) we used the PPK algorithm to generate a point cloud
consisting of 9562 points. We then thinned this point set by removing points that were too close together
in order to increase the separation radius. The ﬁnal node set ended up at N = 4948. Both choices for the
starting and ending number of nodes were chosen somewhat arbitrarily.
This manifold is given by the implicit equation:
x = (x, y, z) ∈R3
 x2(1 −x2) −y22 + 1
Unlike the the other surfaces, this one does not have an explicit parameterization. The node set for this
domain was also obtained from the PPK algorithm. In this case we started with a point cloud of 10278
points and thinned it to end up with a node set of N = 5041 nodes.