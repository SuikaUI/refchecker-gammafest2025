City, University of London Institutional Repository
Citation: Idrees, F., Rajarajan, M., Conti, M., Chen, T. & Rahulamathavan, Y. .
PIndroid: A novel Android malware detection system using ensemble learning methods.
Computers and Security, 68, pp. 36-46. doi: 10.1016/j.cose.2017.03.011
This is the accepted version of the paper.
This version of the publication may differ from the final published version.
Permanent repository link: 
Link to published version: 
Copyright: City Research Online aims to make research outputs of City,
University of London available to a wider audience. Copyright and Moral Rights
remain with the author(s) and/or copyright holders. URLs from City Research
Online may be freely distributed and linked to.
Reuse: Copies of full items can be used for personal research or study,
educational, or not-for-profit purposes without prior permission or charge.
Provided that the authors, title and full bibliographic details are credited, a
hyperlink and/or URL is given for the original metadata page and the content is
not changed in any way.
City Research Online
City Research Online: 
PIndroid: A novel Android malware detection
system using ensemble learning methods
Fauzia Idreesa,∗, Muttukrishnan Rajarajana, Mauro Contib, Thomas M.
Chena, Yogachandran Rahulamathavanc
aSchool of Mathematics & Engineering, City University London, EC1V 0HB, UK
bDepartment of Mathematics, University of Padua, 35122 Padova, Italy
cInstitute for Digital Technologies, Loughborough University London, UK
The extensive use of smartphones has been a major driving force behind a drastic increase of malware attacks. Covert techniques used by the
malware make them hard to detect with signature based methods. In this paper, we present PIndroid—a novel Permissions and Intents based framework
for identifying Android malware apps. To the best of our knowledge, PIndroid is the ﬁrst solution that uses a combination of permissions and intents
supplemented with Ensemble methods for accurate malware detection. The
proposed approach, when applied to 1,745 real world applications, provides
99.8% accuracy (which is best reported to date). Empirical results suggest
that the proposed framework is eﬀective in detection of malware apps.
Malware classiﬁcation, Permissions, Intents, Ensemble
methods, Colluding applications
1. Introduction
In past few years, smartphones have transformed from simple mobile
phones into mobile computers, making them suitable for personal and business activities. Smartphones have become the major target for mobile malware due to increased reliance on them for daily activities such as storing
private data, ﬁnancial transactions, emailing, socializing and online shopping.
∗Corresponding Author
Email address: (Fauzia Idrees)
 
March 21, 2017
Android being the most widely used platform for smartphones is under
constant attacks. Existing anti-virus solutions are not capable of eliminating the exponentially increasing malware threats due to their reliance on
signature-based detection. Moreover, resource constrained smartphones are
unsuited for continuous malware scanning. There is a need to have an eﬃcient
method capable of overcoming the current challenges of outdated signatures,
code obfuscation and resource constraints.
Permissions are used to guard against misuse of system resources and
user data, however, some of Android's features like intents can break this
shield. A lot of research has been done on permissions; however, intent is
an under investigated area (in malware detection), providing opportunity for
the evolving malware threats.
We propose a malware detection approach which classiﬁes apps against
certain combinations of permissions and intents which are unique to malware
apps. These combinations form an eﬃcient detection pattern to diﬀerentiate between malware and benign apps with a granularity to classify malware
families. We evaluate the eﬃcacy of proposed approach by applying machine
learning algorithms. A comparative study of classiﬁers is carried out against
diﬀerent performance measures to select the most accurate and eﬃcient classiﬁer. We apply the ensemble methods to optimize the results.
Contributions. The main contributions presented in this paper are:
1. To the best of our knowledge, this is the ﬁrst work that combines intents and permissions for collaborative malware detection. This work
combines permissions and intents of applications to generate a distinguishing matrix that is used for eﬃcient and accurate detection of
malware and its associated families. Our method is capable of achieving
99% detection accuracy by combining permissions and intents.
2. We propose a new approach using ensemble methods to optimize the
classiﬁcation results. Our results show a detection accuracy of 99.8%
by connecting multiple classiﬁers laterally with a meta-classiﬁer.
3. We apply statistical signiﬁcance test to investigate the correlation between permissions and intents. We found statistical evidence of a strong
correlation between permissions and intents which could be exploited
to detect malware applications.
Organization. Section 2 discusses the related work; Section 3 provides an
overview of Android permissions and intents and Section 4 discusses about
the analysis carried out on permissions and intents. Section 5 presents the
proposed framework; Section 6 describes the model evaluation, experimental
settings, and results. Section 7 concludes the paper.
2. Related Work
There is a plethora of research work on Android security covering vulnerability assessments, malware analysis and detection. Faruki et al 
present an overview on the current malware trends. Malware analysis leverage static, dynamic and hybrid methods. In static malware analysis, properties of apps are extracted by analysing diﬀerent static features without
running the code. In dynamic analysis, the runtime proﬁles of apps are generated by monitoring and collecting the memory consumption, CPU usage,
battery usage and network traﬃc statistics and . Here, we provide an overview of related works in this area.
2.1. Static malware analysis on Android platform
Diﬀerent static features such as permissions, API calls, Inter-process communication (IPC), code semantics, intents, hardware, components and developer ID have been used for malware detection. However, permissions, API
calls, and IPC have attracted more attention from the researchers. There
are a few works in which diﬀerent features have been combined for malware detection. Here, we discuss the relevant works which use permissions,
ICC/intents or hybrid features.
2.1.1. Permission analysis
Permission is the most investigated feature in malware detection. Barrera et al.
 examined 1,100 apps for permission usage and found the
high frequency of certain permissions. Peng et al. calculated the risk
scores of apps by analysing the requested permissions. Kirin identiﬁed
dangerous combinations of permissions and developed the security rules to
identify malicious apps. Vidas and Christin identiﬁed the unnecessary
permission requests by the apps. VetDroid examined mapping between API calls and permissions for behaviour proﬁling. Sarma et al. 
calculated risks and beneﬁts of requested permissions to discern the adverse
aﬀects of app. Stowaway is a tool to check the over-privilege of apps
by mapping requested permissions with APIs. PScout is another tool
which extracts permissions from the source code and maps them with URIs.
Most of these methods aim to provide help to app developers and security
analysts. These methods may be used as add-ons with malware detection
solutions.
2.1.2. Inter-Component Communication / Intents analysis
ICC and intents have not been explored the way permissions have been
investigated. Most of the existing ICC based studies focus on ﬁnding the
ICC related vulnerabilities. Enck et al. investigated the IPC framework and interaction of system components. ComDroid detects the
ICC related vulnerabilities. Kantola et al. suggested improvement in
ComDroid by segregating the communication messages into inter and intraapplications groups so that the risk of inter-application attacks may be reduced. Maji et al. characterized Android components and their interaction. They investigated risks associated with misconﬁgured intents. CHEX
 examined vulnerable public component interfaces of apps. Avancini
et al. generated test scenarios to demonstrate the ICC vulnerabilities. DroidSafe performs information ﬂow analysis to investigate the
communication exploits. Gallingani et al. investigated intents related
vulnerabilities and demonstrated how they may be exploited to insert the
malicious data. Their experiments found 29 out of a total of 64 investigated
apps as vulnerable to intent related attacks. All of these works focus on ﬁnding communication vulnerabilities, and none of them used ICC and intents
for malware detection.
2.1.3. Malware analysis with hybrid features
In this category, diﬀerent features are combined for eﬀective malware
detection. Most relevant works are: Drebin , DroidMat and
Marvin as they use permissions and intents in addition to other features for malware classiﬁcation. Drebin examines the manifest ﬁle
and code of apps to check the permissions, API calls, hardware resources,
app components, ﬁltered intents and network addresses. It uses Support Vector Machines (SVM) for malware classiﬁcation. DroidMat analyses
features extracted from the manifest and smali ﬁles of disassembled codes.
These features include permissions, components, intent messages and API
calls. It applies K-means algorithm and Singular Value Decomposition (SVD)
method for clustering and low-rank approximations respectively. They analysed a total of 1738 apps comprising of 1500 benign and 238 malware samples.
Marvin uses both the oﬀ-device static and dynamic analyses meth-
ods for malware detection. It uses around 490,000 features extracted from
the manifest ﬁles and disassembled codes. Its high-dimensional feature set
includes permissions, intents, API calls, network statistics, components, ﬁle
operations, phone events, app developer IDs, package serial numbers and
bundles of other features. It uses linear classiﬁer to detect malware apps and
assigns malicious score on a scale of 0 to 10, with 0 being benign and 10
being malicious.
3. Background on Permissions and Intents
Android uses permissions and intents to protect user data and device
resources. Android has 117 permissions and 227 intents in version 4.4, API
level 19 - an API level is an integer value which identiﬁes the application's
compatibility with the Android versions. The earliest Android version: API
level 1, contains only 76 permissions and 124 intents.
Google adds new
permissions and intents into every upcoming versions. This trend is depicted
in Table 1, where monotonic increment in permission and intents against the
API levels is obvious. The increased number of permissions and intents has
not only added new features but also opened the doors for malware. In this
section, we present a high-level overview of Android permissions and intents.
3.1. Permissions
Permissions play a pivotal role in Android security. It controls access to
the sensitive system resources, user data, and device functionalities. Permissions invoke API calls related to diﬀerent functionalities. A complete set of
permissions is declared in app’s manifest ﬁle and at the onset of installation.
User is prompted to approve the complete set of requested permissions as
a pre-requisite of app installation. There is no option to choose among the
requested set of permissions. Once the access is granted, the permissions
remain valid till the time the app is either un-installed or updated. User
can only check the permissions of apps but cannot delete or change them.
A feature to change the permissions was added in Android 4.2 but was later
removed through an update to avoid app crash if user disables the required
permission(s).
Android permissions are categorized into four protection levels: Normal,
Dangerous, Signature and Signature or System. Android has an access mechanism to check the permissions of apps and determine if they are authorized
to access the protected resources.
Normal permissions are automatically
granted to apps without user's intervention as these are not considered harmful. Dangerous permissions need user's approval due to associated risk of
privacy leaks and access to sensitive API calls. Signature permissions are
granted only to the apps, signed with the same certiﬁcate which deﬁnes the
permission. Signature or system permissions are granted to either the preinstalled apps or those signed with the device manufacturer certiﬁcate. These
permissions are unobtainable by third party apps.
3.2. Intents
Intent is the basic communication mechanism used to exchange the interand intra-app messages. An intent conveys the intention of the app to perform some action. It speciﬁes the label for a component, its category and
action to be performed.
Intents are of two types: Explicit and Implicit. Explicit intent speciﬁes
the component exclusively by the class name. These are generally used by
apps to start their own components. Implicit intent does not specify the
component by name. It states the required action only; system selects the
app that has the component to handle the stated action.
With explicit
intent, the system launches the speciﬁed component immediately while with
implicit intents, system looks for the appropriate component by comparing
the intent ﬁlters. If there is any match between the intent and intent ﬁlter,
the component of that app is launched. In case of multiple matching intent
ﬁlters, users are sent with a dialogue box to select the app Yang et al. .
Intents facilitate apps with same user ID to use each other’s functionalities
without separately declaring the permissions for them. This helps apps to
gain extra privileges by augmenting the permissions.
4. Analysis of Permissions and Intents
A total of 1300 malware and 445 benign apps are analysed which are collected from well known sources such as Google Playstore1, Contagiodump2,
1Google Play, Web: 
 
Genome3, Virus Total4, theZoo5, MalShare6, and VirusShare7. Table 2 depicts the details of malware samples collected from each source. These sources
contain the datasets of already known malware samples. Maliciousness of
these samples is also conﬁrmed with VirusTotal service integrated with ten
detection engines. We labelled the app as malware, if it was detected as
malicious at least by two of the engines. Cryptographic hashes (SHA-1) of
ﬁles were also checked with a tool: HashTab8 to ascertain the uniqueness of
samples. Details of known malware families, their malicious activities and
number of analysed apps from each families are shown in Table 3.
To validate our method, we also downloaded 445 benign apps from known
app stores such as Google Play, AppBrain9, F-Droid10, Getjar11, Aptoid12,
and Mobango13. The benign apps are selected from diﬀerent categories such
as social, news, entertainment, ﬁnance, education, games, sports, music, and
audio, telephony, messaging, shopping, banking, and weather to learn the
normal behaviour of benign apps. Table 4 depicts the details of categories
of benign apps, number of analysed apps from each category and the corresponding app stores.
Our investigation of Android security framework and analysis of benign
and malware samples resulted in interesting ﬁnding: identiﬁcation of key
permissions and intents used for malware attacks and propagation. We also
establish that certain permissions and intents which are frequently used by
malware apps are seldom used by benign apps. Malware families use a particular set of permissions and intents targeting speciﬁc capabilities and resources. Almost all the malware samples belonging to that particular family
use a unique set of permissions and intents.
3Android Malware Genome Project, Web: 
4VirusTotal for Android, Web: 
5theZoo aka Malware DB, Web: 
6MalShare project, Web: 
7Web: 
8HashTab, Web: 
9Web: 
10Web: 
11Web: 
12Web: 
13Web: 
4.1. Permission usage by Applications
In this section, we present our ﬁndings on how the malware applications
use permissions diﬀerently from benign apps. We also discuss how this distinct usage pattern may be exploited to detect malware apps. There are
58 permissions out of 145 were frequently used by the malware and benign
apps, whereas remaining 87 are rarely used. In order to visualize the usage
pattern of permissions in malware and benign apps, we chose the top 24 permissions and plotted there usage percentages among the malware and benign
applications in Fig. 1. Although, some of the permissions are used by both
the malware and benign apps, there remain a noticeable distinguishing usage
pattern as shown in Fig. 1. Based on the usage pattern of permissions, we
split the permissions into two groups: Normal permissions and Dangerous
permissions.
The dangerous permissions are those permissions that are frequently used
by malware apps and have more risk to access and exploit diﬀerent sensitive
resources and private data.
Examples of frequently used permissions by
benign apps are: Full Network access, Create/Add/remove/user accounts,
Delete/Modify USB contents and Read/write/modify contacts.
apps usually use permissions: Read phone status/ID, Access Network state,
Send SMS/MMS, Receive boot complete, Receive SMS, Delete/Modify USB
contents, and your location. There are a few malware-friendly permissions,
which are seldom used by the benign ones, e.g., Access Network state, Receive boot complete, Restart packages, Mount/Unmount File system, Set
wallpapers, Read/write history bookmarks of browser and Write APN settings.
The most popular benign apps such as YouTube, Skype and Viber tend
to use on average 8 to 16 permissions while this number goes down to 3 to
6 for the least popular apps. The same trend can be observed in malware
We categorize malware apps into the most harmful and the least
harmful apps depending on the ease of access to sensitive resources and data
regarding used permissions and intents. The most harmful malicious apps are
those who are accessing more sensitive resources and data and may provide
monetary damages to the users like sending premium rate SMSs, making
calls, and accessing bank accounts details. The least dangerous malicious
apps are those who can access some useful data and resources, but they
may not cause ﬁnancial or serious damage to the user or device. The most
harmful malware apps use more than 16 permissions and least harmful use 3
to 6 permissions. Some permissions used by the most and least popular apps
as well as the most and least harmful apps are shown in Fig. 2.
4.2. Intent usage by Applications
There are 35 intents out of 227 in Android version 4.4, which are frequently used by apps. The most popular benign apps usually use on average
1 to 4 intents and the least popular use 1 to 2. Similarly, the most harmful
apps use a minimum of 5 and maximum of 8. Least harmful malware apps use
at least 2 or 3 intents. Fig. 3 shows the overall trend of intents usage popular
and harmful apps. Benign apps use only ACTION MAIN, CATEGORY LAUNCHER
and CATEGORY DEFAULT intents whereas malware apps usually use more intents to gain extra capabilities. Mostly malware apps use BOOT COMPLETED,
ACTION CALL, ACTION BATTERY LOW, SMS RECEIVE and NEW OUTGOING CALL.
Malware apps are seen to use a few of the normal permissions and intents
while they use a signiﬁcant number of dangerous permissions and intents.
Benign apps show a similar trend of using only normal permissions and intents. These ﬁndings suggest that permissions and intents play a central role
in accessing, controlling and sharing of sensitive data and resources. These
features may be exploited to detect and mitigate the malicious attacks.
4.3. Correlation between permissions and intents
Correlation is a technique to measure the strength of association between
two variables. Diﬀerent correlation coeﬃcient methods are used to measure
degree of correlation. The most common is the Pearson correlation coeﬃcient
(r). It is calculated by dividing the covariance of two variables with product
of their standard deviations.
Pearson’s correlation coeﬃcient has a value
between -1 (perfect negative correlation) and 1 (perfect positive correlation).
Suppose we have n malware applications, each application is using X
dangerous permissions written as xi = {x1, x2,..., xn} and Y dangerous intents such that yi = {y1, y2,..., yn}, then the Pearson correlation coeﬃcient
(r) can be calculated using equation (1).
n P xiyi −P xi
n P xi2 −(P xi)2 p
n P yi2 −(P yi)2.
Two sets of malware apps are used to measure the strength of correlation
between dangerous permissions and dangerous intents. One set consists of
200 malware apps which are randomly selected from diﬀerent malware families and the other consists of 20 malware apps from same malware family.
For the ﬁrst set, the correlation coeﬃcient (r) equals 0.74, indicating a
strong relationship between dangerous permissions and dangerous intents for
the signiﬁcance level: p < 0.001. For the other set, the correlation coeﬃcient
(r) equals to 0.94, indicating a very strong correlation between dangerous
permissions and intents in the case of samples belonging to the same malware family. The strong correlation between the dangerous permissions and
intents supports our conjecture about the association between permissions
and intents to carry out the malicious activity.
The Pearson correlation coeﬃcients of 0.74 for diﬀerent malware families
and 0.94 for same malware family conﬁrm the positive correlation between
permissions and intents. However, we need to perform a signiﬁcance test to
decide whether or not there is any evidence which supports or contradicts
the presence of a linear correlation in the whole population of malware apps.
We use the hypothesis testing, for which we test the null hypothesis, H0, and
alternate hypothesis, H1 as
malware and benign applications use
the same set of permissions and intents,
malware and benign applications don′t use
the same set of permissions and intents.
For hypothesis testing, we use the Mann-Whitney U−test with the pvalue of 0.05. We calculate U1 and U2 values for both the permissions and
intents respectively using equations 2 and 3, respectively. In following equations, R1 and R2 are the sums of ranks for permissions and intents, respectively, and n1 and n2 are the sample sizes for both the variables.
U1 = R1 −n1(n1 + 1)
U2 = R2 −n2(n2 + 1)
We take the smallest of U and compare it with the critical value obtained
from the Mann-Whitney critical values table Mann et al. . We use
Mann-Whitney critical values table for a small number of malware samples
and Z-test for large samples of malware apps due to limitations of the number
of entries in the Mann-Whitney critical value table. With samples from same
malware family (n1= 20, n2 = 19, p=0.05, critical value = 119), the smallest
U value obtained is 87 which is less than the critical value of 119, we would
reject the null hypothesis for the malware apps belonging to same family. For
a large sample of apps belonging to diﬀerent malware families (n1 = n2 = 200,
p=0.05, Z-critical value = 1.64), we calculate z-score with Z test. We obtain
z-score of 13.0594 which is greater than Z-critical value hence suggesting the
rejection of null hypothesis H0. We have very strong statistical evidence to
accept the alternate hypothesis H1, which suggests that the malware and
benign apps use a diﬀerent set of permissions and intents. This conjecture
is further veriﬁed with normal distribution testing and classiﬁcation analysis
using diﬀerent machine learning algorithms.
The normal distribution is important for statistical inference point of view
Cohen et al. . We use box plots to test whether the sample distribution
is normal. The box plots of permissions and intents related to benign and
malware apps are shown in Figures 4 and 5, respectively. The distribution
appears to be approximately normal, with the upper whiskers longer than
the Q1 to median distance and the box containing middle 50% of the data
almost tightly grouped in the center of distribution.
5. Malware Classiﬁcation
We describe how the data is represented and then present a detailed
description of our proposed system.
5.1. Data Representation
Our dataset consists of n applications from K classes with m features.
Let C = {1, 2,..., K} are the set of indices of the classes, A = {1, 2,..., n}
the set of indices of the applications and F = {1, 2,.., m} the set of indices
of the features. Also, let ak, k ∈C and ak ⊆A
be the set of indices of
applications belonging to class k. Additionally, let fj, j ∈F be the domain
of the jth feature. Let ith application, such that
i ∈A is represented as
(ci, fi ) = (ci, fi,1, fi,2,..., fi,m) ∈C x F1 x...x Fm, where ci is the class of
application i such that C ∈{malware , normal} and (fi,1, fi,2,..., fi,m) is
the number of permissions and intents used by ith applications, and fi,m ∈
{0,1} which indicates if the ith application uses mth feature. We compute
the Information Gain (IG) of each feature xm against the class variable as
IG(Fi, C) = P
c∈(mal,nor) P(Fi = f; C = c).log2
P(Fi=f;C=c
P(Fi=f)P(C=c)
Given that
P(Fi = f; C = c) = P(Fi = f).P(C = c|Fi = f),
Equation (4) can be simpliﬁed as
IG(Fi, C) = P
c∈(mal,nor) P(Fi = f).P(C = c|Fi = f).log2
P(C=c|Fi=f)
Using equation (6), the features with highest IG are selected to train the
5.2. Probability Estimation
The probability of an application belonging to a particular class is calculated using Bayesian theorem:
P(C = c|F = f) =
P(C = c) Qm
i=1 P(Fi = fi|C = c)
j∈(0,1) P(C = cj) Qm
i=1 P(Fi = fi|C = cj);
An app is classiﬁed as malware if
P(C = malware|F = f) > P(C = normal|F = f).
5.3. System Description
The proposed system is shown in Fig. 6. It consists of three main stages:
Feature extraction, Pre-processing, and Classiﬁcation. The feature extraction stage analyses the manifest ﬁle and extracts the permissions and intents.
This stage comprises of two monitors which are used to measure: (i) type
of permissions (normal or dangerous) and their numbers and, (ii) type of
intents (normal or dangerous) and their number. Permissions and intents
are labelled into four groups: normal permissions, normal intents, dangerous permissions and dangerous intents. Dangerous permissions and intents
are frequently used by malware apps whilst normal permissions and intents
are frequently used by benign apps.
The pre-processor stage processes the extracted data to generate the vector dataset in an ARFF ﬁle format. The generated dataset is randomized
using unsupervised instance randomization ﬁlter for better accuracy and sent
to the classiﬁer stage. The classiﬁer stage takes each monitored vector as input and classiﬁes the data set using trained classiﬁer. Six machine learning
classiﬁers: Nave Bayesian, Decision Tree, Decision Table, Random Forest,
Sequential Minimal Optimization and Multi Lateral Perceptron (MLP) are
used for classiﬁcation. Their performances are also compared in terms of
diﬀerent performance metrics. Finally, the reporter stage generates notiﬁcations for the user based on the classiﬁer results.
6. Evaluation
6.1. Experimental Setting
The experiments are carried out on an Intel Core i7-3520 M CPU @
2.90 GHz, 2901 MHz machine with 8GB RAM. Each of the classiﬁers are
evaluated with two methods: 10-fold cross-validation and 80% split. In 10fold cross-validation, the data set is divided into ten subsets, and the holdout
method is repeated ten times. In each round, one subset is taken as test set
and the remaining nine subsets are combined to form the training set. Errors
of all the ten rounds are averaged out to obtain a ﬁnal output. This method
ensures that each instance is included at least once in the test set and nine
times in the training set. The ﬁnal model is the average of all ten iterations.
The second method we use is 80% split, which uses 80:20 ratio (80% of a
dataset for training and 20% for testing). This method is eﬃcient but less
accurate than the 10-fold method. In this section, we only report the results
from 10-fold method.
6.2. Performance Comparison of diﬀerent Classiﬁers
Performance of six classiﬁers is compared in terms of True Positive Rate
(TPR), False Positive Rate (FPR), accuracy, F1-score and Area Under Curve
(AUC). These metrics are calculated using the confusion matrix as shown in
Table 5. Table 5 is generated from the four measures: True Positive (TP)
—the number of correctly classiﬁed instances that belong to the class, True
Negative (TN) —the number of correctly classiﬁed class instances that do not
belong to the class, False Positive (FP) —instances which were incorrectly
classiﬁed as belonging to the class and False Negative (FN) —instances which
were not classiﬁed as class instances.
TP + FN + FP + TN ;
TP + FN + FP + TN ;
2. Precision . Recall
Precision + Recall;
Table 6 lists the TPR, FPR, Precision, F1-score, recall, AUC and model
build-up time. All the analysed classiﬁers perform well with an accuracy of
0.90 or more. However, MLP and Decision table dominate with an accuracy
of 0.99. In terms of time, Nave Bayesian, Decision Tree and Decision Table
are more eﬃcient than MLP and Random forest. Overall, Decision Table
gives the best results.
6.3. Optimization with Ensemble methods
Ensemble methods combine results from multiple machine learning algorithms to improve the predictive performance Dietterich et al. . It is
not necessary that the performance of ensemble learning be better than the
individual classiﬁers. The stacked performance depends on the selection of
classiﬁers and methods used to combine the output predictions Saso et al.
We apply three ensemble methods: Boosting, bagging, and stacking to
further improve the detection accuracy.
Stacking gives the better results
as compared to boosting and bagging. In stacking, multiple algorithms are
trained individually with the training dataset and the outputs from the classiﬁers are sent to a meta-classiﬁer which is trained to combine the results to
makes a ﬁnal prediction. Decision Table, MLP, and Decision Tree classiﬁers
are applied in ﬁrst stage and their results are combined using three schemes:
an average of probabilities, a product of probabilities and majority voting.
Average of probabilities. It takes an average of the probabilities of each class
from the individual classiﬁers (k=3 for three classiﬁers) and compares which
class has greater probability such that,
Malware, ifPavg
Classmalware < Pavg
Classbenign;
Benign, ifPavg
Classmalware > Pavg
Classbenign.
Product of probabilities. Product of probabilities is taken from each of the
classiﬁers and highest probability of class is assigned as:
Malware, ifPavg
Classmalware < Pavg
Classbenign;
Benign, ifPavg
Classmalware > Pavg
Classbenign.
Majority vote. The ﬁnal result is decided based on the results obtained from
the majority of the results.
Results of ensemble classiﬁcation are depicted in Table 7. The product
of probabilities method yields the best results.
6.4. Comparison with related approaches
We compare the performance of PIndroid against related approaches
which use some of the similar features and analyzing the samples acquired
from same sources: Google Playstore, Genome and Contagiodump. These
are known repositories of malware and benign apps and the performance of
most of the state of the art malware detection approaches are tested on these
samples with a diﬀerence of number of samples tested. The most relevant
approaches are Drebin , DroidMat and Marvin . Drebin
 examines the manifest ﬁle and decomposed code of app to check the
permissions, API calls, hardware resources, app components, ﬁltered intents
and network addresses. It uses support vector machines (SVM) for malware
classiﬁcation. Although, they used the largest dataset of 129013 apps, it consists only 4.5% of malware samples thereby may not be able to learn malware
patterns. It used many features opposed to our work which uses only two
most eﬀective features. It achieved 94% malware detection rate with 1% false
positive rate whereas our approach achieved 99.8% detection accuracy with
0.06 false positive rate. Drebin requires extensive processing for extraction
and execution of a large number of features from the manifest ﬁle and app
code, it takes more time to analyse the app and therefore is less eﬃcient
than our method. It takes on average 10 seconds to analyse an app, whereas
our approach takes less than 1 second. Its use of a large number of features
may also result in more false alarms as the eﬃciency and accuracy of feature
based detection approaches highly depend on the selection of more relevant
and less number of features.
DroidMat analyses some features from the manifest ﬁle and smali
ﬁles of disassembled codes. The extracted features include permissions, components deployments, intent messages and API calls. It applies K-means
algorithm for clustering and Singular Value Decomposition (SVD) method
for low-rank approximation. The minimized clusters are processed with a
kNN algorithm for classiﬁcation into malware or benign apps. It achieves an
accuracy of 97.6% with no reported false positive rate. They analysed 1738
apps consisting of 1500 benign and only 238 malware samples. Malware samples are only 13% of total dataset, which is a non-representative data set for
capturing the malware usage patterns. The accuracy is less than our method
and the processing time is higher as it needs to perform the execution of
smali ﬁles and manifest ﬁles. Since Smali ﬁles are much larger than manifest
ﬁles, the overall cost of methods which analyse smali ﬁles forgoes higher.
This holds true for both of above solutions: Drebin and DroidMAT.
Marvin uses oﬀ-device static and dynamic analysis for malware
detection. It uses around 490,000 features extracted from the manifest ﬁles
and disassembled codes. Its high-dimensional feature set includes permissions, intents, API calls, network statistics, components, ﬁle operations,
phone events, app developer IDs, package serial numbers and bundles of
other features. It uses a linear classiﬁer to detect malware app and assign a
malicious score to the app on a scale from 0 to 10, with 0 being benign and 10
being malicious. They used the largest dataset of 150,000 apps in which only
10% are malware samples. It classiﬁes with an accuracy of 98.24% and false
positive rate of 0.04%. Although this approach classiﬁes with the malicious
score, this is not an eﬃcient approach considering the high dimensionality
of features and regular updating requirement of the database to maintain
the detection performance. Since, both the analyses are done oﬀ-device; the
mobile app is just to provide an interface to upload the apk to the analysis server. The static and dynamic analyses of an app take several minutes
depending on the size of smali ﬁles. This approach is less eﬃcient and less
accurate than our approach.
We further compare the detection rate of PIndroid on the unlabelled set
of 100 apps against these approaches. The results are shown in Table 8.
PInDroid signiﬁcantly outperforms the other approaches with TPR of 0.98
and FPR of 0.1. The other approaches provide a detection rate between
0.90 to 0.93 with FPR between 0.7 to 1. Detection performance of compared
approaches as Roc curve is shown in Fig.
These approaches are less
eﬃcient than our approach in analysing the apps due to their dual processing
time. PIndroid gives good results due to the use of most relevant feature set
to model the malicious behaviour.
7. Conclusion
Android security framework relies on permissions and intents to control
the access to vital hardware and software resources. These two features have
never been used in tandem for malware detection. This work proposes a
novel malware detection method based on these two vital security features.
We use statistical and machine learning methods to validate the conjecture.
Our results demonstrate the potential of this approach, where PinDroid outperforms related approaches and detects malware apps accurately with very
low false positive rate.
The work also compares the performance of diﬀerent classiﬁers for their
eﬀectiveness in malware detection. Diﬀerent ensemble methods are also investigated and applied on the proposed model to improve the detection accuracy. Some malware apps are also developed for Proof of Concept (PoC)
and to get an insight into the modalities and complexities of malware apps
development. We also investigated Android methods and found that permissions and intents are the basic features used for app collusion. Hence, our
proposed malware detection model is particularly suitable for detection of
colluding apps in addition to the other types of malware apps.