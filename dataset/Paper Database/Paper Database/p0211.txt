Segmentation-Aware Convolutional Networks Using Local Attention Masks
Adam W. Harley
Carnegie Mellon University
 
Konstantinos G. Derpanis
Ryerson University
 
Iasonas Kokkinos
Facebook AI Research
 
We introduce an approach to integrate segmentation information within a convolutional neural network (CNN).
This counter-acts the tendency of CNNs to smooth information across regions and increases their spatial precision. To
obtain segmentation information, we set up a CNN to provide an embedding space where region co-membership can
be estimated based on Euclidean distance. We use these embeddings to compute a local attention mask relative to every
neuron position. We incorporate such masks in CNNs and
replace the convolution operation with a “segmentationaware” variant that allows a neuron to selectively attend
to inputs coming from its own region. We call the resulting network a segmentation-aware CNN because it adapts
its ﬁlters at each image point according to local segmentation cues. We demonstrate the merit of our method on
two widely different dense prediction tasks, that involve
classiﬁcation (semantic segmentation) and regression (optical ﬂow). Our results show that in semantic segmentation
we can match the performance of DenseCRFs while being
faster and simpler, and in optical ﬂow we obtain clearly
sharper responses than networks that do not use local attention masks.
In both cases, segmentation-aware convolution yields systematic improvements over strong baselines.
Source code for this work is available online at
 
1. Introduction
Convolutional neural networks (CNNs) have recently
made rapid progress in pixel-wise prediction tasks, including depth prediction , optical ﬂow estimation , and
semantic segmentation . This progress has been
built on the remarkable success of CNNs in image classiﬁcation tasks – indeed, most dense prediction models are based closely on architectures that were successful
in object recognition. While this strategy facilitates transfer
learning, it also brings design elements that are incompatible with dense prediction.
By design CNNs typically produce feature maps and pre-
Normalized ﬁlter response
Normalized ﬁlter response
Figure 1: Segmentation-aware convolution ﬁlters are invariant to backgrounds. We achieve this in three steps: (i) compute segmentation cues for each pixel (i.e., “embeddings”),
(ii) create a foreground mask for each patch, and (iii) combine the masks with convolution, so that the ﬁlters only process the local foreground in each image patch.
dictions that are smooth and low-resolution, resulting from
the repeated pooling and subsampling stages in the network architecture, respectively. These stages play an important role in the hierarchical consolidation of features,
and widen the higher layer effective receptive ﬁelds. The
low-resolution issue has received substantial attention: for
instance methods have been proposed for replacing the
subsampling layers with resolution-preserving alternatives
such as atrous convolution , or restoring the lost
resolution via upsampling stages . However, the
issue of smoothness has remained relatively unexplored.
Smooth neuron outputs result from the spatial pooling (i.e.,
abstraction) of information across different regions. This
can be useful in high-level tasks, but can degrade accuracy
on per-pixel prediction tasks where rapid changes in activation may be required, e.g., around region boundaries or
motion discontinuities.
 
To address the issue of smoothness,
we propose
segmentation-aware convolutional networks, which operate
as illustrated in Figure 1. These networks adjust their behavior on a per-pixel basis according to segmentation cues,
so that the ﬁlters can selectively “attend” to information
coming from the region containing the neuron, and treat
it differently from background signals.
To achieve this,
we complement each image patch with a local foregroundbackground segmentation mask that acts like a gating mechanism for the information feeding into the neuron. This
avoids feature blurring, by reducing the extent to which
foreground and contextual information is mixed, and allows
neuron activation levels to change rapidly, by dynamically
adapting the neuron’s behavior to the image content. This
goes beyond sharpening the network outputs post-hoc, as
is currently common practice; it ﬁxes the blurring problem
“before the damage is done”, since it can be integrated at
both early and later stages of a CNN.
The general idea of combining ﬁltering with segmentation to enhance sharpness dates back to nonlinear image processing and segmentation-aware feature extraction . Apart from showing that this technique
successfully carries over to CNNs, another contribution of
our work consists in using the network itself to obtain segmentation information, rather than relying on hand-crafted
pipelines. In particular, as in an earlier version of this work
 , we use a constrastive side loss to train the “segmentation embedding” branch of our network, so that we can then
construct segmentation masks using embedding distances.
There are three steps to creating segmentation-aware
convolutional nets, described in Sections 3.1-3.4: (i) learn
segmentation cues, (ii) use the cues to create local foreground masks, and (iii) use the masks together with convolution, to create foreground-focused convolution.
approach realizes each of these steps in a uniﬁed manner
that is at once general (i.e., applicable to both discrete and
continuous prediction tasks), differentiable (i.e., end-to-end
trainable as a neural network), and fast (i.e., implemented
as GPU-optimized variants of convolution).
Experiments show that minimally modifying existing
CNN architectures to use segmentation-aware convolution
yields substantial gains in two widely different task settings: dense discrete labelling (i.e., semantic segmentation), and dense regression (i.e., optical ﬂow estimation).
Source code for this work is available online at http:
//cs.cmu.edu/˜aharley/segaware.
2. Related work
This work builds on a wide range of research topics. The
ﬁrst is metric learning. The goal of metric learning is to produce features from which one can estimate the similarity between pixels or regions in the input . Bromley et al. 
inﬂuentially proposed learning these descriptors in a convolutional network, for signature veriﬁcation. Subsequent
related work has yielded compelling results for tasks such
as wide-baseline stereo correspondence , and
face veriﬁcation . Recently, the topic of metric learning
has been studied extensively in conjunction with image descriptors, such as SIFT and SID , improving the
applicability of those descriptors to patch-matching problems. Most prior work in metric learning has been concerned with the task of ﬁnding one-to-one correspondences
between pixels seen from different viewpoints. In contrast,
the focus of our work is (as in our prior work ) to bring
a given point close to all of the other points that lie in the
same object. This requires a higher degree of invariance
than before – not only to rotation, scale, and partial occlusion, but also to the interior appearance details of objects.
Concurrent work has targeted a similar goal, for body joints
 and instance segmentation . We refer to the features that produce these invariances as embeddings, as they
embed pixels into a space where the quality of correspondences can be measured as a distance.
The embeddings in our work are used to generate local
attention masks to obtain segmentation-aware feature maps.
The resulting features are meant to capture the appearance
of the foreground (relative to a given point), while being
invariant to changes in the background or occlusions. To
date, related work has focused on developing handcrafted
descriptors that have this property. For instance, soft segmentation masks and boundary cues have
been used to develop segmentation-aware variants of handcrafted features, like SIFT and HOG, effectively suppressing contributions from pixels likely to come from the background . More in line with the current paper are recent works that incorporate segmentation cues into CNNs,
by sharpening or masking intermediate feature maps with
the help of superpixels . This technique adds spatial structure to multiple stages of the pipeline. In all of
these works, the afﬁnities are deﬁned in a handcrafted manner, and are typically pre-computed in a separate process.
In contrast, we learn the cues directly from image data,
and compute the afﬁnities densely and “on the ﬂy” within
a CNN. Additionally, we combine the masking ﬁlters with
arbitrary convolutional ﬁlters, allowing any layer (or even
all layers) to perform segmentation-aware convolution.
Concurrent work in language modelling and image generation has also emphasized the importance
of locally masked (or “gated”) convolutions. Unlike these
works, our approach uniquely makes use of embeddings to
measure context relevance, which lends interpretability to
the masks, and allows for task-agnostic pre-training. Similar attention mechanisms are being used in visual and
non-visual question answering tasks. These works use
a question to construct a single or a limited sequence of
globally-supported attention signals. Instead, we use con-
volutional embeddings, and efﬁciently construct local attention masks in “batch mode” around the region of any given
Another relevant thread of works relates to efforts on
mitigating the low-resolution and spatially-imprecise predictions of CNNs. Approaches to counter the spatial imprecision weakness can be grouped into preventions (i.e.,
methods integrated early in the CNN), and cures (i.e., postprocesses). A popular preventative method is atrous convolution (also known as “dilated” convolution) , which
allows neurons to cover a wider ﬁeld of view with the same
number of parameters. Our approach also adjusts neurons’
ﬁeld of view, but focuses it toward the local foreground,
rather than widening it in general. The “cures” aim to restore resolution or sharpness after it has been lost.
example, one effective approach is to add trainable upsampling stages to the network, via “deconvolution” layers . A complementary approach is to stack features from multiple resolutions near the end of the network, so that the ﬁnal stages have access to both highresolution (shallow) features and low-resolution (deep) features . Sharpening can be done outside of the
CNN, e.g., using edges found in the image , or using a
dense conditional random ﬁeld (CRF) . Recently,
the CRF approach has been integrated more closely with
the CNN, by framing the CRF as a recurrent network, and
chaining it to the backpropagation of the underlying CNN
 . We make connections and extensions to CRFs in Section 3.3 and provide comparisons in Section 5.1.
3. Technical approach
The following subsections describe the main components of our approach. We begin by learning segmentation cues (Sec. 3.1). We formulate this as a task of ﬁnding “segmentation embeddings” for the pixels. This step
yields features that allow region similarity to be measured
as a distance in feature-space. That is, if two pixels have
nearby embeddings, then they likely come from the same
region. We next create soft segmentation masks from the
embeddings (Sec. 3.2). Our approach generalizes the bilateral ﬁlter , which is a technique for creating adaptive smoothing ﬁlters that preserve object boundaries. Noting that CRFs make heavy use of bilateral ﬁlters to sharpen posterior estimates, we next describe how
to simplify and improve CRFs using our segmentationaware masks (Sec. 3.3).
Finally, in Sec. 3.4 we introduce segmentation-aware convolution, where we merge
segmentation-aware masks with intermediate convolution
operations, giving rise to segmentation-aware networks.
3.1. Learning segmentation cues
The ﬁrst goal of our work is to obtain segmentation cues.
In particular, we desire features that can be used to infer –
Figure 2: Visualization of the goal for pixel embeddings.
For any two pixels sampled from the same object, the embeddings should have a small relative distance. For any
two pixels sampled from different objects, the embeddings
should have a large distance. The embeddings are illustrated
in 2D; in principle, they can have any dimensionality.
for each pixel – what other pixels belong to the same object
(or scene segment).
Given an RGB image, I, made up of pixels, p ∈R3 (i.e.,
3D vectors encoding color), we learn an embedding function that maps (i.e., embeds) the pixels into a feature space
where semantic similarity between pixels can be measured
as a distance . Choosing the dimensionality of that feature space to be D = 64, we can write the embedding function as f : R3 7→RD, or more speciﬁcally, f(p) = e, where
e is the embedding for pixel p.
Pixel pairs that lie on the same object should produce
similar embeddings (i.e., a short distance in feature-space),
and pairs from different objects should produce dissimilar
embeddings (i.e., a large distance in feature-space). Figure 2 illustrates this goal with 2D embeddings. Given semantic category labels for the pixels as training data, we can
represent the embedding goal as a loss function over pixel
pairs. For any two pixel indices i and j, and corresponding
embeddings ei, ej and object class labels li, lj, we can optimize the same-label pairs to have “near” embeddings, and
the different-label pairs to have “far” embeddings. Using
α and β to denote the “near” and “far” thresholds, respectively, we can deﬁne the pairwise loss as
 max (∥ei −ej∥−α, 0)
if li = lj
max (β −∥ei −ej∥, 0)
if li ̸= lj ,
where ∥·∥denotes a vector norm. We ﬁnd that embeddings
learned from L1 and L2 norms are similar, but L1-based
embeddings are less vulnerable to exploding gradients. For
thresholds, we use α = 0.5, and β = 2. In practice, the
speciﬁc values of α and β are unimportant, so long as α ≤β
and the remainder of the network can learn to compensate
for the scale of the resulting embeddings, e.g., through λ in
upcoming Eq. 3.
To quantify the overall quality of the embedding function, we simply sum the pairwise losses (Eq. 1) across the
image. Although for an image with N pixels there are N 2
pairs to evaluate, we ﬁnd it is effective to simply sample
Embeddings and local masks are computed
densely for input images.
For four locations in the image shown on the left, the ﬁgure shows (left-to-right) the
extracted patch, the embeddings (compressed to three dimensions by PCA for visualization), the embedding-based
mask, and the mask generated by color distance.
pairs from a neighborhood around each pixel, as in
where j ∈Ni iterates over the spatial neighbors of index i.
In practice, we use three overlapping 3 × 3 neighborhoods,
with atrous factors of 1, 2, and 5. We train a fullyconvolutional CNN to minimize this loss through stochastic
gradient descent. The network design is detailed in Sec. 4.
3.2. Segmentation-aware bilateral ﬁltering
The distance between the embedding at one index, ei,
and any other embedding, ej, provides a magnitude indicating whether or not i and j fall on the same object. We can
convert these magnitudes into (unnormalized) probabilities,
using the exponential distribution:
mi,j = exp(−λ∥ei −ej∥),
where λ is a learnable parameter specifying the hardness
of this decision, and the notation mi,j denotes that i is the
reference pixel, and j is the neighbor being considered. In
other words, considering all indices j ∈Ni, mi represents a
foreground-background segmentation mask, where the central pixel i is deﬁned as the foreground, i.e., mi,i = 1. Figure 3 shows examples of the learned segmentation masks
(and the intermediate embeddings), and compares them
with masks computed from color distances.
In general,
the learned semantic embeddings successfully generate accurate foreground-background masks, whereas the colorbased embeddings are not as reliable.
A ﬁrst application of these masks is to perform a
segmentation-aware smoothing (of pixels, features, or predictions).
Given an input feature xi, we can compute a
segmentation-aware smoothed result, yi, as follows:
k xi−kmi,i−k
Sharpened FC8
Figure 4: Segmentation-aware bilateral ﬁltering. Given an
input image (left), a CNN typically produces a smooth prediction map (middle top). Using learned per-pixel embeddings (middle bottom), we adaptively smooth the FC8 feature map with our segmentation-aware bilateral ﬁlter (right).
where k is a spatial displacement from index i. Equation 4
has some interesting special cases, which depend on the underlying indexed embeddings ej:
• if ej = 0, the equation yields the average ﬁlter;
• if ej = i, the equation yields Gaussian smoothing;
• if ej = (i, pi), where pi denotes the color vector at i,
the equation yields bilateral ﬁltering .
Since the embeddings are learned in a CNN, Eq. 4 represents a generalization of all these cases. For comparison,
Jampani et al. propose to learn the kernel used in the
bilateral ﬁlter, but keep the arguments to the similarity measure (i.e., ei) ﬁxed. In our work, by training the network
to provide convolutional embeddings, we additionally learn
the arguments of the bilateral distance function.
When the embeddings are integrated into a larger network that uses them for ﬁltering, the embedding loss function (Eq. 2) is no longer necessary. Since all of the terms
in the ﬁlter function (Eq. 4) are differentiable, the global
objective (e.g., classiﬁcation accuracy) can be used to tune
not only the input terms, xi, but also the mask terms, mi,j,
and their arguments, ej. Therefore, the embeddings can
be learned end-to-end in the network when used to create
masks. In our work, we ﬁrst train the embeddings with a
dedicated loss, then ﬁne-tune them in the larger pipeline in
which they are used for masks.
Figure 4 shows an example of how segmentation-aware
bilateral ﬁltering sharpens FC8 predictions in practice.
3.3. Segmentation-aware CRFs
Segmentation-aware bilateral ﬁltering can be used to improve CRFs.
As discussed earlier, dense CRFs are
effective at sharpening the prediction maps produced by
CNNs .
These models optimize a Gibbs energy given by
ψp(xi, xj),
where i ranges over all pixel indices in the image. In semantic segmentation, the unary term ψu is typically chosen to
be the negative log probability provided by a CNN trained
for per-pixel classiﬁcation. The pairwise potentials take the
form ψp(xi, xj) = µ(xi, xj)k(fi, fj), where µ is a label
compatibility function (e.g., the Potts model), and k(fi, fj)
is a feature compatibility function. The feature compatibility is composed of an appearance term (a bilateral ﬁlter),
and a smoothness term (an averaging ﬁlter), in the form
k(fi, fj) = w1 exp
−∥pi −pj∥2
where the wk are weights on the two terms. Combined with
the label compatibility function, the appearance term adds
a penalty if a pair of pixels are assigned the same label but
have dissimilar colors. To be effective, these ﬁltering operations are carried out with extremely wide ﬁlters (e.g., the
size of the image), which necessitates using a data structure
called a permutohedral lattice .
Motivated by our earlier observation that learned embeddings are a stronger semantic similarity signal than color
(see Fig. 3), we replace the color vector pi in Eq. 6 with
the learned embedding vector ei. The permutohedral lattice
would be inefﬁcient for such a high-dimensional ﬁlter, but
we ﬁnd that the signal provided by the embeddings is rich
enough that we can use small ﬁlters (e.g., 13 × 13), and
achieve the same (or better) performance. This allows us to
implement the entire CRF with standard convolution operators, reduce computation time by half, and backpropagate
through the CRF into the embeddings.
3.4. Segmentation-aware convolution
The bilateral ﬁlter in Eq. 4 is similar in form to convolution, but with a non-linear sharpening mask instead of a
learned task-speciﬁc ﬁlter. In this case, we can have the
beneﬁts of both, by inserting the learned convolution ﬁlter,
t, into the equation:
k xi−kmi,i−ktk
This is a non-linear convolution: the input signal is multiplied pointwise by the normalized local mask before forming the inner product with the learned ﬁlter. If the learned
ﬁlter ti is all ones, we have the same bilateral ﬁlter as in
Eq. 4; if the embedding-based segmentation mask mi is all
ones, we have standard convolution. Since the masks in
this context encode segmentation cues, we refer to Eq. 7 as
segmentation-aware convolution.
The mask acts as an applicability function for the ﬁlter, which makes segmentation-aware convolution a special
case of normalized convolution . The idea of normalized convolution is to “focus” the convolution operator on
the part of the input that truly describes the input signal,
avoiding the interpolation of noise or missing information.
In this case, “noise” corresponds to information coming
from regions other than the one to which index i belongs.
Any convolution ﬁlter can be made segmentation-aware.
The advantage of segmentation awareness depends on the
ﬁlter. For instance, a center-surround ﬁlter might be rendered useless by the effect of the mask (since it would block
the input from the “surround”), whereas a ﬁlter selective to
a particular shape might beneﬁt from invariance to context.
The basic intuition is that the information masked out needs
to be distracting rather than helping; realizing this in practice requires learning the masking functions. In our work,
we use backpropagation to learn both the arguments and the
softness of each layer’s masking operation, i.e., both ei and
λ in Eq. 3. Note that the network can always fall back to a
standard CNN by simply learning a setting of λ = 0.
4. Implementation details
This section ﬁrst describes how the basic ideas of the
technical approach are integrated in a CNN architecture,
and then provides details on how the individual components
are implemented efﬁciently as convolution-like layers.
4.1. Network architecture
Any convolutional network can be made segmentationaware. In our work, the technique for achieving this modiﬁcation involves generating embeddings with a dedicated
“embedding network”, then using masks computed from
those embeddings to modify the convolutions of a given
task-speciﬁc network. This implementation strategy is illustrated in Figure 5.
The embedding network has the following architecture.
The ﬁrst seven layers share the design of the earliest convolution layers in VGG-16 , and are initialized with that
network’s (object recognition-trained) weights. There is a
subsampling layer after the second convolution layer and
also after the fourth convolution layer, so the network captures information at three different scales. The ﬁnal output
from each scale is sent to a pairwise distance computation
(detailed in Sec. 4.2) followed by a loss (as in Eq. 1), so that
each scale develops embedding-like representations. The
outputs from the intermediate embedding layers are then
upsampled to a common resolution, concatenated, and sent
to a convolution layer with 1 × 1 ﬁlters. This layer learns a
weighted average of the intermediate embeddings, and creates the ﬁnal embedding for each pixel.
The idea of using a loss at intermediate layers is inspired
by Xie and Tu , who used this strategy to learn boundary
cues in a CNN. The motivation behind this strategy is to
provide early layers a stronger signal of the network’s end
Embedding network
Task-speciﬁc network
Figure 5: General schematic for our segmentation-aware CNN. The ﬁrst part is an embedding network, which is guided
to compute embedding-like representations at multiple scales, and constructs a ﬁnal embedding as a weighted sum of the
intermediate embeddings. The loss on these layers operates on pairwise distances computed from the embeddings. These
same distances are then used to construct local attention masks, that intercept the convolutions in a task-speciﬁc network.
The ﬁnal objective backpropagates through both networks, ﬁne-tuning the embeddings for the task.
goal, reducing the burden on backpropagation to carry the
signal through multiple layers .
The ﬁnal embeddings are used to create masks in the
task-speciﬁc network. The lightest usage of these masks involves performing segmentation-aware bilateral ﬁltering on
the network’s ﬁnal layer outputs; this achieves the sharpening effect illustrated in Figure 4. The most intrusive usage of the masks involves converting all convolutions into
segmentation-aware convolutions. Even in this case, however, the masks can be inserted with no detrimental effect
(i.e., by initializing with λ = 0 in Eq. 3), allowing the network to learn whether or not (and at what layer) to activate the masks. Additionally, if the target task has discrete
output labels, as in the case of semantic segmentation, a
segmentation-aware CRF can be attached to the end of the
network to sharpen the ﬁnal output predictions.
4.2. Efﬁcient convolutional implementation details
We reduce all steps of the pipeline to matrix multiplications, making the approach very efﬁcient on GPUs. We
achieve this by casting the mask creation (i.e., pairwise embedding distance computation) as a convolution-like operation, and implementing it in exactly the way Caffe realizes convolution: via an image-to-column transformation,
followed by matrix multiplication.
More precisely, the distance computation works as follows. For every position i in the feature-map provided by
the layer below, a patch of features is extracted from the
neighborhood j ∈Ni, and distances are computed between
the central feature and its neighbors. These distances are arranged into a row vector of length K, where K is the spatial
dimensionality of the patch. This process turns an H × W
feature-map into an H ·W ×K matrix, where each element
in the K dimension holds a distance relating that pixel to
the central pixel at that spatial index.
To convert the distances into masks, the H·W×K matrix
is passed through an exponential function with a speciﬁed
hardness, λ. This operation realizes the mask term (Eq. 3).
In our work, the hardness of the exponential is learned as a
parameter of the CNN.
To perform the actual masking, the input to be masked
is simply processed by an image-to-column transformation
(producing another H · W × K matrix), then multiplied
pointwise with the normalized mask matrix.
product, segmentation-aware bilateral ﬁltering is merely a
matter of summing across the K dimension, producing an
H · W × 1 matrix that can be reshaped into dimensions
H × W. Segmentation-aware convolution (Eq. 7) simply
requires multiplying the H · W × K masked values with a
K×F matrix of weights, where F is the number of convolution ﬁlters. The result of this multiplication can be reshaped
into F different H × W feature maps.
5. Evaluation
We evaluate on two different dense prediction tasks: semantic segmentation, and optical ﬂow estimation. The goal
of the experiments is to minimally modify strong baseline
networks, and examine the effects of instilling various levels of “segmentation awareness”.
5.1. Semantic segmentation
Semantic segmentation is evaluated on the PASCAL
VOC 2012 challenge , augmented with additional images from Hariharan et al. . Experiments are carried
out with two different baseline networks, “DeepLab” 
and “DeepLabV2” . DeepLab is a fully-convolutional
version of VGG-16 , using atrous convolution in some
layers to reduce downsampling.
DeepLabV2 is a fullyconvolutional version of a 101-layer residual network
(ResNet) , modiﬁed with atrous spatial pyramid pooling
and multi-scale input processing. Both networks are initial-
Table 1: PASCAL VOC 2012 validation results for the various considered approaches, compared against the baseline.
All methods use DeepLab as the base network; “BF” means
bilateral ﬁlter; “SegAware” means segmentation-aware.
.. . + CRF
.. . + 9 × 9 SegAware BF
.. . + 9 × 9 SegAware BF ×2
.. . + 9 × 9 SegAware BF ×4
.. . with FC6 SegAware
.. . with all layers SegAware
.. . with all layers SegAware + 9 × 9 BF
.. . with all layers SegAware + 7 × 7 BF ×2
.. . with all layers SegAware + 5 × 5 BF ×4
.. . with all layers and CRF SegAware
ized with weights learned on ImageNet , then trained on
the Microsoft COCO training and validation sets , and
ﬁnally ﬁne-tuned on the PASCAL images .
To replace the densely connected CRF used in the original works , we attach a very sparse segmentationaware
hyperparameters
segmentation-aware CRF via cross validation on a small
subset of the validation set, arriving at a 13 × 13 bilateral
ﬁlter with an atrous factor of 9, a 5 × 5 spatial ﬁlter, and 2
meanﬁeld iterations for both training and testing.
We carry out the main set of experiments with DeepLab
on the VOC validation set, investigating the piecewise addition of various segmentation-aware components. A summary of the results is presented in Table 1. The ﬁrst result is that using learned embeddings to mask the output
of DeepLab approximately provides a 0.6% improvement
in mean intersection-over-union (IOU) accuracy. This is
achieved with a single application of a 9 × 9 bilateral-like
ﬁlter on the FC8 outputs produced by DeepLab.
Once the embeddings and masks are computed, it is
straightforward to run the masking process repeatedly. Applying the process multiple times improves performance by
strengthening the contribution from similar neighbors in the
radius, and also by allowing information from a wider radius to contribute to each prediction. Applying the bilateral ﬁlter four times increases the gain in IOU accuracy to
1.3%. This is at the cost of approximately 500 ms of additional computation time. A dense CRF yields slightly worse
performance, at approximately half the speed (1 second).
Segmentation-aware convolution provides similar improvements, at less computational cost. Simply making the
FC6 layer segmentation-aware produces an improvement of
approximately 1% to IOU accuracy, at a cost of +100 ms,
Figure 6: Visualizations of semantic segmentations produced by DeepLab and its segmentation-aware variant on
the PASCAL VOC 2012 validation set.
mean IOU (%)
Trimap half−width (pixels)
+ seg.−aware + bilateral
+ seg.−aware
Figure 7: Performance near object boundaries (“trimaps”).
Example trimaps are visualized (in white) for the image in
the top left; the trimap of half-width three is shown in the
middle left, and the trimap of half-width ten is shown on the
bottom left. Mean IOU performance of the baseline and two
segmentation-aware variants are plotted (right) for trimap
half-widths 1 to 40.
while making all layers segmentation-aware improves accuracy by 1.6%, at a cost of just +200 ms.
To examine where the gains are taking place, we compute each method’s accuracy within “trimaps” that extend
from the objects’ boundaries. A trimap is a narrow band (of
a speciﬁed half-width) that surrounds a boundary on either
side; measuring accuracy exclusively within this band can
help separate within-object accuracy from on-boundary accuracy . Figure 7 (left) shows examples of trimaps, and
(right) plots accuracies as a function of trimap width. The
results show that segmentation-aware convolution offers its
main improvement slightly away from the boundaries (i.e.,
beyond 10 pixels), while bilateral ﬁltering offers its largest
improvement very near the boundary (i.e., within 5 pixels).
Combining segmentation-aware convolution with bilateral ﬁltering pushes the gains to 2.2%. Finally, adding a
segmentation-aware CRF to the pipeline increases IOU ac-
Table 2: PASCAL VOC 2012 test results.
DeepLab+CRF
SegAware DeepLab
DeepLabV2+CRF
SegAware DeepLabV2
curacy by an additional 0.5%, bringing the overall gain to
approximately 2.7% over the DeepLab baseline.
We evaluate the “all components” approach on the VOC
test server, with both DeepLab and DeepLabV2. Results are
summarized in Table 2. The improvement over DeepLab is
2%, which is noticeable in visualizations of the results, as
shown in Figure 6. DeepLabV2 performs approximately 10
points higher than DeepLab; we exceed this improvement
by approximately 0.8%. The segmentation-aware modiﬁcations perform equally well (0.1% superior) to dense CRF
post-processing, despite being simpler (using only a sparse
CRF, and replacing the permutohedral lattice with basic
convolution), and twice as fast (0.5s rather than 1s).
5.2. Optical ﬂow
We evaluate optical ﬂow on the recently introduced FlyingChairs dataset. The baseline network for this experiment is the “FlowNetSimple” model from Dosovitskiy
et al. . This is a fully-convolutional network, with a
contractive part that reduces the resolution of the input by
a factor of 64, and an expansionary part (with skip connections) that restores the resolution to quarter-size.
relatively
segmentation-aware modiﬁcations yield substantial gains in
accuracy. Using embeddings pre-trained on PASCAL VOC,
we make the ﬁnal prediction layer segmentation-aware,
and add 9 × 9 bilateral ﬁltering to the end of the network.
This reduces the average end-point error (aEPE) from 2.78
to 2.26 (an 18% reduction in error), and reduces average
angular error by approximately 6 degrees, from 15.58
We achieve these gains without the aggressive
data augmentation techniques pursued by Dosovitskiy et
al. . Table 3 lists these results in the context of some
related work in this domain, demonstrating that the gain is
fairly substantial. FlowNetCorr achieves a better error,
but it effectively doubles the network size and runtime,
whereas our method only adds a shallow set of embedding
layers. As shown in Figure 8, a qualitative improvement to
the ﬂow ﬁelds is easily discernable, especially near object
boundaries. Note that the performance of prior FlowNet
architectures diminishes with the application of variational
Visualizations of optical ﬂow produced by
FlowNet and its segmentation-aware variant on the FlyingChairs test set: segmentation-awareness yields much
sharper results than the baseline.
Table 3: FlyingChairs test results.
SPyNet 
EpicFlow 
DeepFlow 
FlowNetSimple 
FlowNetSimple + variational 
FlowNetCorr 
FlowNetCorr + variational 
SegAware FlowNetSimple
reﬁnement , likely because this step was not integrated
in the training process. The ﬁltering methods of this work,
however, are easily integrated into backpropagation.
6. Conclusion
This work introduces Segmentation-Aware Convolutional Networks, a direct generalization of standard CNNs
that allows us to seamlessly accommodate segmentation information throughout a deep architecture. Our approach
avoids feature blurring before it happens, rather than ﬁxing it post-hoc. The full architecture can be trained end-toend. We have shown that this allows us to directly compete with segmentation-speciﬁc structured prediction algorithms, while easily extending to continuous prediction
tasks, such as optical ﬂow estimation, that currently have
no remedy for blurred responses.