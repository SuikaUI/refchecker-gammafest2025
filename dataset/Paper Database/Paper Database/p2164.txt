Making Deep Neural Networks Robust to Label Noise:
a Loss Correction Approach
Giorgio Patrini1,2, Alessandro Rozza3, Aditya Krishna Menon2,1, Richard Nock2,1,4, Lizhen Qu2,1
1Australian National University, 2Data61, 3Waynaut, 4University of Sydney
{name.surname}@data61.csiro.au, 
We present a theoretically grounded approach to train
deep neural networks, including recurrent networks, subject
to class-dependent label noise. We propose two procedures
for loss correction that are agnostic to both application domain and network architecture. They simply amount to at
most a matrix inversion and multiplication, provided that
we know the probability of each class being corrupted into
another. We further show how one can estimate these probabilities, adapting a recent technique for noise estimation
to the multi-class setting, and thus providing an end-to-end
framework. Extensive experiments on MNIST, IMDB, CIFAR-
10, CIFAR-100 and a large scale dataset of clothing images
employing a diversity of architectures — stacking dense,
convolutional, pooling, dropout, batch normalization, word
embedding, LSTM and residual layers — demonstrate the
noise robustness of our proposals. Incidentally, we also
prove that, when ReLU is the only non-linearity, the loss
curvature is immune to class-dependent label noise.
1. Introduction
Large datasets used in training modern machine learning
models, such as deep neural networks, are often affected by
label noise. The problem is pervasive for a simple reason:
manual expert-labelling of each instance at a large scale is
not feasible, and so researchers often resort to cheap but imperfect surrogates. Two such popular surrogates are crowdsourcing using non-expert labellers and — especially for images — the use of search engines to query instances by a keyword, assuming the keyword as a valid label 
Both approaches offer the possibility to scale the acquisition
of training labels, but invariably result in the introduction of
label noise, which may adversely affect model training.
Our goal is to effectively train deep neural networks with
modern architectures under label noise. We do so by marrying two different lines of recent research. The ﬁrst strand is
work on ad-hoc deep architectures tailored to the problem,
primarily developed in Computer Vision .
While some such approaches have shown good experimental
performance on speciﬁc domains, they lack a solid theoretical framework and often need a large amount of clean labels
to obtain acceptable results — in particular, for pre-training
or validating hyper-parameters .
The second strand is recent Machine Learning research
on theoretically grounded means of combating label noise.
In particular, we are interested in the design of corrected
losses that are robust to label noise . Despite
their formal guarantees, these methods have not been fully
appreciated in practice because, crucially, they require noise
rates to be known a priori.
An estimate of the noise is often available to practitioners
by polishing a subset of the training data — which is
useful and often necessary for model selection. Yet, interestingly, recent work has provided practical algorithms for
estimating the noise rates ; remarkably,
this is achievable with absolutely no knowledge of ground
truth labels. To our knowledge, no prior work has combined
those estimators with loss correction techniques, nor has
either idea been applied to modern deep architectures. Our
contributions aim to unify these research streams:
• We introduce two alternative procedures for loss correction, provided that we know a stochastic matrix T
summarizing the probability of one class being ﬂipped
into another under noise. The ﬁrst procedure, a multiclass extension of applied to neural networks,
is called “backward” as it multiplies the loss by T −1.
The second, inspired by , is named “forward” as it
multiplies the network predictions by T.
• We prove that both procedures enjoy formal robustness
guarantees w.r.t. the clean data distribution. Since we
only operate on the loss function, the approach is both
architecture and application domain independent, as
well as viable for any chosen loss function.
• We take a further step and extend the noise estimator
of to our multi-class setting, thus formulating an
 
end-to-end solution to the problem.
• We prove that for ReLU networks the Hessian of the
loss is independent from label noise.
We apply our loss corrections to image recognition on
MNIST, CIFAR-10, CIFAR-100 and sentiment analysis on
IMDB; we simulate corruption by artiﬁcially injecting noise
on the training labels. In order to show that no architectural choice is the secret ingredient of our robustiﬁcation
recipe, we experiment with a variety of network modules
currently in fashion: convolutions and pooling , dropout
 , batch normalization , word embedding and residual units . Additional tests on LSTM conﬁrm
that the procedures can be seamlessly applied to recurrent
neural networks as well. Comparisons with non-corrected
losses and several known methods conﬁrm robustness of
our two procedures, with the forward correction dominating
the backward. Unsurprisingly, the noise estimator is the
bottleneck in obtaining near-perfect robustness, yet in most
experiments our approach is often the best compared to prior
work. Finally, we experiment with Clothing1M, the 1M
clothing images dataset of , and establish the new state
of the art.
2. Related work
Our work leverages recent research in a number of different areas, summarized below.
Noise robustness1. Learning with noisy labels has been
widely investigated in the literature . From the theoretical standpoint label noise has been studied in two different
regimes, with vastly different conclusions. In the case of
low-capacity (typically linear) models, even mild symmetric, i.e. class-independent (versus asymmetric, i.e. classdependent), label noise can produce solutions that are akin to
random guessing . On the other hand, the Bayes-optimal
classiﬁer remains unchanged under symmetric and
even instance dependent label noise implying that highcapacity models are robust to essentially any level of such
noise, given sufﬁciently many samples.
Surrogate losses. Suppose one wishes to minimize a loss
ℓon clean data. When the level of noise is known a priori,
 provided the general form of a noise corrected loss ˆℓ
such that minimization of ˆℓon noisy data is equivalent to
minimization of ℓon clean data. In the idealized case of
symmetric label noise, for certain ℓone in fact does not need
to know the noise rate: gives a sufﬁcient condition for
which ℓis robust, and several examples of such robust nonconvex losses, while shows that the (convex) linear or
unhinged loss is its own noise-corrected loss. Another robust
non-convex loss is given in .
1We use the term robustness in its meaning of immunity to noise and
not generically as “adaptivity to various scenarios”, e.g. .
Noise rate estimation. Recent work has provided methods
to estimate label ﬂip probabilities directly from noisy samples. Typically, it is required that the generating distribution
is such that for each class, there exists some “perfect” instance, i.e. one that is classiﬁed with probability equal to one.
Proposed estimators involve either the use of kernel mean
embedding , or post-processing the output of a standard
class-probability estimator such as logistic regression using
order statistics on the range of scores or the slope
of the induced ROC curve .
Deep learning with noisy labels. Several works in Deep
Learning have attempted to deal with noisy labels of late,
especially in Computer Vision. This is often achieved by
formulating noise-aware models. builds a noise model
for binary classiﬁcation of aerial image patches, which can
handle omission and wrong location of training labels. 
constructs a more sophisticated mix of symmetric, asymmetric and instance-dependent noise; two networks are learned
by EM as models for classiﬁer and noise type. It is often the
case that a small set of clean labels is needed in order either
to pre-train or ﬁne-tune the model .
The work of deserves a particular mention. The
method augments the architecture by adding a linear layer
on top of the network. Once learned, this layer plays the role
of our matrix T. However, learning this architecture appears
problematic; heuristics such as trace regularization and a
ﬁxed updating schedule for the linear layer are necessary.
We sidestep those issues by decoupling the two phases: we
ﬁrst estimate T and then learn with loss correction.
We are not aware of any other attempt at either applying
the noise-corrected loss approach of to neural networks,
nor on combining those losses with the above noise rate estimators. Our work sits precisely in this intersection. Note that,
even though in principle loss correction should not be necessary for high-capacity models like deep neural networks,
owing to aforementioned theoretical results, in practice, such
correction may offset the sub-optimality of these models arising from training on ﬁnite samples. Speciﬁcally, we expect
that directly optimizing the (corrected) objective we care
about will be beneﬁcial in the ﬁnite-sample case.
3. Preliminaries
We begin by ﬁxing notation. We let [c]
.= {1, . . . , c} for
any c positive integer. Column vectors are written in bold
(e.g. v) and matrices in capitals (e.g. V ). Coordinates of a
vector are denoted by a subscript (e.g. vj), while rows and
columns of a matrix are denoted e.g. Vj· and V·j respectively.
We denote the all-ones vector by 1, with size clear from
context, and ∆c−1 ⊂ c the c-dimensional simplex.
In supervised c-class classiﬁcation, one has feature space
X ⊆Rd and label space Y = {ei : i ∈[c]}, where ei
denotes the ith standard canonical vector in Rc by , i.e. ei ∈
{0, 1}c, 1⊤ei = 1. One observes examples (x, y) drawn
from an unknown distribution p(x, y) = p(y|x)p(x) over
X × Y. We denote expectations over p(x, y) by Ex,y. Note
that each y only has one non-zero value at the coordinate
corresponding to the underlying label.
An n-layer neural network2 comprises a transformation
h: X →Rc, where h = (h(n) ◦h(n−1) ◦· · · ◦h(1)) is the
composition of a number of intermediate transformations —
the layers — deﬁned by:
(∀i ∈[n −1]) h(i)(z) = σ(W (i)z + b(i)) ,
h(n)(z) = W (i)z + b(i) .
where W (i) ∈Rd(i)×d(i−1) and b(i) ∈Rd(i) are parameters
to be estimated3, and σ is any activation function that acts
coordinate-wise, such as the ReLU σ(x)i = max(0, xi).
Observe that the ﬁnal layer applies a linear projection, unlike
all preceding layers. To simplify notation, we write:
(∀i ∈[n]) x(i)
.= h(i)(x(i−1)),
with the base case x(0)
.= x, so that e.g. x(1) is exactly the
representation in the ﬁrst layer. The coordinates of h(x)
represent the relative weights that the model assigns to each
class i = 1, . . . , c to be predicted. The predicted label is
thus given by arg maxi∈[c] hi(x). In the training phase, the
output of the ﬁnal layer is contrasted with the true label
y via two steps. First, h(·) passes through the softmax
function ehi(x)/ Pc
k=1 ehk(x). The softmax output can be
interpreted as a vector approximating the class-conditional
probabilities p(y|x); we denote it by ˆp(y|x) ∈∆c−1. Next,
we measure the discrepancy between label y = ei and
network output by a loss function ℓ: Y × ∆c−1 →R, for
example by means of cross-entropy:
ℓ(ei, ˆp(y|x)) = −(ei)⊤log ˆp(y|x) = −log ˆp(y = ei|x) .
With some abuse of notation, we also deﬁne a loss in vector
form ℓ: ∆c−1 →Rc, computed on every possible label:
ℓ(ˆp(y|x)) =
 ℓ(e1, ˆp(y|x)), . . . , ℓ(ec, ˆp(y|x))
In the following, formal results hold under very mild conditions on a generic loss function ℓ; at times we provide
examples for the cross-entropy. For simplicity, one could
think of cross-entropy every time ℓis mentioned.
2W.l.o.g., we assume all layers to be fully connected, or dense; for
example, convolutions can be represented by dense layers with shared
sparse weights.
3Here, d(0) = d, the original feature dimensionality, and d(n) = c, the
label dimensionality.
4. Label noise and loss robustness
We now consider label noise. We assume the asymmetric,
i.e. class-conditional noise setting , where each label y in
the training set is ﬂipped to ˜y ∈Y with probability p(˜y|y);
feature vectors are untouched. Thus, we observe samples
from a distribution p(x, ˜y) = P
y p(˜y|y)p(y|x)p(x). Denote by T ∈ c×c the noise transition matrix specifying
the probability of one label being ﬂipped to another, so that
∀i, j Tij = p(˜y = ej|y = ei). The matrix is row-stochastic
and not necessarily symmetric across the classes.
This is an approximation of real-world corruption which
can still be useful in certain scenarios. One such case is that
of classes representing a ﬁne-grained hierarchy of concepts,
for example dog breeds and bird species or narrow categories of clothing . Classes may be too similar between
each other for non-expert human labellers to distinguish,
regardless of the speciﬁc instances. Little is known about
learning under the more generic feature dependent noise,
with few exceptions .
We aim to modify a loss ℓso as to make it robust to asymmetric label noise; in fact, this is possible if T is known.
Under this assumption — that we relax later on — we introduce two alternative corrections inspired by and .
4.1. The backward correction procedure
We can build an unbiased estimator of the loss function,
such that under expected label noise the corrected loss equals
the original one computed on clean data. This property is
stated in the next Theorem, a multi-class generalization of
[28, Theorem 1]. The Theorem is also a particular instance
of the more abstract [40, Theorem 3.2].
Theorem 1 Suppose that the noise matrix T is non-singular.
Given a loss ℓ, backward corrected loss is deﬁned as:
ℓ←(ˆp(y|x)) = T −1ℓ(ˆp(y|x)) .
Then, the loss correction is unbiased, i.e. :
E˜y|x ℓ←(y, ˆp(y|x)) = Ey|x ℓ(y, ˆp(y|x)) ,
and therefore the minimizers are the same:
Ex,˜y ℓ←(y, ˆp(y|x)) = argmin
Ex,y ℓ(y, ˆp(y|x)) .
E˜y|x ℓ←(ˆp(y|x))
Ey|x Tℓ←(ˆp(y|x))
Ey|x T T −1ℓ(ˆp(y|x)) = Ey|x ℓ(ˆp(y|x)) .
The corrected loss is effectively a linear combination of
the loss values for each observable label, whose coefﬁcients
are due to the probability that T −1 attributes to each possible true label y, given the observed one ˜y. Intuitively, we
are “going one step back” in the noise process described by
the Markov chain T. The corrected loss is differentiable —
although not always non-negative — and can be minimized
with any off-the-shelf algorithm for back-propagation. Although in practice T would be invertible almost surely, its
condition number may be problematic. A simple solution is
to mix T with the identity matrix before inversion; this may
be seen as taking a more conservative noise-free prior.
4.2. The forward correction procedure
Alternatively, we can correct the model predictions. Following , we start by observing that a neural network
learned with no loss correction would result in a predictor
for noisy labels ˆp(˜y|x). We can make explicit the dependency on T. For instance, with cross-entropy we have:
ℓ(ei, ˆp(y|x)) = −log ˆp(˜y = ei|x)
j=1 p(˜y = ei|y = ej) ˆp(y = ej|x)
j=1 Tji ˆp(y = ej|x) ,
or in matrix form ℓ(ˆp(y|x)) = −log T ⊤ˆp(y|x) . This loss
compares the noisy label ˜y to averaged noisy prediction
corrupted by T. We call this procedure “forward” correction. In order to analyze its behavior, we ﬁrst need to recall
deﬁnition and properties of a broad family of losses named
proper composite [33, Section 4]. Consider a link function
ψ : ∆c−1 →Rc, invertible. Many losses are said to be
composite, and denoted by ℓψ : Y × Rc →R, in the sense
that they can be expressed by the aid of a link function as
ℓψ(y, h(x)) = ℓ(y, ψ−1(h(x))) .
In the case of cross-entropy, the softmax is the inverse link
function. When composite losses are also proper , their
minimizer assumes the particular shape of the link function
applied to the class-conditional probabilities p(y|x):
Ex,y ℓψ(y, h(x)) = ψ(p(y|x)) .
Cross-entropy and square are examples of proper composite
losses. An intriguing robustness property holds for forward
correction of proper composite losses.
Theorem 2 Suppose that the noise matrix T is non-singular.
Given a proper composite loss ℓψ, deﬁne the forward loss
correction as:
ψ (h(x)) = ℓ(T ⊤ψ−1(h(x))) .
Then, the minimizer of the corrected loss under the noisy
distribution is the same as the minimizer of the original loss
under the clean distribution:
ψ (y, h(x)) = argmin
Ex,y ℓψ(y, h(x)) .
Proof. First notice that:
ψ (y, h(x)) = ℓ(y, T ⊤ψ−1(h(x))) = ℓφ(y, h(x)) (8)
where we denote φ−1 = ψ−1 ◦T ⊤. Equivalently, φ =
(T −1)⊤◦ψ is invertible by composition of invertible functions, its domain is ∆c−1 as of ψ and its codomain is Rc.
The last loss in Equation 8 is therefore proper composite
with link φ. Finally, from Equation 7, the loss minimizer
over the noisy distribution is
Ex,˜y ℓφ(y, h(x)) = φ(p(˜y|x))
= ψ((T −1)⊤p(˜y|x)) = ψ(p(y|x)) ,
that proves the Theorem by Equation 7 once again.
Recall that ˆp(y|x) approximates p(y|x) and thus we can
relate to the result by taking any neural network that enough
expressive. Although, the property is weaker than unbiasedness of Theorem 1. Robustness applies to the minimizer
only, that is, the model learned by forward correction is the
minimizer over the clean distribution. Yet, Theorem 2 guarantees noise robustness with no explicit matrix inversion; the
“de-noising” link function φ does it behind the scene. This
turns out to be an important factor in practice; see below.
4.3. The overall algorithm
A limitation of the above procedures is that they require
knowing T. In most applications, the matrix T would be
unknown and to be estimated. We present here an extension
of the recent noise estimator of to the multi-class
settings. It is derived under two assumptions.
Theorem 3 Assume p(x, y) is such that:
(1) There exist “perfect examples” of each of class j ∈[c],
in the sense that
(∃¯xj ∈X) :
p(¯xj) > 0 ∧p(y = ej|¯xj) = 1.
(2) given sufﬁciently many corrupted samples, h is rich
enough to model p(˜y|x) accurately.
It follows that ∀i, j ∈[c], Tij = p(˜y = ej|¯xi) .
Proof. By (2), we can consider p(˜y|x) instead of ˆp(˜y|x).
For any j ∈[c] and any x ∈X, we have that:
p(˜y = ej|x) =
k=1 p(˜y = ej|y = ek) p(y = ek|x)
k=1 Tkj p(y = ek|x) .
By (1), when x = ¯xi, p(y = ek|¯xi) = 0 for k ̸= i.
Rather surprisingly, Theorem 3 tells us that we can estimate each component of matrix T just based on noisy class
probability estimates, that is, the output of the softmax of a
Algorithm 1 Robust two-stage training
Input: the noisy training set S, any loss ℓ
If T is unknown:
Train a network h(x) on S with loss ℓ
Obtain an unlabeled sample X′
Estimate ˆT by Equations (12)-(13) on X′
Train the network h(x) on S with loss ℓ←or ℓ→
Output: h(·)
network trained with noisy labels. In particular, let X′ be
any set of features vectors. This can be the training set itself,
but not necessarily: we do not require this sample to have
any label at all and therefore any unlabeled sample from the
same distributions can be used as well. We can approximate
T with two steps:
¯xi = argmaxx∈X′ ˆp(˜y = ei|x)
ˆTij = ˆp(˜y = ej|¯xi) .
In practice, assumption (1) of Theorem 3 might hold true
when X′ is large enough. Assumption (2) of Theorem 3 is
more difﬁcult to justify; we require that the network can perfectly model the probability of the noisy labels. Although, in
the experiments we can often recover T close to the ground
truth and ﬁnd that small estimation errors have a mild, not
catastrophic effect on the quality of the correction.
Algorithm 1 summarizes the end-to-end approach. If
we know T, for example by cleaning manually a subset of
training data, we can train with ℓ←or ℓ→. Otherwise, we
ﬁrst have to train the network with ℓon noisy data, and obtain
from it estimates of p(˜y|x) for each class via the output of
the softmax. After training ˆT is computable in O(c2 · |X′|).
Finally, we re-train with the corrected loss, while potentially
utilizing the ﬁrst network to help initializing the second one.
4.4. Digression: noise free Hessians via ReLU
We now present a result of independent interest in the
context of label noise. The ReLU activation function appears
to be a good ﬁt for an architecture in our noise model, since it
brings the particular convenience that the Hessian of the loss
does not depend on noise, and hence the local curvature is
left unchanged. At the same time, we are assured that backward correction by T — or any arbitrarily bad estimator of
the matrix — has no impact on those second order properties
of the loss — something that does not hold for the forward
correction though. We stress the fact that other activation
functions like the sigmoid do not share this guarantee. The
proof makes use of the factorization trick due to .
Theorem 4 Assume that all activation functions are Re-
LUs4. Then, the Hessian of ℓdoes not change under noise.
Moreover, the Hessians of ℓ←and ℓare the same for any T.
4A caveat: ℓmust be a linear-odd loss studied in ; cross-entropy and
correction
Hessian of Ex, ˜y
no guarantee
unbiased estimator of ℓ
same minimizer of ℓ
no guarantee
Table 1: Qualitative comparison of loss corrections.
Proof. We give the proof for cross-entropy for simplicity;
see for a generalization. When y = ei the loss is:
−log ˆp(y = ei|x)i = −log
x(n−1)+b(n)
k=1 eW (n)
k· x(n−1)+b(n)
i· x(n−1) + b(n)
k=1 eW (n)
k· x(n−1)+b(n)
The only dependence on the true class ei above are the
ﬁrst two terms. The log-partition is independent of the
precise class i. Evidently, the noise affects the loss only
through W (n)
: those are the only terms in which
ℓ(y, ˆp(y|x)) and ℓ(˜y, ˆp(y|x)) may differ. Therefore we can
rewrite the backward corrected loss as:
ℓ←(ej, ˆp(y|x)) =
T −1ℓ(ˆp(y|x))
T −1W (n)
j· x(n−1) −
k=1 eW (n)
k· x(n−1)+b(n)
In fact, note that T −1 does not affect the log-partition function. To see this, let A(x) = log (Pc
k=1 eW (n)
k· x(n−1)+b(n)
with the (vector) log-partition being A(x)1. It follows that
its correction is T −1A(x)1 = A(x)1, by left-multiplication
of T and because T1 = 1 since T is row-stochastic.
Thus ℓ←(ej, hs (x)) = B(x) + A(x), where B(x) =
−(T −1W (n))j·x(n−1) −(T −1b(n))j is a piece-wise linear
function of the model parameters, and the log-partition A(x)
is non-linear because of the loss and the architecture but does
not depend on noise. Since the composition of piece-wise
linear function is piece-wise linear, the Hessian of B(x) vanishes, and therefore the Hessian of ℓ←is noise independent
for any T. The same holds for ℓ(no correction) by taking
T = I and hence the Hessians are the same.
Theorem 4 does not provide any assurance on minima:
indeed, stationary points may change location due to label
noise. What it does guarantee is that the convergence rate
of ﬁrst-order methods is the same: the loss curvature cannot
blow up or ﬂat out and instead it is the same point by point
in the model space. The Theorem advocates for use of ReLU
networks, in line with the recent theoretical breakthrough
allowing for deep learning with no local minima . Table
1 summaries the properties of loss correction.
square loss are such. At the same time, we could generalize Theorem 4 to
any neural network that expresses a piece-wise linear function, including
for example max-pooling.
5. Experiments
We now test the theory on various deep neural networks
trained on MNIST , IMDB , CIFAR-10, CIFAR-100
 and Clothing1M so as to stress that our approach
is independent on both architecture and data domain.
5.1. Loss corrections with T known or estimated
We artiﬁcially corrupt labels by a parametric matrix T.
The rationale is to mimic some of the structure of real mistakes for similar classes, e.g.
CAT →DOG. Transitions
are parameterized by N ∈ such that ground truth and
wrong class have probability respectively of 1 −N, N. An
example of T used for MNIST with N = 0.7 is on the left:




Common to all experiments is what follows. The loss
ℓchosen for comparison is cross-entropy. 10% of training
data is held out for validation. The loss is evaluated on it
during training. With the corrected losses we can validate on
noisy data, which is advantageous over other approaches that
measure noisy validation accuracy instead. The available
standard test sets are used for testing. We use ReLU for all
networks and initialize weights prior to ReLUs as in ,
otherwise by uniform sampling in [−0.05, 0.05]. The minibatch size is 128. The estimator of T from noisy labels is
applied to X′ being training and validation sets together. In
fact, preliminary experiments highlighted that the large size
X′ improve sensibly the approximation of T; after estimation, we row-normalize the matrix. Following , we take
a α-percentile in place of the argmax of Equation 12, and
we found α = 97% to work well for most experiments; the
estimator performs very poorly with CIFAR-100, possibly
due the small number of images per class, and we found it is
better off computing the argmax instead.
Fully connected network on MNIST. In the ﬁrst set of
experiments we consider MNIST. Pixels are normalized in
 . Noise ﬂips some of the similar digits: 2 →7, 3 →
8, 5 ↔6, 7 →1; see Equation (17, left). We train an architecture with two dense hidden layers of size 128, with
probability 0.5 of dropout. AdaGrad is run for 40 epochs
with initial learning rate 0.01 and δ = 10−6. We repeat each
experiment 5 times to account for noise and weight initialization. It is clear from Figure 1a that, although the model
is somewhat robust to mild noise, high level of corruption
has a disrupting effect on ℓ. Instead, our losses do not witness a drastic drop. With ˆT estimated performance lays in
between, yet it is signiﬁcantly better than with no correction.
An example of ˆT is in Equation (17, right), with ϵ < 10−6.
Figure 1: Comparison of cross-entropy with its corrections,
with known or estimated T.
Word embedding and LSTM on IMDB. We keep only the
top 5000 most frequent words in the corpus. Each review is
either truncated or padded to be 400-word long. To simulate
asymmetric noise in this binary problem, we keep constant
noise for the transition 0 →1 at 5%, while 1 →0 is parameterized as above; 0/1 are the two review’s sentiments. We
trained two models inspired by the baselines of . The ﬁrst
maps words into 50-dimensional embeddings, before passing
through ReLUs; dropout with probability 0.8 is applied to
the embedding output. In the second model the embedding
has dimension 256 and it is followed by an LSTM with 512
units and by a last 512-dimensional hidden layer with 0.5
dropout. AdaGrad is run for 50 epochs with the same setup
as above; results are averages over 5 runs. Figures 1b-1c
display an outcome similar to what previously observed on
MNIST, in spite of difference in dataset, number of classes,
architecture and structure of T. Noticeably, our approach
is effective on recurrent networks as well. Correcting with
ˆT is in line with the true T here; we believe this is because
estimation is easier on this binary problem.
Residual networks on CIFAR-10 and CIFAR-100. For
both datasets we perform per-pixel mean subtraction and
data augmentation as in , by horizontal random ﬂips and
32×32 random crops after padding with 4 pixels on each side.
T for CIFAR-10 is described by: TRUCK →AUTOMOBILE,
BIRD →AIRPLANE, DEER →HORSE, CAT ↔DOG. In
CIFAR-100, the 100 classes are grouped into 20 5-size superclasses, e.g. AQUATIC mammals contain BEAVER, DOLPHIN,
OTTER, SEAL and WHALE. Within super-classes, the noise
ﬂips each class into the next, circularly.
For the last experiments we use deep residual networks
(ResNet), the CIFAR-10/100 architectures from . In
short, residual blocks implements a non-linear operation
F(x) in parallel with an identity shortcut: x →x+F(x). F
is as cascade of twice batch normalization →ReLU →3×3
convolution, following the “pre-activation" recommendation
of . Here we experiment with ResNets of depth 14 and
32 (CIFAR-10) and 44 (CIFAR-100). By common practice
 , we run SGD with 0.9 momentum and learning rate
0.01, and divide it by 10 after 40 and 80 epoch (120 in total)
for CIFAR-10 and after 80 and 120 (150) for CIFAR-100;
weight decay is 10−4. Training deep ResNets is more time
consuming and thus experiments are run only once. Since we
use shallower networks than the ones in , performance
is not comparable with the original work. In ﬁgures 1d-
1f, forward correction does not suffer any signiﬁcant loss.
Except with the shallowest ResNet, backward correction
does not seem to work well in the low noise regime. Finally,
noise estimation is particularly difﬁcult on CIFAR-100.
5.2. Comparing with other loss functions
We now compare with other methods. Data, architectures
and artiﬁcial noise are the same as above. Additionally, we
test the case of symmetric noise where N is the probability of
label ﬂip that is spread uniformly among all the other classes.
We select methods prescribing changes in the loss function,
similarly to ours: unhinged , sigmoid , Savage 
and soft and hard bootstrapping ; hyper-parameters of
the last two methods are set in accordance with their paper.
Unhinged loss is unbounded and cannot be used alone. In
the original work L2 regularization is applied to address the
problem, when training non-parametric kernel models. We
tried to regularize every layer with little success; learning
either does not converge (too little regularization) or converge to very poor solutions (too much). On preliminary
experiments sigmoid loss ran into the opposite issue, namely
premature saturation; the loss reaches a plateau too quickly,
a well-known problem with sigmoidal activation functions
 . To make those losses usable for comparison, we stack a
layer of batch normalization right before the loss function.
Essentially, the network outputs are whitened and likely to
operate in a bounded, non-saturated area of the loss; note
that this is never required for linear or kernel models.
Table 2 presents the empirical analysis. We list the key
ﬁndings: (a) In the absence of artiﬁcial noise (ﬁrst column
for each dataset), all losses reach similar accuracies with
a spread of 2 points; exceptions are some instances of unhinged, sigmoid and Savage. Additionally, with IMDB there
are cases († in Table 2) of loss correction with noise estimation that perform slightly better than assuming no noise.
Clearly, the estimator is able to recover the natural noise in
the sentiment reviews. (b) With low asymmetric noise (second column) results differ between simple architecture/tasks
(datasets on the left) and deep networks/more difﬁcult problems (right); in the former case, the two corrections behave
similarly and are not statistically far from the competitors; in
the latter case, forward correction with known T is unbeaten,
with no clear winner among the remaining ones. (c) With
asymmetric noise (last two columns) the two loss corrections
with known T are overall the best performing, conﬁrming
the practical implications of their formal guarantees; forward
is usually the best. (d) If we exclude CIFAR-100, the noise
estimation accounts for average accuracy drops between 0
(IMBD with LSTM model) and 27 points (MNIST); nevertheless, our performance is better than every other method
in many occasions. (e) In the experiment on CIFAR-100 we
obtain essentially perfect noise robustness with the ideal forward correction. The noise estimation works well except in
the very last column, yet it guarantees again better accuracy
over competing methods. We discuss this issue in Section 6.
5.3. Experiments on Clothing1M
Finally, we test on Clothing1M , consisting of 1M
images with noisy labels, with additional 50k, 14k, 10k of
clean data respectively for training, validation and testing;
we refer to those sets by their size. We aim to classify images
within 14 classes, e.g. t-shirt, suit, vest. In the original work
two AlexNets are trained together via EM; the networks
are pre-trained with ImageNet. Two practical tricks are
fundamental: a ﬁrst learning phase with the clean 50k to
help EM (#1 in Table 3) and a second phase with the mix of
50k bootstrapped to 500k and 1M (#3). Data augmentation
is also applied, same as in Section 5.1 for CIFAR-10.
We learn a 50-layer ResNet pre-trained on ImageNet —
the bottleneck architecture of — with SGD with learning rate 10−3 and 10−4 for 5 epochs each, 0.9 momentum,
and batch size 32. When we train with 50k we use weight
decay of 5 · 10−2 and data augmentation, while with 1M
we use only weight decay of 10−3. The ResNet gives an
uplift of about 2.5% by training with 50k only (#7 vs. #1).
However, the large amount of noisy images is essential to
compete with #3. Instead of estimating the matrix T by
(12)-(13), we exploit the curated labels of 50k and their
noisy versions in 1M. Forward and backward corrections
are conﬁrmed to work better than cross-entropy (#6, #5
vs. #4), yet cannot reach the state of the art without the
additional clean data. Thus, we ﬁne tune the networks with
50k, with the same learning parameters as in #7; due to
MNIST, fully connected
CIFAR-10, 14-layer ResNet
SYMM. N = 0.2
ASYMM. N = 0.2
ASYMM. N = 0.6
SYMM. N = 0.2
ASYMM. N = 0.2
ASYMM. N = 0.6
cross-entropy
97.9 ± 0.0
96.9 ± 0.1
97.5 ± 0.0
53.0 ± 0.6
unhinged (BN)
97.6 ± 0.0
96.9 ± 0.1
97.0 ± 0.1
71.2 ± 1.0
sigmoid (BN)
97.2 ± 0.1
93.1 ± 0.2
96.7 ± 0.1
71.4 ± 1.3
97.3 ± 0.0
96.9 ± 0.0
97.0 ± 0.1
51.3 ± 0.4
bootstrap soft
97.9 ± 0.0
96.9 ± 0.0
97.5 ± 0.0
53.0 ± 0.4
bootstrap hard
97.9 ± 0.0
96.8 ± 0.0
97.4 ± 0.0
55.0 ± 1.3
97.9 ± 0.0
96.3 ± 0.1
96.6 ± 1.1
93.0 ± 0.9⋆
backward ˆ
97.9 ± 0.0
96.9 ± 0.0
96.7 ± 0.1
67.4 ± 1.5
97.9 ± 0.0
97.3 ± 0.0⋆
97.7 ± 0.0
97.3 ± 0.0⋆
97.9 ± 0.0
96.9 ± 0.0
97.7 ± 0.0
64.9 ± 4.4
IMBD, word embedding
CIFAR-10, 32-layer ResNet
SYMM. N = 0.1
ASYMM. N = 0.1
ASYMM. N = 0.4
SYMM. N = 0.2
ASYMM. N = 0.2
ASYMM. N = 0.6
cross-entropy
86.7 ± 0.0
84.6 ± 0.1
85.0 ± 0.2
58.1 ± 0.5
unhinged (BN)
83.3 ± 0.0
76.9 ± 0.5
80.6 ± 0.3
72.9 ± 0.4
sigmoid (BN)
84.3 ± 0.0
80.2 ± 0.3
81.7 ± 0.5
72.8 ± 0.6
86.5 ± 0.0
84.3 ± 0.4
85.2 ± 0.3
58.3 ± 1.0
bootstrap soft
86.7 ± 0.0
84.5 ± 0.1
85.1 ± 0.1
57.8 ± 0.7
bootstrap hard
86.7 ± 0.0
84.6 ± 0.3
85.1 ± 0.3
59.0 ± 0.6
86.7 ± 0.0
85.3 ± 0.3⋆
85.7 ± 0.1
82.1 ± 0.1⋆
backward ˆ
87.0 ± 0.0†
85.1 ± 0.4
85.8 ± 0.2
77.0 ± 1.4
86.7 ± 0.0
85.3 ± 0.2⋆
85.9 ± 0.1
80.9 ± 1.3⋆
87.0 ± 0.0†
85.2 ± 0.3
85.9 ± 0.2
73.0 ± 1.2
IMBD, word embedding + LSTM
CIFAR-100, 44-layer ResNet
SYMM. N = 0.1
ASYMM. N = 0.1
ASYMM. N = 0.4
SYMM. N = 0.2
ASYMM. N = 0.2
ASYMM. N = 0.6
cross-entropy
87.8 ± 0.4
85.2 ± 0.5
86.8 ± 0.4
71.4 ± 1.3
unhinged (BN)
84.3 ± 4.4
69.7 ± 15.9
85.2 ± 1.2
59.4 ± 12.9
sigmoid (BN)
87.7 ± 0.5
77.6 ± 13.6
86.3 ± 3.1
70.0 ± 14.6
87.4 ± 0.3
85.1 ± 0.6
87.2 ± 0.3
70.4 ± 3.8
bootstrap soft
87.1 ± 0.6
83.5 ± 2.5
86.1 ± 1.2
69.0 ± 5.3
bootstrap hard
86.5 ± 0.5
84.3 ± 1.0
86.7 ± 0.4
71.8 ± 3.3
87.6 ± 0.2
84.3 ± 0.9
86.7 ± 0.5
83.6 ± 1.4
backward ˆ
87.2 ± 0.7
82.8 ± 2.7
87.3 ± 0.1
82.3 ± 1.7
87.5 ± 0.2
85.0 ± 0.2
87.0 ± 0.4
84.7 ± 0.6⋆
87.8 ± 1.5†
84.1 ± 1.0
87.5 ± 0.2
84.2 ± 0.9
Table 2: Average accuracy with standard deviation (5 runs, left part) is bold faced when statistically far from the others, by
means of passing a Welch’s t-test with p-value < 5%; in case the highest accuracy is due to ℓ←or ℓ→with the ground truth T,
we denote those by ⋆and highlight the next highest accuracy as well. For experiments with no standard deviation (right part),
the same rule is applied, but bold face is given to the all accuracies in a range of 0.5 points from the highest. The meaning
of N depends on symmetric vs. asymmetric noise and on number of classes (see Section 5.1). On the ﬁrst columns with no
injected noise, † indicates when the noise estimation recovers some natural noise and beats “loss correction” with T = I.
Clothing1M
AlexNet 
AlexNet 
Table 3: Results on the top section are from . In #2, #3
the clean 50k are bootstrapped to 500k. Best result #8 is
obtained by ﬁne tuning a net trained with forward correction.
reasons of time we only tune #6. The new state of the art is
#8 that outperforms of more than 2 percent, which is
achieved without time consuming bootstrapping of the 50k.
6. Discussion and Conclusion
We have proposed a framework for training deep neural
networks with noisy labels that boils down to two loss corrections. Accuracy is consistently only few percent points away
from training cross-entropy on clean data, while corruption
can worsen performance of cross-entropy by 40 percent or
more. Forward correction often performs better. We believe
the reason is not statistical — Theorems 1 and 2 guarantee
optimality, in the limit of inﬁnite data. The cause may be
either numerical (via matrix inversion) or a drastic change of
the loss (in particular its Hessian), which may have a detrimental effect on optimization. Indeed, backward correction
is a linear combination of losses for every possible label,
with coefﬁcients that can be far by orders of magnitude and
thus makes the learning harder. Instead, forward correction
projects predictions into a probability distribution in .
The quality of noise estimation is a key factor for obtaining robustness. In practice, it works well in most experiments
with a median drop of only 10 points of accuracy with respect to using the true T. The exception is the last column
for CIFAR-100, where estimation destroys most of the gain
from loss correction. We believe that the mix of high noise
and limited number of images per class (500) is detrimental
to the estimator. This is conﬁrmed by the sensitivity of α.
Future work shall improve the estimation phase by incorporating priors of the noise structure, for example assuming
low rank T. Improvements on this direction may also widen
the applicability to massively multi-class scenarios.
remains an open question whether instance-dependent noise
may be included into our approach . Finally, we
anticipate the use of our approach as a tool for pre-training
models with noisy data from the Web, in the spirit of .
Acknowledgments. We gratefully acknowledge NVIDIA
Corporation for the donation of a Tesla K40 GPU. We also
thank the developers of Keras .