Large-scale Video Classiﬁcation with Convolutional Neural Networks
Andrej Karpathy1,2
George Toderici1
Sanketh Shetty1
 
 
 
Thomas Leung1
Rahul Sukthankar1
Li Fei-Fei2
 
 
 
1Google Research
2Computer Science Department, Stanford University
 
Convolutional Neural Networks (CNNs) have been established as a powerful class of models for image recognition problems.
Encouraged by these results, we provide an extensive empirical evaluation of CNNs on largescale video classiﬁcation using a new dataset of 1 million
YouTube videos belonging to 487 classes. We study multiple approaches for extending the connectivity of the a CNN
in time domain to take advantage of local spatio-temporal
information and suggest a multiresolution, foveated architecture as a promising way of speeding up the training.
Our best spatio-temporal networks display signiﬁcant performance improvements compared to strong feature-based
baselines (55.3% to 63.9%), but only a surprisingly modest improvement compared to single-frame models (59.3%
to 60.9%). We further study the generalization performance
of our best model by retraining the top layers on the UCF-
101 Action Recognition dataset and observe signiﬁcant performance improvements compared to the UCF-101 baseline
model (63.3% up from 43.9%).
1. Introduction
Images and videos have become ubiquitous on the internet, which has encouraged the development of algorithms that can analyze their semantic content for various applications, including search and summarization. Recently, Convolutional Neural Networks (CNNs) have
been demonstrated as an effective class of models for understanding image content, giving state-of-the-art results
on image recognition, segmentation, detection and retrieval
 . The key enabling factors behind these
results were techniques for scaling up the networks to tens
of millions of parameters and massive labeled datasets that
can support the learning process. Under these conditions,
CNNs have been shown to learn powerful and interpretable
image features . Encouraged by positive results in domain of images, we study the performance of CNNs in
large-scale video classiﬁcation, where the networks have
access to not only the appearance information present in
single, static images, but also their complex temporal evolution. There are several challenges to extending and applying
CNNs in this setting.
From a practical standpoint, there are currently no video
classiﬁcation benchmarks that match the scale and variety
of existing image datasets because videos are signiﬁcantly
more difﬁcult to collect, annotate and store. To obtain sufﬁcient amount of data needed to train our CNN architectures,
we collected a new Sports-1M dataset, which consists of 1
million YouTube videos belonging to a taxonomy of 487
classes of sports. We make Sports-1M available to the research community to support future work in this area.
From a modeling perspective, we are interested in answering the following questions: what temporal connectivity pattern in a CNN architecture is best at taking advantage
of local motion information present in the video? How does
the additional motion information inﬂuence the predictions
of a CNN and how much does it improve performance overall? We examine these questions empirically by evaluating
multiple CNN architectures that each take a different approach to combining information across the time domain.
From a computational perspective, CNNs require extensively long periods of training time to effectively optimize
the millions of parameters that parametrize the model. This
difﬁculty is further compounded when extending the connectivity of the architecture in time because the network
must process not just one image but several frames of video
at a time. To mitigate this issue, we show that an effective approach to speeding up the runtime performance of
CNNs is to modify the architecture to contain two separate
streams of processing: a context stream that learns features
on low-resolution frames and a high-resolution fovea stream
that only operates on the middle portion of the frame. We
observe a 2-4x increase in runtime performance of the network due to the reduced dimensionality of the input, while
retaining the classiﬁcation accuracy.
Finally, a natural question that arises is whether features
learned on the Sports-1M dataset are generic enough to
generalize to a different, smaller dataset. We investigate
the transfer learning problem empirically, achieving signiﬁcantly better performance (65.4%, up from 41.3%) on
UCF-101 by re-purposing low-level features learned on the
Sports-1M dataset than by training the entire network on
UCF-101 alone. Furthermore, since only some classes in
UCF-101 are related to sports, we can quantify the relative
improvements of the transfer learning in both settings.
Our contributions can be summarized as follows:
• We provide extensive experimental evaluation of multiple approaches for extending CNNs into video classiﬁcation on a large-scale dataset of 1 million videos
with 487 categories (which we release as Sports-1M
dataset) and report signiﬁcant gains in performance
over strong feature-based baselines.
• We highlight an architecture that processes input at two
spatial resolutions - a low-resolution context stream
and a high-resolution fovea stream - as a promising
way of improving the runtime performance of CNNs
at no cost in accuracy.
• We apply our networks to the UCF-101 dataset and report signiﬁcant improvement over feature-based stateof-the-art results and baselines established by training
networks on UCF-101 alone.
2. Related Work
The standard approach to video classiﬁcation involves three major stages: First, local visual features that describe a region of the video are extracted either densely or at a sparse set of interest points .
Next, the features get combined into a ﬁxed-sized videolevel description. One popular approach is to quantize all
features using a learned k-means dictionary and accumulate
the visual words over the duration of the video into histograms of varying spatio-temporal positions and extents
 . Lastly, a classiﬁer (such as an SVM) is trained on
the resulting ”bag of words” representation to distinguish
among the visual classes of interest.
Convolutional Neural Networks are a biologicallyinspired class of deep learning models that replace all three
stages with a single neural network that is trained end to
end from raw pixel values to classiﬁer outputs. The spatial structure of images is explicitly taken advantage of for
regularization through restricted connectivity between layers (local ﬁlters), parameter sharing (convolutions) and special local invariance-building neurons (max pooling). Thus,
these architectures effectively shift the required engineering from feature design and accumulation strategies to design of the network connectivity structure and hyperparameter choices. Due to computational constraints, CNNs have
until recently been applied to relatively small scale image
recognition problems (on datasets such as MNIST, CIFAR-
10/100, NORB, and Caltech-101/256), but improvements
on GPU hardware have enabled CNNs to scale to networks
of millions of parameters, which has in turn led to significant improvements in image classiﬁcation , object detection , scene labeling , indoor segmentation 
and house number digit classiﬁcation . Additionally,
features learned by large networks trained on ImageNet
 have been shown to yield state-of-the-art performance
across many standard image recognition datasets when classiﬁed with an SVM, even with no ﬁne-tuning .
Compared to image data domains, there is relatively little work on applying CNNs to video classiﬁcation. Since
all successful applications of CNNs in image domains share
the availability of a large training set, we speculate that this
is partly attributable to lack of large-scale video classiﬁcation benchmarks.
In particular, commonly used datasets
(KTH, Weizmann, UCF Sports, IXMAS, Hollywood 2,
UCF-50) only contain up to few thousand clips and up to
few dozen classes. Even the largest available datasets such
as CCV (9,317 videos and 20 classes) and the recently introduced UCF-101 (13,320 videos and 101 classes) are
still dwarfed by available image datasets in the number of
instances and their variety . Despite these limitations,
some extensions of CNNs into the video domain have been
 and extend an image CNN to video
domains by treating space and time as equivalent dimensions of the input and perform convolutions in both time
and space. We consider these extensions as only one of the
possible generalizations in this work. Unsupervised learning schemes for training spatio-temporal features have also
been developed, based on Convolutional Gated Restricted
Boltzmann Machines and Independent Subspace Analysis . In contrast, our models are trained end to end
fully supervised.
Unlike images which can be cropped and rescaled to a
ﬁxed size, videos vary widely in temporal extent and cannot be easily processed with a ﬁxed-sized architecture. In
this work we treat every video as a bag of short, ﬁxed-sized
clips. Since each clip contains several contiguous frames
in time, we can extend the connectivity of the network in
time dimension to learn spatio-temporal features. There are
multiple options for the precise details of the extended connectivity and we describe three broad connectivity pattern
categories (Early Fusion, Late Fusion and Slow Fusion) below. Afterwards, we describe a multiresolution architecture
for addressing the computational efﬁciency.
Figure 1: Explored approaches for fusing information over
temporal dimension through the network. Red, green and
blue boxes indicate convolutional, normalization and pooling layers respectively. In the Slow Fusion model, the depicted columns share parameters.
3.1. Time Information Fusion in CNNs
We investigate several approaches to fusing information
across temporal domain (Figure 1): the fusion can be done
early in the network by modifying the ﬁrst layer convolutional ﬁlters to extend in time, or it can be done late by
placing two separate single-frame networks some distance
in time apart and fusing their outputs later in the processing. We ﬁrst describe a baseline single-frame CNN and then
discuss its extensions in time according to different types of
Single-frame. We use a single-frame baseline architecture to understand the contribution of static appearance to
the classiﬁcation accuracy. This network is similar to the
ImageNet challenge winning model , but accepts inputs of size 170 × 170 × 3 pixels instead of the original
224 × 224 × 3. Using shorthand notation, the full architecture is C(96, 11, 3)-N-P-C(256, 5, 1)-N-P-C(384, 3, 1)-
C(384, 3, 1)-C(256, 3, 1)-P-FC(4096)-FC(4096), where
C(d, f, s) indicates a convolutional layer with d ﬁlters of
spatial size f ×f, applied to the input with stride s. FC(n)
is a fully connected layer with n nodes. All pooling layers P
pool spatially in non-overlapping 2 × 2 regions and all normalization layers N are deﬁned as described in Krizhevsky
et al. and use the same parameters: k = 2, n = 5, α =
10−4, β = 0.5. The ﬁnal layer is connected to a softmax
classiﬁer with dense connections.
Early Fusion. The Early Fusion extension combines information across an entire time window immediately on the
pixel level. This is implemented by modifying the ﬁlters on
the ﬁrst convolutional layer in the single-frame model by
extending them to be of size 11 × 11 × 3 × T pixels, where
T is some temporal extent (we use T = 10, or approximately a third of a second). The early and direct connectivity to pixel data allows the network to precisely detect local
motion direction and speed.
Late Fusion. The Late Fusion model places two separate single-frame networks (as described above, up to last
convolutional layer C(256, 3, 1) with shared parameters a
distance of 15 frames apart and then merges the two streams
in the ﬁrst fully connected layer. Therefore, neither singleframe tower alone can detect any motion, but the ﬁrst fully
connected layer can compute global motion characteristics
by comparing outputs of both towers.
Slow Fusion.
The Slow Fusion model is a balanced
mix between the two approaches that slowly fuses temporal
information throughout the network such that higher layers get access to progressively more global information in
both spatial and temporal dimensions. This is implemented
by extending the connectivity of all convolutional layers
in time and carrying out temporal convolutions in addition
to spatial convolutions to compute activations, as seen in
 . In the model we use, the ﬁrst convolutional layer is
extended to apply every ﬁlter of temporal extent T = 4 on
an input clip of 10 frames through valid convolution with
stride 2 and produces 4 responses in time. The second and
third layers above iterate this process with ﬁlters of temporal extent T = 2 and stride 2. Thus, the third convolutional
layer has access to information across all 10 input frames.
3.2. Multiresolution CNNs
Since CNNs normally take on orders of weeks to train on
large-scale datasets even on the fastest available GPUs, the
runtime performance is a critical component to our ability
to experiment with different architecture and hyperparameter settings. This motivates approaches for speeding up the
models while still retaining their performance. There are
multiple fronts to these endeavors, including improvements
in hardware, weight quantization schemes, better optimization algorithms and initialization strategies, but in this work
we focus on changes in the architecture that enable faster
running times without sacriﬁcing performance.
One approach to speeding up the networks is to reduce
the number of layers and neurons in each layer, but similar to we found that this consistently lowers the performance. Instead of reducing the size of the network, we
conducted further experiments on training with images of
lower resolution. However, while this improved the running time of the network, the high-frequency detail in the
images proved critical to achieving good accuracy.
Fovea and context streams. The proposed multiresolution architecture aims to strike a compromise by having two
separate streams of processing over two spatial resolutions
(Figure 2). A 178 × 178 frame video clip forms an input
to the network. The context stream receives the downsampled frames at half the original spatial resolution (89 × 89
pixels), while the fovea stream receives the center 89 × 89
region at the original resolution. In this way, the the total
input dimensionality is halved. Notably, this design takes
advantage of the camera bias present in many online videos,
since the object of interest often occupies the center region.
Architecture changes. Both streams are processed by
identical network as the full frame models, but starting at
Figure 2: Multiresolution CNN architecture. Input frames
are fed into two separate streams of processing: a context stream that models low-resolution image and a fovea
stream that processes high-resolution center crop.
streams consist of alternating convolution (red), normalization (green) and pooling (blue) layers. Both streams converge to two fully connected layers (yellow).
89 × 89 clips of video. Since the input is only of half the
spatial size as the full-frame models, we take out the last
pooling layer to ensure that both streams still terminate in a
layer of size 7×7×256. The activations from both streams
are concatenated and fed into the ﬁrst fully connected layer
with dense connections.
3.3. Learning
Optimization. We use Downpour Stochastic Gradient
Descent to optimize our models across a computing
cluster. The number of replicas for each model varies between 10 and 50 and every model is further split across 4
to 32 partitions. We use mini-batches of 32 examples, momentum of 0.9 and weight decay of 0.0005. All models are
initialized with learning rates of 1e−3 and this value is further reduced by hand whenever the validation error stops
improving.
Data augmentation and preprocessing.
 , we take advantage of data augmentation to reduce the
effects of overﬁtting. Before presenting an example to a network, we preprocess all images by ﬁrst cropping to center
region, resizing them to 200 × 200 pixels, randomly sampling a 170 × 170 region, and ﬁnally randomly ﬂipping the
images horizontally with 50% probability. These preprocessing steps are applied consistently to all frames that are
part of the same clip. As a last step of preprocessing we subtract a constant value of 117 from raw pixel values, which
is the approximate value of the mean of all pixels in our
4. Results
We ﬁrst present results on our Sports-1M dataset and
qualitatively analyze the learned features and network predictions.
We then describe our transfer learning experiments on UCF-101.
4.1. Experiments on Sports-1M
Dataset. The Sports-1M dataset consists of 1 million
YouTube videos annotated with 487 classes. The classes
are arranged in a manually-curated taxonomy that contains
internal nodes such as Aquatic Sports, Team Sports, Winter
Sports, Ball Sports, Combat Sports, Sports with Animals,
and generally becomes ﬁne-grained by the leaf level. For
example, our dataset contains 6 different types of bowling,
7 different types of American football and 23 types of billiards.
There are 1000-3000 videos per class and approximately
5% of the videos are annotated with more than one class.
The annotations are produced automatically by analyzing
the text metadata surrounding the videos. Thus, our data is
weakly annotated on two levels: ﬁrst, the label of a video
may be wrong if the tag prediction algorithm fails or if the
provided description does not match the video content, and
second, even when a video is correctly annotated it may still
exhibit signiﬁcant variation on the frame level. For example, a video tagged as soccer may contain several shots of
the scoreboard, interviews, news anchors, the crowd, etc.
We split the dataset by assigning 70% of the videos to
the training set, 10% to a validation set and 20% to a test
set. As YouTube may contain duplicate videos, it is possible that the same video could appear in both the training
and test set. To get an idea about the extent of this problem we processed all videos with a near-duplicate ﬁnding
algorithm on the frame level and determined that only 1755
videos (out of 1 million) contain a signiﬁcant fraction of
near-duplicate frames. Furthermore, since we only use a
random collection of up to 100 half-second clips from every video and our videos are 5 minutes and 36 seconds in
length on average, it is unlikely that the same frames occur
across data splits.
Training. We trained our models over a period of one
month, with models processing approximately 5 clips per
second for full-frame networks and up to 20 clips per second for multiresolution networks on a single model replica.
The rate of 5 clips per second is roughly 20 times slower
than what one could expect from a high-end GPU, but we
expect to reach comparable speeds overall given that we use
10-50 model replicas. We further estimate the size of our
dataset of sampled frames to be on the order of 50 million
examples and that our networks have each seen approximately 500 million examples throughout the training period
Video-level predictions. To produce predictions for an
entire video we randomly sample 20 clips and present each
clip individually to the network. Every clip is propagated
through the network 4 times (with different crops and ﬂips)
Figure 4: Predictions on Sports-1M test data. Blue (ﬁrst row) indicates ground truth label and the bars below show model
predictions sorted in decreasing conﬁdence. Green and red distinguish correct and incorrect predictions, respectively.
Clip Hit@1
Video Hit@1
Video Hit@5
Feature Histograms + Neural Net
Single-Frame
Single-Frame + Multires
Single-Frame Fovea Only
Single-Frame Context Only
Early Fusion
Late Fusion
Slow Fusion
CNN Average (Single+Early+Late+Slow)
Table 1: Results on the 200,000 videos of the Sports-1M test set. Hit@k values indicate the fraction of test samples that
contained at least one of the ground truth labels in the top k predictions.
and the network class predictions are averaged to produce a
more robust estimate of the class probabilities. To produce
video-level predictions we opted for the simplest approach
of averaging individual clip predictions over the durations
of each video. We expect more elaborate techniques to further improve performance but consider these to be outside
of the scope of the paper.
Feature histogram baselines. In addition to comparing
CNN architectures among each other, we also report the accuracy of a feature-based approach. Following a standard
bag-of-words pipeline we extract several types of features
at all frames of our videos, discretize them using k-means
vector quantization and accumulate words into histograms
with spatial pyramid encoding and soft quantization. Every histogram is normalized to sum to 1 and all histograms
are concatenated into a 25,000 dimensional video-level feature vector. Our features are similar to Yang & Toderici
 and consist of local features (HOG , Texton ,
Cuboids , etc.)
extracted both densely and at sparse
interest points, as well as global features (such as Hue-
Saturation, Color moments, number of faces detected). As
a classiﬁer we use a multilayer neural network with Rectiﬁed Linear Units followed by a Softmax classiﬁer. We
found that a multilayer network performs consistently and
signiﬁcantly better than linear models on separate validation
experiments. Furthermore, we performed extensive crossvalidations across many of the network’s hyperparameters
by training multiple models and choosing the one with best
performance on a validation set. The tuned hyper parameters include the learning rate, weight decay, the number of
hidden layers (between 1-2), dropout probabilities and the
Figure 5: Examples that illustrate qualitative differences between single-frame network and Slow Fusion (motion-aware)
network in the same color scheme as Figure 4. A few classes are easier to disambiguate with motion information (left three).
Figure 3: Filters learned on ﬁrst layer of a multiresolution
network. Left: context stream, Right: fovea stream. Notably, the fovea stream learns grayscale, high-frequency features while the context stream models lower frequencies and
colors. GIFs of moving video features can be found on our
website (linked on ﬁrst page).
number of nodes in all layers.
Quantitative results.
The results for the Sports-1M
dataset test set, which consists of 200,000 videos and
4,000,000 clips, are summarized in Table 1.
seen from the table, our networks consistently and significantly outperform the feature-based baseline. We emphasize that the feature-based approach computes visual words
densely over the duration of the video and produces predictions based on the entire video-level feature vector, while
our networks only see 20 randomly sampled clips individually. Moreover, our networks seem to learn well despite
signiﬁcant label noise: the training videos are subject to
incorrect annotations and even the correctly-labeled videos
often contain a large amount of artifacts such as text, effects, cuts, and logos, none of which we attempted to ﬁlter
out explicitly.
Compared to the wide gap relative to the feature-based
baseline, the variation among different CNN architectures
turns out to be surprisingly insigniﬁcant.
Notably, the
single-frame model already displays strong performance.
Furthermore, we observe that the foveated architectures are
between 2-4× faster in practice due to reduced input dimensionality. The precise speedups are in part a function of the
details of model partitioning and our implementation, but in
our experiments we observe a speedup during training of 6
to 21 clips per second (3.5x) for the single-frame model and
5 to 10 clips per second (2x) for the Slow Fusion model.
Contributions of motion. We conduct further exper-
Sports class
Sports class
Juggling Club
Short Track Motor Racing
Pole Climbing
Road Racing
Mountain Unicycling
Jeet Kune Do
Skipping Rope
Rope Climbing
Slacklining
Modern Pentathlon
Sheepdog Trial
Rally Cross
Table 2: Classes for which a (motion-aware) Slow Fusion
CNN performs better than the single-frame CNN (left) and
vice versa (right), as measured by difference in per-class
average precision.
iments to understand the differences between the singleframe network and networks that have access to motion information. We choose the Slow Fusion network as a representative motion-aware network because it performs best.
We compute and compare the per-class average precision
for all Sports classes and highlight the ones that exhibit
largest differences (Table 2). Manually inspecting some of
the associated clips (Figure 5), we qualitatively observe that
the motion-aware network clearly beneﬁts from motion information in some cases, but these seem to be relatively uncommon. On the other hand, balancing the improvements
from access to motion information, we observe that motionaware networks are more likely to underperform when there
is camera motion present. We hypothesize that the CNNs
struggle to learn complete invariance across all possible angles and speeds of camera translation and zoom.
Qualitative analysis. Our learned features for the ﬁrst
convolutional layer can be inspected on Figure 3.
Interestingly, the context stream learns more color features
while the high-resolution fovea stream learns high frequency grayscale ﬁlters.
As can be seen on Figure 4, our networks produce interpretable predictions and generally make reasonable mistakes. Further analysis of the confusion matrix (attached
in the supplementary material) reveals that most errors are
among the ﬁne-grained classes of our dataset. For example, the top 5 most commonly confused pairs of classes are
deer hunting vs. hunting, hiking vs. backpacking, powered
paragliding vs. paragliding, sledding vs. toboggan, and bujinkan vs. ninjutsu.
3-fold Accuracy
Soomro et al 
Feature Histograms + Neural Net
Train from scratch
Fine-tune top layer
Fine-tune top 3 layers
Fine-tune all layers
Table 3: Results on UCF-101 for various Transfer Learning
approaches using the Slow Fusion network.
4.2. Transfer Learning Experiments on UCF-101
The results of our analysis on the Sports-1M dataset indicate that the networks learn powerful motion features. A
natural question that arises is whether these features also
generalize to other datasets and class categories. We examine this question in detail by performing transfer learning experiments on the UCF-101 Activity Recognition
dataset. The dataset consists of 13,320 videos belonging
to 101 categories that are separated into 5 broad groups:
Human-Object interaction (Applying eye makeup, brushing teeth, hammering, etc.), Body-Motion (Baby crawling,
push ups, blowing candles, etc.), Human-Human interaction (Head massage, salsa spin, haircut, etc.), Playing Instruments (ﬂute, guitar, piano, etc.) and Sports. This grouping allows us to separately study the performance improvements on Sports classes relative to classes from unrelated
videos that are less numerous in our training data.
Transfer learning. Since we expect that CNNs learn
more generic features on the bottom of the network (such
as edges, local shapes) and more intricate, dataset-speciﬁc
features near the top of the network, we consider the following scenarios for our transfer learning experiments:
Fine-tune top layer. We treat the CNN as a ﬁxed feature
extractor and train a classiﬁer on the last 4096-dimensional
layer, with dropout regularization. We found that as little as
10% chance of keeping each unit active to be effective.
Fine-tune top 3 layers. Instead of only retraining the ﬁnal classiﬁer layer, we consider also retraining both fully
connected layers. We initialize with a fully trained Sports
CNN and then begin training the top 3 layers. We introduce dropout before all trained layers, with as little as 10%
chance of keeping units active.
Fine-tune all layers. In this scenario we retrain all network parameters, including all convolutional layers on the
bottom of the network.
Train from scratch. As a baseline we train the full network from scratch on UCF-101 alone.
Results. To prepare UCF-101 data for classiﬁcation we
sampled 50 clips from every video and followed the same
evaluation protocol as for Sports across the 3 suggested
folds. We reached out to the authors of to obtain the
YouTube video IDs of UCF-101 videos, but unfortunately
Human-Object Interaction
Body-Motion Only
Human-Human Interaction
Playing Musical Instruments
All groups
Table 4: Mean Average Precision of the Slow Fusion network on UCF-101 classes broken down by category groups.
these were not available and hence we cannot guarantee that
the Sports-1M dataset has no overlap with UCF-101. However, these concerns are somewhat mitigated as we only use
a few sampled clips from every video.
We use the Slow Fusion network in our UCF-101 experiments as it provides the best performance on Sports-1M.
The results of the experiments can be seen on Table 3. Interestingly, retraining the softmax layer alone does not perform best (possibly because the high-level features are too
speciﬁc to sports) and the other extreme of ﬁne-tuning all
layers is also not adequate (likely due to overﬁtting). Instead, the best performance is obtained by taking a balanced
approach and retraining the top few layers of the network.
Lastly, training the entire network from scratch consistently
leads to massive overﬁtting and dismal performance.
Performance by group. We further break down our performance by 5 broad groups of classes present in the UCF-
101 dataset. We compute the average precision of every
class and then compute the mean average precision over
classes in each group. As can be seen from Table 4, large
fractions of our performance can be attributed to the Sports
categories in UCF-101, but the other groups still display impressive performance considering that the only way to observe these types of frames in the training data is due to label
noise. Moreover, the gain in performance when retraining
only the top to retraining the top 3 layers is almost entirely
due to improvements on non-Sports categories: Sports performance only decreases from 0.80 to 0.79, while mAP improves on all other categories.
5. Conclusions
We studied the performance of convolutional neural networks in large-scale video classiﬁcation.
We found that
CNN architectures are capable of learning powerful features from weakly-labeled data that far surpass featurebased methods in performance and that these beneﬁts are
surprisingly robust to details of the connectivity of the architectures in time. Qualitative examination of network outputs and confusion matrices reveals interpretable errors.
Our results indicate that while the performance is not
particularly sensitive to the architectural details of the connectivity in time, a Slow Fusion model consistently performs better than the early and late fusion alternatives. Surprisingly, we ﬁnd that a single-frame model already displays very strong performance, suggesting that local motion
cues may not be critically important, even for a dynamic
dataset such as Sports. An alternative theory is that more
careful treatment of camera motion may be necessary (for
example by extracting features in the local coordinate system of a tracked point, as seen in ), but this requires
signiﬁcant changes to a CNN architecture that we leave for
future work. We also identiﬁed mixed-resolution architectures that consist of a low-resolution context and a highresolution fovea stream as an effective way of speeding up
CNNs without sacriﬁcing accuracy.
Our transfer learning experiments on UCF-101 suggest
that the learned features are generic and generalize other
video classiﬁcation tasks. In particular, we achieved the
highest transfer learning performance by retraining the top
3 layers of the network.
In future work we hope to incorporate broader categories
in the dataset to obtain more powerful and generic features, investigate approaches that explicitly reason about
camera motion, and explore recurrent neural networks as
a more powerful technique for combining clip-level predictions into global video-level predictions.
Acknowledgments: We thank Saurabh Singh, Abhinav
Shrivastava, Jay Yagnik, Alex Krizhevsky, Quoc Le, Jeff
Dean and Rajat Monga for helpful discussions.