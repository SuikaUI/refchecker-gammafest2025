Context Encoders: Feature Learning by Inpainting
Deepak Pathak
Philipp Kr¨ahenb¨uhl
Jeff Donahue
Trevor Darrell
Alexei A. Efros
University of California, Berkeley
{pathak,philkr,jdonahue,trevor,efros}@cs.berkeley.edu
We present an unsupervised visual feature learning algorithm driven by context-based pixel prediction. By analogy
with auto-encoders, we propose Context Encoders – a convolutional neural network trained to generate the contents
of an arbitrary image region conditioned on its surroundings.
In order to succeed at this task, context encoders
need to both understand the content of the entire image,
as well as produce a plausible hypothesis for the missing
part(s). When training context encoders, we have experimented with both a standard pixel-wise reconstruction loss,
as well as a reconstruction plus an adversarial loss. The
latter produces much sharper results because it can better
handle multiple modes in the output. We found that a context encoder learns a representation that captures not just
appearance but also the semantics of visual structures. We
quantitatively demonstrate the effectiveness of our learned
features for CNN pre-training on classiﬁcation, detection,
and segmentation tasks. Furthermore, context encoders can
be used for semantic inpainting tasks, either stand-alone or
as initialization for non-parametric methods.
1. Introduction
Our visual world is very diverse, yet highly structured,
and humans have an uncanny ability to make sense of this
structure. In this work, we explore whether state-of-the-art
computer vision algorithms can do the same. Consider the
image shown in Figure 1a. Although the center part of the
image is missing, most of us can easily imagine its content
from the surrounding pixels, without having ever seen that
exact scene. Some of us can even draw it, as shown on Figure 1b. This ability comes from the fact that natural images,
despite their diversity, are highly structured (e.g. the regular
pattern of windows on the facade). We humans are able to
understand this structure and make visual predictions even
when seeing only parts of the scene. In this paper, we show
The code, trained models and more inpainting results are available at
the author’s project website.
(a) Input context
(b) Human artist
(c) Context Encoder
(d) Context Encoder
(L2 + Adversarial loss)
Figure 1: Qualitative illustration of the task. Given an image with a missing region (a), a human artist has no trouble
inpainting it (b). Automatic inpainting using our context
encoder trained with L2 reconstruction loss is shown in (c),
and using both L2 and adversarial losses in (d).
that it is possible to learn and predict this structure using
convolutional neural networks (CNNs), a class of models
that have recently shown success across a variety of image
understanding tasks.
Given an image with a missing region (e.g., Fig. 1a), we
train a convolutional neural network to regress to the missing pixel values (Fig. 1d). We call our model context encoder, as it consists of an encoder capturing the context of
an image into a compact latent feature representation and a
decoder which uses that representation to produce the missing image content. The context encoder is closely related to
autoencoders , as it shares a similar encoder-decoder
architecture.
Autoencoders take an input image and try
 
to reconstruct it after it passes through a low-dimensional
“bottleneck” layer, with the aim of obtaining a compact feature representation of the scene. Unfortunately, this feature
representation is likely to just compresses the image content
without learning a semantically meaningful representation.
Denoising autoencoders address this issue by corrupting the input image and requiring the network to undo the
damage. However, this corruption process is typically very
localized and low-level, and does not require much semantic information to undo. In contrast, our context encoder
needs to solve a much harder task: to ﬁll in large missing
areas of the image, where it can’t get “hints” from nearby
pixels. This requires a much deeper semantic understanding
of the scene, and the ability to synthesize high-level features
over large spatial extents. For example, in Figure 1a, an entire window needs to be conjured up “out of thin air.” This
is similar in spirit to word2vec which learns word representation from natural language sentences by predicting a
word given its context.
Like autoencoders, context encoders are trained in a
completely unsupervised manner. Our results demonstrate
that in order to succeed at this task, a model needs to both
understand the content of an image, as well as produce a
plausible hypothesis for the missing parts. This task, however, is inherently multi-modal as there are multiple ways
to ﬁll the missing region while also maintaining coherence
with the given context. We decouple this burden in our loss
function by jointly training our context encoders to minimize both a reconstruction loss and an adversarial loss. The
reconstruction (L2) loss captures the overall structure of the
missing region in relation to the context, while the the adversarial loss has the effect of picking a particular mode
from the distribution. Figure 1 shows that using only the reconstruction loss produces blurry results, whereas adding
the adversarial loss results in much sharper predictions.
We evaluate the encoder and the decoder independently.
On the encoder side, we show that encoding just the context of an image patch and using the resulting feature to
retrieve nearest neighbor contexts from a dataset produces
patches which are semantically similar to the original (unseen) patch. We further validate the quality of the learned
feature representation by ﬁne-tuning the encoder for a variety of image understanding tasks, including classiﬁcation, object detection, and semantic segmentation.
are competitive with the state-of-the-art unsupervised/selfsupervised methods on those tasks. On the decoder side, we
show that our method is often able to ﬁll in realistic image
content. Indeed, to the best of our knowledge, ours is the
ﬁrst parametric inpainting algorithm that is able to give reasonable results for semantic hole-ﬁlling (i.e. large missing
regions). The context encoder can also be useful as a better visual feature for computing nearest neighbors in nonparametric inpainting methods.
2. Related work
Computer vision has made tremendous progress on semantic image understanding tasks such as classiﬁcation, object detection, and segmentation in the past decade. Recently, Convolutional Neural Networks (CNNs) 
have greatly advanced the performance in these tasks . The success of such models on image classiﬁcation
paved the way to tackle harder problems, including unsupervised understanding and generation of natural images.
We brieﬂy review the related work in each of the sub-ﬁelds
pertaining to this paper.
Unsupervised learning
CNNs trained for ImageNet 
classiﬁcation with over a million labeled examples learn
features which generalize very well across tasks . However, whether such semantically informative and generalizable features can be learned from raw images alone,
without any labels, remains an open question.
the earliest work in deep unsupervised learning are autoencoders . Along similar lines, denoising autoencoders reconstruct the image from local corruptions, to
make encoding robust to such corruptions. While context
encoders could be thought of as a variant of denoising autoencoders, the corruption applied to the model’s input is
spatially much larger, requiring more semantic information
Weakly-supervised and self-supervised learning
recently, there has been signiﬁcant interest in learning
meaningful representations using weakly-supervised and
self-supervised learning. One useful source of supervision
is to use the temporal information contained in videos. Consistency across temporal frames has been used as supervision to learn embeddings which perform well on a number of tasks . Another way to use consistency is to
track patches in frames of video containing task-relevant attributes and use the coherence of tracked patches to guide
the training . Ego-motion read off from non-vision sensors has been used as supervisory signal to train visual features et al. .
Most closely related to the present paper are efforts at
exploiting spatial context as a source of free and plentiful
supervisory signal. Visual Memex used context to nonparametrically model object relations and to predict masked
objects in scenes, while used context to establish correspondences for unsupervised object discovery. However,
both approaches relied on hand-designed features and did
not perform any representation learning. Recently, Doersch et al. used the task of predicting the relative positions
of neighboring patches within an image as a way to train
an unsupervised deep feature representations. We share the
same high-level goals with Doersch et al. but fundamentally
differ in the approach: whereas are solving a discriminative task (is patch A above patch B or below?), our context
encoder solves a pure prediction problem (what pixel intensities should go in the hole?). Interestingly, similar distinction exist in using language context to learn word embeddings: Collobert and Weston advocate a discriminative
approach, whereas word2vec formulate it as word prediction. One important beneﬁt of our approach is that our
supervisory signal is much richer: a context encoder needs
to predict roughly 15,000 real values per training example,
compared to just 1 option among 8 choices in . Likely
due in part to this difference, our context encoders take far
less time to train than . Moreover, context based prediction is also harder to “cheat” since low-level image features,
such as chromatic aberration, do not provide any meaningful information, in contrast to where chromatic aberration partially solves the task. On the other hand, it is not yet
clear if requiring faithful pixel generation is necessary for
learning good visual features.
Image generation
Generative models of natural images
have enjoyed signiﬁcant research interest . Recently, Radford et al. proposed new convolutional architectures and optimization hyperparameters for Generative Adversarial Networks (GAN) producing encouraging results. We train our context encoders using an adversary jointly with reconstruction loss for generating inpainting results. We discuss this in detail in Section 3.2.
Dosovitskiy et al. and Rifai et al. demonstrate
that CNNs can learn to generate novel images of particular
object categories (chairs and faces, respectively), but rely on
large labeled datasets with examples of these categories. In
contrast, context encoders can be applied to any unlabeled
image database and learn to generate images based on the
surrounding context.
Inpainting and hole-ﬁlling
It is important to point out
that our hole-ﬁlling task cannot be handled by classical inpainting or texture synthesis
 approaches,
since the missing region is too large for local non-semantic
methods to work well. In computer graphics, ﬁlling in large
holes is typically done via scene completion , involving a cut-paste formulation using nearest neighbors from a
dataset of millions of images. However, scene completion
is meant for ﬁlling in holes left by removing whole objects,
and it struggles to ﬁll arbitrary holes, e.g. amodal completion of partially occluded objects. Furthermore, previous
completion relies on a hand-crafted distance metric, such as
Gist for nearest-neighbor computation which is inferior to a learned distance metric. We show that our method
is often able to inpaint semantically meaningful content in
a parametric fashion, as well as provide a better feature for
nearest neighbor-based inpainting methods.
Figure 2: Context Encoder. The context image is passed
through the encoder to obtain features which are connected
to the decoder using channel-wise fully-connected layer as
described in Section 3.1. The decoder then produces the
missing regions in the image.
3. Context encoders for image generation
We now introduce context encoders: CNNs that predict
missing parts of a scene from their surroundings. We ﬁrst
give an overview of the general architecture, then provide
details on the learning procedure and ﬁnally present various
strategies for image region removal.
3.1. Encoder-decoder pipeline
The overall architecture is a simple encoder-decoder
pipeline. The encoder takes an input image with missing
regions and produces a latent feature representation of that
image. The decoder takes this feature representation and
produces the missing image content. We found it important
to connect the encoder and the decoder through a channelwise fully-connected layer, which allows each unit in the
decoder to reason about the entire image content. Figure 2
shows an overview of our architecture.
Our encoder is derived from the AlexNet architecture . Given an input image of size 227×227, we use
the ﬁrst ﬁve convolutional layers and the following pooling
layer (called pool5) to compute an abstract 6 × 6 × 256
dimensional feature representation. In contrast to AlexNet,
our model is not trained for ImageNet classiﬁcation; rather,
the network is trained for context prediction “from scratch”
with randomly initialized weights.
However, if the encoder architecture is limited only to
convolutional layers, there is no way for information to directly propagate from one corner of the feature map to another. This is so because convolutional layers connect all
the feature maps together, but never directly connect all locations within a speciﬁc feature map. In the present architectures, this information propagation is handled by fullyconnected or inner product layers, where all the activations
are directly connected to each other. In our architecture, the
latent feature dimension is 6 × 6 × 256 = 9216 for both
encoder and decoder. This is so because, unlike autoencoders, we do not reconstruct the original input and hence
need not have a smaller bottleneck. However, fully connecting the encoder and decoder would result in an explosion in
the number of parameters (over 100M!), to the extent that
efﬁcient training on current GPUs would be difﬁcult. To
alleviate this issue, we use a channel-wise fully-connected
layer to connect the encoder features to the decoder, described in detail below.
Channel-wise fully-connected layer
This layer is essentially a fully-connected layer with groups, intended to propagate information within activations of each feature map. If
the input layer has m feature maps of size n × n, this layer
will output m feature maps of dimension n × n. However,
unlike a fully-connected layer, it has no parameters connecting different feature maps and only propagates information
within feature maps. Thus, the number of parameters in
this channel-wise fully-connected layer is mn4, compared
to m2n4 parameters in a fully-connected layer (ignoring the
bias term). This is followed by a stride 1 convolution to
propagate information across channels.
We now discuss the second half of our pipeline,
the decoder, which generates pixels of the image using
the encoder features.
The “encoder features” are connected to the “decoder features” using a channel-wise fullyconnected layer.
The channel-wise fully-connected layer is followed by
a series of ﬁve up-convolutional layers with
learned ﬁlters, each with a rectiﬁed linear unit (ReLU) activation function. A up-convolutional is simply a convolution
that results in a higher resolution image. It can be understood as upsampling followed by convolution (as described
in ), or convolution with fractional stride (as described
in ). The intuition behind this is straightforward – the
series of up-convolutions and non-linearities comprises a
non-linear weighted upsampling of the feature produced by
the encoder until we roughly reach the original target size.
3.2. Loss function
We train our context encoders by regressing to the
ground truth content of the missing (dropped out) region.
However, there are often multiple equally plausible ways to
ﬁll a missing image region which are consistent with the
context. We model this behavior by having a decoupled
joint loss function to handle both continuity within the context and multiple modes in the output. The reconstruction
(L2) loss is responsible for capturing the overall structure of
the missing region and coherence with regards to its context,
but tends to average together the multiple modes in predictions. The adversarial loss , on the other hand, tries
to make prediction look real, and has the effect of picking a
particular mode from the distribution. For each ground truth
(a) Central region
(b) Random block
(c) Random region
Figure 3: An example of image x with our different region
M applied, as described in Section 3.3.
image x, our context encoder F produces an output F(x).
M be a binary mask corresponding to the dropped image region with a value of 1 wherever a pixel was dropped
and 0 for input pixels. During training, those masks are automatically generated for each image and training iterations,
as described in Section 3.3. We now describe different components of our loss function.
Reconstruction Loss
We use a normalized masked L2
distance as our reconstruction loss function, Lrec,
Lrec(x) = ∥ˆ
M ⊙(x −F((1 −ˆ
where ⊙is the element-wise product operation. We experimented with both L1 and L2 losses and found no signiﬁcant
difference between them. While this simple loss encourages the decoder to produce a rough outline of the predicted
object, it often fails to capture any high frequency detail
(see Fig. 1c). This stems from the fact that the L2 (or L1)
loss often prefer a blurry solution, over highly accurate textures. We believe this happens because it is much “safer”
for the L2 loss to predict the mean of the distribution, because this minimizes the mean pixel-wise error, but results
in a blurry averaged image. We alleviated this problem by
adding an adversarial loss.
Adversarial Loss
Our adversarial loss is based on Generative Adversarial Networks (GAN) . To learn a generative model G of a data distribution, GAN proposes to jointly
learn an adversarial discriminative model D to provide loss
gradients to the generative model. G and D are parametric functions (e.g., deep networks) where G : Z →X
maps samples from noise distribution Z to data distribution
X. The learning procedure is a two-player game where an
adversarial discriminator D takes in both the prediction of
G and ground truth samples, and tries to distinguish them,
while G tries to confuse D by producing samples that appear as “real” as possible. The objective for discriminator is
logistic likelihood indicating whether the input is real sam-
Figure 4: Semantic Inpainting results on held-out images for context encoder trained using reconstruction and adversarial
loss. First three rows are examples from ImageNet, and bottom two rows are from Paris StreetView Dataset. See more results
on author’s project website.
ple or predicted one:
Ex∈X [log(D(x))] + Ez∈Z[log(1 −D(G(z)))]
This method has recently shown encouraging results in
generative modeling of images . We thus adapt this
framework for context prediction by modeling generator by
context encoder; i.e., G ≜F. To customize GANs for this
task, one could condition on the given context information;
i.e., the mask ˆ
M ⊙x. However, conditional GANs don’t
train easily for context prediction task as the adversarial discriminator D easily exploits the perceptual discontinuity in
generated regions and the original context to easily classify
predicted versus real samples. We thus use an alternate formulation, by conditioning only the generator (not the discriminator) on context.
We also found results improved
when the generator was not conditioned on a noise vector.
Hence the adversarial loss for context encoders, Ladv, is
Ladv = max
Ex∈X [log(D(x))
+ log(1 −D(F((1 −ˆ
M) ⊙x)))],
where, in practice, both F and D are optimized jointly using alternating SGD. Note that this objective encourages the
entire output of the context encoder to look realistic, not just
the missing regions as in Equation (1).
Joint Loss
We deﬁne the overall loss function as
L = λrecLrec + λadvLadv.
Currently, we use adversarial loss only for inpainting experiments as AlexNet architecture training diverged with
joint adversarial loss. Details follow in Sections 5.1, 5.2.
3.3. Region masks
The input to a context encoder is an image with one or
more of its regions “dropped out”; i.e., set to zero, assuming
zero-centered inputs. The removed regions could be of any
shape, we present three different strategies here:
Central region The simplest such shape is the central
square patch in the image, as shown in Figure 3a. While this
works quite well for inpainting, the network learns low level
image features that latch onto the boundary of the central
mask. Those low level image features tend not to generalize
well to images without masks, hence the features learned
are not very general.
Input Context
Context Encoder Content-Aware Fill
Figure 5: Comparison with Content-Aware Fill (Photoshop
feature based on ) on held-out images.
Our method
works better in semantic cases (top row) and works slightly
worse in textured settings (bottom row).
Random block To prevent the network from latching on
the the constant boundary of the masked region, we randomize the masking process. Instead of choosing a single large mask at a ﬁxed location, we remove a number of
smaller possibly overlapping masks, covering up to 1
image. An example of this is shown in Figure 3b. However, the random block masking still has sharp boundaries
convolutional features could latch onto.
Random region To completely remove those boundaries, we experimented with removing arbitrary shapes
from images, obtained from random masks in the PASCAL
VOC 2012 dataset . We deform those shapes and paste
in arbitrary places in the other images (not from PASCAL),
again covering up to 1
4 of the image. Note that we completely randomize the region masking process, and do not
expect or want any correlation between the source segmentation mask and the image. We merely use those regions to
prevent the network from learning low-level features corresponding to the removed mask. See example in Figure 3c.
In practice, we found region and random block masks
produce a similarly general feature, while signiﬁcantly outperforming the central region features. We use the random
region dropout for all our feature based experiments.
4. Implementation details
The pipeline was implemented in Caffe and Torch.
We used the recently proposed stochastic gradient descent
solver, ADAM for optimization. The missing region in
the masked input image is ﬁlled with constant mean value.
Hyper-parameter details are discussed in Sections 5.1, 5.2.
Pool-free encoders We experimented with replacing all
pooling layers with convolutions of the same kernel size
and stride. The overall stride of the network remains the
same, but it results in ﬁner inpainting. Intuitively, there is
no reason to use pooling for reconstruction based networks.
Mean L1 Loss
Mean L2 Loss
PSNR (higher better)
NN-inpainting (HOG features)
NN-inpainting (our features)
Our Reconstruction (joint)
Semantic Inpainting accuracy for Paris StreetView
dataset on held-out images. NN inpainting is basis for .
In classiﬁcation, pooling provides spatial invariance, which
may be detrimental for reconstruction-based training. To be
consistent with prior work, we still use the original AlexNet
architecture (with pooling) for all feature learning results.
5. Evaluation
We now evaluate the encoder features for their semantic quality and transferability to other image understanding
tasks. We experiment with images from two datasets: Paris
StreetView and ImageNet without using any of the
accompanying labels. In Section 5.1, we present visualizations demonstrating the ability of the context encoder to ﬁll
in semantic details of images with missing regions. In Section 5.2, we demonstrate the transferability of our learned
features to other tasks, using context encoders as a pretraining step for image classiﬁcation, object detection, and
semantic segmentation. We compare our results on these
tasks with those of other unsupervised or self-supervised
methods, demonstrating that our approach outperforms previous methods.
5.1. Semantic Inpainting
We train context encoders with the joint loss function de-
ﬁned in Equation (3) for the task of inpainting the missing
region. The encoder and discriminator architecture is similar to that of discriminator in , and decoder is similar to
generator in . However, the bottleneck is of 4000 units
(in contrast to 100 in ); see supplementary material. We
used the default solver hyper-parameters suggested in .
We use λrec = 0.999 and λadv = 0.001. However, a few
things were crucial for training the model. We did not condition the adversarial loss (see Section 3.2) nor did we add
noise to the encoder. We use a higher learning rate for context encoder (10 times) to that of adversarial discriminator.
To further emphasize the consistency of prediction with the
context, we predict a slightly larger patch that overlaps with
the context (by 7px). During training, we use higher weight
(10×) for the reconstruction loss in this overlapping region.
The qualitative results are shown in Figure 4. Our model
performs generally well in inpainting semantic regions of
However, if a region can be ﬁlled with lowlevel textures, texture synthesis methods, such as ,
can often perform better (e.g. Figure 5). For semantic inpainting, we compare against nearest neighbor inpainting
(which forms the basis of Hays et al. ) and show that
Ours(L2+Adv)
NN-Inpainting w/ our features
NN-Inpainting w/ HOG
Figure 6: Semantic Inpainting using different methods on held-out images. Context Encoder with just L2 are well aligned,
but not sharp. Using adversarial loss, results are sharp but not coherent. Joint loss alleviate the weaknesses of each of them.
The last two columns are the results if we plug-in the best nearest neighbor (NN) patch in the masked region.
our reconstructions are well-aligned semantically, as seen
on Figure 6. It also shows that joint loss signiﬁcantly improves the inpainting over both reconstruction and adversarial loss alone. Moreover, using our learned features in
a nearest-neighbor style inpainting can sometimes improve
results over a hand-designed distance metrics. Table 1 reports quantitative results on StreetView Dataset.
5.2. Feature Learning
consistency
AlexNet architecture for our encoder.
Unfortunately, we did not manage to make the adversarial loss
converge with AlexNet, so we used just the reconstruction
loss. The networks were trained with a constant learning
rate of 10−3 for the center-region masks.
However, for
random region corruption, we found a learning rate of 10−4
to perform better. We apply dropout with a rate of 0.5 just
for the channel-wise fully connected layer, since it has
more parameters than other layers and might be prone to
overﬁtting. The training process is fast and converges in
about 100K iterations: 14 hours on a Titan X GPU. Figure 7
shows inpainting results for context encoder trained with
random region corruption using reconstruction loss.
evaluate the quality of features, we ﬁnd nearest neighbors
Figure 7: Arbitrary region inpainting for context encoder
trained with reconstruction loss on held-out images.
to the masked part of image just by using the features from
the context, see Figure 8. Note that none of the methods
ever see the center part of any image, whether a query
or dataset image.
Our features retrieve decent nearest
neighbors just from context, even though actual prediction
is blurry with L2 loss.
AlexNet features also perform
decently as they were trained with 1M labels for semantic
tasks, HOG on the other hand fail to get the semantics.
Classiﬁcation pre-training
For this experiment, we ﬁne-tune a standard AlexNet classiﬁer on the PASCAL VOC 2007 from a number of supervised, self-supervised and unsupervised initializations.
We train the classiﬁer using random cropping, and then
evaluate it using 10 random crops per test image. We average the classiﬁer output over those random crops. Table 2
shows the standard mean average precision (mAP) score for
all compared methods.
A random initialization performs roughly 25% below
an ImageNet-trained model; however, it does not use any
labels. Context encoders are competitive with concurrent
self-supervised feature learning methods and significantly outperform autoencoders and Agrawal et al. .
Detection pre-training
Our second set of quantitative results involves using our
features for object detection.
We use Fast R-CNN 
framework (FRCN). We replace the ImageNet pre-trained
network with our context encoders (or any other baseline
In particular, we take the pre-trained encoder
weights up to the pool5 layer and re-initialize the fully-
Figure 8: Context Nearest Neighbors. Center patches whose context (not shown here) are close in the embedding space
of different methods (namely our context encoder, HOG and AlexNet). Note that the appearance of these center patches
themselves was never seen by these methods. But our method brings them close just from their context.
Pretraining Method
Supervision
Pretraining time
Classiﬁcation
Segmentation
ImageNet 
1000 class labels
Random Gaussian
initialization
< 1 minute
Autoencoder
Agrawal et al. 
Wang et al. 
Doersch et al. 
relative context
Table 2: Quantitative comparison for classiﬁcation, detection and semantic segmentation. Classiﬁcation and Fast-RCNN
Detection results are on the PASCAL VOC 2007 test set. Semantic segmentation results are on the PASCAL VOC 2012
validation set from the FCN evaluation described in Section 5.2.3, using the additional training data from , and removing
overlapping images from the validation set .
connected layers. We then follow the training and evaluation procedures from FRCN and report the accuracy (in
mAP) of the resulting detector.
Our results on the test set of the PASCAL VOC 2007 
detection challenge are reported in Table 2. Context encoder pre-training is competitive with the existing methods achieving signiﬁcant boost over the baseline. Recently,
Kr¨ahenb¨uhl et al. proposed a data-dependent method
for rescaling pre-trained model weights. This signiﬁcantly
improves the features in Doersch et al. up to 65.3%
for classiﬁcation and 51.1% for detection. However, this
rescaling doesn’t improve results for other methods, including ours.
Semantic Segmentation pre-training
Our last quantitative evaluation explores the utility of context encoder training for pixel-wise semantic segmentation.
Fully convolutional networks (FCNs) were proposed as
an end-to-end learnable method of predicting a semantic label at each pixel of an image, using a convolutional network
pre-trained for ImageNet classiﬁcation. We replace the classiﬁcation pre-trained network used in the FCN method with
our context encoders, afterwards following the FCN training and evaluation procedure for direct comparison with
their original CaffeNet-based result.
Our results on the PASCAL VOC 2012 validation
set are reported in Table 2. In this setting, we outperform a
randomly initialized network as well as a plain autoencoder
which is trained simply to reconstruct its full input.
6. Conclusion
Our context encoders trained to generate images conditioned on context advance the state of the art in semantic
inpainting, at the same time learn feature representations
that are competitive with other models trained with auxiliary supervision.
Acknowledgements
The authors would like to thank
Amanda Buster for the artwork on Fig. 1b, as well as Shubham Tulsiani and Saurabh Gupta for helpful discussions.
This work was supported in part by DARPA, AFRL, Intel, DoD MURI award N000141110688, NSF awards IIS-
1212798, IIS-1427425, and IIS-1536003, the Berkeley Vision and Learning Center and Berkeley Deep Drive.