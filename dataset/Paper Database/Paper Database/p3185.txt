Octree Generating Networks:
Efﬁcient Convolutional Architectures for High-resolution 3D Outputs
Maxim Tatarchenko1
Alexey Dosovitskiy1,2
Thomas Brox1
 
 
 
1University of Freiburg
2Intel Labs
We present a deep convolutional decoder architecture
that can generate volumetric 3D outputs in a compute- and
memory-efﬁcient manner by using an octree representation.
The network learns to predict both the structure of the octree, and the occupancy values of individual cells.
makes it a particularly valuable technique for generating
3D shapes. In contrast to standard decoders acting on regular voxel grids, the architecture does not have cubic complexity. This allows representing much higher resolution
outputs with a limited memory budget. We demonstrate this
in several application domains, including 3D convolutional
autoencoders, generation of objects and whole scenes from
high-level representations, and shape from a single image.
1. Introduction
Up-convolutional1 decoder architectures have become
a standard tool for tasks requiring image generation or per-pixel prediction .
They consist of
a series of convolutional and up-convolutional (upsampling+convolution) layers operating on regular grids, with
resolution gradually increasing towards the output of the
network. The architecture is trivially generalized to volumetric data. However, because of cubic scaling of computational and memory requirements, training up-convolutional
decoders becomes infeasible for high-resolution threedimensional outputs.
Poor scaling can be resolved by exploiting structure in
the data. In many learning tasks, neighboring voxels on a
voxel grid share the same state — for instance, if the voxel
grid represents a binary occupancy map or a multi-class
labeling of a three-dimensional object or a scene. In this
case, data can be efﬁciently represented with octrees — data
structures with adaptive cell size. Large regions of space
sharing the same value can be represented with a single
1Also known as deconvolutional
Figure 1. The proposed OGN represents its volumetric output as an
octree. Initially estimated rough low-resolution structure is gradually reﬁned to a desired high resolution. At each level only a sparse
set of spatial locations is predicted. This representation is signiﬁcantly more efﬁcient than a dense voxel grid and allows generating
volumes as large as 5123 voxels on a modern GPU in a single forward pass.
large cell of an octree, resulting in savings in computation
and memory compared to a ﬁne regular grid. At the same
time, ﬁne details are not lost and can still be represented by
small cells of the octree.
We present an octree generating network (OGN) - a convolutional decoder operating on octrees. The coarse structure of the network is illustrated in Figure 1. Similar to a
usual up-convolutional decoder, the representation is gradually convolved with learned ﬁlters and up-sampled. The
difference is that, starting from a certain layer in the network, dense regular grids are replaced by octrees. Therefore, the OGN predicts large uniform regions of the output
space already at early decoding stages, saving the computation for the subsequent high-resolution layers. Only regions
containing ﬁne details are processed by these more computationally demanding layers.
In this paper, we focus on generating shapes represented
as binary occupancy maps. We thoroughly compare OGNs
to standard dense nets on three tasks: auto-encoding shapes,
generating shapes from a high-level description, and reconstructing 3D objects from single images. OGNs yield the
same accuracy as conventional dense decoders while consuming signiﬁcantly less memory and being much faster at
 
high resolutions. For the ﬁrst time, we can generate shapes
of resolution as large as 5123 voxels in a single forward
pass. Our OGN implementation is publicly available2.
2. Related work
The majority of deep learning approaches generate volumetric data based on convolutional networks with feature maps and outputs represented as voxel grids. Applications include single- and multi-view 3D object reconstruction trained in supervised and unsupervised ways, probabilistic generative modeling
of 3D shapes , semantic segmentation 
and shape deformation . A fundamental limitation of
these approaches is the low resolution of the output. Memory and computational requirements of approaches based on
the voxel grid representation scale cubically with the output size. Thus, training networks with resolutions higher
than 643 comes with memory issues on the GPU or requires other measures to save memory, such as reducing
the batch size or generating the volume part-by-part. Moreover, with growing resolution, training times become prohibitively slow.
Computational limitations of the voxel grid representation led to research on alternative representations of volumetric data in deep learning. Tatarchenko et al. predict RGB images and depth maps for multiple views of
an object, and fuse those into a single 3D model.
approach is not trainable end to end because of the postprocessing fusion step, and is not applicable to objects with
strong self-occlusion. Sinha et al. convert shapes into
two-dimensional geometry images and process those with
conventional CNNs – an approach only applicable to certain classes of topologies. Networks producing point clouds
have been applied to object generation and semantic
segmentation . By now, these architectures have been
demonstrated to generate relatively low-resolution outputs.
Scaling these networks to higher resolution is yet to be explored. Tulsiani et al. assemble objects from volumetric primitives. Yi et al. adapt the idea of graph convolutions in the spectral domain to semantic segmentation of 3D
shapes. Their approach requires all samples to have aligned
eigenbasis functions, thus limiting possible application domains.
Promising alternative representations that are not directly applicable to generating 3D outputs have been explored on analysis tasks.
Masci et al. proposed
geodesic CNNs for extracting local features in non-
Euclidean domains. Our approach is largely inspired by
Graham’s sparse convolutional networks , which
enable efﬁcient shape analysis by storing a sparse set of
non-trivial features instead of dense feature maps.
2 
OGN essentially solves the inverse problem by predicting which regions of the output contain high-resolution information and by restricting extensive calculations only to
those regions.
The recent pre-print by Riegler et al. builds on the
same general idea as our work: designing convolutional networks that operate on octrees instead of voxel grids. However, the implementation and the application range of the
method is very different from our work. When generating
an octree, Riegler et al. assume the octree structure to be
known at test time. This is the case, for example, in semantic segmentation, where the structure of the output octree
can be set to be identical to that of the input. However, in
many important scenarios — any kind of 3D reconstruction, shape modeling, RGB-D fusion, superresolution —
the structure of the octree is not known in advance and must
be predicted. The method of Riegler et al. is not applicable
in these cases. Moreover, the OGN is more ﬂexible in that
it allows for octrees with an arbitrary number of levels.
3. Octrees
An octree is a 3D grid structure with adaptive cell
size, which allows for lossless reduction of memory consumption compared to a regular voxel grid. Octrees have a
long history in classical 3D reconstruction and depth map
fusion . A function deﬁned on a voxel
grid can be converted into a function deﬁned on an octree.
This can be done by starting from a single cell representing
the entire space and recursively partitioning cells into eight
octants. If every voxel within a cell has the same function
value, this cell is not subdivided and becomes a leaf of the
tree. The set of cells at a certain resolution is referred to as
an octree level. The recursive subdivision process can also
be started not from the whole volume, but from some initial
coarse resolution. Then the maximal octree cell size is given
by this initial resolution. The most straightforward way of
implementing an octree is to store in each cell pointers to its
children. In this case, the time to access an element scales
linearly with the tree’s depth, which can become costly at
high resolutions. We use a more efﬁcient implementation
that exploits hash tables. An octree cell with spatial coordinates x = (x, y, z) at level l is represented as an index-value
pair (m, v), where v can be any kind of discrete or continuous signal. m is calculated from (x, l) using Z-order curves
m = Z(x, l),
which is a computationally cheap transformation implemented using bit shifts. An octree O is, hence, a set of all
O = {(m, v)}.
(one or more)
propagated features
Ground truth
Prediction
Figure 2. Single block of an OGN illustrated as 2D quadtree for simplicity. After convolving features Fl−1 of the previous block with
weight ﬁlters, we directly predict the occupancy values of cells at level l using 13 convolutions. Features corresponding to ”ﬁlled” and
”empty” cells are no longer needed and thus not propagated, which yields Fl as the ﬁnal output of this block.
Storing this set as a hash table allows for constant-time element access.
When training networks, we will need to compare two
different octrees O1 and O2, i.e. for each cell (x, l) from
O1, query the corresponding signal value v in O2. Since
different octrees have different structure, two situations are
possible. If Z(x, k) is stored at a level k in O2, which is
the same or lower than l, the signal value of this cell can
be uniquely determined. If Z(x, k) is stored at one of the
later levels, the cell is subdivided in O2, and the value of the
whole cell is not deﬁned. To formalize this, we introduce a
function f for querying the signal value of an arbitrary cell
with index m = Z(x, l) from octree O:
 v, if ∃k ≤l : (Z(x, k), v) ∈O
∅, otherwise
where ∅denotes an unavailable value.
4. Octree Generating Networks
An Octree Generating Network (OGN) is a convolutional decoder that yields an octree as output: both the
structure, i.e. which cells should be subdivided, and the
signal value of each cell. In this work we concentrate on binary occupancy values v ∈{0, 1}, but the proposed framework can be easily extended to support arbitrary signals. As
shown in Figure 1, an OGN consists of a block operating
on dense regular grids, followed by an arbitrary number of
hash-table-based octree blocks.
The dense block is a set of conventional 3D convolutional and up-convolutional layers producing a feature map
of size d1 ×d2 ×d3 ×c as output, where {di} are the spatial
dimension and c is the number of channels.
From here on, the representation is processed by our custom layers operating on octrees. The regular-grid-based feature map produced by the dense block is converted to a set
of index-value pairs stored as a hash table (with values being feature vectors), and is further processed in this format.
We organize octree-based layers in blocks, each responsible
for predicting the structure and the content of a single level
of the generated octree.
Figure 2 illustrates the functioning of a single such block
that predicts level l of an octree. For the sake of illustration,
we replaced three-dimensional octrees by two-dimensional
quadtrees. Feature maps in Figure 2 are shown as dense arrays only for simplicity; in fact the green cells are stored in
hash maps, and the white cells are not stored at all. We now
give a high-level overview of the block and then describe its
components in more detail.
Input to the block is a sparse hash-table-based convolutional feature map Fl−1 of resolution (d1·2l−1, d2·2l−1, d3·
2l−1) produced by the previous block. First this feature map
is processed with a series of custom convolutional layers
and one up-convolutional layer with stride 2, all followed
by non-linearities.
This yields a new feature map ¯Fl of resolution (d1·2l, d2·
2l, d3 · 2l). Based on this feature map, we directly predict
the content of level l. For each cell, there is a two-fold
decision to be made: should it be kept at level l, and if yes,
what should be the signal value in this cell? In our case
making this decision can be formulated as classifying the
cell as being in one of three states: ”empty”, ”ﬁlled” or
”mixed”. These states correspond to the outputs of statequerying function f from eq. (3), with ”empty” and ”ﬁlled”
being the signal values v, and ”mixed” being the state where
the value is not determined. We make this prediction using a
convolutional layer with 13 ﬁlters followed by a three-way
softmax. This classiﬁer is trained in a supervised manner
with targets provided by the ground truth octree.
Finally, in case the output resolution has not been
reached, features from ¯Fl that correspond to ”mixed” cells
are propagated to the next layer3 and serve as an input feature map Fl to the next block.
In the following subsections, we describe the components of a single octree block in more detail: the octreebased convolution, the loss function, and the feature propagation mechanism.
4.1. Convolution
We implemented a custom convolutional layer OGN-
Conv, which operates on feature maps represented as hash
tables instead of usual dense arrays. Our implementation
supports strided convolutions and up-convolutions with arbitrary ﬁlter sizes. It is based on representing convolution as
a single matrix multiplication, similar to standard caffe 
code for dense convolutions.
In the dense case, the feature tensor is converted to a
matrix with the im2col operation, then multiplied with the
weight matrix of the layer, and the result is converted back
into a dense feature tensor using the col2im operation. In
OGN, instead of storing full dense feature tensors, only a
sparse set of relevant features is stored at each layer. These
features are stored in a hash table, and we implemented
custom operations to convert a hash table to a feature matrix and back.
The resulting matrices are much smaller
than those in the dense case. Convolution then amounts to
multiplying the feature matrix by the weight matrix. Matrix multiplication is executed on GPU with standard optimized functions, and our conversion routines currently run
on CPU. Even with this suboptimal CPU implementation,
computation times are comparable to those of usual dense
convolutions at 323 voxel resolution. At higher resolutions,
OGNConv is much faster than dense convolutions (see section 5.2).
Unlike convolutions on regular grids, OGN convolutions
are not shift invariant by design. This is studied in Section
E of the Appendix.
3Additional neighboring cells may have to be propagated if needed by
subsequent convolutional layers. This is described in section 4.3.
The classiﬁer at level l of the octree outputs the probabilities of each cell from this level being ”empty”, ”ﬁlled”
or ”mixed”, that is, a three-component prediction vector
m) for cell with index m. We minimize
the cross-entropy between the network predictions and the
cell states of the ground truth octree OGT , averaged over
the set Ml of cells predicted at layer l:
hi(f(m, OGT )) log pi
where function h yields a one-hot encoding (h0, h1, h2) of
the cell state value returned by f from eq. (3). Loss computations are encapsulated in our custom OGNLoss layer.
The ﬁnal OGN objective is calculated as a sum of loss
values from all octree levels
4.3. Feature propagation
At the end of each octree block there is an OGNProp
layer that propagates to the next octree block features from
cells in the ”mixed” state, as well as from neighboring cells
if needed to compute subsequent convolutions. Information
about the cell state can either be taken from the ground truth
octree, or from the network prediction. This spawns two
possible propagation modes: using the known tree structure
(Prop-known) and using the predicted tree structure (Proppred). Section 4.4 describes use cases for these two modes.
The set of features to be propagated depends on the
kernel size in subsequent OGNConv layers. The example
illustrated in Figure 2 only holds for 23 up-convolutions
which do not require any neighboring elements to be computed. To use larger convolutional ﬁlters or multiple convolutional layers, we must propagate not only the features of
the ”mixed” cells, but also the features of the neighboring
cells required for computing the convolution at the locations
of the ”mixed” cells. The size of the required neighborhood
is computed based on the network architecture, before the
training starts. Details are provided in Section C of the Appendix.
4.4. Training and testing
The OGN decoder is end-to-end trainable using standard backpropagation. The only subtlety is in selecting the
feature propagation modes during training and testing. At
training time the octree structure of the training samples is
always available, and therefore the Prop-known mode can
be used. At test time, the octree structure may or may not
be available. We have developed two training regimes for
these two cases.
If the tree structure is available at test time, we simply
train the network with Prop-known and test it the same way.
This regime is applicable for tasks like semantic segmentation, or, more generally, per-voxel prediction tasks, where
the structure of the output is exactly the same as the structure of the input.
If the tree structure is not available at test time, we start
by training the network with Prop-known, and then ﬁnetune it with Prop-pred. This regime is applicable to any
task with volumetric output.
We have also tested other regimes of combining Proppred and Prop-known and found those to perform worse
than the two described variants. This is discussed in more
detail in Section B of the Appendix.
5. Experiments
In our experiments we veriﬁed that the OGN architecture performs on par with the standard dense voxel grid representation, while requiring signiﬁcantly less memory and
computation, particularly at high resolutions. The focus of
the experiments is on showcasing the capabilities of the proposed architecture. How to fully exploit the new architecture in practical applications is a separate problem that is
left to future work.
5.1. Experimental setup
For all OGN decoders used in our evaluations, we followed the same design pattern: 1 or 2 up-convolutional layers interleaved with a convolutional layer in the dense block,
followed by multiple octree blocks depending on the output
resolution. In the octree blocks we used 23 up-convolutions.
We also evaluated two other architecture variants, presented
in section 5.3.1. ReLU non-linearities were applied after
each (up-)convolutional layer. The number of channels in
the up-convolutional layers of the octree blocks was set to
32 in the outermost layer, and was increased by 16 in each
preceding octree block. The exact network architectures
used in individual experiments are shown in Section F of
the Appendix.
The networks were trained using ADAM with initial learning rate 0.001, β1 = 0.9, β2 = 0.999. The learning
rate was decreased by a factor of 10 after 30K and 70K iterations. We did not apply any additional regularization.
For quantitative evaluations, we converted the resulting
octrees back to regular voxel grids, and computed the Intersection over Union (IoU) measure between the ground
truth model and the predicted model. To quantify the importance of high-resolution representations, in some experiments we upsampled low-resolution network predictions
to high-resolution ground truth using trilinear interpolation,
and later binarization with a threshold of 0.5. We explicitly
specify the ground truth resolution in all experiments where
this was done.
If not indicated otherwise, the results were obtained in
the Prop-pred mode.
In our evaluations we used three datasets:
ShapeNet-all Approximately 50.000 CAD models from
13 main categories of the ShapeNet dataset , used by
Choy et al. . We also used the renderings provided by
Choy et al. .
ShapeNet-cars A subset of ShapeNet-all consisting of
7497 car models.
BlendSwap A dataset of 4 scenes we manually collected
from blendswap.com, a website containing a large collection of Blender models.
All datasets were voxelized in multiple resolutions from
323 to 5123 using the binvox4 tool, and were converted into
octrees. We set the interior parts of individual objects to be
ﬁlled, and the exterior to be empty.
5.2. Computational efﬁciency
We start by empirically demonstrating that OGNs can be
used at high resolutions when the voxel grid representation
becomes impractical both because of the memory requirements and the runtime.
The number of elements in a voxel grid is uniquely determined by its resolution, and scales cubically as the latter
increases. The number of elements in an octree depends
on the data, leading to variable scaling rates: from constant for cubic objects aligned with the grid, to cubic for
pathological shapes such as a three-dimensional checkerboard. In practice, octrees corresponding to real-world objects and scenes scale approximately quadratically, since
they represent smooth two-dimensional surfaces in a threedimensional space.
Memory, GB
Iteration time, s
Figure 3. Memory consumption (left) and iteration time (right) of
OGN and a dense network at different output resolutions. Forward
and backward pass, batch size 1.
4 
Memory, GB
Iteration time, s
Resolution
Table 1. Memory consumption and iteration time of OGN and a
dense network at different output resolutions. Batch size 1.
We empirically compare the runtime and memory consumption values for a dense network and OGN, for varying output resolution.
Architectures of the networks are
the same as used in Section 5.4 – three fully connected
layers followed by an up-convolutional decoder. We performed the measurements on an NVidia TitanX Maxwell
GPU, with 12Gb of memory. To provide actual measurements for dense networks at the largest possible resolution,
we performed the comparison with batch size 1. The 5123
dense network does not ﬁt into memory even with batch size
1, so we extrapolated the numbers by ﬁtting cubic curves.
Figure 3 and Table 1 show the results of the comparison.
The OGN is roughly as efﬁcient as its dense counterpart for
low resolutions, but as the resolution grows, it gets drastically faster and consumes far less memory. At 5123 voxel
resolution, the OGN consumes almost two orders of magnitude less memory and runs 20 times faster. In Section A
of the Appendix we provide a more detailed analysis and
explicitly demonstrate the near-cubic scaling of dense networks against the near-quadratic scaling of OGNs.
To put these numbers into perspective, training OGN at
2563 voxel output resolution takes approximately 5 days.
Estimated training time of its dense counterpart would be almost a month. Even if the 5123 voxel dense network would
ﬁt into memory, it would take many months to train.
5.3. Autoencoders
Autoencoders and their variants are commonly used for
representation learning from volumetric data
Therefore, we start by comparing the representational
power of the OGN to that of dense voxel grid networks on
the task of auto-encoding volumetric shapes.
We used the decoder architecture described in section 5.1
both for the OGN and the dense baseline. The architecture
of the encoder is symmetric to the decoder. Both encoders
operate on a dense voxel grid representation5.
We trained the autoencoders on the ShapeNet-cars
dataset in two resolutions: 323 and 643. We used 80% of the
data for training, and 20% for testing. Quantitative results
5In this paper, we focus on generating 3D shapes. Thus, we have not
implemented an octree-based convolutional encoder. This could be done
along the lines of Riegler et al. 
are summarized in Table 2. With predicted octree structure,
there is no signiﬁcant difference in performance between
the OGN and the dense baseline.
OGN+Prop-known
OGN+Prop-pred
Table 2. Quantitative results for OGN and dense autoencoders.
Predictions were compared with the ground truth at the corresponding resolution, without upsampling.
Flexibility of architecture choice
To show that OGNs are not limited to up-convolutional layers with 23 ﬁlters, we evaluated two alternative 643 OGN
auto-encoders: one with 43 up-convolutions and one with
23 up-convolutions interleaved with 33 convolutions. The
results are summarized in Table 7.
There is no signiﬁcant difference between the architectures for this task. With
larger ﬁlters, the network is roughly twice slower in our current implementation, so we used 23 ﬁlters in all further experiments.
Using known structure
Interestingly, OGN with known tree structure outperforms
the network based on a dense voxel grid, both qualitatively
and quantitatively. An example of this effect can be seen in
Figure 4: the dense autoencoder and our autoencoder with
predicted propagation struggle with properly reconstructing
the spoiler of the car. Intuitively, the known tree structure
provides additional shape information to the decoder, thus
simplifying the learning problem. In the autoencoder scenario, however, this may be undesirable if one aims to encode all information about a shape in a latent vector. In tasks
like semantic segmentation, the input octree structure could
help introduce shape features implicitly in the learning task.
5.4. 3D shape from high-level information
We trained multiple OGNs for generating shapes from
high-level parameters similar to Dosovitskiy et al. . In
all cases the input of the network is a one-hot encoded object ID, and the output is an octree with the object shape.
2x2 ﬁlters
4x4 ﬁlters
OGN+Prop-known
OGN+Prop-pred
Table 3. Using more complex architectures in 643 OGN autoencoders does not lead to signiﬁcant performance improvements.
OGN+Prop-pred
OGN+Prop-known
Figure 4. Using the known tree structure at test time leads to improved performance.
ShapeNet-cars
Table 4. Quantitative evaluation of 3D shapes generated from highlevel information. Lower-resolution predictions from ShapeNetcars were upsampled to 2563
ground truth,
scenes from
BlendSwap — to 5123.
Figure 5. Training samples from the ShapeNet-cars dataset generated by our networks. Cells at different octree levels vary in size
and are displayed in different shades of gray.
ShapeNet-cars
First, we trained on the whole ShapeNet-cars dataset in
three resolutions: 643, 1283 and 2563. Example outputs
are shown in Figure 5 and quantitative results are presented
in Table 4. Similar to the two-dimensional case , the
outputs are accurate in the overall shape, but lack some ﬁne
details. This is not due to the missing resolution, but due to
general limitations of the training data and the learning task.
Table 4 reveals that a resolution of 1283 allows the reconstruction of a more accurate shape with more details than
a resolution of 643. At an even higher resolution of 2563,
the overall performance decreased again. Even though the
higher-resolution network is architecturally capable of performing better, it is not guaranteed to train better. Noisy gradients from outer high-resolution layers may hamper learning of deeper layers, resulting in an overall decline in performance. This problem is orthogonal to the issue of designing computationally efﬁcient architectures, which we
aim to solve in this paper. We further discuss this in the
Notably, the network does not only learn to generate objects from the training dataset, but it can also generalize to
unseen models. We demonstrate this by interpolating between pairs of one-hot input ID vectors. Figure 6 shows that
for all intermediate input values the network produces consistent output cars, with the style being smoothly changed
between the two training points.
Figure 6. Our networks can generate previously unseen cars by
interpolating between the dataset points, which demonstrates their
generalization capabilities.
To additionally showcase the beneﬁt of using higher resolutions, we trained OGNs to ﬁt the BlendSwap dataset containing 4 whole scenes. In contrast to the ShapeNet-cars
dataset, such amount of training data does not allow for any
generalization. The experiment aims to show that OGNs
provide sufﬁcient resolution to represent such high-ﬁdelity
shape data.
Figure 7 shows the generated scenes. In both examples,
643 and 1283 resolutions are inadequate for representing the
details. For the bottom scene, even the 2563 resolution still
struggles with ﬁne-grained details. This example demonstrates that tasks like end-to-end learning of scene reconstruction requires high-resolution representations, and the
OGN is an architecture that can provide such resolutions.
These qualitative observations are conﬁrmed quantitatively in Table 4. Higher output resolutions allow for more
accurate reconstruction of the samples in the dataset. More
results for this experiment are shown in Section D of the
Appendix, and the accompanying video6.
5.5. Single-image 3D reconstruction
In this experiment we trained networks with our OGN
decoder on the task of single-view 3D reconstruction. To
demonstrate that our dense voxel grid baseline, as already
used in the autoencoder experiment, is a strong baseline, we
compare to the approach by Choy et al. . This approach
operates on 323 voxel grids, and we adopt this resolution
for our ﬁrst experiment. To ensure a fair comparison, we
trained networks on ShapeNet-all, the exact dataset used by
Choy et al. . Following the same dataset splitting strategy, we used 80% of the data for training, and 20% for
testing. As a baseline, we trained a network with a dense
6 
Figure 7. OGN is used to reproduce large-scale scenes from the dataset, where high resolution is crucial to generate ﬁne-grained structures.
Watercraft
Table 5. Single-view 3D reconstruction results on the 323 version
of ShapeNet-all from Choy et al. compared to OGN and a dense
baseline. OGN is competitive with voxel-grid-based networks.
decoder which had the same conﬁguration as our OGN decoder. Table 5 shows that compared to single-view reconstructions from , both the OGN and the baseline dense
network compare favorably for most of the classes. In conclusion, the OGN is competitive with voxel-grid-based networks on the complex task of single-image class-speciﬁc
3D reconstruction.
We also evaluated the effect of resolution on the
ShapeNet-cars dataset. Figure 8 shows that OGNs learned
to infer the 3D shapes of cars in all cases, and that highresolution predictions are clearly better than the 323 models
commonly used so far. This is backed up by quantitative
results shown in Table 6: 323 results are signiﬁcantly worse
than the rest. At 2563 performance drops again for the same
reasons as in the decoder experiment in section 5.4.1.
6. Conclusions
We have presented a novel convolutional decoder architecture for generating high-resolution 3D outputs represented as octrees. We have demonstrated that this architecture is ﬂexible in terms of the exact layer conﬁguration, and
Figure 8. Single-image 3D reconstruction on the ShapeNet-cars
dataset using OGN in different resolutions.
Resolution
Single-view 3D
Table 6. Single-image 3D reconstruction results on ShapeNet-cars.
Low-resolution predictions are upsampled to 2563. Commonly
used 323 models are signiﬁcantly worse than the rest.
that it provides the same accuracy as dense voxel grids in
low resolution. At the same time, it scales much better to
higher resolutions, both in terms of memory and runtime.
This architecture enables end-to-end deep learning to be
applied to tasks that appeared unfeasible before. In particular, learning tasks that involve 3D shapes, such as 3D object
and scene reconstruction, are likely to beneﬁt from it.
While in this paper we have focused on shapes and binary occupancy maps, it is straightforward to extend the
framework to multi-dimensional outputs attached to the octree structure; for example, the output of the network could
be a textured shape or a signed distance function. This will
allow for an even wider range of applications.
Acknowledgements
This work was supported by the Excellence Initiative
of the German Federal and State Governments: BIOSS
Centre for Biological Signalling Studies (EXC 294). We
would like to thank Benjamin Ummenhofer for valuable
discussions and technical comments. We also thank Nikolaus Mayer for his help with 3D model visualization and
manuscript preparation.