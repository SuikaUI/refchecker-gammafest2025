Spatially Adaptive Computation Time for Residual Networks
Michael Figurnov1*
Maxwell D. Collins2
Yukun Zhu2
Jonathan Huang2
Dmitry Vetrov1,3
Ruslan Salakhutdinov4
1National Research University Higher School of Economics
2Google Inc.
4Carnegie Mellon University
 
{maxwellcollins,yukun,zhl,jonathanhuang}@google.com
 
 
This paper proposes a deep learning architecture based
on Residual Network that dynamically adjusts the number
of executed layers for the regions of the image. This architecture is end-to-end trainable, deterministic and problemagnostic. It is therefore applicable without any modiﬁcations
to a wide range of computer vision problems such as image
classiﬁcation, object detection and image segmentation. We
present experimental results showing that this model improves the computational efﬁciency of Residual Networks on
the challenging ImageNet classiﬁcation and COCO object
detection datasets. Additionally, we evaluate the computation time maps on the visual saliency dataset cat2000 and
ﬁnd that they correlate surprisingly well with human eye
ﬁxation positions.
1. Introduction
Deep convolutional networks gained a wide adoption in
the image classiﬁcation problem due to their
exceptional accuracy. In recent years deep convolutional
networks have become an integral part of state-of-the-art
systems for a diverse set of computer vision problems such
as object detection , image segmentation , imageto-text , visual question answering and image
generation . They have also been shown to be surprisingly
effective in non-vision domains, e.g. natural language processing and analyzing the board in the game of Go .
A major drawback of deep convolutional networks is
their huge computational cost. A natural way to tackle this
issue is by using attention to guide the computation, which
is similar to how biological vision systems operate .
Glimpse-based attention models assume that
the problem at hand can be solved by carefully processing
a small number of typically rectangular sub-regions of the
*This work was done while M. Figurnov was an intern at Google.
Figure 1: Left: object detections. Right: feature extractor SACT
ponder cost (computation time) map for a COCO validation image.
The proposed method learns to allocate more computation for the
object-like regions of the image.
image. This makes such models unsuitable for multi-output
problems (generating box proposals in object detection) and
per-pixel prediction problems (image segmentation, image
generation). Additionally, choosing the glimpse positions
requires designing a separate prediction network or a heuristic procedure . On the other hand, soft spatial attention
models do not allow to save computation since they
require evaluating the model at all spatial positions to choose
per-position attention weights.
We build upon the Adaptive Computation Time
(ACT) mechanism which was recently proposed for
Recurrent Neural Networks (RNNs). We show that ACT can
be applied to dynamically choose the number of evaluated
layers in Residual Network (the similarity between
Residual Networks and RNNs was explored in ).
Next, we propose Spatially Adaptive Computation Time
(SACT) which adapts the amount of computation between
spatial positions. While we use SACT mechanism for Residual Networks, it can potentially be used for convolutional
LSTM models for video processing .
SACT is an end-to-end trainable architecture that incorporates attention into Residual Networks. It learns a deterministic policy that stops computation in a spatial position
as soon as the features become “good enough”. Since SACT
maintains the alignment between the image and the feature
maps, it is well-suited for a wide range of computer vision
 
residual units
56x56x256 28x28x512
14x14x1024
Figure 2: Residual Network (ResNet) with 101 convolutional layers.
Each residual unit contains three convolutional layers. We apply
Adaptive Computation Time to each block of ResNet to learn an
image-dependent policy of stopping the computation.
problems, including multi-output and per-pixel prediction
We evaluate the proposed models on the ImageNet classi-
ﬁcation problem and ﬁnd that SACT outperforms both
ACT and non-adaptive baselines. Then, we use SACT as
a feature extractor in the Faster R-CNN object detection
pipeline and demonstrate results on the challenging
COCO dataset . Example detections and a ponder cost
(computation time) map are presented in ﬁg. 1.
achieves signiﬁcantly superior FLOPs-quality trade-off to
the non-adaptive ResNet model. Finally, we demonstrate
that the obtained computation time maps are well-correlated
with human eye ﬁxations positions, suggesting that a reasonable attention model arises in the model automatically
without any explicit supervision.
We begin by outlining the recently proposed deep convolutional model Residual Network (ResNet) . Then,
we present Adaptive Computation Time, a model which
adaptively chooses the number of residual units in ResNet.
Finally, we show how this idea can be applied at the spatial position level to obtain Spatially Adaptive Computation
Time model.
2.1. Residual Network
We ﬁrst describe the ResNet-101 ImageNet classiﬁcation architecture (ﬁg. 2). It has been extended for object
detection and image segmentation problems. The
models we propose are general and can be applied to any
ResNet architecture. The ﬁrst two layers of ResNet-101 are
a convolution and a max-pooling layer which together have
a total stride of four. Then, a sequence of four blocks is
stacked together, each block consisting of multiple stacked
residual units. ResNet-101 contains four blocks with 3, 4,
23 and 3 units, respectively. A residual unit has a form
F(x) = x + f(x), where the ﬁrst term is called a shortcut
connection and the second term is a residual function. A
residual function consists of three convolutional layers: 1×1
layer that reduces the number of channels, 3×3 layer that has
equal number of input and output channels and 1 × 1 layer
halting scores
block of residual units
Figure 3: Adaptive Computation Time (ACT) for one block of
residual units. The computation halts as soon as the cumulative
sum of the halting score reaches 1. The remainder is R = 1 −
h1 −h2 −h3 = 0.6, the number of evaluated units N = 4, and
the ponder cost is ρ = N + R = 4.6. See alg. 1. ACT provides
a deterministic and end-to-end learnable policy of choosing the
amount of computation.
that restores the number of channels. We use pre-activation
ResNet in which each convolutional layer is preceded
by batch normalization and ReLU non-linearity. The
ﬁrst units in blocks 2-4 have a stride of 2 and increases the
number of output channels by a factor of 2. All other units
have equal input and output dimensions. This design choice
follows Very Deep Networks and ensures that all units
in the network have an equal computational cost (except for
the ﬁrst units of blocks 2-4 having a slightly higher cost).
Finally, the obtained feature map is passed through a
global average pooling layer and a fully-connected layer
that outputs the logits of class probabilities. The global average pooling ensures that the network is fully convolutional
meaning that it can be applied to images of varying resolutions without changing the network’s parameters.
2.2. Adaptive Computation Time
Let us ﬁrst informally explain Adaptive Computation
Time (ACT) before describing it in more detail and providing an algorithm. We add a branch to the outputs of each
residual unit which predicts a halting score, a scalar value
in the range . The residual units and the halting scores
are evaluated sequentially, as shown in ﬁg. 3. As soon as the
cumulative sum of the halting score reaches one, all following residual units in this block will be skipped. We set the
halting distribution to be the evaluated halting scores with
the last value replaced by a remainder. This ensures that the
distribution over the values of the halting scores sums to one.
The output of the block is then re-deﬁned as a weighted sum
of the outputs of residual units, where the weight of each
unit is given by the corresponding probability value. Finally,
a ponder cost is introduced that is the number of evaluated
residual units plus the remainder value. Minimizing the ponder cost increases the halting scores of the non-last residual
units making it more likely that the computation would stop
earlier. The ponder cost is then multiplied by a constant τ
and added to the original loss function. ACT is applied to
each block of ResNet independently with the ponder costs
Formally, we consider a block of L residual units (boldface denotes tensors of shape Height × Width × Channels):
x0 = input,
xl = F l(xl−1) = xl−1 + f l(xl−1), l = 1 . . . L,
output = xL.
We introduce a halting score hl ∈ for each residual
unit. We deﬁne hL = 1 to enforce stopping after the last
hl = Hl(xl), l = 1 . . . (L −1),
We choose the halting score function to be a simple linear
model on top of the pooled features:
hl = Hl(xl) = σ(W l pool(xl) + bl),
where pool is a global average pooling and σ(t)
1+exp(−t).
Next, we determine N, the number of residual units to
evaluate, as the index of the ﬁrst unit where the cumulative
halting score exceeds 1 −ε:
n ∈{1 . . . L} :
where ε is a small constant (e.g., 0.01) that ensures that N
can be equal to 1 (the computation stops after the ﬁrst unit)
even though h1 is an output of a sigmoid function meaning
that h1 < 1.
Additionally, we deﬁne the remainder R:
Due to the deﬁnition of N in eqn. (7), we have 0 ≤R ≤1.
We next transform the halting scores into a halting distribution, which is a discrete distribution over the residual units.
Its property is that all the units starting from (N +1)-st have
zero probability:
The output of the block is now deﬁned as the outputs of residual units weighted by the halting distribution.
Since representations of residual units are compatible with
Algorithm 1 Adaptive Computation Time for one block of residual
units. ACT does not require storing the intermediate residual units
Input: 3D tensor input
Input: number of residual units in the block L
Input: 0 < ε < 1
Output: 3D tensor output
Output: ponder cost ρ
1: x = input
▷Cumulative halting score
▷Remainder value
4: output = 0
▷Output of the block
6: for l = 1 . . . L do
x = F l(x)
if l < L then h = Hl(x)
else h = 1
if c < 1 −ε then
output += h · x
output += R · x
21: end for
22: return output, ρ
each other , the weighted average also produces
a feature representation of the same type. The values of
xN+1, . . . , xL have zero weight and therefore their evaluation can be skipped:
Ideally, we would like to directly minimize the number
of evaluated units N. However, N is a piecewise constant
function of the halting scores that cannot be optimized with
gradient descent. Instead, we introduce the ponder cost ρ, an
almost everywhere differentiable upper bound on the number
of evaluated units N (recall that R ≥0):
ρ = N + R.
When differentiating ρ, we ignore the gradient of N. Also,
note that R is not a continuous function of the halting
scores . The discontinuities happen in the conﬁgurations
of halting scores where N changes value. Following ,
we ignore these discontinuities and ﬁnd that they do not
impede training. Algorithm 1 shows the description of ACT.
The partial derivative of the ponder cost w.r.t. a halting
score hl is
Therefore,
minimizing
h1, . . . , hN−1,
making the computation stop earlier.
This effect is balanced by the original loss function L which
also depends on the halting scores via the block output, eqn.
(10). Intuitively, the more residual units are used, the better
the output, so minimizing L usually increases the weight R
of the last used unit’s output xN, which in turn decreases
h1, . . . , hN−1.
ACT has several important advantages. First, it adds very
few parameters and computation to the base model. Second,
it allows to calculate the output of the block “on the ﬂy”
without storing all the intermediate residual unit outputs and
halting scores in memory. For example, this would not be
possible if the halting distribution were a softmax of halting
scores, as done in soft attention . Third, we can recover
a block with any constant number of units l ≤L by setting
h1 = · · · = hl−1 = 0, hl = 1. Therefore, ACT is a strict
generalization of standard ResNet.
We apply ACT to each block independently and then
stack the obtained blocks as in the original ResNet. The
input of the next block becomes the weighted average of the
residual units from the previous block, eqn. (10). A similar
connectivity pattern has been explored in . We add the
sum of the ponder costs ρk, k = 1 . . . K from the K blocks
to the original loss function L:
L′ = L + τ
The resulting loss function L′ is differentiable and can be
optimized using conventional backpropagation. τ ≥0 is
a regularization coefﬁcient which controls the trade-off between optimizing the original loss function and the ponder
2.3. Spatially Adaptive Computation Time
In this section, we present Spatially Adaptive Computation Time (SACT). We adjust the per-position amount of
computation by applying ACT to each spatial position of the
block, as shown in ﬁg. 4. As we show in the experiments,
SACT can learn to focus the computation on the regions of
We deﬁne the active positions as the spatial locations
where the cumulative halting score is less than one. Because
an active position might have inactive neighbors, the values
for the the inactive positions need to be imputed to evaluate
the residual unit in the active positions. We simply copy
the previous value for the inactive spatial positions, which
is equivalent to setting the residual function f(x) value to
halting scores
block of residual units
Figure 4: Spatially Adaptive Computation Time (SACT) for one
block of residual units. We apply ACT to each spatial position of
the block. As soon as position’s cumulative halting score reaches
1, we mark it as inactive. See alg. 2. SACT learns to choose the
appropriate amount of computation for each spatial position in the
residual unit
residual unit
receptive field
Figure 5: Residual unit with active and inactive positions in SACT.
This transformation can be implemented efﬁciently using the perforated convolutional layer .
avg-pooling
fully-connected
Figure 6: SACT halting scores. Halting scores are evaluated fully
convolutionally making SACT applicable to images of arbitrary
resolution. SACT becomes ACT if the 3 × 3 conv weights are set
zero, as displayed in ﬁg. 5. The evaluation of a block can
be stopped completely as soon as all the positions become
inactive. Also, the ponder cost is averaged across the spatial
positions to make it comparable with the ACT ponder cost.
The full algorithm is described in alg. 2.
We deﬁne the halting scores for SACT as
Hl(x) = σ(f
W l ∗x + W l pool(x) + bl),
where ∗denotes a 3 × 3 convolution with a single output
channel and pool is a global average-pooling (see ﬁg. 6).
SACT is fully convolutional and can be applied to images of
Note that SACT is a more general model than ACT, and,
consequently, than standard ResNet. If we choose f
then the halting scores for all spatial positions coincide. In
this case the computation for all the positions halts simultaneously and we recover the ACT model.
SACT requires evaluation of the residual function f(x)
in just the active spatial positions. This can be performed
Algorithm 2 Spatially Adaptive Computation Time for one block
of residual units
Input: 3D tensor input
Input: number of residual units in the block L
Input: 0 < ε < 1
▷input and output have different shapes
Output: 3D tensor output of shape H × W × C
Output: ponder cost ρ
1: ˆx = input
2: X = {1 . . . H} × {1 . . . W}
3: for all (i, j) ∈X do
aij = true
▷Active ﬂag
▷Cumulative halting score
▷Remainder value
outputij = 0
▷Output of the block
▷Per-position ponder cost
9: end for
10: for l = 1 . . . L do
if not aij ∀(i, j) ∈X then break
for all (i, j) ∈X do
if aij then xij = F l(ˆx)ij
else xij = ˆxij
for all (i, j) ∈X do
if not aij then continue
if l < L then hij = Hl(x)ij
else hij = 1
cij += hij
if cij < 1 −ε then
outputij += hij · xij
Rij −= hij
outputij += Rij · xij
ρij += Rij
aij = false
36: end for
(i,j)∈X ρij/(HW )
38: return output, ρ
efﬁciently using the perforated convolutional layer proposed
in (with skipped values replaced by zeros instead of the
nearest neighbor’s values). Recall that the residual function
consists of a stack of 1 × 1, 3 × 3 and 1 × 1 convolutional
layers. The ﬁrst convolutional layer has to be evaluated in
the positions obtained by dilating the active positions set
with a 3 × 3 kernel. The second and third layers need to be
evaluated just in the active positions.
An alternative approach to using the perforated convolutional layer is to tile the halting scores map. Suppose that we
share the values of the halting scores hl within k × k tiles.
For example, we can perform pooling of hl with a kernel
size k×k and stride k and then upscale the results by a factor
of k. Then, all positions in a tile have the same active ﬂag,
and we can apply the residual unit densely to just the active
tiles, reusing the commonly available convolution routines.
k should be sufﬁciently high to mitigate the overhead of the
additional kernel calls and the overlapping computations of
the ﬁrst 1 × 1 convolution. Therefore, tiling is advisable
when the SACT is applied to high-resolution images.
3. Related work
The majority of the work on increasing the computational efﬁciency of deep convolutional networks focuses on
static techniques. These include decompositions of convolutional kernels and pruning of connections . Many
of these techniques made their way into the design of the
standard deep architectures. For example, Inception and
ResNet use factorized convolutional kernels.
Recently, several works have considered the problem
of varying the amount of computation in computer vision.
Cascaded classiﬁers are used in object detection
to quickly reject “easy” negative proposals. Dynamic Capacity Networks use the same amount of computation
for all images and use image classiﬁcation-speciﬁc heuristic. PerforatedCNNs vary the amount of computation
spatially but not between images. proposes to tune the
amount of computation in a fully-connected network using a
REINFORCE-trained policy which makes the optimization
problem signiﬁcantly more challenging.
BranchyNet is the most similar approach to ours
although only applicable to classiﬁcation problems. It adds
classiﬁcation branches to the intermediate layers of the network. As soon as the entropy of the intermediate classiﬁcations is below some threshold, the network’s evaluation
halts. Our preliminary experiments with a similar procedure
based on ACT (using ACT to choose the number of blocks
to evaluate) show that it is inferior to using less units per
4. Experiments
We ﬁrst apply ACT and SACT models to the image classiﬁcation task for the ImageNet dataset . We show that
SACT achieves a better FLOPs-accuracy trade-off than ACT
by directing computation to the regions of interest. Additionally, SACT improves the accuracy on high-resolution images
compared to the ResNet model. Next, we use the obtained
SACT model as a feature extractor in the Faster R-CNN object detection pipeline on the COCO dataset . Again
we show that we obtain signiﬁcantly improved FLOPs-mAP
trade-off compared to basic ResNet models. Finally, we
demonstrate that SACT ponder cost maps correlate well with
the position of human eye ﬁxations by evaluating them as a
visual saliency model on the cat2000 dataset without any
training on this dataset.
4.1. Image classiﬁcation (ImageNet dataset)
First, we train the basic ResNet-50 and ResNet-101 models from scratch using asynchronous SGD with momentum
(see the supplementary text for the hyperparameters). Our
models achieve similar performance to the reference implementation1. For a single center 224 × 224 resolution crop,
the reference ResNet-101 model achieves 76.4% accuracy,
92.9% recall@5, while our implementation achieves 76%
and 93.1%, respectively. Note that our model is the newer
pre-activation ResNet and the reference implementation
is the post-activation ResNet .
We use ResNet-101 as the basic architecture for ACT and
SACT models. Thanks to the end-to-end differentiability and
deterministic behaviour, we ﬁnd the same optimization hyperparameters are applicable for training of ACT and SACT
as for the ResNet models. However, special care needs to be
taken to address the dead residual unit problem in ACT and
SACT models. Since ACT and SACT are deterministic, the
last units in the blocks do not get enough training signal and
their parameters become obsolete. As a result, the ponder
cost saved by not using these units overwhelms the possible
initial gains in the original loss function and the units are
never used. We observe that while the dead residual units
can be recovered during training, this process is very slow.
Note that ACT-RNN is not affected by this problem
since the parameters for all timesteps are shared.
We ﬁnd two techniques helpful for alleviating the dead
residual unit problem. First, we initialize the bias of the
halting scores units to a negative value to force the model
to use the last units during the initial stages of learning.
We use bl = −3 in the experiments which corresponds
to initially using 1/σ(bl) ≈21 units. Second, we use a
two-stage training procedure by initializing the ACT/SACT
network’s weights from the pretrained ResNet-101 model.
The halting score weights are still initialized randomly. This
greatly simpliﬁes learning of a reasonable halting policy in
the beginning of training.
As a baseline for ACT and SACT, we consider a nonadaptive ResNet model with a similar number of ﬂoating
point operations. We take the average numbers of units used
in each block in the ACT or SACT model (for SACT we also
average over the spatial dimensions) and round them to the
nearest integers. Then, we train a ResNet model with such
number of units per block. We follow the two-stage training
procedure by initializing the network’s parameters with the
the ﬁrst residual units of the full ResNet-101 in each block.
This slightly improves the performance compared to using
the random initialization.
1 
Floating point operations
Validation accuracy (%)
SACT baseline
ACT baseline
ResNet-{50,101}
(a) Test resolution 224 × 224
Floating point operations
Validation accuracy (%)
SACT baseline
ACT baseline
ResNet-{50,101}
(b) Test resolution 352 × 352
Resolution
Validation accuracy (%)
SACT τ = 0. 001
SACT τ = 0. 001 baseline
ACT τ = 0. 0005
ACT τ = 0. 0005 basline
ResNet-101
(c) Resolution vs. accuracy
Floating point operations
Validation accuracy (%)
SACT τ = 0. 001
SACT τ = 0. 001 baseline
ACT τ = 0. 0005
ACT τ = 0. 0005 basline
ResNet-101
(d) FLOPs vs. accuracy for varying
resolution
Figure 7: ImageNet validation set. Comparison of ResNet, ACT,
SACT and the respective baselines. Error bars denote one standard
deviation across images. All models are trained with 224 × 224
resolution images. SACT outperforms ACT and baselines when
applied to images whose resolutions are higher than the training
images. The advantage margin grows as resolution difference
increases.
Figure 8: Ponder cost maps for each block (SACT τ = 0.005,
ImageNet validation image). Note that the ﬁrst block reacts to the
low-level features while the last two blocks attempt to localize the
We compare ACT and SACT to ResNet-50, ResNet-
101 and the baselines in ﬁg. 7. We measure the average
per-image number of ﬂoating point operations (FLOPs)
required for evaluation of the validation set.
multiply-add as two ﬂoating point operations. The FLOPs
are calculated just for the convolution operations (perforated convolution for SACT) since all other operations (nonlinearities, pooling and output averaging in ACT/SACT)
have minimal impact on this metric. The ACT models use
τ ∈{0.0005, 0.001, 0.005, 0.01} and SACT models use
τ ∈{0.001, 0.005, 0.01}. If we increase the image resolution at the test time, as suggested in , we observe that
SACT outperforms ACT and the baselines. Surprisingly, in
this setting SACT has higher accuracy than the ResNet-101
model while being computationally cheaper. Such accuracy
improvement does not happen for the baseline models or
ACT models. We attribute this to the improved scale tolerance provided by the SACT mechanism. The extended
results of ﬁg. 7(a,b), including the average number of residual units per block, are presented in the supplementary.
We visualize the ponder cost for each block of SACT as
Figure 9: ImageNet validation set. SACT (τ = 0.005) ponder cost maps. Top: low ponder cost (19.8-20.55), middle: average ponder cost
(23.4-23.6), bottom: high ponder cost (24.9-26.0). SACT typically focuses the computation on the region of interest.
heat maps (which we call ponder cost maps henceforth) in
ﬁg. 8. More examples of the total SACT ponder cost maps
are shown in ﬁg. 9.
4.2. Object detection (COCO dataset)
Motivated by the success of SACT in classiﬁcation of
high-resolution images and ignoring uninformative background, we now turn to a harder problem of object detection.
Object detection is typically performed for high-resolution
images (such as 1000 × 600, compared to 224 × 224 for
ImageNet classiﬁcation) to allow detection of small objects.
Computational redundancy becomes a big issue in this setting since a large image area is often occupied by the background.
We use the Faster R-CNN object detection pipeline 
which consists of three stages. First, the image is processed
with a feature extractor. This is the most computationally
expensive part. Second, a Region Proposal Network predicts
a number of class-agnostic rectangular proposals (typically
300). Third, each proposal box’s features are cropped from
the feature map and passed through a box classiﬁer which
predicts whether the proposal corresponds to an object, the
class of this object and reﬁnes the boundaries. We train the
model end-to-end using asynchronous SGD with momentum,
employing Tensorﬂow’s crop_and_resize operation,
which is similar to the Spatial Transformer Network ,
to perform cropping of the region proposals. The training
hyperparameters are provided in the supplementary.
We use ResNet blocks 1-3 as a feature extractor and
block 4 as a box classiﬁer, as suggested in . We reuse the
models pretrained on the ImageNet classiﬁcation task and
ﬁne-tune them for COCO detection. For SACT, the ponder
cost penalty τ is only applied to the feature extractor (we
use the same value as for ImageNet classiﬁcation). We use
COCO train for training and COCO val for evaluation (instead of the combined train+val set which is sometimes used
Feature extractor
FLOPs (%) mAP @ [.5, .95] (%)
ResNet-101 
ResNet-50 (our impl.)
SACT τ = 0.005
56.0 ± 8.5
SACT τ = 0.001
72.4 ± 8.4
ResNet-101 (our impl.)
Table 1: COCO val set. Faster R-CNN with SACT results. FLOPs
are average (± one standard deviation) feature extractor ﬂoating
point operations relative to ResNet-101 (that does 1.42E+11 operations). SACT improves the FLOPs-mAP trade-off compared to
using ResNet without adaptive computation.
in the literature). We do not employ multiscale inference,
iterative box reﬁnement or global context.
We ﬁnd that SACT achieves superior speed-mAP tradeoff compared to the baseline of using non-adaptive ResNet
as a feature extractor (see table 1). SACT τ = 0.005 model
has slightly higher FLOPs count than ResNet-50 and 2.1
points better mAP. Note that this SACT model outperforms
the originally reported result for ResNet-101, 27.2 mAP .
Several examples are presented in ﬁg. 10.
4.3. Visual saliency (cat2000 dataset)
We now show that SACT ponder cost maps correlate well
with human attention. To do that, we use a large dataset
of visual saliency: the cat2000 dataset . The dataset is
obtained by showing 4,000 images of 20 scene categories to
24 human subjects and recording their eye ﬁxation positions.
The ground-truth saliency map is a heat map of the eye
ﬁxation positions. We do not train the SACT models on this
dataset and simply reuse the ImageNet- and COCO-trained
models. Cat2000 saliency maps exhibit a strong center bias.
Most images contain a blob of saliency in the center even
when there is no object of interest located there. Since our
Figure 10: COCO testdev set. Detections and feature extractor ponder cost maps (τ = 0.005). SACT allocates much more computation to
the object-like regions of the image.
AUC-Judd (%)
Center baseline 
DeepFix 
“Inﬁnite humans” 
ImageNet SACT τ = 0.005
COCO SACT τ = 0.005
Table 2: cat2000 validation set. † - results for the test set. SACT
ponder cost maps work as a visual saliency model even without
explicit supervision.
model is fully convolutional, we cannot learn such bias even
if we trained on the saliency data. Therefore, we combine
our ponder cost maps with a constant center-biased map.
We resize the 1920 × 1080 cat2000 images to 320 × 180
for ImageNet model and to 640 × 360 for COCO model
and pass them through the SACT model. Following ,
we consider a linear combination of the Gaussian blurred
ponder cost map normalized to range and a “center
baseline,” a Gaussian centered at the middle of the image.
Full description of the combination scheme is provided in the
supplementary. The ﬁrst half of the training set images for
every scene category is used for determining the optimal values of the Gaussian blur kernel size and the center baseline
multiplier, while the second half is used for validation.
Table 2 presents the AUC-Judd metric, the area under
the ROC-curve for the saliency map as a predictor for eye ﬁxation positions. SACT outperforms the na¨ıve center baseline.
Compared to the state-of-the-art deep model DeepFix 
method, SACT does competitively. Examples are shown in
5. Conclusion
We present a Residual Network based model with a
spatially varying computation time.
This model is end-
Figure 11: cat2000 saliency dataset. Left to right: image, human
saliency, SACT ponder cost map (COCO model, τ = 0.005) with
postprocessing (see text) and softmax with temperature 1/5. Note
the center bias of the dataset. SACT model performs surprisingly
well on out-of-domain images such as art and fractals.
to-end trainable, deterministic and can be viewed as a
black-box feature extractor. We show its effectiveness in
image classiﬁcation and object detection problems. The
amount of per-position computation in this model correlates well with the human eye ﬁxation positions, suggesting that this model captures the important parts of the image. We hope that this paper will lead to a wider adoption
of attention and adaptive computation time in large-scale
computer vision systems. The source code is available at
 
Acknowledgments. D. Vetrov is supported by Russian Academic Excellence Project ‘5-100’. R. Salakhutdinov is supported in
part by ONR grants N00014-13-1-0721, N00014-14-1-0232, and
the ADeLAIDE grant FA8750-16C-0130-001.