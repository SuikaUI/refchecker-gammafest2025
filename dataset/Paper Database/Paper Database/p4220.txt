Image-to-Image Translation with Conditional Adversarial Networks
Phillip Isola
Jun-Yan Zhu
Tinghui Zhou
Alexei A. Efros
Berkeley AI Research (BAIR) Laboratory, UC Berkeley
{isola,junyanz,tinghuiz,efros}@eecs.berkeley.edu
Labels to Facade
BW to Color
Aerial to Map
Labels to Street Scene
Edges to Photo
Day to Night
Figure 1: Many problems in image processing, graphics, and vision involve translating an input image into a corresponding output image.
These problems are often treated with application-speciﬁc algorithms, even though the setting is always the same: map pixels to pixels.
Conditional adversarial nets are a general-purpose solution that appears to work well on a wide variety of these problems. Here we show
results of the method on several. In each case we use the same architecture and objective, and simply train on different data.
We investigate conditional adversarial networks as a
general-purpose solution to image-to-image translation
problems. These networks not only learn the mapping from
input image to output image, but also learn a loss function to train this mapping. This makes it possible to apply
the same generic approach to problems that traditionally
would require very different loss formulations. We demonstrate that this approach is effective at synthesizing photos
from label maps, reconstructing objects from edge maps,
and colorizing images, among other tasks. Indeed, since the
release of the pix2pix software associated with this paper, a large number of internet users (many of them artists)
have posted their own experiments with our system, further
demonstrating its wide applicability and ease of adoption
without the need for parameter tweaking.
As a community, we no longer hand-engineer our mapping functions,
and this work suggests we can achieve reasonable results
without hand-engineering our loss functions either.
1. Introduction
Many problems in image processing, computer graphics,
and computer vision can be posed as “translating” an input
image into a corresponding output image. Just as a concept
may be expressed in either English or French, a scene may
be rendered as an RGB image, a gradient ﬁeld, an edge map,
a semantic label map, etc. In analogy to automatic language
translation, we deﬁne automatic image-to-image translation
as the task of translating one possible representation of a
scene into another, given sufﬁcient training data (see Figure
1). Traditionally, each of these tasks has been tackled with
separate, special-purpose machinery (e.g., ), despite the fact that the setting
is always the same: predict pixels from pixels. Our goal in
this paper is to develop a common framework for all these
The community has already taken signiﬁcant steps in this
direction, with convolutional neural nets (CNNs) becoming
the common workhorse behind a wide variety of image prediction problems. CNNs learn to minimize a loss function –
an objective that scores the quality of results – and although
the learning process is automatic, a lot of manual effort still
 
goes into designing effective losses. In other words, we still
have to tell the CNN what we wish it to minimize. But, just
like King Midas, we must be careful what we wish for! If
we take a naive approach and ask the CNN to minimize the
Euclidean distance between predicted and ground truth pixels, it will tend to produce blurry results . This is
because Euclidean distance is minimized by averaging all
plausible outputs, which causes blurring. Coming up with
loss functions that force the CNN to do what we really want
– e.g., output sharp, realistic images – is an open problem
and generally requires expert knowledge.
It would be highly desirable if we could instead specify
only a high-level goal, like “make the output indistinguishable from reality”, and then automatically learn a loss function appropriate for satisfying this goal. Fortunately, this is
exactly what is done by the recently proposed Generative
Adversarial Networks (GANs) . GANs
learn a loss that tries to classify if the output image is real
or fake, while simultaneously training a generative model
to minimize this loss. Blurry images will not be tolerated
since they look obviously fake. Because GANs learn a loss
that adapts to the data, they can be applied to a multitude of
tasks that traditionally would require very different kinds of
loss functions.
In this paper, we explore GANs in the conditional setting. Just as GANs learn a generative model of data, conditional GANs (cGANs) learn a conditional generative model
 . This makes cGANs suitable for image-to-image translation tasks, where we condition on an input image and generate a corresponding output image.
GANs have been vigorously studied in the last two
years and many of the techniques we explore in this paper have been previously proposed.
Nonetheless, earlier papers have focused on speciﬁc applications, and
it has remained unclear how effective image-conditional
GANs can be as a general-purpose solution for image-toimage translation. Our primary contribution is to demonstrate that on a wide variety of problems, conditional
GANs produce reasonable results.
Our second contribution is to present a simple framework sufﬁcient to
achieve good results, and to analyze the effects of several important architectural choices. Code is available at
 
2. Related work
Structured losses for image modeling Image-to-image
translation problems are often formulated as per-pixel classiﬁcation or regression (e.g., ). These
formulations treat the output space as “unstructured” in the
sense that each output pixel is considered conditionally independent from all others given the input image. Conditional GANs instead learn a structured loss.
Structured
losses penalize the joint conﬁguration of the output.
Figure 2: Training a conditional GAN to map edges→photo. The
discriminator, D, learns to classify between fake (synthesized by
the generator) and real {edge, photo} tuples. The generator, G,
learns to fool the discriminator. Unlike an unconditional GAN,
both the generator and discriminator observe the input edge map.
large body of literature has considered losses of this kind,
with methods including conditional random ﬁelds , the
SSIM metric , feature matching , nonparametric
losses , the convolutional pseudo-prior , and losses
based on matching covariance statistics . The conditional GAN is different in that the loss is learned, and can, in
theory, penalize any possible structure that differs between
output and target.
Conditional GANs We are not the ﬁrst to apply GANs
in the conditional setting. Prior and concurrent works have
conditioned GANs on discrete labels , text ,
and, indeed, images. The image-conditional models have
tackled image prediction from a normal map , future
frame prediction , product photo generation , and
image generation from sparse annotations (c.f. 
for an autoregressive approach to the same problem). Several other papers have also used GANs for image-to-image
mappings, but only applied the GAN unconditionally, relying on other terms (such as L2 regression) to force the
output to be conditioned on the input. These papers have
achieved impressive results on inpainting , future state
prediction , image manipulation guided by user constraints , style transfer , and superresolution .
Each of the methods was tailored for a speciﬁc application. Our framework differs in that nothing is applicationspeciﬁc. This makes our setup considerably simpler than
most others.
Our method also differs from the prior works in several
architectural choices for the generator and discriminator.
Unlike past work, for our generator we use a “U-Net”-based
architecture , and for our discriminator we use a convolutional “PatchGAN” classiﬁer, which only penalizes structure at the scale of image patches. A similar PatchGAN architecture was previously proposed in to capture local
style statistics. Here we show that this approach is effective
on a wider range of problems, and we investigate the effect
of changing the patch size.
GANs are generative models that learn a mapping from
random noise vector z to output image y, G : z →y . In
contrast, conditional GANs learn a mapping from observed
image x and random noise vector z, to y, G : {x, z} →y.
The generator G is trained to produce outputs that cannot be
distinguished from “real” images by an adversarially trained
discriminator, D, which is trained to do as well as possible
at detecting the generator’s “fakes”. This training procedure
is diagrammed in Figure 2.
3.1. Objective
The objective of a conditional GAN can be expressed as
LcGAN(G, D) =Ex,y[log D(x, y)]+
Ex,z[log(1 −D(x, G(x, z))],
where G tries to minimize this objective against an adversarial D that tries to maximize it, i.e.
arg minG maxD LcGAN(G, D).
To test the importance of conditioning the discriminator,
we also compare to an unconditional variant in which the
discriminator does not observe x:
LGAN(G, D) =Ey[log D(y)]+
Ex,z[log(1 −D(G(x, z))].
Previous approaches have found it beneﬁcial to mix the
GAN objective with a more traditional loss, such as L2 distance . The discriminator’s job remains unchanged, but
the generator is tasked to not only fool the discriminator but
also to be near the ground truth output in an L2 sense. We
also explore this option, using L1 distance rather than L2 as
L1 encourages less blurring:
LL1(G) = Ex,y,z[∥y −G(x, z)∥1].
Our ﬁnal objective is
G∗= arg min
D LcGAN(G, D) + λLL1(G).
Without z, the net could still learn a mapping from x
to y, but would produce deterministic outputs, and therefore fail to match any distribution other than a delta function. Past conditional GANs have acknowledged this and
provided Gaussian noise z as an input to the generator, in
addition to x (e.g., ). In initial experiments, we did not
ﬁnd this strategy effective – the generator simply learned
to ignore the noise – which is consistent with Mathieu et
al. . Instead, for our ﬁnal models, we provide noise
only in the form of dropout, applied on several layers of our
generator at both training and test time. Despite the dropout
noise, we observe only minor stochasticity in the output of
our nets. Designing conditional GANs that produce highly
stochastic output, and thereby capture the full entropy of the
conditional distributions they model, is an important question left open by the present work.
Encoder-decoder
Figure 3: Two choices for the architecture of the generator. The
“U-Net” is an encoder-decoder with skip connections between mirrored layers in the encoder and decoder stacks.
3.2. Network architectures
We adapt our generator and discriminator architectures
from those in . Both generator and discriminator use
modules of the form convolution-BatchNorm-ReLu .
Details of the architecture are provided in the supplemental materials online, with key features discussed below.
Generator with skips
A deﬁning feature of image-to-image translation problems
is that they map a high resolution input grid to a high resolution output grid. In addition, for the problems we consider,
the input and output differ in surface appearance, but both
are renderings of the same underlying structure. Therefore,
structure in the input is roughly aligned with structure in the
output. We design the generator architecture around these
considerations.
Many previous solutions to problems
in this area have used an encoder-decoder network . In
such a network, the input is passed through a series of layers that progressively downsample, until a bottleneck layer,
at which point the process is reversed. Such a network requires that all information ﬂow pass through all the layers,
including the bottleneck. For many image translation problems, there is a great deal of low-level information shared
between the input and output, and it would be desirable to
shuttle this information directly across the net. For example, in the case of image colorization, the input and output
share the location of prominent edges.
To give the generator a means to circumvent the bottleneck for information like this, we add skip connections, following the general shape of a “U-Net” . Speciﬁcally, we
add skip connections between each layer i and layer n −i,
where n is the total number of layers. Each skip connection simply concatenates all channels at layer i with those
at layer n −i.
Markovian discriminator (PatchGAN)
It is well known that the L2 loss – and L1, see Figure 4 – produces blurry results on image generation problems . Although these losses fail to encourage highfrequency crispness, in many cases they nonetheless accurately capture the low frequencies. For problems where this
is the case, we do not need an entirely new framework to
enforce correctness at the low frequencies. L1 will already
This motivates restricting the GAN discriminator to only
model high-frequency structure, relying on an L1 term to
force low-frequency correctness (Eqn. 4). In order to model
high-frequencies, it is sufﬁcient to restrict our attention to
the structure in local image patches. Therefore, we design
a discriminator architecture – which we term a PatchGAN
– that only penalizes structure at the scale of patches. This
discriminator tries to classify if each N ×N patch in an image is real or fake. We run this discriminator convolutionally across the image, averaging all responses to provide the
ultimate output of D.
In Section 4.4, we demonstrate that N can be much
smaller than the full size of the image and still produce
high quality results. This is advantageous because a smaller
PatchGAN has fewer parameters, runs faster, and can be
applied to arbitrarily large images.
Such a discriminator effectively models the image as a
Markov random ﬁeld, assuming independence between pixels separated by more than a patch diameter. This connection was previously explored in , and is also the common assumption in models of texture and style
 . Therefore, our PatchGAN can be understood as a form of texture/style loss.
3.3. Optimization and inference
To optimize our networks, we follow the standard approach from : we alternate between one gradient descent step on D, then one step on G.
As suggested in
the original GAN paper, rather than training G to minimize log(1 −D(x, G(x, z)), we instead train to maximize
log D(x, G(x, z)) . In addition, we divide the objective by 2 while optimizing D, which slows down the rate at
which D learns relative to G. We use minibatch SGD and
apply the Adam solver , with a learning rate of 0.0002,
and momentum parameters β1 = 0.5, β2 = 0.999.
At inference time, we run the generator net in exactly
the same manner as during the training phase. This differs
from the usual protocol in that we apply dropout at test time,
and we apply batch normalization using the statistics of
the test batch, rather than aggregated statistics of the training batch. This approach to batch normalization, when the
batch size is set to 1, has been termed “instance normalization” and has been demonstrated to be effective at image generation tasks . In our experiments, we use batch
sizes between 1 and 10 depending on the experiment.
4. Experiments
To explore the generality of conditional GANs, we test
the method on a variety of tasks and datasets, including both
graphics tasks, like photo generation, and vision tasks, like
semantic segmentation:
• Semantic labels↔photo, trained on the Cityscapes
dataset .
• Architectural labels→photo, trained on CMP Facades
• Map↔aerial photo, trained on data scraped from
Google Maps.
• BW→color photos, trained on .
• Edges→photo, trained on data from and ; binary edges generated using the HED edge detector 
plus postprocessing.
• Sketch→photo: tests edges→photo models on humandrawn sketches from .
• Day→night, trained on .
• Thermal→color photos, trained on data from .
• Photo with missing pixels→inpainted photo, trained
on Paris StreetView from .
Details of training on each of these datasets are provided
in the supplemental materials online. In all cases, the input and output are simply 1-3 channel images. Qualitative results are shown in Figures 8, 9, 11, 10, 13, 14, 15,
16, 17, 18, 19, 20. Several failure cases are highlighted
in Figure 21. More comprehensive results are available at
 
Data requirements and speed We note that decent results can often be obtained even on small datasets. Our facade training set consists of just 400 images (see results in
Figure 14), and the day to night training set consists of only
91 unique webcams (see results in Figure 15). On datasets
of this size, training can be very fast: for example, the results shown in Figure 14 took less than two hours of training
on a single Pascal Titan X GPU. At test time, all models run
in well under a second on this GPU.
4.1. Evaluation metrics
Evaluating the quality of synthesized images is an open
and difﬁcult problem . Traditional metrics such as perpixel mean-squared error do not assess joint statistics of the
result, and therefore do not measure the very structure that
structured losses aim to capture.
To more holistically evaluate the visual quality of our results, we employ two tactics. First, we run “real vs. fake”
perceptual studies on Amazon Mechanical Turk (AMT).
For graphics problems like colorization and photo generation, plausibility to a human observer is often the ultimate
goal. Therefore, we test our map generation, aerial photo
generation, and image colorization using this approach.
Ground truth
Figure 4: Different losses induce different quality of results. Each column shows results trained under a different loss. Please see
 for additional examples.
Second, we measure whether or not our synthesized
cityscapes are realistic enough that off-the-shelf recognition
system can recognize the objects in them. This metric is
similar to the “inception score” from , the object detection evaluation in , and the “semantic interpretability”
measures in and .
AMT perceptual studies For our AMT experiments, we
followed the protocol from : Turkers were presented
with a series of trials that pitted a “real” image against a
“fake” image generated by our algorithm. On each trial,
each image appeared for 1 second, after which the images
disappeared and Turkers were given unlimited time to respond as to which was fake. The ﬁrst 10 images of each
session were practice and Turkers were given feedback. No
feedback was provided on the 40 trials of the main experiment. Each session tested just one algorithm at a time, and
Turkers were not allowed to complete more than one session. ∼50 Turkers evaluated each algorithm. Unlike ,
we did not include vigilance trials. For our colorization experiments, the real and fake images were generated from the
same grayscale input. For map↔aerial photo, the real and
fake images were not generated from the same input, in order to make the task more difﬁcult and avoid ﬂoor-level results. For map↔aerial photo, we trained on 256×256 resolution images, but exploited fully-convolutional translation
(described above) to test on 512 × 512 images, which were
then downsampled and presented to Turkers at 256 × 256
resolution.
For colorization, we trained and tested on
256 × 256 resolution images and presented the results to
Turkers at this same resolution.
“FCN-score” While quantitative evaluation of generative models is known to be challenging, recent works have tried using pre-trained semantic classiﬁers
to measure the discriminability of the generated stimuli as a
pseudo-metric. The intuition is that if the generated images
are realistic, classiﬁers trained on real images will be able
to classify the synthesized image correctly as well. To this
end, we adopt the popular FCN-8s architecture for semantic segmentation, and train it on the cityscapes dataset.
We then score synthesized photos by the classiﬁcation accuracy against the labels these photos were synthesized from.
4.2. Analysis of the objective function
Which components of the objective in Eqn. 4 are important? We run ablation studies to isolate the effect of the L1
term, the GAN term, and to compare using a discriminator
conditioned on the input (cGAN, Eqn. 1) against using an
unconditional discriminator (GAN, Eqn. 2).
Encoder-decoder
Figure 5: Adding skip connections to an encoder-decoder to create
a “U-Net” results in much higher quality results.
Per-pixel acc.
Per-class acc.
Ground truth
Table 1: FCN-scores for different losses, evaluated on Cityscapes
labels↔photos.
Per-pixel acc.
Per-class acc.
Encoder-decoder (L1)
Encoder-decoder (L1+cGAN)
U-net (L1)
U-net (L1+cGAN)
Table 2: FCN-scores for different generator architectures (and objectives), evaluated on Cityscapes labels↔photos.
(U-net (L1cGAN) scores differ from those reported in other tables since batch
size was 10 for this experiment and 1 for other tables, and random
variation between training runs.)
Discriminator
receptive ﬁeld
Per-pixel acc.
Per-class acc.
Table 3: FCN-scores for different receptive ﬁeld sizes of the discriminator, evaluated on Cityscapes labels→photos. Note that input images are 256 × 256 pixels and larger receptive ﬁelds are
padded with zeros.
Figure 4 shows the qualitative effects of these variations
on two labels→photo problems. L1 alone leads to reasonable but blurry results. The cGAN alone (setting λ = 0 in
Eqn. 4) gives much sharper results but introduces visual artifacts on certain applications. Adding both terms together
(with λ = 100) reduces these artifacts.
We quantify these observations using the FCN-score on
the cityscapes labels→photo task (Table 1): the GAN-based
objectives achieve higher scores, indicating that the synthesized images include more recognizable structure. We also
test the effect of removing conditioning from the discriminator (labeled as GAN). In this case, the loss does not penalize mismatch between the input and output; it only cares
that the output look realistic. This variant results in poor
performance; examining the results reveals that the generator collapsed into producing nearly the exact same output
regardless of input photograph. Clearly, it is important, in
this case, that the loss measure the quality of the match between input and output, and indeed cGAN performs much
better than GAN. Note, however, that adding an L1 term
also encourages that the output respect the input, since the
L1 loss penalizes the distance between ground truth outputs, which correctly match the input, and synthesized outputs, which may not. Correspondingly, L1+GAN is also
effective at creating realistic renderings that respect the input label maps. Combining all terms, L1+cGAN, performs
similarly well.
Colorfulness A striking effect of conditional GANs is
that they produce sharp images, hallucinating spatial structure even where it does not exist in the input label map. One
might imagine cGANs have a similar effect on “sharpening”
in the spectral dimension – i.e. making images more colorful. Just as L1 will incentivize a blur when it is uncertain
where exactly to locate an edge, it will also incentivize an
average, grayish color when it is uncertain which of several plausible color values a pixel should take on. Specially,
L1 will be minimized by choosing the median of the conditional probability density function over possible colors. An
adversarial loss, on the other hand, can in principle become
aware that grayish outputs are unrealistic, and encourage
matching the true color distribution . In Figure 7, we
investigate whether our cGANs actually achieve this effect
on the Cityscapes dataset. The plots show the marginal distributions over output color values in Lab color space. The
ground truth distributions are shown with a dotted line. It
is apparent that L1 leads to a narrower distribution than the
ground truth, conﬁrming the hypothesis that L1 encourages
average, grayish colors. Using a cGAN, on the other hand,
pushes the output distribution closer to the ground truth.
4.3. Analysis of the generator architecture
A U-Net architecture allows low-level information to
shortcut across the network. Does this lead to better results?
Figure 5 and Table 2 compare the U-Net against an encoderdecoder on cityscape generation. The encoder-decoder is
created simply by severing the skip connections in the U-
Net. The encoder-decoder is unable to learn to generate
realistic images in our experiments. The advantages of the
U-Net appear not to be speciﬁc to conditional GANs: when
both U-Net and encoder-decoder are trained with an L1 loss,
the U-Net again achieves the superior results.
4.4. From PixelGANs to PatchGANs to ImageGANs
We test the effect of varying the patch size N of our discriminator receptive ﬁelds, from a 1 × 1 “PixelGAN” to a
Figure 6: Patch size variations. Uncertainty in the output manifests itself differently for different loss functions. Uncertain regions become
blurry and desaturated under L1. The 1x1 PixelGAN encourages greater color diversity but has no effect on spatial statistics. The 16x16
PatchGAN creates locally sharp results, but also leads to tiling artifacts beyond the scale it can observe. The 70×70 PatchGAN forces
outputs that are sharp, even if incorrect, in both the spatial and spectral (colorfulness) dimensions. The full 286×286 ImageGAN produces
results that are visually similar to the 70×70 PatchGAN, but somewhat lower quality according to our FCN-score metric (Table 3). Please
see for additional examples.
L1+pixelcGAN
Ground truth
Histogram intersection
against ground truth
Figure 7: Color distribution matching property of the cGAN, tested on Cityscapes. (c.f. Figure 1 of the original GAN paper ). Note
that the histogram intersection scores are dominated by differences in the high probability region, which are imperceptible in the plots,
which show log probability and therefore emphasize differences in the low probability regions.
full 286 × 286 “ImageGAN”1. Figure 6 shows qualitative
results of this analysis and Table 3 quantiﬁes the effects using the FCN-score. Note that elsewhere in this paper, unless
speciﬁed, all experiments use 70 × 70 PatchGANs, and for
this section all experiments use an L1+cGAN loss.
The PixelGAN has no effect on spatial sharpness but
does increase the colorfulness of the results (quantiﬁed in
Figure 7). For example, the bus in Figure 6 is painted gray
when the net is trained with an L1 loss, but becomes red
with the PixelGAN loss. Color histogram matching is a
common problem in image processing , and PixelGANs
may be a promising lightweight solution.
Using a 16×16 PatchGAN is sufﬁcient to promote sharp
outputs, and achieves good FCN-scores, but also leads to
tiling artifacts.
The 70 × 70 PatchGAN alleviates these
artifacts and achieves slightly better scores.
Scaling beyond this, to the full 286 × 286 ImageGAN, does not appear to improve the visual quality of the results, and in
fact gets a considerably lower FCN-score (Table 3). This
may be because the ImageGAN has many more parameters
and greater depth than the 70 × 70 PatchGAN, and may be
harder to train.
Fully-convolutional translation An advantage of the
PatchGAN is that a ﬁxed-size patch discriminator can be
applied to arbitrarily large images. We may also apply the
1We achieve this variation in patch size by adjusting the depth of the
GAN discriminator. Details of this process, and the discriminator architectures, are provided in the in the supplemental materials online.
Photo →Map
Map →Photo
% Turkers labeled real
% Turkers labeled real
2.8% ± 1.0%
0.8% ± 0.3%
6.1% ± 1.3%
18.9% ± 2.5%
Table 4: AMT “real vs fake” test on maps↔aerial photos.
% Turkers labeled real
L2 regression from 
16.3% ± 2.4%
Zhang et al. 2016 
27.8% ± 2.7%
22.5% ± 1.6%
Table 5: AMT “real vs fake” test on colorization.
generator convolutionally, on larger images than those on
which it was trained. We test this on the map↔aerial photo
task. After training a generator on 256×256 images, we test
it on 512×512 images. The results in Figure 8 demonstrate
the effectiveness of this approach.
4.5. Perceptual validation
We validate the perceptual realism of our results on the
tasks of map↔aerial photograph and grayscale→color. Results of our AMT experiment for map↔photo are given in
Table 4. The aerial photos generated by our method fooled
participants on 18.9% of trials, signiﬁcantly above the L1
baseline, which produces blurry results and nearly never
fooled participants. In contrast, in the photo→map direction our method only fooled participants on 6.1% of trials, and this was not signiﬁcantly different than the performance of the L1 baseline (based on bootstrap test). This
may be because minor structural errors are more visible
Map to aerial photo
Aerial photo to map
Figure 8: Example results on Google Maps at 512x512 resolution (model was trained on images at 256 × 256 resolution, and run convolutionally on the larger images at test time). Contrast adjusted for clarity.
Classiﬁcation
(rebal.) (L1 + cGAN) Ground truth
Figure 9: Colorization results of conditional GANs versus the L2
regression from and the full method (classiﬁcation with rebalancing) from . The cGANs can produce compelling colorizations (ﬁrst two rows), but have a common failure mode of
producing a grayscale or desaturated result (last row).
in maps, which have rigid geometry, than in aerial photographs, which are more chaotic.
We trained colorization on ImageNet , and tested
on the test split introduced by . Our method, with
L1+cGAN loss, fooled participants on 22.5% of trials (Ta-
Ground truth
Figure 10: Applying a conditional GAN to semantic segmentation. The cGAN produces sharp images that look at glance like
the ground truth, but in fact include many small, hallucinated objects.
ble 5). We also tested the results of and a variant of
their method that used an L2 loss (see for details). The
conditional GAN scored similarly to the L2 variant of 
(difference insigniﬁcant by bootstrap test), but fell short of
 ’s full method, which fooled participants on 27.8% of
trials in our experiment. We note that their method was
speciﬁcally engineered to do well on colorization.
4.6. Semantic segmentation
Conditional GANs appear to be effective on problems
where the output is highly detailed or photographic, as is
common in image processing and graphics tasks.
by Jack Qiao
sketch by Ivy Tsai
by Kaihu Chen
by Mario Klingemann
by Brannon Dorsey
by Bertrand Gondouin
sketch by Yann LeCun
#fotogenerator
Figure 11: Example applications developed by online community based on our pix2pix codebase: #edges2cats by Christopher Hesse,
Background removal by Kaihu Chen, Palette generation by Jack Qiao, Sketch →Portrait by Mario Klingemann, Sketch→
Pokemon by Bertrand Gondouin, “Do As I Do” pose transfer by Brannon Dorsey, and #fotogenerator by Bosman et al. .
Per-pixel acc.
Per-class acc.
Table 6: Performance of photo→labels on cityscapes.
about vision problems, like semantic segmentation, where
the output is instead less complex than the input?
To begin to test this, we train a cGAN (with/without L1
loss) on cityscape photo→labels. Figure 10 shows qualitative results, and quantitative classiﬁcation accuracies are reported in Table 6. Interestingly, cGANs, trained without the
L1 loss, are able to solve this problem at a reasonable degree
of accuracy. To our knowledge, this is the ﬁrst demonstration of GANs successfully generating “labels”, which are
nearly discrete, rather than “images”, with their continuousvalued variation2. Although cGANs achieve some success,
they are far from the best available method for solving this
problem: simply using L1 regression gets better scores than
using a cGAN, as shown in Table 6. We argue that for vision problems, the goal (i.e. predicting output close to the
ground truth) may be less ambiguous than graphics tasks,
and reconstruction losses like L1 are mostly sufﬁcient.
4.7. Community-driven Research
Since the initial release of the paper and our pix2pix
codebase, the Twitter community, including computer vision and graphics practitioners as well as visual artists, have
successfully applied our framework to a variety of novel
image-to-image translation tasks, far beyond the scope of
the original paper. Figure 11 and Figure 12 show just a
few examples from the #pix2pix hashtag, including Background removal, Palette generation, Sketch →Portrait,
Sketch→Pokemon, ”Do as I Do” pose transfer, Learning
to see: Gloomy Sunday, as well as the bizarrely popular
#edges2cats and #fotogenerator. Note that these applications are creative projects, were not obtained in controlled,
scientiﬁc conditions, and may rely on some modiﬁcations to
2Note that the label maps we train on are not exactly discrete valued,
as they are resized from the original maps using bilinear interpolation and
saved as jpeg images, with some compression artifacts.
Figure 12: Learning to see: Gloomy Sunday: An interactive artistic demo developed by Memo Akten based on our pix2pix
codebase. Please click the image to play the video in a browser.
the pix2pix code we released. Nonetheless, they demonstrate the promise of our approach as a generic commodity
tool for image-to-image translation problems.
5. Conclusion
The results in this paper suggest that conditional adversarial networks are a promising approach for many imageto-image translation tasks, especially those involving highly
structured graphical outputs. These networks learn a loss
adapted to the task and data at hand, which makes them applicable in a wide variety of settings.
Acknowledgments:
We thank Richard Zhang, Deepak
Pathak, and Shubham Tulsiani for helpful discussions, Saining Xie for help with the HED edge detector, and the online
community for exploring many applications and suggesting
improvements. Thanks to Christopher Hesse, Memo Akten, Kaihu Chen, Jack Qiao, Mario Klingemann, Brannon
Dorsey, Gerda Bosman, Ivy Tsai, and Yann LeCun for allowing the use of their creations in Figure 11 and Figure 12.
This work was supported in part by NSF SMA-1514512,
NGA NURI, IARPA via Air Force Research Laboratory, Intel Corp, Berkeley Deep Drive, and hardware donations by
Nvidia. J.-Y.Z. is supported by the Facebook Graduate Fellowship. Disclaimer: The views and conclusions contained
herein are those of the authors and should not be interpreted
as necessarily representing the ofﬁcial policies or endorsements, either expressed or implied, of IARPA, AFRL or the
U.S. Government.
Ground truth
Ground truth
Figure 13: Example results of our method on Cityscapes labels→photo, compared to ground truth.
Ground truth
Ground truth
Figure 14: Example results of our method on facades labels→photo, compared to ground truth.
Ground truth
Ground truth
Figure 15: Example results of our method on day→night, compared to ground truth.
Ground truth
Ground truth
Figure 16: Example results of our method on automatically detected edges→handbags, compared to ground truth.
Ground truth
Ground truth
Figure 17: Example results of our method on automatically detected edges→shoes, compared to ground truth.
Figure 18: Additional results of the edges→photo models applied to human-drawn sketches from . Note that the models were trained
on automatically detected edges, but generalize to human drawings
Figure 19: Example results on photo inpainting, compared to , on the Paris StreetView dataset . This experiment demonstrates that
the U-net architecture can be effective even when the predicted pixels are not geometrically aligned with the information in the input – the
information used to ﬁll in the central hole has to be found in the periphery of these photos.
Ground truth
Ground truth
Figure 20: Example results on translating thermal images to RGB photos, on the dataset from .
Street scene
Figure 21: Example failure cases. Each pair of images shows input on the left and output on the right. These examples are selected as some
of the worst results on our tasks. Common failures include artifacts in regions where the input image is sparse, and difﬁculty in handling
unusual inputs. Please see for more comprehensive results.