Intelligent intrusion detection systems using artificial
neural networks
SHENFIELD, Alex < >, DAY, David and
AYESH, Aladdin
Available from Sheffield Hallam University Research Archive (SHURA) at:
 
This document is the Published Version [VoR]
SHENFIELD, Alex, DAY, David and AYESH, Aladdin . Intelligent intrusion
detection systems using artificial neural networks. ICT Express. [Article]
Copyright and re-use policy
See 
Sheffield Hallam University Research Archive
 
Available online at www.sciencedirect.com
ScienceDirect
ICT Express 4 95–99
www.elsevier.com/locate/icte
Intelligent intrusion detection systems using artificial neural networks
Alex Shenfielda,∗, David Dayb, Aladdin Ayeshb
a Department of Engineering and Mathematics, Sheffield Hallam University, Sheffield, UK
b Department of Computing, De Montfort University, Leicester, UK
Received 6 February 2018; accepted 9 April 2018
Available online 1 May 2018
This paper presents a novel approach to detection of malicious network traffic using artificial neural networks suitable for use in deep packet
inspection based intrusion detection systems. Experimental results using a range of typical benign network traffic data (images, dynamic link
library files, and a selection of other miscellaneous files such as logs, music files, and word processing documents) and malicious shell code files
sourced from the online exploit and vulnerability repository exploitdb , have shown that the proposed artificial neural network architecture is
able to distinguish between benign and malicious network traffic accurately.
The proposed artificial neural network architecture obtains an average accuracy of 98%, an average area under the receiver operator
characteristic curve of 0.98, and an average false positive rate of less than 2% in repeated 10-fold cross-validation. This shows that the proposed
classification technique is robust, accurate, and precise. The novel approach to malicious network traffic detection proposed in this paper has the
potential to significantly enhance the utility of intrusion detection systems applied to both conventional network traffic analysis and network traffic
analysis for cyber–physical systems such as smart-grids.
c⃝2018 The Korean Institute of Communications and Information Sciences (KICS). Publishing Services by Elsevier B.V. This is an open access
article under the CC BY-NC-ND license ( 
Keywords: Machine learning; Intrusion detection systems; Computer security; Artificial Intelligence
1. Introduction
Network Intrusion Detection Systems (NIDS) are essential in modern computing infrastructure to help monitor and
identify undesirable and malicious network traffic (such as
unauthorised system access or poorly configured systems). The
majority of commercial NIDS are signature based, where a
set of rules are used to determine what constitutes undesirable
network traffic by monitoring patterns in that traffic. Whilst
such systems are highly effective against known threats, signature based detection fails when attack vectors are unknown
or known attacks are modified to get around such rules .
As well as struggling to identify unknown or modified
threats, signature based detection in NIDS in real-world
∗Corresponding author.
E-mail addresses: (A. Shenfield),
 (D. Day), (A. Ayesh).
Peer review under responsibility of The Korean Institute of Communications and Information Sciences (KICS).
scenarios are frequently plagued by false positives. This is
particularly problematic in the detection of malicious shellcode – a high impact threat vector allowing attackers to obtain unauthorised commandline access to both conventional
computer systems and cyber–physical systems such as smart
grid infrastructure –
as shellcode patterns can be difficult
to distinguish from benign network traffic . For example,
while working as a network security consultant for the Shop
Direct Group (UK) using the network intrusion detection tools.
Sguil and Snort from the Debian based Linux distribution
Security Onion, it was noticed that signatures designed to
match shellcode frequently also matched other non shellcode
binaries e.g. DLLs as well as jpg image files. The frequency of
these false positives was such that the signatures themselves
ultimately had to be disabled, rendering them useless. This
experience with the false positive problem with shellcode and
signature based systems is very common, Microsoft discuss
 
2405-9595/ c⃝2018 The Korean Institute of Communications and Information Sciences (KICS). Publishing Services by Elsevier B.V. This is an open access article
under the CC BY-NC-ND license ( 
A. Shenfield et al. / ICT Express 4 95–99
this at length in their patent of methods to detect malicious
shellcode with reduced false positives in memory .
Shellcode is frequently used as a payload in system penetration tools due to the enhanced access and further leverage they
offer to an attacker .
This paper outlines a non-signature based detection mechanism for malicious shellcode based around Artificial Neural
Networks. Results presented show that this novel classification
approach is capable of detecting shellcode with extremely high
accuracy and minimal numbers of false positives. The proposed
approach is validated using repeated 10-fold cross-validation
and is then tested with respect to creation of false positive
alerts on a large dataset of typical network traffic file contents
(achieving a false positive rate of less than 2%).
The rest of this paper is organised as follows: Section 2 provides a background to intrusion detection systems and artificial
neural networks, before Section 3 provides a brief introduction
to the particular instances that motivated the creation of this
system and the results achieved by the proposed AI based
intrusion detection system. Section 4 then concludes with the
main achievements of this research and some potential avenues
for further work.
2. Background and previous work
2.1. Intrusion Detection Systems
The primary aim of an Intrusion Detection System (IDS) is
to identify when a malefactor is attempting to compromise the
operation of a system. That is to say, cause the system to operate
in a manner which it was not designed to do. This could take
the form of a compromise to the confidentiality, availability
and integrity of the system and the data stored and controlled
by it. Systems could be hosts, servers, Internet of Things (IoT)
devices, routers or other intermediary devices . Traditionally,
at the highest level, intrusion detection systems fall into one
of the following two categories, host based intrusion detection
systems (HIDS) and network based intrusion detection systems
(NIDS). The former being an individual device detecting a
compromise and the latter detecting a compromise in transit
over a network . NIDS can be further categorised into
anomaly and signature based systems. Signature based systems
form the mainstay of commercial network intrusion detection
systems with anomaly based still largely a research concept 
with only a few practical vendor backed examples. Increasingly
alerts and other incident information generated via an IDS
act as a feed into security information and event management
(SIEM) systems, along with other logs and feeds allowing a
more complete view of a potential incident to be recorded.
2.2. Artificial Neural Networks
Artificial Neural Networks (ANNs) are a form of machine
learning algorithm inspired by the behaviour of biological
neurons located in the brain and central nervous system .
Inputs to the ANN are typically fed to the artificial neurons
in one or more hidden layers, where they are weighted and
processed to decide the output to the next layer. ANNs make
use of a “learning rule” (often gradient descent based backpropagation of errors) that allows the set of weights and biases
for the hidden layer and output layer neurons to be adaptively
tuned. This self-adaptive nature means that ANNs are capable
of capturing highly complex and non-linear relationships between both dependent and independent variables without prior
knowledge .
ANNs have been used in a wide variety of classification tasks
across many application domains. In contrast to traditional classification methods, such as logistic regression and discriminant
analysis, which require a good understanding of the underlying assumptions of the probability model of the system that
produced the data, ANNs are a “black-box” technique capable
of adapting to the underlying system model . This makes
them particularly useful in fields such as decision support for
concealed weapons detection , prediction and classification
of Internet traffic , and signature verification where
their ability to adapt to the data, especially in high dimensional
datasets, overcomes many of the difficulties in model building
associated with conventional classification techniques such as
decision trees and k-nearest neighbour algorithms .
ANNs have also been used in several computer security domains, including the analysis of software design flaws and
computer virus detection . ANN approaches to detection
of multiple types of network attacks have also been shown to
be effective , though their application to the detection of
shellcode was not considered.
3. Detecting shellcode in complex network traffic
3.1. Problem domain
Detecting shellcode within complex network traffic poses
many challenges for network intrusion detection systems due
to the low-level code (usually machine code), small size, and
frequently obfuscated nature of the exploits. This is further
complicated by the observation that, to signature based detection methods, the binary patterns in shellcode often look
indistinguishable from many other forms of benign network
The work presented in this paper was motivated by the
experience of one of the authors working as a network security
consultant for a major UK online retailer. Using conventional
network intrusion detection tools such as Snort and
Sguil to provide event driven analysis of NIDS alerts
produce a high level of false positives — with many of these
alerts being produced by benign binary and image files. A
frequent culprit of false positives was found to be the delivery
of files such as DLLs via Windows Update.
3.2. Artificial neural network design
The byte level data from the network traffic dataset used
was converted into integer values to feed into the artificial
neural network. Care was taken to avoid the “magic numbers”
often present at the start of files, as these would be deceptively easy for the classifier to find and are possible to spoof
A. Shenfield et al. / ICT Express 4 95–99
Fig. 1. Byte value data of three different file types: top: images, middle: DLLs,
bottom: shellcode.
Results of malicious file content detection.
0.98 (0.01)
0.97 (0.01)
Sensitivity
0.95 (0.04)
(especially when designing obfuscated shellcode). 1000 bytes
of contiguous data was extracted and used as an input to the
ANN (using zero padding where necessary). Initial exploration
and visualisation of the data showed definite patterns within
different file types (as shown in Fig. 1), although there was
considerable variability between files of the same class.
The ANN for these experiments was implemented using the
MATLAB Neural Network Toolbox . The optimal
structure of the ANN was found through a grid search process,
with the best structure (in terms of classification accuracy)
for the ANN found to be a multi-layer perceptron (MLP)
with two hidden layers of 30 hidden neurons each. The ANN
structure optimisation used repeated 10-fold crossvalidation
to evaluate the classifier designs. An overview of the final
optimised classifier design is shown in Fig. 2. The resilient
backpropagation learning strategy (using a default learning rate
of 0.01 and training for a maximum of 1000 epochs) was used to
train the neural network, with Xavier Glorot initialisation 
used to set the initial values of the weights.
3.3. Results
The artificial neural network classifier outlined in Section 3.2 above was applied to the network traffic dataset
contain- ing both benign and malicious files. Repeated 10fold crossval- idation was used to ensure that the classifier
generalises well to unseen data. Table 1 shows the mean (in
bold) and standard deviation of the accuracy, precision, and
sensitivity obtained over 1000 iterations of repeated 10-fold
crossvalidation.
Fig. 2. Final artificial neural network design.
Fig. 3. Receiver-Operator Characteristics Curve for Malicious File Content
Detection.
Fig. 3 shows a Receiver-Operator Characteristics (ROC)
curve generated using the data for all 1000 iterations of the
repeated 10-fold crossvalidation process. ROC curves are commonly used to analyse the trade-off between sensitivity and
specificity of classifiers across different classification thresholds. The area under the ROC curve (reported in Table 2) can be
used to characterise the overall discrimination of a classification
model (with a higher value for the area under the ROC curve
indicating that the classifier is better at distinguishing between
the two different classes). The bold blue line in Fig. 3 indicates
the average ROC curve across all 1000 iterations of the repeated
10-fold crossvalidation, and the grey shaded area indicates the
range of ROC curves produced over the course of all 1000
iterations. The dashed red line indicates the performance of
A. Shenfield et al. / ICT Express 4 95–99
Metrics for the area under the ROC curve (AUROC).
Average AUROC
Standard deviation AUROC
Maximum AUROC
Minimum AUROC
Fig. 4. Confusion Plot for Completely Unseen Test Data.
a classifier which chooses which class a file belongs to at
random (this is considered as a baseline for the “worst case”
classification performance).
Fig. 4 shows the performance of one of the best performing
trained artificial neural network designs on a completely unseen
test set (the file contents in this dataset were not used either
for training or in the crossvalidation process). As you can see
the best performing trained classifier has correctly identified
100% of malicious file contents in the test set, without any false
positives!
The performance of the best trained classifier was also tested
with regards to flagging up false positives on an extremely large
dataset of candidate network traffic data contents. A key driver
of this is that, if a network intrusion detection system flags
up too many false positives, it becomes useless because any
true malicious code is drowned out by benign traffic that has
been misidentified. To test this, data from 400,000 random files
(consisting of a mixture of text files, log files, compressed and
uncompressed music, executables, office documents, and other
miscellaneous file data) was extracted into the same format as
expected by the artificial neural network and the classifier ran
on this benign data. Across this large scale dataset the classifier
misidentified 7337 samples (approximately 1.8% of all the data
4. Conclusions and further work
The intelligent intrusion detection system outlined in this
paper significantly improves upon the performance of signature
based detection methods by utilising an artificial neural network
classifier for the identification of shellcode patterns in network
traffic. The ANN based classifier not only achieves perfect
sensitivity on the test dataset (identifying all instances of
shellcode), it also exhibits excellent precision (minimising the
number of false positives identified). The performance of the
proposed approach was then further evaluated with respect to
the false positive rate by testing on an extremely large (400,000
samples) set of benign network traffic file content — where the
proposed approach achieved a false positive rate of less than
2%. Minimising the false positive rate is a major concern for the
application of network intrusion systems in the real-world, as
high levels of false positives result in an extremely poor signalto-noise ratio and often render the system useless.
The research presented in this paper describes an offline
approach to detecting shellcode patterns within data. Work is
currently ongoing to integrate the approach proposed in this
paper into online network intrusion detection systems and to
test on real-time network data, with further real-time optimisations for live network traffic an active area of development.
Another area identified for further work is the application of the
intelligent approach to intrusion detection outlined here to other
areas of network security such as the detection of cross-site
scripting attacks and SQL injection attacks on web applications.
Conflict of interest
The authors declare that there is no conflict of interest in this