Towards Generalization and Simplicity
in Continuous Control
Aravind Rajeswaran∗
Kendall Lowrey∗
Emanuel Todorov
Sham Kakade
University of Washington Seattle
{ aravraj, klowrey, todorov, sham } @ cs.washington.edu
This work shows that policies with simple linear and RBF parameterizations can
be trained to solve a variety of widely studied continuous control tasks, including
the OpenAI gym benchmarks. The performance of these trained policies are competitive with state of the art results, obtained with more elaborate parameterizations
such as fully connected neural networks. Furthermore, the standard training and
testing scenarios for these tasks are shown to be very limited and prone to over-
ﬁtting, thus giving rise to only trajectory-centric policies. Training with a diverse
initial state distribution induces more global policies with better generalization.
This allows for interactive control scenarios where the system recovers from large
on-line perturbations; as shown in the supplementary video.
Introduction
Deep reinforcement learning (deepRL) has recently achieved impressive results on a number of
hard problems, including sequential decision making in game domains . This success has
motivated efforts to adapt deepRL methods for control of physical systems, and has resulted in rich
motor behaviors . The complexity of systems solvable with deepRL methods is not yet at the
level of what can be achieved with trajectory optimization (planning) in simulation , or with
hand-crafted controllers on physical robots (e.g. Boston Dynamics). However, RL approaches are
exciting because they are generic, model-free, and highly automated.
Recent success of RL has been enabled largely due to engineering efforts such
as large scale data collection or careful systems design with well behaved robots.
When advances in a ﬁeld are largely empirical in nature, it is important to understand the relative
contributions of representations, optimization methods, and task design or modeling: both as a
sanity check and to scale up to harder tasks. Furthermore, in line with Occam’s razor, the simplest
reasonable approaches should be tried and understood ﬁrst. A thorough understanding of these factors
is unfortunately lacking in the community.
In this backdrop, we ask the pertinent question: "What are the simplest set of ingredients needed
to succeed in some of the popular benchmarks?" To attempt this question, we use the Gym-v1 
continuous control benchmarks, which have accelerated research and enabled objective comparisons.
Since the tasks involve under-actuation, contact dynamics, and are high dimensional (continuous
space), they have been accepted as benchmarks in the deepRL community. Recent works test their
algorithms either exclusively or primarily on these tasks , and success on these tasks have
been regarded as demonstrating a “proof of concept”.
Our contributions:
Our results and their implications are highlighted below with more elaborate
discussions in Section 5:
∗Equal contributions. Project page: 
31st Conference on Neural Information Processing Systems , Long Beach, CA, USA.
 
1. The success of recent RL efforts to produce rich motor behaviors have largely been attributed
to the use of multi-layer neural network architectures. This work is among the ﬁrst to carefully
analyze the role of representation, and our results indicate that very simple policies including
linear and RBF parameterizations are able to achieve state of the art results on widely studied tasks.
Furthermore, such policies, particularly the linear ones, can be trained signiﬁcantly faster (almost
20x) due to orders of magnitude fewer parameters. This indicates that even for tasks with complex
dynamics, there could exist relatively simple policies. This opens the door for studying a wide
range of representations in addition to deep neural networks and understand trade-offs including
computational time, theoretical justiﬁcation, robustness, sample complexity etc.
2. We study these issues not only with regards to the performance metric at hand but we also take
the further step in examining them in the context of robustness. Our results indicate that, with
conventional training methods, the agent is able to successfully learn a limit cycle for walking,
but cannot recover from any perturbations that are delivered to it. For transferring the success of
RL to robotics, such brittleness is highly undesirable.
3. Finally, we directly attempt to learn more robust policies through using more diverse training conditions, which favor such policies. This is similar in spirit to the model ensemble
approaches and domain randomization approaches , which have successfully
demonstrated improved robustness and simulation to real world transfer. Under these new and
more diverse training scenarios, we again ﬁnd that there is no compelling evidence to favor the
use of multi-layer architectures, at least for the benchmark tasks. On a side note, we also provide
interactive testing of learned policies, which we believe is both novel and which sheds light on
the robustness of trained policies.
Overall, we note that this work does not attempt to provide a deﬁnitive answer in terms of the
ideal architecture choice for control. Rather, the results in this work suggest that the current set of
benchmark tasks are insufﬁcient to provide insights to this question. We further note that as the
research ﬁeld progresses, it is imperative to revisit these questions to make well calibrated progress.
Problem Formulation and Methods
We consider Markov Decision Processes (MDPs) in the average reward setting, which is deﬁned using
the tuple: M = {S, A, R, T , ρ0}. S ⊆Rn, A ⊆Rm, and R : S × A →R are a (continuous) set of
states, set of actions, and reward function respectively, and have the usual meaning. T : S × A →S
is the stochastic transition function and ρ0 is the probability distribution over initial states. We wish
to solve for a stochastic policy of the form π : S × A →R+, which optimizes the objective function:
η(π) = lim
Since we use simulations with ﬁnite length rollouts to estimate the objective and gradient, we
approximate η(π) using a ﬁnite T. In this ﬁnite horizon rollout setting, we deﬁne the value, Q, and
advantage functions as follows:
V π(s, t) = Eπ,M
Qπ(s, a, t) = EM
+ Es′∼T (s,a)
V π(s′, t + 1)
Aπ(s, a, t) = Qπ(s, a, t) −V π(s, t)
Note that even though the value functions are time-varying, we still optimize for a stationary policy.
We consider parametrized policies πθ, and hence wish to optimize for the parameters (θ). Thus, we
overload notation and use η(π) and η(θ) interchangeably.
Ideally, a controlled scientiﬁc study would seek to isolate the challenges related to architecture,
task design, and training methods for separate study. In practice, this is not entirely feasible as the
results are partly coupled with the training methods. Here, we utilize a straightforward natural policy
gradient method for training. The work in suggests that this method is competitive with most
state of the art methods. We now discuss the training procedure.
Algorithm 1 Policy Search with Natural Gradient
1: Initialize policy parameters to θ0
2: for k = 1 to K do
Collect trajectories {τ (1), . . . τ (N)} by rolling out the stochastic policy π(·; θk).
Compute ∇θ log π(at|st; θk) for each (s, a) pair along trajectories sampled in iteration k.
Compute advantages Aπ
k based on trajectories in iteration k and approximate value function
Compute policy gradient according to (2).
Compute the Fisher matrix (4) and perform gradient ascent (5).
Update parameters of value function in order to approximate V π
) is the empirical return computed as R(s(n)
t′=t γ(t′−t)r(n)
. Here n indexes
over the trajectories.
9: end for
Using the likelihood ratio approach and Markov property of the problem, the sample based estimate
of the policy gradient is derived to be :
∇θη(θ) = g = 1
∇θ log πθ(at|st) ˆ
Aπ(st, at, t)
Gradient ascent using this “vanilla” gradient is sub-optimal since it is not the steepest ascent direction
in the metric of the parameter space . The steepest ascent direction is obtained by solving the
following local optimization problem around iterate θk:
gT (θ −θk)
subject to
(θ −θk)T Fθk(θ −θk) ≤δ,
where Fθk is the Fisher Information Metric at the current iterate θk. We estimate Fθk as
∇θ log πθ(at|st)∇θ log πθ(at|st)T ,
as originally suggested by Kakade . This yields the steepest ascent direction to be ˆF −1
corresponding update rule: θk+1 = θk + α ˆF −1
θk g. Here α is the step-size or learning rate parameter.
Empirically, we observed that choosing a ﬁxed value for α or an appropriate schedule is difﬁcult .
Thus, we use the normalized gradient ascent procedure, where the normalization is under the Fisher
metric. This procedure can be viewed as picking a normalized step size δ as opposed to α, and
solving the optimization problem in (3). This results in the following update rule:
θk+1 = θk +
A dimensional analysis of these quantities reveal that α has the unit of return−1 whereas δ is
dimensionless. Though units of α are consistent with a general optimization setting where step-size
has units of objective−1, in these problems, picking a good α that is consistent with the scales of the
reward was difﬁcult. On the other hand, a constant normalized step size was numerically more stable
and easier to tune: for all the results reported in this paper, the same δ = 0.05 was used. When more
than one trajectory rollout is used per update, the above estimators can be used with an additional
averaging over the trajectories.
For estimating the advantage function, we use the GAE procedure . This requires learning
a function that approximates V π
k , which is used to compute Aπ
k along trajectories for the update
in (5). GAE helps with variance reduction at the cost of introducing bias, and requires tuning
hyperparameters like a discount factor and an exponential averaging term. Good heuristics for these
parameters have been suggested in prior work. The same batch of trajectories cannot be used for both
ﬁtting the value function baseline, and also to estimate g using (2), since it will lead to overﬁtting
and a biased estimate. Thus, we use the trajectories from iteration k −1 to ﬁt the value function,
essentially approximating V π
k−1, and use trajectories from iteration k for computing Aπ
k and g. Similar
procedures have been adopted in prior work .
Policy Architecture
Linear policy:
We ﬁrst consider a linear policy that directly maps from the observations to the
motor torques. We use the same observations as used in prior work which includes joint positions,
joint velocities, and for some tasks, information related to contacts. Thus, the policy mapping is
at ∼N(Wst + b, σ), and the goal is to learn W, b, and σ. For most of these tasks, the observations
correspond to the state of the problem (in relative coordinates). Thus, we use the term states and
observations interchangeably. In general, the policy is deﬁned with observations as the input, and
hence is trying to solve a POMDP.
RBF policy:
Secondly, we consider a parameterization that enriches the representational capacity
using random Fourier features of the observations. Since these features approximate the RKHS
features under an RBF Kernel , we call this policy parametrization the RBF policy. The features
are constructed as:
where each element Pij is drawn from N(0, 1), ν is a bandwidth parameter chosen approximately as
the average pairwise distances between different observation vectors, and φ is a random phase shift
drawn from U[−π, π). Thus the policy is at ∼N(Wyt + b, σ), where W, b, and σ are trainable
parameters. This architecture can also be interpreted as a two layer neural network: the bottom
layer is clamped with random weights, a sinusoidal activation function is used, and the top layer is
ﬁnetuned. The principal purpose for this representation is to slightly enhance the capacity of a linear
policy, and the choice of activation function is not very signiﬁcant.
Results on OpenAI gym-v1 benchmarks
As indicated before, we train linear and RBF policies with the natural policy gradient on the popular
OpenAI gym-v1 benchmark tasks simulated in MuJoCo . The tasks primarily consist of learning
locomotion gaits for simulated robots ranging from a swimmer to a 3D humanoid (23 dof).
Figure 1 presents the learning curves along with the performance levels reported in prior work using
TRPO and fully connected neural network policies. Table 1 also summarizes the ﬁnal scores, where
“stoc” refers to the stochastic policy with actions sampled as at ∼πθ(st), while “mean” refers to
using mean of the Gaussian policy, with actions computed as at = E[πθ(st)]. We see that the linear
policy is competitive on most tasks, while the RBF policy can outperform previous results on ﬁve
of the six considered tasks. Though we were able to train neural network policies that match the
results reported in literature, we have used publicly available prior results for an objective comparison.
Visualizations of the trained linear and RBF policies are presented in the supplementary video. Given
the simplicity of these policies, it is surprising that they can produce such elaborate behaviors.
Table 2 presents the number of samples needed for the policy performance to reach a threshold value
for reward. The threshold value is computed as 90% of the ﬁnal score achieved by the stochastic
linear policy. We visually veriﬁed that policies with these scores are proﬁcient at the task, and hence
the chosen values correspond to meaningful performance thresholds. We see that linear and RBF
policies are able to learn faster on four of the six tasks.
All the simulated robots we considered are under-actuated, have contact discontinuities, and continuous action spaces making them challenging benchmarks. When adapted from model-based
control to RL, however, the notion of “success” established was not appropriate. To
shape the behavior, a very narrow initial state distribution and termination conditions are used in the
benchmarks. As a consequence, the learned policies become highly trajectory centric – i.e. they are
good only where they tend to visit during training, which is a very narrow region. For example, the
walker can walk very well when initialized upright and close to the walking limit cycle. Even small
perturbations, as shown in the supplementary video, alters the visitation distribution and dramatically
degrades the policy performance. This makes the agent fall down at which point it is unable to
get up. Similarly, the swimmer is unable to turn when its heading direction is altered. For control
applications, this is undesirable. In the real world, there will always be perturbations – stochasticity
in the environment, modeling errors, or wear and tear. Thus, the speciﬁc task design and notion of
Figure 1: Learning curves for the Linear and RBF policy architectures. The green line corresponding
to the reward achieved by neural network policies on the OpenAI Gym website, as of 02/24/2017
(trained with TRPO). It is observed that for all the tasks, linear and RBF parameterizations are
competitive with state of the art results. The learning curves depicted are for the stochastic policies,
where the actions are sampled as at ∼πθ(st). The learning curves have been averaged across three
runs with different random seeds.
success used for the simulated characters are not adequate. However, the simulated robots themselves
are rather complex and harder tasks could be designed with them, as partly illustrated in Section 4.
Table 1: Final performances of the policies
Table 2: Number of episodes to achieve threshold
Modiﬁed Tasks and Results
Using the same set of simulated robot characters outlined in Section 3, we designed new tasks with
two goals in mind: (a) to push the representational capabilities and test the limits of simple policies;
(b) to enable training of “global" policies that are robust to perturbations and work from a diverse set
of states. To this end, we make the following broad changes, also summarized in Table 3:
1. Wider initial state distribution to force generalization. For example, in the walker task, some
fraction of trajectories have the walker initialized prone on the ground. This forces the agent to
simultaneously learn a get-up skill and a walk skill, and not forget them as the learning progresses.
Similarly, the heading angle for the swimmer and ant are randomized, which encourages learning
of a turn skill.
2. Reward shaping appropriate with the above changes to the initial state distribution. For example,
when the modiﬁed swimmer starts with a randomized heading angle, we include a small reward for
adjusting its heading towards the correct direction. In conjunction, we also remove all termination
conditions used in the Gym-v1 benchmarks.
Figure 2: Hopper completes a get-up sequence before moving to its normal forward walking behavior.
The getup sequence is learned along side the forward hopping in the modiﬁed task setting.
Table 3: Modiﬁed Task Description
vx is forward velocity; θ is the heading angle; pz is the height of torso; and a is the action.
Description
Reward (des = desired value)
Swimmer (3D)
Agent swims in the desired direction.
Should recover (turn) if rotated around.
vx −0.1|θ −θdes| −0.0001||a||2
Hopper (2D)
Agent hops forward as fast as possible.
Should recover (get up) if pushed down.
vx −3||pz −pdes
z ||2 −0.1||a||2
Walker (2D)
Agent walks forward as fast as possible.
Should recover (get up) if pushed down.
vx −3||pz −pdes
z ||2 −0.1||a||2
Agent moves in the desired direction.
Should recover (turn) if rotated around.
vx −3||pz −pdes
z ||2 −0.01||a||2
3. Changes to environment’s physics parameters, such as mass and joint torque. If the agent has
sufﬁcient power, most tasks are easily solved. By reducing an agent’s action ability and/or
increasing its mass, the agent is more under-actuated. These changes also produce more realistic
looking motion.
Combined, these modiﬁcations require that the learned policies not only make progress towards
maximizing the reward, but also recover from adverse conditions and resist perturbations. An example
of this is illustrated in Figure 4, where the hopper executes a get-up sequence before hopping to
make forward progress. Furthermore, at test time, a user can interactively apply pushing and rotating
perturbations to better understand the failure modes. We note that these interactive perturbations may
not be the ultimate test for robustness, but a step towards this direction.
Figure 3: (a) Learning curve on modiﬁed walker (diverse initialization) for different policy architectures. The curves are averaged over three runs with different random seeds. (b) Learning curves
when using different number of conjugate gradient iterations to compute ˆF −1
θk g in (5). A policy with
300 Fourier features has been used to generate these results.
Figure 4: We test policy robustness by measuring distanced traveled in the swimmer, walker, and
hopper tasks for three training conﬁgurations: (a) with termination conditions; (b) no termination,
and peaked initial state distribution; and (c) with diverse initialization. Swimmer does not have a
termination option, so we consider only two conﬁgurations. For the case of swimmer, the perturbation
is changing the heading angle between −π/2.0 and π/2.0, and in the case of walker and hopper, an
external force for 0.5 seconds along its axis of movement. All agents are initialized with the same
positions and velocities.
Representational capacity
The supplementary video demonstrates the trained policies. We concentrate on the results of the walker task in the main paper. Figure 3 studies the performance as
we vary the representational capacity. Increasing the Fourier features allows for more expressive
policies and consequently allow for achieving a higher score. The policy with 500 Fourier features
performs the best, followed by the fully connected neural network. The linear policy also makes
forward progress and can get up from the ground, but is unable to learn as efﬁcient a walking gait.
Perturbation resistance
Next, we test the robustness of our policies by perturbing the system with
an external force. This external force represents an unforeseen change which the agent has to resist
or overcome, thus enabling us to understand push and fall recoveries. Fall recoveries of the trained
policies are demonstrated in the supplementary video. In these tasks, perturbations are not applied to
the system during the training phase. Thus, the ability to generalize and resist perturbations come
entirely out of the states visited by the agent during training. Figure 4 indicates that the RBF policy
is more robust, and also that diverse initializations are important to obtain the best results. This
indicates that careful design of initial state distributions are crucial for generalization, and to enable
the agent to learn a wide range of skills.
Summary and Discussion
The experiments in this paper were aimed at trying to understand the effects of (a) representation; (b)
task modeling; and (c) optimization. We summarize the results with regard to each aforementioned
factor and discuss their implications.
Representation
The ﬁnding that linear and RBF policies can be trained to solve a variety of
continuous control tasks is very surprising. Recently, a number of algorithms have been shown to successfully solve these tasks , but all of these works use multi-layer neural networks. This
suggests a widespread belief that expressive function approximators are needed to capture intricate
details necessary for movements like running. The results in this work conclusively demonstrates that
this is not the case, at least for the limited set of popular testbeds. This raises an interesting question:
what are the capability limits of shallow policy architectures? The linear policies were not exemplary
in the “global” versions of the tasks, but it must be noted that they were not terrible either. The RBF
policy using random Fourier features was able to successfully solve the modiﬁed tasks producing
global policies, suggesting that we do not yet have a sense of its limits.
When using RL methods to solve practical problems, the world provides us with neither
the initial state distribution nor the reward. Both of these must be designed by the researcher and
must be treated as assumptions about the world or prescriptions about the required behavior. The
quality of assumptions will invariably affect the quality of solutions, and thus care must be taken in
this process. Here, we show that starting the system from a narrow initial state distribution produces
elaborate behaviors, but the trained policies are very brittle to perturbations. Using a more diverse
state distribution, in these cases, is sufﬁcient to train robust policies.
Optimization
In line with the theme of simplicity, we ﬁrst tried to use REINFORCE , which
we found to be very sensitive to hyperparameter choices, especially step-size. There are a class of
policy gradient methods which use pre-conditioning to help navigate the warped parameter space of
probability distributions and for step size selection. Most variants of pre-conditioned policy gradient
methods have been reported to achieve state of the art performance, all performing about the same .
We feel that the used natural policy gradient method is the most straightforward pre-conditioned
method. To demonstrate that the pre-conditioning helps, Figure 3 depicts the learning curve for
different number of CG iterations used to compute the update in (5). The curve corresponding to
CG = 0 is the REINFORCE method. As can be seen, pre-conditioning helps with the learning
process. However, there is a trade-off with computation, and hence using an intermediate number of
CG steps like 20 could lead to best results in wall-clock sense for large scale problems.
We chose to compare with neural network policies trained with TRPO, since it has demonstrated
impressive results and is closest to the algorithm used in this work. Are function approximators
linear with respect to free parameters sufﬁcient for other methods is an interesting open question
(in this sense, RBFs are linear but NNs are not). For a large class of methods based on dynamic
programming (including Q-learning, SARSA, approximate policy and value iteration), linear function
approximation has guaranteed convergence and error bounds, while non-linear function approximation
is known to diverge in many cases . It may of course be possible to avoid divergence
in speciﬁc applications, or at least slow it down long enough, for example via target networks or
replay buffers. Nevertheless, guaranteed convergence has clear advantages. Similar to recent work
using policy gradient methods, recent work using dynamic programming methods have adopted
multi-layer networks without careful side-by-side comparisons to simpler architectures. Could a
global quadratic approximation to the optimal value function (which is linear in the set of quadratic
features) be sufﬁcient to solve most of the continuous control tasks currently studied in RL? Given
that quadratic value functions correspond to linear policies, and good linear policies exist as shown
here, this might make for interesting future work.
Conclusion
In this work, we demonstrated that very simple policy parameterizations can be used to solve many
benchmark continuous control tasks. Furthermore, there is no signiﬁcant loss in performance due to
the use of such simple parameterizations. We also proposed global variants of many widely studied
tasks, which requires the learned policies to be competent for a much larger set of states, and found
that simple representations are sufﬁcient in these cases as well. These empirical results along with
Occam’s razor suggests that complex policy architectures should not be a default choice unless sideby-side comparisons with simpler alternatives suggest otherwise. Such comparisons are unfortunately
not widely pursued. The results presented in this work directly highlight the need for simplicity
and generalization in RL. We hope that this work would encourage future work analyzing various
architectures and associated trade-offs like computation time, robustness, and sample complexity.
Acknowledgements
This work was supported in part by the NSF. The authors would like to thank Vikash Kumar, Igor
Mordatch, John Schulman, and Sergey Levine for valuable discussion.