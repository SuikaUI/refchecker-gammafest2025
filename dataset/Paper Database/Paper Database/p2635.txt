Multi-Bias Non-linear Activation in Deep Neural Networks
Hongyang Li
 
Wanli Ouyang
 
Xiaogang Wang
 
Department of Electronic Engineering, The Chinese University of Hong Kong.
As a widely used non-linear activation, Rectiﬁed
Linear Unit (ReLU) separates noise and signal
in a feature map by learning a threshold or bias.
However, we argue that the classiﬁcation of noise
and signal not only depends on the magnitude of
responses, but also the context of how the feature responses would be used to detect more abstract patterns in higher layers. In order to output
multiple response maps with magnitude in different ranges for a particular visual pattern, existing
networks employing ReLU and its variants have
to learn a large number of redundant ﬁlters.
In this paper, we propose a multi-bias non-linear
activation (MBA) layer to explore the information hidden in the magnitudes of responses. It
is placed after the convolution layer to decouple
the responses to a convolution kernel into multiple maps by multi-thresholding magnitudes, thus
generating more patterns in the feature space at
a low computational cost. It provides great ﬂexibility of selecting responses to different visual
patterns in different magnitude ranges to form
rich representations in higher layers. Such a simple and yet effective scheme achieves the stateof-the-art performance on several benchmarks.
1. Introduction
Deep neural networks has made great
progress on different domains and applications in recent
years. The community has witnessed the machine trained
with deep networks and massive data being the ﬁrst computer program defeating a European professional in the
game of Go ; the convolutional neural network surpassing human-level performance in image
Copyright 2016 by the author(s).
feature map
non-linearity
Figure 1. Example illustrating how biases can select different patterns. The eyes and mouth have different magnitudes in their
responses to the curved edges.
Whether responses of various
strength should be considered as informative signal or noise depends on more abstract patterns to be detected in higher layers. By
adding different biases to the map with MBA, they are strengthened, preserved, or eliminated according to each bias.
classiﬁcation ; the deep neural network
framework to build an acoustic model in speech recognition .
The importance of activation function has been recognized
in the design of deep models. It not only ﬁts complex data
distributions but also achieves important invariance to various noise, data corruption and transforms affecting recognition . It is placed after every convolution layer with sigmoid or hyperbolic tangent as nonlinear activation. If the input responses are too large positively or negatively, they are compressed to a saturation
value through the nonlinear mapping and thus invariance
is achieved. The rectiﬁed linear unit (ReLU) is found to
be particularly effective in deep neural networks and widely used. It
separates noisy signals and informative signals in a feature
map by learning a threshold (bias). Certain amount of information is discarded after the non-linear activation. However, ReLU also has limitation because of the observations.
Given the same convolution kernel in the convolution layer,
we observe that different magnitudes of responses may indicate different patterns. An illustrative example is shown
in Figure 1. The eyes should have higher magnitudes in
the responses to curved edges compared with those on the
mouth because edge contrast on eyes is generally higher
than that on mouths. Therefore, it is desirable to separate
the responses according to its magnitude.
 
Multi-Bias Non-linear Activation in Deep Neural Networks
More importantly, the separation between informative signal and noise not only depends on the magnitudes of responses, but also the context of how the feature responses
would be used to detect more abstract patterns in higher
layers. In the hierarchical representations of deep neural
networks, a pattern detected at the current layer serves as a
sub-pattern to be combined into a more abstract pattern in
its subsequent layers. For example, curved edges in Figure
1 are detected in the current layer and one of ﬁlters in its
subsequent layer detects eyes. It requires high response of
curved edges and treat the response with moderate magnitude as noise. However, for another ﬁlter in its subsequent
layer to detect mouth, moderate responses are enough.
Unfortunately, if feature responses with ReLU module are
removed by thresholding, they cannot be recovered. A single thresholding cannot serve for multiple purposes. In order to output multiple response maps with magnitudes in
different ranges for a particular visual pattern, networks
employing ReLU have to learn multiple redundant ﬁlters.
A set of redundant ﬁlters learn similar convolution kernels
but distinct bias terms. It unnecessarily increases the computation cost and model complexity, and is easier to overﬁt
training data.
Many delicate activation functions have been proposed to
increase the ﬂexibility of nonlinear function. Parametric
ReLU generalizes Leaky ReLU by learning the slope of the negative input,
which yields an impressive learning behavior on largescale image classiﬁcation benchmark. Other variants in the
ReLU family include Randomized Leaky ReLU where the slope of the negative input is randomly
sampled, and Exponential Linear Unit 
which has an exponential shape in the negative part and ensures a noise-robust deactivation state. Although these variants can reweight feature responses whose magnitudes are
in different ranges, they cannot separate them into different
feature maps.
As summarized in Figure 2, given a feature map as input,
non-linear activation ReLU and its variants only output a
single feature map. However, the MBA module outputs
multiple feature maps without having to learn as many kernels as does ReLU. In some sense, our idea is opposite
to the maxout network . Maxout is also a non-linear activation. However, given K feature maps generated by K convolution kernels, it combines
them to a single feature map:
h(x) = arg
i∈{1,··· ,K} wix + bi,
where x ∈Rd is an image, wi ∈Rd×p×K is a convolution kernel, and bi ∈Rp×K is a bias. The motivations of
MBA and maxout are different and can be jointly used in
the network design to balance the number of feature maps.
(b) Multi-bias activation (MBA)
(a) ReLU and its variance
(c) Maxout
Figure 2. A comparison of MBA with ReLU and its variants, and
maxout. (a) Given a feature map as input, ReLU and its variants
output a single feature map. In order to decouple the responses
to a visual pattern to multiple magnitude ranges, the network has
to learn multiple ﬁlters which have similar convolution kernels
{Wk} and distinct biases. (b) MBA takes one feature map as input and output multiple band maps by introducing multiple biases.
It does not need to learn redundant convolution kernels. The decoupling of signal strength increase the expressive power of the
net. (c) Maxout combines multiple input feature maps to a single output map. ⊗denotes convolution operation and ⊙denotes
non-linear activation.
To this end, we propose a multi-bias non-linear activation
(MBA) layer for deep neural networks. It decouples a feature map obtained from a convolution kernel to multiple
maps, called band maps, according to the magnitudes of
responses. This is implemented by introducing different biases, which share the same convolution kernel, imposed on
the feature maps and then followed by the standard ReLU.
Each decoupled band map corresponds to a range in the response magnitudes to a convolution kernel, and the range is
learned. The responses in different magnitude ranges in the
current layer are selected and combined in a ﬂexible way by
each ﬁlter in the subsequent layer. We provide analysis on
the effect of the MBA module when taking its subsequent
layer into account. Moreover, it is shown that the piecewise linear activation function is a
special case of MBA, where MBA provides more ﬂexibility
in decoupling the magnitudes and also in combining band
maps from different convolution kernels. Finally, The experimental results on the CIFAR and SVHN datasets show
that such a simple and yet effective algorithm can achieve
state-of-the-art performance.
Multi-Bias Non-linear Activation in Deep Neural Networks
Non-linearity
Input Maps
Convolution
Current Layer
Next Layer
Biased Maps
Concatenated Maps
Piecewising
Current Layer
Next Layer
Convolution
Input Maps
Piecewised Maps
Figure 3. (a) The proposed multi-bias activation (MBA) model. Given the input feature maps, the MBA module adds biases bn,k on these
maps to generate NK band maps, then these ‘biasing’ maps are fed into the subsequent convolutional layer in a ﬂexible way. (b) The
piecewise linear function (APL) module where a set of K learnable parameters {ak, bk} sums up the maps within each channel before
feeding N output maps into the next convolution layer and thus providing no cross-channel information. The additional parameters
brought by these two modules are NK and 2KWH, respectively.
2. Multi-bias Non-linear Activation
The goal of this work is to decouple a feature map into
multiple band maps by introducing a MBA layer, thus enforcing different thresholds on the same signal where in
some cases responses in a certain range carry useful patterns and in another case they are merely noise. After passing through ReLU, these band maps are selected and combined by the ﬁlters in the subsequent convolution to represent more abstract visual patterns with large diversity.
2.1. Model formulation
Fig.3 (a) depicts the pipeline of the MBA module. After convolution in CNN, we obtain a set of feature maps.
We represent the n-th feature map by vector xn ∈RW H,
where n = 1 . . . N, W and H denote the spatial width and
height of the feature map, respectively. If the input of the
MBA layer is the response obtained by a fully-connected
layer, we can simply treat W = H = 1. The MBA layer
separates xn into K feature maps ˆxn,k as follows:
ˆxn,k = σ(xn + bn,k) for k = 1, . . . , K,
where σ(·) is the element-wise nonlinear function. Note
that the only parameter introduced by the MBA module is
a scalar bn,k. Denote xn,i and ˆxn,k,i as the i-th element in
the map xn and ˆxn,k respectively, where i = 1, . . . , WH,
we have the element-wise output form of the MBA module
deﬁned as:
ˆxn,i = σ(xn,i + bn,k).
In this paper, we mainly consider using ReLU as the nonlinear function because it is found to be successful in many
applications. In ReLU, the response xn,i is thresholded by
the bias bn,k as follows:
if xn,i ≤−bn,k,
then ˆxn,i = 0,
if xn,i > −bn,k,
then ˆxn,i = xn,i + bn,k.
2.2. MBA with its subsequent convolutional layer
The output of the MBA module is a set of maps {ˆxn,k|n =
1, . . . , N, k = 1, . . . , K}. These maps are then linearly
combined by its subsequent convolutional layer into hm as
Wm,n,kˆxn,k
where m = 1, . . . , M and Wm,n,kˆxn,k is the representation of convolution by matrix multiplication. Denote the
j-th element in hm by hm,j, we have
wm,n,k,i,j ˆxn,k,i,
where wm,n,k,i,j denotes the (j, i)-th element in the matrix
Wm,n,k. Taking the representation of ˆx by x in (2) into
consideration, we have the factorized version of (5):
wm,n,k,j,iσ(xn,i + bn,k),
am,n,k,j,iσ(xn,i + bn,k),
m,n,j,ium,n,j,i,
Multi-Bias Non-linear Activation in Deep Neural Networks
a = [1.00, 0.02, 0.07, 0.07]
b = [-0.23, -0.01, -0.02, -0.02]
layer conv2_3
learned activation
(a) ReLU-shape
a = [0.34, 0.33, 0.59, 0.65]
b = [0.53, 0.16, -0.55, -1.12]
layer conv2_1
learned activation
(b) Shifted exponential-shape
a = [0.37, 0.68, -0.58, -0.25]
b = [0.99, 0.48, -0.58, -1.09]
layer conv1_1
learned activation
(c) Sigmoid-shape
a = [0.43, 0.15, -0.80, -0.38]
b = [0.69, 0.32, -0.67, -1.21]
layer conv2_1
learned activation
(d) Trapezoid-shape
a = [0.70, 0.68, 0.22, -0.00]
b = [0.62, 0.24, -0.56, -1.10]
layer conv2_1
learned activation
a = [0.57, 0.56, 0.47, 0.37]
b = [0.16, 0.01, -0.19, -0.39]
layer conv2_2
learned activation
a = [0.32, 0.33, -0.57, -0.68]
b = [0.26, 0.06, -0.52, -0.64]
layer conv1_2
learned activation
a = [0.07, 0.19, -0.62, -0.76]
b = [0.30, 0.05, -0.65, -0.92]
layer conv3_1
learned activation
a = [0.11, 0.18, 0.66, 0.72]
b = [0.13, -0.08, -0.37, -0.47]
layer conv3_2
learned activation
a = [0.13, 0.13, -0.40, -0.90]
b = [0.57, 0.19, -0.62, -1.31]
layer conv2_1
learned activation
a = [0.01, 0.16, -0.48, -0.86]
b = [0.21, 0.04, -0.25, -0.38]
layer conv2_2
learned activation
a = [0.25, 0.47, 0.53, 0.66]
b = [-0.19, -0.27, -0.28, -0.30]
layer conv2_3
learned activation
Figure 4. The learned MBA parameters a, b in a certain layer (K = 4). We use the MBA model #9 in Table 2 as an illustration. Each
ﬁgure plots the mapping function Bm,n,j,i. The horizontal axis indicates xn,i in the input feature map and vertical axis indicates um,n,j,i
in the output map in (6). The index of feature channels m and n, and locations j and i are dropped to be concise. The ﬁst row shows
four typical shape during the activation learning whilst the rest gives more visual examples.
where w′ and u take the forms of:
wm,n,k,j,i
m,n,j,iam,n,k,j,i,
am,n,k,j,iσ(xn,i + bn,k),
here w′ is an intermediate variable to generate the coef-
ﬁcient am,n,k,j,i. The formulation in (8) shows that the
element xn,i in the feature map is separated by multiple
biases to obtain multiple ReLU functions σ(xn,i + bn,k),
and then these ReLU functions are linearly combined by
the weights am,n,k,j,i to obtain um,n,j,i, which serves as
the decoupled pattern in the MBA layer for the m-th channel in the next convolutional layer at location j. The j-th
element in h, i.e., hm,j is a weighted sum of um,n,j,i as
shown in (6). Therefore, the key is to study the mapping
xn,i at location i in an input feature map to um,n,j,i at location j in an output feature map in (8). Such a mapping
is across feature channels and locations. (8) can be deﬁned
as a mapping function um,n,j,i = Bm,n,j,i(xn,i). There
is a large set of such mapping functions {Bm,n,j,i} which
are characterized by parameters {am,n,k,j,i} and {bn,k}. In
the following discussion, we skip the subscripts m,n,j,i to
be concise.
We show the learned parameters of ak and bk for the input x and the decoupled pattern u in Figure 4. Speciﬁcally,
Fig.4 (a) approximates the ReLU unit where a ≈ 
is the base along the ﬁrst axis in a 4-dimension space; Fig.4
(b) displays the property of leaky ReLU to
allow gradient back-propagation around small negative input; moreover, it has a steeper slope in the positive region
than ReLU, which makes the training process faster. Fig.4
(c) stimulates the case where the activation function serves
as a sigmoid non-linearity, i.e., only allowing small values
around zero to backpropagate the gradients. The non-linear
activation function in Fig.4 (d) forms a trapezoid-shaped
and serves as the histogram bin ‘collector’ - only selecting
the input x within a small range and shuttering all the other
activations outside the range. Note that the mapping is concave due to the negative values of aik when x →+∞, in
which case neither the standard ReLU nor APL unit could
describe. In addition, the second and third rows of Figure
4 show more examples of the mappings decomposed from
parameters in the convolution layer, from which we can
see a wide diversity of patterns captured by the multi-bias
Multi-Bias Non-linear Activation in Deep Neural Networks
activations of input neurons
# of occurrence
Figure 5. Histogram of the neuron activations before the MBA
module, of which most activations are sparse and centered around
mechanism to decouple the signal strength and the crosschannel sharing scheme to combine visual representations
in a much more ﬂexible way.
Figure 5 shows the histogram of response magnitudes in
the input feature map before feeding into the MBA module. We adopt the architecture of model #6 in Table 2 on
CIFAR-10 to obtain the distribution result, where we randomly select 1,000 samples to get the average activations
over all the MBA output. The histogram distributes around
zero, which indicates the learned pattern u or mapping B
affects the neurons only in a small range near zero.
2.3. Relationship with piecewise-linear functions
To see further the advantage of our algorithm, we compare
our MBA layer with the recently proposed method called
adaptive piecewise linear function unit (APL) . It formulates the activation function as a sum
of hinge-shaped functions. Fig.3 (b) describes the pipeline
of the APL module. Given the feature map xn, it generates
the output ˆxn,k,i from k piecewise linear functions from
each element xn,i in xn as follows:
ˆxn,i = max(0, xn,i) +
ak,i max(0, −xn,i + bk,i),
where ak,i, bk,i are learnable parameters to control the
shape of the non-linearity function. Then the subsequent
convolutional layer computes the weighted sum of ‘piecewise-linearized’ maps to have the output hm,j of channel
m at location j as follows:
ak,i max(0, −xn,i + bk,i)
wm,n,i,jun,i,
Table 1. Investigation of the MBA module in different architectures on the MNIST and CIFAR-10 dataset. We choose K = 4 for
both MBA and APL. Bracket [·] denotes a stack of three convolution layers. ‘VaCon’ means the vanilla neural network. ‘@’ represents a different number of output maps before the MBA module,
see context for details.
Shallow network: 32-64-128-1024-1024
Deep network: - - -1024-1024
where w is the parameters of the subsequent convolution
kernel and we deﬁne
ak,i max(0, −xn,i + bk,i),
in a similar derivation through (4) to (6). It is obviously
seen that APL represented in (10) is a special case of MBA
by enforcing um1,n,j,i = um2,n,j,i, ∀m1, m2 in (8). Therefore, for different target channel with index m1 and m2,
the piecewise-linear function provides the same u∗while
MBA provides different u∗. Take again the case in Figure
1 for instance, the output channel m1 = 1 for eyes requires
u with high magnitude while m2 = 2 for mouth requires
u with low magnitude. This kind of requirement cannot be
met by APL but can be met by our MBA. This is because
our MBA can separate single x into different u∗for different m according to the magnitude of x while APL cannot.
A closer look at the difference between our algorithm and
the APL unit is through the two diagrams in Figure 3.
When an input feature map is decoupled into multiple band
maps after the biasing process, APL only recombines band
maps from the same input feature map to generate one output. However, MBA concatenates band maps across different input maps and allows to select and combine them in
a ﬂexible way, thus generating a much richer set of maps
(patterns) than does the APL.
Table 1 shows the investigation breakdown on MNIST and
CIFAR-10 when comparing MBA with APL and vanilla
Multi-Bias Non-linear Activation in Deep Neural Networks
neural networks1. Here we adopt two types of network: the
shallow one has three convolutional layers with the number
of output 32, 64, 128, respectively and two fully connected
layers which both have an output neurons of 1024; the deep
one has nine convolutional layers divided into three stacks
with each stack having the same number of output 32, 64,
128 and two fully connected layers. All convolutional layers have the same kernel size of 3 and we use max pooling
of size 2, stride 2, at the end of each convolution or stack
layer. Also we keep training parameters the same across
models within each architecture to exclude external factors.
The number of parameters in each setting of Table 1 does
not count those in the fully connected layers and we can
compare the computational cost of MBA, APL and vanilla
net quantitatively. Take the deep architecture case for example, the vanilla network has about 480k parameters with
the designated structure; by applying the MBA module on
it, the additional parameters are (a) the increasing channels
of kernels in each subsequent layer, i.e., Nq2M(K −1),
where q = 3 is the kernel size; and (b) a small fraction
of the bias term, NK. Therefore we have a computational
cost of 480k + 1.5M + 3k = 2M. However, if we force the
vanilla model to have the same output maps to be fed into
the subsequent layers (models denoted as ‘@4x’), there has
to be N(K −1) more maps coming from the convolutional
kernel in the current layer. As mentioned in Section 1, such
a scheme would increase the parameter overhead of kernels
to a great extent. That is approximately K times the size of
the MBA module (in this case, 7.6M vs 2M).
Several remarks can be drawn from Table 1. First, both
MBA and APL modules imposed on the vanilla net can reduce test errors. Second, as the number of feature maps
increases, vanilla networks can further boost the performance. However, it is less inferior compared with the MBA
module (0.42% vs 0.31% on MNIST) where the latter has
a much smaller set of parameters. Third, the piecewise
linear function does not perform well compared with the
proposed method, even though it has the same network
width (APL@4x) or similar parameters (APL@same, by
changing the output number of feature maps) as in the
MBA model. This is probably due to the limited expressive power, or inferior ability of feature representation in
(11). Therefore, these observations further proves the importance of applying the MBA module to separate the responses of various signals and feed the across-channel information into the next layer in a simple way, instead of
buying more convolutional kernels.
1 We do not use the tricks presented in APL , for example, changing the dropout ratio or adding them
before certain pooling layer.
3. Experimental results
We evaluate the proposed MBA module and compare with
other state-of-the-arts on several benchmarks. The CIFAR-
10 dataset consists of 32×32
color images on 10 classes and is divided into 50,000
training images and 10,000 testing images. The CIFAR-
100 dataset has the same size and format as CIFAR-10,
but contains 100 classes, with only one tenth as many labeled examples per class. The SVHN 
dataset resembles MNIST and consists of color images of
house numbers captured by Google street view. We use the
seoncd format of the dataset where each image is of size
32 × 32 and the task is to classify the digit in the center.
Additional digits may appear beside it and must be ignored.
All images are preprocessed by subtracting each pixel value
by the mean computed from the corresponding training set.
We follow a similar split-up of the validation set from the
training set as , where one tenth of
samples per class from the training set on CIFAR, and 400
plus 200 samples per class from the training and the extra
set on SVHN, are selected to build a validation set.
3.1. Implementation Details
Our baseline network has three stacks of convolutional layers with each stack containing three convolutional layers,
resulting in a total number of nine layers. Each stack has
 , and ﬁlters, respectively. The kernel size is 3 and padded by 1 pixel on
each side with stride 1 for all convolutional layers. At the
end of each convolutional stack is a max-pooling operation
with kernel and stride size of 2. The two fully connected
layers have 2048 neurons each. We also apply dropout with
ratio 0.5 after each fully connected layers. The ﬁnal layer
is a softmax classiﬁcation layer.
The optimal training hyperparameters are determined on
each validation set. We set the momentum as 0.9 and the
weight decay to be 0.005. The base learning rate is set to
be 0.1, 0.1, 0.05, respectively. We drop the learning rate by
10% around every 40 epoches in a continuous exponential
way and stop to decrease the learning rate until it reaches a
minimum value (0.0001). For the CIFAR-100 and SVHN
datasets, we use a slightly longer cycle of 50 epoches to
drop the rate by 10%. The whole training process takes
around 100, 150, and 150 epoches on three benchmarks.
We use the hyperparameter K = 4 for the MBA module and the mini-batch size of 100 for stochastic gradient
descent. All the convolutional layers are initialized with
Gaussian distribution with mean of zero and standard variation of 0.05 or 0.1. We do not carefully cross-validate the
initialized biases in the MBA module to ﬁnd the optimal
settings but simply choose a set of constants to differentiate the initial biases.
Multi-Bias Non-linear Activation in Deep Neural Networks
Table 2. Ablation study of applying the bias module with different
width and depth into the network on CIFAR-10. Empty entry
means that MBA is not included while the rest employs a MBA
module and speciﬁes the number of output feature maps for the
corresponding convolution layer.
Test Error.
128-128-128
256-256-512
128-128-256
256-256-512
128-128-256
128-128-128
256-256-512
128-128-256
128-128-128
256-256-512
Table 3. Effects of the hyperparameter K of MBA. The architecture is the one used in model #6 from Table 2. (conv*) means
that we set a particular value of K in that convolution stack only.
Val. Error
K = 4 (conv2), K = 2 (conv3)
K = 4 (fixed MBA)
3.2. Ablation Study
First, we explicitly explore the ability of the MBA module
in CNN with different numbers of channels in each layer.
From Table 2 we conclude that adding more MBA layers
into the network generally reduces the classiﬁcation error.
Also, the width of the network, i.e., the number of ﬁlters
in each stack, plays an important role to reduce the classi-
ﬁcation error. Considering models #4-#6, we can see that
larger number of ﬁlters results in more expressive power
the network and thus smaller classiﬁcation error. It can be
observed that the use of more MBA layers in model #6
performs better than the use of fewer MBA layers in model
#3. However, the MBA module imposed on all stacks does
not perform better than the one imposed on stack 2 and 3
only. This result shows that it is not necessary to use the
MBA layer for lower convolutional layers that are close to
raw data. Moreover, the improvement of our method does
not come from introducing more parameters. For example,
model #5 has much fewer parameters than the baseline and
it still outperforms the baseline.
Second, we investigate the effect of the hyperparameter K
in the MBA module (Table 3), which is conducted on the
Table 4. Classiﬁcation test errors on CIFAR dataset with and
without data augmentation. The best results are in bold.
Without Data Augmentation
ReLU 
Channel-out 
Maxout 
NIN 
DSN 
APL 
With Data Augmentation
Maxout 
DropConnect 
SelAtten 
NIN 
DSN 
APL 
BayesNet 
ELU 
CIFAR-10 validation set. In the MBA layer, a channel is
decoupled to K channels. We can observe that the inclusion of MBA layer on the network reduces the classiﬁcation
error when K = 2, 4 and 8. To further validate the necessity of the learnable biases, we ﬁx the bias parameters after
initialization. In this case, the validation error increases
from 6.7% for learned bias to 10.8% for ﬁxed bias. Moreover, we ﬁnd that setting a large K = 8 does not reduce
the classiﬁcation error further compared with K = 4 because it is not necessary to decouple a single channel into
too many channels.
3.3. Comparison to State-of-the-Arts
We show the comparison results of the proposed MBA with
other state-of-the-arts, including ReLU , Channel-out , Maxout , Network in Network (NIN) , Deep Supervision (DSN) , APL
 , DropConnect ,
Selective Attention Model , Scalable
Bayes Network and Exponential Linear Unit on the CIFAR and SVHN
datasets. We will use the network architecture of candidate
model #6 as the ﬁnal MBA model thereafter.
CIFAR. Without data augmentation, Table 4 indicates that
we achieve a relative 29.8% and 24% gain over previous state-of-the-arts on CIFAR-10 and CIFAR-100, respectively. As for the data augmentation version of our
Multi-Bias Non-linear Activation in Deep Neural Networks
Table 5. Classiﬁcation test errors on SVHN dataset without data
augmentation. The best results are in bold.
Test Error
StoPool 
ReLU 
Maxout 
NIN 
DropConnect 
DSN 
GenPool 
model, during trainin we ﬁrst resize each image to a random size sampled from and then crop a 32 × 32
region randomly out of the resized image. Horizontal ﬂip
is also adopted. For testing, we employ a multi-crop voting
scheme, where crops from ﬁve corners (center, top right
and left, bottom right nad left) are extracted and the ﬁnal
score is determined by their average. Note that we do not
aggressively resort to trying all kinds of data augmentation
techniques , such as color channel shift,
scalings, etc.; or extend the network’s depth to extremely
deep, for example, ELU used a model
of 18 convolutional layers. Our algorithm performs better
than previous ones by an absolute reduction of 1.17% and
0.18% with data augmentation on these two datasets.
SVHN. We further conduct the comparison experiment on
the house number dataset and we achieve a test error rate
of 1.80% without data augmentation (Table 5).
4. Conclusion and Discussion
In this work, we propose a multi-bias non-linearity activation (MBA) module in deep neural networks. A key observation is that magnitudes of the responses from convolutional kernels have a wide diversity of pattern representations in the network, and it is not proper to discard weaker
signals with single thresholding. The MBA unit placed after the feature maps helps to decouple response magnitudes
to multiple maps and generates more patterns in the feature
space at a low computational cost. We demonstrate that
our algorithm is effective by conducting various independent component analysis as well as comparing the MBA
method with other state-of-the-art network designs. Experiments show that such a design has superior performance
than previous state-of-the-arts.
While the MBA layer could enrich the expressive power of
the network, we believe more exploration of the discriminative features can be investigated to leverage the information hidden in the magnitude of response. Such an intuition
is triggered by the fact that the non-linearity actually preserves or maintains the depth property of a network. One
simple way is to divide the input feature maps, feed them
into multiple non-linearities, and gather together again as
the input of the subsequent convolutional layer.